[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3\\n3 4') == '5'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n4 6') == '5'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5'\nassert solution('1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n1 4\\n4 2\\n1 2') == '5'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5''') == '1 4'\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6''') == '6'\nassert solution('''8\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n4 6''') == '5'\nassert solution('''8\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n4 6''') == '3 4 5 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1\\n2'\nassert solution('1 2\\n2 3') == '1 2\\n2 3'\nassert solution('1 2\\n2 3\\n3 4') == '1 2\\n2 3\\n3 4'\nassert solution('1 2\\n2 3\\n3 4\\n4 5') == '1 2\\n2 3\\n3 4\\n4 5'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 7\\n1 2\\n1 3\\n2 3\\n4 7\\n4 6\") == \"5 1 8\"\nassert solution(\"7 8\\n1 2\\n1 3\\n2 3\\n4 7\\n4 6\") == \"5 1 8\"\nassert solution(\"6 9\\n1 2\\n1 3\\n2 3\\n4 7\\n4 6\") == \"5 1 8\"\nassert solution(\"7 9\\n1 2\\n1 3\\n2 3\\n4 7\\n4 6\") == \"5 1 8\"\nassert solution(\"10 20\\n1 2\\n1 3\\n2 3\\n4 7\\n4 6\\n5 6\\n5 7\\n6 8\\n7 9\\n8 10\") == \"5 1 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '10\\n2 8 1 2 4 1 20 4 5') == '20 8'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nprint(solution('10 2 8 1 2 4 1 20 4 5'))\n\n------ Test 24 passed -----\n\n\n------ Test 1 failed -----\nTraceback (most recent call last):\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 21, in <module>\n    print(solution('10 2 8 1 2 4 1 20 4 5'))\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 15, in solution\n    assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nAssertionError: wrong output: (20, 8)\n------ Test 1 failed -----\n\n\n------ Test 2 failed -----\nTraceback (most recent call last):\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 21, in <module>\n    print(solution('10 2 8 1 2 4 1 20 4 5'))\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 15, in solution\n    assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nAssertionError: wrong output: (20, 8)\n------ Test 2 failed -----\n\n\n------ Test 3 failed -----\nTraceback (most recent call last):\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 21, in <module>\n    print(solution('10 2 8 1 2 4 1 20 4 5'))\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 15, in solution\n    assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nAssertionError: wrong output: (20, 8)\n------ Test 3 failed -----\n\n\n------ Test 4 failed -----\nTraceback (most recent call last):\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 21, in <module>\n    print(solution('10 2 8 1 2 4 1 20 4 5'))\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 15, in solution\n    assert solution('10 2 8 1 2 4 1 20 4 5') == '20 8'\nAssertionError: wrong output: (20, 8)\n------ Test 4 failed -----\n\n\n------ Test 5 failed -----\nTraceback (most recent call last):\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 21, in <module>\n    print(solution('10 2 8 1 2 4 1 20 4 5'))\n  File \"/home/al/Python/Python39/i.python/zadanie/7.py\", line 15, in solution\n    "
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n10\n10 2 8 1 2 4 1 20 4 5\n''') == '20 8'\n\nassert solution('''\n10\n1 2 3 4 2 1 5 3 5\n''') == '1 2 3 4 5 5 5'\n\nassert solution('''\n10\n3 2 1 1 2 1 3 4 1\n''') == '1 3 4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\nimport re\n\nimport pytest\n\n\n@pytest.mark.parametrize('test_input,expected', [\n    ('10\\n10 2 8 1 2 4 1 20 4 5', '20 8'),\n])\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nprint(solution(\"10 2 8 1 2 4 1 20 4 5\"))\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 4 8 2 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nfrom sys import stdin, stdout\n\nn = int(stdin.readline().strip())\ndivisors = list(map(int, stdin.readline().strip().split()))\nx, y = 1, 1\nfor i in range(0, n, 2):\n    if divisors[i] == x:\n        x = divisors[i + 1]\n    else:\n        y = divisors[i + 1]\n\nstdout.write(str(x) +'' + str(y))"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\") == \"2 2\"\nassert solution(\"3\\n1 2 2\") == \"2 1\"\nassert solution(\"3\\n2 2 1\") == \"2 2\"\nassert solution(\"3\\n3 2 1\") == \"3 1\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\nsetl = set(l)\na = 0\nb = 0\nc = 0\nd = 0\nfor i in setl:\n    if l.count(i) % 2 == 0:\n        if l.count(i) % 2 == 0:\n            c += 1\n            if i % 2 == 0:\n                a += i\n            else:\n                d += i\n    else:\n        if l.count(i) % 2 == 1:\n            c += 1\n            if i % 2 == 0:\n                b += i\n            else:\n                d += i\nprint(a, b)\nprint(c, d)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"20 8\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1 2'\nassert solution('1\\n1\\n') == '2'\nassert solution('1\\n1\\n1\\n') == '2 2'\nassert solution('1\\n1\\n1\\n1\\n') == '2 2 2 2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('2 4 3') == '12'\nassert solution('1 2 3 4') == '12'\nassert solution('5 2 2 2') == '10'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 3\") == \"16\"\nassert solution(\"5 5 4\") == \"56\"\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\"\"\") == \"24\"\nassert solution(\"\"\"5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\"\"\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == 24\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == 56\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\"\"\"\n\n\"\"\"\nimport sys\nn, m, k = [int(i) for i in sys.stdin.readline().split()]\nlst = []\nfor _ in range(n):\n    lst.append([int(i) for i in sys.stdin.readline().split()])\n\nl = min(n, m//2)\nd = []\nfor i in range(l):\n    x = 0\n    for j in range(i, m-i):\n        x += lst[i][j]\n    for j in range(i+1, n-i):\n        x += lst[j][m-i-1]\n    d.append(x)\n\nprint(max(d)%k if k!= 0 else 0)\n\"\"\"\n\nimport sys\nn, m, k = [int(i) for i in sys.stdin.readline().split()]\nlst = [[int(i) for i in sys.stdin.readline().split()] for _ in range(n)]\n\nl = min(n, m//2)\n\nfor i in range(l):\n    x = 0\n    for j in range(i, m-i):\n        x += lst[i][j]\n    for j in range(i+1, n-i):\n        x += lst[j][m-i-1]\n    if x%k == 0:\n        print(x)\n        break\nelse:\n    print(0)"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == 24\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == 56\n\n\n-----\n1. \u0412\u0441\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u044b \u043f\u043e\u043b\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438 \u0434\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e n, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0440\u0430\u0442\u043d\u044b 3 \u0438\u043b\u0438 5 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0434\u0435\u043d\u044c.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 10^9) \u2014 \u043a\u043e\u043d\u0435\u0446 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 n \u0447\u0438\u0441\u0435\u043b \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\n3\n\u0412\u044b\u0445\u043e\u0434\n2\n1\n1\n\n\u0412\u0445\u043e\u0434\n7\n\u0412\u044b\u0445\u043e\u0434\n3\n2\n1\n1\n1\n\n-----\n2. \u0412\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0434\u0432\u0430 \u0438 \u043d\u0430 \u043f\u044f\u0442\u044c, \u043e\u043d\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 10^6) \u2014 \u043a\u043e\u043d\u0435\u0446 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 n \u0447\u0438\u0441\u0435\u043b \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0427\u0438\u0441\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\n4\n\u0412\u044b\u0445\u043e\u0434\n2 4 6 8\n\n\u0412\u0445\u043e\u0434\n10\n\u0412\u044b\u0445\u043e\u0434\n2 4 6 8 10 12 14 16 18 20\n\n\u0412\u0445\u043e\u0434\n1\n\u0412\u044b\u0445\u043e\u0434\n1\n\n-----\n3. \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 10 \u0441\u043b\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435).\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 (\u0441\u043b\u043e\u0432\u0430 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u044b \u043e\u0442 1 \u0434\u043e n).\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\n\u043a\u0440\u043e\u043c\u0435\u043f\u044c\u0435\u0432\u0441\u043a\u0430\u044f \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435\n\u0412\u044b\u0445\u043e\u0434\n1 \u043a\u0440\u043e\u043c\u0435\u043f\u044c\u0435\u0432\u0441\u043a\u0430\u044f \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435\n2 \u043e\u043d\u0438\n3 \u0441\u043b\u043e\u0432\u0430\n4 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0435\n5 \u0434\u0430\u043d\u043d\u044b\u0435\n6 \u0441\u0442\u0440\u043e\u043a\u0438\n7 \u0434\u0430\u043d\u043d\u044b\u0435\n8 \u0441\u0442\u0440\u043e\u043a\n\n-----\n4. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0434\u043e 10000 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438 \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u0435 \u0435\u0435 \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0433\u043e \u0446\u0435\u043b\u043e\u0433\u043e.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 10^6) \u2014 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u043b\u044f \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u044f.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0448\u0435\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\n4\n\u0412\u044b\u0445\u043e\u0434\n6\n\n\u0412\u0445\u043e\u0434\n10\n\u0412\u044b\u0445\u043e\u0434\n20\n\n\u0412\u0445\u043e\u0434\n1\n\u0412\u044b\u0445\u043e\u0434\n0\n\n-----\n5. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e,"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n\nprint('Success')\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 4 3 2\") == 4\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == '4\\nLRRR', 'Wrong answer'\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nLRLRRR', 'Wrong answer'\nassert solution('3\\n2 2 2\\n') == '1\\nR', 'Wrong answer'\nassert solution('4\\n1 2 4 3\\n') == '4\\nLLRR', 'Wrong answer'\nassert solution('4\\n1 2 4 3\\n') == '4\\nLLRR', 'Wrong answer'\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\nseq = deque(map(int, input().split()))\nstack = []\nmax_length = 0\n\nwhile seq:\n    cur_num = seq.pop()\n    while stack and stack[-1] >= cur_num:\n        stack.pop()\n    stack.append(cur_num)\n    max_length = max(max_length, len(stack))\n\nprint(max_length)\n\nfor num in stack:\n    print('L' if num == stack[0] else 'R', end='')\nprint()\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"5\\n1 2 4 3 2\"\n) == \"4\\nLRRR\"\nassert solution(\n\"7\\n1 3 5 6 5 4 2\"\n) == \"6\\nLRLRRR\"\nassert solution(\n\"3\\n2 2 2\"\n) == \"1\\nR\"\n\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\nSolution.check_solution(solution)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nR\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == 4\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 4 3 2') == '4'\nassert solution('1 3 5 6 5 4 2') == '6'\n\n\"\"\"\n\nimport sys\nimport os\nimport math\nfrom collections import deque\n\n\nclass MyQueue:\n    def __init__(self, initial_values):\n        self.queue = initial_values\n        self.size = len(initial_values)\n        self.min_queue = deque(maxlen=self.size)\n        self.max_queue = deque(maxlen=self.size)\n\n    def pop(self):\n        self.size -= 1\n        return self.queue.pop()\n\n    def push(self, item):\n        self.size += 1\n        self.queue.append(item)\n\n    def min(self):\n        return self.min_queue[-1] if self.min_queue else sys.maxsize\n\n    def max(self):\n        return self.max_queue[-1] if self.max_queue else -sys.maxsize\n\n    def min_push(self, item):\n        if item < self.min():\n            self.min_queue.append(item)\n        else:\n            self.queue.append(item)\n\n    def max_push(self, item):\n        if item > self.max():\n            self.max_queue.append(item)\n        else:\n            self.queue.append(item)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4'\nassert solution('7\\n1 3 5 6 5 4 2') == '6'\nassert solution('3\\n2 2 2') == '1'\nassert solution('4\\n1 2 4 3') == '4'\n\"\"\"\n\n\"\"\"\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0432\u044b\u0432\u0435\u043b \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0443\u044e \u0434\u043b\u0438\u043d\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0442\u044b\u0441\u044f\u0447.\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 4 4 7 4 1\\n') == '3'\nassert solution('5\\n2 2 5 2 5\\n') == '3'\nassert solution('4\\n1 3 3 7\\n') == '-1'\nassert solution('2\\n2 8\\n') == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_expected_1\nassert solution(test_input_2) == test_expected_2\nassert solution(test_input_3) == test_expected_3\nassert solution(test_input_4) == test_expected_4\nassert solution(test_input_5) == test_expected_5\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 4 4 7 4 1\\n') == '3'\nassert solution('5\\n2 2 5 2 5\\n') == '3'\nassert solution('4\\n1 3 3 7\\n') == '-1'\nassert solution('2\\n2 8\\n') == '3'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nmin_d = float('inf')\nfor d in range(101):\n    if d < 0:\n        continue\n    is_equal = True\n    for i in range(n):\n        if a[i] + d!= a[i] and a[i] - d!= a[i]:\n            is_equal = False\n            break\n    if is_equal:\n        min_d = min(min_d, d)"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n1 3 3 7') == '3'\nassert solution('4\\n1 3 3 7') == '-1'\nassert solution('2\\n2 8') == '3'"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5 2 5\") == 3\nassert solution(\"1 4 4 7 4 1\") == 3\nassert solution(\"1 2 3 4 5\") == -1\nassert solution(\"1 1 2 3 3\") == 1\nassert solution(\"1 2 3 4 5\") == -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 3 5 2 4''') == '1'\nassert solution('''3\n1 2 1 2\n''') == '2'\nassert solution('''2\n1 2\n''') == '3'\nassert solution('''1\n5\n''') == '-1'\n\nprint('The local tests are done. Try to solve the problem!')\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 3\nassert solution(\"5\\n2 1 4 5 4\") == 3\nassert solution(\"6\\n2 1 4 5 5 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 4 7 4 1\") == 3\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('6\\n1 3 3 7 4 1') == '3'\nassert solution('7\\n2 2 5 2 5') == '3'\nassert solution('8\\n1 2 4 6 8') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"2 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"3\"\nassert solution(\"2 8\") == \"3\"\nassert solution(\"1 3 7\") == \"1\"\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\\n\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\\n\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 2 4 4\n1 1 3 5\n3 1 5 5\n''') == 'NO'\nassert solution('''5 2 10 5\n3 1 7 6\n8 1 11 7\n''') == 'YES'\nassert solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 7 6\") == \"YES\"\n\nassert solution(\"5 2 10 5\") == \"YES\"\n\nassert solution(\"0 0 4 6\") == \"NO\"\n\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n\"\"\"\n\n\nimport math\nfrom typing import NamedTuple, Tuple"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"NO\"\nassert solution(\"0 0 7 4\") == \"YES\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1098\") == 21\nassert solution(\"10\") == 19\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\nprint(solution(\"1098\"))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\nassert solution(\"1\") == 1\n\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('123') == 6\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1098\") == 20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == \"20\"\nassert solution(\"10\") == \"19\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1098') == 20\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 0 2 4\") == '5 3 1 2 4'\nassert solution(\"7 0 0 1 4 0 6\") == '7 3 2 1 4 5 6'\nassert solution(\"7 4 0 3 0 5 1\") == '7 4 2 3 6 5 1'\nassert solution(\"5 0 0 2 4\") == '5 3 1 2 4'\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n5 0 0 2 4\\n') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 4 0 3 0 5 1\\n') == '7 4 2 3 6 5 1'\nassert solution('5\\n2 1 0 0 0\\n') == '2 1 4 5 3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5 0 0 2 4\\n\") == \"5 3 1 2 4\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\nassert solution(\"3\\n0 0 0\") == \"0 0 0\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(open(0).read().strip())"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n1 1 1 2 1\") == \"NO\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\n\nassert solution('5 2\\n3 2 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 2 3') == 'YES'\nassert solution('1 2 1 2 3') == 'NO'\nassert solution('1 2 2 3') == 'YES'\nassert solution('1 2 2 1 3') == 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 2 3\\n\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\\n\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\\n\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\\n\") == \"NO\"\n\nprint('Success')"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 2 3') == 'NO'\nassert solution('3 2 1 2 3') == 'YES'\nassert solution('2 1 1 2 1') == 'NO'\nassert solution('2 1 2 1 2') == 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('5 2\\n2 1 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('4 2\\n2 1 1 2 3') == 'YES\\n1 1 2 2 1'\nassert solution('5 2\\n3 1 1 2 1') == 'NO'\nassert solution('5 2\\n2 1 1 2 3') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\n\n\"\"\"\nimport unittest\nfrom typing import List, Tuple\n\nimport math\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''11 5 2\n11010100101''') == '1'\n\nassert solution('''11 5 1\n11010100101''') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\") == '1'\nassert solution(\"11 5 1\") == '3'\nassert solution(\"11 5 0\") == '3'\nassert solution(\"11 5 00\") == '3'\nassert solution(\"11 5 001\") == '4'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(11010100101) == 1\nassert solution(11010101010) == 3\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\nassert solution(\"11 5 1\\n110101001010\") == \"4\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('11 5 0') == '1'\n\nassert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\nfrom functools import reduce\nfrom itertools import accumulate\nimport math"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\n\n'''"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2 3\\n2 3') == 'NO'\nassert solution('4\\n1 2 3 3\\n2 3') == 'YES'\nassert solution('4\\n1 3 2 3\\n2 3') == 'YES'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution(\"2\\n2 1 1\\n3\\n2 2 1\\n2\\n1 1 2\\n\") == 'NO\\nYES'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 2 3\") == 'YES'\nassert solution(\"5\\n1 1 2 3 4\") == 'NO'\nassert solution(\"4\\n1 2 1 2\") == 'YES'\nassert solution(\"3\\n1 2 2\") == 'NO'\nassert solution(\"4\\n1 1 1 1\") == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\") == \"YES\\nYES\\nNO\\nYES\\nNO\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 1\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"2\\n1 2 2\\n3\\n1 2 2 1\") == \"NO\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\nassert solution('3\\n1 2 1\\n5\\n1 2 2 3 2') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4\\n5\\n1 2 3 4 5') == 'YES'\nassert solution('4\\n1 2 3 4\\n5\\n1 2 2 1') == 'YES'\nassert solution('4\\n1 2 3 4\\n5\\n1 2 2 3') == 'NO'\n\nassert solution('5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\nassert solution('5\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1') == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"4\\n1337\"\n) == \"1557\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('333') == '33'\nassert solution('898798') == '99999'\nassert solution('666666') == '99999'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1337') == '1557'\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1337') == '1553'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1337') == '1553'\nassert solution('5\\n11111') == '99999'\n\"\"\"\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    \u9ad8\u6a4b\u304f\u3093\u306f\u6570\u5b57$a$\u3092\u3072\u3068\u3064\u305a\u3064\u6841\u3068\u6bd4\u8f03\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n    \u305d\u308c\u305e\u308c\u6841\u3068\u6bd4\u8f03\u3059\u308b\u6642\u306b\u3001\u95a2\u6570$f$\u3092\u4f7f\u3063\u3066\u6bd4\u8f03\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n    \u3059\u306a\u308f\u3061\u3001\u95a2\u6570$f$\u306b\u306f$1$\u304b\u3089$9$\u306e\u4efb\u610f\u306e\u6587\u5b57\u5217$x$\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3057\u307e\u3059\u3002\n    \u306a\u304a\u3001\u6841\u3068\u6bd4\u8f03\u3059\u308b\u6642\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6570\u5b57$x$\u3092\u4e8c\u9032\u6570\u306b\u5909\u63db\u3057\u3066\u6bd4\u8f03\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n    $x = x * 10 + digit(x)$\n    \u3053\u306e\u6642\u3001\u6841\u3068\u6bd4\u8f03\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u6570\u5b57$x$\u3092$1$\u304b\u3089$9$\u306e\u4efb\u610f\u306e\u6587\u5b57\u5217$f(x)$\u306b\u5909\u63db\u3057\u3066\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n    \"\"\"\n    def solve(self, stdin: str) -> str:\n        n: int = int(stdin.split()[0])\n        a: str = stdin.split()[1]\n        f: List[int] = list(map(int, stdin.split()[2:]))\n\n        res = []\n        for digit in range(1, 10):\n            # \u4e8c\u9032\u6570\u306b\u5909\u63db\n            binary = []\n            for x in a:\n                binary.append(x * 10 + int(x))\n\n            # \u6841\u3068\u6bd4\u8f03\n            for b in binary:\n                if f[int(b) - 1] < f[digit - 1]:\n                    break\n            else:\n                # \u6bd4\u8f03\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u7d50\u679c\u3092\u8ffd\u52a0\n                res.append(digit * 10 + int(a[-1]))\n        return str(max(res))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '1'\nassert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('33') == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1337\\n1 2 5 4 6 6 3 1 9') == '1557'\nassert solution('5\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nprint(solution('5\\n11111\\n9 8 7 6 5 4 3 2 1'))"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\\n1 1 3\"\nassert solution(\"2\\n1 2 4\") == \"2\\n1 1 4\"\nassert solution(\"1\\n4 8 16\") == \"1\\n4\\n4 8\"\n\"\"\"\n\nn = int(input())\nfor i in range(n):\n    a, b, c = [int(x) for x in input().split()]\n    if (c - b) % a == 0:\n        print(c - b)\n        print(b, b, b)\n    else:\n        print((c - b) // a + 1)\n        print(b, b, b + (c - b) // a)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4\n1 2 3\n2 3 4\"\"\") == \"1\\n1 1 3\"\n\nassert solution(\"\"\"5\n1 2 3\n2 3 4\"\"\") == \"1\\n1 1 3\"\n\nassert solution(\"\"\"8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\"\"\") == \"1\\n1 1 3\"\n\n\"\"\"\nassert solution(\"\"\"8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\"\"\"\n) == \"2\\n114 228 456\"\n\nassert solution(\"\"\"8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\"\"\"\n) == \"2\\n4 8 16\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"2 2 2\"\nassert solution(\"100 100 101\") == \"1 1 1\"\nassert solution(\"2 1 3\") == \"2 2 2\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\nprint('The local tests are done.')"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123 321 456\") == \"1 1 3\"\nassert solution(\"5 10 15\") == \"4 8 16\"\nassert solution(\"15 18 21\") == \"2\"\nassert solution(\"100 100 101\") == \"7\"\nassert solution(\"1 22 29\") == \"1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6, 3, 5\") == \"1, 1, 3\"\n\"\"\"\nimport math\nimport sys\nimport math\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3\") == \"1\\n1 2 3\"\nassert solution(\"4\\n2 2 3\") == \"2\\n2 2 3\"\nassert solution(\"4\\n1 2 3\") == \"1\\n1 2 3\"\n\nimport aatest_helper\n\naatest_helper.run_test_cases(solution, get_input, answer)\n\"\"\"\n\nfrom typing import List\nimport aatest_helper\n\nimport sys\nimport os\n\nsys.path.insert(1, os.path.dirname(os.path.realpath(__file__)))\n\n\nclass Solution:\n    def __init__(self, _input: List[str]):\n        self._input = _input\n\n    def solution(self) -> str:\n        ans: str = \"\"\n        for i in range(len(self._input)):\n            _, a, b, c = self._input[i].split()\n            a, b, c = int(a), int(b), int(c)\n            if not b % a:\n                b = b // a\n            else:\n                b = b + b % a\n            if not c % b:\n                c = c // b\n            else:\n                c = c + c % b\n            self._input[i] = f\"{a}\\n{b}\\n{c}\\n\"\n            ans = self._input[i]\n        return ans\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split()))\n\nmn = 10 ** 6\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        mn = min(s[i] - s[j], mn)\n\nprint(mn)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3 3 7\") == \"2\"\nassert solution(\"2 1 100000\") == \"0\"\nassert solution(\"1 100000\") == \"0\"\n\nprint(solution(\"4 1 3 3 7\"))\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3 7\\n\") == \"2\"\nassert solution(\"2 1 100000\\n\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\nassert solution(\"2\\n1 100000\") == '0'\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\nassert solution(\"2\\n1 100\") == \"0\"\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"4 7 2\\n1 3 1\\n1 4 1\") == \"-1\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 2 1 1 0\"\n\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3 1\\n1 5 1\") == '2 2 2 1 1 0 4 3 4 4'\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1\") == \"2 2 2 1 1 0 3 3 3\"\nassert solution(\"10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2\") == \"-1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == '1 2 3 0 3'\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\n\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\n\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(120) == 7\nassert solution(42) == 0\nassert solution(48) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n-----Hints-----\n\nUse a depth first search to try all possible combinations.\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 10\") == \"2\"\nassert solution(\"12 1\") == \"2\"\nassert solution(\"12 9\") == \"2\"\nassert solution(\"12 8\") == \"2\"\nassert solution(\"12 7\") == \"2\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 21') == '4'\nassert solution('12 23') == '-1'\nassert solution('123 3') == '2'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(12)) == \"2\"\nassert solution(str(5)) == \"1\"\nassert solution(str(16)) == \"2\"\nassert solution(str(2)) == \"1\"\nassert solution(str(50)) == \"1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\", 3) == \"ababababa\"\nassert solution(\"cat\", 2) == \"catcat\"\nassert solution(\"aba\", 2) == \"abababa\"\nassert solution(\"cat\", 2) == \"catcat\"\nassert solution(\"aaaa\", 1) == \"aaaa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"dog\") == \"dogdog\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"abc\") == \"abcabcabc\"\nassert solution(\"abca\") == \"abacabac\"\nassert solution(\"abcabca\") == \"abacabad\"\nassert solution(\"abcabcab\") == \"abacabad\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"abababa\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\nprint(solution(stdin.read()))\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'ababababa'\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aba') == 'abababa'\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"abababa\"\n\"\"\"\n\na,b = map(int,input().split())\ns = input()\n\ns = s * b\n\nres = \"\"\n\nfor i in range(0,len(s),a):\n    if s[i:i+a] == s[i:i+a][::-1]:\n        res += s[i:i+a]\n\nprint(res)\n\n\"\"\"\nInput\n6 3\nabab\n\nOutput\naba\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\nprint(solution(stdin))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3 5 2\") == '0'\nassert solution(\"2 1 2 4 3\") == '0'\nassert solution(\"5 1 2 2 4 3\") == '2'\n\n\n\n\"\"\"\n\n\"\"\"\n\npublic class Solution {\n    public int solution(int[] a) {\n        int[] aa = new int[a.length];\n        int i = 0;\n        int s = 0;\n        while (i < a.length) {\n            s += a[i];\n            aa[i] = s;\n            i++;\n        }\n        int[] res = new int[a.length];\n        i = 0;\n        while (i < aa.length) {\n            if (aa[i] == s) {\n                res[i] = s;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        if (res.length > 0) {\n            int[] b = new int[res.length];\n            for (int n: res) {\n                b[n] = n;\n            }\n            return b;\n        } else {\n            return new int[0];\n        }\n    }\n}\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"5 2 1 2 4 3\") == \"0\"\nassert solution(\"3 1 2 4\") == \"1\"\nassert solution(\"4 1 4 4\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\\n\") == \"2 1 4\"\nassert solution(\"6 1 2 3 2 3\\n\") == \"3 1 4\"\nassert solution(\"7 1 2 3 2 3 2\\n\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5 1 2 2\") == 3\nassert solution(\"8 3 5 2\") == 2\nassert solution(\"2 1 2 4 3\") == 0\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 2 2') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 2 2\") == \"3\\n4 1 5\"\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 4 1 5\"\nassert solution(\"4 3 5 2\") == \"0\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read().split()\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 2 2\\n') == '3\\n1 4\\n'\nassert solution('4\\n8 3 5 2\\n') == '2\\n1 4\\n'\nassert solution('5\\n2 1 2 4 3\\n') == '0\\n'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5 1 2 2') == '3'\nassert solution('8 3 5 2') == '2'\nassert solution('2 1 2 4 3') == '0'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\naaaaa\") == \"15\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5', 'asdf') == '4'\nassert solution('5 6', 'aaaaa') == '15'\nassert solution('5 7', 'aaaaa') == '-1'\nassert solution('10 100', 'ajihiushda') == '233'"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaaa\") == \"15\"\nassert solution(\"5 7 aaaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\"\"\"\n\n\"\"\"\nn, k = map(int, input().split())\ns = input()\n\nres = 0\nfor i in range(1, n):\n    if s[:i] not in s[i:]:\n        res += i\n        if s[:i] * (n - i) not in s[i:] and n - i!= 1:\n            res += n - i\n            break\n    else:\n        break"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5') == '4'\nassert solution('5 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaca\") == \"7\"\nassert solution(\"aaaaa\") == \"15\"\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 aaaaa\") == 15\nassert solution(\"5 7 aaaaa\") == -1\n\n\n'''\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == ans\n\n\"\"\"\n\n\"\"\"\nn, k = map(int, input().split())\ns = input()"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('asdf') == 4\nassert solution('aaaaa') == 15\nassert solution('ajihiushda') == 233\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('asdf') == 4\n\"\"\"\n\nfrom math import ceil\n\nn, k = list(map(int, input().split()))\ns = input()\n\nprices = {}\nfor i in range(n):\n    for j in range(n - i):\n        subseq = s[i:i + j + 1]\n        if subseq not in prices:\n            prices[subseq] = 0\n\ns = set()\nmin_cost = float('inf')\n\nfor subseq in prices:\n    if len(s) < k:\n        s.add(subseq)\n        cost = len(subseq) * (n - len(subseq))\n        min_cost = min(cost, min_cost)\n    else:\n        s.remove(subseq)\n        cost = len(subseq) * (n - len(subseq))\n        min_cost = min(cost, min_cost)"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 3\\n4 1'\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 4\\n4 1'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\n\n\"\"\"\n\n\nfrom math import inf"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('''4 5 3\n1 2\n1 4\n2 3\n3 4''') == 'YES\\n1 2\\n1 4\\n4 1\\n2 3'\nassert solution('''4 4 3\n1 2\n1 4\n2 3\n3 4''') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4\\n'\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 3\\n4 1\\n'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution('4 5 3\\n1 2\\n1 4\\n2 3\\n3 4') == \"YES\\n1 2\\n1 4\\n3 2\\n3 4\"\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == \"NO\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == \"YES\\n2 1\\n2 3\\n3 4\"\n\nassert solution('''4 5 3\n1 2\n1 4\n2 3\n3 4''') == \"YES\\n1 2\\n1 3\\n4 1\\n4 3\"\n\nassert solution('''4 5 3\n1 2\n1 4\n2 3\n3 4''') == \"NO\"\n\n\"\"\"\n\n\nclass Graph:\n    def __init__(self, vertices):\n        self.vertices = vertices\n        self.graph = []\n\n    def addEdge(self, u, v, w):\n        self.graph.append([u, v, w])\n\n    def find(self, parent, i):\n        if parent[i] == i:\n            return i\n        return self.find(parent, parent[i])\n\n    def union(self, parent, rank, x, y):\n        xroot = self.find(parent, x)\n        yroot = self.find(parent, y)\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n\n    def KruskalMST(self):\n\n        result = []\n        i = 0\n        e = 0\n        self.graph = sorted(self.graph, key=lambda item: item[2])\n\n        parent = []\n        rank = []\n\n        for node in range(self.vertices):\n            parent.append(node)\n            rank.append(0)\n\n        while e < self.vertices - 1:\n\n            u, v, w = self.graph[i]\n            i = i + 1\n            x = self.find(parent, u)\n            y = self.find(parent, v)\n\n            if x!= y:\n                e = e + 1\n                result.append([u, v, w])\n                self.union(parent, rank, x, y)\n        return result\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 2\\n1 2\\n1 3\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\"\nassert solution(\"3 4 2\\n1 3\\n2 3\\n3 4\") == \"YES\\n1 2\\n3 4\"\nassert solution(\"2 4 3\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"3 4 3\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"13:02\") == \"13:02\"\n\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import NamedTuple, Union\n\nfrom dataclasses_json import dataclass_json\n\n\n@dataclass_json\n@dataclass\nclass HmTime(NamedTuple):\n    hour: int\n    minutes: int\n\n\n@dataclass_json\n@dataclass\nclass Midpoint(NamedTuple):\n    midpoint: HmTime\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '10:00'\n) == '10:30'\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\nassert solution('11:10 11:12') == '11:11 11:12'\nassert solution('01:02 03:02') == '02:02 03:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"11:10\") == \"11:11\"\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10:00 11:00') == '10:30 11:00'\nassert solution('11:10 11:12') == '11:11 11:12'\nassert solution('01:02 03:02') == '02:02 03:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\n\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\nprint('All tests passed.')\n\n------\n\n// input:\n2\n// output: 1\n// input:\n4\n// output: 2\n// input:\n27\n// output: 5\n// input:\n42\n// output: 6\n\n\n// C++\n\nint solution(const char *& input){\n    int n = atoi(input);\n    int ans = 0;\n    while(n){\n        ans++;\n        n /= 2;\n    }\n    return ans;\n}\n\n\n// Java\n\npublic int solution(String input){\n    int n = Integer.parseInt(input);\n    int ans = 0;\n    while(n){\n        ans++;\n        n /= 2;\n    }\n    return ans;\n}\n\n// Python3"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 1\nprint(solution(\"2\"))\nassert solution(\"4\") == 2\nprint(solution(\"4\"))\nassert solution(\"27\") == 5\nprint(solution(\"27\"))\nassert solution(\"42\") == 6\nprint(solution(\"42\"))\nprint('test passed')\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12) == 5\nassert solution(64) == 1\nassert solution(2) == 1\nassert solution(4) == 2\nassert solution(1) == 0\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == 2\nprint('Test #1 OK')\n\nassert solution(\"27\") == 5\nprint('Test #2 OK')\n\nassert solution(\"42\") == 6\nprint('Test #3 OK')\n\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"42\") == 6\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1'\n\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2'\n\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0'\n\nassert solution(\"2\\n3 10\\n1 5\") == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\\n\"\nassert solution(\"3\\n4 5\\n1 2\") == \"0\\n\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4\n1 3\n2 6\n0 4\n3 3\n\"\"\") == '1'\n\nassert solution(\"\"\"5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == '2'\n\nassert solution(\"\"\"3\n4 5\n1 2\n9 20\n\"\"\") == '0'\n\nassert solution(\"\"\"2\n3 10\n1 5\n\"\"\") == '7'\n\nassert solution(\"\"\"1\n1\n\"\"\") == '0'"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 3\n2 6\n0 4\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n3 10\n1 5\n\"\"\") == \"7\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\n\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\n\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\n\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1\\n'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2\\n'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0\\n'\nassert solution(\"2\\n3 10\\n1 5\\n\") == '7\\n'"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1\\n'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2\\n'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0\\n'\nassert solution('2\\n3 10\\n1 5') == '7\\n'\n\nimport sys"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\\n\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 5 4\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2 1 1 2 5\n''') == 'YES'\nassert solution('''\n3\n4 5 3\n''') == 'NO'\nassert solution('''\n2\n10 10\n''') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == 'YES'\nassert solution(\"3\\n4 5 3\") == 'NO'\nassert solution(\"2\\n10 10\") == 'YES'\nassert solution(\"1\\n10 10\") == 'YES'\nassert solution(\"2\\n5 5\") == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\n\u0412\u0430\u0448\u0435\u0439 \u043c\u0430\u043c\u043a\u043e\u0439 \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u043f\u043e \u043f\u0440\u044f\u043c\u043e\u0439 \u0438 \u0438\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0441\u0435 \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u0443\u0433\u043b\u044b \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043a\u0440\u0430\u0439\u043d\u0438\u0439 \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u0443\u0433\u043e\u043b, \u0437\u0430\u0442\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043a\u0440\u0430\u0439\u043d\u0438\u0439 \u043d\u0438\u0436\u043d\u0438\u0439 \u0443\u0433\u043e\u043b, \u043f\u043e\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043a\u0440\u0430\u0439\u043d\u0438\u0439 \u043f\u0440\u0430\u0432\u044b\u0439 \u0443\u0433\u043e\u043b, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.\n\n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0435\u043a\u0442\u043e\u0440 \u2014 \u043f\u043e\u0434\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u043a \u043f\u0440\u0430\u0432\u043e\u043c\u0443 \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0443\u0433\u043b\u0443 \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043f\u043e\u043c\u043e\u0447\u044c \u043c\u0430\u043c\u043a\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0432 \u043a\u0430\u043a\u043e\u0439 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u0443\u0433\u043b\u044b \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u043f\u0440\u0430\u0432\u044b\u0435 \u0443\u0433\u043b\u044b, \u043f\u043e\u0442\u043e\u043c \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u043d\u0438\u0436\u043d\u0438\u0435, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0421\u0442\u0430\u0432\u0438\u043c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0434\u043e\u0441\u043a\u0438 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e.\n\n\u0412\u0430\u043c \u0434\u0430\u043d \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \";\" \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u0432, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0435\u043a\u0442\u043e\u0440\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u0443\u0433\u043b\u044b \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u043d\u043d\u044b\u0439 \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b\u0441\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u0432. \u041e\u043d\u043e \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 $10^5$.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u044b $n$ \u0446\u0435\u043b\u044b\u0445 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 \u0432\u044b\u0441\u043e\u0442\u044b \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0432 \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 $10^9$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0434\u0442\u0438 \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u0443\u0433\u043b\u044b \u0448\u0435\u0441\u0442\u0438\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1\n\n\u0412\u0432\u043e\u0434    \n\n2\n\n4 5 3\n\n\u0412\u044b\u0432\u043e\u0434\n\n3\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\nfrom typing import Dict, List\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ajihiushda') == '233'\nassert solution('aaaaa') == '15'\nassert solution('bbba') == '-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\n---"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected_stdout\n\nSee more examples in \"Inputs\"\n\nSee more examples in \"Outputs\"\n\nSee more examples in \"Notes\"\n\nSee more examples in \"Hints\"\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ajihiushda\") == 233\n\"\"\"\n\nn, k = (int(i) for i in input().split())\ns = input()\ns = set(s)\n\ncost = 0\nfor i in range(len(s)):\n    if len(s) < k:\n        cost = -1\n        break\n    s.remove(s[i])\n    cost += len(s)\nprint(cost)"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaca\") == \"abaca\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\"\n\nfrom typing import Dict\nimport collections\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\\najihiushda\") == \"233\"\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nasdf') == 4\nassert solution('5 6\\naaaaa') == 15\nassert solution('5 7\\naaaaa') == -1\nassert solution('10 100\\najihiushda') == 233\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4', 'abcbacba') == \"5\"\nassert solution('4 5', 'aaaaa') == \"15\"\nassert solution('5 6', 'aaaaa') == \"-1\"\nassert solution('5 7', 'aaaaa') == \"233\"\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == 4\nassert solution(\"3 2 2\") == 7\nassert solution(\"1 100 1\") == 3\nassert solution(\"30 20 10\") == 39"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"4\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1\\n') == '4'\nassert solution('3 2 2\\n') == '7'\nassert solution('1 100 1\\n') == '3'\nassert solution('30 20 10\\n') == '39'\nassert solution('23 1 1\\n') == '11'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\nprint(\"All examples passed\")\n\"\"\"\n\na, b, c = list(map(int, input().split()))\ns = set()\ns.add(0)\n\nfor i in range(1, a + 1):\n    s.add(i)\n\nfor i in range(1, b + 1):\n    s.add(i)\n\nfor i in range(1, c + 1):\n    s.add(i)\n\nprint(s)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == 3\nassert solution(\"3 2 2\") == 7\nassert solution(\"30 20 10\") == 39\n\"\"\"\n\na, b, c = map(int, input().split())\n\nprint((a + b + c - 1) // (a + b + c - 2))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3 2 1) == \"7\"\nassert solution(1 100 1) == \"3\"\nassert solution(30 20 10) == \"39\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\"\nfrom collections import Counter, defaultdict\n\nclass Solution:\n    def solution(self, stdin):\n        fish, rabbit, chicken = map(int, stdin.split())\n        fish_days = defaultdict(int)\n        chicken_days = defaultdict(int)\n        rabbit_days = defaultdict(int)\n        fish_days = Counter(fish_days)\n        chicken_days = Counter(chicken_days)\n        rabbit_days = Counter(rabbit_days)\n        total = fish_days['Monday'] + chicken_days['Tuesday'] + rabbit_days['Wednesday']\n        for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:\n            total += fish_days[day] + chicken_days[day] + rabbit_days[day]\n        return total\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\"\"\"\nimport math\na, b, c = map(int, stdin.split())\na, b, c = a * 100, b * 100, c * 100\nprint(math.ceil(max(a/c, b/c, a/b)))\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2\\n1 1\\n1 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == \"NO\"\nassert solution(\"4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == \"NO\"\nassert solution(\"3 3\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == \"YES\"\nassert solution(\"4 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"2 2\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"2 2\\n1 1\\n1 2\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2'\n) == 'YES'\n\nassert solution(\n    '4 4\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n2 2\\n1 1\\n1 1\\n1 2\\n1 2\\n2 2\\n1 2'\n) == 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'NO'\nassert solution('1\\n1') == 'YES'\nassert solution('2\\n1') == 'NO'\nassert solution('2\\n2') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"NO\"\nassert solution(\"5 7\") == \"YES\"\nassert solution(\"7 4\") == \"YES\"\nassert solution(\"8 9\") == \"YES\"\nassert solution(\"9 8\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\"\"\") == \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == 'YES'\nassert solution('3\\n4\\n1\\n2\\n') == 'NO'\nassert solution('1\\n2\\n4\\n5\\n') == 'YES'\nassert solution('2\\n4\\n1\\n2\\n') == 'YES'\nassert solution('1\\n2\\n4\\n5\\n') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n1 1\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6') == '1'\nassert solution('5') == '1'\nassert solution('3') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1,2\") == \"0\"\nassert solution(\"5\\n1,2,3,4,5\") == \"1\"\nassert solution(\"6\\n1,2,3,4,5,6\") == \"1\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split(\",\")))\nsum_l = sum(l)\ns = set(l)\n\ns_1 = sum(l)\ns_2 = 2 * sum_l - s_1"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"5\") == '1'\nassert solution(\"6\") == '1'\n\"\"\"\n\n\"\"\"\nThe mathematical solution is based on the following observation:\n\n1. The initial sequence must be divisible by 2, so we will add even elements to the first group and odd elements to the second one.\n\n2. The sum of the first group must be the same as the sum of the second group, but then the abs difference of their sums must be the smallest possible.\n\n3. For example, the first group must contain elements $1, 3, 5, 7, 9,...$ and the second group must contain elements $2, 4, 6, 8,...$. The difference between the sums is $20$.\n\n4. We can add an element to one of the groups, if it is greater than the difference between the sums. It cannot be added to the first group, because the sum of the first group is equal to the difference between the sums. It cannot be added to the second group, because it is less than the difference between the sums.\n\n5. Therefore, if we divide the sequence into two groups with the sum of the first group equal to the sum of the second group plus the difference between the sums, then the difference between the sums is the smallest possible.\n\n6. So we should add an element to the first group. The next element should be added to the second group, so the difference between the sums is reduced.\n\n7. The process repeats until we reach the situation where the difference between the sums is equal to zero, and we have successfully divided the sequence into two groups with equal sums.\n\"\"\"\n\nn = int(input())\n\na = [int(x) for x in input().split()]\n\nb = [a[i] for i in range(len(a)) if i % 2 == 0]\nc = [a[i] for i in range(len(a)) if i % 2 == 1]\n\ndiff = abs(sum(b) - sum(c))\n\nwhile diff > 0:\n    if sum(b) < sum(c):\n        b.append(max(a))\n        a.remove(max(a))\n    else:\n        c.append(max(a))\n        a.remove(max(a))\n\n    diff = abs(sum(b) - sum(c))\n\nprint(sum(b))\nprint(sum(c))\nprint(abs(sum(b) - sum(c)))"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, n: str) -> str:\n        pass"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\nimport sys"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n()))()\n''') == '5'\n\nassert solution('''3\n(()\n''') == '4'\n\nassert solution('''2\n(((\n''') == '0'"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(((((\") == \"0\"\nassert solution(\"()))((((((((\") == \"0\"\nassert solution(\"(()())\") == \"4\"\nassert solution(\"())(((((\") == \"0\"\nassert solution(\"((()()())\") == \"4\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('()))()') == 5\nassert solution('(()))') == 4\nassert solution('((((()()()()()()()()()()))()()()())()())()((()())())()())()((())()())()()((()())(()()))(()()())()()((()))())()()((())()())()()((()))(()()())()()((())())()()(())(()())()(())()()(()())()(()(()))()()((()))()((())()())()()(()(()))(()()())()()((())()))()()(()((()())(())()))(()())(((()))()())()((()(())))()((((()()((())(()((())(((()(()()((())(((((()(())(())()(()(())(((()())((()(()((()(((((()(())(((((())(()()(()(()((()()(()(()()((((()(()()(()((((())(()((()(((()(((()(()(((()((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(()))())\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(((()))\") == 4\nassert solution(\"((())))\") == 0\nassert solution(\"((()))())\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"())()\") == 4\nassert solution(\"(()())\") == 5\n\nassert solution(\"(((())))\") == 5\nassert solution(\"(()())()\") == 8\nassert solution(\"(((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))\")) == 10 ** 9\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(((()))())\") == 5\nassert solution(\"(()(()))()\") == 4\nassert solution(\"()((()))()\") == 4\nassert solution(\"(((()))())\") == 5\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"(((()))())\") == 3\n\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))\") == \"4\"\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"())\") == 0\nassert solution(\"()()\") == 1\nassert solution(\"(()()\") == 1\nassert solution(\"((()\") == 0\nassert solution(\"(()))(\") == 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n()))()\n''') == '5'\nassert solution('''3\n(()\n''') == '4'\nassert solution('''2\n(((\n''') == '0'\n\n\"\"\"\n\nn = int(stdin.readline().rstrip())\ns = stdin.readline().rstrip()"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\"\"\"\nfrom typing import List\nimport math"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\nassert solution(\"1\") == 0\nassert solution(\"2\") == 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abracadabra\") == \"abcad\"\nassert solution(\"abracadabracadabra\") == \"abr\"\nassert solution(\"zbccdfghjklmnpq\") == \"zccdfgjkm\"\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == '1'\nassert solution('aa') == '1 1'\nassert solution('abacbecfd') == '2 1 1 2 1 2 1 2 1'\n\nassert solution('aaabbcbb') == '2 1 2 1 2 1 2 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\nassert solution(\"abcdeacd\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcd') == '2 1 1 2 1 1 1 2 2 2 3 1 3 3 4 1 4 1 4 2 1 2 2 2 3 3 3 4 2 4 2 4 2 4 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abracadabra\") == 3\nassert solution(\"kitten\") == 1\nassert solution(\"codewars\") == 1\nassert solution(\"anagram\") == 4\nassert solution(\"aaaaaa\") == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacbecfd') == 2\nassert solution('aaabbcbb') == 2\nassert solution('abcdedc') == 3\nassert solution('abcde') == 1\nassert solution('b') == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abacbecfd') == '2', solution('abacbecfd')\nassert solution('aaabbcbb') == '2', solution('aaabbcbb')\nassert solution('abcdedc') == '3', solution('abcdedc')\nassert solution('abcde') == '1', solution('abcde')\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '\\n'\nassert solution('a') == 'a\\n'\nassert solution('aa') == 'aa\\n'\nassert solution('ab') == 'ab\\n'\nassert solution('abc') == 'abc\\n'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"YES\\na\\naba\"\nassert solution(\"abacaba\") == \"YES\\na\\naba\\nabacaba\"\nassert solution(\"qwerty\") == \"YES\\nqwerty\\nqwerty\"\nassert solution(\"qwertyqwerty\") == \"YES\\nqwerty\\nqwerty\\nqwertyqwerty\"\nassert solution(\"qwertyabab\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba') == 'YES'\nassert solution('abacaba') == 'YES'\nassert solution('abacabaabacaba') == 'YES'\nassert solution('a') == 'YES'\nassert solution('ab') == 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n\n\n\n\n\n\n\"\"\"\n\n\n\nfrom collections import Counter"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"YES\\na\"\nassert solution(\"aba\") == \"YES\\na\\nb\\na\"\nassert solution(\"abacaba\") == \"YES\\na\\nb\\nb\\na\\nb\\na\"\nassert solution(\"ba\") == \"YES\\nb\\na\"\nassert solution(\"aba\") == \"YES\\na\\nb\\na\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str1) == str2\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"NO\\n\"\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline())\nstrs = [sys.stdin.readline().rstrip() for _ in range(n)]\nm = {}\nfor i in range(n):\n    if strs[i] not in m:\n        m[strs[i]] = i\n\nans = []\nfor i in range(n):\n    ans.append(strs[m[strs[i]]])\n    m[strs[m[strs[i]]]] = -1\n\nprint(\"YES\" if len(ans) == n else \"NO\")\nprint(\"\\n\".join(ans))\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"YES\"\nassert solution(\"aaba\") == \"YES\"\nassert solution(\"aabacaba\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"aaba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\\nabacaba\\nba\\na\") == \"YES\\na\\nba\\naba\\nabacaba\"\nassert solution(\"abacaba\\nba\\naba\\nab\\na\") == \"YES\\nab\\naba\\nabacaba\\nba\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\nqwerty\") == \"NO\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\\nqwerty\") == \"NO\"\n\nassert solution(\"a\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\") == \"5\"\nassert solution(\"12345\") == \"5\"\n\n----\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\nassert solution('5 2 1 3 2 1 3') == 0\nassert solution('5 100 12 34 55 43 21') == 5\nassert solution('5 100 55 43 21 34 12') == 5\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\n\ndifficulties = [int(c) for c in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\n\"\"\"\n\nn, k = input().split()\nl = [int(x) for x in input().split()]\n\ni = 0\nwhile True:\n    if k > l[i]:\n        k -= l[i]\n        l.pop(i)\n        i = 0\n    else:\n        i += 1\n        if i == len(l):\n            print(i)\n            break\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('5 2\\n3 1 2 1 3') == 0\nassert solution('5 100\\n12 34 55 43 21') == 5\n\n\"\"\"\n\nimport sys\n\ntests = [\n    ('5 2\\n3 1 2 1 3', 0),\n    ('5 100\\n12 34 55 43 21', 5),\n]\n\nfor inp, expected in tests:\n    if solution(inp)!= expected:\n        print('You failed the test case!')\n        sys.exit(1)\n\nprint('Passed all test cases!')\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\n\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\n\nassert solution('3 9') == '14'\n\nassert solution('9 3') == '14'\n\nassert solution('3 6') == '12'\n\nassert solution('506 2708') == '3218'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 3''') == '12'\nassert solution('''1 2''') == '12'\nassert solution('''2 2''') == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"4 4\"\n) == \"12\"\n\nassert solution(\n\"3 9\"\n) == \"14\"\n\nassert solution(\n\"9 3\"\n) == \"14\"\n\nassert solution(\n\"506 2708\"\n) == \"3218\"\n\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == '6'\nassert solution('5 6') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == '12'\nassert solution(\"3 9\") == '14'\nassert solution(\"9 3\") == '14'\nassert solution(\"3 6\") == '12'\nassert solution(\"506 2708\") == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcd') == '010'\nassert solution('abcde') == '01010'\n\"\"\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"100100101\"\n\nassert solution(\"aabbcd\") == \"110110110\"\n\nassert solution(\"abbcd\") == \"101101101\"\n\nassert solution(\"abdc\") == \"101011010\"\n\nassert solution(\"aabcd\") == \"110110010\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcdef\") == \"YES\\n01011010\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == 'NO'\nassert solution('abce') == 'YES'\nassert solution('abcb') == 'NO'\nassert solution('abcde') == 'YES'\nassert solution('abcdea') == 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abacbecfd\") == \"NO\\n\"\nassert solution(\"abcdedc\") == \"YES\\n01011011\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcde\") == \"YES\\n00000\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\n\"\"\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcd') == '010'\nassert solution('abcdee') == '1101'\nassert solution('abcdeeee') == '11010101'\nassert solution('abcdefg') == '101101'\nassert solution('zzz') == '1100110011001100'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacbecfd') == 'YES', 'failed'\nassert solution('aaabbcbb') == 'YES', 'failed'\nassert solution('abcdedc') == 'NO', 'failed'\nassert solution('abcde') == 'YES', 'failed'\nassert solution('aaaaaaa') == 'YES', 'failed'\n\nprint('passed')\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '25'\n\"\"\"\n\nA, B = map(int, input().split())\nans = []\nfor i in range(A, B + 1):\n    if i * 0.08 + i * 0.1 > i:\n        ans.append(i)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"20 10\") == \"20\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"10 1\") == \"-1\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1, 10) == 1\nassert solution(1, 100) == 25\nassert solution(1, 1000) == 150\nassert solution(1, 10000) == 1500\nassert solution(1, 100000) == 15000\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '25'\nassert solution('4 10') == '-1'\nassert solution('5 15') == '-1'\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '-1'\nassert solution('2 2') == '25'\nassert solution('2 3') == '-1'\nassert solution('2 4') == '20'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"25\"\n\n------- TEST CASES -------\n>>> solution(\"3 2\")\n\"16\"\n>>> solution(\"3 1\")\n\"10\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 2\")\n\"12\"\n>>> solution(\"9 3\")\n\"19\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n\"9\"\n>>> solution(\"1 5\")\n\"14\"\n>>> solution(\"1 6\")\n\"15\"\n>>> solution(\"4 3\")\n\"10\"\n>>> solution(\"2 4\")\n\"6\"\n>>> solution(\"2 5\")\n\"9\"\n>>> solution(\"1 3\")\n\"3\"\n>>> solution(\"1 2\")\n\"2\"\n>>> solution(\"0 2\")\n\"0\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"0 1\")\n\"-1\"\n>>> solution(\"0 0\")\n\"0\"\n>>> solution(\"1 1\")\n\"2\"\n>>> solution(\"9 4\")\n\"12\"\n>>> solution(\"9 5\")\n\"19\"\n>>> solution(\"9 6\")\n\"22\"\n>>> solution(\"3 5\")\n\"19\"\n>>> solution(\"3 6\")\n\"24\"\n>>> solution(\"1 4\")\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"25\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"2 9\") == \"100\"\nassert solution(\"100 100\") == \"-1\"\nassert solution(\"1 2\") == \"5\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 2') == '25'\nassert solution('2 2\\n2 4') == '25'\nassert solution('2 2\\n1 1') == '-1'\nassert solution('2 2\\n2 5') == '-1'\nassert solution('1 1\\n1 1') == '-1'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"YES\"\nassert solution(\"7 6\") == \"NO\"\nassert solution(\"9 9\") == \"NO\"\nassert solution(\"9 5\") == \"YES\"\nassert solution(\"10 5\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n\nprint(solution(\"26 6\"))\nprint(solution(\"8 3\"))\nprint(solution(\"1 1\"))\nprint(solution(\"9 4\"))"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == 'YES\\n1 2 3\\n4 5 6\\n7 8 9'\nassert solution('1 2 3\\n4 5 6\\n7 8 10') == 'NO'\nassert solution('1 2 3\\n4 5 6\\n7 8 1') == 'NO'\nassert solution('1 2 3\\n4 5 6\\n7 8 0') == 'NO'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n13 14 15\\n16 17 18\\n19 20 21\\n22 23 24\\n25 26 27') == 'YES\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n13 14 15\\n16 17 18\\n19 20 21\\n22 23 24\\n25 26 27'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360\n-----\nn-----\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"7 8\") == \"NO\\n\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"9 4\") == \"NO\\n\"\nassert solution(\"6 5\") == \"NO\\n\"\n\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\\n\") == \"YES\\n1 2 4 5 6 8\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.split(\" \")]\na = [int(i) for i in stdin.split(\" \")]\ns = 0\nfor i in range(len(a)):\n    s += a[i]\n    if s > n:\n        print(\"NO\")\n        exit(0)\n    elif i < len(a) - 1 and s > 2 * a[i] - a[i + 1]:\n        print(\"NO\")\n        exit(0)\nprint(\"YES\")\nfor i in range(len(a)):\n    print(a[i])\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"26 6\") == \"YES\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"9 4\") == \"NO\"\n\nprint(solution(\"26 6\"))\nprint(solution(\"8 3\"))\nprint(solution(\"1 1\"))\nprint(solution(\"9 4\"))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''26 6\n''') == '''YES\n1 2 4 5 6 8 \n'''\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == 3\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 5\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n10 -2\\n8 -1\") == \"3\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\"\"\"\n\nn, m = map(int, input().split())\n\nrating = m\ntasks = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    tasks.append((a, b))\n    rating += b\n\ntasks.sort(key=lambda x: x[0])\n\nr = 0\nres = 0\n\nfor a, b in tasks:\n    if r + b <= 0:\n        continue\n    res += 1\n    r += b\n\nprint(res)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\nprint('Hooray!')\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == '3'\nassert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5'\nassert solution('''3 2\n300 -300\n1 299\n1 123''') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 4\n4 6\n10 -2\n8 -1''') == '3'\nassert solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1\\n1 3 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import Counter\nimport sys\n\n\nclass Palindrome:\n    def __init__(self, array):\n        self.array = array\n        self.matrix = self.make_matrix(self.array)\n        self.ans = self.make_palindrome()\n        self.length = len(self.array)\n        self.matrix_inverse = self.make_inverse()\n        self.matrix_concat = self.concatenate_matrix()\n\n    def make_matrix(self, array):\n        matrix = []\n        for i in array:\n            if i not in matrix:\n                matrix.append(i)\n        return matrix\n\n    def make_palindrome(self):\n        matrix = []\n        for i in self.matrix:\n            for j in self.matrix:\n                matrix.append([i, j])\n        return matrix\n\n    def make_inverse(self):\n        matrix_inverse = []\n        for i in range(self.length):\n            matrix_inverse.append([])\n            for j in range(self.length):\n                matrix_inverse[i].append([self.array[i], self.array[j]])\n        return matrix_inverse\n\n    def concatenate_matrix(self):\n        matrix_concat = []\n        for i in self.matrix:\n            matrix_concat.append([])\n            for j in i:\n                matrix_concat[-1].append(j)\n        return matrix_concat\n\n    def check_row(self, row):\n        row_count = Counter(row)\n        return row_count\n\n    def check_column(self, column):\n        column_count = Counter(column)\n        return column_count\n\n    def check_matrix(self, matrix):\n        matrix_count = Counter([i for j in matrix for i in j])\n        return matrix_count\n\n    def check_palindrome(self, row, column, matrix):\n        if matrix[row][column] == self.matrix_inverse[row][column]:\n            return True\n        return False\n\n    def check_answer(self, matrix):\n        for i in range(self.length):\n            if self.check_row(matrix[i])!= Counter(self.matrix[i]):\n                return False\n            if self.check_column(matrix[i])!= Counter(self.matrix[i]):\n                return False\n        return True\n\n    def check_inverse(self, matrix):\n        for i in range(self.length):\n            if self.check_row(matrix[i])!= Counter(self.matrix[i]):\n                return False\n            if self.check_column(matrix[i])!= Counter(self.matrix[i]):\n                return False\n        return True\n\n    def check_inverse_2(self, matrix):\n        inverse_matrix = self.matrix\n        for i in range(self.length):\n            inverse_matrix[i].reverse()\n        if self.check_matrix(inverse_matrix) == Counter(self.matrix):\n            return True\n        "
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == 'YES\\n1 3 1\\n3 1 3'\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\n\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\n\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n\nassert solution('1\\n10') == 'YES\\n10'\n\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'NO'"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1\\n10') == 'YES\\n10'\n\n\n\"\"\"\n\nimport copy\nimport time\n\nfrom utils import (\n    print_assert,\n    "
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"4\\n9 9 9 1 1 1 1 1 1 1 1 1 1 9 9 9\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"5\\n1 4 1 4 2 3 2 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 1 2 1 2 3 3 3\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"1\\n10\") == \"YES\\n10\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\\n\"\nassert solution(\"2\\n2 2 2\\n2 2 2\") == \"YES\\n1 2 2 1\\n2 2 2 2\\n\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n1 2\\n2 -3\\n3 0\\n4 -2\") == 'YES'\nassert solution(\"3 10\\n4 -5\\n4 -2\\n1 3\\n\") == 'YES'\nassert solution(\"4 10\\n5 -5\\n4 -2\\n1 3\\n\") == 'NO'\nassert solution(\"5 10\\n5 -5\\n4 -2\\n1 3\\n\") == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 10\n10 0\n10 -10\n30 0\n\n\"\"\") == \"NO\"\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\\n\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10\\n10 0\\n10 -10\\n30 0') == \"NO\"\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2') == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 10\n10 0\n10 -10\n30 0\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\") == \"YES\"\nassert solution(\"\"\"3 5\n4 -5\n4 -2\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"4 4\n5 2\n5 -3\n2 1\n4 -2\n\"\"\") == \"YES\"\nassert solution(\"\"\"3 10\n10 0\n10 -10\n30 0\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('4 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES\\n0 0 0 0 0 0 0 0 0 1 '\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1 '\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 0 1 1 0 0 0 0 '"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\nassert solution(\"10 1 3\\n3\") == \"YES\\n0 0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"10 1 5\\n3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\\n2\\n2 3\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"7 3 2\\n2\\n2 3\") == \"YES\\n0 0 0 2 2 0 3 \"\nassert solution(\"7 3 2\\n4\\n2 3\") == \"NO\\n\"\nassert solution(\"7 3 2\\n1\\n2 3\") == \"NO\\n\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 0 1'\nassert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('7 3 2\\n2 1 1') == 'NO'\nassert solution('7 3 2\\n1 2 2') == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\\n\"\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nimport math\nfrom typing import List, Set"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 \"\n\nprint('Successfully passed all tests.')"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaab') == 2\nassert solution('aaba') == 1\nassert solution('a') == 0\nassert solution('ab') == 0\nassert solution('abac') == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"st\"\nassert solution(\"tst\") == \"st\"\nassert solution(\"tt\") == \"t\"\nassert solution(\"et\") == \"te\"\nassert solution(\"\") == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('abcde') == 0\n\nprint('Success')\n\"\"\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 3\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('test') == 3\nassert solution('tset') == 2\nassert solution('se') == 1\nassert solution('contest') == 0\nassert solution('aaa') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 3\nassert solution('asdfasdf') == 3\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 3\nassert solution(\"tt\") == 2\nassert solution(\"et\") == 2\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 0\nassert solution(\"tst\") == 0\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"test\") == 3\n\nassert solution(\"tset\") == 0\nassert solution(\"tset\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4.024922') == '9 9'\nassert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('3.1416') == '3 3'\nassert solution('3.99999') == '5 5'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import ceil\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2.572479\") == \"10 3\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0 0'\nassert solution('1.11') == '0 0'\nassert solution('0.1111') == '0 1'\nassert solution('0.11') == '0 1'\nassert solution('0.111') == '0 1'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n\nfrom decimal import Decimal\nimport re"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n\n\"\"\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\nassert solution('1 1 1') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\n\nfrom typing import Callable, Dict, List, Set, Tuple\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"7 2 3\") == \"NO\"\nassert solution(\"6 3 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3 3\\n') == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\n\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 2\") == \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\"\nassert solution(\"6 2 3\") == \"NO\\n\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 8 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n\nprint(\"The code ran Correctly\")"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n')\nassert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n')\n\n-----Problem-----\n\n*Memory limit* 5 MB\n\n*Time limit* 15s\n\n\"\"\"\n\nn, d, k = list(map(int, input().split()))"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1101\") == \"1101\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"11010\"\nassert solution(\"4 5 6\") == \"101110\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"5 3 6\") == \"101100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11110\") == \"11110\"\nassert solution(\"10110\") == \"11110\"\nassert solution(\"01110\") == \"11110\"\nassert solution(\"11110\") == \"11110\"\nassert solution(\"10110\") == \"11110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\nassert solution('5 3 6') == '01010100'"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101\") == \"11101\"\nassert solution(\"11100\") == \"1111\"\nassert solution(\"11010\") == \"11010\"\nassert solution(\"10110\") == \"10110\"\nassert solution(\"11110\") == \"11110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101\") == \"11101\"\nassert solution(\"1100\") == \"1100\"\nassert solution(\"1111\") == \"1111\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 6\") == \"01010100\"\n\"\"\"\n\na, b, x = map(int, stdin.readline().strip().split())\nassert 1 <= a <= 100\nassert 1 <= b <= 100\nassert 1 <= x <= a + b\n\nans = '1' * a + '0' * b"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101010\") == \"101010\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111010\") == \"111010\"\nassert solution(\"111101\") == \"111101\"\nassert solution(\"111110\") == \"111110\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1100\") == \"1100\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"11100\") == \"11100\"\nassert solution(\"11010\") == \"11010\"\nassert solution(\"11101\") == \"11101\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n\nassert solution(\"abcc\") == \"acbcac\"\nassert solution(\"bb\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"cbaccb\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"bbac\"\nassert solution(\"bb\") == \"acbac\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ac') == 'acb'\nassert solution('bc') == 'abc'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cc\"\nassert solution(\"bb\") == \"bbb\"\n\nassert solution(\"aabb\") == \"aabb\"\nassert solution(\"abc\") == \"acbc\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"cab\"\n\nassert solution(\"ac\") == \"cc\"\n\nassert solution(\"bb\") == \"bbb\"\n\nassert solution(\"ca\") == \"cac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"abc\"\nassert solution(\"ca\") == \"cbac\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'cb'\nassert solution('bb') == 'bc'\n\nassert solution('ac') == 'acbac'\nassert solution('cb') == 'cbca'"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\n\nassert solution(\"aa\") == \"bc\"\nassert solution(\"bb\") == \"aa\"\n\nassert solution(\"ab\") == \"ac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"cc\") == \"cc\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 -2 1\") == \"3 1 2\"\nassert solution(\"5 -1 2\") == \"-1\"\nassert solution(\"4 1 2\") == \"4 1 2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 -1 2') == '3 1 2'\nassert solution('7 5 1 -1 2') == '7 5 1 3 4 2'\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -1 1 2 3\") == \"1 2 3 4 -1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 1 1\") == \"1 2 3 4\"\nassert solution(\"1 1 1 1\") == \"-1\"\nassert solution(\"1 -2 1\") == \"1 -2 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\nassert solution('4 -1 2') == '-1'\nassert solution('5 1 -1 2') == '-1'\nassert solution('6 1 -1 2') == '-1'\n\nprint('PASSED')\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"3\\n-2 1\"\n) == \"3 1 2\"\nassert solution(\n\"5\\n1 1 1 1\"\n) == \"1 2 3 4 5\"\nassert solution(\n\"4\\n-1 2 2\"\n) == \"-1\"\nassert solution(\n\"4\\n-1 -2 2\"\n) == \"1 2 3 4\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == '3 1 2'\nassert solution(\"5 1 1 1\") == '1 2 3 4 5'\nassert solution(\"4 1 1 1\") == '1 2 3 4'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    4\n    1 1 1 1\n    \"\"\"\n    ) == \"\"\"\n    1 2 3 4\n    \"\"\"\n)\nassert solution(\n    \"\"\"\n    6\n    -1 2 2\n    \"\"\"\n    ) == \"\"\"\n    -1\n    \"\"\"\n)\n\nprint('Success')"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"1 2 3 4\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n-2 1') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('4\\n-1 2 2') == '-1'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"2 2 2 3 3\") == \"2\"\nassert solution(\"3 2 3 2 3\") == \"3\"\nassert solution(\"4 2 3 4 4\") == \"4\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\nassert solution('5 2 2 3 3') == '2'\nassert solution('2 2 2 3 3') == '2'\n\nassert solution('5 2 2 3 3') == '2'\nassert solution('2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == 1\nassert solution('5\\n2 2 2 3 3') == 2\nassert solution('4\\n1 1 1 1') == 0\nassert solution('3\\n1 2 1') == 1\nassert solution('2\\n1 2') == 1\n\"\"\"\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n2 2 2 3 3') == '2'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3''') == '1'\nassert solution('''5\n2 2 2 3 3''') == '2'\nassert solution('''4\n1 2 2 4''') == '1'\nassert solution('''2\n0 2''') == '1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"6\\n1 1 2 3 3 5\") == \"3\"\nassert solution(\"7\\n7 7 7 7 7 7\") == \"0\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '5'\nassert solution('5') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"5\"\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"5\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5'\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\nassert solution(\"319\\n10 53 256\\n182 103 34\") == \"119 226\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n1 1 0') == '0 1'\nassert solution('3 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3') == '3 3'\nassert solution('686\\n479 178 29') == '22 334'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 1 0\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 1 1\") == \"0 1\"\nassert solution(\"15 5 5\") == \"0 15\"\nassert solution(\"3 0 0 3\") == \"3 3\"\nassert solution(\"686 47 829 10\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 1 1\") == \"0 1\"\nassert solution(\"3 0 0\") == \"0 3\"\nassert solution(\"686 5479 178 29\") == \"22 334\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"3 0 3\\n0 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\n\n\"\"\"\nGiven: Three positive integers $a$, $b$ and $n$ such that $0 \\le a, b, n \\le 10^{9}$. \n\nReturn: A single non-negative integer $S$ such that $aS + bS = n$.\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 10^{9}$) \u2014 the number of rounds.\n\nThe second line of the input contains three integers $a_1, a_2, a_3$ ($0 \\le a_i \\le n$) \u2014 the number of times Alice will show rock, scissors and paper, respectively. It is guaranteed that $a_1 + a_2 + a_3 = n$.\n\nThe third line of the input contains three integers $b_1, b_2, b_3$ ($0 \\le b_j \\le n$) \u2014 the number of times Bob will show rock, scissors and paper, respectively. It is guaranteed that $b_1 + b_2 + b_3 = n$.\n\n\n-----Output-----\n\nPrint a single non-negative integer $S$ such that $aS + bS = n$.\n\n\n-----Examples-----\nInput\n2\n0 1 1\n1 1 0\n\nOutput\n0 1\n\nInput\n3\n0 0 3\n3 0 0\n\nOutput\n3 0\n\nInput\n1\n1 1 2\n1 1 2\n\nOutput\n2 0\n\nInput\n6\n3 2 3\n2 1 3\n\nOutput\n3 1\n\nInput\n7\n2 2 2\n3 0 0\n\nOutput\n3 0\n\nInput\n13\n4 2 6\n2 1 3\n\nOutput\n6 2\n\"\"\"\n\nn = int(input().strip())\n\na1, a2, a3 = map(int, input().strip().split())\nb1, b2, b3 = map(int, input().strip().split())"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 1\") == \"0 1\"\n\nassert solution(\"15 5 5\") == \"0 15\"\n\nassert solution(\"3 5 4\") == \"0 3\"\n\nassert solution(\"6 0 4\") == \"0 6\"\n\nassert solution(\"7 0 3\") == \"0 7\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nprint(\"The boxes look good!\")\n\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nnums = list(map(int, stdin.readline().strip().split()))\nres = []"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == '3\\n7 7\\n2 3\\n4 5'\nassert solution(\"7 1 2 2 1 5 3\\n\") == '3\\n7 7\\n2 3\\n4 5'\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == '2\\n3 4\\n1 1\\n2 2'\nassert solution(\"4 1 1 1\\n\") == '4\\n4 4\\n1 1\\n2 2'\nassert solution(\"4 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == '2\\n3 4\\n1 1\\n2 2'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = list(map(int, sys.stdin.readline().rstrip().split(\" \")))\n\nans = []\n\nd = {}\ncur_max = 0\nfor i in range(n):\n    cur_max += a[i]\n    if cur_max not in d:\n        d[cur_max] = i\n    else:\n        ans.append((i, d[cur_max]))\n        cur_max = 0\n    \nans.sort(key=lambda x: x[0])"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7\\n2 3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4\\n1 1'\nassert solution('4\\n1 1 1 1') == '4\\n4 4\\n1 1'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(    '4 1 2 2 1 5 3') == \"3\"\nassert solution(    '7 1 2 2 1 5 3') == \"2\"\nassert solution(    '11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == \"2\"\nassert solution(    '7 1 2 2 1 5 3') == \"2\"\nassert solution(    '4 1 1 1') == \"4\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3\\n7 7'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n4 4'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2\\n3 4'"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n4 4'\nassert solution(\"5\\n-1 0 0 0 0\") == '1\\n1 1'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\nassert solution(\"4 1 2\") == \"NO\"\nassert solution(\"4 4 4\") == \"NO\"\nassert solution(\"4 3 2\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == 'YES'\nassert solution('3\\n3 1 2') == 'NO'\nassert solution('5\\n1 4 3 2 6') == 'NO'\nassert solution('5\\n1 2 3 4 5') == 'YES'\nassert solution('5\\n5 1 2 3 4') == 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 3\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 3 1 2\") == \"NO\"\n\"\"\"\n\nn = int(stdin.readline())\nl = [int(x) for x in stdin.readline().split()]\n\nl.sort()\n\nfor i in range(len(l) - 1, -1, -1):\n    if l[i] + 2 <= l[i - 1]:\n        print(\"YES\")\n        l.pop(i)\n        l.sort()\n        break\nelse:\n    print(\"NO\")\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n\nassert solution(\"4 2 3 1\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"accd\") == \"abdcef\"\nassert solution(\"abdfce\") == \"abdcef\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abdcfe\") == \"abdcef\"\n\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"accd\") == \"abcd\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abdcfe\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nsys.stdin = open('../in/input_5188.txt', 'r')\n\nn = int(input())\ns = input()\nt = input()"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"abc\") == \"abcd\"\nassert solution(\"ab\") == \"abcd\"\nassert solution(\"a\") == \"acd\"\n\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\", \"abdfec\") == 4\nassert solution(\"abcdef\", \"abcdee\") == -1\nassert solution(\"abdfec\", \"abdcef\") == -1\nassert solution(\"abdfec\", \"abdfec\") == 0\nassert solution(\"abdfec\", \"abdcef\") == -1\n\n\"\"\"\n\nimport sys\n\nn = int(input())\ns = input()\nt = input()\n\nvisited = set()"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"accd\") == \"abcd\"\n\nstdin = input()\nstdin = stdin.split('\\n')\ns = stdin[0]\nt = stdin[1]"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcef'\nassert solution('abcd') == 'accd'\nassert solution('abdc') == 'accd'\nassert solution('acdc') == 'accd'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"accd\") == -1\nassert solution(\"abcd\", \"abdc\") == -1\n\nassert solution(\"abcde\", \"abfec\") == 4\n\nassert solution(\"abcd\", \"abdce\") == 3\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\naa\\na\") == \"PPSS\"\nassert solution(\"2\\na\\nc\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nac\\nac\\na\") == \"PPS\"\nassert solution(\"2\\nac\\nca\") == \"PS\"\nassert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\n\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"SPPSPSPS\"\nassert solution(\"3\\na\\naa\\na\\n\") == \"PPSS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"ac\") == \"SP\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"abab\") == \"PSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"a\"*1000) == \"PS\"\nassert solution(\"a\"*1001) == \"PPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba') == 'SPPSPSPS'\nassert solution('3\\na\\naa\\naa\\na\\n') == 'PPSS'\nassert solution('2\\na\\nc\\n') == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\naa\\naa\\na\") == \"PPSS\"\nassert solution(\"2\\na\\nc\") == \"PS\"\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abab\") == \"PSPS\"\nassert solution(\"a\") == \"PPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PS\"\nassert solution(\"baba\") == \"PSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n\") == \"SPPSPSPS\"\nassert solution(\"3\\na\\naa\\naa\\na\\n\") == \"PPSS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 2 3 4 5\") == 0\nassert solution(\"7 3 7 7 7 7\") == 1\nassert solution(\"1 2 1 2\") == 0\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6 8 10') == '1'"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 6 8 10') == 1\nassert solution('3 4 7 8 10') == 2\nassert solution('2 4 6 8 10') == 1\nassert solution('2 4 6 8 10') == 1\nassert solution('2 4 6 8 10') == 1\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6 8 10') == 1\n\"\"\"\nimport sys\nimport re\nfrom typing import List\nimport re\n\nfrom collections import defaultdict"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 6 8 10') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str([2, 4, 6, 8, 10])) == 1\n\n-------------\n>>> exec(str.join('',[l.strip('\\n') for l in open('test.in', 'r').readlines() if l.strip('\\n')]))\n1\n\n-------------\n>>> exec(str.join('',[l.strip('\\n') for l in open('test.in', 'r').readlines() if l.strip('\\n')]))\nTrue\n\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution(\"2 4 6 8 10\")) == \"1\"\nassert solution(solution(\"2 4 6 8 10\")) == \"1\"\nassert solution(solution(\"2 4 6 8 10\")) == \"1\"\nassert solution(solution(\"2 4 6 8 10\")) == \"1\"\nassert solution(solution(\"2 4 6 8 10\")) == \"1\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 2 3\") == 0\nassert solution(\"\") == 0\nassert solution(\"1 2 3 4 5 6 7 8 9\") == 1\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == '2'\nassert solution(\"5\\n1 1 0 0 0\\n\") == '0'\nassert solution(\"4\\n1 1 1 1\\n\") == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10\n1 1 0 1 1 0 1 0 1 0''') == '2'\n\nassert solution('''5\n1 1 1 1''') == '0'\n\nassert solution('''4\n1 1 1 1''') == '0'\n\nassert solution('''5\n1 0 0 1 0''') == '0'\nassert solution('''5\n1 1 1 0 1''') == '0'"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 1 1\") == \"0\"\nassert solution(\"3 1 1 1\") == \"1\"\nassert solution(\"3 0 0 1\") == \"2\"\nassert solution(\"3 1 1 1\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == 2\nassert solution(\"5\") == 0\nassert solution(\"4\") == 0\n\"\"\"\nimport sys\nfrom typing import List\n\nDEBUG = False\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(10) == 2\nassert solution(5) == 0\nassert solution(4) == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\"\n\n\"\"\"\n2. \u041e\u0431\u0447\u0438\u0441\u043b\u0438\u0442\u0438 \u0441\u0443\u043c\u0443 \u043f\u0430\u0440\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0456\u0434 1 \u0434\u043e n (\u0432\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0442\u0440\u0438\u0432\u0430\u043b\u0456\u0441\u0442\u044c \u0442\u0430 \u0441\u0430\u043c\u0435 \u0447\u0438\u0441\u043b\u043e).\n\n-----Input-----\n\nn \u0442\u0440\u0438\u0432\u0430\u043b\u0456\u0441\u0442\u044c \u0442\u0430 \u0441\u0430\u043c\u0435 \u0447\u0438\u0441\u043b\u043e\n\n-----Output-----\n\n\u0412\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u044c\n\n-----Examples-----\nInput\n10\n5\n\nOutput\n25\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == '2'\nassert solution(\"5\\n1 1 0 0 0\") == '0'\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\nassert solution('1\\n5') == '1'\nassert solution('6\\n1 1') == '0'\n\n\"\"\"\n\nimport sys\nimport unittest"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\", \"First\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\", \"Second\"\n\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == 1\nassert solution(\"6\\n6 90 12 18 30 18\\n\") == 4\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == 1\nassert solution('6 90 12 18 30 18') == 4\n'''\nimport unittest\nfrom unittest import mock\n\n\nclass TestSolution(unittest.TestCase):\n\n    @mock.patch('builtins.input', side_effect=['2', '4 5 3 4 5'])\n    def test_solution_1(self, input):\n        result = solution()\n        self.assertEqual(result, 1)\n\n    @mock.patch('builtins.input', side_effect=['1 2 3 4 5'])\n    def test_solution_2(self, input):\n        result = solution()\n        self.assertEqual(result, 1)\n\n    @mock.patch('builtins.input', side_effect=['6', '90 12 18 30 18'])\n    def test_solution_3(self, input):\n        result = solution()\n        self."
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"1\"\nassert solution(\"6 90 12 18 30 18\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6 90 12 18 30 18\") == \"4\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6\n1 2 4 3 3 2''') == 2\n\nassert solution('''1\n100''') == 1\n\nassert solution('''9\n9 9 9 9 9 9 9 9''') == 1\n\nassert solution('''10\n9 9 9 9 9 9 9 9 9 10''') == 2\n\nassert solution('''14\n1 1 1 1 1 1 1 1 1 1 1''') == 14"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 3 3 2') == 2\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n2 3 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 4 3 3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"2\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 2 3 4 3 3 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 3\\n\") == \"1\"\nassert solution(\"3 3 3\\n\") == \"3\"\nassert solution(\"3 3 1\\n\") == \"2\"\nassert solution(\"3 3 3\\n\") == \"1\"\nassert solution(\"100 100 1\\n\") == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n1 2 2 3 3\") == \"3\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '2'\nassert solution('''6\n1 2 3 4 5 6''') == '2'\nassert solution('''1\n100''') == '1'\nassert solution('''2\n1 1''') == '2'\nassert solution('''3\n1 2 3''') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"10 10\\n0 0 0 0 0 0 0 0 0 0 1\") == \"-1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 1 0 0 1\") == \"2\"\nassert solution(\"1 3 1 0 0 1\") == \"3\"\nassert solution(\"1 3 1 0 0 1\") == \"3\"\nassert solution(\"1 3 1 0 0 1\") == \"3\"\nassert solution(\"1 3 1 0 0 1\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1\\n') == '3'\nassert solution('5 3\\n0 0 0 0 1\\n') == '2'\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n') == '3'\nassert solution('5 10\\n0 0 0 0 0\\n') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n0 0 0 0 1\\n') == '3'\nassert solution('6 2\\n0 1 1 0 0 1\\n') == '3'\nassert solution('10 3\\n0 0 0 0 0 0 0 0 0 0 1\\n') == '-1'\nassert solution('5 10\\n0 0 0 0 0 0 0 0 0 0 1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"2\"\nassert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 10\\n0 0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 0 1 1') == '2'\nassert solution('5 2\\n1 0 0 0 1') == '3'\nassert solution('5 3\\n0 0 0 0 1') == '-1'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\n\n-----Tests-----\n-----Max time per test-----\n---- 3 seconds per test ----\n\"\"\"\nimport sys"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n0 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1 1 0 1\") == \"3\"\nassert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n1 0 0 0 1\") == \"2\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"10 10\\n0 0 0 0 0 0 0 0 0 0 1\") == \"-1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n0 0 1 1 0 1\\n\") == \"3\"\nassert solution(\"5 3\\n0 0 1 1 0 1\\n\") == \"2\"\nassert solution(\"10 3\\n0 0 0 0 0 0\\n\") == \"0\"\nassert solution(\"10 10\\n0 0 0 0 0 0\\n\") == \"0\"\nassert solution(\"5 10\\n0 0 0 0 0 0\\n\") == \"2\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\n\nassert solution(\"5 3\\n0 0 0 0 1\") == 2\n\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\n\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3\n\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('10') == '1'\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"8\") == \"4\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 3\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('3\\n') == '3\\n'\nassert solution('10\\n') == '3\\n'\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 3\n\"\"\"\n\nn = int(input())\n\nprint(n * (n - 1) * (n - 2) // 6)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 3\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == \"3\"\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\")(\") == 0\nassert solution(\"(((\")) == 3\nassert solution(\"())(\") == 3\nassert solution(\"())(()\") == 3\nassert solution(\"(())\") == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"((()))\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(()())\") == 0\nassert solution(\"(((())))\") == 3\nassert solution(\"(()())\") == 1\nassert solution(\"(((())))\") == 3\nassert solution(\"(((((((()())))))\") == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('()())') == 0\nassert solution('()()(()') == 2\nassert solution('((())())') == 1\nassert solution('))(((((())))(((()()))))(') == 1\nassert solution('((()))((((()())()))())') == 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('((((())') == 3\nassert solution('()()') == 0\nassert solution('()(()())') == 2\nassert solution('(())(())') == 0\nassert solution(')(') == 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(((()))\") == 2\nassert solution(\"()()\") == 0\nassert solution(\"()(())\") == 1\nassert solution(\"(())((()())())\") == 3\nassert solution(\"((()()))\") == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()\") == 0\nassert solution(\"()()\") == 0\nassert solution(\"(())\") == 1\nassert solution(\"())\") == 2\nassert solution(\"((())\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()()()\") == 3\nassert solution(\"(((()))())\") == 3\nassert solution(\"(((((())))))\") == 6\nassert solution(\"())(((())))(((()()))(()))\") == 10\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((()))\") == 2\nassert solution(\"()())()\") == 2\nassert solution(\"())(\") == 2\nassert solution(\"()(())(()())\") == 3\nassert solution(\"()()())()\") == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"())\") == 0\nassert solution
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcde\") == \"3\"\nassert solution(\"bbaba\") == \"3\"\nassert solution(\"bb\") == \"1\"\nassert solution(\"asdfasdf\") == \"3\"\nassert solution(\"fasd\") == \"2\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"tset\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"tt\"\nassert solution(\"tst\") == \"t\"\nassert solution(\"tt\") == \"\"\nassert solution(\"et\") == \"e\"\nassert solution(\"ee\") == \"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"\") == 0\nassert solution(\"aaaaaaaaaaaaa\") == 1\nassert solution(\"b\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bbaba\") == 3\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('abc') == 0\nassert solution('abcde') == 0\nassert solution('ab') == 1\nassert solution('bb') == 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcde') == 3\nassert solution('bbaba') == 3\nassert solution('aaabbb') == 3\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == ans\nprint(solution(s))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\nassert solution(\"asdfasdf\") == 3\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n\nfrom sys import stdin\n\na, b, c, d = stdin.readline().split()\n\na, b, c, d = int(a), int(b), int(c), int(d)\n\nans = 0\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('10 1000 1 1000') == '100'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1 1') == 2\n\"\"\"\n\na, b, c, d = map(int, input().split())\nx = min(b, c)\ny = max(a, d)\nprint(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('0 1 1 1') == '1'\nassert solution('1 1 2 1') == '1'\nassert solution('0 0 0 0') == '0'\nassert solution('0 0 0 1') == '0'\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 1 1') == 2\nassert solution('1 2 1 1') == 2\nassert solution('1 1 1 1') == 1\n\n'''"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 4 4\") == \"2\"\nassert solution(\"2 2 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == '2'\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]\n\nmax_multiplication = 0\n\nfor x in range(1, b + 1):\n    for y in range(1, d + 1):\n        max_multiplication = max(x * y, max_multiplication)\n\nprint(max_multiplication)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 4 6 7\\n\") == \"2\"\nassert solution(\"6 9 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"8 9 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"6 6 1 4 4 6 7\\n\") == \"4\"\nassert solution(\"7 6 1 4 4 6 7\\n\") == \"4\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == 2\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 9 3') == '1'\nassert solution('6 9 3') == '0'\nassert solution('5 9 3') == '2'\nassert solution('2 9 1') == '0'\nassert solution('8 9 4') == '0'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 3\") == \"2\"\nassert solution(\"4 9 9 9 8\") == \"1\"\nassert solution(\"4 9 9 8 9\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n9 1 4 4 6 7\") == 2\nassert solution(\"5\\n9 1 4 4 6 7\") == 2\nassert solution(\"6\\n9 1 4 4 6 7\") == 2\nassert solution(\"7\\n9 1 4 4 6 7\") == 2\nassert solution(\"8\\n9 1 4 4 6 7\") == 2\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 2\") == \"2\"\nassert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str, debug: bool = False) -> int:\n        l = [int(x) for x in stdin.split(\"\\n\")[:-1]]\n        if debug:\n            print(\"l:\", l)\n        self.N = len(l)\n        self.l = l\n        self.s = sum(l)\n        #sorted(l)\n        if debug:\n            print(\"self.N:\", self.N)\n            print(\"self.l:\", self.l)\n            print(\"self.s:\", self.s)\n        # print(\"{} / {}\".format(self.N, self.s))\n        return self.divide_and_conquer(0, self.s // 2)\n\n    def divide_and_conquer(self, i: int, sum_: int, total: int = 0, choices: List[int] = []) -> int:\n        if i == self.N:\n            return 1 if total == sum_ else 0\n        if total == sum_:\n            return self.divide_and_conquer(i + 1, 0, total, choices)\n        return self.divide_and_conquer(i + 1, sum_, total + self.l[i], choices + [self.l[i]]) + self.divide_and_conquer(i + 1, sum_, total, choices)"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 9 7 1 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n9 1 4 4\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n5\n9 1 4 4 6\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n8\n9 1 4 4 6 7 8\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n10\n9 1 4 4 6 7 8 9 10\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n6\n9 1 4 4 6 7\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 24 21 23') == '3'"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n-----\n\n\u041f\u0440\u0435\u043f\u043e\u0434 \u043f\u0440\u0438\u0432\u0435\u043b \u043d\u0430\u043c \u043a \u0437\u0430\u0434\u0430\u043d\u0438\u044e \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0432 \u043c\u0430\u0441\u043a\u0435 \u0438 \u0432 \u0448\u0430\u0448\u043b\u044b\u043a\u0435\n\u041d\u0430\u0434\u0435\u044e\u0441\u044c \u0442\u0435\u0431\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f\n\u0412 \u0448\u0430\u0448\u043b\u044b\u043a\u0435 \u0434\u0432\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043d\u0438\u0445 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0438 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\u041d\u0430 \u043c\u0430\u043a\u0430\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u043a\u043b\u0430\u0434\u043a\u0435 \u0432\u044b\u043f\u0438\u0441\u0430\u043d\u044b \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u043e\u0442 \u0442\u0430\u043a:\n\n\u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\n\n\u041f\u0435\u0442\u0440\u043e\u0432 \u0421\u0435\u043c\u0435\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\n\n\u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\n\n\u0410\u0432\u0442\u043e\u0440 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u0432\u0445\u043e\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u043c\u0435\u043d \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u043c\u044f \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e \u201c\u0418\u0432\u0430\u043d\u201d \u0438\u043b\u0438 \u201c\u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u201d \u0438\u043b\u0438 \u201c\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u201d.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u043e \u201c\u0418\u0432\u0430\u043d\u201d, \u043d\u043e \u043d\u0435 \u0441\u043b\u043e\u0432\u0430 \u201c\u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u201d, \u0438\u043b\u0438 \u201c\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u201d.\n\nSample Input 1:\n\n\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447 \u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447 \u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\nSample Output 1:\n\n\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\nSample Input 2:\n\n\u041c\u0430\u043a\u0430\u0440\u043e\u043d\u043d\u044b\u0439 \u0421\u0430\u0448\u0430 \u041c\u0430\u043a\u0430\u0440\u043e\u043d\u043d\u044b\u0439 \u0421\u0430\u0448\u0430 \u041c\u0430\u043a\u0430\u0440\u043e\u043d\u043d\u044b\u0439 \u0421\u0430\u0448\u0430\nSample Output 2:\n\n\u041c\u0430\u043a\u0430\u0440\u043e\u043d\u043d\u044b\u0439 \u0421\u0430\u0448\u0430"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 24 21 23\") == 3\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_str) == str(test_res)\n\n\"\"\"\n\nn, h, l, r = [int(i) for i in stdin.split()]\na = [int(i) for i in stdin.split()]\n\nres = 0\n\nfor i in range(n):\n    if i < n - 1:\n        if a[i] - 1 >= l and a[i] + 1 <= r:\n            res += 1\n    else:\n        if a[i] - 1 >= l:\n            res += 1\n\nprint(res)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input.txt\").read()) == 3\nprint(\"Hooray!\")\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 24 21 23') == '3'\n\"\"\"\n\nn, h, l, r = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\ngood_times = 0\nfor i in range(n):\n    if l <= a[i] <= r:\n        good_times += 1\n\nprint(good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == '3'\n\"\"\"\n\nimport sys\n\nn, h, l, r = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\ncnt = 0\n\nfor i in range(n):\n    if l < a[i] < r:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 10 50 110 250\") == \"3\"\nassert solution(\"4 7 12 100 150 199\") == \"1\"\nassert solution(\"6 4 7 12 100 150 199\") == \"3\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == 4\nassert solution(\"5\\n2 10 50 110 250\\n\") == 1\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == 3\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == 4\nassert solution(\"5\\n2 10 50 110 250\") == 1\nassert solution(\"6\\n4 7 12 100 150 199\") == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == 4\nassert solution(\"5\\n2 10 50 110 250\") == 1\nassert solution(\"6\\n4 7 12 100 150 199\") == 3\n\n\n\"\"\"\nfrom functools import reduce\nfrom operator import mul\nfrom typing import List\nfrom typing import Optional\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\nassert solution('5\\n2 10 50 110 250\\n') == '1'\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 11 3 7\\n\") == \"1 2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 4 5 6 7 8 9 10') == '1 2'\n\"\"\"\nimport math\nfrom typing import List\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"5\\n2 4 8 3 6\"\n) == \"1 2\"\nassert solution(\n    \"6\\n2 5 10 1 10 2\"\n) == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 4 8 3 6''') == '1 2'\nassert solution('''5\n2 4 8 3 6''') == '1 2'\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 8 3 6\") == '1 2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"5\\n5 2 11 3 7\") == \"2 4\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 11 3 7\") == \"1 2\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\nassert solution(\"6 5 10 1 10 2\") == \"1 4\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('121') == '021'\nassert solution('110011') == '110110'\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"000000\") == \"001122\"\nassert solution(\"120110\") == \"120120\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1111111\") == \"1111110\"\nassert solution(\"11100010\") == \"11100010\"\nassert solution(\"11100010\") == \"11100010\"\nassert solution(\"11100010\") == \"11100010\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110111\") == \"111022\"\nassert solution(\"10111010\") == \"10111010\"\nassert solution(\"10111010\") == \"10111010\"\nassert solution(\"10111010\") == \"10111010\"\nassert solution(\"10111010\") == \"10111010\"\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"211220\"\nassert solution(\"120110\") == \"120120\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter\nfrom typing import Dict"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211220'\n\"\"\"\n\n\"\"\"\nsolution:\n1. find the first character, (2)0 (1)1 (0)0 (0)0 (0)1 (1)0 (0)0 (0)0 (0)0\n2. replace all (2)0 (1)1 (0)0 (0)0 (0)1 (1)0 (0)0 (0)0 (0)0 by 0, 1, 2,\n3. replace (0)1 by 0, (0)1 by 0, (0)1 by 0, (0)1 by 0\n4. continue until string has all characters replaced\n\n\"\"\"\n\nclass Solution:\n    def balanced(self, s: str) -> str:\n        balance = 0\n        for ch in s:\n            if ch == '0':\n                balance += 1\n            elif ch == '1':\n                balance -= 1\n            if balance < 0:\n                return ''\n        return s"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"111\") == \"201\"\nassert solution(\"121011\") == \"211220\"\nassert solution(\"2221\") == \"2221\"\nassert solution(\"111111111111\") == \"22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"1010\"\nassert solution(\"2\") == \"01\"\nassert solution(\"3\") == \"012\"\nassert solution(\"11\") == \"1011\"\nassert solution(\"111\") == \"1110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('121') == '021'\nassert solution('120110') == '120120'"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"01\") == \"01\"\nassert solution(\"101\") == \"101\"\nassert solution(\"110\") == \"101\"\nassert solution(\"111\") == \"110\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 4\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(\"Hooray!\")\n\n-----Explanation-----\nThe first line of input contains N and M, the total number of steps and the number of broken steps respectively.\nThe second line of input contains the broken steps.\nFor each step, we need to check whether that step is dangerous.\nIf it is not dangerous, then the number of ways to climb up the stairs is the same as the previous step.\nOtherwise, the number of ways to climb up the stairs is the same as the previous step minus 1.\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n3\\n\") == \"0\\n1\\n1\\n0\\n\"\nassert solution(\"10 2\\n1\\n4\\n\") == \"4\\n1\\n2\\n1\\n\"\nassert solution(\"7 3\\n1\\n4\\n\") == \"0\\n1\\n0\\n0\\n1\\n1\\n\"\nassert solution(\"3 1\\n3\\n\") == \"1\\n1\\n1\\n\"\nassert solution(\"2 2\\n1\\n4\\n\") == \"2\\n0\\n0\\n2\\n\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 1\\n3\\n') == '4'\n\nprint(solution('6 1\\n3\\n'))"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 1\\n3') == '4'\n\"\"\"\n\nfrom math import comb\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort()\n\ntotal = 0\nfor i in range(m, n + 1):\n    total += comb(n, i) - comb(n - m, i)\n\nprint(total % (10 ** 9 + 7))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3') == '2'\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1\\n3\\n\") == \"4\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n0') == '2'\nassert solution('4 1\\n1') == '1'\nassert solution('4 1\\n2') == '0'\nassert solution('4 1\\n3') == '0'\nassert solution('4 1\\n4') == '0'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_input_correct)) == str(sample_output_correct)\nassert solution(str(sample_input_incorrect))!= str(sample_output_correct)\n\"\"\"\n\n\"\"\"\nProblem Statement\n\nGiven a staircase of size n, we can climb up either 1 or 2 steps at a time. Given n, write a function that returns the number of unique ways we can climb the staircase. The order of the steps matters.\n\nFor example, if n is 4, then there are 5 unique ways:\n\n1, 1, 1, 1\n2, 1, 1\n1, 2, 1\n1, 1, 2\n2, 2\nWhat if, instead of being able to climb 1 or 2 steps at a time, you could climb any number from a set of positive integers X? For example, if X = {1, 3, 5}, you could climb 1, 3, or 5 steps at a time.\n\nSolution\n\nThe solution is similar to the one for climbing the staircase of size n = 4. You can see that instead of using a single integer to determine the number of ways to climb the staircase, you can use a list/array of integers X.\n\nA similar way of approaching this problem is to use dynamic programming. That is, you can solve the problem for all possible values of n by storing the number of unique ways to climb the staircase for all the values of n that you have already encountered before. To solve the problem for n = n, you can just return the stored value.\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 4\") == \"2\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2 4\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''X K D\n''') == '2'\n\n\"\"\"\nCreate a graph G of all the vertices on the number line.\nFor each vertex v, v has a list of vertices adjacent to v.\n\nFind the shortest distance between two vertices on the number line.\n\nIf there is a negative cycle, the shortest distance is not unique.\nIn this case, return -1.\n\nIf there is no negative cycle, return the minimum distance.\n\"\"\"\n\n\"\"\"\nFor each vertex v, v has a list of vertices adjacent to v.\n\nFor each vertex v, v has a list of distances from v to its neighbors.\n\nA distance between two vertices is the minimum distance from one to the other.\n\nGiven a graph G, and a vertex v, find the minimum distance from v to another vertex in G.\n\"\"\"\n\nimport math"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 4\\n\") == '2'\nassert solution(\"5 3 5\\n\") == '2'\nassert solution(\"5 3 4\\n\") == '0'\nassert solution(\"1 5 5\\n\") == '0'\n\"\"\"\n\nimport sys\n\na, b, c = sys.stdin.read().split('\\n')\n\nx = int(a)\nk = int(b)\nd = int(c)\n\nprint(min(abs(x - k * d), abs(x + k * d)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2 4') == '2'\n\n\"\"\"\n\nimport sys\n\nx, k, d = map(int, sys.stdin.readline().split())\n\nprint(min(abs(x - d), abs(x + d)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nx, k, d = map(int, input().split())\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 2 4\n''') == '2'\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1\\n') == '1'\nassert solution('1 2 1\\n') == '0'\nassert solution('2 3 2\\n') == '1'\n\nassert solution('3 4 -1\\n') == '2'\nassert solution('5 -5 0\\n') == '1'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 10\nassert solution(2128506) == 3\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 3\nassert solution('571576') == 10\n\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '3'\nassert solution('571576') == '10'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 2\n\nassert solution('14') == 0\n\nassert solution('61441') == 2\n\nassert solution('571576') == 10\n\n\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\nassert solution('2128506') == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"61441\") == 3\nassert solution(\"571576\") == 10\nassert solution(\"2128506\") == 3\nassert solution(\"11\") == 2\n\"\"\"\n\nfrom math import sqrt, ceil\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('2128506') == '3'\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\nassert solution('571576') == 10\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nassert solution(\"2128506\") == \"3\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 27\n\"\"\"\n\nn = input()\nprint(int(n * (n + 1) / 2))\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\nimport math\na = int(input())\nprint((a * a) * 2)\n\n\"\"\"\n\n\"\"\"\n\nWrite a function:"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 27\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"27\"\n\"\"\"\na = int(input())\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 27\n\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '27'\n\"\"\"\n\n\"\"\"\nCopyright: 2020 Leboncoin\nLicense: MIT\nM\u00e9thode math\u00e9matique\nTous droits r\u00e9serv\u00e9s\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 8\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n\nimport math"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(13) == 1\nassert solution(48) == 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('48') == 0\nassert solution('13') == 1\nprint('All test cases passed.')\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(13) == \"1\"\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == 1\nassert solution(\"927\") == 1\nassert solution(\"48\") == 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0\nassert solution('2456') == 0\nassert solution('819') == 1\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(13) == 1\nassert solution(927) == 1\nassert solution(48) == 0\nassert solution(25) == 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '0'\nassert solution('11') == '1'\nassert solution('99') == '0'\nassert solution('555') == '1'\nassert solution('1000') == '0'\n\nprint('Passed all tests. Ready to submit!')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == 1\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 5 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('0 1 1 0') == '0'\nassert solution('0 1 1 1') == '1'\nassert solution('0 0 0 0 0 0 1 0 1 0 1 1 1 1 1') == '1'\nassert solution('0 0 0 0 0 0 1 0 1 0 1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 5 1') == 4\nassert solution('4 1 2 3') == 0\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 5 3 1\") == 4\n\n\n-----Solution-----\n\n1.1) \u041c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a\u043e\u0439 \u043e\u043d \u0441\u043c\u0435\u0448\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440. \u041d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0435\u0451 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.\n\n\u0421\u043e\u0432\u0435\u0442\u0443\u044e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u044b, \u0434\u043b\u044f\n\u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u0431\u0435\u0433\u0430\u044e \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437 \u0437\u0430\u043f\u044f\u0442\u043e\u0439, \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u043e\u043c\u0443 \u0438\u043b\u0438 \u0434\u0432\u043e\u0439\u043d\u043e\u043c\u0443\n\u0437\u043d\u0430\u043a\u0443 \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u044f.\n\n\u041d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u043d\u0435\u0437\u043d\u0430\u043a\u043e\u043c\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043b\u0438\u0431\u043e \u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c,\n\u0438\u043b\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u043e\u0432 \u0438\u043b\u0438 \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435, \u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043d\u0435\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440.\n\n2.1) \u041d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0435 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u043c\u043d\u0435\u043d\u0438\u0438, \u0447\u0442\u043e \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445\n\u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u0442\u043e \u0442\u0430\u043a\u043e\u0439 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c.\n\u0421\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u0432\u0441\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442\n\u043a\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u043c, \u043a\u0440\u043e\u043c\u0435 \u0432\u044b\u0448\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432, \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439.\n\n3.1) \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0441\u043a\u0430\u043b \u043e\u0442 \u0432\u0438\u0434\u0435\u043e \u0444\u0438\u043b\u044c\u043c\u0430 \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430. \u041c\u043d\u0435 \u0431\u044b\u043b\u043e \u0441\u043a\u0443\u0447\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u043a\u0430\u043a \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\n\u0448\u0430\u0433\u0435. \u0412 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u044d\u0442\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439. \u0412 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0441\u043c\u044b\u0441\u043b\u0430\n\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439,\n\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.\n\n4.1) \u0421\u043e\u0432\u0435\u0442\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u043d\u0434\u043e\u0432,\n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043c\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\n\u0421\u043e\u0432\u0435\u0442\u0443\u044e \u0434\u0435\u043b\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u0437 \u0434"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == ''\nassert solution('1 2 3 2') == ''\nassert solution('1 2 2') == '2'\nassert solution('2 2 3 4 5 6 7 8 9 0 1') == '0'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5 1') == 4\n\nsolution(\"4 2 5 1\")\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\n\n---"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == test_result\nprint(solution(input()))\n\n-----Challenge-----\n\nWrite a function solution(data) to accept a string of comma-separated integers and print the number of different integers.\n\nConstraints\n1 \u2264 n \u2264 10\n\nExample\nInput:\n2, 2, 2, 2\n\nOutput:\n3\n\nsolution(\"2,2,2,2\") # 3\n\n\n-----\n\nNOTES\n\nThe sort() method sorts the elements of a given list in a specific order. The syntax of the sort() method is:\n\nlist.sort(key=..., reverse=...)\n\nThe sort() method, when passed the optional key argument, works on a specific attribute of each list element. The reverse parameter is set to True by default.\n\nTo sort a list of dictionaries by the value of the \"name\" key:\n\nlist_of_dicts.sort(key=lambda x: x[\"name\"])\n\n\n-----\n\n\"\"\"\n\n\"\"\"\nSOLUTION:\n\nlist_of_numbers = input().split()"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 5 3 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '2 3'\nassert solution('5 5 6') == '5 6'\nassert solution('2 5 5 6 7') == '5 6'\n\n'''"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 1\\n8 1\") == '2'\nassert solution(\"8 7\\n8 1\") == '2'\nassert solution(\"8 7\\n8 1\") == '2'\nassert solution(\"999999733 999999732\\n999999733 999999733\") == '1'\nassert solution(\"999999733 999999733\\n999999733 999999733\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2'\nassert solution('8 7\\n8 1\\n999999733 999999732\\n999999733 999999733') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\nassert solution('3') == 3\nassert solution('2') == 2\nassert solution('123') == 123\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999733\") == \"1\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\n---"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7\\n8 1\\n6 10') == '2'\nassert solution('8 7\\n8 1\\n999999733 999999732') == '1'\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n\nfrom typing import List\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\nimport sys\nfrom itertools import product"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\nimport math\n\nN, M = [int(x) for x in input().split()]\n\nswitch = {}\nfor _ in range(N):\n    switch_id, switch_status = input().split()\n    switch[int(switch_id)] = int(switch_status)\n\nbulbs = []\nfor _ in range(M):\n    bulb_status = input()\n    bulbs.append(int(bulb_status))\n\ncount = 0\nfor bulb in bulbs:\n    num_switch_on = 0\n    for switch_id in switch:\n        if switch_id % bulb == 0:\n            num_switch_on += 1\n    if num_switch_on % 2 == 0:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\nassert solution('7 100 3 30') == '13.99999999999999998'\nassert solution('1 2 3 4') == '0.00000000000000000000'\nassert solution('100 100 99 100') == '0.016666666666666667'\nassert solution('1 10 20 30') == '0.023809523809523808'\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 4, 9, 0) == 5\n\"\"\"\n\nimport numpy as np\nimport sys\n\nh, m = [int(s) for s in sys.stdin.readline().strip().split()]\na, b = [int(s) for s in sys.stdin.readline().strip().split()]\n\nh, m = h / 2, m / 2\nr = (a ** 2 + b ** 2 - 2 * a * b * np.cos(h * np.pi / 12 - m * np.pi / 60)) ** 0.5\nprint(r)"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\"\nfrom math import atan2, pi\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0000000000\"\nassert solution(\"1 2 3 4\") == \"0.27272727273\"\n\"\"\"\n\nimport sys\nimport math\n\nstdin = sys.stdin.readline().split()\nA = int(stdin[0])\nB = int(stdin[1])\nH = int(stdin[2])\nM = int(stdin[3])\n\nomega_h = 12 / (H + (M / 60))\nomega_m = 1 / (M / 60)\n\nx_h = B / 2 - A / 2\nx_m = B / 2\n\nd_h = x_h * math.sin(omega_h)\nd_m = x_m * math.sin(omega_m)\n\nprint(d_h + d_m)"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 5 60 4\") == \"8\"\nassert solution(\"1 1 1\") == \"6\"\nassert solution(\"1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n1 4 5 60 4\") == \"8\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == 8\nassert solution(\"3 1\\n1 1 1\") == 6\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 5 60 4\") == \"8\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"8\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 4\n1 4 5 60 4''') == 8\nassert solution('''3 1\n1 1 1''') == 6\nassert solution('''15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3''') == 97\n'''\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"8\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import deque\nfrom typing import Deque, Tuple\n\n\nclass Node:\n    def __init__(self, data: int, left: Node = None, right: Node = None):\n        self.data = data\n        self.left = left\n        self.right = right\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"1 1 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\"\"\"\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\nprint('The local tests are done. Try Solution II online.')\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n1 4\\n\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"4 5\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\"\nassert solution(\"1000000\") == \"0\\n0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 4') == '6'\nassert solution('2 -2 3 1 2') == '6'\nassert solution('1 3') == '2'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\nassert solution(\"1 0\\n1000000\") == '0\\n0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\"\"\"\n\nfrom collections import Counter, defaultdict, deque\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n1 4'\nassert solution('2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n1 4'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('1 2\\n1 3\\n2 5\\n3 4') == '1\\n2\\n1 4'\nassert solution('1 2\\n2 3\\n2 4') == '0\\n0'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_data) == test_result\n\"\"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\\nyes\\nr\\nno\\n\") == \"Yes\\nYes\\nYes\\nNo\\n\"\nassert solution(\"fced\\nxyz\\nr\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\n\"\nassert solution(\"fced\\nxyz\\nr\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\n\"\nassert solution(\"fced\\nxyz\\nr\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\n\"\nassert solution(\"fced\\nxyz\\nr\\naz\\n\") == \"Yes\\nYes\\nYes\\nYes\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'No'\nassert solution('ababababab') == 'Yes'\n\nassert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\nprint(solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\"))"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\nassert solution(test_stdin_3) == test_stdout_3\n\n\"\"\"\nfrom collections import Counter\nimport sys\nimport re"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"0\\n0\"\nassert solution(\"1 1\\n1\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n4 1'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 3\\n4 5\\n2 4\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"7 7\\n1 2\\n4 5\\n6 7\\n1 3\\n4 6\\n7 7\\n1 4\\n6 7\\n2 4\\n7 7\\n4 4\\n5 6\\n7 7\\n4 5\\n7 7\\n2 5\\n7 7\\n1 4\\n6 7\\n2 5\\n7 7\\n1 5\\n7 7\\n3 6\\n7 7\\n1 6\\n7 7\\n2 6\\n7 7\\n1 5\\n7 7\\n1 4\\n6 7\\n2 5\\n7 7\\n1 6\\n7 7\\n2 6\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 6\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1 5\\n7 7\\n1 6\\n7 7\\n2 5\\n7 7\\n1"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('1 0\\n1000001') == '1\\n1'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n2') == '0'\nassert solution('3\\n3') == '0'\nassert solution('4\\n4') == '0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1 0') == 0\nassert solution('1 0\\n0 0') == 0\nassert solution('4 2\\n1 2\\n2 3\\n3 4') == 0\nassert solution('4 2\\n1 3\\n2 4\\n3 4') == 0\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 5 4 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n7\n1 3 5 6 7 4 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n4\n1 2 4 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n\"\"\") == \"1\"\n\n\"\"\"\nsolution_1(input)\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([2, 1, 5, 4, 3])) == 4\nassert solution(str([1, 3, 5, 6, 7, 4, 2])) == 7\nassert solution(str([1, 2, 4, 3])) == 3\nassert solution(str([1, 2, 3])) == 3\n\"\"\"\n\nn = int(input())\na = sorted(map(int, input().split()))\n\nl = []\nans = 1\n\nfor i in range(n - 1):\n    if a[i] < a[i + 1]:\n        ans += 1\n        l.append('R')\n    else:\n        l.append('L')\n\nprint(ans)\nprint(''.join(l))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRL'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = list(map(int, sys.stdin.readline().rstrip().split()))\n\nans = [0] * n\ndp = [0] * n\n\nfor i in range(n):\n    dp[i] = 1\n    for j in range(i):\n        if a[i] > a[j]:\n            dp[i] = max(dp[i], dp[j] + 1)\n            ans[i] = max(ans[i], dp[j])\nprint(max(dp))\nfor i, a in enumerate(ans):\n    if a == dp[i]:\n        print('L' if i % 2 == 0 else 'R', end='')\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 5 4 3') == '4', solution('4\\n2 1 5 4 3')\n\nassert solution('7\\n1 3 5 6 7 4 2') == '7', solution('7\\n1 3 5 6 7 4 2')\n\nassert solution('3\\n1 2 3') == '3', solution('3\\n1 2 3')\n\nassert solution('4\\n1 2 4 3') == '4', solution('4\\n1 2 4 3')\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\n-----\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\n\nk = Counter(a)\nprint(max(k.keys()))\nprint(''.join(map(lambda x: 'L' if x == 1 else 'R', k.values())))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 5 4 3') == '4'\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nans = 1\nl, r = 0, n - 1\nwhile l < r:\n    ans = max(ans, r - l + 1)\n    if a[l] < a[r]:\n        l += 1\n    else:\n        r -= 1\n\nprint(ans)\n\ns = []\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\nassert solution('3\\n1 2 3') == '3\\nLLL'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 5 4 3\") == '4'\nassert solution(\"7 1 3 5 6 7 4 2\") == '7'\nassert solution(\"1 2 3\") == '3'\nassert solution(\"1 3 5 6 7 4 2\") == '7'\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"4\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"2\"\nassert solution(\"2\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n2\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n1\") == \"4\"\n\n----\n\"\"\"\n\n\nimport sys\n\nsys.stdin = open(\"test_files/Y11R5P1/A.in\", \"r\")\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5 3 4\") == 4\nassert solution(\"6 5 4 3 2 4 3\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\nassert solution(\"2\\n1 2\") == 2\nassert solution(\"7\\n6 5 4 3 2 4 3\") == 2"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\"\"\"\n\nimport sys\n\n\"\"\"\nThe most naive way is to check every possible combinations of removing a single element.\n\nTo keep track of the longest increasing contiguous subarray of remaining array, we use dp[i] to store the length of it.\n\ndp[i] = max{\n    1 + dp[j],\n    where j in range(i) and a[j] < a[i]\n}\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == '4'\nassert solution(\"2\\n1 2\") == '2'\nassert solution(\"7\\n6 5 4 3 2 4 3\") == '2'\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('2 2\\n1 2') == 0\nassert solution('4 3\\n1 2 2 3') == 3\nassert solution('10 2\\n1 2') == 2\nassert solution('8 9\\n1 2 3 4 5 6 7 8') == 6\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\nassert solution('2\\n1 2') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 2 4 5''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5''') == '2'\n\nassert solution('''5 3\n1 2 3 3 3''') == '0'\n\nassert solution('''5 3\n1 2 2 4 5''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5''') == '1'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 2 2 2\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"1 2 2 2 2 2 1 2 1 1 1 1 1 2 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 3\n1 2 2 4 5\"\"\") == \"1\"\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 4\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\n\"\"\"\n\nnk = input().split()\nn = int(nk[0])\nk = int(nk[1])\n\na = list(map(int, input().split()))\n\nprint(sum([1 for ai in a if ai % 2 == 0]) - k)\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n\nn, k = [int(c) for c in input().split(' ')]\na = [int(c) for c in input().split(' ')]\n\na = [i // 2 for i in a]\n\nresult = 0\ncount = 0\nfor i in range(n - 1):\n    if a[i] > a[i + 1]:\n        count += 1\n        result += 1\n    if count == k:\n        break\n\nprint(result)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 4\") == \"0\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"4 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 1') == ''\nassert solution('1 2 2 2 2 2') == ''\nassert solution('1 2 2 2 2 2 3') == ''\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 3 3') == '0'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == '4'\nassert solution(\"1 1 2\") == '1'\nassert solution(\"3 2 2\") == '3'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3 4\") == '4'\nassert solution(\"10 5 10\") == '5'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3 4') == '4'\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 4\") == '4'\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 5\") == \"4\"\n\"\"\"\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().strip().split(' '))\nprint(N * (A + B - 1) + A)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('3\\n2\\n2') == '4'\nassert solution('5\\n4\\n2\\n4\\n2') == '2'\nassert solution('4\\n2\\n4\\n2\\n4\\n2') == '2'\nassert solution('4\\n2\\n4\\n2\\n4\\n2\\n2\\n4\\n2\\n4\\n2') == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\\n1\\n2\") == '48\\n4'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1\\n2\") == '4'\nassert solution(\"4\\n2\\n8\") == '2'\nassert solution(\"10\\n1\\n1\") == '1'\nassert solution(\"6\\n2\\n12\") == '3'\nassert solution(\"6\\n2\\n12\\n1\") == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n8\n2 3 4 8 16''') == '48'\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2\\n12\\n6\\n4\\n24\\n16\\n3\") == \"48\"\nassert solution(\"1\\n2\") == \"4\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n2\") == \"2\"\nassert solution(\"2\\n1\\n2\\n8\\n8\\n12\\n6\\n4\\n24\\n16\\n3\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"48\\n4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n1\") == \"-1\"\nassert solution(\"2\\n8\") == \"4\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1\\n2') == '4'\nassert solution('8\\n2\\n2') == '2'\nassert solution('8\\n2\\n3') == '-1'\nassert solution('8\\n2\\n4') == '4'\nassert solution('8\\n2\\n5') == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\nassert solution(\"1\\n2\\n\") == \"1\"\nassert solution(\"1\\n8\\n1 1 2 3 4 6 8 9 10\") == \"-1\"\nassert solution(\"2\\n8\\n1 1 2 3 4 6 8 9 10\") == \"8\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3\\n1 2 3') == '2\\n2 3'\nassert solution('5\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n6 6 6 6 5\") == \"1\\n6\"\nassert solution(\"3\\n3 3 3\") == \"1\\n3\"\nassert solution(\"2\\n2 2\") == \"1\\n2\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 4 4\") == \"2 4\"\nassert solution(\"4 2 4 2 4\") == \"2 4\"\nassert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"6 6 6 6 6\") == \"1 6\"\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"1 5 5 1 6 1\") == \"3 5 6 1\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"\nassert solution(\"5 6 6 6 6\") == \"1 6\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\n\nassert solution(\"2 4 2 4 4\\n\") == \"2\\n2 4\"\n\nassert solution(\"5 6 6 6 6\\n\") == \"1\\n6\"\n\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n2 4 2 4 4\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 5 1 6 1\") == \"3 7 1\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"\nassert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 5 1 6 1') == 3\nassert solution('2 4 2 4 4') == 2\nassert solution('6 6 6 6 6') == 1\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n1 5 5 1 6 1''') == '3\nassert solution('''5\n2 4 2 4 4''') == '2\nassert solution('''5\n6 6 6 6 6''') == '1\n\n'''"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(432)) == \"435\"\nassert solution(str(99)) == \"103\"\nassert solution(str(237)) == \"237\"\nassert solution(str(42)) == \"44\"\n\"\"\"\n\na = int(input())\n\nd = [int(i) for i in str(a)]\nsum = 0\n\nfor i in d:\n    sum += i"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nassert solution('7') == '7'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(43) == 43\nassert solution(1) == 1\nassert solution(3) == 3\nassert solution(12) == 13\n\"\"\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'abab'\n\"\"\"\n\nfrom typing import List, Set\nfrom collections import defaultdict"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\"\"\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\n\nassert solution(\"a\") == \"a\"\nassert solution(\"e\") == \"e\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abac') == 'aac'\nassert solution('abc') == 'b'\nassert solution('abba') == 'aba'"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abac') == 'aac'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abac\") == \"aac\"\n\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"aaaabbbbccccddddeeeeffffggg\") == \"aabbccddeeeeffffggg\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\n\n\"\"\"\n\nfrom typing import List, Dict\nfrom collections import Counter\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abc\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'a'\nassert solution('2\\n') == 'b'\nassert solution('3\\n') == 'c'\nassert solution('4\\n') == 'd'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"1000000000000001\") == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"15\") == \"zzz\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nnumber = int(sys.argv[1])\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nnumber_alphabet = \"\"\n\nwhile number > 0:\n    number, digit = divmod(number, 26)\n    number_alphabet += alphabet[digit - 1]\n\nprint(number_alphabet[::-1])\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'b'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'b'\nassert solution('100') == 'a'\nassert solution('543') == 'zzz'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"4\"\n) == \"b\"\nassert solution(\n\"5\"\n) == \"z\"\nassert solution(\n\"1000\"\n) == \"a\"\nassert solution(\n\"18277\"\n) == \"zzz\"\nassert solution(\n\"475253\"\n) == \"aaaaa\"\n\"\"\"\n\n\n\"\"\"\nThe Solution\n\nThe dog names from 1 to 26 are given to a, b,..., z.\nThe dog names from 27 to 701 are given to aa, ab,..., zy.\nThe dog names from 702 to 18277 are given to aaa, aab,..., zzz.\nThe dog names from 18278 to 475253 are given to aaaa, aaab,..., zzzz.\nThe dog names from 475254 to 999999999999999 are given to aaaaa, aaaab,..., zzzzz.\nYou are given the number N. Your task is to find the dog name at that number N.\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'b'"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == 'b'\nassert solution('27\\n28') == 'aa'\nassert solution('703\\n704') == 'aaa'\nassert solution('18279\\n18280') == 'aaaa'\nassert solution('475255\\n475256') == 'aaaaa'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 'b'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2') == 'b'"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"AB aa AB bb\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\nassert solution(\"aa aa aa bb bb bb\") == \"AB aa AB bb\"\nassert solution(\"aa aa aa aa aa\") == \"AB aa AB aa\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\nto be or not to be\n''') == '12'\nassert solution('''\n10\na ab a a b ab a a b c\n''') == '13'\nassert solution('''\n6\naa bb aa aa bb bb\n''') == '11'"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"abb aa ab bb\") == 4\n\n\"\"\"\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nprint(len(INPUT_LINES[0].split()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('ab') == 1\nassert solution('aa') == 2\nassert solution('aab') == 2\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().strip().split()\n\ndp = [0]\nfor word in s:\n    dp.append(dp[-1] + len(word))\n\nres = dp[-1]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if dp[j] - dp[i] == dp[j+1] - dp[j]:\n            res = min(res, dp[j+1] - dp[i])\n\nprint(res)\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nto be or not to be\") == '12'\nassert solution(\"10\\na ab a a b ab a a b c\") == '13'\nassert solution(\"6\\naa bb aa aa bb bb\") == '11'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"bb aa bb\") == 6\n\n\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n\nprint(solution('4 4 2 1'))\nprint(solution('3 3 3 3'))\nprint(solution('5 5 5 5'))\nprint(solution('5 5 5 6'))\nprint(solution('4 1 1 1'))\n\nprint(solution(\"6 3 2 1\")) # 11\nprint(solution(\"6 3 2 2\")) # 12\nprint(solution(\"6 6 6 6\")) # 6\nprint(solution(\"7 3 2 1\")) # 10\nprint(solution(\"7 3 2 2\")) # 11\nprint(solution(\"7 6 6 6\")) # 6\nprint(solution(\"7 7 7 7\")) # 7\nprint(solution(\"8 5 5 5\")) # 9\nprint(solution(\"8 5 5 6\")) # 10\nprint(solution(\"9 5 5 5\")) # 10\nprint(solution(\"9 5 5 6\")) # 11\nprint(solution(\"10 5 5 5\")) # 11\nprint(solution(\"10 5 5 6\")) # 12\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\nassert solution(\"10 2\\n1 100 100 100 100 100 100 100 100 100 100 1\") == \"100\\n10\"\nassert solution(\"5 4\\n1 2 2 3 4\") == \"3\\n1 2 2\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\n\"\"\"\n\na = input()\nk, n = a.split()\na = input()\na = a.split()\nfor i in range(len(a)):\n    a[i] = int(a[i])\na = sorted(a)\nd = []\ns = 0\nfor i in a:\n    s += i\n    d.append(s)\nt = [0] * int(k)\nl = []\nfor i in range(len(a)):\n    l.append(d[i] - a[i])\nm = 0\nfor i in range(k):\n    m = max(l)\n    t[i] = l.index(m)\n    l[l.index(m)] = -1\nfor i in t:\n    print(i + 1, end=' ')\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\nassert solution(\"8 5\\n1 2 3 4 5 6 7 8\\n\") == \"8\"\nassert solution(\"8 1\\n1 2 3 4 5 6 7 8\\n\") == \"7\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\nassert solution('2 2\\n1 2000 2\\n') == '2\\n2 1'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nmax_profit = 0"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -11 -15 10 5 4 -4\") == \"3\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '0'\nassert solution(\"5 -2 3 -9 2\") == '1'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 -2 3 -9 2\") == '0'\nassert solution(\"4\\n1 -5 3 2\") == '1'\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 -5 3 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -1 1 -1 1 1\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1\") == \"3\"\nassert solution(\"8 -1 1 -1 1 -1 1 1\") == \"3\"\nprint(\"Test pass.\")\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 -2 3 -9 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == \"1\"\nassert solution(\"5\\n4 -2 3 -9 2\") == \"0\"\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 -5 3 2\") == '1'\nassert solution(\"5\\n4 -2 3 -9 2\") == '0'\nassert solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8\\n16 -5 -11 -15 10 5 4 -4\") == '3'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\\n2 2\") == \"0\"\nassert solution(\"5 100\\n2 2000000000\") == \"10\"\nassert solution(\"5 1000000000\\n1 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == \"2\", \"Simple\"\nassert solution(\"3 10\") == \"6\", \"Simple #2\"\nassert solution(\"10 10\") == \"0\", \"Simple #3\"\n\nassert solution(\"1 100\") == \"0\", \"Two simple\"\nassert solution(\"2 100\") == \"2\", \"Two simple #2\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7\") == '7'\nassert solution(\"2 5\") == '2'\nassert solution(\"10 10\") == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '2'\nassert solution('5 5') == '10'\nassert solution('2 1000000000') == '2000000000'\nassert solution('1 1000000000') == '1000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"0\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"6 3\") == \"10\"\n\"\"\"\nfrom typing import List, Set\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('1 100') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n10 20 30\") == \"30\\n40\\n50\"\nassert solution(\"1 100\\n2 2\") == \"0\\n2\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"10000000000\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"2000000000\"\n\"\"\"\nimport sys\nfrom typing import List\n\nfrom utils.decorators import timer\n\n\n@timer\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == '9'\nassert solution('4 10') == '8'\nassert solution('3 10') == '3'\nassert solution('2 5') == '1'\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\\n\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 100\\n2 2') == '0'\nassert solution('1 100\\n2 2\\n5 5') == '2'\nassert solution('1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\n\"\"\"\nYou are given an array of integers.\nFor each index i, print an integer denoting the number of integers that are both less than and greater than the current element.\n\nInput Format\nThe first line contains an integer, N.\nThe second line contains N space-separated integers.\n\nOutput Format\nPrint N integers denoting the answer for each index i.\n\nSample Input\n5\n1 2 3 4 5\n\nSample Output\n0 1 2 1 0\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"4\"\n\nassert solution(\"12\") == \"0\"\n\nassert solution(\"100\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '', f'Expected \"\" but received \"{solution('')}\"!'\nassert solution('K') == '', f'Expected \"\" but received \"{solution(\"K\")}\"!'\nassert solution('101') == '4', f'Expected \"4\" but received \"{solution(\"101\")}\"!'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(None) == None\nassert solution('K') == 'K'\nassert solution('7') == 7\nassert solution('77') == 7\nassert solution('777') == 7\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '4'\nassert solution('1010') == '1'\n\"\"\"\n\nK = input()\nn = 0\nfor i in range(2, 10001):\n    if i % int(K) == 0:\n        n = i\n        break\nprint(n)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == 4\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nimport sys\n\nk = int(sys.stdin.readline())\n\nseq = [7, 77, 777]\n\nwhile seq[-1] < 10**6:\n    seq.append(seq[-1]*7)\n\nfor i in range(len(seq)):\n    if seq[i] % k == 0:\n        print(i+1)\n        sys.exit()\n\nprint(-1)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\n\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\n\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == '4'\nassert solution(\"5 5\\n1 2 3 4 5\") == '1'\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == '48'\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 5 3 1\") == \"4\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == '4'\nassert solution(\"5 5\") == '1'\nassert solution(\"15 8\") == '48'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\n\nassert solution('7 10\\n5 5 5 5 5') == '1'\n\nassert solution('5 15\\n5 5 5 5 5') == '-1'\n\nassert solution('5 26\\n5 5 5 5 5') == '2'\n\n\"\"\"\n\nn, m = map(int, input().split())\nstdin = [int(i) for i in input().split()]\n\nd = [0] * n\n\nfor a in stdin:\n    d[a - 1] += 1\n\ndays = 0\n\nfor i in range(n):\n    if d[i]!= 0:\n        if d[i] > 1:\n            days += d[i] - 1\n        days += 1"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\nprint(solution(\"5 8\\n2 3 1 1 2\"))\nprint(solution(\"7 10\\n5 5 5 5 5\"))\nprint(solution(\"5 15\\n5 5 5 5 5\"))\nprint(solution(\"5 26\\n5 5 5 5 5\"))\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == '4'\n\nassert solution('''7 10\n5 5 5 5 5\n''') == '2'\n\nassert solution('''5 15\n5 5 5 5 5\n''') == '1'\n\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\n\nassert solution('''5 26\n5 5 5 5 5\n''') == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nlines = stdin.split('\\n')\nn, m = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\ncups = list(map(int, lines[1].split(' ')))\n\ndp = [[float(\"inf\")] * (n + 1) for _ in range(m + 1)]\ndp[0][0] = 0\nfor i in range(1, n + 1):\n    dp[0][i] = dp[0][i - 1] + cups[i - 1]\n\nfor i in range(1, m + 1):\n    for j in range(n + 1):\n        dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + cups[j - 1]\n\nprint(dp[m][n])\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\") == '1'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n2 3 1 1 2\\n') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2\\n') == '2'\nassert solution('5 15\\n5 5 5 5 5\\n') == '-1'\nassert solution('5 16\\n5 5 5 5 5\\n') == '2'\n\n-----How to run-----\n\nhttps://www.codewars.com/kata/54ca8d7b3216ec63c2000035/train/python\n\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\") == \"1\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('7 15\\n5 5 5 5 5') == '-1'\nassert solution('7 26\\n5 5 5 5 5') == '-1'\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"5 16\") == \"2\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"2 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n24 21 14 10\\n') == 3\nassert solution('2\\n500 500\\n') == 0\nassert solution('3\\n14 5 1\\n') == -1\nassert solution('5\\n1 3 6 9 12\\n') == 1"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"4\\n24 21 14 10\"\n) == \"3\"\n\nassert solution(\n\"2\\n500 500\"\n) == \"0\"\n\nassert solution(\n\"3\\n14 5 1\"\n) == \"-1\"\n\nassert solution(\n\"5\\n1 3 6 9 12\"\n) == \"1\"\n\n\"\"\"\n\nn = int(stdin.readline())\nseq = list(map(int, stdin.readline().split()))\n\ndiff = seq[1] - seq[0]\n\nfor i in range(2, n):\n    if seq[i] - seq[i-1]!= diff:\n        print(-1)\n        exit()\n\nprint(diff)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n24 21 14 10''') == '3'\n\nassert solution('''5\n1 3 6 9 12''') == '1'\n\nassert solution('''2\n500 500''') == '0'\n\nassert solution('''3\n14 5 1''') == '-1'\n\nassert solution('''5\n1 3 6 9 12''') == '1'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"3\\n14 5 1\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\"\n\nprint(\"Hooray!\")\n\n\"\"\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"1 3 6 9 12\") == \"1\"\nassert solution(\"5 1 3 6 9 12\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 24 21 14 10\") == 3\nassert solution(\"2 500 500\") == 0\nassert solution(\"3 14 5 1\") == -1\nassert solution(\"5 1 3 6 9 12\") == 1\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\") == \"-1\"\nassert solution(\"3\\n14 5 1\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 6 9 12\") == '3'\nassert solution(\"1 3 6 9 12\") == '0'\nassert solution(\"1 3 6 9 12\") == '-1'\nassert solution(\"1 3 6 9 12\") == '1'\nassert solution(\"1 3 6 9 12\") == '-1'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\") == \"5\"\nassert solution(\"4 2\\n1 2 3 4\\n5 6 7 8\") == \"6\"\nassert solution(\"3 2\\n1 2 3\\n4 5 6\") == \"5\"\nassert solution(\"5 3\\n1 10 100 1000 1000\\n2 20 200 200 200\\n3 30 300 300 300\\n4 40 400 400 400\\n5 50 500 500 500\") == \"3\"\nassert solution(\"4 4\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\") == \"8\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2 3 4') == '4'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\na, b = map(int, stdin.readline().split())\nassert a == 5\nassert b == 2\n\na, b = map(int, stdin.readline().split())\nassert a == 4\nassert b == 1\n\nstdin.readline()\na = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\\n6 7 8 9 10\") == \"5\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\\n6 7 8 9 10\") == \"6\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\\n6 7 8 9 10\\n1 2 3 4 5\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 2\n1 2 15 15 15\n\"\"\") == 5\n\n\"\"\"\nNaive solution.\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 2 3 4\") == \"2\"\nassert solution(\"2 5\\n1 2 3 4 5\") == \"4\"\nassert solution(\"2 5\\n2 2 5 2\") == \"2\"\nassert solution(\"2 5\\n2 2 5 2\") == \"2\"\nassert solution(\"2 5\\n2 2 5 2\") == \"2\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\nassert solution('6 1\\n36 4 1 25 9 16\\n') == '2'\nassert solution('4 4\\n1 10 100 1000\\n') == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 15 15 15\") == \"5\"\nassert solution(\"1 2 15 15 15\") == \"5\"\nassert solution(\"1 2 15 15 15\") == \"5\"\nassert solution(\"1 2 15 15 15\") == \"5\"\nassert solution(\"1 2 15 15 15\") == \"5\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\\n\") == 4\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\\n\") == \"4\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 10 3 6\\n5 8 7 10 9\\n8 10 3 6') == '8', \"Actual: %s\" % solution('8 10 3 6\\n5 8 7 10 9\\n8 10 3 6')\nprint(\"Tests passed.\")\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10 7\\n8 10 3 6\\n') == '8'\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\nscores = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\nprint(solution(stdin))\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n\nN, K, M = [int(item) for item in stdin.readline().split(' ')]\nscore = [int(item) for item in stdin.readline().split(' ')]"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 10 7\n8 10 3 6''') == '8'\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5 10 7\n8 10 3 6\n\"\"\"\n) == '8'\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '5 10 7\\n8 10 3 6\\n') == '8'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == 8\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nn, k, q = [int(x) for x in stdin.split()]\n\narr = [0] * n\nfor i in range(n):\n    arr[i] = int(stdin.readline())\n\narr.sort()\narr = arr[::-1]\n\nfor i in range(q):\n    score = int(stdin.readline())\n    pos = arr.index(score)\n    if pos + 1 <= n - k:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nN, K, Q = [int(x) for x in stdin.split('\\n')[:3]]\n\npoints = [K] * N\n\nfor i in range(Q):\n    a = int(stdin.split('\\n')[i + 3])\n    points[a - 1] -= 1\n    if points[a - 1] <= 0:\n        for player in range(N):\n            if player + 1!= a:\n                points[player] -= 1\n\nprint(\"Yes\" if 0 in points else \"No\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4\\n3\\n1\\n3\\n2\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\") == \"No\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\nassert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\"\nassert solution(\"6 3 4\\n2\\n1\\n3\") == \"No\\nNo\\nYes\"\nassert solution(\"6 3 4\\n1\\n1\\n1\") == \"No\\nNo\\nNo\"\nassert solution(\"6 3 4\\n1\\n1\\n2\") == \"No\\nNo\\nNo\"\nassert solution(\"6 3 4\\n1\\n2\\n1\") == \"No\\nNo\\nYes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n------Solution------\nstdin = open('test_input.txt')"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 4\\n3\\n1\\n3\\n2') == 'No'\nassert solution('4 7 3\\n4\\n1\\n4\\n2\\n2\\n1') == 'No'\nassert solution('6 7 4\\n6\\n1\\n6\\n2\\n2\\n2\\n1') == 'No'\nassert solution('3 3 4\\n4\\n1\\n4\\n2') == 'No'\nassert solution('4 7 3\\n4\\n1\\n4\\n2') == 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo\\n'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\\n0\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n010'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\\n0\"\n\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"YES\\n010\\n0000\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input)) == str(output)"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == \"NO\\n010\\n010\"\n\n\n\"\"\"\nimport numpy as np\n\nclass Solution:\n    def isSorted(self, A):\n        for i in range(A.shape[0]):\n            for j in range(i + 1, A.shape[0]):\n                if A[i] > A[j]:\n                    return False\n        return True\n\n    def sortMatrix(self, A):\n        S = []\n        for i in range(A.shape[0]):\n            for j in range(A.shape[1]):\n                if A[i, j] == 1:\n                    S.append([i, j])\n        S = np.array(S)\n        if self.isSorted(S):\n            return \"YES\\n\" + \"0\" * S.shape[0]\n        else:\n            return \"NO\\n\" + \"0\" * S.shape[0]\n\ns = Solution()\n\nassert s.sortMatrix(\"2 3\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert s.sortMatrix(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str([[0, 0], [0, 1], [1, 0]])) == \"YES\"\nassert solution(str([[0, 0], [0, 1], [0, 0]])) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('\\n\\n\\n') == '\\n'\nassert solution('a\\na') == 'a\\na'\nassert solution('a\\na\\n') == '\\na\\n'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"233\") == \"Yes\"\nassert solution(\"372\") == \"Yes\"\nassert solution(\"457\") == \"Yes\"\nassert solution(\"497\") == \"Yes\"\nassert solution(\"637\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"73624\") == \"Yes\"\nassert solution(\"5237\") == \"No\"\nassert solution(\"1234\") == \"Yes\"\nassert solution(\"2135\") == \"No\"\nassert solution(\"7862\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\nimport math\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123') == 'Yes'\nassert solution('213') == 'Yes'\nassert solution('231') == 'Yes'\nassert solution('323') == 'Yes'\nassert solution('433') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Yes'\nassert solution('121') == 'No'\nassert solution('373') == 'Yes'\nassert solution('436') == 'Yes'\nassert solution('12') == 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\nassert solution('1111') == 'No'\nassert solution('333') == 'No'\n\"\"\"\n\nfrom typing import Dict, List, Set\n\nclass Bag:\n    def __init__(self, count: int, colour: str):\n        self.count = count\n        self.colour = colour\n\n    def __repr__(self):\n        return f\"{self.count} {self.colour}\"\n\n    def __hash__(self):\n        return hash(self.colour)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n\nimport sys\n\nn, b, a = [int(x) for x in input().split()]\ns = [int(x) for x in input().split()]\n\nc = 0\nbattery = b\naccumulator = a\n\nfor i in range(n):\n    if s[i] == 1:\n        accumulator -= 1\n        battery += 1\n    \n    if accumulator < 0 or battery < 0:\n        print(c)\n        sys.exit()\n    \n    battery -= 1\n    accumulator += 1\n    \n    if battery == 0 and s[i] == 1:\n        accumulator -= 1\n    \n    c += 1\n\nprint(c)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nn, b, a = map(int, input().split())\nl = list(map(int, input().split()))\n\nprint(n - len(set(l)))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nn, b, a = (int(i) for i in input().split())\ns = [int(i) for i in input().split()]\n\ndistance = 0\nc_b = b\nc_a = a\n\nfor i in range(n):\n    distance += s[i]\n    if s[i] == 1:\n        c_b -= 1\n    if c_a > 0:\n        c_a -= 1\n    if c_b < 0:\n        c_b = 0\n    if c_a == 0 and c_b > 0:\n        c_a += 1\n\nprint(distance)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n\na b b b b\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a a a a\n\na a"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0''') == \"5\"\nassert solution('''6 2 1\n1 0 0 1 0 1''') == \"3\"\nassert solution('''3 1 1\n0 0 1''') == \"1\"\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == \"3\"\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\nassert solution('5 1 1\\n1 0 1 1 1') == '0'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2+2\") == \"0\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\n\"\"\"\n\nimport math\n\nstdin = input()\n\nprint(sum([int(n) for n in stdin.split(\"-\")]))\n\nprint(-sum([int(n) for n in stdin.split(\"+\")]))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"-23+5-6+4-8+9-11+7\") == \"0\"\nassert solution(\"-30-40-50-60\") == \"-180\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nprint(solution(\"8-7+6-5+4-3+2-1-0\"))"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(8-7+6-5+4-3+2-1-0) == 4\nassert solution(2+2) == -46\nassert solution(112-37) == 375\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\"\n\nn, k = [int(c) for c in input().split()]\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES'\nassert solution('13 4\\n') == 'NO'\nassert solution('1 1\\n') == 'YES'\nassert solution('2 3\\n') == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n4 3\n'''\n) == 'YES'\nassert solution(\n'''\n4 4\n'''\n) == 'NO'\nassert solution(\n'''\n10 4\n'''\n) == 'YES'\nassert solution(\n'''\n13 4\n'''\n) == 'NO'\nassert solution(\n'''\n4 3\n3 2\n2 3\n4 1\n1 3\n'''\n) == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1')\nassert solution('13 4\\n') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\\n\"\nassert solution(\"10 4\\n\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"\nassert solution(\"13 4\\n\") == \"NO\\n\"\n\nprint(solution(\"4 3\\n\"), \"YES\\n3 1\\n1 3\\n3 2\\n2 3\\n\")\nprint(solution(\"10 4\\n\"), \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\")\nprint(solution(\"13 4\\n\"), \"NO\\n\")\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\"\nassert solution(\"10 4\\n1 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\") == \"YES\\n2 1\\n1 3\"\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n') == 'YES\\n3 1\\n1 3'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3'\nassert solution('13 4\\n') == 'NO'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\nassert solution('13 4\\n') == 'NO\\n'\n\nassert solution('4 3\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 3\n''') == 'YES'\nassert solution('''10 4\n''') == 'YES'\nassert solution('''13 4\n''') == 'NO'\nassert solution('''1 1\n''') == 'NO'\nassert solution('''2 3\n''') == 'NO'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\n\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\n\nassert solution('4 1 5\\n10 30 10 1') == '100'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 5\") == \"8\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nassert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''7 1 2\n1 1 1 2 1''') == '0'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n6 1 5\n10 30 30 70 10 10\n\"\"\"\n) == \"18\"\n\nassert solution(\n\"\"\"\n6 1 5\n10 30 30 70 10 10\n\"\"\"\n) == \"-1\"\n\nassert solution(\n\"\"\"\n3 1 4\n2 10 5 7\n\"\"\"\n) == \"10\"\n\nassert solution(\n\"\"\"\n6 1 5\n10 30 30 70 10 10\n\"\"\"\n) == \"-1\"\n\nassert solution(\n\"\"\"\n5 1 2\n10 100 10 10 10\n\"\"\"\n) == \"20\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5\", \"10 30 30 10\") == \"18\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\n\"\"\"\n\nimport math\nimport sys\nimport re\nimport collections\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 5\\n1 100 1 1') == '100'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 1 4\\n1 100 1 1') == '100'\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\nassert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"0\"\nassert solution(\"10 2\") == \"2\"\nassert solution(\"10 5\") == \"2\"\nassert solution(\"10 5 2\") == \"4\"\nassert solution(\"10 5 2 2\") == \"3\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"10000\") == 10\nassert solution(\"10001\") == 13\nassert solution(\"10010\") == 18\nassert solution(\"10011\") == 19\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100101') == '110'\nassert solution('10111') == '11'\nassert solution('1010') == '10'\nassert solution('10011') == '101'\nassert solution('10001') == '100'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01110\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"01111110\") == \"10\"\nassert solution(\"1011101\") == \"8\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00100') == 3\nassert solution('10000') == 3\nassert solution('111111') == 21\nassert solution('10011') == 4\nassert solution('1111111111') == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1011100\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1110110110') == '25'\nassert solution('0111101110') == '17'\nassert solution('11111110111') == '29'\nassert solution('11111110110') == '27'\nassert solution('1110110110') == '25'\n\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00100') == 3\nassert solution('0011') == 4\nassert solution('0110') == 3\nassert solution('0111') == 4\nassert solution('1100') == 5\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11100') == 5\nassert solution('11101') == 5\nassert solution('11110') == 5\n\nassert solution('111101') == 4\nassert solution('1111110') == 4\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00100') == '3'\nassert solution('10011') == '21'\nassert solution('11111') == '9'\nassert solution('10011') == '21'\n\n\"\"\"\n\nimport sys\nimport math\nimport logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    filename='log.txt',\n    filemode='w',\n    format='%(filename)10s:%(lineno)4d - %(funcName)20s%(msg)s'\n)\nlogger = logging.getLogger('main')"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('mum') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\n\nprint(solution(input()))\n\"\"\"\n\nimport sys\n\n\"\"\"\nAs given string can only contain alphabets, so we can use ASCII characters.\n\nFor each character in S, we replace it with a character which is a distance k from it.\n\nFor example, in a string \"a\", we replace it with \"b\", so that \"b\" is a distance 1 from \"a\".\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('zbazar') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"babeldrinker\") == \"No\"\nassert solution(\"voorraadmuziek\") == \"No\"\nassert solution(\"zomer\") == \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('cat') == 'No'\nassert solution('dog') == 'No'\nassert solution('fish') == 'No'\n\"\"\"\n\ns, t = input(), input()\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 6\") == \"11\"\nassert solution(\"10 5 6\") == \"8\"\nassert solution(\"10 10 10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 10 1\") == \"8\"\nassert solution(\"3 5 6 7 9\") == \"9\"\nassert solution(\"3 5 6 7 10\") == \"8\"\nassert solution(\"3 5 6 7 9 1\") == \"10\"\nassert solution(\"1 3 5 6 7 9\") == \"0\"\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\") == \"45\"\nassert solution(\"100 99\") == \"100\"\nassert solution(\"100 99 99\") == \"300\"\nassert solution(\"100 50 30 10 20 50\") == \"240\"\nassert solution(\"100 50 30 10 20 50 10\") == \"240\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 10 5 1\") == \"20\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 3 2 1\") == \"7\"\nassert solution(\"8 7 6 5 4\") == \"8\"\nassert solution(\"4 4 4 4\") == \"3\"\nassert solution(\"7 7 7 7\") == \"0\"\nassert solution(\"3 3 3 3\") == \"0\"\n\n\"\"\"\n\nimport sys\n\nN, M, *xs = map(int, sys.stdin.readlines())\npurchases = list(map(int, sys.stdin.readlines()))\n\nans = 0\n\nfor i in range(M):\n    purchases = [purchases[j] + xs[j] * i for j in range(N)]\n    ans = min(sum(purchases), ans)\n\nprint(ans)"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"Impossible\"\nassert solution('5\\n1 2 3 4 5') == \"1\"\nassert solution('4\\n1 2 5 6') == \"3\"\nassert solution('1\\n1') == \"1\"\nassert solution('4\\n1 2 5 6') == \"1\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n2 1\n5 4\n3 2\n''') == '5 6'\n\nassert solution('''4\n4 1\n2 2 1 1\n3 2 2 1 1\n3 3 2 1 1\n2 2 1 1 1\n''') == '0 2'\n\nassert solution('''2\n2 1\n4 4\n1 1 1 1\n''') == '0 4'\n\nassert solution('''2\n3 1\n2 3 1\n3 3 1\n''') == '2 6'\n\nassert solution('''4\n3 2\n2 3 1\n3 3 1\n2 2 1 1\n''') == '0 6'"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"500 3 2\") == \"2\"\nassert solution(\"1000 2 3\") == \"200\"\nassert solution(\"10000 1 2\") == \"0\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\n1000 1\n1\n1000 2\n''') == '10500'\nassert solution('''3\n1100 2\n1200 1\n1000 3\n''') == '3200'\nassert solution('''4\n1500 1\n1000 2\n1500 3\n1500 4\n''') == '18000'\nassert solution('''10\n2000 1\n2000 2\n2000 3\n2000 4\n2000 5\n2000 6\n2000 7\n2000 8\n2000 9\n2000 10\n''') == '50000'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 2 6\") == \"10\"\nassert solution(\"4 10 3 6\") == \"10\"\nassert solution(\"4 10 4 6\") == \"14\"\nassert solution(\"4 10 5 6\") == \"13\"\nassert solution(\"4 10 6 6\") == \"18\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 500\\n5 800\") == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 700\n3 500\n5 800''') == '3'\nassert solution('''2 700\n3 500\n5 800\n2 700\n4 800\n1 300\n1 500\n3 800\n6 1000\n3 700\n6 1200\n3 800\n5 1200\n2 1200\n5 1400\n1 1200\n4 1400\n3 1400\n4 1600\n5 2000\n5 2400\n3 1600\n3 2000\n5 2600\n2 2600\n6 3500\n3 1700\n6 3900\n2 2100\n6 3300\n2 1700\n6 4100\n2 1000\n3 1800\n1 1000\n2 1100\n6 6300\n3 1200\n5 6200\n4 1800\n5 6400\n4 1200\n5 6400\n4 2000\n5 6800\n3 2500\n6 6500\n5 5000\n3 3500\n6 6300\n5 6200\n4 3500\n6 6400\n4 4000\n2 3200\n4 4500\n5 3200\n4 4500\n4 5500\n5 4500\n6 5500\n3 3200\n4 5000\n3 3700\n5 5000\n5 6500\n5 6700\n5 6500\n6 6500\n6 7500\n5 7500\n6 7500\n6 8500\n7 7500\n6 9000\n3 7500\n4 7500\n4 8500\n5 7500\n6 8000\n5 8500\n6 8500\n6 9500\n5 9500\n4 9000\n3 9500\n6 10000\n5 10000\n5 11000\n3 9500\n4 9500\n3 11000\n5 11000\n4 10000\n5 10000\n6 11000\n5 11000\n3 10000\n5 11000\n4 10000\n5 10000\n5 11000\n3 11000\n4 10000\n5 11000\n5 11000\n3 11000\n4 10000\n5 11000\n6 12500\n6 13500\n5 12500\n5 13500\n4 13500\n6 14500\n6 15500\n5 15500\n5 16500\n6 17500\n6 18500\n5 17500\n6 18500\n5 18500\n5 19500\n6 18500\n4 19500\n6 19500\n5 19500\n5 19500\n4 19500\n6 19500\n5 19500\n5 19500\n6 19500\n6 19500\n5 19500\n4 19500\n6 19500\n5 19500\n5 19500\n4 19500\n6 19500\n5 19500\n5 19500\n5 19500\n6 19500\n6 19500\n5 19500\n5 19500\n4 19500\n6 19500\n5 19500\n5 19500\n4 19500\n6 19500\n5 19500\n5 19500\n4 19500\n5 19500\n6 19500\n6 19500\n5 19500\n5 19500\n5 19500\n6 19500\n6 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n5 19500\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\nassert solution(\"2 1100\\n3 700\\n5 800\") == \"3\"\n\nassert solution(\"2 1100\\n3 1000\\n5 800\") == \"2\"\n\nassert solution(\"2 1100\\n3 1100\\n5 800\") == \"2\"\n\nassert solution(\"2 1100\\n3 1200\\n5 800\") == \"1\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == 3\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 300\\n\"\n               \"3 100\\n\"\n               \"5 200\\n\"\n               \"1 10\\n\"\n               \"3 300\\n\"\n               \"1 10\\n\"\n               \"3 100\\n\"\n               \"1 10\") == \"3\"\nassert solution(\"4 700\\n\"\n                \"3 500\\n\"\n                \"5 800\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nprint(solution(\"2 700\\n3 500\\n5 800\"))\nassert solution(\"2 700\\n3 500\\n5 800\\n2 200\") == \"3\"\nprint(solution(\"2 700\\n3 500\\n5 800\\n2 200\"))\nassert solution(\"2 700\\n3 500\\n5 800\\n2 200\\n6 2000\") == \"5\"\nprint(solution(\"2 700\\n3 500\\n5 800\\n2 200\\n6 2000\"))\nassert solution(\"2 700\\n3 500\\n5 800\\n2 200\\n6 2000\\n1 300\") == \"5\"\nprint(solution(\"2 700\\n3 500\\n5 800\\n2 200\\n6 2000\\n1 300\"))\nassert solution(\"2 700\\n3 500\\n5 800\\n2 200\\n6 2000\\n1 300\\n4 400\") == \"6\"\nprint(solution(\"2 700\\n3 500\\n5 800\\n2 200\\n6 2000\\n1 300\\n4 400\"))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 4 5 5 6\") == \"2\"\nassert solution(\"8 4 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9 2 3 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = [int(i) for i in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6\\n') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5\\n') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4\\n') == '3'\n\n---"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == '2'\nassert solution(\"8\\n4 8 8 7 8 4 4 5\\n\") == '2'\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\\n\") == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == 2\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == 2\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == 3\n\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1 2\") == \"0\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('5 2 3') == '18'\nassert solution('5 1 3') == '-1'\nassert solution('6 1 5') == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\n\n\"\"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2\\n1 100 1 1\\n\") == 100\nassert solution(\"5 2 3\\n5 1 3 10 1\\n\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == -1\n\"\"\"\n\nn, k, x = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nres = 0\ncur = 0\nfor i in range(n):\n    cur += a[i]\n    if i + k - 1 >= n or cur < x:\n        res = max(res, cur)\n        cur = 0\nprint(res)"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 1, 3) == '18'\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == 18\nassert solution('''6 1 5\n10 30 30 70 10 10''') == -1\n\nprint(solution(input()))"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\nassert solution('1 2 3 4 5') == '15'\nassert solution('1 1 1 1') == '-1'\nassert solution('1 1 1 2') == '-1'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"1\") == \"No\"\nassert solution(\"9\") == \"No\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == 'Yes'\nassert solution(\"4\") == 'No'\nassert solution(\"9\") == 'Yes'\nassert solution(\"21\") == 'No'\nassert solution(\"30\") == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"Yes\"\n\nassert solution(\"10\") == \"No\"\n\nassert solution(\"9\") == \"No\"\n\nassert solution(\"8\") == \"No\"\n\nassert solution(\"7\") == \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == 'Yes'\nassert solution('8') == 'Yes'\nassert solution('11') == 'No'\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().rstrip())\n\nnumerator = n - 4 * 4 - 7 * 7"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'No'\nassert solution('4') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('12') == 'Yes'\nassert solution('11') == 'Yes'\n'''\n\nimport sys"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(7) == \"Yes\"\nassert solution(8) == \"No\"\nassert solution(9) == \"Yes\"\nassert solution(10) == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == 'Yes'\nassert solution('2\\n') == 'Yes'\nassert solution('4\\n') == 'Yes'\nassert solution('2\\n') == 'Yes'\nassert solution('9\\n') == 'No'\n\n'''\n'''\nTime: O(n)\nSpace: O(1)\n'''\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n\"\"\"\n\nfrom tools import timing"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n2 1 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n2 2 2\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 2\"\nassert solution(\"4\\n2 2 3\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 3\"\n\n------Note-----\n- https://atcoder.jp/contests/abc143/tasks/abc143_c\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 1 5\\n2 3 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nfrom typing import List\nfrom decimal import Decimal\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        points, point_coordinates = self.get_input_from_stdin(stdin)\n        \n        x_coordinates = [point_coordinates[0] for point in points]\n        y_coordinates = [point_coordinates[1] for point in points]\n        \n        x_coordinates.sort()\n        y_coordinates.sort()\n        \n        center_x, center_y = (x_coordinates[-1] + x_coordinates[0]) / 2, (y_coordinates[-1] + y_coordinates[0]) / 2\n        \n        max_x_y = max(max(abs(x - center_x), abs(y - center_y)) for x, y in points)\n        \n        return str(int(center_x)) + \" \" + str(int(center_y)) + \" \" + str(int(max_x_y))\n    \n    def get_input_from_stdin(self, stdin: str) -> (List[tuple], List[int]):\n        raw_points = stdin.split(\"\\n\")\n        \n        points = []\n        point_coordinates = []\n        \n        for point in raw_points[1:]:\n            x, y, h = point.split(\" \")\n            x, y, h = int(x), int(y), int(h)\n            points.append((x, y))\n            point_coordinates.append(h)\n        \n        return points, point_coordinates\n\nassert Solution().solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert Solution().solution(\"2 3 5\\n3 2 5\\n2 1 5\\n1 2 5\") == \"2 2 6\"\nassert Solution().solution(\"2 3 5\\n3 2 5\\n3 2 5\") == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(':') == ''\nassert solution('2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n') == '2 2 6'\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys\n\nimport numpy as np\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaa') == 4\nassert solution('bab') == 3\n\nassert solution('aaaa') == 4\nassert solution('bab') == 3\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abba') == 1\nassert solution('abc') == 0\nassert solution('aaa') == 0\n\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('redcoder') == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('redcoder') == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abc\") == 0\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"redcoder\") == 1\nprint(solution(\"redcoder\"))\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcde') == 0\nassert solution('aaa') == 0\nassert solution('redcoder') == 1\n\"\"\"\n\nfrom collections import deque\nimport sys\n\nS = sys.stdin.readline()\n\nresult = deque()\nfor c in S:\n    if c == c[::-1]:\n        result.appendleft(0)\n    else:\n        result.appendleft(1)\n\nans = 0\nwhile result:\n    ans += result.popleft()\nprint(ans)\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(int(input().strip()))) == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 'Yes'\nassert solution('10') == 'Yes'\nassert solution('19') == 'Yes'\nassert solution('40') == 'No'\nassert solution('23') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"8\") == \"Yes\"\nassert solution(\"2\") == \"No\"\n\n-------------\n|  5  |  4  |  3  |  2  |  1  |\n| 10  |  9  |  8  |  7  |  6  |\n| 15  | 14  | 13  | 12  | 11  |\n| 20  | 19  | 18  | 17  | 16  |\n| 25  | 24  | 23  | 22  | 21  |\n-------------\n\n------\nk: number to be checked\na: start of range\nb: end of range\ni: current result\n\nwhile i < k:\n    if k % i == 0:\n        a = i\n    i += 1\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == 'Yes'\nassert solution('100') == 'No'\nassert solution('101') == 'No'\nassert solution('110') == 'No'\nassert solution('111') == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"14\") == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"10\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('15') == 'Yes'\nassert solution('16') == 'No'\nassert solution('39') == 'Yes'\nassert solution('4') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n-----\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 9 7 5\") == 5\n\"\"\"\n\nN = int(input())\nl = [int(i) for i in input().split()]\nc = 0\nfor i in range(N - 2):\n    for j in range(i + 1, N - 1):\n        for k in range(j + 1, N):\n            if l[i] + l[j] > l[k] and l[j] + l[k] > l[i] and l[k] + l[i] > l[j]:\n                c += 1\nprint(c)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4 9 7 5') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\n------\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 9 7 5') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 9 7 5\\n') == '5'\nprint(solution(input()))\n\n------\n\n\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 7 5') == '5'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 9 7 5') == 5\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n\na, b = input().split()\nprint(-1 if int(a) > 9 or int(b) > 9 or int(a) * int(b) > 9 else int(a) * int(b))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5') == '10', '2 \\times 5 = 10.'\nassert solution('2 3') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2 5''') == '10'\nassert solution('''2 5''') == '10'\nassert solution('''3 9''') == '-1'\nassert solution('''3 9''') == '-1'\nassert solution('''3 3''') == '6'\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\n\n\"\"\"\nimport os\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2,5) == 10\nassert solution(1,9) == -1\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n') == '-1'\nassert solution('1 3\\n') == '6'\nassert solution('1 3\\n2 5\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"2 9\") == \"-1\"\nassert solution(\"0 2\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"4 0\") == \"0\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n2 4\\n9 5\") == \"1\"\n\"\"\"\n\nimport collections\n\nN, M = map(int, stdin.readline().split())\ncoordinate = list(map(int, stdin.readline().split()))\ncounter = collections.Counter(coordinate)"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nx = map(int, sys.stdin.readline().split())\n\nn += 1\nd = dict()\n\nfor k in x:\n    if k not in d:\n        d[k] = 1\n    else:\n        d[k] += 1\n\nl = list()\n\nfor k, v in d.items():\n    l.append((k, v))\n\nl.sort(key=lambda tup: tup[1])\n\nans = 0\n\nfor tup in l:\n    ans += abs(tup[0] - tup[1])\n    m -= 1\n    if m == 0:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n10 1 2 3\\n\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 2 1 3 2\\n') == '3'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '2\\n1110\\n1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n101001\\n111010'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '2\\n111100\\n110110'\n\n\"\"\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n110110\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin) == test_solution\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2\\n1 2\\n2 3\\n1 4\\n4 3') == '1011'\nassert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '101001'"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n') == '2\\n1110\\n1011\\n'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '1\\n101001\\n110110\\n'"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n\") == \"2\\n1110\\n1011\\n\"\n\nimport os, sys\nfrom typing import List, Optional\nfrom collections import defaultdict\nimport numpy as np\nimport re\nimport random"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 6 3\n1 2\n2 3\n1 4\n4 3''') == '1010'\n\nassert solution('''4 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '10101'\n\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5''') == '101101'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '111100'\nassert solution(\"5 2 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '101001'\nassert solution(\"1 2\\n2 3\\n1 4\\n4 3\") == '111010'\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '111110'\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3'\n) == '1\\n1011\\n2\\n111100\\n'\n\nassert solution(\n    '5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n'\n) == '1\\n101001\\n2\\n111010\\n'\n\nassert solution(\n    '4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n2 5\\n3 5'\n) == '2\\n111100\\n2\\n111010\\n'\n\nassert solution(\n    '5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n'\n) == '1\\n101001\\n2\\n111010\\n'\n\nassert solution(\n    '6 7 1\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n4 5\\n4 6\\n5 6'\n) == '1\\n10101010\\n2\\n11101010\\n'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == expected\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 1 2 5') == 'YES'\nassert solution('3 2 2') == 'YES'\nassert solution('2 5 5') == 'YES'\nassert solution('10 10') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\nassert solution('4\\n1 2 3') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 1 2 5') == 'YES'\nassert solution('4 1 2 5') == 'NO'\nassert solution('4 3 2 5') == 'NO'\nassert solution('5 1 2 3 4 5') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3 1 2 3\\n\") == \"YES\"\nassert solution(\"3 2 4 5\\n\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"YES\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n\") == \"NO\"\n\n\n\n-----\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 1 2 5\\n\") == \"YES\"\nassert solution(\"3 4 5\\n\") == \"YES\"\nassert solution(\"2 10 5\\n\") == \"YES\"\nassert solution(\"3 5 7\\n\") == \"NO\"\nassert solution(\"2 2\\n\") == \"YES\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\nfrom collections import deque\n\nH, N = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nd = deque([0])\nfor a in A:\n    if a > 0:\n        d.append(a)\n    elif a < 0:\n        d.append(-a)\n\ni = 1\nwhile d[0] > 0:\n    d.appendleft(d.popleft() + d.pop())\n    i += 1\n    if i == N:\n        break\n\nprint(-i if i < N else -1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == 9\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\"\n\nfrom utils import *\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4\\n-3 -6 5 4\") == \"4999999999996\"\nassert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000 0\\n-1 0 0 0 0\") == \"1\"\n\nprint(solution(\"1000 6\\n-100 -200 -300 125 77 -4\"))\nprint(solution(\"1000000000000 5\\n-1 0 0 0 0\"))\nprint(solution(\"1000000000000 0\\n-1 0 0 0 0\"))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\"\n\nH, n = map(int, stdin.readline().split())\nd = list(map(int, stdin.readline().split()))\n\nhp = H\nlast = 0\nwhile True:\n    # \ud55c\ubc88\ub3c4 \uc9c4\ud589\ud558\uc9c0 \uc54a\uc558\uace0 \ubaa9\uc228\uc774 0\uc774\uba74\n    if hp == 0 and last == 0:\n        print(-1)\n        break\n    # \uc9c4\ud589\ud55c \ud69f\uc218\uac00 \ucd5c\ub300 \ubaa9\uc228\uc774\uac00 \ub418\uba74 \uc885\ub8cc\n    if hp == 0:\n        print(last + 1)\n        break\n    last += 1\n    hp += d[hp % n]\n    hp = min(hp, H)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('10 4\\n-3 -6 5 4') == '-1'\n\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\"\"\"\nfrom typing import Dict, List\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BA\") == \"BA\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\nassert solution(\"ZZZAB\") == \"ZZ\"\nassert solution(\"ABABAB\") == \"AB\"\nassert solution(\"CABBA\") == \"CAB\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"AAA\") == \"AA\"\nassert solution(\"AAAAAA\") == \"AA\"\nassert solution(\"ABC\") == \"AB\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABACABA\") == \"AB\"\nassert solution(\"QWERTY\") == \"QW\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"ABACBBAA\") == \"AB\"\nassert solution(\"ABACCCBBAA\") == \"AB\"\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\n\"\"\"\n\nimport sys\nimport collections\n\nassert len(sys.argv) == 2\nassert sys.argv[1].isalpha()\n\nn = int(sys.argv[1])\nstring = sys.stdin.read()\n\nassert 2 <= n <= 100\nassert all(sys.argv[1].isupper() for sys.argv[1] in string)\n\nd = collections.defaultdict(int)\nfor i in range(len(string) - n):\n    d[string[i : i + n]] += 1\n\nprint(max(d.keys(), key=d.get))"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"AZ\") == \"AA\"\nassert solution(\"ZZ\") == \"ZZ\"\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AAAAAA') == 'AAAAAAAA'\nassert solution('ABABA') == 'AB'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('test') == 'est'\nassert solution('codeforces') == 'codeforces'\nassert solution('yes') == 'es'\n\"\"\"\n\nimport sys\nimport re\n\nregex = r'\\s'"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'b'\nassert solution('ab') == 1\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\nassert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"test\") == \"tet\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"codeforces\") == \"es\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\nassert solution(\"ab\") == \"1\"\nassert solution(\"where\") == \"here\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') == 9\nassert solution('yes') == 1\nassert solution('test') == 2\nassert solution('b') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"codeforces\"\nassert solution(\"yes\") == \"yes\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_result\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n------Problem 3------\nGiven: A positive integer n\u2264100.\n\nWrite a program that finds the last digit of the n-th Fibonacci number Fn.\n\nFor example, on input:\n3\nthe output should be:\n3\n\nThe Fibonacci sequence is defined as follows:\n - the sequence Fn of the first n numbers is {0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026}\n - Fn = Fn\u22121 + Fn\u22122, where F1 = 0 and F2 = 1.\n\n-----Constraints-----\n - 0 \\leq n \\leq 10^4\n - the sum of the first n numbers does not exceed 10^9.\n\n-----Input-----\nThe first line of input contains an integer n (1 \\leq n \\leq 100) \u2014 the number of elements of the Fibonacci sequence.\n\n-----Output-----\nPrint the last digit of the n-th Fibonacci number.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n5\n\n-----Problem 4------\nWrite a program that finds the minimal possible length of a non-negative integer n that is a multiple of a given prime p.\n\n-----Constraints-----\n - p < 2\\cdot 10^6\n\n-----Input-----\nThe only line of input contains an integer p (1 \\leq p \\leq 2\\cdot 10^6).\n\n-----Output-----\nPrint the minimal possible length of n that is a multiple of p.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n6\n\n-----Problem 5------\nWrite a program that computes the n-th Fibonacci number Fn.\n\n-----Constraints-----\n - 0 \\leq n \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer n (0 \\leq n \\leq 10^6).\n\n-----Output-----\nPrint the n-th Fibonacci number Fn.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n3\n\n-----Problem 6------\nA number is called a circular prime number if its all rotations are prime numbers.\nFor example, 197, 379 and 793 are all circular prime numbers.\n\nWrite a program that computes the number of circular prime numbers less than N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer N (1 \\leq N \\leq 10^6).\n\n-----Output-----\nPrint the number of circular prime numbers less than N.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n5\n\n-----Problem 7------\nWrite a program that computes the sum of all numbers that are both circular and prime.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer N (1 \\leq N \\leq 10^6).\n\n-----Output-----\nPrint the sum of all numbers that are both circular and prime.\n\n-----Sample Input-----\n17\n\n-----Sample Output-----\n34\n\n-----Problem 8------\nWrite a program that computes the minimal length of a non-negative integer n that is a multiple of a given prime p.\n\n-----Constraints-----\n - p < 2\\cdot 10^6\n\n-----Input-----\nThe only line of input contains an integer p (1 \\leq p \\leq 2\\cdot 10^6).\n\n-----Output-----\nPrint the minimal length of n that is a multiple of p.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n6\n\n-----Problem 9------\nA number is called a square-free number if it is not divisible by the square of a prime.\nFor example, 10, 14 and 19 are all square-free numbers.\nWrite a program that computes the maximal length of a square-free number less than N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer N (1 \\leq N \\leq 10^6).\n\n-----Output-----\nPrint the maximal length of a square-free number less than N.\n\n-----Sample Input-----\n8\n\n-----Sample Output-----\n2\n\n-----Problem 10------\nWrite a program that computes the minimal length of a non-negative integer n that is a multiple of a given power p of a prime number.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n - p < 2\\cdot 10^6\n\n-----Input-----\nThe only line of input contains two integers N and p (1 \\leq p \\leq 10^6).\n\n-----Output-----\nPrint the minimal length of n that is a multiple of p.\n\n-----Sample Input-----\n22 17\n\n-----Sample Output-----\n4\n\n-----Problem 11------\nWrite a program that computes the maximal length of a non-negative integer n that is a multiple of a given power p of a prime number.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n - p < 2\\cdot 10^6\n\n-----Input-----\nThe only line of input contains two integers N and p (1 \\leq p \\leq 10^6).\n\n-----Output-----\nPrint the maximal length of n that is a multiple of p.\n\n-----Sample Input-----\n22 17\n\n-----Sample Output-----\n4\n\n-----Problem 12------\nWrite a program that computes the number of circular prime numbers less than N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer N (1 \\leq N \\leq 10^6).\n\n-----Output-----\nPrint the number of circular prime numbers less than N.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n5\n\n-----Problem 13------\nWrite a program that computes the number of circular prime numbers less than N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer N (1 \\leq N \\leq 10^6).\n\n-----Output-----\nPrint the number of circular prime numbers less than N.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n5\n\n-----Problem 14------\nWrite a program that computes the sum of the first n circular primes.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer n (1 \\leq n \\leq 10^6).\n\n-----Output-----\nPrint the sum of the first n circular primes.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n12\n\n-----Problem 15------\nWrite a program that computes the sum of the first n circular primes.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^6\n\n-----Input-----\nThe only line of input contains an integer n (1 \\le"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\nimport sys\n\n\"\"\"\ni/p\n3 3\n1 7 11\n\no/p\n2\n\ntime limit exceed\n\n1.1\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == 2\n\"\"\"\n\nclass City:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __repr__(self):\n        return f\"{self.x}, {self.y}\"\n\nclass CityList:\n    def __init__(self, input: str):\n        self.cities = []\n        self.city_list = input.split()\n        for i, city in enumerate(self.city_list):\n            self.cities.append(City(int(city), i))\n\n    def __repr__(self):\n        return str(self.cities)\n\nclass MinimumTravelCost:\n    def __init__(self, input: str):\n        self.total_distance = 0\n        self.city_list = input.split()\n        for i, city in enumerate(self.city_list):\n            self.total_distance += int(city)\n        self.min_distance = None\n        self.min_distance_cost = self.total_distance\n\n    def solution(self):\n        self.min_distance = self.total_distance\n        for i, city in enumerate(self.city_list):\n            if i == 0:\n                continue\n            else:\n                for d in range(1, int(city)):\n                    self.total_distance += d\n                    if self.min_distance_cost < self.min_distance:\n                        self.min_distance = self.total_distance\n                        self.min_distance_cost = self.total_distance\n                    self.total_distance -= d\n\n    def result(self):\n        return self.min_distance_cost"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('1 1') == '0'\nassert solution('3 3\\n1 7 11') == '2'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'Yes'\nassert solution('abb') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('abca') == 'Yes'\nassert solution('abcb') == 'No'\n\nprint('Success')\n\n'''\nWrite a program that takes a number, n, from the user and generates a list with n random numbers, each taken from a normal distribution with a mean of zero and a standard deviation of 1.\n\nThe program should create a new list of numbers, random_list, and use the random library of Python to generate the random numbers.\n\nThen, the program should compute the average of the numbers in the list random_list and print it to the screen.\n\nFinally, the program should compute the median of the numbers in the list random_list and print it to the screen.\n\nUse the built-in Python functions sum, len, and sorted to create the sum and length of the list, as well as the sorted list.\n\nHint: When a mean is a float, it does not round to the nearest int.\n\nHint: Use the keyword argument \"dtype=float\" to force the mean to be a float.\n\nHint: Use the keyword argument \"axis=0\" to create a list of column means.\n\nHint: Use the keyword argument \"key=lambda x: x\" to create a key function that sorts by the last element of each tuple.\n\nHint: Use the keyword argument \"reverse=True\" to sort in reverse order.\n\n'''"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('abb') == 'No'\nassert solution('a') == 'Yes'\nassert solution('ab') == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('akasaka') == 'Yes'"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nfrom decimal import *\na, b = stdin.split(' ')\na = int(a)\nb = Decimal(b)\n\nprint(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\nprint(solution(\"198 1.10\"))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"198 1.10\"\n) == \"217\"\nprint(solution(input()))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('198 1.10') == '217'"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('1\\n2') == '0'\nassert solution('1\\n3') == '0'\nassert solution('1\\n4') == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('2000000000') == '999999999'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1\") == \"0\"\nassert solution(\"2\\n2\") == \"0\"\nassert solution(\"2\\n3\") == \"0\"\nassert solution(\"2\\n4\") == \"0\"\nassert solution(\"2\\n5\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\") == \"0\"\nassert solution(\"4\\n1\") == \"1\"\nassert solution(\"2\\n5\") == \"1\"\nassert solution(\"6\\n3\") == \"0\"\nassert solution(\"6\\n7\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\") == \"0\"\nassert solution(\"7\\n2\") == \"1\"\nassert solution(\"7\\n1\") == \"0\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\\n\") == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n7\") == \"0\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1\") == \"0\"\nassert solution(\"3\\n1\") == \"0\"\nassert solution(\"3\\n2\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\") == \"0\"\nassert solution(\"7\\n1\") == \"1\"\nassert solution(\"7\\n2\") == \"0\"\nassert solution(\"7\\n3\") == \"1\"\nassert solution(\"7\\n4\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\"\"\") == '3'\nassert solution(\"\"\"5 4 5\n1 2\n2 3\n3 4\n4 1\"\"\") == '1'\nassert solution(\"\"\"5 4 2\n1 2\n2 3\n3 4\n4 1\"\"\") == '0'\nassert solution(\"\"\"5 4 1\n1 2\n2 3\n3 4\n4 1\"\"\") == '0'\nassert solution(\"\"\"5 4 0\n1 2\n2 3\n3 4\n4 1\"\"\") == '1'"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"1 2\\n2 3\") == \"0\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\nassert solution(\"3 2\\n1 2\\n2 3\\n3 4\\n4 1\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 1\\n2 3\\n3 4\\n4 1\\n5 2\\n\") == 1\nassert solution(\"4 4 1\\n1 2\\n2 3\\n3 4\\n\") == 0\nassert solution(\"5 9 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 9\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == 3\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1 3\\n2 3\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 5\\n1 2\\n1 3\\n2 3\\n4 1\\n4 2\\n4 3\\n4 5\\n1 6\\n5 1\\n5 4\\n6 5\") == \"3\"\n\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"1\"\n\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == '1'"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 1\\n1 2\\n1 3\\n2 3\") == \"0\"\nassert solution(\"4 6 4\\n2 4\\n2 3\\n3 4\\n4 2\\n3 2\\n1 4\\n2 1\\n2 3\") == \"3\"\nassert solution(\"3 4 1\\n1 3\\n1 2\\n2 3\") == \"1\"\nassert solution(\"3 2 1\\n2 3\") == \"1\"\nassert solution(\"3 3 3\\n1 2\\n2 3\\n3 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('0 0 0') == '0'\nassert solution('1 2 3') == '0'\n\nassert solution('5 9 1') == '3'\nassert solution('9 9 1') == '0'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 4 1\") == 4\nassert solution(\"6 1 1 4 4 4\") == 5\nassert solution(\"1 1 1 4 4 4\") == 5\n\nprint(solution(\"3 2 4 1\"))\nprint(solution(\"6 1 1 4 4 4\"))\nprint(solution(\"1 1 1 4 4 4\"))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 2 4 1\") == '4'\n\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 4 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"5\"\nassert solution(\"1 1 1 4 4 4\") == \"5\"\nassert solution(\"5 2 1 4 4 4\") == \"5\"\nassert solution(\"5 1 1 4 4 4\") == \"5\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 1\") == 4\n\nassert solution(\"6 1 1 4 4 4\") == 5\n\nassert solution(\"1 1 1 4 4 4\") == 5"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1 1\") == \"2\"\nassert solution(\"3\\n2 1 1\") == \"2\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\n\nassert solution(\"1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\\n\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\"\"\"\n\nN, M = map(int, stdin.readline().split())\n\nprefectures = {}\nfor _ in range(N):\n    prefectures[_] = []\nfor _ in range(M):\n    P, Y = map(int, stdin.readline().split())\n    prefectures[P].append(Y)\n\nfor i in range(N):\n    prefectures[i] = sorted(prefectures[i])\n\nfor i in range(N):\n    prefectures[i].sort()\n    prefectures[i].sort(reverse=True)\n\nfor i in range(N):\n    if len(prefectures[i]) == 0:\n        print(0)\n    else:\n        prefectures[i] = [str(x) for x in prefectures[i]]\n        prefectures[i] = ''.join(prefectures[i])\n        print(prefectures[i])\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport sys\n\nclass Prefectures:\n    def __init__(self, n, m):\n        self.prefectures = []\n        self.city_per_prefecture = [None for _ in range(n + 1)]\n        for line in stdin:\n            prefecture, year, city = line.split()\n            self.prefectures.append(prefecture)\n            if year == \"2020\":\n                self.city_per_prefecture[int(prefecture)] = []\n            self.city_per_prefecture[int(prefecture)].append(int(city))"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\n\"\"\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n\n\"\"\"\nimport sys\nfrom math import factorial\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\") == \"000001000002\\n000001000001\\n000002000001\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10 8 40') == 2\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == 2\n\"\"\"\n\nimport sys\n\nN, *A = map(int, sys.stdin.readlines())\n\nm = [None] * N\nfor i in range(N):\n    m[i] = (A[i], i)\n\nm.sort()\n\nprint(m[1][0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2 10 8 40\n''') == '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\n\n\n\nimport sys\nimport random\n\n\n\"\"\"\n3\n7 7 7\n1 3 3 8\n3 3 3 5\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 10 8 40''') == '2'\nassert solution('''5\n10 1 1 1 1''') == '2'\nassert solution('''1\n100''') == '100'\nassert solution('''3\n20 0 2''') == '0'\nassert solution('''5\n10 1 1 1 1''') == '1'\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 10 8 40\") == '2'\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n2 10 8 40\"\n) == \"2\"\n\"\"\"\n\n\"\"\"\nfrom math import ceil, sqrt"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"?(____+__)-____>___.__<___\") == \"0250341\"\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('?(__+___+__-___):-___>__.') == '01010'\nassert solution('?(__+___+__-___):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0101\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('?(____+_/______):-____<________.\\n') == '010'\nassert solution('?(__+____):-___>__.\\n') == '00'\nassert solution('?(___-____):-___>__.\\n') == 'false'\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"?(_____):-_____>______,_____<__.\") == \"0250341\"\nassert solution(\"?(_____):-_____>______,_____<__.\") == \"0101\"\nassert solution(\"?(______):-______>_______,______<_______._____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(______):-______>_______,______<_______._____<______,______<_______.\") == \"0101\"\nassert solution(\"?(_______):-_______>_______,_______<_______._____<_______,_______<_______.\") == \"0250341\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\\\n\") == \"0010\\\\n\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\\\n\") == \"false\\\\n\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\\\n\") == \"0250341\\\\n\"\nassert solution(\"?(__+___+__-___):-___>__.\\\\n\") == \"0101\\\\n\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('?(___+___*__):-___>__') == '0250341'\nassert solution('?(___+___-___):-___>__,_____<__') == 'false'\nassert solution('?(_____):-__>__,_____<__') == '0010'\nassert solution('?(____):-__>__,_____<__') == '0101'\n\nassert solution('?(___+___*__):-___>__.___') == '0250341.11111'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__.\\n\") == \"0101\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\"\n) == \"0010\\n\"\n\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\"\n) == \"false\\n\"\n\nassert solution(\"?(______________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\"\n) == \"0250341\\n\"\n\nassert solution(\"?(__+___+__-___):-___>__.\\n\"\n) == \"0101\\n\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(_-_/___*__):-___>__. -_-_-_-_-_-_/___*__\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__. -_-_-_-_-_-_-_-_-_-_-_+_/_____\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______. -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\"\n\n-----\n\nIf the xor of the numbers on the path from ($1, 1$) to ($n, m$) is equal to $k$, then there are three possible paths:  $(1, 1) \\rightarrow (1, 2) \\rightarrow (2, 2)$;  $(1, 1) \\rightarrow (1, 3) \\rightarrow (3, 3)$;  $(1, 1) \\rightarrow (1, 4) \\rightarrow (4, 4)$.\n\nIf the xor of the numbers on the path from ($1, 1$) to ($n, m$) is greater than $k$, then there are no possible paths.\n\nIf the xor of the numbers on the path from ($1, 1$) to ($n, m$) is less than $k$, then there are four possible paths:  $(1, 1) \\rightarrow (2, 1) \\rightarrow (3, 1) \\rightarrow (4, 1)$;  $(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 2) \\rightarrow (3, 2)$;  $(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 3) \\rightarrow (3, 3)$;  $(1, 1) \\rightarrow (2, 1) \\rightarrow (2, 4) \\rightarrow (3, 4)$.\n\nThe algorithm can be implemented with the following code:"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == 3\n\n\"\"\"\nimport sys\nimport re\nimport functools"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\nassert solution('3 4 1000000000000000000') == '0'\nassert solution('3 4 1') == '5'\nassert solution('3 4 0') == '1'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1. Write a solution to the problem that goes through the given grid, and finds all the paths from (1, 1) to (n, m) with the following properties:\n\nYou can move right or down only. Formally, from the cell ($i, j$) you may move to the cell ($i, j + 1$) or to the cell ($i + 1, j$). The target cell can't be outside of the grid.\nThe xor of all the numbers on the path from the cell ($1, 1$) to the cell ($n, m$) must be equal to $k$ (xor operation is the bitwise exclusive OR, it is represented as '^' in Java or C++ and \"xor\" in Pascal).\nThe number of such paths in the given grid is the answer to the problem.\n\n2. The input is read from the console. The first line contains three integers $n$, $m$ and $k$ \u2014 the height and the width of the grid, and the number $k$.\nThe next $n$ lines contain $m$ integers each, the $j$-th element in the $i$-th line is $a_{i, j}$ ($0 \\le a_{i, j} \\le 10^{18}$).\n\nThe output is printed on the console. It should contain one integer \u2014 the number of paths from ($1, 1$) to ($n, m$) with xor sum equal to $k$.\n\n\n\n3. Write a solution to the problem that goes through the given grid, and finds all the paths from (1, 1) to (n, m) with the following properties:\n\nYou can move right or down only. Formally, from the cell ($i, j$) you may move to the cell ($i, j + 1$) or to the cell ($i + 1, j$). The target cell can't be outside of the grid.\nThe xor of all the numbers on the path from the cell ($1, 1$) to the cell ($n, m$) must be equal to $k$ (xor operation is the bitwise exclusive OR, it is represented as '^' in Java or C++ and \"xor\" in Pascal).\nThe number of such paths in the given grid is the answer to the problem.\n\n4. The input is read from the console. The first line contains three integers $n$, $m$ and $k$ \u2014 the height and the width of the grid, and the number $k$.\nThe next $n$ lines contain $m$ integers each, the $j$-th element in the $i$-th line is $a_{i, j}$ ($0 \\le a_{i, j} \\le 10^{18}$).\n\nThe output is printed on the console. It should contain one integer \u2014 the number of paths from ($1, 1$) to ($n, m$) with xor sum equal to $k$.\n\n\n-----Constraints-----\n\n3 <= n, m <= 20\n1 <= k <= 10^18\n\n0 <= a_{i, j} <= 10^18\n\n\n-----Test Cases-----\nInput\n3 3 11\n2 1 5\n7 10 0\n12 6 4\n\nOutput\n3\n\nInput\n3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\nOutput\n5\n\nInput\n3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\nOutput\n0\n\n\n-----Notes-----\n\nThe solution is not optimized, so the test cases may take a long time to pass.\n\nThe solution uses dynamic programming to solve the problem.\n\nThe cell ($i, j$) is called \"the origin\" for the path from this cell.\nThe cell ($i, j$) is called \"the destination\" for the path from this cell.\n\nThe xor of the numbers on the path from the origin to the destination must be equal to $k$ (xor operation is the bitwise exclusive OR, it is represented as '^' in Java or C++ and \"xor\" in Pascal).\n\n1. All the paths go through the origin.\n2. The path from the origin to the origin is not included in the output.\n3. The destination can be equal to the origin.\n\nThe number of possible paths is the number of paths from the origin to the destination with the origin excluded.\n\nFor example, consider the grid\n\n1112\n2213\n3333\n\nThe origin is at ($1, 1$), the destination is at ($3, 3$).\n\nThe number of paths from the origin to the destination is:\n\n1. There is no destination, so there is only one path from the origin to the destination.\n2. There is a destination, so there are 4 paths from the origin to the destination:\n    2.1 The origin to ($2, 2$)\n    2.2"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"1 3 3 3\") == 3\nassert solution(\"0 3 3 2\") == 5\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"4 4 2\") == \"5\"\nassert solution(\"4 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == 3\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 5\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == 0\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n\") == 0"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"4 4 2\") == 5"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nn = int(input())\nt = input()\n\nans = \"\"\n\nfor d in range(1, n + 1):\n    if n % d == 0:\n        ans += t[d - 1::-1]\n\nprint(ans)\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"orcesfedoc\") == \"orcesfedoc\"\nassert solution(\"secrofedoc\") == \"secrofedoc\"\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nassert solution(\"123 45\") == \"168\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 14') == '19'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5') == 5\nassert solution('5 3') == 8\nassert solution('5 3\\n1') == 4\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == '19'\n\"\"\"\nimport sys\n\na, b = map(int, sys.stdin.readline().strip().split())\n\nprint(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 6') == '11'\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\nprint(solution(\"5 14\"))\nprint(solution(\"381 492\"))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 14') == '19'\nprint(solution('381 492'))\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">-<\") == \"><>-\"\nassert solution(\"++<>-\") == \"++>-<\"\nassert solution(\">++++<\") == \"<<<<<<<\"\nassert solution(\"<>><<<<\") == \"<>>>>>>>\"\nassert solution(\"<<<<<<<>\") == \">>>>>>>>\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5+4-6\") == \">++++++++<[>+>-]<\"\nassert solution(\"5+4-6-9+7\") == \">+++++++++>[>+>-]<[-]<[>+>-]<\"\nassert solution(\"5+4-6-9+7-9+6+5+4-3-2+1+4+5\") == \">+++++++++>[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-]<[-]<[>+>-"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">+>-<>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>-<.>"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2+3\") == \"+>\\n\"\nassert solution(\"9-7\") == \"+>\\n\"\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"+\") == \"\"\nassert solution(\"+-\") == \"\"\nassert solution(\"+1\") == \"+\"\nassert solution(\"+12\") == \"+1[+1-\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+2-3\") == \"+>\\n<[-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\nimport sys\n\n\nclass Array:\n    def __init__(self, array):\n        self.array = array\n\n    def __getitem__(self, key):\n        return self.array[key]\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"2+3-7\") == \"++++>\\n++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"2+3+7\") == \">>>>>\\n>>>>>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7+2\") == \">>>>>\\n>>>>>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".+\") == \"++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.\"\nassert solution(\"1-2\") == \"++++++++[>---]>.\"\nassert solution(\".-\") == \"+++++++..--------.\"\nassert solution(\"1+2\") == \"++++++++[>++++++]>.\"\nassert solutionn\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"1+1\") == \"+++++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\"\nassert solution(\"4+5-2+4\") == \"++++>\\n<[<+>-]<\\n++++>\\n<[<+>-]<\\n<[<+>-]<\\n++++>\\n<[<+>-]<\\n<[<+>-]<\\n++++>\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n++++>\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\\n<[<+>-]<\n\n'''\n\n\"\"\"\nImplementation is similar to the solution from:\nhttps://github.com/yngchang/CSCI-731/blob/master/examples/benchmarking.py\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2+3\n\"\"\"\n) == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\nassert solution(\n\"\"\"\n9-7\n\"\"\"\n) == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\n\n\n-----Explanation-----\n\n\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == \"12345\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"11212312341234512345612345671234567812345678912345678910\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('112123123412345$\\dots$') == '1'\nassert solution('1122$\\dots$') == '0'\nassert solution('1122$\\dots$') == '0'\nassert solution('1111$\\dots$') == '9'\nassert solution('11111111$\\dots$') == '9'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1234 12345 12341234 12345678 123456789 1234567890 123456789012345678901234567890\") == \"0\"\nassert solution(\"112345\") == \"0\"\nassert solution(\"212345\") == \"1\"\nassert solution(\"312345\") == \"2\"\nassert solution(\"412345\") == \"3\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\nassert solution(\"11212312341234512345612345671234567812345678912345678910\") == '0'\n\"\"\"\n\nfrom collections import deque\nimport itertools\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('112123123412345') == '1'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '5'\nassert solution('11212312341234512345612345671234567812345678912345678910') == '0'\nassert solution('11212312341234512345612345671234567812345678912345678910111213141516171819') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"112233445566778899aabbccddeeffgghhiijjkkllmmnnnnooppqqrrssttuuvvwwwwxxxxyyyyzzzz\") == \"0 1 1 1 2 1 0 1 1 1 3 1 1 1 1 1 4 1 0 1 1 1 1 1 5 1 0 1 1 1 1 1 1 6 1 0 1 1 1 1 1 1 7 1 0 1 1 1 1 1 1 8 1 0 1 1 1 1 1 1 9 1 0 1 1 1 1 1 1 1\"\nassert solution(\"112233445566778899aabbccddeeffgghhiijjkkllmmnnnnooppqqrrssttuuvvwwwwxxxxyyyyzzzz\") == \"8 1 1 1 2 1 0 1 1 1 3 1 1 1 1 1 4 1 0 1 1 1 1 1 5 1 0 1 1 1 1 1 1 6 1 0 1 1 1 1 1 1 7 1 0 1 1 1 1 1 1 8 1 0 1 1 1 1 1 1 9 1 0 1 1 1 1 1 1 1\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\"\nimport math"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"4\"\nassert solution(\"45\") == \"0\"\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('7') == ''\nassert solution('37') == ''\nassert solution('3773') == ''\nassert solution('73') == ''\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == 1\nassert solution(\"110\") == 1\nassert solution(\"101\") == 2\nassert solution(\"010\") == 1\nassert solution(\"011\") == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"000\") == 1\nassert solution(\"110\") == 0\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11100010') == 1\nassert solution('11010') == 0\nassert solution('1110110') == 2\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"010\") == 1\nassert solution(\"000\") == 1\nassert solution(\"110\") == 1\nassert solution(\"001\") == 2\nassert solution(\"011\") == 2\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('000') == 1"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == 1\nassert solution(\"11110\") == 2\nassert solution(\"11010\") == 1\nassert solution(\"11011\") == 2\nassert solution(\"11101\") == 3\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"110\") == 3\nassert solution(\"010\") == 0\nassert solution(\"110\") == 3\nassert solution(\"001010\") == 3\nassert solution(\"111111111\") == 7\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"011\") == 1\nassert solution(\"001\") == 0\nassert solution(\"100\") == 1\nassert solution(\"011\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '010'\n    ) == 1\nassert solution(\n    '100'\n    ) == 2\nassert solution(\n    '110'\n    ) == 1\nassert solution(\n    '000'\n    ) == 0\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == 1\n\"\"\"\n\nS = stdin.split()[0]"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n6 7 9 10 31''') == 'APPROVED'\nassert solution('''10\n10 10 10 10 10 10 10 10 10 10 10''') == 'APPROVED'\nassert solution('''20\n1 1 1 1 1 1 1 1 1 1 1 1\n10 10 10 10 10 10 10 10 10 10 10''') == 'APPROVED'\nassert solution('''4\n0 0 0 0\n0 0 0 0''') == 'DENIED'\nassert solution('''4\n0 0 0 0\n0 0 0 0''') == 'APPROVED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nn = int(stdin.readline())\n\na = map(int, stdin.readline().split())\n\nresult = \"APPROVED\"\n\nfor x in a:\n    if x % 2 == 0:\n        if x % 3 or x % 5:\n            result = \"DENIED\"\n\nprint(result)\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'DENIED'\nassert solution('2\\n') == 'DENIED'\nassert solution('3\\n') == 'DENIED'\nassert solution('3\\n2\\n3\\n3\\n') == 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == 'APPROVED'\nassert solution('7\\n2 4 6 8 10 12') == 'APPROVED'\nassert solution('6\\n7 9 10 31') == 'DENIED'\n\n----------------------------------------\n\n\n\nInstructor Solution 1:"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"4\\n2 3 6 9\") == \"DENIED\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5 7\") == \"APPROVED\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n6 7 9 10 31') == \"APPROVED\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LDR') == 'No'\nassert solution('UD') == 'Yes'\nassert solution('DDLU') == 'No'\nassert solution('LDRRU') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDLUDRR\") == \"No\"\nassert solution(\"RUDLUDRRRUDRR\") == \"Yes\"\nassert solution(\"RUDLUDRRRUDDRR\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULUDRD\") == \"No\"\n\n------\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDRUDRUDR\") == \"Yes\"\nassert solution(\"RUDDRUDDRUDR\") == \"Yes\"\nassert solution(\"RLDRUDRUDR\") == \"Yes\"\nassert solution
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RURDDLU') == 'Yes'\nassert solution('RUDUUDL') == 'No'\nassert solution('LRRL') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RDRLUDU\") == \"Yes\"\nassert solution(\"RDRLLUUDUDRDLL\") == \"Yes\"\nassert solution(\"RDRLLLUDURDLLUDRDRLDLLUDRDRDRRUDRLLRUDRULDDDDRRLDRDRDRDRDRDDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDRLULRUDR\") == \"Yes\"\nassert solution(\"RULLRDRL\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RLRU') == 'No'\n\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n2\n4\n3\n5''') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\nassert solution(\"6\\n2\\n4\\n1\\n6\\n1\\n6\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 5\\n\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 2 4 3 5') == '7'"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3\n2\n4\n3\n5\n''') == '7'\nprint('Test 1 OK')\n\nassert solution('''\n8\n2\n7\n3\n5\n9\n3\n9\n6\n''') == '12'\nprint('Test 2 OK')\n\nassert solution('''\n2\n3\n2\n3\n3\n''') == '0'\nprint('Test 3 OK')\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\nassert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\nn = int(sys.stdin.readline())\na = int(sys.stdin.readline())\nb = int(sys.stdin.readline())\nc = int(sys.stdin.readline())\nd = int(sys.stdin.readline())\ne = int(sys.stdin.readline())\n\narr = np.array([a, b, c, d, e])\n\nprint(n*arr.min())\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 2\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n\n\"\"\"\nLets start with this problem.\n\nLet us start by considering the situation when there is only one sequence which satisfies the first condition (i.e. 0 \\leq A_i \\leq 9)\n\nIn that case, there are obviously no sequences which satisfies all the conditions.\n\nNow, let us consider the situation when there are 2 sequences which satisfies the first condition.\n\nThey are {0,9} and {9,0}.\n\nNow, let us consider the situation when there are 3 sequences which satisfies the first condition.\n\nThey are {0,9,0}, {9,0,9} and {0,9,9}.\n\nThis gives us a clear hint, that there are no sequences which satisfies the conditions.\n\nNow, let us consider the situation when there are 4 sequences which satisfies the first condition.\n\nThey are {0,9,0,0}, {0,9,0,9}, {0,9,9,0}, {0,9,9,9} and {9,0,0,0} and {9,0,0,9} and {9,0,9,0} and {9,0,9,9}.\n\nThis gives us a clear hint, that there are no sequences which satisfies the conditions.\n\nSimilarly, we can find all the possible arrangements of such 5 sequences.\n\nSimilarly, we can find all the possible arrangements of such 6 sequences.\n\nSimilarly, we can find all the possible arrangements of such 7 sequences.\n\nSimilarly, we can find all the possible arrangements of such 8 sequences.\n\nSimilarly, we can find all the possible arrangements of such 9 sequences.\n\nNow, we can find all the possible arrangements of N sequences, if there are N sequences which satisfy the first condition.\n\nAnd the answer is N.\n\nHow to solve this problem in Python?\n\nIn Python, we can solve this problem by applying the logic of a naive approach.\n\nIt is a easy task to find all the arrangements of all the sequences which satisfy the first condition.\n\nLet us try to find all the arrangements of all the sequences which satisfy the second condition.\n\nFrom the first condition, we already know that there are no sequences which satisfy the second condition.\n\nSo, it is a easy task to find all the arrangements of sequences which satisfy the first condition.\n\nLet us find all the arrangements of the sequences which satisfy the first condition.\n\nWe can find all the arrangements of all the sequences which satisfies the first condition by using permutations.\n\nIt will be interesting to note that a permutation of the numbers {0,9} is {0,9}.\n\nAnd a permutation of the numbers {9,0} is {0,9}.\n\nSo, the only arrangements of all the sequences which satisfy the first condition are {0,9} and {9,0}.\n\nWe will need to try out all the permutations of the elements in the set {0,9}.\n\nWe will do so by creating a function to find all the permutations of the elements in the set.\n\nWe can use the itertools.permutations function to find all the permutations of the elements in the set.\n\npermutations(iterable, r)\n\nThis function returns an iterator that generates all the possible permutations of r length.\n\nLet us try to understand what this function returns.\n\nHere, we have an iterable and an integer called r.\n\nIf we want to find all the permutations of the iterable, then we can give the r to it.\n\nSo, we get all the permutations of the iterable if we give the r.\n\nWe will see how this function works below.\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\"\n\nimport re\n\nMOD = 10 ** 9 + 7\n\nn = int(stdin.readline())\nseq = [0] * 10\nseq[0] = 1\nseq[9] = 1"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"7\") == \"24\"\n\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '2'\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n\") == \"4\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 2\n\"\"\"\n\nfrom functools import reduce\nfrom operator import xor\nfrom typing import Tuple\n\nfrom utils.decorators import timeit\nfrom utils.input_utils import get_input\nfrom utils.iterables import find_numbers_in_list\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\n'''\nimport sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline().rstrip())\n\nc = Counter(map(int, sys.stdin.readline().split()))\n\nn0 = c[0]\nn9 = c[9]"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7') == '7'\nassert solution('2') == '2'\nassert solution('20') == '23'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"5\\n\"\n) == \"5\\n\"\nassert solution(\n\"2\\n\"\n) == \"2\\n\"\nassert solution(\n\"10\\n\"\n) == \"23\\n\"\n\n---\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(15) == 23\nassert solution(5) == 7\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20') == '23'\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '5'\nassert solution('3\\n') == '3'\nassert solution('2\\n') == '2'\nassert solution('1\\n') == '2'\nassert solution('0\\n') == '2'\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '7'\nassert solution('5') == '11'\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == '1'\nassert solution(\"4\\n3 1 3 5\") == '2'\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3 2\") == 1\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\nassert solution
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\n\ndistinct_numbers = set()\n\nfor i in range(n - 1):\n    if v[i] == v[i + 1]:\n        distinct_numbers.add(v[i])"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\n\n\"\"\"\nJust count the number of changes\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\nimport sys\n\na = [int(v) for v in sys.stdin.readline().split()]"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 100 90 80''') == '23'\nassert solution('''3 100 140''') == '-1'\nassert solution('''6 100 200 300 400 500 600''') == '42'\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == '23'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nimport io\nimport sys\nfrom collections import defaultdict, deque\n\nimport pytest\n\nINPUT_1 = \"\"\"5 100 90 80\n98\n40\n30\n21\n80\"\"\"\n\nINPUT_2 = \"\"\"5 3 10\n4\n3\n2\n1\n0\"\"\"\n\n\n@pytest.mark.parametrize(\"mock_input,expected\", [\n    (INPUT_1, 23),\n    (INPUT_2, 0),\n])\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n\nimport math\n\nn, a, b, c = [int(v) for v in stdin.split()]\n\nmp = 0\nfor l in [a, b, c]:\n    if l <= 0:\n        continue\n    while l > 0:\n        if l > b:\n            mp += b\n            l -= b\n        else:\n            mp += l\n            l = 0\n\nprint(mp)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AB') == 'BC'\nassert solution('ZY') == 'ABC'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCXYZ\", 2) == \"CDEZAB\"\n\n-----Test Input-----\nABCXYZ\n\n-----Test Output-----\nCDEZAB\n\"\"\"\nimport math"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('XYZABC') == 'CDEZAB'\nassert solution('AABCBB') == 'BCCA'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ZQWEASD\") == \"ABCDEF\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AB') == 'C'\nassert solution('A') == 'B'\nassert solution('Z') == 'A'\nassert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABXYZ') == 'CDEZAB'\nassert solution('ABCXYZ') == 'CDEZAB'\nassert solution('ABCXY') == 'CDEZAB'\nassert solution('ABXY') == 'CDEZAB'\nassert solution('ABXYZ') == 'CDEZAB'\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('CCXYZ') == 'CCXYZ'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"AABC\") == \"BCAA\"\nassert solution(\"ZAB\") == \"ABZ\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('FGHIJKL') == 'GKLMNO'\nassert solution('MNO') == 'NOP'\nassert solution('PQRS') == 'TUVWXY'\nassert solution('ZYXW') == 'ABCXY'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\n\nimport math\nimport sys\nfrom typing import List, Tuple, Set\n\nsys.setrecursionlimit(2000)\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '2 3 4 6 7 8 9 10'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1\") == \"199999\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\nassert solution(\"1 2750131 199999\") == \"199999\"\n\nassert solution(\"2 3\") == \"3 2\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n5 2 3 3 2 4''') == '3 4 2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '11112'\nassert solution('5 1 2 3 4') == '21112'\nassert solution('7 1 2 3 4 5 6') == '112122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '112122'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"22112\"\nassert solution(\"7 1\") == \"112122\"\nassert solution(\"7 1\") == \"112122\"\nassert solution(\"5 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"5 2\n2 4 5 3 1\"\"\"\n) == \"11111\"\n\nassert solution(\n    \"\"\"5 1\n2 4 5 3 1\"\"\"\n) == \"21112\"\n\nassert solution(\n    \"\"\"7 1\n7 2 1 3 5 4 6\"\"\"\n) == \"1121122\"\n\nassert solution(\n    \"\"\"5 1\n2 1 3 5 4\"\"\"\n) == \"22111\"\n\nassert solution(\n    \"\"\"7 2\n2 3 5 6 7 4 1\"\"\"\n) == \"2212\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '21112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\n\n\"\"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"5 1\") == 2\nassert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 1 1 1 1 1\") == 1\nassert solution
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 1\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 3 3 7\") == \"4\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 3 7') == 2\n\"\"\"\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\ncounts = {}\n\nfor n in range(1, n):\n    if nums[n - 1] >= nums[n]:\n        counts[n] = counts.get(n - 1, 0) + 1\n\nfor n in range(n - 2, -1, -1):\n    if nums[n] >= nums[n + 1]:\n        counts[n] = counts.get(n + 1, 0) + 1\n\nprint((counts[0] + 1) % 1000000007)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('3\\n1 2 3') == '0'\nassert solution('3\\n1 2 1') == '4'\nassert solution('3\\n1 2 3') == '2'\nassert solution('4\\n1 2 3 7') == '4'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n') == '1\\n1\\n1'\nassert solution('3\\n1 3 2\\n') == '1\\n1\\n1'\nassert solution('4\\n1 2 3 1\\n') == '4\\n4\\n2\\n4\\n4'\nassert solution('4\\n1 2 3 1\\n') == '4\\n4\\n2\\n4\\n4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 2 1 2 3\") == 2\n\n\"\"\"\n\n\"\"\"\n2\n1 2\n\n2\n1 2\n\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 3 7') == '4'\n\nimport sys\nsys.setrecursionlimit(10000)\nfrom collections import deque\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 7 1 5 4 9\") == \"1\"\nassert solution(\"5 4 7 1 5 4 9\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'3\\n'\n'1 2 3 4'\n) == '2'\nassert solution(\n'3\\n'\n'1 2 3 4'\n) == '0'\nassert solution(\n'5\\n'\n'1 2 3 4 5'\n) == '1'\nassert solution(\n'6\\n'\n'1 2 3 4 5 6'\n) == '0'\nassert solution(\n'7\\n'\n'1 2 3 4 5 6 7'\n) == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 2 3 4 5') == '2'"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 1 1 1023') == '0'\nassert solution('7 39 89 25 89') == '2'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 1 5 4 9') == 1\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 1 5 4 9') == 1\nassert solution('1 2 3 4 5') == 2\nassert solution('1 1 1 1023') == 1\nassert solution('4 1 1 5 4 9') == 1\nassert solution('1 1 1') == 0\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 1 1 1023') == '0'\nassert solution('7 39 89 25 89') == '1'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1110\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1110') == '0'\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0011\") == \"4\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1110111') == 5\nassert solution('11101110') == 3\nassert solution('11101101') == 1\nassert solution('11101110') == 3\nassert solution('11101101') == 1\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1100') == '4'\nassert solution('1011') == '2'\nassert solution('1110') == '1'\nassert solution('1010') == '1'\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11100') == '1'\n\nassert solution('10111') == '2'\n\nassert solution('001001001101111010') == '4'\n\nassert solution('110111001110011011110') == '10'\n\nassert solution('11100111101111010') == '1'"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11010\") == \"4\"\nassert solution(\"11101110\") == \"4\"\nassert solution(\"110101110\") == \"3\"\nassert solution(\"11101111\") == \"3\"\nassert solution(\"111011010\") == \"1\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11101\") == \"1\"\nassert solution(\"101010\") == \"5\"\nassert solution(\"111110\") == \"5\"\nassert solution(\"111111\") == \"2\"\nassert solution
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0011') == '4'\nassert solution('11010') == '0'\n\"\"\"\n\n\"\"\"\n\uc544\uc774\ub514\uc5b4 : \ubb38\uc81c\uc5d0\uc11c \ubaa9\ud45c\ub294 \ub9de\uc744\uacbd\uc6b0 \ucd5c\ub300\ub85c \ub098\uc624\ub294 \uac12\uc744 \ucc3e\ub294\ub2e4.\n\uaddc\uce59\uc744 \ucc3e\uace0 \uaddc\uce59\uc5d0 \uc758\ud574 \ucd5c\ub300 \uac12\uc744 \ucc3e\ub294\ub2e4.\n\n\ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300 \uac12\uc744 \ucc3e\uc544 \uac00\ub294 \ubc29\ubc95.\n\uc704\uc0c1\uc815\ub82c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300 \uac12\uc744 \ucc3e\uc544 \uac00\ub294 \ubc29\ubc95.\n\n\uc544\uc774\ub514\uc5b4\ub97c \ubc14\ud0d5\uc73c\ub85c \ucd5c\ub300 \uac12\uc744 \uad6c\ud55c\ub2e4.\n\n\ucc38\uace0\uc790\ub8cc : https://www.educative.io/m/given-a-string-of-0s-1s-find-the-maximum-number-of-consecutive-1s\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n\"\"\"\nfrom typing import List, Set\n\nfrom utils.input_output import read_multi_integers\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport math\nfrom sys import stdin\n\nstdin = stdin.readlines()\nN, M = [int(i) for i in stdin.pop(0).split(' ')]\nL, R = [int(i) for i in stdin.pop(0).split(' ')]\n\ncount = 0\n\nfor i in range(N):\n    if i + 1 in range(L, R + 1):\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nN, M = map(int, input().split())\n\nvalid = 0\nfor i in range(1, N + 1):\n    for j in range(1, i + 1):\n        valid += 1\n        if j <= M:\n            valid += 1\n        if j > i:\n            valid -= 1\n            break\n\nprint(valid)"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\nimport sys\nfrom typing import List, Dict, Set\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 2 1\\n\") == 2\n\"\"\"\n\nimport math\nimport numpy as np\n\nfrom utils import get_lines\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\ncount = 0\nwhile True:\n    l, r = map(int, sys.stdin.readline().split())\n    for i in range(l-1, r):\n        A[i] += 1\n    count += 1\n    if A == sorted(A):\n        break\nprint(count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_str) == stdout_str\n\"\"\"\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\n\"\"\"\nSubproblem:\n - Find the minimum number of waterings required for all flowers in the flower bed.\n - This is a Fibonacci problem.\n\nBase Case:\n - N=0: 0\n - N=1: 0\n\nInduction:\n - for all i in range(1, N+1):\n       for all j in range(1, i):\n           water flower j:\n           for all k in range(j+1, i):\n\n\"\"\"\n\n\"\"\"\nThe algorithm takes O(n^3) time and O(n) space.\n\nThis problem can be solved using dynamic programming.\n\nBase case:\n - N = 0: 0\n\nInduction:\n - for all i in range(1, N+1):\n       for all j in range(1, i):\n           water j:\n           for all k in range(j+1, i):\n\"\"\"\n\n\"\"\"\nThe algorithm takes O(n^3) time and O(n^2) space.\n\nThe solution is based on recursion.\n\nBase case:\n - N = 0: 0\n\nInduction:\n - for all i in range(1, N+1):\n       for all j in range(1, i):\n           water j:\n           for all k in range(j+1, i):\n\"\"\"\n\n\"\"\"\nThe algorithm takes O(n^3) time and O(n^2) space.\n\nThe solution is based on dynamic programming.\n\nBase case:\n - N = 0: 0\n\nInduction:\n - for all i in range(1, N+1):\n       for all j in range(1, i):\n           water j:\n           for all k in range(j+1, i):\n\"\"\"\n\n\"\"\"\nThe algorithm takes O(n^3) time and O(n) space.\n\nThe solution is based on recursion.\n\nBase case:\n - N = 0: 0\n\nInduction:\n - for all i in range(1, N+1):\n       for all j in range(1, i):\n           water j:\n           for all k in range(j+1, i):\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(r\"sample/4.in\").read()) == 2"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(len(set(list(map(int, input().split(' ')))))), \"Test Failed\"\nprint(\"Test Passed\")\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 8\") == \"4\"\nassert solution(\"6 9\") == \"4\"\nassert solution(\"7 12\") == \"4\"\nassert solution(\"7 18\") == \"4\"\n\nassert solution(\"8 10\") == \"1\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n\"\"\"\n\nn, w = map(int, input().split())\na = list(map(int, input().split()))\na.append(0)\nb = {}\nfor i in range(n):\n    for j in range(1, min(w + 1, a[i] + 1)):\n        if a[i] - j not in b:\n            b[a[i] - j] = 0\n        b[a[i] - j] += 1\nans = 0\nfor i in range(w + 1):\n    if i in b:\n        ans += b[i]\nprint(ans)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"3 4\\n2 1 -3\") == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 1 2\") == \"2\"\nassert solution(\"3 10\") == \"1\"\nassert solution(\"4 10\") == \"2\"\nassert solution(\"5 10\") == \"0\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 5\n2 1 -3''') == '3'\nassert solution('''2 4\n-1 1''') == '4'\nassert solution('''4 10\n2 4 1 2''') == '2'\nassert solution('''4 10\n2 3 -1''') == '0'\nassert solution('''2 3\n-1 1''') == '0'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 1 2\") == \"2\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"4 10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\n\"\"\"\n\n\"\"\"\nTEST\n0    Possible way: 1\n1    Possible way: 2\n2    Possible way: 3\n3    Possible way: 4\n4    Possible way: 5\n5    Possible way: 6\n6    Possible way: 7\n7    Possible way: 8\n8    Possible way: 9\n9    Possible way: 10\n10    Possible way: 11\n11    Possible way: 12\n12    Possible way: 13\n13    Possible way: 14\n14    Possible way: 15\n15    Possible way: 16\n16    Possible way: 17\n17    Possible way: 18\n18    Possible way: 19\n19    Possible way: 20\n20    Possible way: 21\n21    Possible way: 22\n22    Possible way: 23\n23    Possible way: 24\n24    Possible way: 25\n25    Possible way: 26\n26    Possible way: 27\n27    Possible way: 28\n28    Possible way: 29\n29    Possible way: 30\n30    Possible way: 31\n31    Possible way: 32\n32    Possible way: 33\n33    Possible way: 34\n34    Possible way: 35\n35    Possible way: 36\n36    Possible way: 37\n37    Possible way: 38\n38    Possible way: 39\n39    Possible way: 40\n40    Possible way: 41\n41    Possible way: 42\n42    Possible way: 43\n43    Possible way: 44\n44    Possible way: 45\n45    Possible way: 46\n46    Possible way: 47\n47    Possible way: 48\n48    Possible way: 49\n49    Possible way: 50\n50    Possible way: 51\n51    Possible way: 52\n52    Possible way: 53\n53    Possible way: 54\n54    Possible way: 55\n55    Possible way: 56\n56    Possible way: 57\n57    Possible way: 58\n58    Possible way: 59\n59    Possible way: 60\n60    Possible way: 61\n61    Possible way: 62\n62    Possible way: 63\n63    Possible way: 64\n64    Possible way: 65\n65    Possible way: 66\n66    Possible way: 67\n67    Possible way: 68\n68    Possible way: 69\n69    Possible way: 70\n70    Possible way: 71\n71    Possible way: 72\n72    Possible way: 73\n73    Possible way: 74\n74    Possible way: 75\n75    Possible way: 76\n76    Possible way: 77\n77    Possible way: 78\n78    Possible way: 79\n79    Possible way: 80\n80    Possible way: 81\n81    Possible way: 82\n82    Possible way: 83\n83    Possible way: 84\n84    Possible way: 85\n85    Possible way: 86\n86    Possible way: 87\n87    Possible way: 88\n88    Possible way: 89\n89    Possible way: 90\n90    Possible way: 91\n91    Possible way: 92\n92    Possible way: 93\n93    Possible way: 94\n94    Possible way: 95\n95    Possible way: 96\n96    Possible way: 97\n97    Possible way: 98\n98    Possible way: 99\n99    Possible way: 100\n100    Possible way: 101\n101    Possible way: 102\n102    Possible way: 103\n103    Possible way: 104\n104    Possible way: 105\n105    Possible way: 106\n106    Possible way: 107\n107    Possible way: 108\n108    Possible way: 109\n109    Possible way: 110\n110    Possible way: 111\n111    Possible way: 112\n112    Possible way: 113\n113    Possible way: 114\n114    Possible way: 115\n115    Possible way: 116\n116    Possible way: 117\n117    Possible way: 118\n118    Possible way: 119\n119    Possible way: 120\n120    Possible way: 121\n121    Possible way: 122\n122    Possible way: 123\n123    Possible way: 124\n124    Possible way: 125\n125    Possible way: 126\n126    Possible way: 127\n127    Possible way: 128\n128    Possible way: 129\n129    Possible way: 130\n130    Possible way: 131\n131    Possible way: 132\n132    Possible way: 133\n133    Possible way: 134\n134    Possible way: 135\n135    Possible way: 136\n136    Possible way: 137\n137    Possible way: 138\n138    Possible way: 139\n139    Possible way: 140\n140    Possible way: 141\n141    Possible way: 142\n142    Possible way: 143\n143    Possible way: 144\n144    Possible way: 145\n145    Possible way: 146\n146    Possible way: 147\n147    Possible way: 148\n148    Possible way: 149\n149    Possible way: 150\n150    Possible way: 151\n151    Possible way: 152\n152    Possible way: 153\n153    Possible way: 154\n154    Possible way: 155\n155    Possible way: 156\n156    Possible way: 157\n157    Possible way: 158\n158    Possible way: 159\n159    Possible way: 160\n160    Possible way: 161\n161    Possible way: 162\n162    Possible way: 163\n163    Possible way: 164\n164    Possible way: 165\n165    Possible way: 166\n166    Possible way: 167\n167    Possible way: 168\n168    Possible way: 169\n169    Possible way: 170\n170    Possible way: 171\n171    Possible way: 172\n172    Possible way: 173\n173    Possible way: 174\n174    Possible way: 175\n175    P"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\nfrom collections import deque\n\nimport sys"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n42 4\\n8 12\") == \"12 42 4\"\nassert solution(\"4\\n126 42 84\\n\") == \"126 42 84\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\\n2\") == \"2 1 2\"\nassert solution(\"2\\n1\\n3\") == \"3 1 2\"\nassert solution(\"3\\n1\\n2\") == \"2 1 3\"\nassert solution(\"3\\n1\\n3\") == \"2 1 3\"\nassert solution(\"3\\n1\\n4\") == \"4 1 3\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3 2 1\"\n\"\"\"\n\nfrom itertools import chain\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4 7 10 12\") == 3\nassert solution(\"-1 2 5 8 11\") == 1\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"1\\n-1 2 5 8 11\") == \"1\\n8\"\nassert solution(\"4\\n1 2 3 4\") == \"4\\n1 2 3 4\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 10 12\") == \"3\"\nassert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7\") == \"1\"\nassert solution(\"2 5 8 11\") == \"1\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4 7 10 12') == '3'\nassert solution('1 2 5 8 11') == '1'\nassert solution('-1 2 5 8 11') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''6\n3 5 4 7 10 12''') == '3\\n7 3 5'\nassert solution('''5\n-1 2 5 8 11''') == '1\\n8'\nassert solution('''5\n-1 -2 -5 -8 -11''') == '1\\n8'"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == '3\\n7 3 5'\nassert solution(\"5\\n-1 2 5 8 11\") == '1\\n8'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3') == '0 2'\n\n---\nIf Aoki has zero cookies, then there are no options.\nIf Aoki has more than zero cookies, then Aoki can either eat one cookie or keep them.\nIn the first case, Takahashi will have one cookie less, and in the second case, he will have the same number of cookies.\nTakahashi has a lot of options, so we can't simulate this.\nWhat if we could sum up Aoki's cookies?\nIf we do it, then we can sum up the cookies and check whether the sum is equal to zero, and then we can give them back in the end.\n\nIf Aoki's cookies are 0, then all the options are trivial.\nIf Aoki's cookies are > 0, then we can add the cookies to see whether the sum is zero.\nIn the end, we must return the numbers of Takahashi's and Aoki's cookies."
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    2 3 3\n    \"\"\"\n    ) == \"0 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nA, B, K = [int(s) for s in input().split(' ')]\nTakahashi = A\nAoki = B\n\nfor _ in range(K):\n    if Takahashi == 0:\n        break\n    Takahashi -= 1\n    if Aoki > 0:\n        Aoki -= 1\n        continue\n    if Aoki == 0:\n        Takahashi += 1\n        break\n    if Aoki > 0:\n        break\n\nprint(Takahashi, Aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nA, B, K = [int(x) for x in input().split(\" \")]\n\nTakahashi = A\nAoki = B\n\nfor _ in range(K):\n    Takahashi, Aoki = (Takahashi - 1) if (Takahashi - 1) >= 0 else 0, (Aoki - 1) if (Aoki - 1) >= 0 else 0\n\nprint(Takahashi, Aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1) == \"1 1\"\nassert solution(2) == \"1 0\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n\ndata = [int(i) for i in sys.stdin.readline().split()]\n\ncounts: Dict[int, int] = {}\nwhile data:\n    val1, val2, val3 = data\n    if val1 not in counts:\n        counts[val1] = 0\n    if val2 not in counts:\n        counts[val2] = 0\n    if val3 not in counts:\n        counts[val3] = 0\n    if val1 in counts:\n        counts[val1] += 1\n    if val2 in counts:\n        counts[val2] += 1\n    if val3 in counts:\n        counts[val3] += 1\n    data = [int(i) for i in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"1 1 1\") == \"0 0\"\nassert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"2 3 1\") == \"0 2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"103\") == '3'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\n\n\"\"\"\n\nfrom typing import List, Iterator\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103') == '3'"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('103') == '3'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '1'\nassert solution('103') == '3'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"1001\") == \"10\"\nassert solution(\"10001\") == \"20\"\n\n\"\"\"\n\nimport math\n\nX = int(input())\n\nyears = 1\nwhile X <= 10001:\n    X += math.floor(X * 0.01)\n    years += 1\n\nprint(years)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n1\\n2\\n') == '9'\n\n'''\n\nimport sys\n\nK = int(sys.stdin.readline())\n\nprint(sum(map(sum, map(sum, map(sum, [map(gcd, range(1, K + 1), range(1, K + 1)),\n                                      range(1, K + 1), range(1, K + 1)]))))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"18\"\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('2\\n1') == 1\nassert solution('3\\n1') == 2\nassert solution('3\\n2') == 3\nassert solution('4\\n1') == 6\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '25'\nassert solution('4') == '6'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '9'\n\"\"\"\nimport sys"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 9\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"45\"\nassert solution(\"4\") == \"121\"\nassert solution(\"5\") == \"6561\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 6\\n\") == \"10\"\n\"\"\"\n\nN = int(input().strip())\nnumbers = [int(c) for c in input().strip().split(\" \")]\nremainder_sum = [0] * N\nfor i in range(N):\n    remainder_sum[i] = sum([pow(num, i + 1, 10 ** 5) for num in numbers])\n\nprint(max(remainder_sum))\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1') == '0'\nassert solution('3\\n4\\n6') == '10'\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nimport sys\n\n\"\"\"\nIn the code below, we are considering a_i \\in [a,b] for all i.\nSo, for any m, we need to consider all a_i \\in [a,b] for all i.\nWe can take it as m \\in [a,b].\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '3\\n3 4 6'\n) == '10'"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nn = int(input())\nnums = [int(x) for x in input().split(\" \")]\n\nd = {}\nfor num in nums:\n    d[num] = num % n\n\nmax_key = max(d.keys())\n\nans = 0\nfor num in nums:\n    ans += num\n    ans = ans % n\n\nprint(ans + max_key)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3 4 6') == '10'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4\"\nassert solution(\"3\\n4 6 9\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n3 4 6''') == 10\n\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 6\\n') == 10\n\"\"\"\nimport sys"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n'''"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n') == 'Yes'\n\"\"\"\n\n\"\"\"\nMemoization\nTak cannot roll three pairs in a row. On the other hand, Tak is able to roll two pairs in a row. \nIt can be seen that Tak can roll three pairs in a row from two pairs in a row if and only if there is another pair in the second roll.\n\nAs a consequence, the problem can be reduced to a problem of the same size with one less roll.\n\nFor every roll, Tak can roll either (1) a pair or (2) three pairs in a row. \nIf Tak rolls a pair, then the probability that he rolls a pair in the next roll is 1/2.\n\nIf Tak rolls three pairs in a row, then the probability that he rolls three pairs in a row in the next roll is 1/4.\n\nWith these two probabilities, the problem can be solved recursively.\n\nTo memoize the results, we can use a 3D array.\n\nThe first dimension corresponds to the number of rolls (i.e., N).\nThe second dimension corresponds to the number of pairs (i.e., 3).\nThe third dimension corresponds to the values of the pairs (i.e., 1 and 2).\n\nThe value of the array can be either True or False.\nA True value indicates that Tak can roll three pairs in a row from two pairs in a row.\nA False value indicates that Tak cannot roll three pairs in a row from two pairs in a row.\n\nThe base cases are:\n\nTak cannot roll three pairs in a row on the first roll (i.e., on the second roll).\nTak can roll three pairs in a row on the first roll (i.e., on the third roll)."
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1]).readlines()\nassert len(lines) == int(lines[0])\n\nprev = None\ndoublet = False\ncount = 0\nfor line in lines[1:]:\n    dice1, dice2 = line.split()\n    dice1, dice2 = int(dice1), int(dice2)\n    if prev and dice1 == dice2:\n        doublet = True\n    if doublet and count == 3:\n        break\n    else:\n        prev = dice1\n        count = 0\n    count += 1"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\nassert solution('5\\n3 3\\n2 2\\n2 2\\n1 1') == 'No'\nassert solution('5\\n6 6\\n4 4\\n3 3\\n3 3') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\nassert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\n'''"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 4\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == 4\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '4'\nprint('Test succeeded')\n\nSolution:\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '4'\nassert solution('3\\n') == '9'\nassert solution('4\\n') == '16'\nassert solution('5\\n') == '25'\nassert solution('6\\n') == '36'\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '4'\nprint('Success')\n\n-----\n\nGiven is a string with alphanumeric characters, for example:\n\"01a2b3c4d5e6\"\n\nWrite a program that will print the index of the first character of the second half of the string.\nThe second half of the string will be at least half the length of the initial string.\n\n-----Constraints-----\n - \"0\" \\leq string \\leq 10000\n - First character of the second half of the string is unique (i.e. string.index(string[1]) gives the first occurrence of the character).\n\n-----Input-----\nInput is given from Standard Input in the following format:\n01a2b3c4d5e6\n\n-----Output-----\nPrint the index of the first character of the second half of the string.\n\n-----Sample Input-----\n01a2b3c4d5e6\n\n-----Sample Output-----\n4\nThe second half of the string is \"c4d5e6\" and its length is 5.\nThe index of the first character of the second half is 4.\nprint(''.join([i for i in string[0::2]]).index(string[1]))"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n3 8 5 1''') == 'Yes'\nassert solution('''4\n3 8 5 1''') == 'No'\nassert solution('''3\n3 8 5 1''') == 'Yes'\nassert solution('''3\n3 8 5 1''') == 'Yes'\nassert solution('''4\n3 8 5 1''') == 'No'\n'''\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n8 3 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"4\\n3 8 5 1\") == \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\\n\") == \"Yes\"\nassert solution(\"2\\n6 10 5 2\\n\") == \"No\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'Yes'\nassert solution('4 8 5 1') == 'Yes'\nassert solution('6 2 3 4 1') == 'No'\nassert solution('3 8 5 1') == 'No'\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\"\"\"\n\nN = int(input())\n\nL = list(map(int, input().split()))\n\nprint(\"Yes\" if L[0] < sum(L[1:]) else \"No\")\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('5\\n2 2 2 1 2') == 'No'\nassert solution('4\\n4 6 1 2') == 'Yes'\nassert solution('2\\n2 2') == 'Yes'\nassert solution('1\\n1 1') == 'Yes'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 7\") == 702\nassert solution(\"3 2\") == 702\nassert solution(\"1 7\") == -1"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\\n\") == \"702\"\n\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\nassert solution(\"2 2\\n1 9\\n0 1\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\\n4 6\\n\") == \"702\"\n\"\"\"\n\nN, M = [int(i) for i in stdin.split()]\ns, c = [], []\nfor _ in range(N):\n    s.append(int(i) for i in stdin.split())\n    c.append(int(i) for i in stdin.split())\n\nfor i in range(N):\n    if s[i] > 0 and c[i] > 0:\n        pass\n    else:\n        print(-1)\n        exit(0)\n    for j in range(M):\n        if s[i] == c[j]:\n            print(s[i] * 10 ** (M - j - 1))\n            exit(0)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == 9\n\"\"\"\n\nn, k = map(int, input().split())\ncount = 0\nfor a in range(1, n):\n    for b in range(1, n):\n        for c in range(1, n):\n            if not (a + b) % k:\n                if not (b + c) % k:\n                    if not (c + a) % k:\n                        count += 1\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 3') == '9'\nassert solution('1 5') == '25'\nassert solution('2 10') == '22'\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '9'\nprint('Test Successful')\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n3\\n2\\n1\\n2\\n3') == '9'\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '7'\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '9'\nassert solution('4 4') == '18'\nassert solution('2 3') == '3'\nassert solution('3 3') == '2'\n\n'''"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"9\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"10 5\") == \"24\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"9\"\n\n\"\"\"\n\nfrom math import ceil\n\nn, k = map(int, stdin.readline().split())\nprint(ceil(n / k) * ceil((n - k) / k) * k)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\nprint(sum([1 for a in range(n // 2 + 1) if k % a == 0 and k // a in range(n // 2 + 1)]))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"1 2\\n\") == \"0\"\nassert solution(\"3 2\\n\") == \"9\"\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '10'\nassert solution('4') == '100'\nassert solution('9') == '1001'\nassert solution('10') == '1010'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1011') == '-9'\nassert solution('100010') == '-7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\nimport math\n\nnumber = int(input())\n\nbinary_number = ''\ncurrent_number = number\nwhile current_number > 0:\n    remainder = math.floor(current_number % -2)\n    current_number = int(current_number / -2)\n    binary_number += str(remainder)\n\nprint(binary_number[::-1])\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nN = int(stdin.readlines()[0])"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1010\"\nassert solution(\"-1\") == \"1111111111101010\"\nassert solution(\"-9\") == \"1011\"\n\"\"\"\n\n\"\"\"\nGiven an integer N, find the base -2 representation of N.\nHere, S is the base -2 representation of N when the following are all satisfied:\n - S is a string consisting of 0 and 1.\n - Unless S = 0, the initial character of S is 1.\n - Let S = S_k S_{k-1}... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 +... + S_k \\times (-2)^k = N.\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\n-----Constraints-----\n - Every value in input is integer.\n - -10^9 \\leq N \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the base -2 representation of N.\n\n-----Sample Input-----\n-9\n\n-----Sample Output-----\n1011\n\nAs (-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9, 1011 is the base -2 representation of -9.\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\n\"\"\"\nGiven an integer N, find the base -2 representation of N.\n\nHere, S is the base -2 representation of N when the following are all satisfied:\n - S is a string consisting of 0 and 1.\n - Unless S = 0, the initial character of S is 1.\n - Let S = S_k S_{k-1}... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 +... + S_k \\times (-2)^k = N.\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\n-----Constraints-----\n - Every value in input is integer.\n - -10^9 \\leq N \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the base -2 representation of N.\n\n-----Sample Input-----\n-9\n\n-----Sample Output-----\n1011\n\nAs (-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9, 1011 is the base -2 representation of -9.\n\"\"\"\n\n\"\"\"\nGiven an integer N, find the base -2 representation of N.\n\nHere, S is the base -2 representation of N when the following are all satisfied:\n - S is a string consisting of 0 and 1.\n - Unless S = 0, the initial character of S is 1.\n - Let S = S_k S_{k-1}... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 +... + S_k \\times (-2)^k = N.\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n\n-----Constraints-----\n - Every value in input is integer.\n - -10^9 \\leq N \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the base -2 representation of N.\n\n-----Sample Input-----\n-9\n\n-----Sample Output-----\n1011\n\nAs (-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9, 1011 is the base -2 representation of -9.\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n3 2\\n1 2\\n3 2\\n5 2\") == \"8\"\nassert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 5\n4 9\n2 4''') == '12'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 5\n4 9\n2 4''') == '12'\n'''\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n2 4\\n1 3\\n2 3') == '12'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 5\n4 9\n2 4''') == '12'\nprint('tests passed')\n\n-----Solution-----\nn, m = [int(x) for x in stdin.splitlines()]\nans = []\nfor _ in range(n):\n    a, b = [int(x) for x in stdin.splitlines()]\n    ans.append(str(min(m, a * b)))\nprint('\\n'.join(ans))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\"\"\"\n\nimport sys\n\nN, M = [int(x) for x in sys.stdin.readline().split()]\n\nmoney = 10 ** 9\n\nfor i in range(N):\n    A, B = [int(x) for x in sys.stdin.readline().split()]\n    if A * M > money:\n        money = A * M\n    money += B * M\n    money = min(money, M * N)\n\nprint(money)"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"2 5\", \"4 9\", \"2 4\"]) == \"12\"\nassert solution([\"2 5\", \"4 9\"]) == \"12\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4 8 7 3\") == \"2\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\n\"\"\"\nYou are standing at position 0 on an infinite number line. There is a goal at position target.\n\nOn each step, you can either go left or right. During the n-th step (starting from 1), you take n steps.\n\nReturn the minimum number of steps required to reach the destination.\n\n-----Constraints-----\n1 \\leq target \\leq 10^9\n\n-----Input-----\nThe first line contains a single integer t (1 \\leq t \\leq 10^5) \u2014 the number of test cases.\n\nThe only line of each test case contains a single integer target (1 \\leq target \\leq 10^9).\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum number of steps.\n\n-----Sample Input-----\n4\n1\n3\n6\n12\n\n-----Sample Output-----\n0\n2\n3\n5\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('10') == 1\nassert solution('10 10') == 1\nassert solution('3 3 3') == 0\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n10 4 8 7 3''') == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 4 8 7 3\") == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2\\n3\") == \"1\"\nassert solution(\"3\\n1\\n2\\n3\\n10\\n8\\n7\\n6\\n5\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"9\"\nassert solution(\"3\\n10\\n8\\n7\\n3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1\"\n\nassert solution(\"5 3\") == \"2\"\n\nassert solution(\"5 3\") == \"2\"\n\nassert solution(\"5 3\") == \"2\"\n\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 2 4 5\\n') == '1'\nassert solution('5 3\\n1 2 3 4 5\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5') == '2'\nassert solution('5 3\\n1 2 3 3 3') == '0'\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\nnumbers = [int(i) for i in input().split()]\n\ncount = 0\nfor i in numbers:\n    count += i // 2\n\nprint(count - k)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"6 3\\n1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"1\"\nassert solution(\"4 3\\n1 1 1 1\") == \"0\"\nassert solution(\"5 3\\n1 2 2 4 5\") == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\n\"\"\"\n\nfrom math import floor\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == 1\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 4 5\", 3) == 1\nassert solution(\"1 2 3 4 5\", 3) == 2\nassert solution(\"1 2 3 3 3\", 3) == 0\n\nimport math"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\nassert solution(\"1 2 2 3 2 3\") == 2\nassert solution(\"3 3 2 1 1 1 3\") == 4\n\n\n\"\"\"\n\n\"\"\"\n\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $a$. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $k$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $a_1, a_2, \\dots, a_n$, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n6 5\n1 2 2 4 2 3\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430:\n\n3 3 2 1 1 1 3\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0442\u0432\u0435\u0442\u0430:\n\n4\n\"\"\"\n\n\"\"\"\n\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\n\n\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 next_permutation \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f itertools.\n\n\u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435:\nhttps://pyneng.readthedocs.io/ru/latest/book/26_permutations_and_combinations/advanced_perms_and_combs_with_itertools.html\n\n\u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c, \u0447\u0442\u043e \u0432 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u0430 \u00ab\u043c\u0435\u043d\u044c\u0448\u0435\u00bb (\u00ab\u043c\u0435\u043d\u044c\u0448\u0438\u0439\u00bb) \u0438 \u00ab\u0431\u043e\u043b\u044c\u0448\u0435\u00bb (\u00ab\u0431\u043e\u043b\u044c\u0448\u043e\u0439\u00bb).\n\n\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043c\u043e\u0434\u0443\u043b\u0435 itertools \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0441\u0430\u0439\u0442\u0435:\nhttps://docs.python.org/3/library/itertools.html\n\n\u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442: \u0444\u0443\u043d\u043a\u0446\u0438\u0438 next_permutation \u0438 prev_permutation \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0438, \u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0438.\n\n\u0412 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e permutations, \u043f\u043e\u0434 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430.\n\n\u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\n\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e next_permutation, \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u043d\u0435\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n\n>>> from itertools import permutations\n>>> permutations('1 2 3')\n<itertools.permutations object at 0x1022f4f50>\n>>> list(permutations('1 2 3'))\n[('1', '2', '3'), ('1', '3', '2'), ('2', '1', '3'), ('2', '3', '1'), ('3', '1', '2'), ('3', '2', '1')]\n>>> list(permutations('1 2 3', 2))\n[('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]\n\n\u041f\u043e\u043b\u0443\u0447\u0438\u0432 \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u0443\u044e. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"7 5\") == \"4\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\nassert solution(\"6 5\") == \"5\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5\\n1 2 2 4 2 3\") == \"3\"\nassert solution(\"7 5\\n3 3 2 1 1 1 3\") == \"4\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\nassert solution('7 5\\n3 3 2 1 1 1 3') == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 2 2 4 2 3\") == 3\nassert solution(\"3 5\\n1 2 2 3 4\") == 4\nassert solution(\"3 5\\n1 2 3 4\") == -1\nassert solution(\"3 5\\n4 4 3 2 1\") == 3\nassert solution(\"4 7\\n1 1 1 1 1 1 1 1\") == -1\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3') == '1'\nassert solution('2 1') == '0'\nassert solution('4 4') == '-1'\nassert solution('7 4') == '4'\nassert solution('7 6') == '2'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 2 4 2 3\\n3 3 2 1 1 1 3') == 3\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n4 5 6') == '10'\nassert solution('5 4 1\\n3 4 2\\n1 2 1\\n1 2 1\\n1 2 1\\n1 2 1') == '9'\nassert solution('4 4 1\\n4 2 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '0'\nassert solution('1 1 1\\n1 1 1') == '0'\nassert solution('1 2 3\\n2 3 1\\n1 2 1\\n1 2 1') == '9'\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10\\n9\\n1000\\n42000000000000'\n\n\"\"\"\n\n\nfrom typing import Callable, List\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88''') == '''10\n9\n1000\n42000000000000'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\nimport sys"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nimport sys\nimport numpy as np\n\nclass Solution:\n    # @param A : integer\n    # @param B : integer\n    # @param C : integer\n    # @param D : integer\n    # @return an integer\n    def solve(self, a, b, c, d):\n        d = np.minimum(d, np.minimum(a, b))\n        ans = 0\n        ans += np.count_nonzero(d)\n        while c * ans <= d * np.floor(d / c):\n            ans += 1\n        return ans"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nfrom math import inf\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nq = int(input())\na.sort()\nb.sort()\n\ndp = [[inf for _ in range(len(a)+1)] for _ in range(len(b)+1)]\ndp[0][0] = 0\n\nfor i in range(1, len(a) + 1):\n    dp[0][i] = a[i-1]\nfor i in range(1, len(b) + 1):\n    dp[i][0] = b[i-1]\n\nfor i in range(1, len(a) + 1):\n    for j in range(1, len(b) + 1):\n        dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + a[i-1]\n\nfor _ in range(q):\n    n_i, a_i, b_i = [int(i) for i in input().split()]\n    ans = dp[b_i][n_i] - dp[a_i - 1][n_i]\n    print(ans)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\nassert solution(\"1 1000000000\\n1 1000000000\") == \"1\"\nassert solution(\"2 6\\n5 10 4\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n3 4 5') == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n3 4 5') == 2\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 6\n3 4 5''') == 2\n\n---\n\nn, x = list(map(int, stdin.split()))\nprint(sum(1 for i in range(n+1) if i <= x and x <= sum(i for i in range(n+1) if i < x)))\n\n---\n\nimport sys\nn, x = list(map(int, sys.stdin.readline().split()))\nprint(sum(1 for i in range(n+1) if i <= x and x <= sum(i for i in range(n+1) if i < x)))"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\nassert solution('5\\nhoge\\nenglish\\nhoge\\nhoge\\nenigma') == 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n4\nhoge\nenglish\nhoge\nenigma\n''') == 'No'\nassert solution('''\n5\nhoge\nenglish\nhoge\nhoge\nhoge\n''') == 'Yes'\n'''\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == 'Yes'\n\n-----\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\nfrom typing import Dict, List\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\n\nimport sys\n\nn = int(input())\n\nw = dict()\n\nfor i in range(n):\n    word = input()\n    if word in w:\n        w[word] += 1\n    else:\n        w[word] = 1\n\nfor i in range(n - 1):\n    word = input()\n    if w[word] > 1:\n        if word[0] == w[word[:-1]][-1]:\n            w[word] -= 1\n        else:\n            print('No')\n            sys.exit()\n\nprint('Yes')\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == '6'\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n') == 6\n\"\"\"\n\na, b = [int(i) for i in input().split()]\nprint(2*(a+b))"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A, B) == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == 6\nassert solution(\"3 4\") == 6\nassert solution(\"1 5\") == 5\nassert solution(\"3 4\") == 5\nassert solution(\"2 5\") == 8\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n\na, b = [int(c) for c in input().split()]"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"4\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 5\") == \"2\"\n\"\"\"\n\nA, B = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"10 9\") == \"18\"\nassert solution(\"3 7\") == \"4\"\nassert solution(\"3 7\") == \"4\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3''') == '6'"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 3\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n') == '6'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == x\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n\nfrom unittest.mock import patch\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\nassert solution(\"4\\n1 2 3 4\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\nassert solution(\"1 1 1 1 3\") == \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\nassert solution(\"1 2 1 1 4\") == \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 1 1 3\\n') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n1\\n1\\n3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 1 1 3''') == 'Yes'\n\nassert solution('''4\n1 1 1 1''') == 'No'\n\nassert solution('''2\n1 1''') == 'No'\n\nassert solution('''3\n3 3 3''') == 'Yes'\n\nassert solution('''2\n3 2''') == 'No'"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n3\\n5\\n2\\n1\\n4\\n\") == \"Yes\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n\") == \"1\"\n\"\"\"\n\nn, m, c = map(int, stdin.split())\n\nb = list(map(int, stdin.split()[1:]))\na = []\n\nfor _ in range(n):\n    a.append(list(map(int, stdin.split()[1:])))"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 -10\\n1 2 3\\n3 2 1') == 1\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == 1\n\"\"\"\n\nn, m, c = list(map(int, input().split()))\nb = list(map(int, input().split()))\na = [list(map(int, input().split())) for _ in range(n)]\n\ncnt = 0\nfor i in range(n):\n    a_sum = 0\n    for j in range(m):\n        a_sum += a[i][j] * b[j]\n    if a_sum + c > 0:\n        cnt += 1\nprint(cnt)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1') == 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\") == \"1\"\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''N\n''') == '100'\nassert solution('''N\n''') == '100'\n'''\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(TEST_CASE)) == str(EXPECTED_CODE)\nprint(str(TEST_CASE), str(EXPECTED_CODE))\n\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == \"1\"\nassert solution(\"2000\") == \"2\"\nassert solution(\"3000\") == \"3\"\nassert solution(\"4000\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"100\"\nassert solution(\"200\") == \"200\"\nassert solution(\"500\") == \"500\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"2000\") == \"2000\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1900) == 100\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nchange = 0\n\nwhile N >= 1000:\n    change += 1\n    N -= 1000\n\nprint(change + N)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('12') == '12'\nassert solution('1001') == '0'\n'''\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == 1\nassert solution(\"101\") == 0\nassert solution(\"2000\") == 1\nassert solution(\"5000\") == 3\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1900') == 100\nassert solution('20') == 0\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 2\nassert solution('1900') == 2\nassert solution('25') == 3\n\"\"\"\n\nn = int(input())\nm = 1000\n\nans = 0\nwhile m <= n:\n    n -= m\n    ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\nassert solution('2\\n3 5 2\\n5 1') == '7'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n3') == '3'\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split(' ')))\nB = list(map(int, input().split(' ')))"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2\n3 5 2\n4 5\n''') == '9'\nassert solution('''\n2\n3 5 2\n4 5\n''') == '9'\n'''"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 2\\n4 5') == '9'\nassert solution('3 5 2\\n4 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n4 5') == '9'\n\n\"\"\"\nimport sys\nimport heapq\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2\\n4 5') == '9'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\n\"\"\"\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split(\" \")))\nB = list(map(int, sys.stdin.readline().split(\" \")))\n\nx = 0\nz = 1\nfor i in range(n):\n    x += A[i]\n    z *= A[i]\n\ny = 1\nfor j in range(n):\n    y *= B[j]\n\nprint(z-x*y)\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 6 9') == 'No War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"2 2 -1 -1\\n1 1\\n-1 -1\") == \"War\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == 'No War'\nassert solution(\"3 2 10 20\\n8 15 13\\n21 22\\n\") == 'War'\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nThere is a obvious solution to this problem.\n\nThe idea is to check if we can build a free range of coordinates between the two empires.\n\nFor example, let's check if we can build a range for the empire A, starting from X and ending at Y.\n\nThe conditions we need to check are the following:\n - X < Z \\leq Y\n - x_1, x_2,..., x_N < Z\n - y_1, y_2,..., y_M \\geq Z\n\nIf all conditions are satisfied, we can claim that the range X < Z \\leq Y is free and does not conflict with the two empires.\n\nNow, we will use the same approach for the empire B.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == \"No War\"\n\n\"\"\"\n\nfrom math import gcd\n\nN, M, X, Y = [int(c) for c in stdin.split('\\n')[0].split(' ')]\n\nx = [int(c) for c in stdin.split('\\n')[1].split(' ')]\ny = [int(c) for c in stdin.split('\\n')[2].split(' ')]\n\ngcd_numbers = gcd(X, Y)\n\nnumbers_dict = {}\n\nfor number in x:\n    if number in numbers_dict.keys():\n        numbers_dict[number] += 1\n    else:\n        numbers_dict[number] = 1\n\nfor number in y:\n    if number in numbers_dict.keys():\n        numbers_dict[number] -= 1\n    else:\n        numbers_dict[number] = -1\n\nfor key, value in numbers_dict.items():\n    if value!= 0:\n        print('War')\n        break\nelse:\n    print('No War')\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\nimport sys\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 10 20\n8 15 13\n16 22\n''') == 'No War'\nassert solution('''\n3 2 10 20\n8 15 13\n17 22\n''') == 'War'"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 2 10 20\n8 15 13\n16 22\n\"\"\") == 'No War'\nassert solution(\n\"\"\"\n2 2 1 1\n2 2\n\"\"\") == 'War'\nassert solution(\n\"\"\"\n2 2 10 20\n8 15 13\n16 22\n\"\"\") == 'War'\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n\n-----\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations\nfrom functools import reduce\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\"\n\nn = int(input())\nt = [int(x) for x in input().split()]\n\nres = 0\nfor i in range(n):\n    res += 360 * (i + 1) - t[i]\nprint(res)\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3') == '6'\nassert solution('2 2') == '4'\nassert solution('3 5 2') == '12'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2\\n\") == \"6\"\n\nprint(\"Hooray!\")\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2\\n3') == '6'\n\nassert solution('3\\n1\\n2') == '5'\n\nassert solution('2\\n10\\n30') == '3660'\n\nassert solution('2\\n1\\n2') == '5'\n\nassert solution('3\\n1\\n2') == '5'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3\\n6') == '6'\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n3\\n6\\n9\\n12\\n16\\n18\\n23\\n25\\n28\\n31\\n34\\n37\\n41\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n71\\n74\\n77\\n81\\n84\\n87\\n90\\n93\\n96\\n99\\n1012\\n105\\n108\\n111\\n114\\n117\\n120\\n123\\n126\\n129\\n132\\n135\\n138\\n141\\n144\\n147\\n150\\n153\\n156\\n159\\n162\\n165\\n168\\n171\\n174\\n177\\n180\\n183\\n186\\n189\\n192\\n195\\n198\\n201\\n204\\n207\\n210\\n213\\n216\\n219\\n222\\n225\\n228\\n231\\n234\\n237\\n240\\n243\\n246\\n249\\n252\\n255\\n258\\n261\\n264\\n267\\n270\\n273\\n276\\n279\\n282\\n285\\n288\\n291\\n294\\n297\\n300\\n303\\n306\\n309\\n312\\n315\\n318\\n321\\n324\\n327\\n330\\n333\\n336\\n339\\n342\\n345\\n348\\n351\\n354\\n357\\n360\\n363\\n366\\n369\\n372\\n375\\n378\\n381\\n384\\n387\\n390\\n393\\n396\\n399\") == \"6\"\nassert solution(\"2\\n2\\n3\\n6\\n9\\n12\\n16\\n18\\n23\\n25\\n28\\n31\\n34\\n37\\n41\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n71\\n74\\n77\\n81\\n84\\n87\\n90\\n93\\n96\\n99\\n1012\\n105\\n108\\n111\\n114\\n117\\n120\\n123\\n126\\n129\\n132\\n135\\n138\\n141\\n144\\n147\\n150\\n153\\n156\\n159\\n162\\n165\\n168\\n171\\n174\\n177\\n180\\n183\\n186\\n189\\n192\\n195\\n198\\n201\\n204\\n207\\n210\\n213\\n216\\n219\\n222\\n225\\n228\\n231\\n234\\n237\\n240\\n243\\n246\\n249\\n252\\n255\\n258\\n261\\n264\\n267\\n270\\n273\\n276\\n279\\n282\\n285\\n288\\n291\\n294\\n297\\n300\\n303\\n306\\n309\\n312\\n315\\n318\\n321\\n324\\n327\\n330\\n333\\n336\\n339\\n342\\n345\\n348\\n351\\n354\\n357\\n360\\n363\\n366\\n369\\n372\\n375\\n378\\n381\\n384\\n387\\n390\\n393\\n396\\n399\") == \"6\"\nassert solution(\"3\\n3\\n4\\n6\\n9\\n12\\n16\\n18\\n23\\n25\\n28\\n31\\n34\\n37\\n41\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n71\\n74\\n77\\n81\\n84\\n87\\n90\\n93\\n96\\n99\\n1012\\n105\\n108\\n111\\n114\\n117\\n120\\n123\\n126\\n129\\n132\\n135\\n138\\n141\\n144\\n147\\n150\\n153\\n156\\n159\\n162\\n165\\n168\\n171\\n174\\n177\\n180\\n183\\n186\\n189\\n192\\n195\\n198\\n201\\n204\\n207\\n210\\n213\\n216\\n219\\n222\\n225\\n228\\n231\\n234\\n237\\n240\\n243\\n246\\n249\\n252\\n255\\n258\\n261\\n264\\n267\\n270\\n273\\n276\\n279\\n282\\n285\\n288\\n291\\n294\\n297\\n300\\n303\\n306\\n309\\n312\\n315\\n318\\n321\\n324\\n327\\n330\\n333\\n336\\n339\\n342\\n345\\n348\\n351\\n354\\n357\\n360\\n363\\n366\\n369\\n372\\n375\\n378\\n381\\n384\\n387\\n390\\n393\\n396\\n399\") == \"9\"\nassert solution(\"5\\n2\\n3\\n6\\n9\\n12\\n16\\n18\\n23\\n25\\n28\\n31\\n34\\n37\\n41\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n71\\n74\\n77\\n81\\n84\\n87\\n90\\n93\\n96\\n99\\n1012\\n105\\n108\\n111\\n114\\n117\\n120\\n123\\n126\\n129\\n132\\n135\\n138\\n141\\n144\\n147\\n150\\n153\\n156\\n159\\n162\\n165\\n168\\n171\\n174\\n177\\n180\\n183\\n186\\n189\\n192\\n195\\n198\\n201\\n204\\n207\\n210\\n213\\n216\\n219\\n222\\n225\\n228\\n231\\n234\\n237\\n240\\n243\\n246\\n249\\n252\\n255\\n258\\n261\\n264\\n267\\n270\\n273\\n276\\n279\\n282\\n285\\n288\\n291\\n294\\n297\\n300\\n303\\n306\\n309\\n312\\n315\\n318\\n321\\n324\\n327\\n330\\n333\\n336\\n339\\n342\\n345\\n348\\n351\\n354\\n357\\n360\\n363\\n366\\n369\\n372\\n375\\n378\\n381\\n384\\n387\\n390\\n393\\n396\\n399\") == \"8\"\nassert solution(\"3\\n2\\n3\\n6\\n9\\n12\\n16\\n18\\n23\\n25\\n28\\n31\\n34\\n37\\n41\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n71\\n74\\n77\\n81\\n84\\n87\\n90\\n93\\n96\\"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"1\\n5\\n8\") == \"19\"\nassert solution(\"5\\n1\\n5\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\\n3\\n\") == \"6\"\nassert solution(\"4\\n2\\n3\\n\") == \"6\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n\") == \"6\"\nassert solution(\"2\\n2\\n\") == \"0\"\nassert solution(\"1\\n2\\n\") == \"2\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n\") == \"9\"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n\") == \"9\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 2 3') == '0'\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == 0\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3''') == '0'\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\nfrom typing import List\n\n\"\"\"\n\ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uc218\uac00 \ub9ce\uc744 \uacbd\uc6b0 \ud30c\uc774\uc36c\uc758 \ud1b5\uacfc\uc2dc\uac04\uc774 \ucd5c\ub300\uce58\ub85c \uc99d\uac00\ud55c\ub2e4.\n\uadf8\ub798\uc11c \uc774 \ud504\ub85c\uadf8\ub7a8\uc758 \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 O(N^2)\uc774\ub2e4.\n\"\"\"\n\nN = int(input())\nweights = list(map(int, input().split()))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == 0\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n\") == 0\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '0'\nassert solution('3\\n1 2 3\\n') == '0'\n\n----Test Case ----\nInput:\n3\n1 2 3\n\nOutput:\n0\n\nInput:\n4\n1 2 3 4\n\nOutput:\n2\n\nInput:\n4\n1 2 3 4\n\nOutput:\n0\n\n----Solution----\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3\\n1 2 3'\n) == '0'\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n\") == \"6\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"0\"\nassert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == '6'\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == '0'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '0'\n\"\"\"\n\nfrom collections import deque\nfrom typing import Dict, Deque, Tuple\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque\nfrom itertools import chain, zip_longest\nfrom math import gcd\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\n\nassert solution('2\\n1 100') == '99'"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 2 3 14 5\") == \"5\"\nassert solution(\"1 100\") == \"99\"\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 2 3 14 5\") == 5\n\"\"\"\nfrom collections import Counter\nfrom math import ceil\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data.strip()) == test_data.strip()\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == '5'\nassert solution(\"2\\n1 100\") == '99'\n\"\"\"\n\nn = int(input())\nstudents = list(map(int, input().split()))\n\nprint((sum(students) - n + 1) // 2)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1 0 1 0 1\") == 2\nassert solution(\"1 0 1 1 1 0\") == 2\nassert solution(\"0 0 0\") == 0\nassert solution(\"0 0 0 1 0 1 1 1 1\") == 0\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == '2'\nassert solution(\"6\\n0 1 0 1 1 0\") == '2'\nassert solution(\"7\\n1 0 1 1 1 0 1\") == '3'\nassert solution(\"3\\n0 0 0\") == '0'"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 0 1 1 1 0 1\\n\") == \"2\"\nassert solution(\"5\\n1 0 1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"7\\n1 0 1 1 1 0 1 1\\n\") == \"3\"\nassert solution(\"7\\n0 1 0 1 1 0 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\"\"\"\nfrom typing import List, Dict\n\n\"\"\"\nA day consists of n hours. If Polycarp rest, then he will not work that hour. \nLet's suppose that the number of rest hours is less than the number of hours on the day, then he can work n - rest hours. \nIf he works n - rest hours, then he can work n - (n - rest) hours. \nFor example, if n = 5 and rest = 2, then Polycarp can work 3 hours on the day, if he rest 1 hour, then he can work 2 hours in the next day, \n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '5\\n1 0 1 0 1\\n') == '2'\nassert solution(\n    '6\\n0 1 0 1 1 0\\n') == '2'\nassert solution(\n    '7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution(\n    '3\\n0 0 0\\n') == '0'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\n\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"7\") == \"0\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"4\") == 4\nassert solution(\"6\") == 6\nassert solution(\"8\") == 8\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == 0\n\"\"\"\nimport sys\nimport math\nimport resource\n\nsys.setrecursionlimit(1000000)\nresource.setrlimit(resource.RLIMIT_STACK, (2 ** 29, 2 ** 29))\n\ncache = {}\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"7\") == 0\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == 0\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 1\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\n\n'''\n\nimport math\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n\"\n+ \"brie soft\\n\"\n+ \"camembert soft\\n\"\n+ \"feta soft\\n\"\n+ \"goat soft\\n\"\n+ \"muenster soft\\n\"\n+ \"asiago hard\\n\"\n+ \"cheddar hard\\n\"\n+ \"gouda hard\\n\"\n+ \"swiss hard\\n\") == \"3\"\nassert solution(\"6\\n\"\n+ \"parmesan hard\\n\"\n+ \"emmental hard\\n\"\n+ \"edam hard\\n\"\n+ \"colby hard\\n\"\n+ \"gruyere hard\\n\"\n+ \"asiago hard\\n\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input) == sample_output"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nassert solution(\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\\n\") == \"4\"\nprint(solution(stdin))\n\n\"\"\"\n\nclass Solution:\n\n    def solution(self, stdin: str) -> str:\n\n        cheese = [line.split(' ') for line in stdin.split('\\n')]\n        cheese_names = set(cheese[0])\n        cheese_hard = [i for i in cheese[1:] if i[1] == 'hard']\n        cheese_soft = [i for i in cheese[1:] if i[1] =='soft']\n        cheese_num = len(cheese_hard) + len(cheese_soft)\n\n        cheese_names = {cheese[0][0]:cheese[0][1]}\n        for i in cheese[1:]:\n            cheese_names[i[0]] = cheese_names[i[0]] +'' + i[1]\n\n        cheese_names = sorted(cheese_names.items(), key=lambda x:x[0])\n        cheese_names = [cheese_names[i][1] for i in range(len(cheese_names))]\n\n        cheese_hard = sorted(cheese_hard, key=lambda x:cheese_names.index(x[0]))\n        cheese_soft = sorted(cheese_soft, key=lambda x:cheese_names.index(x[0]))\n\n        cheese_hard = [cheese_hard[i][0] for i in range(len(cheese_hard))]\n        cheese_soft = [cheese_soft[i][0] for i in range(len(cheese_soft))]\n\n        cheese_list = []\n        cheese_list.extend(cheese_hard)\n        cheese_list.extend(cheese_soft)\n\n        cheese_list = [cheese_list[i:i+5] for i in range(0, len(cheese_list), 5)]\n        cheese_list = [len(cheese_list[i]) for i in range(len(cheese_list))]\n        cheese_list = sum(cheese_list)\n\n        return cheese_num"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n') == '4'\nassert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\") == \"3\"\nassert solution(\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\") == \"4\"\n\n[Image]\n\n[Note]\n\nprint(\"{:.3f}\".format(1.0))\nprint(\"{:.3f}\".format(1.01))\nprint(\"{:.3f}\".format(1.09))\nprint(\"{:.3f}\".format(1.1))\nprint(\"{:.3f}\".format(1.11))\nprint(\"{:.3f}\".format(1.12))\nprint(\"{:.3f}\".format(1.13))\nprint(\"{:.3f}\".format(1.14))\nprint(\"{:.3f}\".format(1.15))\nprint(\"{:.3f}\".format(1.16))\nprint(\"{:.3f}\".format(1.17))\nprint(\"{:.3f}\".format(1.18))\nprint(\"{:.3f}\".format(1.19))\nprint(\"{:.3f}\".format(1.2))\nprint(\"{:.3f}\".format(1.21))\nprint(\"{:.3f}\".format(1.22))\nprint(\"{:.3f}\".format(1.23))\nprint(\"{:.3f}\".format(1.24))\nprint(\"{:.3f}\".format(1.25))\nprint(\"{:.3f}\".format(1.26))\nprint(\"{:.3f}\".format(1.27))\nprint(\"{:.3f}\".format(1.28))\nprint(\"{:.3f}\".format(1.29))\nprint(\"{:.3f}\".format(1.3))\nprint(\"{:.3f}\".format(1.31))\nprint(\"{:.3f}\".format(1.32))\nprint(\"{:.3f}\".format(1.33))\nprint(\"{:.3f}\".format(1.34))\nprint(\"{:.3f}\".format(1.35))\nprint(\"{:.3f}\".format(1.36))\nprint(\"{:.3f}\".format(1.37))\nprint(\"{:.3f}\".format(1.38))\nprint(\"{:.3f}\".format(1.39))\nprint(\"{:.3f}\".format(1.4))\nprint(\"{:.3f}\".format(1.41))\nprint(\"{:.3f}\".format(1.42))\nprint(\"{:.3f}\".format(1.43))\nprint(\"{:.3f}\".format(1.44))\nprint(\"{:.3f}\".format(1.45))\nprint(\"{:.3f}\".format(1.46))\nprint(\"{:.3f}\".format(1.47))\nprint(\"{:.3f}\".format(1.48))\nprint(\"{:.3f}\".format(1.49))\nprint(\"{:.3f}\".format(1.5))\nprint(\"{:.3f}\".format(1.51))\nprint(\"{:.3f}\".format(1.52))\nprint(\"{:.3f}\".format(1.53))\nprint(\"{:.3f}\".format(1.54))\nprint(\"{:.3f}\".format(1.55))\nprint(\"{:.3f}\".format(1.56))\nprint(\"{:.3f}\".format(1.57))\nprint(\"{:.3f}\".format(1.58))\nprint(\"{:.3f}\".format(1.59))\nprint(\"{:.3f}\".format(1.6))\nprint(\"{:.3f}\".format(1.61))\nprint(\"{:.3f}\".format(1.62))\nprint(\"{:.3f}\".format(1.63))\nprint(\"{:.3f}\".format(1.64))\nprint(\"{:.3f}\".format(1.65))\nprint(\"{:.3f}\".format(1.66))\nprint(\"{:.3f}\".format(1.67))\nprint(\"{:.3f}\".format(1.68))\nprint(\"{:.3f}\".format(1.69))\nprint(\"{:.3f}\".format(1.7))\nprint(\"{:.3f}\".format(1.71))\nprint(\"{:.3f}\".format(1.72))\nprint(\"{:.3f}\".format(1.73))\nprint(\"{:.3f}\".format(1.74))\nprint(\"{:.3f}\".format(1.75))\nprint(\"{:.3f}\".format(1.76))\nprint(\"{:.3f}\".format(1.77))\nprint(\"{:.3f}\".format(1.78))\nprint(\"{:.3f}\".format(1.79))\nprint(\"{:.3f}\".format(1.8))\nprint(\"{:.3f}\".format(1.81))\nprint(\"{:.3f}\".format(1.82))\nprint(\"{:.3f}\".format(1.83))\nprint(\"{:.3f}\".format(1.84))\nprint(\"{:.3f}\".format(1.85))\nprint(\"{:.3f}\".format(1.86))\nprint(\"{:.3f}\".format(1.87))\nprint(\"{:.3f}\".format(1.88))\nprint(\"{:.3f}\".format(1.89))\nprint(\"{:.3f}\".format(1.9))\nprint(\"{:.3f}\".format(1.91))\nprint(\"{:.3f}\".format(1.92))\nprint(\"{:.3f}\".format(1.93))\nprint(\"{:.3f}\".format(1.94))\nprint(\"{:.3f}\".format(1.95))\nprint(\"{:.3f}\".format(1.96))\nprint(\"{:.3f}\".format(1.97))\nprint(\"{:.3f}\".format(1.98))\nprint(\"{:.3f}\".format(1.99))\nprint(\"{:.3f}\".format(2.0))\nprint(\"{:.3f}\".format(2.01))\nprint(\"{:.3f}\".format(2.02))\nprint(\"{:.3f}\".format(2.03))\nprint(\"{:.3f}\".format(2.04))\nprint(\"{:.3f}\".format(2.05))\nprint(\"{:.3f}\".format(2.06))\nprint(\"{:.3f}\".format(2.07))\nprint(\"{:.3f}\".format(2.08))\nprint(\"{:.3f}\".format(2.09))\nprint(\"{:.3f}\".format(2.1))\nprint(\"{:.3f}\".format(2.11))\nprint(\"{:.3f}\".format(2.12))"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\nassert solution(\"7 2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\nprint('Success')\n\nInput\n4\n0 1 2 1\n3 2 1 1\n\nOutput\n1 0 0 2\n\nInput\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\nOutput\n0 0 0 1 0 2 4\n\nInput\n4\n0 1 2 1\n3 2 1 1\n\nOutput\n1 0 0 2\n\nInput\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\nOutput\n0 0 0 1 0 2 4\n\n-----Explanation-----\n4 1 2 1\n3 2 1 1\n\n7 2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\na) 1, 0, 0, 2\nb) 0, 0, 1, 0\nc) 0, 0, 2, 0\nd) 1, 0, 0, 2\n\nb) 1, 0, 0, 2\nc) 0, 0, 1, 0\nd) 0, 0, 2, 0\ne) 1, 0, 0, 2\n\"\"\"\n\na = int(input())\nb = list(map(int, input().split()))\n\nc = [(b[i] + a) % a for i in range(a)]\n\nprint(' '.join(list(map(str, c))))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n1\\n1\") == '1\\n0\\n0\\n2'\nassert solution(\"4\\n3\\n1\\n1\") == '1\\n0\\n0\\n2'\n\n\"\"\"\n\nn = int(stdin.readline())\na = [int(n) for n in stdin.readline().split()]\nb = [int(n) for n in stdin.readline().split()]\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\nassert solution('6\\n0 1 2 3 4 5\\n4 3 5 6 1 2') == '1 0 0 3 0 4 5'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 1 1\\n3 2 1 1\") == \"1 0 0 2\", \"First, a = 2, b = 3, c = 1,  should equal '1 0 0 2'\"\nassert solution(\"7\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\", \"Second, a = 2, b = 4, c = 3,  should equal '0 0 0 1 0 2 4'\"\n\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\nb = list(map(int, stdin.readline().strip().split()))\n\nc = [0 for _ in range(n)]\n\nfor i in range(n):\n    c[i] = a[i] + b[i] % n\n\nprint(*c)"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\nassert solution(\"7\\n4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\nassert solution(\"8\\n6 5 3 3 2 2 3\\n4 5 4 4 5 5 5 5\") == \"0 0 0 1 0 2 4 0 2 4\"\n\nprint(\"Success\")"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\\n\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\nb = list(map(int, sys.stdin.readline().strip().split()))\n\nc = [a[i] + b[i] for i in range(n)]\nprint(\" \".join(map(str, c)))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 5 1 5 3 4 3\") == \"1 0 0 2\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1110\") == \"0\"\nassert solution(\"1101\") == \"1\"\nassert solution(\"1100\") == \"0\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"1010\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 0 1 0') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101110111\") == \"1\"\nassert solution(\"111011110\") == \"0\"\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0\\n1\\n1\\n0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1 0\") == 0\n\"\"\"\nimport re\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('01111011') == '0'\nassert solution('11101110') == '1'\nassert solution('11101110') == '1'\n\nprint(solution('11101110'))\n\nprint(solution('11101110'))\n\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('001101') == '0'\nassert solution('1110110') == '1'\nassert solution('1101101010') == '1'\nassert solution('11101101010') == '0'\nassert solution('11101101010') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 1010') == '0'\nassert solution('1') == '1'\nassert solution('10 10 10') == '1'\n\"\"\"\n\n\n\n\"\"\"\nInput\n1\n0\n0\n0\n0\n\nOutput\n0"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10111') == '1'\nassert solution('01110') == '0'\nassert solution('10110') == '1'\nassert solution('01110') == '0'\nassert solution('10110') == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\nimport sys\nD, T, S = [int(n) for n in sys.stdin.readline().split(' ')]\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 17 90') == 'No'\nassert solution('1000 0 0') == 'Yes'\nassert solution('1000 0 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n---\n\"\"\"\n\nfrom decimal import Decimal\n\nD, T, S = [int(x) for x in stdin.split(' ')]\ntime_to_target = (D / S) * 60\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\nassert solution(\"1 10 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\nD, T, S = list(map(int, input[0].split()))\nprint(\"Yes\") if T >= (D/S)*60 else print(\"No\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\nimport math\n\nD, T, S = [int(input()) for _ in range(3)]"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"1000 15 80\"\n) == \"Yes\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nD, T, S = list(map(int, input().split()))\n\nt = D / S"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"84 97 66\\n\"\n\"79 89 11\\n\"\n\"61 59 7\\n\"\n\"7\\n\"\n\"89\\n\"\n\"7\\n\"\n\"87\\n\"\n\"79\\n\"\n\"24\\n\"\n\"84\\n\"\n\"30\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n') == 'Yes'\n\n\"\"\"\n\nfrom collections import Counter\n\nfrom typing import List, Dict, Set"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\nassert solution('''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n''') == 'Yes'\n\nassert solution('''\n84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n''') == 'No'\n\n'''\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\n\"\"\"\n\nfrom math import sqrt\nfrom typing import List\n\na = [int(x) for x in stdin.split()]\nm = [a[0:3], a[3:6], a[6:9]]\nn = int(stdin.split()[-1])\nb = [int(x) for x in stdin.split()][n:]\n\ndiag_1 = []\ndiag_2 = []\nfor i in range(3):\n    diag_1.append(m[i][i])\n    diag_2.append(m[i][2 - i])\n\ncols = []\nfor i in range(3):\n    cols.append([x[i] for x in m])\n\nrows = []\nfor i in range(3):\n    rows.append(m[i][0] + m[i][1] + m[i][2])\n\ncolumn_1 = []\ncolumn_2 = []\nfor i in range(3):\n    column_1.append(sum(m[i]))\n    column_2.append(sum([m[0][i], m[1][i], m[2][i]]))\n\ncolumn_3 = [sum(cols[0]), sum(cols[1]), sum(cols[2])]\ncolumn_4 = [sum(cols[0]), sum(cols[1]), sum(cols[2])]\ncolumn_5 = [sum(cols[0]), sum(cols[1]), sum(cols[2])]\ncolumn_6 = [sum(cols[0]), sum(cols[1]), sum(cols[2])]"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\nassert solution('84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30') == 'Yes'\n\n-----\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\nprint(solution(\"41 2\\n5 6\"))\n\n-------------"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('4 2\\n1 3\\n2 4') == '-1'\nassert solution('5 2\\n1 2\\n2 3\\n3 4\\n4 5') == '-1'\nassert solution('6 1\\n2 3\\n3 4\\n4 5\\n5 6') == '-1'\nassert solution('2 4\\n1 2\\n2 3\\n3 4') == '3'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"41 2\\n5 6\\n\") == 30\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n5 6\") == \"30\"\n\"\"\"\nimport math"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n5 6\") == \"30\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"41 2\\n5 6\\n\") == \"30\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\"\n\nD, N = input().split()\nD = int(D)\nN = int(N)"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\\n\") == \"5\"\nassert solution(\"2 1\\n\") == \"1\"\nassert solution(\"3 3\\n\") == \"2\"\nassert solution(\"3 2\\n\") == \"1\"\nassert solution(\"2 2\\n\") == \"4\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n') == '5'\nassert solution('0 2\\n') == '3'\nassert solution('1 2\\n') == '2'\nassert solution('2 1\\n') == '1'\nassert solution('2 2\\n') == '1'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 5\\n') == '5'\nassert solution('0 0\\n') == '1'\nassert solution('1 10\\n') == '1'\nassert solution('2 10\\n') == '2'\nassert solution('3 10\\n') == '3'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n2 3') == '1'\nassert solution('1 1\\n2 3') == '1'\nassert solution('1 0\\n1 2') == '2'\nassert solution('1 1\\n1 2') == '2'\nassert solution('1 1\\n2 3') == '3'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 5\\n') == '5'\nassert solution('0 0\\n') == '1'\nassert solution('0 1\\n') == '2'\nassert solution('1 5\\n') == '5'\nassert solution('1 1\\n') == '1'"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\"\n\nimport sys\n\nD, N = map(int, sys.stdin.readline().split())\n\narray = []\nfor i in range(1, 100):\n    if i % D == 0:\n        array.append(i)\n\nprint(array[N - 1])\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 5\\n') == '5'\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2\\n') == '5'\nassert solution('1 2\\n') == '1'\nassert solution('2 2\\n') == '2'"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 6 8\") == 2\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 6\") == \"1\"\nassert solution(\"7 6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\nassert solution(\"4\\n7 6 8\") == \"2\"\nassert solution(\"5\\n7 6 8\") == \"1\"\nassert solution(\"10\\n7 6 8\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n7 6 8''') == '2'\nassert solution('''4\n4 6 8''') == '4'\n\n'''\nimport math"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\n\"\"\"\n\"\"\"\nYou are given a string S.\nS contains alphanumeric characters, spaces and symbols(+,-).\nYour task is to modify the string according to the following rules:\n\n-All the symbols and spaces in the string must be deleted.\n-If the resulting string is empty, the string must be replaced with the word \"nothing\".\n-If the resulting string has more than one word, the first word must be replaced by \"maximum\".\n\nInput Format\n\nA single line containing a string S.\n\nConstraints\n\n - 0 < len(S) < 1000\n\nOutput Format\n\nPrint the modified string.\n\nSample Input 0\n\n\"+++ Python Programming \"\n\nSample Output 0\n\nmaximum Python Programming\n\"\"\"\n\"\"\"\nSOLUTION"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n7\n7\n8\n5''') == '2'\nassert solution('''4\n7\n7\n9\n6''') == '1'\nassert solution('''3\n8\n1\n2\n1''') == '1'\nassert solution('''2\n1\n1\n1\n1''') == '1'\nassert solution('''4\n4\n8\n1\n10''') == '4'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 7 3\") == \"2\"\nassert solution(\"7 3 2 6 9 5\") == \"2\"\nassert solution(\"2 7 4 8\") == \"4\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n7 6 8''') == '2'\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n7 6 8\n''') == 2\nassert solution('''\n5\n4 9 5 6 2\n''') == 1\nassert solution('''\n7\n2 1 1 2 2 1\n''') == 1\n\n-----Test 1-----\n##testdata#\n\n-----Test 2-----\n##testdata#\n\n-----Test 3-----\n##testdata#\n\n-----Test 4-----\n##testdata#\n\n-----Test 5-----\n##testdata#\n\n-----Test 6-----\n##testdata#\n\n-----Test 7-----\n##testdata#\n\n-----Test 8-----\n##testdata#\n\n-----Test 9-----\n##testdata#\n\n-----Test 10-----\n##testdata#\n\n-----Test 11-----\n##testdata#\n\n-----Test 12-----\n##testdata#\n\n-----Test 13-----\n##testdata#\n\n-----Test 14-----\n##testdata#\n\n-----Test 15-----\n##testdata#\n\n-----Test 16-----\n##testdata#\n\n-----Test 17-----\n##testdata#\n\n-----Test 18-----\n##testdata#\n\n-----Test 19-----\n##testdata#\n\n-----Test 20-----\n##testdata#\n\n-----Test 21-----\n##testdata#\n\n-----Test 22-----\n##testdata#\n\n-----Test 23-----\n##testdata#\n\n-----Test 24-----\n##testdata#\n\n-----Test 25-----\n##testdata#\n\n-----Test 26-----\n##testdata#\n\n-----Test 27-----\n##testdata#\n\n-----Test 28-----\n##testdata#\n\n-----Test 29-----\n##testdata#\n\n-----Test 30-----\n##testdata#\n\n-----Test 31-----\n##testdata#\n\n-----Test 32-----\n##testdata#\n\n-----Test 33-----\n##testdata#\n\n-----Test 34-----\n##testdata#\n\n-----Test 35-----\n##testdata#\n\n-----Test 36-----\n##testdata#\n\n-----Test 37-----\n##testdata#\n\n-----Test 38-----\n##testdata#\n\n-----Test 39-----\n##testdata#\n\n-----Test 40-----\n##testdata#\n\n-----Test 41-----\n##testdata#\n\n-----Test 42-----\n##testdata#\n\n-----Test 43-----\n##testdata#\n\n-----Test 44-----\n##testdata#\n\n-----Test 45-----\n##testdata#\n\n-----Test 46-----\n##testdata#\n\n-----Test 47-----\n##testdata#\n\n-----Test 48-----\n##testdata#\n\n-----Test 49-----\n##testdata#\n\n-----Test 50-----\n##testdata#\n\n-----Test 51-----\n##testdata#\n\n-----Test 52-----\n##testdata#\n\n-----Test 53-----\n##testdata#\n\n-----Test 54-----\n##testdata#\n\n-----Test 55-----\n##testdata#\n\n-----Test 56-----\n##testdata#\n\n-----Test 57-----\n##testdata#\n\n-----Test 58-----\n##testdata#\n\n-----Test 59-----\n##testdata#\n\n-----Test 60-----\n##testdata#\n\n-----Test 61-----\n##testdata#\n\n-----Test 62-----\n##testdata#\n\n-----Test 63-----\n##testdata#\n\n-----Test 64-----\n##testdata#\n\n-----Test 65-----\n##testdata#\n\n-----Test 66-----\n##testdata#\n\n-----Test 67-----\n##testdata#\n\n-----Test 68-----\n##testdata#\n\n-----Test 69-----\n##testdata#\n\n-----Test 70-----\n##testdata#\n\n-----Test 71-----\n##testdata#\n\n-----Test 72-----\n##testdata#\n\n-----Test 73-----\n##testdata#\n\n-----Test 74-----\n##testdata#\n\n-----Test 75-----\n##testdata#\n\n-----Test 76-----\n##testdata#\n\n-----Test 77-----\n##testdata#\n\n-----Test 78-----\n##testdata#\n\n-----Test 79-----\n##testdata#\n\n-----Test 80-----\n##testdata#\n\n-----Test 81-----\n##testdata#\n\n-----Test 82-----\n##testdata#\n\n-----Test 83-----\n##testdata#\n\n-----Test 84-----\n##testdata#\n\n-----Test 85-----\n##testdata#\n\n-----Test 86-----\n##testdata#\n\n-----Test 87-----\n##testdata#\n\n-----Test 88-----\n##testdata#\n\n-----Test 89-----\n##testdata#\n\n-----Test 90-----\n##testdata#\n\n-----Test 91-----\n##testdata#\n\n-----Test 92-----\n##testdata#\n\n-----Test 93-----\n##testdata#\n\n-----Test 94-----\n##testdata#\n\n-----Test 95-----\n##testdata#\n\n-----Test 96-----\n##testdata#\n\n-----Test 97-----\n##testdata#\n\n-----Test 98-----\n##testdata#\n\n-----Test 99-----\n##testdata#\n\n-----Test 100-----\n##testdata#\n\n-----Test 101-----\n##testdata#\n\n-----Test 102-----\n##testdata#\n\n-----Test 103-----\n##testdata#\n\n-----Test 104-----\n##testdata#\n\n-----Test 105-----\n##testdata#\n\n-----Test 106-----\n##testdata#\n\n-----Test 107-----\n##testdata#\n\n-----Test 108-----\n##testdata#\n\n-----Test 109-----\n##testdata#\n\n-----Test 110-----\n##testdata#\n\n-----Test 111-----\n##testdata#\n\n-----Test 112-----\n##testdata#\n\n-----Test 113-----\n##testdata#\n\n-----Test 114-----\n##testdata#\n\n-----Test 115-----\n##testdata#\n\n-----Test 116-----\n##testdata#\n\n-----Test 117-----\n##testdata#\n\n-----Test 118-----\n##testdata#\n\n-----Test 119-----\n##testdata#\n\n-----Test 120-----\n##testdata#\n\n-----Test 121-----\n##testdata#\n\n-----Test 122-----\n##testdata#\n\n-----Test 123-----\n##testdata#\n\n-----Test 124-----\n##testdata#\n\n-----Test 125-----\n##testdata#\n\n-----Test 126-----\n##testdata#\n\n-----Test 127-----\n##testdata#\n\n-----Test 128-----\n##testdata#\n\n-----Test 129-----\n##testdata#\n\n-----Test 130-----\n##testdata#\n\n-----Test 131-----\n##testdata#\n\n-----Test 132-----\n##testdata#\n\n-----Test 133-----\n##testdata#\n\n-----Test 134-----\n##testdata#\n\n-----Test 135-----\n##testdata#\n\n-----Test 136-----\n##testdata#\n\n-----Test 137-----\n##testdata#\n\n-----Test 138-----\n##testdata#\n\n-----Test 139-----\n##testdata#\n\n-----Test 140-----\n##testdata#\n\n-----Test 141-----\n##testdata#\n\n-----Test 142-----\n##testdata#\n\n-----Test 143-----\n##testdata#\n\n-----Test 144-----\n##testdata#\n\n-----Test 145-----\n##testdata#\n\n-----Test 146-----\n##testdata#\n\n-----Test 147-----\n##testdata#\n\n-----Test 148-----\n##testdata#\n\n-----Test 149-----\n##testdata#\n\n-----Test 150-----\n##testdata#\n\n-----Test 151-----\n##testdata#\n\n-----Test 152-----\n##testdata#\n\n-----Test 153-----\n##testdata#\n\n-----Test 154-----\n##testdata#\n\n-----Test 155-----\n##testdata#\n\n-----Test 156-----\n##testdata#\n\n-----Test 157-----\n##testdata"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test1) == \"1 3 2\"\nassert solution(test2) == \"1 2 3\"\nassert solution(test3) == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\narr = sys.stdin.readline().rstrip()\narr = arr.split(' ')\narr = [int(i) for i in arr]\narr = [0] + arr\n\nstu_count = [0] * (n + 1)\n\nfor i in range(len(arr)):\n    stu_count[i] = stu_count[i - 1]\n    stu_count[i] += arr[i]\n\nresult = []\nfor i in range(1, len(stu_count)):\n    result.append(i)\n    result.append(stu_count[i] - stu_count[i - 1])\n\nprint(' '.join(map(str, result)))\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\"\"\"\n\ntest_input_1 = \"\"\"5\n3 1 2 5 4\n\"\"\"\n\ntest_output_1 = \"\"\"5 1 2 3 4\n\"\"\"\n\ntest_input_2 = \"\"\"6\n2 3 1 4 6 5\n\"\"\"\n\ntest_output_2 = \"\"\"6 5 1 2 3 4\n\"\"\"\n\ntest_input_3 = \"\"\"4\n2 3 4 1\n\"\"\"\n\ntest_output_3 = \"\"\"4 1 2 3\n\"\"\"\n\ntest_input_4 = \"\"\"7\n1 2 3 4 5 6 7\n\"\"\"\n\ntest_output_4 = \"\"\"7 6 5 4 3 2 1\n\"\"\"\n\ntest_input_5 = \"\"\"10\n3 7 8 9 10 6 1 2 4 5\n\"\"\"\n\ntest_output_5 = \"\"\"10 9 8 7 6 5 4 3 2 1\n\"\"\"\n\ntest_input_6 = \"\"\"6\n3 4 2 1 6 5\n\"\"\"\n\ntest_output_6 = \"\"\"6 5 4 3 2 1\n\"\"\"\n\ntest_input_7 = \"\"\"4\n2 4 1 3\n\"\"\"\n\ntest_output_7 = \"\"\"4 1 2 3\n\"\"\"\n\ntest_input_8 = \"\"\"8\n8 7 6 5 4 3 2 1\n\"\"\"\n\ntest_output_8 = \"\"\"8 7 6 5 4 3 2 1\n\"\"\"\n\ntest_input_9 = \"\"\"4\n1 4 2 3\n\"\"\"\n\ntest_output_9 = \"\"\"4 1 2 3\n\"\"\"\n\ntest_input_10 = \"\"\"8\n8 7 6 5 4 3 2 1\n\"\"\"\n\ntest_output_10 = \"\"\"8 7 6 5 4 3 2 1\n\"\"\"\n\ntest_input_11 = \"\"\"4\n4 1 3 2\n\"\"\"\n\ntest_output_11 = \"\"\"4 1 2 3\n\"\"\"\n\ntest_input_12 = \"\"\"4\n4 2 3 1\n\"\"\"\n\ntest_output_12 = \"\"\"4 2 1 3\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"5 1 2 3 4\"\nassert solution(\"\"\"\n4\n3 4 2 1\n\"\"\") == \"4 3 2 1\"\nassert solution(\"\"\"\n6\n4 1 5 2 3 6\n\"\"\") == \"6 4 1 5 2 3\"\n\nprint('PASSED')\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 1 3 4\") == \"4 1 3 2\"\nassert solution(\"7\\n5 2 6 1 7 3 4\") == \"7 1 3 5 2 4 6\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\n\"\"\"\nAssumptions:\n    1. Max number of students = 10^5\n    2. Max number of enterance = 10^5\n    3. No student has entered the classroom more than once\n    4. No student has entered the classroom multiple times\n\"\"\"\n\n\"\"\"\nProblem 1:\n\nInput:\n2\n1 2\n3 4\n\nOutput:\n1 2 3 4\n\n\"\"\"\n\n\"\"\"\nProblem 2:\n\nInput:\n2\n1 2\n3 4\n\nOutput:\n1 2 4 3\n\n\"\"\"\n\n\"\"\"\nProblem 3:\n\nInput:\n5\n1 2 3 4 5\n4 3 2 1 5\n\nOutput:\n1 2 3 4 5\n\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('100 10 7 12345') == '0'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nA, B, X = [int(x) for x in stdin.split()]\nmax = A * (A - 1) * (A - 2) // 6\nmax = max + B * len(str(A))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"7 3 100\") == \"0\"\n\"\"\"\n\nA, B, X = (int(i) for i in input().split())\n\nn = A * 10 ** (len(str(X)) - 1)\nm = B * len(str(X))"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution( \"10 7 100\" ) == \"9\"\nassert solution( \"7 0 0\" ) == \"0\"\nassert solution( \"1 1 1\" ) == \"0\"\n\"\"\"\n\n\n\"\"\"\nImplementation:\n\nGiven:\n- A, B, X: Integers\n\nFind:\n- Max integer that Takahashi can buy, in Yen\n\nAlgorithm:\n- A: The largest integer that can be bought\n- B: Given that Takahashi can buy A, what is the largest integer that can be bought\n- X: Given that Takahashi can buy A, what is the largest integer that can be bought in Yen\n\n1. If A=0, return 0\n2. If B=0, return X\n3. Find an integer K that makes both A & B\n4. K is the largest integer that can be bought\n5. Find a decimal integer N that makes N = A * 10^k + B * 10^(k-1) +... + 1\n6. The largest integer that can be bought is the largest k such that N \\leq 10^9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 7 100\") == '9'\nassert solution(\"100 1000000000 12345\") == '0'\nassert solution(\"1 1 1\") == '0'\n\n\"\"\"\n\nimport numpy\nfrom decimal import Decimal\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 7 100''') == '9'\n\n\"\"\"\nYou are given A and B, and you have X yen. \nYou have to buy exactly one integer between 1 and 10^9 inclusive. \nYou can buy it and sell it for X * A dollars plus B dollars. \nFind the maximum integer you can buy.\n\nInput Format\nThe first two lines contain the respective values of A and B. \nThe third line contains the value of X.\n\nConstraints\n1 \\leq A, B \\leq 10^9\n1 \\leq X \\leq 10^{18}\n\nOutput Format\nPrint the maximum integer you can buy.\n\nSample Input 0\n2 1 3\n\nSample Output 0\n2\n\"\"\"\n\nimport math\nA, B, X = [int(x) for x in input().split()]"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nimport math\n\nA, B, X = [int(s) for s in stdin.split(\" \")]\n\nd = math.floor(math.log10(X))\n\nmax_num = 0\nfor i in range(10 ** d):\n    if A * i + B * d > X:\n        max_num = i - 1\n        break\n\nprint(max_num)\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n2 3\") == \"2\"\nassert solution(\"4 10\\n1 2 3 4 5\") == \"2\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Harshad Numbers\n\nProblem URL: https://edabit.com/challenge/gQ7xnqNjzt8SfSoxk\n\nProblem Description:\nA Harshad number is a number which is divisible by the sum of its digits.\nThe first few Harshad numbers are 1, 2, 3, 4, 5, 6, 7, 8 and 9.\nCreate a function which takes a number and returns True if it's a Harshad number and False if it's not.\n\n-----Input-----\nA single number.\n\n-----Output-----\nThe function should return True if the number is a Harshad number and False if it's not.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\nTrue\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Interleaving Strings\n\nProblem URL: https://edabit.com/challenge/nYM7oGKqbGpYpXJ9R\n\nProblem Description:\nGiven three strings, a, b, and c, return a single string made of the first, middle, and last char each input string.\n\n-----Input-----\n3 strings, each with length > 1.\n\n-----Output-----\nA single string made of the first, middle, and last char each input string.\n\n-----Sample Input-----\n'ABC', 'DEF', 'GHI'\n\n-----Sample Output-----\nADEGBC\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Middle\n\nProblem URL: https://edabit.com/challenge/dCXqbqYstfXRiXF9M\n\nProblem Description:\nGiven a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.\n\n-----Input-----\nA single string.\n\n-----Output-----\nThe single string without the first and last char, so \"Hello\" yields \"ell\".\n\n-----Sample Input-----\n'no'\n\n-----Sample Output-----\n'n'\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Left2Right\n\nProblem URL: https://edabit.com/challenge/hgx4DJq4EQw7SajXb\n\nProblem Description:\nGiven a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.\n\n-----Input-----\nA single string.\n\n-----Output-----\nThe single string without the first and last char, so \"Hello\" yields \"ell\".\n\n-----Sample Input-----\n'no'\n\n-----Sample Output-----\n'n'\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Reversed\n\nProblem URL: https://edabit.com/challenge/tqMxb4j2fLkTVeTvM\n\nProblem Description:\nGiven a string, return the reversed string.\n\n-----Input-----\nA single string.\n\n-----Output-----\nThe single string reversed.\n\n-----Sample Input-----\n'no'\n\n-----Sample Output-----\n'no'\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Palindrome\n\nProblem URL: https://edabit.com/challenge/Hx9Vrf6gY4oLdDUgE\n\nProblem Description:\nGiven a string, return True if it's a palindrome, False otherwise.\n\n-----Input-----\nA single string.\n\n-----Output-----\nTrue or False depending on whether the string is a palindrome.\n\n-----Sample Input-----\n'abcdcba'\n\n-----Sample Output-----\nTrue\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Remainder\n\nProblem URL: https://edabit.com/challenge/3t6Nr9Wpfxh8vYgNG\n\nProblem Description:\nGiven a list of integers, return the pair of integers that have the smallest absolute difference between them.\n\n-----Input-----\nA list of integers.\n\n-----Output-----\nThe pair of integers that have the smallest absolute difference between them.\n\n-----Sample Input-----\nlist(range(1, 10, 2))\n\n-----Sample Output-----\n(7, 1)\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Greatest Common Divisor\n\nProblem URL: https://edabit.com/challenge/XMWQW7FxgN5FzgqrG\n\nProblem Description:\nGiven two integers, return their greatest common divisor.\n\n-----Input-----\nTwo integers.\n\n-----Output-----\nAn integer, the greatest common divisor of the input integers.\n\n-----Sample Input-----\n12, 18\n\n-----Sample Output-----\n6\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Integer Square\n\nProblem URL: https://edabit.com/challenge/tNxQh6mv9p62nqrxX\n\nProblem Description:\nGiven an integer n, return the square of the integer without using the built-in \"pow\" method.\n\n-----Input-----\nA single integer.\n\n-----Output-----\nThe square of the input integer.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n16\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Sum of Digits\n\nProblem URL: https://edabit.com/challenge/K2nqXsW5i9m3qd5rG\n\nProblem Description:\nGiven a non-negative integer, return the sum of its digits.\n\n-----Input-----\nA single integer.\n\n-----Output-----\nThe sum of its digits.\n\n-----Sample Input-----\n25\n\n-----Sample Output-----\n5\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Number of Digits\n\nProblem URL: https://edabit.com/challenge/rv3hCKtFRWbGBZPXY\n\nProblem Description:\nGiven a non-negative integer, return the number of digits in it.\n\n-----Input-----\nA single integer.\n\n-----Output-----\nAn integer, the number of digits in the input integer.\n\n-----Sample Input-----\n13\n\n-----Sample Output-----\n2\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Multiples of 3\n\nProblem URL: https://edabit.com/challenge/y9wxTdxtB5wvGhcJn\n\nProblem Description:\nGiven a range of numbers, return the count of how many numbers in the range are multiples of 3.\n\n-----Input-----\nTwo integers, the start and end of the range, inclusive.\n\n-----Output-----\nAn integer, the count of how many numbers in the range are multiples of 3.\n\n-----Sample Input-----\n7, 20\n\n-----Sample Output-----\n2\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Fizz Buzz\n\nProblem URL: https://edabit.com/challenge/gvQJXBztQ5gAlWkvY\n\nProblem Description:\nWrite a function that takes an integer as input, and returns the string \"fizz\", \"buzz\", \"fizzbuzz\", or \"num\" depending on the integer.\n\n-----Input-----\nAn integer.\n\n-----Output-----\nA string, the result of the input integer.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n\"fizz\"\n\n\"\"\"\n\n\n\"\"\"\nProblem Name: A5: Highest and Lowest\n\nProblem URL: https://edabit.com/challenge/3XbHbq2xw1bJXdY7\n\nProblem Description:\nGiven a list of integers, return the highest and lowest integers, in that order.\n\n-----Input-----\nA list of integers.\n\n-----Output-----\nTwo integers, the highest and lowest in the list.\n\n-----Sample Input-----\nlist(range(10, -10, -1))\n\n-----Sample"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 150\"\n) == \"2\"\n\"\"\"\n\n\"\"\"\nfrom typing import List\n\nN, K = [int(x) for x in stdin.readline().split()]\nheight: List[int] = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"7 4\\n6 1 2 3 3 5 5 5\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\nassert solution('4 2\\n5 4 2 1') == 'No'\n\"\"\"\n\n\"\"\"\nimport unittest\nimport math\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 1\n5 4 2 1''') == 'Yes'\nassert solution('''3 4\n1 1 1 1\n''') == 'No'\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nvotes = [int(vote) for vote in sys.stdin.readline().split()]\n\ncount = 0\nfor vote in votes:\n    count += vote"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\nassert solution('4 3\\n5 4 2 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 1\\n5 4 2 1\"\n) == \"Yes\"\n\nassert solution(\n    \"4 1\\n4 4 2 1\"\n) == \"No\"\n\nassert solution(\n    \"4 3\\n2 2 2 1\"\n) == \"Yes\"\n\nassert solution(\n    \"4 3\\n1 1 1 1\"\n) == \"No\"\n\nassert solution(\n    \"3 5\\n2 1 2 3\"\n) == \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n5 4 2 1') == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n4 2 1 3 4\") == \"Yes\"\n\n:param stdin: standard input given by the website\n:return: the result\n\"\"\"\nimport sys"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.#.#') == 4\n\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\nassert solution(\"1 1 1\\n..#\") == \"2\"\nassert solution(\"1 2 1\\n.#\") == \"1\"\nassert solution(\"1 2 1\\n.#\\n..#\") == \"0\"\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)\n\ntotal = [0]\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\nprint('test passed')\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".#..#\") == 1\nassert solution(\"....#\") == 3\nassert solution(\"#....\") == 1\nassert solution(\"..##.\") == 5\nassert solution(\"##.#.\") == 2\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 2\\n..#\\n###\\n') == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"\nfrom typing import Callable, List, NamedTuple\n\nfrom icontract import require, ensure, DBC\n\n\nclass Point(NamedTuple):\n    row: int\n    column: int\n\n\nclass Row(NamedTuple):\n    start: int\n    end: int\n\n\nclass Column(NamedTuple):\n    start: int\n    end: int\n\n\nclass Solution:\n    \"\"\"\n    Number of choices of rows and columns to make K black squares remain in a grid of H rows and W columns.\n    \"\"\"\n\n    @require(lambda H, W, K: K > 0)\n    @require(lambda H, W, K: H > 0)\n    @require(lambda H, W, K: W > 0)\n    @require(lambda H, W, K: H + W >= K)\n    def count(self, H: int, W: int, K: int) -> int:\n        \"\"\"\n        Number of choices of rows and columns to make K black squares remain in a grid of H rows and W columns.\n        \"\"\"\n\n        def make_row_choices(r: int, max_i: int) -> int:\n            \"\"\"\n            Number of choices of columns to make K black squares remain in the row with index `r`.\n            \"\"\"\n            return ((max_i - r) * r) // 2 + r + 1\n\n        return self.count_recursive(H, W, K, make_row_choices)\n\n    @require(lambda H, W, K: K > 0)\n    @require(lambda H, W, K: H > 0)\n    @require(lambda H, W, K: W > 0)\n    @require(lambda H, W, K: H + W >= K)\n    def count_recursive(\n        self, H: int, W: int, K: int, make_row_choices: Callable[[int, int], int]\n    ) -> int:\n        \"\"\"\n        Number of choices of rows and columns to make K black squares remain in a grid of H rows and W columns.\n        \"\"\"\n\n        if K == 0:\n            return 1\n\n        if H == 0:\n            return 0\n\n        if K == 1:\n            return make_row_choices(H, H)\n\n        return (\n            self.count_recursive(H - 1, W, K - 1, make_row_choices)\n            + self.count_recursive(H - 1, W, K, make_row_choices)\n            + self.count_recursive(H, W - 1, K - 1, make_row_choices)\n        )\n\n\n@ensure(lambda result: result >= 0)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(2020)) == \"2\"\n\"\"\"\n\nL, R = map(int, stdin.split())\nmin_mod = 2019\nfor i in range(L, R+1):\n    for j in range(L, R+1):\n        min_mod = min(i*j%2019, min_mod)\nprint(min_mod)"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2020 2040\") == 2\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys\n\nL, R = map(int, sys.stdin.readline().split())\n\nans = -1\nfor i in range(L, R + 1):\n    for j in range(L, R + 1):\n        if i * j % 2019 == 0:\n            ans = i * j\nprint(ans)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2020 2040') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nfrom util import main\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2020 2040\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(2020 2040)) == '2'\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == \"AC\"\nassert solution('AtCoder') == \"AC\"\nassert solution('Atcoder') == \"WA\"\nassert solution('AAtCoder') == \"WA\"\nassert solution('AAtcoder') == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == 'AC'\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder\") == 'AC'\nassert solution(\"Atcoder\") == 'WA'\nassert solution(\"AatCoder\") == 'WA'\nassert solution(\"Atcoder2\") == 'AC'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(AAtCoder) == 'AC'\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder2\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1214') == '2'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12214444\") == \"2\"\nassert solution(\"1222214444444444444444\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1214') == '2'\nassert solution('111111') == '1'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('999') == '9'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1214\") == '2'\nassert solution(\"1324\") == '3'\nassert solution(\"1234\") == '4'\nassert solution(\"1235\") == '5'\nassert solution(\"1236\") == '6'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1324\") == \"3\"\nassert solution(\"1333224444\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1214\") == '2'\nassert solution(\"92214444444444444444444444444444444444444444444444444444444444444444444444444\") == '5'\nassert solution
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1214') == '2'\nprint('All test cases passed!')\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"12143332\") == \"2\"\n\"\"\"\n\nfrom typing import List, Dict, Any, Union\nfrom decimal import Decimal\nimport collections\n\nclass Solution:\n    def __init__(self, s: str, k: int) -> None:\n        self.s = s\n        self.k = k\n\n    def day(self, d: int) -> None:\n        return self.s\n\n    def solve(self) -> None:\n        while d < Decimal(\"5e15\"):\n            d += Decimal(\"1e15\")\n            self.day()\n\n    def solution(self) -> str:\n        pass\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1214') == '2'\nassert solution('121444444444444444444444444444444444444444444444444444444444444444444444444444') == '2'\n\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5 2 3 4 1') == 'YES'\nassert solution('5\\n5 2 3 1 4') == 'NO'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n5 2 3 4 1') == \"YES\"\nassert solution('3\\n1 3 2') == \"NO\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n\n\"\"\"\nYou are given a permutation p of the digits 1, 2,..., n. Your task is to find the lexicographically next permutation p' of p if one exists.\n\nInput Format\n\nThe first line contains a single integer n, denoting the number of digits of p. The next line contains a permutation of digits from 1 to n.\n\nConstraints\n\n1 \\leq n \\leq 10^5\nIt is possible that no lexicographically next permutation exists.\n\nOutput Format\n\nIf one exists, print the lexicographically next permutation of digits of p on a single line. If no lexicographically next permutation exists, print NO.\n\nSample Input 0\n\n3\n123\nSample Output 0\n\n132\nSample Input 1\n\n2\n12\nSample Output 1\n\nNO\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\nfrom typing import List, Tuple\n\nfrom utils.input_output import get_input\nfrom utils.iterables import chunked\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n\nfrom typing import List\nfrom functools import reduce\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\n\n\"\"\"\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    \"\"\"O(n) / O(1)\"\"\"\n    def solution(self, stdin: str) -> str:\n        s = [int(c) for c in stdin]\n        s = self.cut(s)\n        return str(self.count(s, 3))\n\n    def cut(self, s: List[int]) -> List[int]:\n        if len(s) == 1:\n            return s\n\n        if s[0] % 3 == 0:\n            return [0] + self.cut(s[1:])\n        if s[-1] % 3 == 0:\n            return self.cut(s[:-1]) + [0]\n        if s[0] % 3 == 1:\n            return [1] + self.cut(s[1:])\n        if s[-1] % 3 == 1:\n            return self.cut(s[:-1]) + [1]\n\n        return [2] + self.cut(s[1:])\n\n    def count(self, s: List[int], n: int) -> int:\n        count = Counter(s)\n        if n == 1:\n            return count[0]\n        return count[0] + count[1] + count[2] * (n - 2)\n\nclass Solution:\n    \"\"\"O(n) / O(1)\"\"\"\n    def solution(self, stdin: str) -> str:\n        s = [int(c) for c in stdin]\n        s = self.cut(s)\n        return str(self.count(s, 3))\n\n    def cut(self, s: List[int]) -> List[int]:\n        if len(s) == 1:\n            return s\n\n        if s[0] % 3 == 0:\n            return [0] + self.cut(s[1:])\n        if s[-1] % 3 == 0:\n            return self.cut(s[:-1]) + [0]\n        if s[0] % 3 == 1:\n            return [1] + self.cut(s[1:])\n        if s[-1] % 3 == 1:\n            return self.cut(s[:-1]) + [1]\n\n        return [2] + self.cut(s[1:])\n\n    def count(self, s: List[int], n: int) -> int:\n        count = Counter(s)\n        if n == 1:\n            return count[0]\n        return count[0] + count[1] + count[2] * (n - 2)\n\nclass Solution:\n    \"\"\"O(n^2) / O(1)\"\"\"\n    def solution(self, stdin: str) -> str:\n        s = [int(c) for c in stdin]\n        s = self.cut(s)\n        return str(self.count(s, 3))\n\n    def cut(self, s: List[int]) -> List[int]:\n        if len(s) == 1:\n            return s\n\n        res = []\n        for i, c in enumerate(s):\n            left = right = c\n            for j in range(i+1, len(s)):\n                right = s[j]\n                if left % 3 == 0:\n                    res += [0]\n                    left = right\n                    continue\n                if right % 3 == 0:\n                    res += [1]\n                    right = left\n                    continue\n                if left % 3 == 1:\n                    res += [2]\n                    left = right\n                    continue\n                if right % 3 == 1:\n                    res += [2]\n                    right = left\n                    continue\n                res += [3]\n                left = right\n            if left % 3 == 0:\n                res += [0]\n            if right % 3 == 0:\n                res += [1]\n            if left % 3 == 1:\n                res += [1]\n            if right % 3 == 1:\n                res += [2]\n        return res\n\n    def count(self, s: List[int], n: int) -> int:\n        count = Counter(s)\n        if n == 1:\n            return count[0]\n        return count[0] + count[1] + count[2] * (n - 2)\n\nclass Solution:\n    \"\"\"O(n^2) / O(1)\"\"\"\n    def solution(self, stdin: str) -> str:\n        s = [int(c) for c in stdin]\n        s = self.cut(s)\n        return str(self.count(s, 3))\n\n    def cut(self, s: List[int]) -> List[int]:\n        if len(s) == 1:\n            return s\n\n        res = []\n        for i, c in enumerate(s):\n            left = right = c\n            for j in range(i+1, len(s)):\n                right = s[j]\n                if left % 3 == 0:\n                    res += [0]\n                    left = right\n                    continue\n                if right % 3 == 0:\n                    res += [1]\n                    right = left\n                    continue\n                if left % 3 == 1:\n                    res += [2]\n                    left = right\n                    continue\n                if right % 3 == 1:\n                    res += [2]\n                    right = left\n                    continue\n                res += [3]\n                left = right\n            if left % 3 == 0:\n                res += [0]\n            if right % 3 == 0:\n                res += [1]\n            if left % 3 == 1:\n                res += [1]\n            if right % 3 == 1:\n                res += [2]\n        return res\n\n    def count(self, s: List[int], n: int) -> int:\n        count = Counter(s)\n        if n == 1:\n            return count[0]\n        return count[0] + count[1] + count[2] * (n -"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n\n\ns = input().strip()"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == '2'\nassert solution(\"3\\n13 37 39\\n1 2 3\") == '2'\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == '0'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\nassert solution('3\\n1 2 -1\\n-6 -12 6\\n') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == 2\nassert solution(\"3\\n13 37 39\\n1 2 3\") == 2\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == 0\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == 3\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_one) == test_output_one\nassert solution(test_input_two) == test_output_two\nassert solution(test_input_three) == test_output_three\nassert solution(test_input_four) == test_output_four\nassert solution(test_input_five) == test_output_five\n\nprint('The local tests are done. Now attempting the global test.')\ntry:\n    from multilanguage.execute_tests import execute_tests\nexcept ImportError:\n    print('Multilanguage not installed. Cannot run global tests.')\n    quit()\n\nexecute_tests()\n\n'''\n\nfrom multilanguage.programming_language import (\n    execute_program,\n    parse_program,\n    )"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3 13 37 39\\n1 2 3\\n') == '2'\nassert solution('4 0 0 0\\n1 2 3 4\\n') == '0'\nassert solution('3 1 2 -1\\n-6 -12 6\\n') == '3'\nassert solution('3 13 37 39\\n1 2 3\\n') == '2'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3\\n') == '2'\nassert solution('3\\n13 37 39\\n1 2 3\\n') == '2'\nassert solution('4\\n0 0 0 0\\n1 2 3 4\\n') == '0'\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2 4 7 11 3\") == \"2\"\nassert solution(\"4\\n1 2 3 4\\n3 4 7 11 3\") == \"2\"\nassert solution(\"4\\n1 2 3 4\\n0 0 0 0\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n3 4 7 11 3\") == \"2\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == 2\nassert solution(\"3\\n13 37 39\\n1 2 3\") == 2\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == 0\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == 3"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == 2\nassert solution('13 37 39') == 2\nassert solution('1 2 -1') == 3\nassert solution('-6 -12 6') == 3\nassert solution('0 0 0 0') == 0\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\nassert solution('bambarbia') == '10'\nassert solution('code??????') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"code??????\") == \"10\"\nassert solution(\"??????test\") == \"10\"\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"abaca?b\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == '5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\\n'\nassert solution('dodivthree') == '5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1\\n'\nassert solution('abaca?b') == '5\\n6 5\\n2 3\\n4 6\\n7 4\\n1 2\\n'\nassert solution('bambarbia') == '0\\n'\nassert solution('hellocode') == '0\\n'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hello???\") == \"10\"\nassert solution(\"code??????\") == \"10\"\n\n'''\n\n'''\nSolution in Python"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"7\"\nassert solution(\"dodivthree\") == \"5\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"code??????\") == \"10\"\nassert solution(\"??????test\") == \"10\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"7 8\"\nassert solution(\"dodivthree\") == \"4 9\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('codeforces') == 5\nassert solution('dodivthree') == 7\nassert solution('bambarbia') == 0\nassert solution('hellocode') == 10\n\n\"\"\"\n\n\"\"\"\nI learned the use of the function zip(). I learned this from the discussion section.\n\n>>> zip([1, 2, 3], [4, 5, 6])\n<zip object at 0x7f99f6e7f198>\n>>> list(zip([1, 2, 3], [4, 5, 6]))\n[(1, 4), (2, 5), (3, 6)]\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4 1 1 1\\n\") == \"4\\n4 4\\n1 1\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4\\n1 1 1 1') == '4'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 -4 1 2 2 1 5 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n4 4\") == \"1 1\"\n\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2 3'\nassert solution('7 4 1 2 2 1 5 3') == '3'"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2 3\"\nassert solution(\"4 1 1 1\") == \"4 4\"\nassert solution(\"4\") == \"4\"\n\"\"\"\n\nimport sys\nimport collections\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\ncounter = collections.Counter(a)\nk = len(counter)\n\nl = 0\nr = n - 1\n\nwhile l < r:\n    count_l = counter[a[l]]\n    count_r = counter[a[r]]\n\n    if count_l == count_r:\n        l += 1\n        r -= 1\n    elif count_l > count_r:\n        r -= 1\n    else:\n        l += 1\n\nprint(k)\nfor i in range(k):\n    print(l + 1, r + 1)\n    l = a[l]\n    r = a[r]\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2\\n3 4\\n1 1\\n2 2'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\n\n\"\"\"\n\nfrom collections import Counter\n\nstdin = \"\"\"4\n4 1 2 2 1 5 3\n\"\"\"\n\nstdin = open('./tests/0')"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\\n\") == 7\nassert solution(\"4 2\\n2 78 4 10\\n\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == 0\nassert solution(\"5 1\\n3 7 19 3 3\\n\") == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 11\\n45 1 10 12 11 7\") == 7\nassert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\nassert solution(\"5 3\\n3 7 19 3 3\") == 0\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 11\\n3 9 2 1\\n') == '12'\nassert solution('4 2\\n2 78 4 10\\n') == '12'\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == 7\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n2 78 4 10\\n\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == \"0\"\nassert solution(\"6 11\\n45 1 10 12 11 7\\n\") == \"7\"\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (a[i] + a[j]) % k == 0:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\nassert solution(\"6 11\\n45 1 10 12 11 7\") == 7\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 78 4 10\\n\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == \"0\"\nassert solution(\"6 11\\n45 1 10 12 11 7\\n\") == \"7\"\nassert solution(\"5 4\\n3 7 19 3 3\\n\") == \"0\"\nassert solution(\"5 10\\n3 7 19 3 3\\n\") == \"0\"\n\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 11\\n45 1 10 12 11 7') == '7'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import List\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n\nn = int(input())\nb = list(map(int, input().split()))\n\na = []\nfor i in range(n - 1):\n    a.append(max(b[i], b[i + 1]))\n\nprint(sum(a))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5') == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 5\") == 9\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5') == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"9\"\nassert solution(\"3 10\") == \"25\"\nassert solution(\"10 10\") == \"55\"\nassert solution(\"10 10 10\") == \"55\"\nassert solution(\"10 10 10 10\") == \"55\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\\n\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 5\\n\") == '9'\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\\n1 2 2 10\") == 10\nassert solution(\"1 3 3 100\\n1 2 2 10\") == 110\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nn, m, q = [int(i) for i in input().split()]\n\nscores = [0] * n\nfor _ in range(q):\n    a, b, c, d = [int(i) for i in input().split()]\n    scores[a - 1] += d\n    scores[b - 1] -= d\n    \nbest = 0\nfor score in scores:\n    best = max(best, score)\n\nprint(best)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10\"\"\"\n) == '110'\n\n\"\"\"\n- Use a variable max_score to store the maximum possible score of A\n- Find the maximum possible score of A:\n    - For each quadruple in input:\n        - Calculate the score of A and store it in max_score\n    - Return max_score\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\\n3 4 2 10\") == '110'\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4\\n1 2 3 2\\n2 3 4 3') == '110'\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\nassert solution('4\\n2 2 3 6 9') == '9'\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 6 3\") == \"5\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"3 -7 0\") == \"4\"\nassert solution(\"-1 -2 -3 -4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4 6 3') == '5'\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n1 4 6 3''') == '5'\n\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        A = list(map(int, stdin[1].split()))\n        m_1 = A[0]\n        m_2 = A[1]\n        for i in range(2, len(A)):\n            if A[i] > m_1:\n                m_2 = m_1\n                m_1 = A[i]\n            elif A[i] > m_2:\n                m_2 = A[i]\n        return str(m_1 - m_2)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\n\"\"\"\n\n\"\"\"\n    ****** SAKERMANNNNNNNNNNNNNNNNN ********\n\n    Input:\n        stdin: str\n            Input string from stdin\n\n    Output:\n        stdout: str\n            Correct string to stdout\n\n    Example:\n        Input:\n            4\n            1 4 6 3\n        Output:\n            5\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\n\npoints = []\nfor i in range(0, N):\n    points.append(list(map(float, stdin.readline().split(\" \"))))"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n0 0\n1 0\n0 1\n\"\"\") == \"2.276142\"\n\n\"\"\"\n\u30fb input\nN\nx_1 y_1\n:\nx_N y_N\n\n\u30fb output\naverage length\nYour output will be judged as correct if its absolute difference from the judge's output is at most 10^(-6).\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n0 0\\n1 0\\n0 1\\n0 0\\n1 1\\n0 2\") == \"1.414214\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.276142...\"\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(':0 0:0 0:1 0:1') == \"2.0\"\n\"\"\"\n\nfrom math import sqrt\nfrom functools import reduce"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 0 0 1 0\") == \"2.276142...\"\n\"\"\"\n\n\"\"\"\nhttps://qiita.com/drken/items/73c7a856d9e0d3b58a38\n\n- \u3053\u3053\u306e\u89e3\u7b54\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n- \u3053\u306e\u89e3\u7b54\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u304c\u51fa\u529b\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\nThere are N towns in a coordinate plane. Town i is located at coordinates (x_i, y_i). The distance between Town i and Town j is \\sqrt{\\left(x_i-x_j\\right)^2+\\left(y_i-y_j\\right)^2}.\nThere are N! possible paths to visit all of these towns once. Let the length of a path be the distance covered when we start at the first town in the path, visit the second, third, \\dots, towns, and arrive at the last town (assume that we travel in a straight line from a town to another). Compute the average length of these N! paths.\n\n-----Constraints-----\n - 2 \\leq N \\leq 8\n - -1000 \\leq x_i \\leq 1000\n - -1000 \\leq y_i \\leq 1000\n - \\left(x_i, y_i\\right) \\neq \\left(x_j, y_j\\right) (if i \\neq j)\n - (Added 21:12 JST) All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the average length of the paths.\nYour output will be judges as correct when the absolute difference from the judge's output is at most 10^{-6}.\n\n-----Sample Input-----\n3\n0 0\n1 0\n0 1\n\n-----Sample Output-----\n2.2761423749\n\nThere are six paths to visit the towns: 1 \u2192 2 \u2192 3, 1 \u2192 3 \u2192 2, 2 \u2192 1 \u2192 3, 2 \u2192 3 \u2192 1, 3 \u2192 1 \u2192 2, and 3 \u2192 2 \u2192 1.\nThe length of the path 1 \u2192 2 \u2192 3 is \\sqrt{\\left(0-1\\right)^2+\\left(0-0\\right)^2} + \\sqrt{\\left(1-0\\right)^2+\\left(0-1\\right)^2} = 1+\\sqrt{2}.\nBy calculating the lengths of the other paths in this way, we see that the average length of all routes is:\n\\frac{\\left(1+\\sqrt{2}\\right)+\\left(1+\\sqrt{2}\\right)+\\left(2\\right)+\\left(1+\\sqrt{2}\\right)+\\left(2\\right)+\\left(1+\\sqrt{2}\\right)}{6} = 2.276142...\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 0\\n0 1\") == \"1.41421356237\"\n\"\"\"\nimport math"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 4\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 4\\n\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 4\") == 4\nprint(solution(\"12 4\"))\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 4\\n') == '4'\nprint('Hooray!')\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 4') == '4'\nassert solution('1 1') == '0'\nassert solution('9 6') == '0'\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 4\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 4') == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12 4') == '4'\nassert solution('13 5') == '10'\nassert solution('1 1') == '0'\nassert solution('2 2') == '0'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000\") == 3\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10000''') == '3'\n\"\"\"\nimport math\n\nn = int(stdin.readline())\n\nmin_F = math.inf\n\nfor a in range(1, n + 1):\n    for b in range(1, n + 1):\n        if n == a * b:\n            if min_F > int(math.log10(a) + math.log10(b)):\n                min_F = int(math.log10(a) + math.log10(b))\n\nprint(min_F)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\ncount = 0\n\nfor a in range(2, n+1):\n    for b in range(2, n+1):\n        count += 1 if len(str(a)) * len(str(b)) > len(str(a*b)) else 0\n\nprint(count)"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nfrom itertools import count\nfrom collections import defaultdict"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"3\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"101\") == \"2\"\n\"\"\"\n\nn = int(input(''))\n\ncount_num = 0\nans = 0\n\nfor i in range(1, n):\n    count_num += len(str(i))"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('16') == '2'\nassert solution('32') == '3'\nassert solution('100') == '3'\nassert solution('110') == '3'\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sample_input)) == str(sample_output)\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 9)\nN = int(input())\n\ndp = [[0] * 10 for i in range(N + 1)]\n\nfor i in range(1, 10):\n    dp[1][i] = 1\n\nfor i in range(2, N + 1):\n    for j in range(10):\n        dp[i][j] = dp[i - 1][j] + 1\n\n        if j == 0:\n            dp[i][j] = min(dp[i][j], dp[i - 1][j + 1])\n        elif j == 9:\n            dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])\n        else:\n            dp[i][j] = min(dp[i][j], dp[i - 1][j - 1], dp[i - 1][j + 1])\n\nans = 9\nfor i in range(10):\n    ans = min(ans, dp[N][i])\n\nprint(ans)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n5 5 5\") == \"1\"\nassert solution(\"3 2\\n1 2 3\\n5 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n3 1 2 3\") == 1\n\"\"\"\n\nN, M = list(map(int, stdin.readline().strip().split()))\nK = []\nA = []\n\nfor i in range(M):\n    K.append(list(map(int, stdin.readline().strip().split())))\n    A.append(list(map(int, stdin.readline().strip().split())))"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n2 1 3\\n3 1 2 3\") == '1'\n\"\"\"\n\nn, m = map(int, input().split())\n\nliked_foods = set()\n\nfor _ in range(n):\n    liked_foods.update(set(map(int, input().split())))\n\nprint(len(liked_foods))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\"\"\"\n\nimport sys\n\nn, m = [int(elem) for elem in input().split()]\nliked = [int(elem) for elem in input().split()]\nliked = set(liked)"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == 1\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n\") == \"0.5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\n\"\"\"\n\nfrom math import factorial as f"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\n\"\"\"\nKontrarii\n\nint N\nint K\nint a\n\nfor i = 1 to N:\n    K = K - 1\n    if a is odd:\n        K = K + 1\n    \nprint(K/N)\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nK = 0\nfor i in range(1, N+1):\n    K -= 1\n    if i % 2 == 1:\n        K += 1\nprint(K / N)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\nassert solution(\"2\\n\") == \"0.25\"\nassert solution(\"100\\n\") == \"0.041666666666666664\"\n\"\"\"\n\nimport random\n\nN = int(input())\nodd_number_probability = 0.0\nodd_number_count = 0\n\nfor i in range(N):\n    x = random.randint(1, N)\n    if x % 2 == 1:\n        odd_number_count += 1\n\nodd_number_probability = odd_number_count / N\nprint(odd_number_probability)"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '0.5'\n\n\"\"\"\n\nfrom math import sqrt, ceil"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '0.5'\n\"\"\"\n\nimport sys\nimport os\nimport random\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '0.5'\nprint(solution(stdin))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\n\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"5\\n1\\n2 1\\n1\\n1 1\\n1\\n2 1\\n\") == \"2\"\nassert solution(\"5\\n1\\n2 1\\n1\\n1 1\\n1\\n2 1\\n\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\nassert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\n\"\"\"\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2 3\\n1\\n1\\n1') == '2'\nassert solution('3\\n1\\n1\\n2\\n') == '1'\nassert solution('5\\n1\\n2 2\\n1\\n1\\n1') == '3'\n\n----"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\nassert solution(\"5\\n1\\n2 3\\n3\\n1 4\\n1\\n4 1\\n\") == \"3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nprint(solution(\"nikoandsolstice\"))\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\\n\"\n\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nprint(solution(\"nikoandsolstice\"))\n\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd123\") == \"abcd\"\nassert solution(\"abcd1234\") == \"abcd\"\nassert solution(\"abcd12345\") == \"abcd1234\"\nassert solution(\"abcd123456\") == \"abcd12345\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"bruh\") == \"bruh\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('apple') == 'apples'\nassert solution('codeforces') == 'codefores'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaca'\nassert solution('aab') == 'aaba'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('apples') == 'apples'\nassert solution('apples') == 'apples'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('taknese') == 'takneses'\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('taknese') == 'takneses'\nassert solution('apple') == 'apples'\nassert solution('peach') == 'peaches'\nassert solution('peachs') == 'peacheses'\nassert solution('potato') == 'potatoes'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\n\"\"\"\n739. Daily Temperatures\nGiven an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\n\n-----Constraints-----\n - 1 <= temperatures.length <= 105\n - 20 <= temperatures[i] <= 104\n - 20 <= answer[i] <= 104\n\n-----Input-----\ntemperatures = [73,74,75,71,69,72,76,73]\n\n-----Output-----\nanswer = [1,1,4,2,1,1,0,0]\n\n-----Explanation-----\nanswers = [1,1,1,2,1,1,0,0]\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\n\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nimport sys\n\ntest_data = sys.stdin.read()\ntest_data = test_data.split(\"\\n\")\ntest_data = [x.split(\" \") for x in test_data]\n\nN, K = [int(x) for x in test_data.pop(0)]\nsnacks = [int(x) for x in test_data.pop(0)]\nsnack_count = [0] * N\nsnack_count[-1] = 1\n\nfor i in range(K):\n    s, e = [int(x) for x in test_data.pop(0)]\n    snack_count[s-1] += 1\n    if e < N:\n        snack_count[e] -= 1\n\nresult = 0\nfor snack_count in snack_count:\n    if snack_count!= 0:\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == '1'\nassert solution(\"5 3\\n2\\n1 1\\n2\\n1 1\") == '0'\nassert solution(\"1 5\\n2\\n1 1\\n2\\n1 1\") == '0'\nassert solution(\"1 1\\n2\\n1 1\") == '0'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('2 1 3') == '1'\nassert solution('3 1 2') == '1'\nassert solution('3 2 1') == '0'\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\nimport collections\nimport math\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbbbaaca\") == \"5\"\n\"\"\"\n\nimport os\n\nclass Solution:\n    def main(self):\n        # Prompt\n        print(\"Testing solution for problem statement...\")\n\n        # Test cases\n        test_cases = [\n            (10, \"aabbbbaaca\"),\n        ]\n\n        # Run test cases\n        for t in test_cases:\n            result = solution(t[0], t[1])\n            print(result)\n            assert result == t[-1]\n        print(\"Passed!\")\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaabbbbb\") == \"abbb\"\nassert solution(\"aabbbbbba\") == \"abbbb\"\nassert solution(\"aaabbbbbba\") == \"abababb\"\nassert solution(\"aaaaabbbbbba\") == \"abaaaaabb\"\nassert solution(\"aaaaaabbbbbbbba\") == \"abaaaaabbbb\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbbbaaca\") == 5\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_str) == expected_str\n\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\nUse the condition that adjacent elements with the same color should fuse.\nWe can start by assuming there is no fused element.\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin_lines) == stdout_str\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ababa') == 'ababa'\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaca') == 'aba'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbbbaaca') == 5\n\"\"\"\n\nfrom functools import reduce\nfrom operator import add"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n3\n5 2 4\n'''\n) == 3\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 2 4\") == '3'\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '0'\nassert solution('2 2 3') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199') == '0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 991 1534 2675 4368 13900 55505 22634 17248 57660 35288 21408 60948 26176 62376 31616 14826 47840 12096 23040 47896 12654 54748 21056 14978 28672 58284 3162 24832 55958 31480 43684 39792 18208 53396 22672 12576 59024 43840 14238 67392 43784 13772 36344 52860 27040 13240 14646 22688 320'\nassert solution('2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n5 2 4') == 3\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n5 2 4') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5 2 4') == 3\n\n\"\"\"\n\nimport sys\nimport os\nimport ast\nimport time\nimport random\nimport collections\nimport operator"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"7\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 4\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 1 1 3\"\n    ) == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 3') == 2\n'''"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\n\"\"\"\nMAXIMUM MULTIPLICATION OF TWO NUMBERS\n------------------------------------\nGiven an array of numbers and a number \u2018k\u2019, find the maximum product of \u2018k\u2019 numbers obtained from the array.\n\nExample 1:\nInput: k = 2, arr = [10, 3, 5, 6, 20]\nOutput: 1500\nExplanation: We can get the maximum product by picking 2 numbers from the array, both 2 and 20. \n2 * 3 * 5 * 6 * 20 = 1500.\n\nExample 2:\nInput: k = 3, arr = [10, 3, 5, 6, 20]\nOutput: 2100\nExplanation: We can get the maximum product by picking 3 numbers from the array, all numbers are repeated 3 times. \n10 * 3 * 5 * 6 * 20 = 2100\n\nExample 3:\nInput: k = 4, arr = [5, 10, 3, 9, 15]\nOutput: 4500\nExplanation: We can get the maximum product by picking 4 numbers from the array, \n5 * 10 * 3 * 9 * 15 = 4500.\n\nNOTE: Since the answer can be very large, you only need to return the maximum product modulo 109 + 7.\n\nSolution\n--------\nWe can solve this problem using dynamic programming. We know that the maximum product of a set of size \u2018k\u2019 can \nbe found in O(n) time. Let\u2019s create a dp[i][j] array, where i is the length of the array and j is the number of \nelements in the array which have been selected. Then dp[i][j] will be the maximum product of \u2018j\u2019 numbers \nfrom the array of length \u2018i\u2019.\n\nLet\u2019s consider two cases:\n1. We pick a number from the array of length \u2018i\u2019. We can get the maximum product of \u2018j\u2019 numbers by choosing the \n    largest j such that dp[i][j] is non-negative. We can take the maximum element from dp[i][] and choose \n    the index of this maximum element as the element picked.\n2. If we don\u2019t pick a number from the array of length \u2018i\u2019, we can get the maximum product of \u2018j\u2019 numbers by \n    choosing the largest j such that dp[i][j] is non-negative. Since the maximum product can\u2019t be less than the \n    maximum product of j-1 elements, we can use dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]).\n\nWe initialize the dp[i][j] array in the following way:\ndp[0][0] = arr[0]\ndp[0][1] = arr[1]\ndp[0][2] = arr[2]\ndp[0][3] = arr[3]\ndp[0][4] = arr[4]\nNow, for every element i = 1, 2, 3, 4, \u2026, n, we have the following recursion:\ndp[i][0] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3], dp[i-1][4])\ndp[i][1] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3], dp[i-1][4])\ndp[i][2] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3], dp[i-1][4])\ndp[i][3] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3], dp[i-1][4])\ndp[i][4] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3], dp[i-1][4])\n\nTo find the maximum product of \u2018k\u2019 numbers, we can find the maximum of dp[n][k], where n is the length of the \narray and k is the number of numbers selected. The maximum of dp[n][k] will give us the maximum product of k \nnumbers.\n\nTo find the maximum product of k numbers, we can simply take the maximum element from dp[n][].\n\nComplexity\n---------\nThe time complexity of the above solution is O(n^2). The space complexity is O(n^2).\n\nTime Limit Exceeded\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3') == '2'\nprint(solution(stdin))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n\nA, B, C, K = map(int, input().split())"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\na, b, c, k = [int(i) for i in input().split()]"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 1 1 3''') == '2'\nassert solution('''2 1 1 4''') == '0'\nassert solution('''2 1 1 10''') == '10'\nassert solution('''5 5 2 10''') == '7'\nassert solution('''4 2 3 1''') == '10'\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1') == '2'\nassert solution('1 1 1 3') == '2'\nassert solution('2 1 1 3') == '4'\nassert solution('3 1 1 3') == '6'\nassert solution('3 1 2 3') == '7'\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"3 7\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"3 9\") == \"No\"\nassert solution(\"5 5\") == \"No\"\nassert solution(\"100 100\") == \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\nassert solution(\"5 8\\n\") == \"Yes\"\nassert solution(\"2 3\\n\") == \"No\"\n\"\"\"\nimport collections\nimport itertools\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('7 3\\n') == 'No'\nassert solution('12 6\\n') == 'No'\nassert solution('6 7\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'No'\nassert solution('3 4') == 'Yes'\nassert solution('1 1') == 'Yes'\nassert solution('8 1') == 'Yes'\nassert solution('5 6') == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1 2\n1 3\n2 3\n''') == 2\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(example1)) == '2'\nassert solution(str(example2)) == '0'\n\"\"\"\n\nN, M = [int(n) for n in stdin.readline().split()]\n\ngraph = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = [int(n) for n in stdin.readline().split()]\n    a, b = a-1, b-1\n    graph[a].append(b)\n    graph[b].append(a)\n\nseen = [0]*N\npaths = 0"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3 2\n1 2\n1 3\n2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"3 2\n1 2\n1 3\n2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"4 5\n1 2\n1 3\n2 3\n3 4\n3 5\n1 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4 4\n1 2\n1 3\n2 3\n3 4\n\"\"\") == \"6\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 3\") == \"3\\n\"\nassert solution(\"2 2\\n1 2\\n1 3\") == \"2\\n\"\nassert solution(\"4 3\\n1 3\\n1 2\\n3 4\") == \"1\\n\"\nassert solution(\"2 3\\n1 2\\n1 3\") == \"0\\n\"\nassert solution(\"2 3\\n1 2\\n1 2\") == \"1\\n\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n1 3\") == \"2\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"2\"\n\"\"\"\n\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n-----Time Limit-----\n1\n\"\"\"\n\nimport sys\n\nN, M = [int(x) for x in input().split()]\n\nedges = []\nfor i in range(1, N+1):\n    for j in range(i+1, N+1):\n        a, b = [int(x) for x in input().split()]\n        edges.append((a, b))\n\npaths = 0\nvisited = set()"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n2 3') == 2\nassert solution('4 3\\n1 3\\n2 3\\n1 2') == 1\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\nimport numpy as np\nfrom math import ceil"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('10 -10\\n') == '0'\nassert solution('-100 100\\n') == '0'\nassert solution('5 20\\n') == '0'\nassert solution('5 2\\n') == '3'"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2') == '18'\nassert solution('3 1\\n1\\n1\\n1') == '3'\n\"\"\"\n\nimport sys\n\nfrom itertools import product\n\nN, L = (int(x) for x in sys.stdin.readline().split())\n\nflavors = [0] * (L + N - 1)\nfor i, j in product(range(1, N + 1), range(L + N - 1)):\n    flavors[i + j] = abs(i - j)\n\nprint(min(flavors))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n') == '18'\nassert solution('4 2\\n') == '10'\nassert solution('3 2\\n') == '7'\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nfrom math import inf\nfrom itertools import product\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5 6\") == \"18\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15') == '60'\nprint(solution(stdin))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\") == \"1\\n2\\nFizz\\n4\\nFizz\\n7\\n8\\nFizz\\nBuzz\\n11\\nFizz\\n13\\n14\\nFizzBuzz\\n\"\nassert solution(\"15\") == \"1\\n2\\nFizz\\n4\\nBuzz\\nFizz\\n7\\n8\\nFizz\\nBuzz\\n11\\nFizz\\n13\\n14\\nFizzBuzz\\n\"\n\"\"\"\n\nN = int(stdin.readline())\nresult = ''\n\nfor i in range(1, N + 1):\n    result += ''\n    if i % 3 == 0:\n        result += 'Fizz'\n    if i % 5 == 0:\n        result += 'Buzz'\n    if i % 3!= 0 and i % 5!= 0:\n        result += str(i)\n\nprint(result)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('15') == '60'\n\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15\") == \"60\"\nprint(solution(\"15\"))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('15') == '60'\nassert solution('4') == '10'\nassert solution('2') == '6'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15') == '60'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '15'\nassert solution('15') == '60'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15\") == 60\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('15') == '60'\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom typing import Optional\n\n\nclass FizzBuzz(Enum):\n    Fizz = 3\n    Buzz = 5\n\n    def __str__(self):\n        if self is FizzBuzz.Fizz:\n            return 'Fizz'\n        elif self is FizzBuzz.Buzz:\n            return 'Buzz'\n        else:\n            return str(self.value)\n\n\n@dataclass\nclass FizzBuzz:\n    num: int\n\n    def fizzbuzz(self):\n        if self.num % 3 == 0 and self.num % 5 == 0:\n            return FizzBuzz(self.num)\n        if self.num % 3 == 0:\n            return Fizz(self.num)\n        if self.num % 5 == 0:\n            return Buzz(self.num)\n        return self.num\n\n\nclass Fizz(FizzBuzz):\n    def __init__(self, num):\n        super().__init__(num)\n\n    def __str__(self):\n        return super().__str__().replace('FizzBuzz', 'Fizz')\n\n\nclass Buzz(FizzBuzz):\n    def __init__(self, num):\n        super().__init__(num)\n\n    def __str__(self):\n        return super().__str__().replace('FizzBuzz', 'Buzz')\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n4 7 10 6 5\") == '8'\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n\n\"\"\"\nGiven are an integer X and an integer sequence of length N: p_1, \\ldots, p_N.\nAmong the integers not contained in the sequence p_1, \\ldots, p_N (not necessarily positive), find the integer nearest to X, that is, find the integer whose absolute difference with X is the minimum. If there are multiple such integers, report the smallest such integer.\n\n-----Constraints-----\n - 1 \\leq X \\leq 100\n - 0 \\leq N \\leq 100\n - 1 \\leq p_i \\leq 100\n - p_1, \\ldots, p_N are all distinct.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX N\np_1... p_N\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n6 5\n4 7 10 6 5\n\n-----Sample Output-----\n8\n\nAmong the integers not contained in the sequence 4, 7, 10, 6, 5, the one nearest to 6 is 8.\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\nassert solution(\"1 1\\n1 2\") == \"1\"\nassert solution(\"1 2\\n1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n') == '2'\nassert solution('1\\n3\\n') == '2'\nassert solution('1\\n5\\n') == '4'\nassert solution('1\\n3\\n5\\n7\\n') == '4'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nX, N = input().split()\np = input().split()\n\ndiffs = {}\n\nfor n in p:\n    diff = abs(int(X) - int(n))\n    if diff not in diffs:\n        diffs[diff] = int(n)\n\nmin_diff = min(diffs.keys())\n\nprint(diffs[min_diff])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nfrom math import inf\nfrom collections import defaultdict"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\nX, N = [int(i) for i in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\n-------Test Case 1-------\n3 2\n2 1\n-------Test Case 2-------\n2 3\n1 3\n\"\"\"\n\nH, W = map(int, input().split())\nfor _ in range(H):\n    rows = input().split()\n    h = rows[0]\n    w = rows[1]\n    print(W-int(w)+int(h))"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\nprint(\"Passed!\")\n\n-----\n4 4\n1 1\n2 1\n3 1\n4 1\n\n-----Sample Output-----\nPassed!\n4\n\nThere are 4 rows and 4 columns of cells. When all rows and one column are chosen and painted in black, there is always one white cell that remains.\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n2 1') == '1'\n'''\n\nH, W = [int(i) for i in input().split(' ')]\nh, w = [int(i) for i in input().split(' ')]\n\ncells = H * W\ncells -= (h * w)\n\nprint(cells)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n3 1\") == '0'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2 1') == '1'\nassert solution('1 1\\n1 1') == '1'\nassert solution('4 2\\n2 1') == '0'\nassert solution('3 3\\n1 1') == '2'\nassert solution('2 2\\n2 1') == '1'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\n'''\n\nh, w = [int(x) for x in stdin.split()]\ns = 0\nfor r in range(h):\n    for c in range(w):\n        if r > 0 and r < h - 1 and c > 0 and c < w - 1:\n            s += 1\nprint(s)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n2 2\\n3 3\\n2 2\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n2 1\\n2 3\\n3 1') == '1\\n'\nassert solution('4 3\\n2 2\\n2 3\\n3 1') == '1\\n'\nassert solution('4 3\\n2 3\\n2 1\\n3 1') == '0\\n'\nassert solution('4 3\\n3 3\\n2 1\\n2 2\\n3 1') == '0\\n'\nassert solution('4 3\\n2 2\\n2 3\\n3 1') == '0\\n'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\n\n'''"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n7 4\n3 7 5 1 10 3 20\n''') == '6'\n\nassert solution(\n'''\n7 2\n3 7 5 1 10 3 20\n''') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 7 5 1 10 3 20''') == '6'\nassert solution('''3 7 5 1 10 3 20''') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 4\n3 7 5 1 10 3 20''') == '6'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '-1'\nassert solution('''7 1\n3 7 5 1 10 3 20''') == '3'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '-1'\nassert solution('''7 4\n3 7 5 1 10 3 20\n1''') == '4'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-\"\nassert solution(\"7 3\\n3 7 5 1 10 3 20\") == \"7\"\nassert solution(\"7 4\\n1 7 5 1 10 3 20\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 4\n3 7 5 1 10 3 20''') == '6'\nassert solution('''7 2\n3 7 5 1 10 3 20''') == '-1'\nassert solution('''7 4\n3 7 5 1 10 3 20\n7 10''') == '10'\nassert solution('''7 2\n3 7 5 1 10 3 20\n7 10''') == '-1'\nassert solution('''3 2\n3 7 5 1 10 3 20\n7 10''') == '10'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n.*\\n.*\\n*.') == '-1'\nassert solution('4 5\\n.*\\n**.\\n**.*\\n**.*\\n*.') == '3'\nassert solution('5 5\\n.*\\n**.\\n**.*\\n**.*\\n*.') == '-1'\nassert solution('3 3\\n**.*\\n**.*\\n*.*') == '3'\nassert solution('3 3\\n**.*\\n**.*\\n*.*') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n*.*\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n.*\\n.*\\n.*\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\nassert solution(\"3 3\\n***\\n.*\\n*.\") == \"3\"\nassert solution(\"3 3\\n*.*\\n*.*\\n*.*\") == \"3\"\nassert solution(\"2 2\\n.*\\n.*\") == \"2\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('...*...') == '4'\nassert solution('...*...') == '4'\nassert solution('...*...') == '4'\n\nassert solution('...*...') == '4'\nassert solution('...*...') == '4'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3'\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == '-1'\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == '-1'\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == '-1'\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == '-1'\n\n'''"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\".*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n.*\\n.*\\n*.') == '3\\n3 0 2\\n'\n\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.') == '3\\n2 2 1\\n3 3 1\\n3 4 1\\n'\n\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.') == '-1'\n\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.') == '-1'\n\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"-1\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".*...\\n.*...\\n..****\\n...*.*\\n....*.*\\n........\\n\") == '3'\nassert solution(\"***..\\n.*.*.\\n..*..\\n.*.*.\\n***..\\n\") == '3'\nassert solution(\".*..\\n**.*\\n.*.*\\n.*.*\\n.*.*\\n\") == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"4 4\\n....\\n.*.*\\n.*.*\\n.*.*\") == \"2\"\nassert solution(\"2 2\\n**\\n**\") == \"3\"\nassert solution(\"5 5\\n.**.\\n.**.\\n.**.\\n.**.\\n.**.\") == \"3\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n.*.*\") == \"-1\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('good') == '', \"Should be ''\"\nassert solution('aabc') == 'ab', \"Should be 'ab'\"\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"good\") == \"0\"\nassert solution(\"aabc\") == \"2\"\nassert solution(\"aaa\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcdef') == 'abd'\nassert solution('abcdefg') == 'abcd'\nassert solution('abcdefgh') == 'abcdef'\nassert solution('abcdefghijkl') == 'abdeghi'\nassert solution('abcdefghijk') == 'abdefgj'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aa') == 'def'\nassert solution('aab') == 'abc'\nassert solution('aabx') == 'def'\nassert solution('aabc') == 'abc'\nassert solution('aabcx') == 'def'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabc\") == \"ab\"\nassert solution(\"aa\") == \"\"\nassert solution(\"aaaa\") == \"a\"\n\nprint('all tests passed...')\n\n\n-----\n5\naaaa\n\n0\naaaa\n\n2\nxxyx\n\n2\nxzxz\n\n3\nxxxx\n\n2\nyyyy\n\n2\nxyxy\n\n2\nyyxy\n\n3\nxxxx\n\n3\nxxxx\n\n3\nxxxx\n\n4\nxxxx\n\n2\nxxxz\n\n4\nyyyxy\n\n3\nyyyy\n\n3\nyyyy\n\n3\nxyzxy\n\n4\nxyxy\n\n4\nxyxy\n\n4\nxyxy\n\n5\nxyxz\n\n4\nxyxz\n\n5\nyyxy\n\n5\nyyxy\n\n5\nyyxy\n\n6\nxyxxy\n\n5\nxxyxy\n\n5\nxxyxy\n\n6\nxxxyxy\n\n5\nxxxyxy\n\n6\nxxxyxy\n\n6\nxxxyxy\n\n7\nxxxyxyx\n\n7\nxxxyxyx\n\n6\nxxxyxyxy\n\n8\nxxxyxyxyx\n\n7\nxxxyxyxyxy\n\n8\nxxxyxyxyxyx\n\n9\nxxxyxyxyxyxyx\n\n9\nxxxyxyxyxyxyxy\n\n10\nxxxyxyxyxyxyxyx\n\n10\nxxxyxyxyxyxyxyxx\n\n11\nxxxyxyxyxyxyxyxyxy\n\n11\nxxxyxyxyxyxyxyxyxyx\n\n11\nxxxyxyxyxyxyxyxyxyxy\n\n12\nxxxyxyxyxyxyxyxyxyxyx\n\n12\nxxxyxyxyxyxyxyxyxyxyxy\n\n13\nxxxyxyxyxyxyxyxyxyxyxyx\n\n13\nxxxyxyxyxyxyxyxyxyxyxyxy\n\n14\nxxxyxyxyxyxyxyxyxyxyxyxyx\n\n14\nxxxyxyxyxyxyxyxyxyxyxyxyxy\n\n15\nxxxyxyxyxyxyxyxyxyxyxyxyxyx\n\n15\nxxxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n15\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n15\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n16\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n16\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n16\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n16\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n17\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n17\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n17\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n18\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n18\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n18\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n18\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n19\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n19\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\n\n19\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n19\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n19\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n20\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n20\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n20\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n20\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n21\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n21\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n21\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxxx\n\n22\nxxxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('good') == '0'\nassert solution('aa') == '2'\nassert solution('aabc') == '2'\nassert solution('aaa') == '3'\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '', 'Empty string'\nassert solution('a') == '', '1 character string'\nassert solution('aab') == '', 'Not even string'\nassert solution('aab') == '', 'not even string'\nassert solution('aabc') == '', 'Not even string'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabc\") == \"ab\"\nassert solution(\"aaa\") == \"abc\"\nassert solution(\"zaba\") == \"ab\"\nassert solution(\"zzzzzz\") == \"zab\"\n\nprint('Success')"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aa') == 'def'\nassert solution('aab') == 'ab'\nassert solution('aabc') == 'ab'\nassert solution('aaaa') == 'def'\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('good') == '0'\nassert solution('aabc') == '2'\nassert solution('aaa') == '3'\n\nprint('Success')"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == 'YES\\n10100'\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == 'YES\\n10100'\n\"\"\"\n\nfrom functools import lru_cache\n\nclass Solution:\n    def check(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if not edges:\n            return True\n\n        count = 0\n        for i in range(len(edges)):\n            for j in range(len(edges)):\n                if i == j:\n                    continue\n                if edges[i][0] == edges[j][1] or edges[i][1] == edges[j][0]:\n                    count += 1\n                    break\n\n        return count <= 2\n\n    def helper(self, edges, visited):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type visited: List[bool]\n        :rtype: bool\n        \"\"\"\n        if not edges:\n            return True\n\n        if not self.check(edges):\n            return False\n\n        for i in range(len(edges)):\n            if visited[i]:\n                continue\n\n            visited[i] = True\n            if self.helper(edges, visited):\n                return True\n\n            visited[i] = False\n\n        return False\n\n    def solve(self, n, m, edges):\n        visited = [False] * m\n        return 'YES' if self.helper(edges, visited) else 'NO'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6 5\n1 5\n2 1\n1 4\n3 1\n6 1''') == 'YES\\n10100'\nassert solution('''6 5\n1 5\n2 1\n1 4\n3 1\n6 1''') == 'NO'\nassert solution('''6 4\n1 4\n2 3\n1 5\n3 1\n5 4\n5 6''') == 'NO'\nassert solution('''6 4\n1 5\n2 1\n1 4\n3 1\n5 4\n5 6''') == 'YES\\n011110'\n\n-----Test 0-----\nInput:\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\nOutput:\nYES\n10100\n\n-----Test 1-----\nInput:\n4 4\n1 2\n1 3\n2 3\n4 1\n\nOutput:\nNO\n\n-----Test 2-----\nInput:\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\nOutput:\nYES\n10100\n\n-----Test 3-----\nInput:\n7 10\n1 6\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n10 1\n\nOutput:\nNO\n\n-----Test 4-----\nInput:\n7 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\nOutput:\nYES\n10100\n\n-----Test 5-----\nInput:\n4 5\n1 2\n1 3\n2 3\n4 1\n\nOutput:\nNO\n\n-----Test 6-----\nInput:\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\nOutput:\nYES\n10100\n\n-----Test 7-----\nInput:\n6 4\n1 4\n2 3\n1 5\n3 1\n5 4\n5 6\n\nOutput:\nNO\n\n-----Test 8-----\nInput:\n6 5\n1 6\n2 1\n1 4\n3 1\n6 1\n\nOutput:\nYES\n10100\n\n-----Test 9-----\nInput:\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\nOutput:\nYES\n10100\n\n-----Test 10-----\nInput:\n6 4\n1 6\n2 1\n1 4\n3 1\n5 4\n5 6\n\nOutput:\nNO\n\n-----Test 11-----\nInput:\n6 4\n1 2\n1 3\n2 3\n4 1\n\nOutput:\nYES\n10100\n\n-----Test 12-----\nInput:\n6 4\n1 6\n2 1\n1 4\n3 1\n5 4\n5 6\n\nOutput:\nNO\n\n-----Test 13-----\nInput:\n6 4\n1 6\n2 1\n1 4\n3 1\n5 4\n5 6\n\nOutput:\nYES\n10100\n\n-----Test 14-----\nInput:\n6 4\n1 2\n1 3\n2 3\n4 1\n\nOutput:\nNO\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES\\n10100'\n\nassert solution('''\n5 4\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'NO'\n\nassert solution('''\n5 3\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'NO'\n\nassert solution('''\n5 3\n1 4\n2 1\n1 4\n3 1\n6 1\n''') == 'YES\\n10100'\n\nassert solution('''\n5 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES\\n10100'"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 4\\n1 3\\n2 3\\n1 2\") == \"YES\\n101\"\nassert solution(\"5 4\\n1 5\\n2 1\\n1 4\\n3 4\") == \"NO\\n\"\nassert solution(\"4 4\\n1 4\\n2 3\\n3 4\\n1 2\") == \"NO\\n\"\nassert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 4\\n5 6\") == \"YES\\n10111010\"\nassert solution(\"5 5\\n1 5\\n2 1\\n1 4\\n3 4\\n5 6\") == \"NO\\n\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == solution_output\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_stdin) == test_solution"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"6 4\\n3 1\\n6 1\\n4 1\\n2 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\nassert solution('4 5\\n1 3\\n2 1\\n3 4\\n4 2') == 'NO'\nassert solution('4 3\\n1 2\\n2 3\\n3 4') == 'NO'\nassert solution('4 3\\n1 2\\n3 4\\n4 1') == 'YES\\n1100'\nassert solution('5 3\\n1 2\\n2 3\\n3 4\\n4 5') == 'NO'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"3 3\\n2 1\\n1 2\") == \"0\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == 2\nassert solution('1 7\\n1 7') == 0\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\\n\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open(\"examples/6_2.in\").read()) == \"2 3 4\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n7 7\") == \"0\"\n\nassert solution(\"3 5\\n2 2\\n1 2\\n5 5\\n3 4\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\\n7 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n\n---\n\n\nIn this task you have to compute the difference between two sets. The first line of the input contains the number of elements for the set A. The second line contains A elements. The third line contains the number of elements for the set B. The fourth line contains B elements. Your task is to compute the difference between A and B.\n\nInput\n5\n1 2 3 4 5\n5\n2 3 4 5 6\n\nOutput\n1\n1\n3\n3\n0\n\nExplanation\nSet A has 5 elements {1, 2, 3, 4, 5} and set B has 5 elements {2, 3, 4, 5, 6}. Therefore, the difference between both sets is {1, 1, 3, 3, 0}.\n\n---\n\n\nIn this task you have to compute the sum of two arrays. The first line of the input contains the number of elements for the array A. The second line contains A elements. The third line contains the number of elements for the array B. The fourth line contains B elements. Your task is to compute the sum of both arrays.\n\nInput\n5\n2 5 4 1 3\n5\n5 4 3 2 1\n\nOutput\n12\n10\n\nExplanation\nThe first array is {2, 5, 4, 1, 3} and the second array is {5, 4, 3, 2, 1}. Therefore the sum is 12 {2+5, 5+4, 4+3, 1+2, 3+1}.\n\n---\n\n\nIn this task you have to compute the cross-product of two arrays. The first line of the input contains the number of elements for the arrays A and B. The second line contains A elements. The third line contains B elements. Your task is to compute the cross-product.\n\nInput\n3\n1 2 3\n5\n2 3 4\n\nOutput\n30\n24\n-12\n\nExplanation\nThe first array is {1, 2, 3} and the second array is {5, 2, 3, 4}. Therefore, the cross-product is {30, 24, -12}.\n\n---\n\n\nIn this task you have to find the roots of a quadratic equation. The first line of the input contains the coefficients of the quadratic equation in the format a, b and c. Your task is to find the roots of the equation. If there are no roots or if the equation is non-existent, print \"No\" (without quotes).\n\nInput\n1 -2 2\n\nOutput\nNo\n\n---\n\n\nIn this task you have to sort a given array. The first line of the input contains the number of elements of the array. The second line contains n integers \u2014 the array elements. Your task is to sort the array in non-decreasing order. If the array is already sorted in non-decreasing order, print \"Yes\" (without quotes).\n\nInput\n5\n2 1 4 1 3\n\nOutput\nYes\n\n---\n\n\nIn this task you have to print the numbers of the following set. The first line of the input contains the number of elements n. The second line contains n distinct integers that may be both positive and negative. Your task is to print all these numbers in non-decreasing order, separating them by spaces. If the set is empty, print \"Empty\" (without quotes).\n\nInput\n5\n4 3 -1 2 -3\n\nOutput\n-3 -1 2 3\n\n---\n\n\nIn this task you have to count the number of prime numbers in a given range of integers. The first line of the input contains the lower border of the range. The second line contains the upper border of the range. Your task is to count the number of prime numbers in the given range. Print the result in the following format:\n\nInput\n2\n100\n200\n\nOutput\n10\n\n---\n\n\nIn this task you have to print the factorial of a given number. The first line of the input contains an integer n. Your task is to compute the factorial of the integer. If n = 0 or n = 1, print 1 (without quotes).\n\nInput\n5\n\nOutput\n120\n\n---\n\n\nIn this task you have to print all the numbers from 1 to n which are not multiples of m. The first line contains the number n. The second line contains the number m. Your task is to print all the numbers from 1 to n (inclusive) which are not multiples of m, in the same order as they appear in the first line. If there are no such numbers, print \"No\" (without quotes).\n\nInput\n5\n3\n\nOutput\n1\n2\n4\n5\n\n---\n\n\nIn this task you have to print all the elements of the array that are not multiples of m. The first line contains the number n (the size of the array). The second line contains n integers. Your task is to print all the elements of the array that are not multiples of m (inclusive), in the same order as they appear in the first line. If there are no such elements, print \"No\" (without quotes).\n\nInput\n4\n1 3 5 7\n\nOutput\nNo\n\n---\n\n\nIn this task you have to compute the sum of the first n positive integers. The first line of the input contains an integer n. The second line contains n integers, the numbers in the array. Your task is to compute the sum of the first n integers. Print the result in the following format:\n\nInput\n5\n1 2 3 4 5\n\nOutput\n15\n\n---\n\n\nIn this task you have to compute the factorial of a given number. The first line of the input contains an integer n. Your task is to compute the factorial of the number. If n = 0 or n = 1, print 1 (without quotes).\n\nInput\n5\n\nOutput\n120\n\n---\n\n\nIn this task you have to compute the Fibonacci number of the index. The Fibonacci number of the first n indices is computed using the following formula:\n\nInput\n5\n\nOutput\n5\n\n---\n\n\nIn this task you have to print the nth Fibonacci number. The first line of the input contains an integer n. Your task is to compute the nth Fibonacci number. Print the result in the following format:\n\nInput\n10\n\nOutput\n55\n\n---\n\n\nIn this task you have to print all the integers from n1 to n2 (inclusive) in descending order. The first line of the input contains an integer n1. The second line contains an integer n2. Your task is to print all the integers from n1 to n2 (inclusive) in descending order"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\nassert solution(\"4 8 2 3\") == \"1\"\nassert solution(\"4 7 2 3\") == \"0\"\nassert solution(\"4 9 2 7\") == \"0\"\nassert solution(\"4 8 2 5\") == \"0\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4 9 2 3') == '2'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4 9 2 3\n''') == 2\n\nassert solution('''\n4 9 2 1\n''') == 0\n\nassert solution('''\n1 2 2 4\n''') == 0\n\nassert solution('''\n1 2 3 3\n''') == 1\n\nassert solution('''\n2 5 6 3\n''') == 2"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 2 3') == 2\nassert solution('1 1 1 1') == 0\nassert solution('1 2 1 2') == 1\nassert solution('1 2 2 1') == 1\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 2 3 4') == '0'\n\"\"\"\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd\n\na, b, c, d = map(int, stdin.readline().split())\n\ndividable_by_c = (b - a + 1) // c\ndividable_by_d = (b - a + 1) // d\n\nc = gcd(c, d)\n\ndividable_by_c = dividable_by_c // c\ndividable_by_d = dividable_by_d // d\n\nprint(dividable_by_c + dividable_by_d - 1)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 9 2 3\") == 2\nprint(\"PASSED\")\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == 2\nprint(\"Test PASSED\")"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nprint(solution(\"123456789\"))"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123456789') == 'Yes'\n\n\"\"\"\nfrom sys import stdin\nimport math"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234567890\") == \"No\"\nassert solution(\"1234567899\") == \"No\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nprint(\"Yes\" if n % 9 == 0 else \"No\")\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1112223334444\") == \"No\"\nassert solution(\"1112223333\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nGiven a number N. Check if N is a multiple of 9.\n\nInput Format\nThe first and only line of the input contains the number N.\n\nOutput Format\nThe output should contain a single line. The line should contain the string Yes if N is a multiple of 9, otherwise it should contain the string No.\n\nSample Input 0\n145\n\nSample Output 0\nYes\n\nSample Input 1\n12345\n\nSample Output 1\nNo\n\nExplanation\n145 is a multiple of 9.\n12345 is not a multiple of 9.\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('127\\n') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"30\") == \"4\"\nassert solution(\"1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('127\\n') == '4'\nprint(solution(stdin.read()))"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"127\") == \"4\"\nprint(solution(\"127\"))\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nfrom math import log, ceil"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n3\n5\n7\n9''') == '2'\nassert solution('''1\n3\n5\n7\n9''') == '2'\nassert solution('''1\n3\n5\n7\n9''') == '3'\nassert solution('''1\n3\n5\n7\n9''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\n\nnum = deque()\ncount = 0\n\nwhile n > 0:\n    num.append(n % 9)\n    n = n // 9\n    count += 1\n    \nprint(count)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('6') == '6'\nassert solution('9') == '9'\nassert solution('36') == '6'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zodiac\") == \"odd\"\nassert solution(\"ceiling\") == \"ceil\"\nassert solution(\"computer\") == \"omput\"\n\"\"\"\n\nimport string\n\ns = input()\nt = input()\n\nprint('Yes' if s == t[-1] + t[:-1] else 'No')\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"toronto\") == \"No\"\nassert solution(\"new york\") == \"No\"\nassert solution(\"la\") == \"Yes\"\n\"\"\"\n\ns = input()\nt = input()\n\nrotated_s = t + t[:len(t) - 1]"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Kyoto\") == \"Tokyo\"\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcd') == 'dcba'\nassert solution('1234') == '4321'"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('o') == 'k'\nassert solution('k') == 'o'\n\nassert solution('xy') == 'yx'\nassert solution('x') == 'x'\n\nassert solution('abc') == 'cab'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\nprint(solution('kyoto'))\nprint(solution('tokyo'))\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"tokyo\") == \"Yes\"\nassert solution(\"kyoto\") == \"Yes\"\nassert solution(\"vancouver\") == \"No\"\n\nprint(\"Passed all tests... \")"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fool\") == \"no\"\n\n-------\n// C++"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cabacc') == 1\nassert solution('abc') == 0\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cabacc\") == \"1\"\nassert solution(\"abc\") == \"0\"\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cabacc') == '1'\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cabacc\", \"abc\") == 1\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcd') == 0\nassert solution('cab') == 2\nassert solution('cabba') == 2\n\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cabacc\") == \"1\"\nprint(\"Test 1\")\nassert solution(\"abc\") == \"0\"\nprint(\"Test 2\")\nassert solution(\"abbacc\") == \"1\"\nprint(\"Test 3\")\nassert solution(\"abcd\") == \"2\"\nprint(\"Test 4\")\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"26\"\nprint(\"Test 5\")\nprint(\"All tests passed.\")\n\nprint(solution(\"cabacc\"))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cabacc\", \"abc\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 12 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 5\") == \"5\"\nassert solution(\"6 4 5\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 4 7\") == \"1\"\nassert solution(\"2 4 8\") == \"2\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 12 2\\n') == '2'\nprint('PASSED')"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8 12 2\n''') == '2'\nassert solution('''8 8 2\n''') == '1'\nassert solution('''8 19 2\n''') == '7'\nassert solution('''8 20 2\n''') == '8'\nassert solution('''8 19 3\n''') == '8'\n\n'''\n\nImplement a data structure, that will be initialized with a string.\nIt should be able to do the following:\n\n- insert one character\n- insert a substring\n- retrieve the prefix from the current index to the given index (inclusive)\n- retrieve the suffix from the given index to the current index (inclusive)\n\nExample\n\nInserting a substring \"xyz\" into an initially empty structure:\n> insert substring\n> output: \"xyz\"\n\nInserting one character:\n> insert char\n> output: \"x\"\n\nInserting a substring:\n> insert substring\n> output: \"xya\"\n\nGetting the prefix:\n> get prefix from 1 to 3\n> output: \"xya\"\n\nGetting the suffix:\n> get suffix from 5 to 8\n> output: \"xyz\"\n\nInserting a character:\n> insert char\n> output: \"xyz\"\n\n'''\n\n'''\nhttps://www.geeksforgeeks.org/suffix-tree-set-1-introduction/\n\nFor an input string, the suffix tree is constructed in O(n) time complexity.\nBefore the tree can be used to efficiently search for matches, it must be\nfully built. When a tree is built, it can be made to be more efficient by\nfilling in the suffix links, which will lead to a more compact representation\nof the tree.\n\nThe suffix links can be used to efficiently search for matches. This is done\nby following the link to the end of a string. In the suffix tree, all the\nsuffixes that match a given prefix are listed in a linked list called the\nsuffix link, and the head of the list is the end of the longest suffix that\nmatches the prefix.\n\nIn order to efficiently search for matches, the suffix links are built\nautomatically. The construction of the suffix links takes O(n^2) time.\n\nHowever, the suffix links are not built for all the nodes, only for those\nnodes whose string is longer than a given value, which is called the maximum\nsuffix link length.\n\nWe can build the suffix links for all the nodes of the tree in O(n^2)\ntime. However, the maximum suffix link length can be reduced to O(n) time\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a_input) == a_output\nassert solution(b_input) == b_output\nassert solution(c_input) == c_output\n'''\n\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nA, B, K = [int(x) for x in stdin.split(\" \")]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 12 2') == 2\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\nx = int(input())\n\nhappiness = 0\n\nfor i in range(3):\n    if x % 500 == 0:\n        happiness += 5 + i * 100\n        x //= 500\n    else:\n        happiness += 5\n        x //= 500\n\nhappiness += x * 5\n\nprint(happiness)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\") == \"2000\"\nprint(solution(\"1024\"))\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\n\nX = int(sys.stdin.readline())\n\ncoins = Counter()\nfor i in range(1, 6):\n    coins[i] = int(sys.stdin.readline())\n\nresult = 0\nfor x in coins.keys():\n    if x < 5:\n        result += X // 5 * coins[x]\n        X = X % 5\n    elif x < 100:\n        result += X // 100 * coins[x]\n        X = X % 100\n    elif x < 500:\n        result += X // 500 * coins[x]\n        X = X % 500\n    elif x < 1000:\n        result += X // 1000 * coins[x]\n        X = X % 1000\n    elif x < 5000:\n        result += X // 5000 * coins[x]\n        X = X % 5000\n    else:\n        result += X // 10000 * coins[x]\n        X = X % 10000\n\nprint(result)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100') == '100'\nassert solution('10') == '10'\nassert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('1024') == '2048'\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 0\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 4\nassert solution('5') == 5\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline())"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))\n\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512\") == \"2003\"\nassert solution(\"384\") == \"2306\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nnums = list(map(int, sys.stdin.readline().strip().split()))\nres = sum([(x - nums[i]) ** 2 for i, x in enumerate(nums)])\nprint(res)"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"2 4\") == \"5\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4\") == \"5\"\n\n\"\"\"\nfrom __future__ import annotations\n\nimport math\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 4\n''') == '5'\n\n------"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n') == '3\\n0\\n3\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 4 8\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 4\n''') == '5'\n\n'''\nYou are given a string S.\nYour task is to find out if the string S contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.\n\nInput Format\n\nA single line containing a string S.\n\nConstraints\n\n0 < len(S) <= 1000\n\nOutput Format\n\nIn the first line, print True if S has any alphanumeric characters. Otherwise, print False.\nIn the second line, print True if S has any alphabetical characters. Otherwise, print False.\nIn the third line, print True if S has any digits. Otherwise, print False.\nIn the fourth line, print True if S has any lowercase characters. Otherwise, print False.\nIn the fifth line, print True if S has any uppercase characters. Otherwise, print False.\nSample Input\n\nqA2\nSample Output\n\nTrue\nTrue\nTrue\nTrue\nTrue\n'''"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n\") == \"5\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1, 2) == \"1\"\nassert solution(2, 1) == \"1\"\nassert solution(1, 1) == \"0\"\nassert solution(1, 2) == \"1\"\nassert solution(5, 2) == \"3\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 2\nassert solution(1) == 1\nassert solution(10) == 2\nassert solution(2) == 2\nassert solution(4) == 2\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == \"3\"\nprint(solution(\"4 10\"))\n\n----------------------"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 10') == 3"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == '3'\n\nassert solution('1 1') == '0'\n\nassert solution('3 6') == '2'\n\nassert solution('3 6') == '2'\n\nassert solution('1 1') == '0'"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 10\") == \"3\"\nassert solution(\"5 15\") == \"2\"\n\n-------------------\n|   *   |   *   |\n|   *   |   *   |\n|   *   |   *   |\n-------------------\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"3\"\n\n---"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\nimport sys\nimport re\n\nA, B = list(map(int, re.findall(r'\\d+', sys.stdin.readline().strip())))\n\nprint(B - A + 1)"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(S = \"CSS\") == 2\nassert solution(S = \"CSR\") == 0\nassert solution(S = \"CCR\") == 1\nassert solution(S = \"SSR\") == 2"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\nassert solution(\"CCS\") == \"1\"\nassert solution(\"RSS\") == \"1\"\nassert solution(\"CSR\") == \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'\n\nprint('Success')\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('CSS') == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == 2\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 5 7') == '2'\n\nassert solution('5\\n1 3 5 4 2') == '2'\n\nassert solution('6\\n1 3 5 4 2 6') == '0'\n\nassert solution('7\\n1 3 5 4 2 6 7') == '2'\n\nassert solution('8\\n1 3 5 4 2 6 7 8') == '0'"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 5 4 2\") == 2\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 5 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 3 5 4 2''') == 2\n\"\"\"\n\n\"\"\"\n5\n1 3 5 4 2\n\n2\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 5 4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n 1 3 5 4') == '2'\nassert solution('5\\n 1 3 5 4 2') == '2'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nprint(solution('5\\n1 3 5 4 2'))\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 5 4 2\") == 2\n\"\"\"\n\n\"\"\"\n7.2\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq n \\leq 10^5\n - p is a permutation of {1,\\ 2,\\...,\\ n}\n\n-----Input-----\nn\np_1 p_2... p_n\n\n-----Output-----\nPrint the number of elements p_i (1 < i < n) that satisfy the condition.\n\n-----Sample Input-----\n10\n1 3 2 4 5 6 7 8 9 10\n\n-----Sample Output-----\n5\n\nThe first five elements (1, 3, 2, 4, 5) satisfy the condition.\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == output\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"5.480\"\n\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.040\"\n\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.720\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport re\nfrom typing import List, Dict, Tuple\n\nfrom generator.constraints import *\nfrom generator.hint import Hint\nfrom generator.rand import Rand\nfrom generator.spec import Spec\nfrom generator.weight import Weight\n\n_RE_NUM = re.compile(r'\\d{2}\\.\\d{2}')\n\n\nclass Problem(Spec):\n    def generate_hint(self) -> List[Hint]:\n        return [\n            Hint('solution'),\n        ]\n\n    def __init__(self, cnt: int = Rand.range(1, 10)) -> None:\n        super().__init__(cnt)\n        self._solution = 0\n\n    def get_bound(self, weight: Weight) -> Tuple[float, float]:\n        return 0.0, 1.0\n\n    def init_solution(self) -> None:\n        self._solution = 0\n\n    def eval_hint(self, hint: Hint, text: str) -> Tuple[bool, str]:\n        match = _RE_NUM.search(text)\n        if match is not None:\n            x = float(match.group())\n            if abs(x) < 1000:\n                self._solution += 1\n                return True, text +'->'+ str(x)\n        return False, text\n\n    def check(self, solution: Dict[int, int]) -> bool:\n        if len(solution) < 2:\n            return False\n        # check the first\n        if not (abs(solution[0] - self._solution) <= 0.001):\n            return False\n        # check the second\n        for i in range(1, len(solution)):\n            if not (abs(solution[i] - self._solution) <= 0.001):\n                return False\n        return True\n\n    def check_solution(self, solution: Dict[int, int]) -> bool:\n        return self.check(solution)\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '6.040'\nassert solution('7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04') == '6.720'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.720\"\n\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5.4 0.6\") == \"5.610\"\nassert solution(\"5.4 0.6\") == \"5.610\"\nassert solution(\"5.4 0.6\") == \"5.610\"\nassert solution(\"5.4 0.6\") == \"5.610\"\nassert solution(\"5.4 0.6\") == \"5.610\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"-1\"\nassert solution(\"5 26\") == \"-1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 2\\n5 5 5 5 5\") == '-1'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\nassert solution('5 27\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\nassert solution('5 16\\n5 5 5 5 5') == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import accumulate\nfrom typing import List\n\nINF = 10 ** 9\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '1 3'\nassert solution('7 4') == '7 3 1 3'\nassert solution('15 2') == '1 1'\nassert solution('8 7') == '1 1 1 1 1 1 1 1'\nassert solution('8 6') == '1 2 1 2 1 2 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\n\n---\nclass Node:\n    def __init__(self, left=None, right=None):\n        self.left = left\n        self.right = right"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\\n\") == '1 2 3\\n', 'check me'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\\n\") == '7 3 1 3\\n', 'check me'\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n'''"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"7 3\n1 2 3 2 4 3 1\"\"\") == \"1 2 3\"\nassert solution(\"\"\"10 4\n1 3 1 3 10 3 7 7 12 3\"\"\") == \"7 3 1 3\"\nassert solution(\"\"\"15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\"\"\") == \"1 1\"\n\"\"\"\n)"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n9 9\n10 8\n5 3\n4 3''') == '5'\nassert solution('''2 4\n1 2 3 4\n10 3 7 3''') == '0'\nassert solution('''6 1\n3\n6\n2\n5\n1\n4''') == '3'\n\n-----Problem-----\n\nThe number of paths in a maze is the number of ways to go from the top left corner to the bottom right corner.\n\nFind the number of paths in a maze of dimensions `n` by `m`.\n\n-----Constraints----\n\n`n` and `m` are integers within the range `[1..50,000]`.\n\nThe maze is `2`-connected, i.e. there are paths between any pair of neighbouring cells.\n\nThe solution will run on Java, C, C++, C#, VBA, F#, Ruby, Go, PHP, Python, JavaScript, Dart, PHP, Ruby, Julia, Haskell, PureScript, TypeScript, R, Scala, Lua.\n\n-----My solution-----\n\n```python3\nimport sys\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\\n\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3\\n') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nprint('Passed!')"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == 5\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == 0\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == 3\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\n\nimport collections"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xxxxxxx') == 8\nassert solution('xxxxii') == 1\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('xxxxx') == 0\nassert solution('xxxxxxxxxx') == 8\nassert solution('xxxxxxxxx') == 8\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xxxxxxxxxx') == '8'\nassert solution('xxx') == '0'\nassert solution('xxix') == '0'\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxxx\") == \"0\"\nassert solution(\"xxxxxx\") == \"0\"\nassert solution(\"xxxxxxx\") == \"1\"\nassert solution(\"xxxxxii\") == \"1\"\nassert solution(\"xxxxxiii\") == \"1\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xx') == '0'\nassert solution('exxx') == '1'\nassert solution('exxxi') == '2'\nassert solution('exxxii') == '0'\nassert solution('exxxiii') == '3'\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\nassert solution('xxxxxxxxxx') == '8'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"6\") == \"108\"\nassert solution(\"2\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == '27'\nassert solution(\"1\\n\") == '3'\nassert solution(\"4\\n\") == '48'\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nr = int(stdin.readline())\nprint(3 * r ** 2)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '48'\nprint('PASSED')\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '48'"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n') == '48'\n\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n') == '48'"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"48\"\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n') == 'unsafe'\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'unsafe'\nassert solution('3 3') =='safe'\nassert solution('4 5') == 'unsafe'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == 'unsafe'\nassert solution(\"1 1\") =='safe'\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('5 5') =='safe'\nassert solution('2 3') == 'unsafe'\nassert solution('6 1') == 'unsafe'\nassert solution('9 10') =='safe'\n\n-----Solution-----\ns, w = map(int, stdin.readline().split())\nprint('unsafe' if w >= s else'safe')\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5, 4) == \"unsafe\"\nassert solution(100, 200) == \"unsafe\"\nassert solution(1, 1) == \"safe\"\nassert solution(0, 0) == \"safe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == 'unsafe'\n'''\n\nimport math"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\nassert solution('4 3') =='safe'\nassert solution('10 5') == 'unsafe'\nassert solution('10 10') =='safe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n') == 'unsafe'\n\n\"\"\"\n\ns, w = map(int, input().split())"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\nS, W = input().split()"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == 6\nassert solution(\"1 1 1\") == 0\n\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '6'\nprint('Test passed')\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 4 5''') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('1 100 100') == '100'\nassert solution('1 10 2') == '2'\nassert solution('1 1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 11 4') == 4\nassert solution('1 1 1') == 1\nassert solution('1 2 1') == 2\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\"\n\na, b, c = map(int, stdin.split(' '))\nprint(c//a+1 if c%a==0 else c//a)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2, 11, 4) == 4\nprint('test passed')\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('11 11 11') == '3'\nassert solution('5 6 7') == '0'\n\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\"\n\nA, B, C = [int(i) for i in stdin.split()]\n\nprint(A // B)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == 4\nassert solution('2 1 1') == 1\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n\") == \"10\"\nprint(\"Test pass.\")"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"10\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == 10\n\n\"\"\"\n\nimport math\n\na, b, t = [int(i) for i in stdin.split()]\n\nprint(a * (b * math.ceil(t / a)) + (t % a) * b)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(A=3, B=5, T=7) == 10\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\") == 10\nprint(solution(\"3 5 7\"))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('1 1 1') == '3'\nassert solution('1 2 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\") == 10\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1\\n') == '1'\nassert solution('3 5 7\\n') == '10'\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 7') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\\n\") == 10\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 500 600\") == 'OK'\nassert solution(\"5 7 10\") == 'NG'\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 500 600\\n\") == \"OK\"\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\n\n\"\"\"\n\n\"\"\"\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nExample:\n\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n\"\"\"\n\nclass ListNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    # @param A : head node of linked list\n    # @param B : head node of linked list\n    # @return the head node in the linked list\n    def addTwoNumbers(self, A, B):\n        carry = 0\n        sum = ListNode(0)\n        tail = sum\n        while A is not None or B is not None:\n            x = 0 if A is None else A.val\n            y = 0 if B is None else B.val\n            s = carry + x + y\n            tail.next = ListNode(s % 10)\n            tail = tail.next\n            carry = s // 10\n            A = A.next if A is not None else None\n            B = B.next if B is not None else None\n        if carry > 0:\n            tail.next = ListNode(carry)\n        return sum.next"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"4 500 600\") == \"NG\"\nassert solution(\"4 4\") == \"NG\"\nassert solution(\"0 0\") == \"OK\"\nassert solution(\"1 1\") == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '7\\n500 600'\n) == 'OK'\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"500 600\") == \"OK\"\nassert solution(\"300 350\") == \"NG\"\nassert solution(\"100 200\") == \"OK\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 500 600') == 'OK'\nassert solution('1 10') == 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n7\n500 600\n\n\"\"\"\n) == \"OK\"\n\"\"\"\n---PROBLEM 2---\n\nFor this problem, your function will be called for every test case, which is an array of integers.\n\nYou must return the total number of integers in the array that have their sum of digits equal to 10.\n\nFor example, if the array is [12, 345, 2, 6, 7896], then your function should return 2.\n\nThis problem is a good example of getting familiar with:\n\n- How to handle input from an array of integers.\n- How to return a value for a given condition.\n\n-----Constraints-----\n - Each integer is between 1 and 10000.\n\n-----Input-----\nThe input array will contain a non-negative integer.\n\n-----Output-----\nReturn the total number of integers in the array that have their sum of digits equal to 10.\n\n-----Sample Input-----\n[12, 345, 2, 6, 7896]\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n[111, 599, 1111]\n\n-----Sample Output-----\n3\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"500 600\") == \"OK\"\nassert solution(\"10000 5 10\") == \"NG\"\n\"\"\"\n\nK, A, B = [int(input_) for input_ in input().split()]\nprint(\"OK\" if A % K <= B % K <= K - A % K else \"NG\")\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 500 600\") == \"OK\"\nassert solution(\"7 1000 1000\") == \"NG\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n8 3\n\"\"\") == \"\"\"\n2.6666666667\n\"\"\"\nprint(solution(stdin))\n\n\"\"\"\n\uc704\uc5d0 \ucf54\ub4dc\ub97c \uc9dc\ubd24\ub354\ub2c8 \uc798 \ub098\uc654\ub2e4.\n\uc9c8\ubb38\uc774 \ub108\ubb34 \ub9ce\uc544\uc11c \ud0c0\ub780\ub2e4.\n\ub108\ubb34 \ud798\ub4e4\uc5b4\uc11c \uc798 \uc9e4\ub9b0\ub2e4.\n\n\uc544\ub9c8\ub3c4 \uc774\ub807\uac8c \uc9e4\ub9ac\ub294 \uac74\uac00..?\n\n\ubb34\uc5c7\uc774 \uc774\ub807\uac8c \uc9dc\uc57c \ud558\ub294\uc9c0 \uc880 \uc608\uc05c\ubb38\uc81c\ub97c \uc880 \uc5b4\ub5bb\uac8c \ud480\uc5b4\uc57c \ud558\ub294\uc9c0 \ub354 \uc54c\uc544\ubcf4\ub294 \uc911...\n\n\uc544\uc9c1\uc740 \ub09c\uc774\ub3c4\uac00 \uc7ac\ubbf8\uc5c6\uaca0\ub2e4...\n\n\ub2e4\uc74c\uc5d0 \ud480\uae30\ub85c \ud558\ub294 \ucf54\ub4dc\ub294 \uc9dc\ub9ac\ub124\n\n\ubb38\uc81c \uaf3c\uaf3c\ud788 \uc77d\uc790..\n\n\uadf8\ub7fc \ud604\uc7ac \uc9dc\uc99d\uc774 \uc788\ub294 \uc0c1\ud669\uc740 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560\uc9c0 \uc54c\uc544\ubcf4\uc790..!\n\"\"\"\n\n\"\"\"\n\uc5ec\uae30\uc11c\ub294 \uc22b\uc790\ub4e4\uc744 \ubcc0\uc218\uc5d0 \ub2f4\ub294\ub2e4.\n\uadf8\ub9ac\uace0 \uadf8 \uac12\uc744 \ud568\uc218\ub85c \ud638\ucd9c\ud558\uace0 \uadf8 \uac12\uc774 \ud2c0\ub9ac\uba74 \uadf8 \uac12\uc774 \uc815\ub2f5\uc774 \uc544\ub2d0\uac83\uc774\ub2e4.\n\n\uc5b4\ub5bb\uac8c \uc9dc\uc57c\ud560\uc9c0 \uc0dd\uac01\ud574\ubcf4\uc790.\n\n\uc608\ub97c \ub4e4\uc5b4 \ub2e4\uc74c\uacfc \uac19\uc774 \uc2dd\uc774 \uc8fc\uc5b4\uc84c\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uc790.\n\n12 + 3 = 15\n\n\uc5ec\uae30\uc11c 12\uc640 3\uac00 \uc2dd\uc73c\ub85c \uac01\uac01 \ub4e4\uc5b4\uac04\ub2e4.\n\n\uadf8\ub9ac\uace0 15\uc640 3\uac00 \uc2dd\uc73c\ub85c \uac01\uac01 \ub4e4\uc5b4\uac04\ub2e4.\n\n\uadf8\ub9ac\uace0 \ub450 \uc2dd\uc774 \uc2dd\uc73c\ub85c \ub4e4\uc5b4\uac04\ub2e4.\n\n\uc774\ub7ec\ud55c \uac83\uc744 \uc5b4\ub5bb\uac8c \ud480\ub824\uba74?\n\n\uc6b0\uc120 12\uac00 3\uc73c\ub85c \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c0\ub294 \uc9c0 \ud655\uc778\ud574\ubcf4\uc790.\n\n12\ub97c 3\uc73c\ub85c \ub098\ub208 \ub098\uba38\uc9c0\ub294 0\uc73c\ub85c \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4\ub2e4.\n\n\uadf8\ub9ac\uace0 3\ub3c4 12\ub85c \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4\ub2e4.\n\n\uc989 12\ub294 3\uc73c\ub85c \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c0\uace0 3\ub3c4 12\uc73c\ub85c \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4\ub2e4.\n\n\uc774\ub7ec\ud55c \uac83\uc744 \uae30\uc900\uc73c\ub85c \uc2dd\uc73c\ub85c \ub098\ub208\ub2e4.\n\n\ubb3c\ub860 \uacc4\uc18d \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c0\ub294 \uc9c0 \ud655\uc778\ud574\ubd10\uc57c \ud55c\ub2e4.\n\n\uc5ec\uae30\uc11c \uc774\ub7f0 \uacfc\uc815\uc744 \uac70\uce58\uba74 \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c0\ub294 \uc9c0 \ud655\uc778\ud558\ub294 \uac8c \uc5b4\ub5a8\uae4c?\n\n\uc608\ub97c \ub4e4\uc5b4 12\ub97c 3\uc73c\ub85c \ub098\ub208 \ub098\uba38\uc9c0\uac00 0\uc774\ub77c\uba74 \uadf8\uac8c \uc815\ub2f5\uc774\ub2e4.\n\n\uadf8\ub9ac\uace0 \uac19\uc740 \uacfc\uc815\uc744 3\uc758 \ubc30\uc218\ub4e4\uc5d0 \ub300\ud574 \ud55c \ubc88\uc529 \ubc18\ubcf5\ud55c\ub2e4.\n\n\uc65c \uc774\ub7f0 \uc810\uc774 \uc5c6\uc744\uae4c?\n\n\uc5ec\uae30\uc11c\ub294 \uc774\ub7f0 \uc0dd\uac01\uc744 \ud574\uc57c\ud55c\ub2e4.\n\n1. 12\ub97c 3\uc73c\ub85c \ub098\ub208 \ub098\uba38\uc9c0\uac00 0\uc774\ub77c\uba74\n\n12\uac00 3\uc73c\ub85c \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4\ub2e4\ub294 \ub73b\uc774\ub2e4.\n\n\uadf8\ub798\uc11c 12\ub294 3\uc73c\ub85c \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4\ub2e4.\n\n\uadf8\ub9ac\uace0 \ub098\uba38\uc9c0\uac00 0\uc774\ub2e4.\n\n\uc774\ub7ec\ud55c \uac83\uc744 \uc5b4\ub5bb\uac8c \uac80\uc99d\ud560 \uac83\uc778\uac00?\n\n\ubb3c\ub860 \uadf8\ub0e5 \uac01\uac01\uc758 \ubaab\uacfc \ub098\uba38\uc9c0\ub97c \uac01\uac01 \uac80\uc99d\ud55c\ub2e4.\n\n\uc774\ub7ec\ud55c \uac83\uc744 \uc5b4"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\nprint(solution(\"8 3\"))\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666...\"\n\"\"\"\n\nT, X = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3') == '2.6666666667'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\n\nhours_passed = T * X\n\nhours_passed /= 3600\n\nhours_passed = round(hours_passed)\n\nprint(hours_passed)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"2.6666...\"\n\"\"\"\n\nT, X = map(int, input().split())\n\nprint(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\") == \"2.666667\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, 2, 5) == 1\nassert solution(8, 12, 10) == 2\nassert solution(20, 5, 30) == 0\n\n\"\"\"\nfrom typing import List\nimport math\n\nclass Solution:\n    def solution(self, A: int, B: int, C: int) -> int:\n        if (B > C):\n            if (B <= A):\n                return B\n            else:\n                return A\n        else:\n            if (C <= A):\n                return C\n            else:\n                return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B <= A:\n            return B\n        if C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C\n        else:\n            return A\n    def solution(self, A: int, B: int, C: int) -> int:\n        if B > C:\n            B, C = C, B\n        if B > A:\n            return 0\n        elif B <= A:\n            return B\n        elif C <= A:\n            return C"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.read().split())\nwater = min(a, b)\nremainder = c - water\n\nprint(0 if remainder < 0 else remainder)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6 4 3''') == '1'\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3') == '1'\n\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\nprint(max(0, b - c))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4 3') == '1'\n\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n'''"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2') == '1'\n\"\"\"\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 2 4\") == \"2\"\nassert solution(\"2\\n1 3 2\") == \"1\"\n\"\"\"\n\nimport sys\n\n\nclass Solution:\n    def __init__(self, N: int):\n        self.N = N\n        self.gen = self.permutations()\n\n    def permutations(self):\n        if self.N == 1:\n            yield (0,)\n        else:\n            for perm in self.permutations():\n                for i in range(self.N):\n                    yield perm[:i] + (i + 1,) + perm[i:]\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        return next(self.gen)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('3\\n2 3 1\\n3 1 2') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 3 2') == \"3\"\nassert solution('2\\n3 1 2') == \"1\"\nassert solution('3\\n1 2 3') == \"0\"\nassert solution('3\\n3 1 2') == \"3\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 3 2\n3 1 2''') == '3'\nassert solution('''3\n1 2 3\n1 2 3''') == '0'\nassert solution('''4\n1 3 2 4\n1 2 3 4''') == '3'\nassert solution('''4\n3 1 2 4\n3 1 2 4''') == '3'\nassert solution('''4\n3 1 4 2\n3 1 4 2''') == '1'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 4\\n3 1 2 4\") == \"3\"\nassert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"4\\n3 2 1 4\") == \"2\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"4\\n1 4 3 2\") == \"4\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\na = []\nb = []\n\nfor i in range(n):\n    a.append(int(stdin.readline()))\nfor i in range(n):\n    b.append(int(stdin.readline()))\n\ndiff = 0\nfor i in range(n):\n    diff += abs(a[i] - b[i])\n\nprint(diff)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 2 4 5\\n3 1 4 2 5\") == \"1\"\nassert solution(\"5\\n2 1 4 5 3\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5\\n2 3 1 4 5\\n1 2 4 3 5\") == \"3\"\n\"\"\"\n\nimport sys\n\nimport unittest\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"ATC\") == 1\nassert solution(\"ACGT\") == 1\nassert solution(\"ACGTT\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"ACODER\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"ATACGT\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\"\n\nimport sys\n\n\"\"\"\nA string s is a substring of t if t can be obtained from t by deleting some non-empty subsequence of characters from s. \nLet us define the length of a string as the number of non-empty subsequences that can be obtained from it. For example, \nthe length of CAGCCTA is 3: CAG, CAGCCT, CAGCCTA, CAGCCTA.\n\nYour task is to find the length of the longest substring of a given string.\n\nInput\n\nThe only input line contains a string t. t is at most 100 characters long.\n\nOutput\n\nPrint the length of the longest substring of t.\n\nExamples\n\nInput\nOutput\n\nAABCDE\n5\n4\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ATCODER') == 3\n\nprint('Success')"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"9\"\nprint(solution(\"11\"))\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\nfrom math import ceil, log"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(10) == 5\nassert solution(100) == 45\nassert solution(1000) == 252\nassert solution(5000) == 2515\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '9'\nassert solution('10') == '9'\nassert solution('12') == '7'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '9'\nprint(solution('11'))"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '9'\n\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == '9'\nassert solution('1') == '0'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"hotteacupofcoffee\"\nassert solution(\"t\") == \"t\"\n\"\"\"\n\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cupofcoffee') == 4, 'wrong solution: should be 4'\nprint('Test passed')\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cuuuupofcoffee\") == \"cuuupofhottea\"\nassert solution(\"cupofcoffee1\") == \"cupofhottea1\"\nassert solution(\"cupofcoffee2\") == \"cupofhottea2\"\nassert solution(\"cupofcoffee3\") == \"cupofhottea3\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cupofcoffee') == 'hottea'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXY') == 'ABCDEFGHIJKLMNOPQRSTUVWXY'\nassert solution('ABC') == 'ABC'\n\"\"\"\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"cupofcoffee\"), \"hottea\")\n\n    def test_2(self):\n        self."
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"cupoftea\") == \"cupofcoffee\"\nassert solution(\"hott\") == \"hott\"\nassert solution(\"c\") == \"t\"\n\n\"\"\"\n\n\"\"\"\nThe solution is based on the observation that every possible substitution is a substitution of 2 or 3 characters.\nTo avoid repetitions, the first letter is taken and the next 2 or 3 characters are compared with the second letter.\nThe next 2 or 3 letters are then compared with the next letter, and so on.\nSince the algorithm starts with the first letter, a greedy choice is made.\nThe complexity is O(n), where n is the length of the string.\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"admiring\") == \"admiring\"\nassert solution(\"japan\") == \"japan\"\nassert solution(\"stack\") == \"stack\"\n\n\"\"\"\n\nimport sys\nimport time\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"coffee\"\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofcoffee') == 'cupofhottea'\n\n\"\"\"\n\nS, T = input().split('\\n')\n\ncount = 0\n\nfor i in range(len(S)):\n    if S[i]!= T[i]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == '5 6 7 8 9'"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"3 4 5\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\"\n\n\nimport sys\n\nK, X = map(int, sys.stdin.readline().split())\n\nprint(X - K + 1, X + K)\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 -1\") == \"1 2 3 4\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7\\n') == '5 6 7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\nassert solution('1 0') == '0'\nassert solution('2 2') == '0 1 2'\n\"\"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25\\n') == 'No'\nassert solution('30\\n') == 'Yes'\nassert solution('40\\n') == 'Yes'\nassert solution('0\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"32\") == \"No\"\nassert solution(\"15\") == \"No\"\nassert solution(\"17\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nWrong Answer\nInput:\n25\nOutput:\nYes\nExpected:\nNo"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'\nassert solution('-35') == 'Yes'\nassert solution('-45') == 'No'\nassert solution('0') == 'No'\nassert solution('-0') == 'No'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(25) == 'No'\nassert solution(30) == 'Yes'\nassert solution(15) == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == 'No'\nassert solution('30') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"-50\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"-10\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nimport os\n\nDEBUG = False\ndata_dir = \"./test/data\"\noutput_dir = \"./test/output\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"-5\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"27\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'No'\nassert solution('-40') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"No\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n\"\"\"\n\nimport sys\n\nN, D = [int(i) for i in input().split(' ')]\nX = []\nfor i in range(N):\n    X.append([int(i) for i in input().split(' ')])\n\npair = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        dis = 0\n        for k in range(D):\n            dis += (X[i][k] - X[j][k]) ** 2\n        if dis.is_integer():\n            pair += 1\n\nprint(pair)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8''') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 2\n5 5\n-2 8''') == '1'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\nimport math\nfrom functools import reduce\n\nN, D = map(int, input().split(' '))\npoints = []\nfor _ in range(N):\n    points.append(list(map(int, input().split(' '))))"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1\\n'\nprint('Test success.')\n\n-------\n\"\"\"\nimport re"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"7777\") == \"Bad\"\nassert solution(\"1221\") == \"Good\"\nassert solution(\"1224\") == \"Bad\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3776') == 'Bad'\nassert solution('1234') == 'Good'\nassert solution('1111') == 'Bad'\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1122\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\nassert solution(\"3776\") == \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"3776\") == \"Good\"\nassert solution(\"1111\") == \"Bad\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1244\") == \"Bad\"\nassert solution(\"5678\") == \"Good\"\nassert solution(\"3421\") == \"Bad\"\nassert solution(\"1245\") == \"Good\"\n\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"Good\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"6111\") == \"Bad\"\n\n-------------"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1243\") == \"Bad\"\nassert solution(\"7123\") == \"Bad\"\nassert solution(\"7813\") == \"Good\"\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"2234\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\n\"\"\"\n\n\"\"\"\nsolution(S)\nWrite a solution that will compute the sum of all even and odd numbers\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n6\\n3\\n4\\n1\\n2\\n') == '4.0'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"3\\n1 1\") == \"1.0\"\nassert solution(\"3\\n2 2\") == \"2.0\"\nassert solution(\"3\\n3 3\") == \"2.5\"\nassert solution(\"10\\n1 1\") == \"1.0\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n\") == \"3.5\"\nprint(solution(\"3 4\\n\"), \"3.5\")\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n3 4''') == '3.5'\nassert solution('''2\n5 5''') == '4.0'\nassert solution('''1\n5''') == '5.0'\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n67. Smallest String With A Given Numeric Value (Medium)\n------Binary Search using Recursive Function Solution------\n\n------Discuss Solution------\nWe need to find a string that has a given numerical value. The solution to this problem is based on binary search. We will find the largest string that has a value less than our target, then we will shrink our range to the smallest string that has a value less than our target. We will repeat this process until we find the answer.\n\nThe idea here is to create a recursive function that takes in a non-empty string and a numeric value. If the value of the string is greater than the target value, then we can just return the empty string. Otherwise, we will search for the smallest string in our range that has a value less than the target value. If no such string exists, then we can just return the empty string, because we know that the smallest string in our range that has a value less than the target value has a higher value. If we do not return the empty string, then we know that the smallest string in our range that has a value less than the target value has a lower value than the target value, so we can shrink our range by calling our recursive function again. We will keep doing this until we find the smallest string in our range that has a value less than the target value, or until we reach the base case and return the empty string.\n\nOnce we find the smallest string in our range that has a value less than the target value, we will return the concatenation of our string and the smallest string in our range that has a value less than the target value.\n\nThe base case is when the recursive function is called with an empty string, as it cannot create a string with a higher value than the target value. The recursive function will return the empty string, and the smallest string in our range that has a value less than the target value will have a higher value than the target value, so we know that we must shrink our range by calling the function again. We do this until we reach the base case, when we return the empty string.\n\nThe recursive function will take in a string and a numeric value, and return a string.\n\n----Time and Space Complexity----\nIn terms of time complexity, the time complexity of the above algorithm will be O(logN), where N is the length of the string.\n\nIn terms of space complexity, the space complexity of the above algorithm will be O(logN), as the recursive call stack will grow to a height of N in the worst case.\n\nclass Solution:\n    def find_smallest_string(self, s, target):\n        if len(s) == 0:\n            return \"\"\n        if target >= int(s):\n            return s\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            m = (i + j) // 2\n            if int(s[m]) > target:\n                j = m\n            else:\n                i = m + 1\n        return s[:i]\n        \n    def largestNumber(self, nums: List[int]) -> str:\n        # A helper function to parse a string into an array of integers\n        def string_to_int_array(s):\n            return [int(c) for c in s]\n        \n        # For every integer, try to find the smallest string in the list of strings that has a value less than or equal to it\n        strings = sorted(map(string_to_int_array, nums), key=len, reverse=True)\n        res = \"\"\n        \n        # Add the smallest string that has a value less than or equal to the integer at the end of the array to the result\n        # This is the base case\n        for s in strings:\n            if int(\"\".join(str(c) for c in s)) <= 0:\n                res = \"\".join(str(c) for c in s) + res\n        \n        # If we have not returned by now, we have not found a solution\n        if res == \"\":\n            return \"0\"\n        \n        # Once we have a solution, we try to find the next smallest string in the list of strings that has a value less than or equal to the integer at the end of the array\n        # This is the recursive case\n        for s in strings:\n            if int(\"\".join(str(c) for c in s)) < int(\"\".join(str(c) for c in res)):\n                res = self.find_smallest_string(\"\".join(str(c) for c in res), int(\"\".join(str(c) for c in s))) + res\n        return res\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n68. K-th Smallest Number in Multiplication Table (Medium)\n------Binary Search using Recursive Function Solution------\n\n------Discuss Solution------\nThe idea here is to find the Kth smallest number in a table. We will find the smallest number in the table that is greater than or equal to our Kth smallest number, then we will shrink our range to the smallest number that is greater than or equal to the result of our previous call to our recursive function. We will keep doing this until we find the Kth smallest number in our range.\n\nOnce we find the Kth smallest number in our range, we will return the concatenation of the Kth smallest number and the smallest number in our range that is greater than or equal to the result of the previous call to our recursive function.\n\nThe base case is when the recursive function is called with an empty string, as it cannot create a string with a higher value than the target value. The recursive function will return the empty string, and the Kth smallest number in our range that is greater than or equal to the result of the previous call to our recursive function will have a higher value than the target value, so we know that we must shrink our range by calling the function again. We do this until we reach the base case, when we return the empty string.\n\nThe recursive function will take in a non-empty string and a numeric value, and return a string.\n\n----Time and Space Complexity----\nIn terms of time complexity, the time complexity of the above algorithm will be O(logN), where N is the length of the string.\n\nIn terms of space complexity, the space complexity of the above algorithm will be O(logN), as the recursive call stack will grow to a height of N in the worst case.\n\nclass Solution:\n    def smallest_string(self, s, target):\n        if len(s) == 0:\n            return \"\"\n        if target >= int(s):\n            return s\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            m = (i + j) // 2\n            if int(s[m]) > target:\n                j = m\n            else:\n                i = m + 1\n        return s[:i]\n        \n    def largestNumber(self, nums: List[int]) -> str:\n        # A helper function to parse a string into an array of integers\n        def string_to_int_array(s):\n            return [int(c) for c in s]\n        \n        # For every integer, try to find the smallest string in the list of strings that"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 5 4\\n3 6') == '14'\n\"\"\"\n\nfrom math import ceil\n\ninput_ = input()\nN = int(input_[0])\nA = [int(x) for x in input_[1:].split(' ')]\nB = [int(x) for x in input()]\nC = [int(x) for x in input()]\nsatisfaction_points = 0\n\nfor i in range(N - 1):\n    satisfaction_points += B[i]\n    satisfaction_points += ceil(C[i] / 2)\n\nsatisfaction_points += B[N - 1]\n\nprint(satisfaction_points)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n3 1 2\n2 5 4\n3 6''') == '14'\nprint('Test solution passed')\n\n-----Explanation-----\nSince he ate Dish 3, he gained 4 + 3 + 4 = 14 satisfaction points.\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\nassert solution(\"2 1 2\\n2 5 4\\n3 6\") == 6\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n\nimport unittest\n\nfrom collections import deque\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n1 2\n2 5\n3 6\n\"\"\") == '14'\n\n---Problem---\n\nJohn wants to travel to Japan. There is a collection of cities there, and John knows that he can fly to the city A_i with a fixed cost C_i and the city B_i with the cost D_i.\nHowever, the total cost of traveling is limited to D_1 +... + D_n, which is known to him.\nJohn wants to find the minimum cost he can spend to travel to all of the cities.\n\n-----Constraints-----\n - 2 \\leq N \\leq 20\n - 1 \\leq A_i, B_i \\leq N\n - 1 \\leq C_i, D_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 C_1 D_1\nA_2 C_2 D_2\nA_3 C_3 D_3\n...\nA_N C_N D_N\n\n-----Output-----\nPrint the minimum cost he needs to travel to all of the cities, as an integer.\n\n-----Sample Input-----\n3\n2 1 2\n1 1 2\n1 1 3\n\n-----Sample Output-----\n5\n\nJohn needs to travel to cities A_1, B_1, B_2 and A_3, and the total cost is 5.\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\nsolution(\"6\\\n3 5 1 1 5\\\n3 2 2 1 3\\\n3 3 1 1 2\\\n2 4 3 2 5\\\n2 2 2 1 1\\\n2 1 1 2 1\\\n2 1 1 1 1\\\n1 1 2 1 1\\\n1 1 1 1 1\\\n1 1 1 1 1\\\n1 1 1 1 1\\\n1 1 1 1 1\\\n1 1 1 1 1\\\n1 1 1 1 1\")\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\nprint('Test pass.')\n\n-----\n1\n3 2\n1 1\n\n2\n1 1\n1 2\n\n3\n1 1 1\n1 1 1\n1 1 1\n\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\n5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\n6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n\n8\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n\n9\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\n11\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n\n12\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n\n13\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n\n14\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = list(map(int, sys.stdin.readline().rstrip().split()))\nb = list(map(int, sys.stdin.readline().rstrip().split()))\nc = list(map(int, sys.stdin.readline().rstrip().split()))\n\nsum_ = 0\n\nfor i in range(n - 1):\n    sum_ += a[i] * b[i] + c[i]\n\nprint(sum_)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nDishes = []\nfor _ in range(N):\n    Dishes.append(tuple(map(int, sys.stdin.readline().split())))\n\nDishes.sort(key=lambda x: x[0])\n\nsol = 0\n\nfor i in range(N-1):\n    sol += (Dishes[i][1] + dishes[i+1][2])\n\nprint(sol)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nQAQQQQAQQ\\nQQAQQQQAQQQ\") == 4\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10\nABC''') == '2'\nassert solution('''10\nABCDABCD''') == '2'\nassert solution('''10\nABCDABCDBABCDBCQDBABCDBCQ''') == '2'\nassert solution('''10\nABCDZABCD''') == '1'\nassert solution('''10\nABCDBABCDBCQDBABCDBCQDBABCDBCQ''') == '0'\n'''\n    :param stdin: Input string\n    :return: Number of occurrences of ABC\n    '''\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDBABCQ\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\n------\nInput:\n10\nZABCDBABCQ\n\nOutput:\n2\n\nExplanation:\nTwo contiguous subsequences of S are equal to ABC: the 2-nd through 4-th characters, and the 7-th through 9-th characters.\n\nInput:\n15\nABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC\n\nOutput:\n22\n\nExplanation:\nAll subsequences of length 21 are equal to ABC.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABAABBABAABBAB\") == \"4\"\nassert solution(\"ABABAB\") == \"3\"\nassert solution(\"BBAB\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10\nZABCDBABCQ\n''') == 2\nassert solution('''8\nABCDEFGHI\n''') == 1\nassert solution('''8\nABCDEFGH\n''') == 0\nassert solution('''10\nABABCDDBBA\n''') == 2\nassert solution('''10\nABCDBABCQ\n''') == 2\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCDBABCQ\") == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('\\n'.join([\n    '5',\n    'ZABCDBABCQ',\n    ])) == '2'\nassert solution('\\n'.join([\n    '4',\n    'ABCD',\n    ])) == '0'\nassert solution('\\n'.join([\n    '10',\n    'ABCDEABCDBABCQ',\n    ])) == '2'\nassert solution('\\n'.join([\n    '5',\n    'zABCDBABCQ',\n    ])) == '2'\nassert solution('\\n'.join([\n    '4',\n    'ABCD',\n    ])) == '0'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCDBABCQ\") == 2\nprint(solution(\"ZABCDBABCQ\"))\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABCDBABCQ\") == 2\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\"\"\"\n) == '2'\n\"\"\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\nprint(solution(stdin))\n\n-----Time Complexity-----\nTime complexity is O(N*N*(3^N)), where N is the length of the string.\n\n-----Space Complexity-----\nSpace complexity is O(N*(3^N)).\n\n-----Test Cases-----\n1. 1\n2. 3\n3. 5\n4. 9\n5. 14\n6. 25\n7. 34\n8. 63\n9. 73\n10. 141\n11. 196\n12. 258\n13. 220\n14. 294\n15. 285\n16. 264\n17. 246\n18. 242\n19. 268\n20. 283\n21. 247\n22. 248\n23. 270\n24. 271\n25. 259\n26. 275\n27. 286\n28. 255\n29. 310\n30. 324\n31. 329\n32. 259\n33. 255\n34. 260\n35. 238\n36. 271\n37. 242\n38. 255\n39. 270\n40. 303\n41. 261\n42. 269\n43. 266\n44. 248\n45. 230\n46. 300\n47. 256\n48. 300\n49. 252\n50. 258\n51. 248\n52. 254\n53. 287\n54. 256\n55. 247\n56. 295\n57. 259\n58. 269\n59. 269\n60. 300\n61. 254\n62. 297\n63. 256\n64. 238\n65. 297\n66. 265\n67. 251\n68. 305\n69. 260\n70. 262\n71. 260\n72. 298\n73. 256\n74. 260\n75. 300\n76. 265\n77. 255\n78. 241\n79. 254\n80. 262\n81. 300\n82. 254\n83. 247\n84. 248\n85. 257\n86. 256\n87. 276\n88. 266\n89. 259\n90. 285\n91. 295\n92. 276\n93. 270\n94. 286\n95. 279\n96. 267\n97. 246\n98. 243\n99. 251\n100. 258\n101. 256\n102. 269\n103. 244\n104. 300\n105. 265\n106. 300\n107. 269\n108. 257\n109. 273\n110. 261\n111. 264\n112. 276\n113. 269\n114. 260\n115. 257\n116. 265\n117. 259\n118. 261\n119. 287\n120. 255\n121. 283\n122. 257\n123. 285\n124. 257\n125. 259\n126. 282\n127. 248\n128. 238\n129. 252\n130. 260\n131. 259\n132. 260\n133. 274\n134. 300\n135. 300\n136. 257\n137. 256\n138. 283\n139. 286\n140. 250\n141. 256\n142. 258\n143. 251\n144. 257\n145. 257\n146. 255\n147. 259\n148. 255\n149. 258\n150. 257\n151. 258\n152. 259\n153. 260\n154. 250\n155. 252\n156. 252\n157. 249\n158. 258\n159. 300\n160. 298\n161. 278\n162. 259\n163. 268\n164. 264\n165. 266\n166. 267\n167. 272\n168. 283\n169. 300\n170. 275\n171. 300\n172. 274\n173. 252\n174. 300\n175. 257\n176. 297\n177. 271\n178. 255\n179. 282\n180. 265\n181. 295\n182. 279\n183. 272\n184. 275\n185. 298\n186. 300\n187. 300\n188. 290\n189. 272\n190. 295\n191. 269\n192. 260\n193. 251\n194. 254\n195. 255\n196. 298\n197. 272\n198. 291\n199. 301\n200. 254\n201. 298\n202. 260\n203. 276\n204. 250\n205. 256\n206. 273\n207. 257\n208. 278\n209. 267\n210. 254\n211. 275\n212. 257\n213. 258\n214. 256\n215. 284\n216. 261\n217. 257\n218. 284\n219. 271\n220. 271\n221. 290\n222. 269\n223. 275\n224. 300\n225. 272\n226. 301\n227. 257\n228. 300\n229. 259\n230. 276\n231. 258\n232. 264\n233. 266\n234. 275\n235. 270\n236. 283\n237. 266\n238. 289\n239. 262\n240. 300\n241. 251\n242. 263\n243. 267\n244. 278\n245. 300\n246. 288\n247. 283\n248. 258\n249. 283\n250. 251\n251. 251\n252. 288\n253. 251\n254. 267\n255. 255\n256. 300\n257. 253\n258. 251\n259. 283\n260. 267\n261. 282\n262. 252\n263. 277\n264. 258\n265. 275\n266. 300\n267. 289\n268. 280\n269. 298\n270. 300\n271. 257\n272. 273\n273. 272\n274. 300\n275. 282\n276. 276\n277. 279\n278. 293\n279. 293\n280. 291\n281. 284\n282. 257\n283. 274\n284. 251\n285. 283\n286. 266\n287. 298\n288. 284\n289. 303\n290. 253\n291. 250\n292. 257\n293. 272\n294. 287\n295. 271\n296. 290\n297. 298\n298. 289\n299. 271\n300. 273\n301. 278\n302. 254\n303. 271\n\n-----Problem-----\nLet M and A be the letters of the English alphabet. Let A_i denote the ith letter of M. Let Q_i denote the ith letter of A.\nLet L denote the length of Q_i and let M_i denote the ith letter of M. Let N denote the number of people in a group.\nThe number of ways to choose three people with the conditions is denoted by F(Q_1, Q_2, Q_3) (or F(A_1, A_2, A_3) or F(M_1, M_2, M_3)).\nFor example, if N = 5 and Q_i is any of the following strings:\n - AA\n - AA_\n - A_A\n - A_\n - A_A_\n - A_A__\n - AA__\n - AA___\n then F(Q_1, Q_2, Q_3) = 55.\nIn general,\nF(Q_1, Q_2, Q_3) = F(Q_1, Q_2, Q_n) + F(Q_1, Q_3, Q_n) + F(Q_1, Q_n, Q_3) + F(Q_2, Q_1, Q_n) + F(Q_2, Q_3, Q_n) + F(Q_2, Q_n, Q_3) + F(Q_3, Q_1, Q_n) + F(Q_3, Q_2, Q_n) + F(Q_3, Q_n, Q_2) + F(Q_n, Q_1, Q_2) + F(Q_n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(':') == 1\nassert solution('MASHIKE:') == 1\nassert solution('MASHIKE:RUMOI:HABORO:') == 1\nassert solution('MASHIKE:RUMOI:HOROKANAI:OBIRA:') == 2\nassert solution('MASHIKE:RUMOI:HABORO:OBIRA:HOROKANAI:') == 2\n\"\"\"\n\nn = int(input())\n\nchars = {}\nfor _ in range(n):\n    name = input()\n    chars[name[0]] = chars.get(name[0], 0) + 1\n\ncount = 0\nfor key, val in chars.items():\n    if val >= 3:\n        count += (val * (val - 1) * (val - 2)) // 6\n\nprint(count)"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == '2'\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\nMASHIKE\") == \"2\"\nassert solution(\"2\\nMASHIKE\\nHOROKANAI\") == \"1\"\nassert solution(\"3\\nMASHIKE\\nHOROKANAI\\nOBIRA\") == \"2\"\n\"\"\"\nfrom typing import Dict"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1\\n1\\n2') == 'Yes'\nassert solution('3 3\\n1\\n2\\n3') == 'No'\nassert solution('5 5\\n1\\n2\\n3\\n4\\n5') == 'No'\n\n-------\n\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 1\\n1 1\\n1 1') == 'Yes'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 1\\n1 3\\n') == 'Yes'\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3\\n2 3\\n3 3\\n4 3') == 'Yes'\nassert solution('3 3\\n1 3\\n2 3\\n3 3') == 'No'\nassert solution('6 4\\n1 3\\n2 3\\n3 3\\n4 3\\n5 4\\n6 4') == 'Yes'\nassert solution('6 4\\n1 3\\n2 2\\n3 3\\n4 3\\n5 4\\n6 4') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9') == 'Yes'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n0 0\\n0 1\\n0 0') == 'Yes'\nassert solution('1 2\\n0 0\\n0 1\\n1 2') == 'No'\nassert solution('3 3\\n1 2\\n2 2\\n3 2') == 'No'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n5 2\") == \"Yes\"\nassert solution(\"4 2\\n5 3\\n1 1\\n2 2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2\\n3 1') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 1\\n2 1\\n3 1') == 'Yes'\nassert solution('2 2\\n1 1\\n1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"3 2\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"coffee\") == \"No\"\n\nIn []:\nsolution(\"sippuu\")\nOut[]:\nYes\n\nIn []:\nsolution(\"coffee\")\nOut[]:\nNo\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('a') == 'No'\nassert solution('aa') == 'No'\nassert solution('aaab') == 'No'\nassert solution('aabb') == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"aabb\") == \"No\"\nassert solution(\"aabab\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('aabbcc') == 'No'\nassert solution('xxyyzz') == 'No'\nassert solution('abcxyz') == 'No'\nassert solution('123456') == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('kikoo') == 'No'\n\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sipp') == 'No'\n\nimport sys"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"iPPuu\") == \"No\"\nassert solution(\"iiPPu\") == \"Yes\"\nassert solution(\"iiiiPP\") == \"No\"\nassert solution(\"iiiiiiP\") == \"No\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n2 1\\n3 4\\n5 6\") == \"4\"\nassert solution(\"4 3\\n2 1\\n3 4\\n5 6\") == \"TLE\"\nassert solution(\"4 3\\n3 4\\n5 6\") == \"TLE\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"2 10\\n3 20\\n3 20\") == \"TLE\"\nassert solution(\"2 20\\n3 20\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\n\"\"\"\n    SOLUTION 2: Using Dynamic Programming\n    - Similar to solution 1, but for each step, keep track of the minimum cost so far\n    - Time complexity: O(N)\n    - Space complexity: O(N)\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\\n\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 70\n7 60\n1 80\n4 50''') == '4'\n\nassert solution('''3 70\n7 60\n1 80\n4 50''') == 'TLE'\n\nassert solution('''4 20\n1 30\n2 20\n3 10\n4 10''') == '14'\n\nassert solution('''2 10\n1 30\n1 20''') == '30'\n\nprint('Success')\n\n-------------------------------------------\n\n\ud14c\uc2a4\ud2b8 1 \u3009    \ud1b5\uacfc (0.03ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 2 \u3009    \ud1b5\uacfc (0.03ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 3 \u3009    \ud1b5\uacfc (0.03ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 4 \u3009    \ud1b5\uacfc (0.04ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 5 \u3009    \ud1b5\uacfc (0.03ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 6 \u3009    \ud1b5\uacfc (0.03ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 7 \u3009    \ud1b5\uacfc (0.04ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 8 \u3009    \ud1b5\uacfc (0.03ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 9 \u3009    \ud1b5\uacfc (0.04ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 10 \u3009    \ud1b5\uacfc (0.04ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 11 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 12 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 13 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 14 \u3009    \ud1b5\uacfc (0.02ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 15 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 16 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 17 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 18 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 19 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 20 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 21 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 22 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 23 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 24 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 25 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 26 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 27 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 28 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 29 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 30 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 31 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 32 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 33 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 34 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 35 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 36 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 37 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 38 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 39 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 40 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 41 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 42 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 43 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 44 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 45 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 46 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 47 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 48 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 49 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 50 "
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\nassert solution('3 70\\n7 60\\n1 80\\n') == 'TLE'\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"7 60\\n1 80\\n4 50\\n1 50\") == \"TLE\"\n\"\"\"\n\nimport sys\n\nn_, t = map(int, sys.stdin.readline().split())\n\ncosts = []\ntimes = []\nfor i in range(n_):\n    cost, time = map(int, sys.stdin.readline().split())\n    costs.append(cost)\n    times.append(time)"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2\\n2 3') == '2'\nassert solution('3 10\\n7 5\\n1 5') == 'TLE'\n\"\"\"\n\nfrom collections import namedtuple\nfrom typing import NamedTuple\nfrom math import inf\n\nTup = namedtuple('Tup', 'c t')\n\n\nclass Solution:\n    def solution(self, input_str):\n        self.input_str = input_str\n        self.N, self.T = map(int, input_str.split())\n        self.routes = self.read_routes()\n        self.min_cost = inf\n        self.min_cost = self.solve()\n        return self.min_cost\n\n    def read_routes(self):\n        routes = []\n        for i in range(self.N):\n            c, t = map(int, input().split())\n            routes.append(Tup(c, t))\n        return routes\n\n    def solve(self):\n        for cost, time in self.routes:\n            if time < self.T:\n                self.min_cost = min(self.min_cost, cost)\n        if self.min_cost == inf:\n            self.min_cost = 'TLE'\n        return self.min_cost\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\") == 8\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 9') == 8\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2 9''') == '8'\nassert solution('''4 5 6''') == '11'\nassert solution('''4 0 9''') == '8'\nassert solution('''4 5 0''') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 9\\n') == '8'\n\"\"\"\n\n\"\"\"\nTODO: Write solution to problem.\n\n-----Solution-----\n\n\"\"\"\n\n\"\"\"\nTODO: Print output.\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 9') == '8'\nprint(solution(stdin))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nassert solution(\"1 5 3\") == \"3\"\nassert solution(\"2 4 8\") == \"6\"\nassert solution(\"4 2 7\") == \"5\"\nassert solution(\"1 1 2\") == \"2\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"acornistnt\") == \"1\"\nassert solution(\"peanutbomb\") == \"0\"\nassert solution(\"constraint\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('acornistnt') == '1'\nassert solution('peanutbomb') == '0'\nassert solution('constraint') == '0'\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\n-----Problem-----\nOn a battlefield ai planes are flying to attack enemy cities. The planes can carry some number of troops. The total number of planes on the field is known. They must attack all the enemy cities simultaneously. If a city is attacked twice by the same plane, it is destroyed. The planes must land the cities in the order they are attacked. The last city in the list of cities to be attacked is its weakest city, i.e. the city that can be attacked the most number of times.\n\nThe number of times that a city is attacked is called the city's attack power. It is equal to the number of planes that attack the city.\n\nAt the beginning of the battle, a plane flying to attack the city with the highest attack power is chosen. It attacks first, and then the second highest, the third highest, and so on, until all the cities are destroyed.\n\nYou are given a list of N cities numbered from 1 to N in the order that they are to be attacked. The cities are given in the following format:\n\na b\n\nwhere a and b are integers representing the city number.\n\nFor example, in the second line we have 2 3, meaning that the second city is attacked by 2 planes and the third city is attacked by 3 planes. We print the city number in increasing order.\n\nGiven the number of cities, print a single line with the city number that is to be attacked by the plane that attacks the city with the highest attack power.\n\n-----Constraints-----\n - The total number of cities will be in the range [1, 10^5].\n - There will be at most 1000 cities.\n - Each city number will be unique.\n\n-----Input-----\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe next line contains N distinct integers a_1, a_2,..., a_N.\n\n-----Output-----\nFor each test case, print a single line containing the number the city number to be attacked by the plane that attacks the city with the highest attack power.\n\n-----Sample Input-----\n1\n7\n1 3\n2 3\n3 4\n1 2\n2 6\n3 5\n3 6\n\n-----Sample Output-----\n3\n\n-----Explanation-----\nIn the first test case, there are seven cities: [1, 2, 3, 4, 5, 6, 7]. There are two attacks of attack power 3: 1 to 3 and 2 to 6. The strongest city is 3 since it can be attacked the most times.\n\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('acornistnt') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\nassert solution('5\\nacornistnt\\npeanutbomb\\nconstraint\\nfoo\\nbar') == '2'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\na\\nc\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\nab\\nbc\\n') == '0'\nassert solution('3\\nbc\\na\\n') == '1'\nassert solution('5\\nabcde\\nbcdef\\nabcde\\nbcdef\\nbcde\\n') == '5'\n\n----\n\nWe can find the number of anagram pairs by counting the number of pairs of indices such that s_1[i] == s_2[j] and s_1[i]!= s_2[j]."
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '''8\n2\n9\n8'''\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112123123412345\") == \"112\"\nassert solution(\"112123123412345$1$\") == \"1\"\nassert solution(\"112123123412345$2$\") == \"2\"\nassert solution(\"112123123412345$3$\") == \"3\"\nassert solution(\"112123123412345$4$\") == \"4\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112123123412345\") == \"1\"\nassert solution(\"112123123412345$\\dots$\") == \"0\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"11212312341234512345612345671234567812345678912345678910\"\n\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2132\\n506\\n999999999\\n1000000000\\n\") == \"8\\n2\\n9\\n8\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112123123412345$0\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$1\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$2\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$3\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$4\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$5\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$6\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$7\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$8\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$9\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$10\\n11212312341234512345612345671234567812345678912345678910\") == \"112123123412345$0\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$1\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$2\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$3\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$4\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$5\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$6\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$7\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$8\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$9\\n11212312341234512345612345671234567812345678912345678910\\n112123123412345$10\\n11212312341234512345612345671234567812345678912345678910\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\nassert solution(\"11212312341234512345612345671234567812345678912345678910\") == '0'\nassert solution(\"11212312341234512345612345671234567812345678912345678910\") == '1'\nassert solution(\"1121111111111234512345612345671234567812345678912345678910\") == '2'\nassert solution(\"1121111111111234512345612345671234567812345678912345678910\") == '5'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\nassert solution(\"1$\\dots$\") == \"1\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"0\"\nassert solution(\"11212312341234512345612345671234567812345678912345678910\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 4\\n4 3\\n3 5\") == \"2\\n1 2 1 1 2\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2\\n1 2 1 1 2'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1\\n1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 4\\n1 2\\n1 3\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution('7 2\\n1 3\\n1 4\\n2 6\\n2 7\\n3 5\\n3 7\\n4 5\\n5 6') == '4\\n1 1 1 2 3 2 2 3 3'\nassert solution('8 2\\n1 4\\n1 5\\n2 7\\n2 8\\n3 6\\n3 7\\n4 6\\n5 6\\n6 7') == '5\\n1 1 1 2 3 2 2 2 3 3'\nassert solution('6 2\\n1 3\\n1 4\\n2 5\\n2 6') == '3\\n1 1 1 2 2 2'"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n2 1\\n\") == \"2\\n1 1 1\\n\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2 2 1 2 1 2\\n\"\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2 2 1 2 1 2\\n\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1 1 2 3 2 3 1 3 1\\n\"\n\n\"\"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3 1 1 1 2 2 2 3 3\"\nprint(\"Passed!\")\n\n-----Test 1-----\n\n-----Test 2-----\n\n-----Test 3-----\n\n-----Test 4-----\n\n-----Test 5-----\n\n-----Test 6-----\n\n-----Test 7-----\n\n-----Test 8-----\n\n-----Test 9-----\n\n-----Test 10-----\n\n-----Test 11-----\n\n-----Test 12-----\n\n-----Test 13-----\n\n-----Test 14-----\n\n-----Test 15-----\n\n-----Test 16-----\n\n-----Test 17-----\n\n-----Test 18-----\n\n-----Test 19-----\n\n-----Test 20-----\n\n-----Test 21-----\n\n-----Test 22-----\n\n-----Test 23-----\n\n-----Test 24-----\n\n-----Test 25-----\n\n-----Test 26-----\n\n-----Test 27-----\n\n-----Test 28-----\n\n-----Test 29-----\n\n-----Test 30-----\n\n-----Test 31-----\n\n-----Test 32-----\n\n-----Test 33-----\n\n-----Test 34-----\n\n-----Test 35-----\n\n-----Test 36-----\n\n-----Test 37-----\n\n-----Test 38-----\n\n-----Test 39-----\n\n-----Test 40-----\n\n-----Test 41-----\n\n-----Test 42-----\n\n-----Test 43-----\n\n-----Test 44-----\n\n-----Test 45-----\n\n-----Test 46-----\n\n-----Test 47-----\n\n-----Test 48-----\n\n-----Test 49-----\n\n-----Test 50-----\n\n-----Test 51-----\n\n-----Test 52-----\n\n-----Test 53-----\n\n-----Test 54-----\n\n-----Test 55-----\n\n-----Test 56-----\n\n-----Test 57-----\n\n-----Test 58-----\n\n-----Test 59-----\n\n-----Test 60-----\n\n-----Test 61-----\n\n-----Test 62-----\n\n-----Test 63-----\n\n-----Test 64-----\n\n-----Test 65-----\n\n-----Test 66-----\n\n-----Test 67-----\n\n-----Test 68-----\n\n-----Test 69-----\n\n-----Test 70-----\n\n-----Test 71-----\n\n-----Test 72-----\n\n-----Test 73-----\n\n-----Test 74-----\n\n-----Test 75-----\n\n-----Test 76-----\n\n-----Test 77-----\n\n-----Test 78-----\n\n-----Test 79-----\n\n-----Test 80-----\n\n-----Test 81-----\n\n-----Test 82-----\n\n-----Test 83-----\n\n-----Test 84-----\n\n-----Test 85-----\n\n-----Test 86-----\n\n-----Test 87-----\n\n-----Test 88-----\n\n-----Test 89-----\n\n-----Test 90-----\n\n-----Test 91-----\n\n-----Test 92-----\n\n-----Test 93-----\n\n-----Test 94-----\n\n-----Test 95-----\n\n-----Test 96-----\n\n-----Test 97-----\n\n-----Test 98-----\n\n-----Test 99-----\n\n-----Test 100-----\n\n-----Test 101-----\n\n-----Test 102-----\n\n-----Test 103-----\n\n-----Test 104-----\n\n-----Test 105-----\n\n-----Test 106-----\n\n-----Test 107-----\n\n-----Test 108-----\n\n-----Test 109-----\n\n-----Test 110-----\n\n-----Test 111-----\n\n-----Test 112-----\n\n-----Test 113-----\n\n-----Test 114-----\n\n-----Test 115-----\n\n-----Test 116-----\n\n-----Test 117-----\n\n-----Test 118-----\n\n-----Test 119-----\n\n-----Test 120-----\n\n-----Test 121-----\n\n-----Test 122-----\n\n-----Test 123-----\n\n-----Test 124-----\n\n-----Test 125-----\n\n-----Test 126-----\n\n-----Test 127-----\n\n-----Test 128-----\n\n-----Test 129-----\n\n-----Test 130-----\n\n-----Test 131-----\n\n-----Test 132-----\n\n-----Test 133-----\n\n-----Test 134-----\n\n-----Test 135-----\n\n-----Test 136-----\n\n-----Test 137-----\n\n-----Test 138-----\n\n-----Test 139-----\n\n-----Test 140-----\n\n-----Test 141-----\n\n-----Test 142-----\n\n-----Test 143-----\n\n-----Test 144-----\n\n-----Test 145-----\n\n-----Test 146-----\n\n-----Test 147-----\n\n-----Test 148-----\n\n-----Test 149-----\n\n-----Test 150-----\n\n-----Test 151-----\n\n-----Test 152-----\n\n-----Test 153-----\n\n-----Test 154-----\n\n-----Test 155-----\n\n-----Test 156-----\n\n-----Test 157-----\n\n-----Test 158-----\n\n-----Test 159-----\n\n-----Test 160-----\n\n-----Test 161-----\n\n-----Test 162-----\n\n-----Test 163-----\n\n-----Test 164-----\n\n-----Test 165-----\n\n-----Test 166-----\n\n-----Test 167-----\n\n-----Test 168-----\n\n-----Test 169-----\n\n-----Test 170-----\n\n-----Test 171-----\n\n-----Test 172-----\n\n-----Test 173-----\n\n-----Test 174-----\n\n-----Test 175-----\n\n-----Test 176-----\n\n-----Test 177-----\n\n-----Test 178-----\n\n-----Test 179-----\n\n-----Test 180-----\n\n-----Test 181-----\n\n-----Test 182-----\n\n-----Test 183-----\n\n-----Test 184-----\n\n-----Test 185-----\n\n-----Test 186-----\n\n-----Test 187-----\n\n-----Test 188-----\n\n-----Test 189-----\n\n-----Test 190-----\n\n-----Test 191-----\n\n-----Test 192-----\n\n-----Test 193-----\n\n-----Test 194-----\n\n-----Test 195-----\n\n-----Test 196-----\n\n-----Test 197-----\n\n-----Test 198-----\n\n-----Test 199-----\n\n-----"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\n\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\n\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\"\"\"\n\nn = int(input())\nnums = [int(x) for x in input().split()]"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 4 4\n''') == '2 4'\n\nassert solution('''9\n1 1 8 8 8 4 4 4 4\n''') == '3 8'\n\nassert solution('''7\n4 3 7 1 4 3 3\n''') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 4 4\\n') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4\\n') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3\\n') == '3 6'\n\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 4 4\") == \"2 4\"\nassert solution(\"9 1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7 4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 4 4\\n') == '2 4'\n\nassert solution('9\\n1 1 8 8 8 4 4 4 4\\n') == '3 8'\n\nassert solution('7\\n4 3 7 1 4 3 3\\n') == '3 6'\n\nprint('Success')\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n\nimport math\n\nn = int(input())\nfriends = [int(x) for x in input().split(' ')]\n\noccupied = [0] * (n+1)\n\nfor i in range(n):\n    for j in range(1, min(friends[i]+1, n+1)):\n        occupied[j] += 1\n    for j in range(friends[i], n):\n        occupied[j+1] += 1\n\noccupied[0] = 0\noccupied[n] = 0\n\nprint(min(occupied), max(occupied))"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\n\"\"\"\nfrom typing import List\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 3\n3 1\n1 2\n''') == '3 1 2'\nassert solution('''\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution('''\n3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n\nassert solution('''\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2\\n2 3\\n1 4\\n2 5\\n1 6\\n2 6\\n1 3\\n2 5\\n1 5\\n2 4\") == \"3 2 4 1 5 6\"\nassert solution(\"7\\n3 6\\n3 7\\n6 7\\n1 2\\n1 3\\n1 4\\n1 5\\n4 5\\n3 2\\n1 6\\n2 7\\n5 6\\n3 6\\n5 7\\n2 6\\n1 7\\n2 5\\n6 5\\n2 4\\n5 4\\n6 3\\n2 7\\n2 6\\n3 7\\n1 7\\n2 4\\n1 6\\n1 5\\n6 4\\n1 7\\n2 3\\n4 7\\n5 6\\n4 5\\n6 5\") == \"3 2 1 4 5 7 6\"\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution('''\n3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n') == '3 2 4 1 5'\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == '3 2 4 1 5'\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n3 4\") == \"1 2 3\"\nassert solution(\"3\\n1 4\\n3 2\") == \"1 3 2\"\nassert solution(\"3\\n5 1\\n2 4\") == \"2 1 5 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n\nassert solution('''3\n2 3\n3 1\n1 2\n''') == '3 1 2'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3\n''') == '3 2 4 1 5'\n'''\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('abc\\n123') == 'abc123'\nassert solution('abc\\n123\\nxyz') == 'abc123xyz'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == 3\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\nassert solution('6\\n1 1000 10000 10 100 1000000000') == 1\n\n---Problem link---\nhttps://codeforces.com/contest/1415/problem/B\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\n\nassert solution('''\n10\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\n''') == '10'\n\nassert solution('''\n6\n1 1000 10000 10 100 1000000000\n''') == '1'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 10 17 12 15 2') == 3\nassert solution('5\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == 10\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 10 100 1000\") == 3\nassert solution(\"5\\n1 10 100 1000 100 100\") == 5\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '6\\n1 10 17 12 15 2\\n'\n) == '3'\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('3 3 5 2\\n1 2 2 2\\n2 1 2 4') == '-1\\n3'\nassert solution('3 3 5 1\\n3 3 5 3') == '0\\n-1'\nassert solution('4 6 4 2\\n10 5 3 3\\n3 3 5 2\\n4 2 2 3\\n6 3 1 3\\n8 1 2 4') == '3\\n5\\n5\\n1\\n0\\n3'\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom functools import reduce\nfrom operator import mul\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('4 2 1 2\\n1 1 1 1\\n4 1 2 2\\n4 4 2 1') == '0\\n1\\n1\\n0'\nassert solution('4 1 1 2\\n1 1 1 1\\n4 1 2 2\\n4 4 2 1') == '0\\n1\\n1\\n0'\nassert solution('4 2 1 1\\n1 1 1 1\\n4 1 2 2\\n4 4 2 1') == '0\\n1\\n1\\n0'\nassert solution('4 2 1 1\\n1 1 1 1\\n4 1 2 1\\n4 4 2 1') == '0\\n1\\n1\\n0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n'''\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 5 2') == '0'\nassert solution('15 5 3 2') == '-1'\nassert solution('15 5 4 3') == '5'\nassert solution('15 5 2 1') == '2'\nassert solution('15 5 5 1') == '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''') == '''4\n-1\n5\n2\n0\n1'''\nassert solution('''5\n4 5 3 2\n4 5 4 3\n4 5 2 1\n4 5 5 1\n3 6 5 2\n4 5 7 3\n''') == '''5\n-1\n3\n2\n0\n1'''"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15 5 3 2\") == \"4\"\nassert solution(\"15 5 4 3\") == \"-1\"\nassert solution(\"15 5 2 1\") == \"5\"\nassert solution(\"15 5 5 1\") == \"2\"\nassert solution(\"16 7 5 2\") == \"0\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\n\"\"\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"a???c\") == 46"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cccbbbaaa\") == \"0\"\nassert solution(\"ac??bac\") == \"8\"\nassert solution(\"??a??b\") == \"3\"\nassert solution(\"a?b\") == \"3\"\nassert solution(\"?b?b\") == \"3\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a???c\") == 46\nprint('Success')"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('a??c') == '46'\nassert solution('c????b') == '11'\nassert solution('ac??bc') == '17'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\nimport math\nimport sys\nimport re\nimport collections\nfrom functools import reduce\nimport operator\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ac?b?c') == 24\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == 24\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a???c\") == 46\n\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"????????\") == 2835\nassert solution(\"a???c\") == 46\nassert solution(\"cccbbbaaa\") == 0\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n\"\"\"\n\nimport heapq\nimport itertools\nimport sys\nimport math\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\n\nassert solution('4 0\\n1 3 3 7') == '16'\n\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2 3\\n1 1 1\\n\") == \"4\"\nassert solution(\"2 5\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == 5\nassert solution(\"4 0\\n1 3 3 7\") == 16\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 0\\n1 3 3 7') == '16'\nassert solution('5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15') == '18'\n\n\"\"\"\nfrom sys import stdin\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nedges = []\nfor _ in range(m):\n    x, y, w = map(int, stdin.readline().split())\n    edges.append((x, y, w))\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n2 3 5\") == '18'\n\nassert solution(\"2 2\\n1 3 1\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\") == \"5\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n') == 14\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == '14'\n\nassert solution('''\n10 1 1\n0 9\n0 5\n''') == '45'\n\nassert solution('''\n10 1 1\n0 9\n1 5\n''') == '-1'"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\nassert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == 14\nassert solution(\"10 1 1\\n0 9\\n0 5\") == 45\nassert solution(\"10 1 1\\n0 9\\n0 5\") == -1\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\n\nassert solution('''10 1 1\n0 9\n0 5''') == '45'\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'\n\nassert solution('''10 1 1\n0 9\n1 5''') == '45'\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 8 10\\n4 7\\n0 3\\n6 9\\n1 2\") == '14'\nassert solution(\"7 8 10\\n4 7\\n0 3\\n6 9\\n1 2\") == '14'\nassert solution(\"7 8 10\\n4 7\\n0 3\\n6 9\\n1 2\") == '14'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == 14\nassert solution(\"10 1 1\\n0 9\\n0 5\") == 45\nassert solution(\"10 1 1\\n0 9\\n1 5\") == -1\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 7 5\n\"\"\"\n    ) == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"7 7 7\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\nA, B, C = map(int, input().split())"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\") == \"Yes\"\nassert solution(\"4 1 4\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n\nA, B, C = map(int, input().split())\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5') == 'Yes'\nassert solution('5 7 6') == 'No'\nassert solution('5 7 7') == 'No'\nassert solution('5 7 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1, 2, 3) == 4\nassert solution(2, 5, 2, 3, 1) == 1\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 5\\n1000 2000\") == \"1\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 12 5\\n1000 2000\\n') == '1'\n\n------Problem Link:------\nhttps://codeforces.com/contest/1478/problem/A\n\"\"\"\n\nimport math\n\nstdin = input()\nN, T, A = [int(x) for x in stdin.split()]\nH = [int(x) for x in input().split()]\n\nans = 0\nmin_diff = math.inf\nfor i, t in enumerate(H):\n    diff = (t - A) * 0.006\n    if abs(diff) < abs(min_diff):\n        min_diff = diff\n        ans = i + 1\nprint(ans)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12\\n1000 2000 3000\\n\") == \"1\"\nassert solution(\"2 12\\n1000 2000\\n\") == \"1\"\n\n-----Explanation-----\nThere are 2 places and their average temperatures are 12C and 12C respectively.\nPlace 1 has the closest average temperature to 12C which is 6C. Thus the palace should be built at Place 1.\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\n\nassert solution(\"2 5\") == \"2\"\n\nassert solution(\"3 10\") == \"0\"\n\nassert solution(\"1 2 3 4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n10 20\n50 150\n''') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 12 5 1000 2000\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n'''\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 2 1\\n1\") == \"0\"\nassert solution(\"2\\n1 1\\n1\") == \"0\"\nassert solution(\"3\\n1 2 1\\n1\") == \"0\"\nassert solution(\"3\\n1 1 1\\n1\") == \"0\"\nassert solution(\"3\\n1 2 1\\n2\") == \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n\") == 1\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == '1'\n\"\"\"\n\nfrom itertools import combinations\nimport itertools"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == 1\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\nassert solution(\"1 1\\n\") == \"1\"\nassert solution(\"1 1 1\\n\") == \"0\"\nassert solution(\"1 1 2\\n\") == \"1\"\nassert solution(\"1 1 2 1\\n\") == \"0\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(sys.stdin.readlines()[0])) == str(1)\n\"\"\"\nimport sys"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n1 2\\n\") == \"1\"\n\"\"\"\n\nimport sys\n\nN, M = [int(i) for i in sys.stdin.readline().split()]\n\nodds = 0\nevens = 0\nfor _ in range(N+M):\n    x = int(sys.stdin.readline())\n    if x%2 == 0:\n        evens += 1\n    else:\n        odds += 1"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n') == '1'\n\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ACACTACG') == '2'\nassert solution('ACACTACGACG') == '4'\nassert solution('ACACTACGAGC') == '3'\n\n-----"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ACACTACG', 3, 7) == 2\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A) == B\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CATCAT\") == \"2\"\nassert solution(\"ACGGTT\") == \"5\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == 2\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8''') == '''2\n0\n3'''\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">CGAAACCGTCGTT\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"GACTACG\") == \"2\"\nassert solution(\"ATCACG\") == \"2\"\nassert solution(\"AGCACG\") == \"3\"\nassert solution(\"ATCACG\") == \"2\"\n\n\"\"\"\n\nimport unittest\nimport sys\nimport collections\nimport collections.abc\nimport itertools\nimport functools\nimport operator\nimport pdb\nimport math\nfrom typing import List, Any, Optional, Callable, Dict, Tuple, Set, Union, Generator, Iterable\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACACTACG\", 3, 0) == 0\nassert solution(\"ACACTACG\", 8, 8) == 3\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\") == 2\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\nN, K = [int(x) for x in input().split()]\nprices = [int(x) for x in input().split()]\n\nsorted_prices = sorted(prices)\n\ncost = 0\nfor i in range(K):\n    cost += sorted_prices[i]\n\nprint(cost)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == 210\n\n\"\"\"\n\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split())\narr = list(map(int, stdin.readline().strip().split()))\nprice = 0\nfor i in arr[:k]:\n    price += i\nprint(price)\n\n\"\"\"\n\n\"\"\"\na, b = map(int, stdin.readline().strip().split())\nprice = 0\nfor i in range(a, b + 1):\n    price += i\nprint(price)\n\n\"\"\"\n\n\"\"\"\na, b = map(int, stdin.readline().strip().split())\ns = set(map(int, stdin.readline().strip().split()))\nprint(sum(list(s)[:b]))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == \"210\"\nprint(\"Passed!\")"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == 210\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nprint(solution(\"5 3\\n50 100 80 120 80\"))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('N K\\n') == ''\n\nimport sys\nN, K = map(int, sys.stdin.readline().split())\np = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\nimport sys\n\ntests = [\n    ('1 3 4', '4'),\n    ('100 100 100', '400'),\n    ('10 10 10', '40'),\n]"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 4\\n') == '4'\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 3 3\") == \"4\"\nassert solution(\"1 3 2\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\") == 4\nassert solution(\"2 2 2\") == 4\nassert solution(\"3 2 3\") == 6\nassert solution(\"5 1 1\") == 3\nassert solution(\"1 3 1\") == 3\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == '4'\n\nprint(solution('1 3 4'))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n\nP, Q, R = [int(n) for n in input().split()]\n\nprint(min(P+Q, P+R, Q+R))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == solution_expected"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == '4'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\\n\"\n\n-------\n>>> print(solution(stdin))\n0\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nfrom collections import namedtuple\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\nX, A = input().split()\nprint('0') if int(X) < int(A) else print('10')\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">5\") == 10\nassert solution(\">6\") == 10\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '0'\nassert solution('6 6') == '10'\nassert solution('9 9') == '10'\nassert solution('2 1') == '0'\nassert solution('1 2') == '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '0'"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\nprint(\"OK\")\n\n--------Output--------\nOK\n\n--------Tests--------\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3 4\") == \"0\\n\"\nassert solution(\"1 3\\n2 4\") == \"10\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\n\n\"\"\"\nSample Input 1\n\n3 5\nSample Output 1\n\n0\n\nSample Input 2\n\n1 1\nSample Output 2\n\n1\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\") == \"1\"\nprint(\"Test PASSED\")"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nN, K = map(int, input().split())\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\n\"\"\"\nimport sys\n\nN, K = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\") == '1'\n\"\"\"\n\nfrom sys import stdin, stdout\n\nN, K = [int(x) for x in stdin.readline().split()]\n\nstdout.write(str(min(abs(N - K), abs(N + K))))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == \"1\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('5 6 8') == 'bust'\nassert solution('6 6 8') == 'bust'\nassert solution('5 7 8') == 'win'\nassert solution('5 6 7') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"1 2 3\") == \"bust\"\nassert solution(\"11 21 31\") == \"win\"\nassert solution(\"1 1 1\") == \"win\"\nassert solution(\"1 11 21\") == \"bust\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"1 1 1\") == \"bust\"\nassert solution(\"10 10 10\") == \"bust\"\nassert solution(\"11 15 3\") == \"bust\"\nassert solution(\"3 3 3\") == \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 8 9\") == \"win\"\nassert solution(\"5 7 9\") == \"bust\"\n\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\n\"\"\"\n\na1, a2, a3 = map(int, input().split())\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9\") == \"win\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"12\") == \"24\"\nassert solution(\"20\") == \"60\"\nassert solution(\"1\") == \"2\"\n\"\"\"\nimport math\nimport sys\n\nn = int(input())"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nfrom typing import List\nfrom typing import Set"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"6\\n\"\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6') == 6\nassert solution('3') == 6\nassert solution('1') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2') == 2\nassert solution('3') == 6\nassert solution('5') == 10\nassert solution('2 3') == 6\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"10\") == \"10\"\nassert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3') == '6'\nassert solution('7') == '6'\n\n'''\n\nimport sys"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '6'\nassert solution('4\\n') == '8'\nassert solution('9\\n') == '18'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 6\nassert solution(7) == 14\nassert solution(15) == 42\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\nassert solution('11') == '22'\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdi:) == \"2\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1\n3\n2\n4\n5\n''') == '2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\") == \"2\"\n\n-----\nSolution:"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2') == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == 2\n\n\"\"\"\n\n\n\"\"\"\nGiven the total number of apples and the number of days, your task is to calculate the total number of apples that will be collected from all the trees.\n\nInput Format\n\nA single line of input containing two integers N and K separated by a space.\n\nConstraints\n\n1 \\leq N \\leq 10^6\n0 \\leq K \\leq N\n\nOutput Format\n\nPrint a single integer denoting the answer to the problem.\n\nSample Input 0\n\n7 3\nSample Output 0\n\n21\nExplanation 0\n\nThe apples are as follows:\n- Day 1 : 4 apples\n- Day 2 : 2 apples\n- Day 3 : 4 apples\n- Day 4 : 0 apples\n- Day 5 : 2 apples\n- Day 6 : 0 apples\n- Day 7 : 4 apples\n\nThere are total 7 days.\n\nSo the number of apples collected are 21.\n\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 1\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"15\") == \"hon\"\nassert solution(\"12\") == \"pon\"\nassert solution(\"999\") == \"hon\"\nassert solution(\"555\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"21\") == \"hon\"\nassert solution(\"111\") == \"bon\"\nassert solution(\"128\") == \"pon\"\nassert solution(\"12\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"12\") == \"hon\"\nassert solution(\"9\") == \"hon\"\nassert solution(\"0\") == \"bon\"\nassert solution(\"5\") == \"pon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"25\") == \"hon\"\nassert solution(\"73\") == \"bon\"\nassert solution(\"91\") == \"hon\"\nassert solution(\"912\") == \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == \"pon\"\nassert solution('16') == \"pon\"\nassert solution('45') == \"hon\"\nassert solution('456') == \"hon\"\nassert solution('789') == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"999\") == \"bon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\n\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == 'pon'\nassert solution('999') == 'bon'\nassert solution('2') == 'hon'\nassert solution('0') == 'pon'\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n3 1 2''') == '11'\nassert solution('''5\n5 4 3 2 1''') == '14'\nassert solution('''2\n10 10''') == '10'\nassert solution('''4\n10 9 8 7''') == '45'\nassert solution('''2\n1000 1000''') == '-2'\n'''\nN = int(stdin.readline())\nd = list(map(int, stdin.readline().split()))\nprint(sum([d[i] * d[j] for i in range(N) for j in range(i + 1, N)]))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"11\"\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == '11'\n\"\"\"\n\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2') == '22'\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\n\"\"\"\n\n\"\"\"\n\nN = int(stdin.readline())\nlst = [int(x) for x in stdin.readline().split(\" \")]\n\ncount = 0\nfor i in range(len(lst)):\n    for j in range(i+1, len(lst)):\n        count += (lst[i]*lst[j])\n\nprint(count)\n\n\"\"\"\n\"\"\"\nN = int(stdin.readline())\nd = [int(x) for x in stdin.readline().split(\" \")]\n\nres = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        res += (d[i]*d[j])\n\nprint(res)\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 2\\n') == '11'\nassert solution('5 1 2 4\\n') == '9'\nassert solution('7 1 2 4 9\\n') == '31'\nassert solution('50 1 2 4 9 30\\n') == '162'\n\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"5\\n1\\n4\\n3\\n5\") == \"5\\n4\\n5\"\nassert solution(\"1\\n4\\n3\") == \"4\\n3\\n4\"\nassert solution(\"5\\n1\\n4\\n3\\n5\") == \"5\\n5\\n5\"\nassert solution(\"1\\n1\\n4\\n3\") == \"3\\n3\\n4\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('3') == '3'\nassert solution('4,5') == '4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n4\\n3') == '4\\n3\\n4'\nassert solution('2\\n1\\n4\\n3') == '4\\n4\\n3\\n3'\nassert solution('3\\n1\\n4\\n3') == '4\\n4\\n4\\n4'\nassert solution('3\\n1\\n4\\n3\\n2') == '4\\n4\\n4\\n4\\n4'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n4\n3\n''') == '''\n4\n3\n4'''\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\nassert solution('2\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('2\\n3\\n4') == '4\\n3'\nassert solution('1\\n2') == '2\\n2'\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom collections import deque"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == '3'\nassert solution('5 3\\n') == '5'\nassert solution('5 5\\n') == '9'\nassert solution('1 1\\n') == '0'\nassert solution('3 3\\n') == '0'\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3') == '9'\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n\") == 9\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n') == 9\nassert solution('3 5\\n') == 4\nassert solution('5 10\\n') == 10\nassert solution('5 20\\n') == 10\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n') == '9'\nassert solution('2 2\\n') == '0'\nassert solution('10 10\\n') == '20'\nassert solution('4 5\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\n\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        dict_buttons = {\n            \"A\": 0,\n            \"B\": 1\n        }\n        line = stdin[0].split()\n        A = int(line[0])\n        B = int(line[1])\n        dict_button = {}\n        for key, value in dict_buttons.items():\n            dict_button[value] = key\n        count = 0\n        while A > 0 and B > 0:\n            if dict_button[B] == \"A\":\n                count += A\n                A -= 1\n                B -= 1\n            elif dict_button[B] == \"B\":\n                count += A\n                count += B\n                A -= 1\n                B -= 1\n            else:\n                count += A\n                A -= 1\n        return str(count)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"9\"\n'''\nimport sys"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n-30 -10 10 20 50''') == '40'"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n-1 3 -3 5 -6\\n\") == \"4\"\nassert solution(\"10 3\\n-1 -1 2 2 2\\n\") == \"0\"\nassert solution(\"5 2\\n3 -3 -4 1 2\\n\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n\nN, K = map(int, input().split())\ncandles = list(map(int, input().split()))\ncandles = [(i, candles[i]) for i in range(N)]\ncandles.sort()\n\ni, j = 0, 0\nwhile i < N:\n    if j < K:\n        if candles[i][1] > 0:\n            candles[i][1] -= 1\n            j += 1\n        i += 1\n    else:\n        break\n\nprint(i)\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 -20 -50\") == \"10\"\n\n----\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 1 1 1\\n\") == \"2\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\n\"\"\"\n\nfrom typing import List, Tuple, Union"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n') == '0'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n1\\n') == '0'\nassert solution('1\\n2\\n') == '1'\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 13\") == \"2\"\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == '1'\nassert solution(\"6 10\") == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13') == '2'\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\na, b = map(int, input().split())\ns = 0\nfor i in range(1, b + 1):\n    s += i\n    if a <= s <= b:\n        break\n\nprint(s - a + 1)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5 2') == '1'\n\n'''\n\nimport sys"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\na, b = [int(n) for n in stdin.split()]\ns = 0\nfor i in range(1, b):\n    if a > i > 1:\n        s += i\nprint(s)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 13\") == '2'\nassert solution(\"5 10\") == '0'\nassert solution(\"2 5\") == '2'\nassert solution(\"2 5\") == '2'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 13\\n\") == \"2\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(a - b)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4') == '3'\n\"\"\"\n\nH, A = input().split()\nH = int(H)\nA = int(A)\n\nresult = 0\nwhile H > 0:\n    H -= A\n    result += 1\n\nprint(result)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4') == '3'\n\"\"\"\n\nH, A = [int(x) for x in input().split()]\ni = 0\nwhile H > 0:\n    H -= A\n    if H <= 0:\n        print(i)\n        break\n    H += A\n    i += 1\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('3 2') == '2'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == 3\nassert solution(\"10 2\") == 1\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"100 500\") == \"0\"\nassert solution(\"10 2\") == \"5\"\nassert solution(\"10 4\") == \"3\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\nh, a = [int(x) for x in input().split()]"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 75 25 100') == '50'\n\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(\"Test 1\")\nassert solution(\"25 25 100\") == \"50\"\nprint(\"Test 2\")\nassert solution(\"25 100 25 100\") == \"50\"\nprint(\"Test 3\")\nassert solution(\"100 100 100 100\") == \"0\"\nprint(\"Test 4\")\nassert solution(\"50 50 50 50\") == \"0\"\nprint(\"Test 5\")\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"1 20 30 40\") == \"15\"\nassert solution(\"0 75 100 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 100 100\") == \"75\"\nassert solution(\"0 75 100 75\") == \"100\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('0 75 25 50') == '50'\nassert solution('0 25 75 75') == '50'\nassert solution('25 50 75 100') == '50'\nassert solution('75 100 75 100') == '100'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 75 25 100') == '50'\nprint(solution(stdin))\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('105') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(105) == 1\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"105\") == 1\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('105') == '1'\nprint(solution('105'))\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(105) == 1\nprint('Test successfull!')\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('105\\n') == '1'\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('4\\n') == '0'\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''105''') == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n2 2 3\\n1\\n2\\n2\\n3\\n\") == \"1\"\nprint(\"Test #1 PASSED\")\nassert solution(\"7 3\\n2 2 3\\n1\\n2\\n2\\n3\\n\") == \"1\"\nprint(\"Test #2 PASSED\")\nassert solution(\"7 3\\n2 2 3\\n1\\n2\\n2\\n3\\n\") == \"1\"\nprint(\"Test #3 PASSED\")\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"1\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nimport sys\n\nn,k = map(int,sys.stdin.readline().split())\n\nmax_num = 0\nmin_num = 0\n\nfor i in range(k):\n    num = int(sys.stdin.readline())\n    if i == 0:\n        min_num = num\n        max_num = num\n    else:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n\nprint(max_num - min_num)"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1 2\\n') == '0'\nassert solution('1 2\\n3') == '-1'\nassert solution('2 5\\n2 5') == '0'\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nassert solution('7 3\\n2 2 3') == '1'\nassert solution('7 3\\n3 3 3') == '0'\nassert solution('7 3\\n2 2 2') == '0'"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 3\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8''') == '1'\n\n* Solution by:\n\n'''\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"7 3\"\n) == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nfrom math import gcd\n\nN, K = map(int, input().split())\n\nn_list = list(map(int, input().split()))\n\nlcm = 1\nfor i in range(N):\n    lcm = lcm * n_list[i] // gcd(lcm, n_list[i])\n\nlcm = lcm // gcd(*n_list)\n\nprint(max(N//K - lcm, lcm - 1))\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111') == '111'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == '111'\nassert solution('113') == '113'\nassert solution('1133') == '1133'\nassert solution('1133') == '1133'\nassert solution('1133') == '1133'\n\n\"\"\"\n\n\"\"\"\nWe can use the following procedure to determine whether the\nbase-ten representation of an integer n has all the same\ndigits.  If so, return n.  Otherwise, we need to consider\nn+1, n+2, n+3,..., n+j for some j.  If all j satisfy the\ncondition, then all j+1, j+2,..., j+k satisfy the\ncondition for all k <= j, and we can conclude that the\nrepresentation of n cannot have all the same digits.\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"101\") == \"010\"\nassert solution(\"100\") == \"100\"\nassert solution(\"011\") == \"011\"\nassert solution(\"010\") == \"010\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nn = int(stdin.readline())\n\nabc = []\nfor i in range(n):\n    abc.append(i + 1)\n\nabc.sort(key=lambda x: int(str(x)[0]), reverse=False)\n\nprint(abc[0])\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nfrom functools import reduce\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('111') == '111'"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '111'\nassert solution('100') == '101'\nassert solution('9') == '9'\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 6 3''') == '5'\n\n'''\n    When the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the third task at cost 2.\n - Complete the second task at cost 3.\n'''\n\n'''\n    Complete the first task at cost 0.\n    Complete the third task at cost 2.\n    Complete the second task at cost 3.\n    The total cost will be 5.\n'''\n\n'''\n    When the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the second task at cost 1.\n - Complete the third task at cost 2.\n - Complete the second task at cost 3.\n - Complete the third task at cost 4.\n - Complete the second task at cost 5.\n - Complete the first task at cost 6.\n - Complete the second task at cost 7.\n - Complete the third task at cost 8.\n - Complete the second task at cost 9.\n - Complete the first task at cost 10.\n - Complete the second task at cost 11.\n - Complete the third task at cost 12.\n - Complete the second task at cost 13.\n - Complete the first task at cost 14.\n - Complete the second task at cost 15.\n - Complete the third task at cost 16.\n - Complete the second task at cost 17.\n - Complete the first task at cost 18.\n - Complete the second task at cost 19.\n - Complete the third task at cost 20.\n - Complete the second task at cost 21.\n - Complete the first task at cost 22.\n - Complete the second task at cost 23.\n - Complete the third task at cost 24.\n - Complete the second task at cost 25.\n - Complete the first task at cost 26.\n - Complete the second task at cost 27.\n - Complete the third task at cost 28.\n - Complete the second task at cost 29.\n - Complete the first task at cost 30.\n - Complete the second task at cost 31.\n - Complete the third task at cost 32.\n - Complete the second task at cost 33.\n - Complete the first task at cost 34.\n - Complete the second task at cost 35.\n - Complete the third task at cost 36.\n - Complete the second task at cost 37.\n - Complete the first task at cost 38.\n - Complete the second task at cost 39.\n - Complete the third task at cost 40.\n - Complete the second task at cost 41.\n - Complete the first task at cost 42.\n - Complete the second task at cost 43.\n - Complete the third task at cost 44.\n - Complete the second task at cost 45.\n - Complete the first task at cost 46.\n - Complete the second task at cost 47.\n - Complete the third task at cost 48.\n - Complete the second task at cost 49.\n - Complete the first task at cost 50.\n - Complete the second task at cost 51.\n - Complete the third task at cost 52.\n - Complete the second task at cost 53.\n - Complete the first task at cost 54.\n - Complete the second task at cost 55.\n - Complete the third task at cost 56.\n - Complete the second task at cost 57.\n - Complete the first task at cost 58.\n - Complete the second task at cost 59.\n - Complete the third task at cost 60.\n - Complete the second task at cost 61.\n - Complete the first task at cost 62.\n - Complete the second task at cost 63.\n - Complete the third task at cost 64.\n - Complete the second task at cost 65.\n - Complete the first task at cost 66.\n - Complete the second task at cost 67.\n - Complete the third task at cost 68.\n - Complete the second task at cost 69.\n - Complete the first task at cost 70.\n - Complete the second task at cost 71.\n - Complete the third task at cost 72.\n - Complete the second task at cost 73.\n - Complete the first task at cost 74.\n - Complete the second task at cost 75.\n - Complete the third task at cost 76.\n - Complete the second task at cost 77.\n - Complete the first task at cost 78.\n - Complete the second task at cost 79.\n - Complete the third task at cost 80.\n - Complete the second task at cost 81.\n - Complete the first task at cost 82.\n - Complete the second task at cost 83.\n - Complete the third task at cost 84.\n - Complete the second task at cost 85.\n - Complete the first task at cost 86.\n - Complete the second task at cost 87.\n - Complete the third task at cost 88.\n - Complete the second task at cost 89.\n - Complete the first task at cost 90.\n - Complete the second task at cost 91.\n - Complete the third task at cost 92.\n - Complete the second task at cost 93.\n - Complete the first task at cost 94.\n - Complete the second task at cost 95.\n - Complete the third task at cost 96.\n - Complete the second task at cost 97.\n - Complete the first task at cost 98.\n - Complete the second task at cost 99.\n - Complete the third task at cost 100.\n'''\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nnumbers = input().strip().split()\nA = list(map(int, numbers))\n\ntask_costs = []\nfor i, a_i in enumerate(A):\n    # Task cost of i is 0 if i is the first task.\n    task_costs.append(sum(A[:i]))"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple\nimport math"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"6 4 3\") == \"16\"\nassert solution(\"6 3 4\") == \"12\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"5\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline()\nn = int(n)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\nc = 0\nb = 0\nd = 0\nwhile c!= a:\n    b += 1\n    if b % 2 == 0:\n        c += 1\n        d = b // 2\n    else:\n        c += 1\n        d = 3 * c + 1\nprint(b)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\ns = int(input())"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\ns = int(input())\na = []\na.append(s)\nwhile a[-1]!= 1:\n    if a[-1] % 2 == 0:\n        a.append(a[-1] // 2)\n    else:\n        a.append(a[-1] * 3 + 1)\nprint(len(a))\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\ns = int(stdin.readline())\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'No'\nassert solution('1 1 1 1') == 'Yes'\nassert solution('10 9 10 10') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 2 3 4\") == \"Yes\"\nassert solution(\"1 1 1 1\") == \"Yes\"\nassert solution(\"100 100 100 100\") == \"Yes\"\nassert solution(\"1 10 10 10\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('100 100 100 100') == 'Yes'\nassert solution('1 1 1 1') == 'No'\nassert solution('1 9 9 1') == 'Yes'\nassert solution('10 10 10 10') == 'No'\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 9 10 10\") == 'No'\nassert solution(\"4 6 3 6\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nprint(\"PASS\")\n\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 10 10 9\") == \"No\"\nassert solution(\"9 9 10 10\") == \"No\"\nassert solution(\"10 10 10 10\") == \"Yes\"\n\n-------------------\nimport re"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 9 10\") == \"Yes\"\nassert solution(\"10 9 10 9\") == \"No\"\n\"\"\"\n\nA, B, C, D = [int(s) for s in stdin.split()]"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n10 2 5\n6 3 4''') == '5'\nprint('Passed')\n\nassert solution('''1\n8\n6''') == '8'\nprint('Passed')\n\nassert solution('''1\n3\n5''') == '3'\nprint('Passed')\n\nassert solution('''5\n1\n5\n2\n3\n4''') == '5'\nprint('Passed')\n\nassert solution('''10\n1\n5\n2\n3\n4''') == '10'\nprint('Passed')"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nl = [int(x) for x in sys.stdin.readline().split()]\nc = [int(x) for x in sys.stdin.readline().split()]\n\nn = len(l)\ndp = [0] * (n + 1)\n\ndp[0] = 0\ndp[1] = l[0]\n\nfor i in range(1, n):\n    dp[i + 1] = max(dp[i], dp[i - 1] + l[i])\n\nprint(dp[n] - sum(c))"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3\\n10 2 5\\n6 3 4\\n'\n) == '5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nn = int(input())\nv, c = [], []\nfor i in range(n):\n    v.append(int(input()))\n    c.append(int(input()))\n\ns = 0\nl = []\nfor i in range(n):\n    s += v[i] - c[i]\n    l.append(s)\n\nprint(max(l))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\nprint(a[0]*a[1] + b[0]*b[1])\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nn = int(input())\n\ngems = list(map(int, input().split()))\ncosts = list(map(int, input().split()))\n\nmax_price = 0\nmax_gems = []\n\ngems_set = set(gems)\n\nfor i, gem in enumerate(gems):\n    if gem in gems_set:\n        gem_set = {gem}\n        if gem in costs:\n            cost = costs.index(gem)\n            for j in range(i + 1, n):\n                if gems[j] in costs:\n                    cost = min(cost, costs.index(gems[j]))\n                else:\n                    break\n            if i < cost:\n                continue\n            max_price += gem\n            max_gems.append(i)\n        else:\n            max_price += gem\n            max_gems.append(i)\n\nfor i in range(len(max_gems)):\n    max_price -= costs[max_gems[i]]\n\nprint(max_price)\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"6\"\nassert solution(\"2\\n2\\n2\\n2\\n2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n10 2 5\n6 3 4''') == '5'\n\"\"\"\n\nimport os\nimport sys\n\npath = os.path.join(sys.path[0], \"input.txt\")"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\n------\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4 4\\n'\n    '##.#\\n'\n    '....\\n'\n    '##.#\\n'\n    '.#.#\\n'\n) == '###\\n###\\n.##\\n'\n\nassert solution(\n    '2 2\\n'\n    '# #\\n'\n    ': \\n'\n    '# #\\n'\n    '# #\\n'\n) == '# #\\n# #\\n':\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '###\\n###\\n.##\\n'"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#') == '###\\n###\\n.##'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n##.#\n....\n##.#\n.#.#\n''') == '###\\n###\\n.##\\n'\n\nassert solution('''\n4 4\n##.#\n....\n##.#\n.#.#\n''') == '###\\n###\\n.##\\n'\n\nassert solution('''\n4 4\n##.\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '###'\nassert solution('''4 4\n##.#\n....\n##.#\n.#.#''') == '###'\nassert solution('''4 4\n##.#\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 4\n##.#\n....\n##.#\n.#.#\"\"\"\n    ) == \"\"\"###\n###\n.##\"\"\nassert solution(\"\"\"5 5\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\"\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 6.28318530717958623200\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 6.28318530717958623200\nassert solution('2') == 3.14159265358979323846\nassert solution('100') == 6.28318530717958623200\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '12.566370614359172'\nassert solution('1') == '6.2831853071795862'\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"12.566370614359172\"\n\"\"\"\n\nimport math\n\nR = input()\ncir = 2 * math.pi * int(R)\nprint(cir)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\nassert solution(\"2\") == \"12.566370614359172953850\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('2') == '12.566370614359172953850'\nassert solution('3') == '19.433981132056603'\n\"\"\"\n\nimport math\n\nr = float(input().strip())\nprint(2*math.pi*r)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ASA\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('ABCD') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('ABBA') == 'No'\nassert solution('AABB') == 'Yes'\nassert solution('AAAA') == 'Yes'\nassert solution('ABAA') == 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('PSPS') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSS\") == \"Yes\"\nassert solution(\"ASS\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\nASSS''') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ASSa\") == \"Yes\"\nassert solution(\"ASSA\") == \"Yes\"\nassert solution(\"SSSA\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nprint(solution(\"ASSA\"))\n\n-----Solution-----\nThis is a typical question in which the most common solution is to check if all characters appear twice in the given string.\nTo achieve this, we can build a dictionary, where the keys represent the characters and the values represent the number of occurrences of that character in the string.\n\nIf we have two characters that occur twice in the string, then we can check if both keys have a value of two.\nIf there is one character that has a value of one, then we can check if the character is present in the dictionary with value 1."
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ASAS') == 'Yes'\nassert solution('AASA') == 'No'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2') == '-10'\nassert solution('10 2') == '10'\nassert solution('1 1') == '1'\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nassert solution(\"-17 5\") == \"0\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"-10 2\") == \"-20\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-13 3\\n') == '-10'\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('10 20') == '30'\nassert solution('30 40') == '80'\nassert solution('-10 -20') == '-30'\nassert solution('-30 -40') == '-80'\n\"\"\"\n\n\"\"\"\nSolution:"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-13 3\") == \"-10\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\nimport sys"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n6 5 6 8') == 3\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('3\\n1 2 3') == '0'\nassert solution('1\\n1') == '0'\nassert solution('3\\n1 1 2') == '1'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nH = [int(x) for x in stdin.readline().split()]\n\nassert 1 <= N <= 20\nassert all(1 <= h <= 100 for h in H)\n\ncnt = 0\nfor i in range(1, N):\n    if H[0] <= H[i]:\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('3\\n8 3 1 6') == '2'\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\nassert solution(\"7\\n4 7 8 7 6 3 9 5\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\nres = 0\n\nfor i in range(1, n):\n    if arr[i - 1] > arr[i]:\n        res += 1\n\nprint(res)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\nassert solution(\"10\\n5 8 10 3 6 9 15 13 14 20\") == \"4\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 1 2 1\"\nassert solution(\"7\\n1 2 3 1 2 3 4\") == \"2 3 4\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n1 1 1 1\\n\"\n) == \"4\\n1 1 1 1\"\n\nassert solution(\n    \"5\\n1 2 3 4 5\\n\"\n) == \"1\\n5\"\nassert solution(\n    \"7\\n1 2 3 1 2 3 4\\n\"\n) == \"2\\n3 4\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4\\n') == '2'\nassert solution('4\\n1 1 1 1\\n') == '4'\nassert solution('5\\n1 2 1 2 1\\n') == '3'\nassert solution('5\\n1 2 1 2 1\\n') == '3'\nassert solution('5\\n1 2 1 2 1\\n') == '3'"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\n\nassert solution('2\\n1 1') == '2\\n1 1'\n\nassert solution('6\\n1 2 3 4 5 6') == '6\\n1 2 3 4 5 6'\n\nassert solution('7\\n1 2 3 4 5 6 7') == '7\\n1 2 3 4 5 6 7'"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"5\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 1') == '4\\n2 2 1'\nassert solution('3\\n1 2 3') == '3\\n1 1 1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(r'5\\n1 2 3 4 5') == '1 1 1 1'\nassert solution(r'4\\n1 2 3 4') == '1 1 1 1'\nassert solution(r'7\\n1 2 3 1 2 3 4') == '2 3 1 2 3 4'\nassert solution(r'2\\n1 1') == '1 1'\nassert solution(r'1\\n1') == '1 1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\\n\"\nassert solution(\"3\\n1 2 3\\n\") == \"3\\n1 1 2\\n\"\nassert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\\n\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n\") == \"1\\n5 6 7\\n\"\nassert solution(\"1\\n5\\n\") == \"1\\n5\\n\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == 2\nassert solution(\"4\\n1 1 1 1\\n\") == 4\nassert solution(\"5\\n1 2 1 2 1\\n\") == 3\nassert solution(\"5\\n1 2 3 4 5\\n\") == 1\nassert solution(\"5\\n1 2 1 2 1\\n\") == 3\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"2\"\nassert solution(\"1\\n999999999\") == \"999999999\"\nassert solution(\"7\\n999999984\") == \"333333328\"\nassert solution(\"1\\n99999999999999\") == \"99999999999999\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n6') == '2'\nassert solution('3\\n9') == '1'\nassert solution('2\\n1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\\n2\\n1\"\nassert solution(\"6\") == \"1\\n2\\n1\"\nassert solution(\"7\") == \"1\\n2\\n1\"\nassert solution(\"21\") == \"4\\n3\\n2\\n1\\n1\\n1\"\nassert solution(\"28\") == \"4\\n3\\n2\\n1\\n1\\n1\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '4'\nassert solution('28') == '3'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '4'\nassert solution('1\\n999999999') == '1'\nassert solution('1\\n999999984') == '4'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"4\"\nassert solution(\"28\") == \"3\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n3\") == \"1\\n2\\n1\\n7\\n4\"\nassert solution(\"7\\n6\") == \"2\\n2\\n1\\n7\\n4\"\nassert solution(\"21\\n28\") == \"3\\n3\\n1\\n7\\n4\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '7'\nassert solution('28') == '4'\n\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3\\n4') == '2'\nassert solution('2\\n6\\n2\\n1\\n1') == '4'\nassert solution('2\\n6\\n2\\n1\\n1\\n1') == '3'\nassert solution('2\\n6\\n2\\n1\\n1\\n1\\n1\\n1\\n1') == '5'\nassert solution('2\\n6\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '1\\n2\\n1\\n7\\n4\\n333333333'\n\nassert solution('''\n3\n3\n6\n7\n21\n28\n999999999\n999999984\n''') == '1\\n2\\n1\\n7\\n4\\n333333333'\n\nassert solution('''\n3\n1\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9\n9999999999\n9999999999\n9999999999\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\nassert solution('112 34') == '11'\n\n\n\n-----SOLUTIONS-----"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512 4\") == \"50\"\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('512 4') == '50'\nprint(solution('1000000000 9'))\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(12345)) == \"1234\"\nassert solution(str(1234)) == \"12\"\nassert solution(str(123)) == \"12\"\nassert solution(str(12)) == \"1\"\nassert solution(str(1)) == \"0\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('512 4') == '50'\n\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"512 4\") == \"50\"\nprint(\"PASSED\")\n\nassert solution(\"1000000000 9\") == \"1\"\nprint(\"PASSED\")"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '7\\n4 3 5 1 2 2 2 1'\n) == '5\\n2 1 1 2 3'\nassert solution(\n    '5\\n3 7 5 1 5'\n) == '2\\n5 5'\nassert solution(\n    '3\\n5 1 4'\n) == '2\\n4 5'\nassert solution(\n    '7\\n2 2 3 2 1 2 2'\n) == '7\\n1 2 2 2 2 3 2'\n\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n4 5\"\n\n\"\"\""
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n4 5\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n5 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\\n\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\\n\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\\n\") == \"2\\n5 4\"\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"4 17\\n10 8\\n7 4\\n3 1\\n5 4\") == \"1\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\ns = [0] * n\nfor i in range(n):\n    s[i] = [int(x) for x in input().split()]\ns.sort(key=lambda x: x[1])\nj = 0\nsum = 0\nfor i in range(n):\n    sum += s[i][1]\n    if sum > m:\n        print(-1)\n        exit()\n    elif sum == m:\n        j += 1\nprint(j)\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 21\n10 8\n7 4\n3 1\n5 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 16\n10 8\n7 4\n3 1\n5 4\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"4 3\\n10 8\\n7 4\\n3 1\\n5 4\") == \"0\"\n\"\"\"\n\nn, m = map(int, input().split())\nsongs = [None for _ in range(n)]\nfor i in range(n):\n    songs[i] = list(map(int, input().split()))\n\nsongs.sort(key=lambda x: x[0])\ntotal = 0\nfor song in songs:\n    if total + song[0] <= m:\n        total += song[0]\n    else:\n        break\n\nprint(total)"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2'\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4\n3 5\n4 5\n1 1\n5 5\n6 5\n7 3\n8 2\n7 3\n8 2\n4 2\n6 1''') == '4'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4\n3 5\n4 5\n1 1\n5 5\n6 5\n7 3\n8 2\n7 3\n8 2\n4 2\n6 1''') == '-1'\n\nassert solution('''4 16\n10 8\n7 4\n3 1\n5 4\n3 5\n4 5\n1 1\n5 5\n6 5\n7 3\n8 2\n7 3\n8 2\n4 2\n6 1\n4 2\n6 1''') == '4'"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n\"\"\"\nimport sys\n\nn, m = list(map(int, sys.stdin.readline().split()))\nsizes = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 3') == 'tleel'\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 3') == 'tleel'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 1 1') == 'tleel'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 3') == 'tleel'\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('qwerty') == 'qwerty'\nassert solution('tleelte') == 'tleelte'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1\\n5 2 2') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\nassert solution('4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 1\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\n-----Hint-----\n\nWe are not interested in the order of the letters in the solution. We are interested in the exact number of distinct letters in the substrings of length $a$.\n\nThe number of distinct letters in a substring is equal to the number of distinct letters in all the possible substrings of length $a$ minus the number of distinct letters in all the possible substrings of length $a-1$.\n\nIf $a = 6$, then the number of distinct letters in a substring of length $6$ is equal to the number of distinct letters in all the possible substrings of length $6$ minus the number of distinct letters in all the possible substrings of length $6-1$ plus the number of distinct letters in all the possible substrings of length $6-2$ minus the number of distinct letters in all the possible substrings of length $6-2$ plus the number of distinct letters in all the possible substrings of length $6-3$ minus the number of distinct letters in all the possible substrings of length $6-3$.\n\nAlso, we can use a HashSet and iterate through the string to keep track of distinct letters in the substring.\n\"\"\"\n\n\nimport unittest\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_case_1(self):\n        stdin = \"4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\"\n        expected = \"tleel\\nqwerty\\nvvvvvv\\nabcde\"\n        self.assertEqual(solution(stdin), expected)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 12 6') == '12'"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 12 6\\n') == 12\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 12 6\\n\") == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 12 6\\n') == '12'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 12 6\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('3 3 1') == '0'\nassert solution('3 1 3') == '4'\nassert solution('1 1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(8)) == str(2)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5') == '2'\nassert solution('4\\n6') == '3'\nassert solution('7\\n10') == '3'\nassert solution('7\\n5') == '2'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn = int(stdin.readline())\n\ngroups = 0\nwhile n >= 3:\n    groups += 1\n    n -= 3\n\nprint(groups)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n2\\n8\\n5\\n3\\n4\\n1\\n7') == '2'\nprint(solution('8\\n5\\n3\\n4\\n1\\n7'))\nprint(solution('8\\n5\\n3\\n4\\n1'))\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5\\n5\\n5\\n5\\n') == '2'\n\nassert solution('6\\n6\\n6\\n6\\n6\\n') == '3'\n\nassert solution('8\\n8\\n8\\n8\\n8\\n') == '3'\n\nassert solution('9\\n9\\n9\\n9\\n9\\n') == '4'\n\nassert solution('10\\n10\\n10\\n10\\n10\\n') == '4'"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n') == '2'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n') == '2'"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2') == '2'\nassert solution('3\\n4') == '1'\nassert solution('3\\n5') == '3'\nassert solution('4\\n3') == '1'\nassert solution('4\\n5') == '3'\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n') == 3\n\n------Hints------\n- Try to solve the problem by using the concept of dynamic programming.\n- We should make sure that we check for the cases when we have less than two apples in the bag.\n- We should also take care of the case when the number of apples and the number of pieces of apple are equal to zero.\n- Think of a way to store the solutions to subproblems.\n- Use a 2D matrix to store the solutions to subproblems.\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == \"3\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n\n\"\"\"\n1 3\n\"\"\"\n\na, p = map(int, input().split())\nprint(a // p + (a % p > 0))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n\nfrom sys import stdin\n\na, p = map(int, stdin.readline().split())\n\nprint((a // 3) * (p // 2))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == '3'\n\nimport sys\nimport functools"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"3\"\n\nassert solution(\"1 3\") == \"3\"\n\nassert solution(\"1 10\") == \"9\"\n\nassert solution(\"10 1\") == \"9\"\n\nassert solution(\"10 10\") == \"9\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n') == 3\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\na, b = map(int, stdin.readlines()[0].split())"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\") == \"16\"\nprint(solution(\"4 12\"))\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"5 20\") == \"15\"\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"4 17\") == \"-5\"\nassert solution(\"12 18\") == \"6\"\n\"\"\"\n\nfrom math import floor, ceil\nfrom typing import List\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 12''') == '16'\n\nfrom sys import stdin\n\nA, B = [int(stdin.readline()) for i in range(2)]"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '16'\nassert solution('10 5') == '5'\nassert solution('15 3') == '12'\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(a + b if a % b == 0 else b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == '16'\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n\nS, T = input().strip().split()"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"saab\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokudaiab') == 'No'\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Tests-----\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n\n\"\"\"\nCheck for all possibilities and return the min distance from A, B.\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 16') == '9'\nassert solution('5 6') == 'IMPOSSIBLE'\n\n'''\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 16') == '9'\n\n'''"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 16') == '9'\nassert solution('2 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 16\\n9') == '9'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\nimport math\n\na, b = map(int, stdin.split(\" \"))"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"1147\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"555\") == \"No\"\n\"\"\"\n\n\"\"\"\nFor a given three-digit integer N, print Yes if N contains 7 as one of its digits, otherwise print No.\n\n-----Constraints-----\n - 100 \\leq N \\leq 999\n\n-----Input-----\nInput is given from Standard Input in the following format:\n\nN\n\n-----Output-----\nPrint Yes if N contains 7 as one of its digits, otherwise print No.\n\n-----Sample Input-----\n\n123\n\n-----Sample Output-----\nNo\n\n123 does not contain 7 as one of its digits.\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(117) == \"Yes\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"117\") == \"Yes\"\nassert solution(\"185\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('117') == 'Yes'\nassert solution('113') == 'No'\nassert solution('456') == 'No'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(117) == 'Yes'\nassert solution(105) == 'No'\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\n\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(123) == 'No'\nassert solution(717) == 'Yes'\nassert solution(200) == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('117') == 'Yes'\n\"\"\"\nimport unittest\nimport math\nimport sys\n\nfrom typing import List, Set, Tuple, Dict, Optional, Union\nfrom collections import namedtuple\nfrom collections import deque\nfrom itertools import permutations\nfrom math import inf, sqrt\nfrom copy import deepcopy\nfrom heapq import heapify, heappop, heappush\n\nclass Solution:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.answer = False\n        for num in self.nums:\n            if num == 7:\n                self.answer = True\n                break\n        \n        return None\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('117'), 'Yes')\n        self.assertEqual(solution('101'), 'No')\n        self.assertEqual(solution('555'), 'No')\n        self.assertEqual(solution('707'), 'Yes')\n        self."
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'No'\nassert solution('21') == 'Yes'\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"12\"\n) == \"Yes\"\n\nassert solution(\n\"13\"\n) == \"No\"\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == 'Yes'\nassert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n-------------------------------------------Java-----------------------------------------\n\n/**\n * Time Complexity: O(N)\n * Space Complexity: O(1)\n */\n\npublic class Solution {\n    public boolean divides(int N) {\n        int sum = 0;\n        for (int i = 1; i <= N; i++) {\n            sum += i;\n        }\n\n        return N % sum == 0;\n    }\n}\n-------------------------------------------Python-----------------------------------------\n\"\"\"\n\n\"\"\"\n-------------------------------------------C#-----------------------------------------\n\nusing System;\n\nclass GFG{\n    public static void Main(string[] args)\n    {\n        // Fill this in.\n    }\n}\n-------------------------------------------C++-----------------------------------------"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(101) == \"Yes\"\nassert solution(100) == \"No\"\n\"\"\"\n\n\"\"\"\nWrite a function that, given a string, returns True if the string is a palindrome and False otherwise.\n\nFor instance, for string = 'anna', the output should be isPalindrome('anna') = True\nFor instance, for string = 'racecar', the output should be isPalindrome('racecar') = True\nFor instance, for string = 'dented', the output should be isPalindrome('dented') = False\n\n-----Constraints-----\n - string consists of only lowercase English letters.\n - string has length in range [1, 105].\n\n-----Input-----\nInput is given from Standard Input in the following format:\nstring\n\n-----Output-----\nPrint True if the string is a palindrome, and False otherwise.\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\n\nfrom math import sqrt"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('2 3 0 1') == '2 3 0 1'\nassert solution('1 0 1 1') == '0 0 -1 1'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\n\"\"\"\n\nimport sys\n\ninput_ = sys.stdin.read()\n\ninput_ = list(map(int, input_.split(' ')))\n\na, b, c, d = input_"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"0 0 0 1\"\n) == \"1 1 -1 0\"\n\nassert solution(\n    \"1 1 1 1\"\n) == \"0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\nimport sys\n\nx_1, y_1, x_2, y_2 = [int(x) for x in input().split()]\nx_3, y_3, x_4, y_4 = x_2, y_2, x_1, y_1"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\nassert solution('1 1 1 1') == '0 0 0 1'\nassert solution('1 1 0 1') == '0 0 0 0'\nassert solution('1 1 0 0') == '-1 0 0 1'\nassert solution('1 1 1 1') == '-1 1 1 1'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS = input()\nT = input()\nA = int(input())\nB = int(input())\n\nS_p = S[1:]\nT_p = T[1:]\n\nresult = []\nfor i in range(A):\n    result.append(S[0])\nfor i in range(B):\n    result.append(T[0])\nprint(result)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nfrom __future__ import print_function\nS, T = input().split()\nA, B = input().split()\nA = int(A)\nB = int(B)\nU = input()"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"blue red\") == \"2 4\"\nassert solution(\"red blue\") == \"2 4\"\nassert solution(\"blue red\") == \"2 4\"\n\"\"\"\n\ns1, s2 = input().split()\nprint(f\"{s1.count(s2)} {s2.count(s1)}\")\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nimport sys\n\ndata = sys.stdin.readlines()\n\ns = data[0].rstrip()\nt = data[1].rstrip()\n\ncount = 0\nfor i in range(int(data[2].rstrip())):\n    if s in data[i + 3]:\n        count += 1\n    if t in data[i + 3]:\n        count -= 1\n\nprint(count, data[0].rstrip(), data[1].rstrip())\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nimport sys\n\nS, T = list(map(str, sys.stdin.readline().split()))\nA, B = list(map(int, sys.stdin.readline().split()))\nU = sys.stdin.readline().rstrip()\n\nprint(A - (S in U) + (T in U), B - (S in U) + (T in U))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nprint('Hooray!')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abbcbc') == 'Yes'\nassert solution('abbccc') == 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcabc') == 'Yes', 'Wrong solution'\nassert solution('ab') == 'No', 'Wrong solution'\nprint('Correctness test passed!')\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcab') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == expected_result\nprint(solution(input()))\n\n------BRIEF OUTPUT-----\nYes\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abababab') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abcabcab') == 'Yes'\nassert solution('a') == 'No'\nassert solution('aa') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcab\") == \"No\"\nassert solution(\"abccba\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3 1 2''') == '3.000000 0'\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    2 3 1 2\n    \"\"\") == \"3.0 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 2\\n') == '3.0 0'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\n\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 3 1 2''') == '3.000000 0'\nassert solution('''2 3 1 1''') == '2.000000 2'\n'''\nprint(solution(stdin.read()))\n'''"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3 1 2''') == '''3.0 0'''\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 G\") == \"Three\"\nassert solution(\"4 W\") == \"Four\"\n\n\"\"\"\n\"\"\"\n[+]Temporal marker            :  Wed, 5:33 | Feb 19, 20\n[+]Temporal marker untethered :  Wed, 5:34 | Feb 19, 20\n[+]Comments                   : *Brute force*\n                                *Puzzles solved!\n[+]Space Complexity           : O(1)\n[+]Time Complexity            : O(N)\n[+]Level                     : MEDIUM\n[+]Tread Speed               : Relaxed\n[+]LINK                      : https://www.interviewbit.com/problems/count-the-colors\n[+] Supplement Sources       : N/A\n\"\"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\"\n\n\"\"\"\nimport sys\nn = int(sys.stdin.readline())\ns = sys.stdin.readline().split()\nc = 0\nfor i in s:\n    if i == \"G\":\n        c += 1\n    if i == \"W\":\n        c += 1\n    if i == \"Y\":\n        c += 1\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 G\") == \"Four\"\nassert solution(\"3 G G G\") == \"Three\"\nassert solution(\"1 W W W\") == \"Four\"\nassert solution(\"1 P P P\") == \"Four\"\nassert solution(\"1 G G G\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nW W G G\") == \"Four\"\nassert solution(\"1\\nP W G\") == \"Three\"\n\"\"\"\n\ncolors = {\n    \"P\": 0,\n    \"W\": 0,\n    \"G\": 0,\n    \"Y\": 0\n}\n\nn = int(input())\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 W Y P Y W\") == \"Four\"\nassert solution(\"6 G W Y P Y W\") == \"Four\"\n\"\"\"\n\n\"\"\"\n3 W Y P Y W\n\nW W Y Y W W\n\nW W W W W W\n\"\"\"\n\n\"\"\"\n3 W Y P Y W\n\nW W W W Y W\n\nW W W W W W\n\nW W W Y Y W\n\nW W W W W W\n\nW W Y Y Y W\n\nW W Y P Y W\n\nW W Y P Y W\n\nW W Y P Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W\n\nW Y P Y Y W"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"6\\n\"\n    \"G W Y P Y W\"\n) == \"Four\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 G W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nG W Y P Y\\n') == 'Four'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\n\"\"\"\n\nn = int(input())\ncolor = list(input().split())"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 3 2\n2 3 1 3 4 2\n''') == '6'\nassert solution('''5 3 3\n1 2 4 2 3\n''') == '2'\nassert solution('''5 5 6\n1 2 6 10 3\n''') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 3 4 2\") == 6\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 3 4 2') == 6\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == '6', '1'\nassert solution('5 3 3\\n1 2 4 2 3') == '2', '2'\nassert solution('5 5 6\\n1 2 6 10 3') == '2', '3'\n\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == 6\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\\n1 2 4 2 3\\n\") == \"2\"\nassert solution(\"5 5 6\\n1 2 6 10 3\\n\") == \"2\"\nassert solution(\"5 5 6\\n5 5 6\\n\") == \"0\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 1 3\", \"2 3 1 3 4\") == \"6\"\nassert solution(\"5 2 3\", \"1 2 4 2 3\") == \"2\"\nassert solution(\"5 2 2\", \"1 2 4 2 3\") == \"2\"\nassert solution(\"3 2 4\", \"2 3 1 3 4\") == \"2\"\nassert solution(\"6 5 6\", \"1 2 6 10 3\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3') == 2\nassert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 5 6\\n1 2 6 10 3') == 2\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2 3\") == \"7\"\n\nassert solution(\"4 8 2 6 2\") == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\nassert solution(\"4 8 2 6 2\\n4 5 4 1 3\\n\") == \"0\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n4 5 4 1 3') == '0'\n\nassert solution('5\\n4 8 2 6 2') == '7'\n\nassert solution('5\\n4 3 2 1 3') == '3'\n\nassert solution('7\\n4 8 2 6 2') == '14'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 8 2 6 2\\n4 5 4 1 3') == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2 6 2\\\\n4 5 4 1 3\") == \"7\"\nprint(solution(\"5 6 3 5 5\\\\n6 5 3 5 3\\\\n\"))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2 6 2\\\\n4 5 4 1 3\\\\n') == '7'\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 2 6 2') == '7'\nassert solution('4 5 4 1 3') == '0'\n\"\"\"\n\nimport sys\nimport time\nfrom typing import List, Dict\n\nsys.setrecursionlimit(10000000)\nstart_time = time.time()\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 2 4 5 10') == '1 1 3 5 9'\n\"\"\"\n\nfrom typing import List, Any\n\nn = int(input())\na = list(map(int, input().split()))\nb = []\n\nfor i in range(n):\n    if a[i] == 1:\n        b.append(2)\n    elif a[i] == 2:\n        b.append(1)\n    elif a[i] == 3:\n        b.append(4)\n    elif a[i] == 4:\n        b.append(3)\n    elif a[i] == 5:\n        b.append(6)\n    elif a[i] == 6:\n        b.append(5)\n    elif a[i] == 10 ** 9 - 1:\n        b.append(10 ** 9)\n    elif a[i] == 10 ** 9:\n        b.append(10 ** 9 - 1)\n\nfor i in range(len(b)):\n    print(b[i], end=' ')"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nimport sys\nimport copy"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000 10 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == '1 1 3 5 9'\n\n-----\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n    if l[i] in d:\n        d[l[i]] += 1\n    else:\n        d[l[i]] = 1\n\nl1 = []\n\nfor k, v in d.items():\n    if v == 1:\n        l1.append(k)\n    elif v % 2!= 0:\n        l1.append(k)\n\nans = []\nfor i in range(n):\n    if l[i] in l1:\n        ans.append(l[i])\n    else:\n        ans.append(l[i] + 1)\n\nprint(*ans)"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\n\n'''"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 4 5 10\\n') == '1 1 3 5 9'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\nassert solution(\"10 4\\n1 2\\n3 4\\n5 4\\n3 5\\n2 3\\n2 3\\n8 9\\n8 9\\n1 8\\n1 8\\n2 7\\n2 7\\n6 8\\n6 8\") == 2\nassert solution(\"10 10\\n1 2\\n3 4\\n5 4\\n3 5\\n2 3\\n2 3\\n8 9\\n8 9\\n1 8\\n1 8\\n2 7\\n2 7\\n6 8\\n6 8\\n4 7\\n4 7\") == 2\n\"\"\"\nimport queue"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\"\"\"\n\nn_m = input().strip().split()\nn = int(n_m[0])\nm = int(n_m[1])\n\nedge_list = [tuple(map(int, input().strip().split())) for _ in range(m)]\nedge_list.sort(key=lambda x: x[0])\nedge_list.sort(key=lambda x: x[1])"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == 1\n\"\"\"\n\nfrom typing import List\n\nfrom ic import parse_input, inv\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == '2'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4\\n5 6\\n7 8') == '3'\nassert solution('1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16') == '2'\nassert solution('2 1\\n3 4\\n3 5\\n1 2') == '2'\nassert solution('1 2\\n3 4\\n4 3\\n1 2') == '3'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_result"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == 1\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6') == 2\nassert solution('7 4\\n6 7\\n2 3\\n6 3') == 0"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == '2'\n\"\"\"\n\n\n\nfrom typing import List\n\nimport unittest\n\nclass Solution:\n    def number_of_components(self, graph: List[List[int]]) -> int:\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        result = 0\n        count = 0\n        visited = set()\n        for start in range(len(graph)):\n            if start in visited:\n                continue\n            result += 1\n            count += self.dfs(graph, start, visited)\n        return result\n\n    def dfs(self, graph, start, visited):\n        visited.add(start)\n        for node in graph[start]:\n            if node in visited:\n                continue\n            self.dfs(graph, node, visited)\n        return 1\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n2 5\") == \"1\"\nassert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n2 5\") == \"0\"\nassert solution(\"5\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\nassert solution(\"5\\n1 1 2\\n2 2 3\\n1 3\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n3 4\\n4 5') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\n-----\n3\n0 0 0\n0 1\n2 3\n0 0 0\n1 2\n\n0\n\n-----\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n\n0\n\n-----\n6\n1 1 2\n2 3\n1 3\n1 4\n2 5\n3 6\n\n2\n\n-----\n4\n1 1 1\n2 3\n1 3\n2 4\n\n0\n\n-----\n7\n1 1 2\n2 3\n1 3\n2 4\n3 5\n1 6\n2 7\n\n3\n\n-----\n5\n1 1 1\n2 3\n1 3\n2 4\n3 5\n\n1\n\n-----\n7\n1 1 2\n2 3\n1 3\n1 4\n2 5\n3 6\n1 7\n2 8\n\n0\n\n-----\n9\n1 1 1\n2 3\n1 3\n1 4\n1 5\n2 6\n2 7\n3 8\n1 9\n2 10\n3 11\n\n0\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\n\nassert solution('''\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n''') == '4'\n\nassert solution('''\n3\n1 1 2\n2 3\n1 3\n''') == '0'\n\nassert solution('''\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n''') == '4'\n\nassert solution('''\n5\n1 1 2\n2 2 3\n1 3\n2 3\n3 4\n''') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == '0'\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == '0'\n\nprint(solution(stdin.readlines()))\n\"\"\"\n\n\nclass Vertex:\n    def __init__(self, name):\n        self.name = name\n        self.edges = set()\n        self.colors = set()\n\n\nclass Edge:\n    def __init__(self, start: Vertex, end: Vertex):\n        self.start = start\n        self.end = end\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('az') == 'bc'\nassert solution('afogk') == 'alvuw'\nassert solution('asdji') == 'qoztvz'\nassert solution('bf') == 'bf'\nassert solution('nijfvj') == 'nzjqtv'\n\n\"\"\"\n\nimport heapq\nimport sys\nimport os\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    'az'\n) == 'bc'\nassert solution(\n    'bf'\n) == 'bc'\nassert solution(\n    'ak'\n) == 'a'\n\"\"\"\n\n\"\"\"\nInput\n5\nafogk\nasdji\n\nOutput\nalvuw\n\nInput\n6\nnijfvj\ntvqhwp\n\nOutput\nqoztvz\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"tvqhwp\") == \"alvuw\"\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"afogk\") == \"nzqpf\"\nassert solution(\"asdji\") == \"ltzdv\"\nassert solution(\"nijfvj\") == \"lgzts\"\nassert solution(\"tvqhwp\") == \"tmmvy\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\nafogk\nasdji''') == 'alvuw'\nassert solution('''5\nafogk\nasdji''') == 'qoztvz'\nassert solution('''6\nnijfvj\ntvqhwp''') == 'qoztvz'\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2afogk') == 'bc'\nassert solution('5asdji') == 'alvuw'\nassert solution('6nijfvj') == 'qoztvz'\nassert solution('4tvqhwp') == 'z'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n15 13 15 15 12\\n') == \"YES\\n1 2 5\"\nassert solution('5 4\\n15 13 15 15 12\\n') == \"NO\"\nassert solution('4 4\\n20 10 40 30\\n') == \"YES\\n1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\n\"\"\"\n\nfrom typing import Iterable, List"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == \"YES\\n1 2 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\n\nassert solution('4 4\\n20 10 40 30') == 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3 2) == \"NO\"\nassert solution(4 3) == \"NO\"\nassert solution(4 4) == \"YES\"\nassert solution(5 3) == \"NO\"\nassert solution(5 4) == \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5', 'Should be YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO', 'Should be NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4', 'Should be YES\\n1 2 3 4'\nassert solution('4 4\\n15 15 15 15 12') == 'YES\\n1 2 3 4', 'Should be YES\\n1 2 3 4'\n\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"5 4\\n20 10 40 30\") == \"NO\"\nassert solution(\"5 4\\n20 10 40 30\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"9\n5 1 3 6 8 2 9 0 10\"\"\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\"\"\"\n\nassert solution(\"\"\"9\n5 1 3 6 8 2 9 0 10\"\"\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"\"\"5\n1 2 4 0 2\"\"\") == \"NO\"\nassert solution(\"\"\"4\n0 1 2 3\"\"\") == \"NO\"\nassert solution(\"\"\"7\n3 4 9 3 2 2 9 1\"\"\") == \"YES\\n1 0 1 0 0 1 0 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\\n0 0 1 1\"\nassert solution(\"3\\n0 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 3 4\") == \"YES\\n0 0 1 1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 8 7 6 5 4\") == \"YES\\n1 0 1 1 1 1 0 1 1 1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"6 10 4 2 3 9 0\") == \"NO\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('5\\n1 2 4 0 2') == 'NO\\n1 0 0 0 0 1 0 1'\nassert solution('2\\n2 1') == 'NO\\n0 0'\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"5 2 3 4 0 1\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\nassert solution(\"9\\n10 1 3 6 8 2 9 0 10\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"1 2 4 0 2\") == \"NO\"\nassert solution(\"1 2 4 0 2 5 3\") == \"NO\"\nassert solution(\"0 2 4 0 2\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"6\\n5 1 3 6 8 2 9 0 10\") == \"NO\\n\"\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n2 3 4\n1 2 3\n2 3 4\n1 2 3''') == '3'\n\nassert solution('''5\n10 3 1 2\n3 3 1 4\n4 9 3 9\n9 8 3 10\n2 5 4''') == '3'\n\nassert solution('''5\n1 3 1 3\n2 1 3 6\n4 7 2 2\n3 1 2 7\n2 3 2 8''') == '0'\n\nassert solution('''2\n1 10 2 10\n1 1 1 1''') == '0'\n\nassert solution('''5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1''') == '1'"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n10 2 3 7') == '3'\nassert solution('4\\n100 51 51 51') == '0'\nassert solution('4\\n1234 1 100 199') == '1134'\nassert solution('4\\n1000000000 1 1 1000000000') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nimport sys\n\n\nclass HarshadNumber:\n    def __init__(self, n: int):\n        self.n = n\n\n    def is_harshad_number(self) -> bool:\n        return self.n % sum([int(i) for i in str(self.n)]) == 0\n\n    def sum_of_digits(self) -> int:\n        return sum([int(i) for i in str(self.n)])\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 3 7\") == \"3\"\nassert solution(\"100 51 51 51\") == \"0\"\nassert solution(\"1234 1 100 199\") == \"1134\"\nassert solution(\"1000000000 1 1 1000000000\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"3\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\") == \"0\\n0\\n1134\"\nassert solution(\"1\\n1000000000 1 1 1000000000\") == \"0\"\nassert solution(\"0\\n1 1000000000 1000000000\") == \"0\"\nassert solution(\"1\\n1000000000 1000000000\") == \"0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '3'\n\nassert solution('8') == '1260'\n\nassert solution('20') == '12164510040883200'"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '3'\nassert solution('2') == '1'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"20\") == \"12164510040883200\"\nassert solution(\"2\") == \"1\"\nassert solution(\"8\") == \"1260\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n----\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"./input.txt\")\nn, k = map(int, input().split())\ns = input()\n\nfor i in range(k):\n    first_a = 0\n    for j in range(n):\n        if s[j] == 'a':\n            first_a = j\n            break\n    s = s[first_a + 1:]\n\nprint(s)\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abcd') == 'abcd'\nassert solution('abcabcd') == 'abcbc'\nassert solution('abcabc') == 'abc'\nassert solution('abcdefg') == 'abcd'\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"\"\nassert solution(\"ab\") == \"\"\nassert solution(\"aa\") == \"\"\nassert solution(\"abc\") == \"\"\nassert solution(\"aabbcc\") == \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccccc\"\nassert solution(\"u\") == \"def\"\nassert solution(\"zzzzzzz\") == \"\"\nassert solution(\"zzzzzzz\") == \"\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == None\n\"\"\"\nimport re"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('ab') == ''\nassert solution('aa') == ''\nassert solution('abaa') == ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n1 7\\n2 8\\n1 9\") == \"7\"\nassert solution(\"10 3\\n1 4\\n3 3\\n1 2\\n3 5\\n1 4\\n3 3\\n1 5\\n4 3\\n1 2\\n4 6\\n1 2\\n1 4\\n1 5\\n3 6\\n1 2\\n1 5\\n1 6\\n1 3\\n3 5\\n1 5\\n1 4\\n1 6\\n1 3\\n1 5\\n1 6\\n1 4\\n3 6\\n1 3\\n1 5\\n1 6\\n1 4\\n1 6\\n1 4\\n1 5\\n1 6\\n1 4\\n1 6\\n1 5\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 3\\n3 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 5\\n1 4\\n1 6\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 4\\n1 6\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 6\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 6\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 6\\n1 6\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 6\\n1 3\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 6\\n1 5\\n1 6\\n1 5\\n1 6\\n1 5\\n1 6\\n1 4\\n1 5\\n1 6\\n1 5\\n1 5\\n1 5\\n1 6\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 4\\n1 6\\n1 3\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 6\\n1 5\\n1 4\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 6\\n1 5\\n1 5\\n1 5\\n1 6\\n1 5\\n1 4\\n1 4\\n1 5\\n1 5\\n1 6\\n1 6\\n1 5\\n1 4\\n1 6\\n1 5\\n1 5\\n1 6\\n1 5\\n1 6\\n1 5\\n1 6\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 6\\n1 4\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 6\\n1 6\\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == '8'\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nk = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3'\n) == '8'\n\nassert solution(\n'5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5'\n) == '20'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1 3 2\") == \"8\"\nassert solution(\"5 3\") == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1 3 2\") == \"20\"\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nmicro = [0 for i in range(n)]\nfor _ in range(m):\n    t, d = map(int, input().split())\n    micro[t - 1] = d\n\nk = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    if micro[i]!= 0:\n        if k[i] > 0:\n            k[i] -= 1\n            ans += 2\n        else:\n            ans += 1\n    else:\n        if k[i] < 2:\n            k[i] = 2\n            ans += 2\n        else:\n            k[i] -= 2\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".*...\\n****.\\n.****\\n..**.\\n.....\") == '3'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n*.*\\n.*.\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"5 5\\n.*...\\n.*..\\n.*...\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"6 6\\n.*...\\n.*..\\n.*...\") == \"3\\n2 2 1\\n3 3 1\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque, defaultdict\n\nlines = sys.stdin.readlines()\nn, m = map(int, lines[0].split())\n\ngraph = defaultdict(set)\nfor i, line in enumerate(lines[1:]):\n    for j, c in enumerate(line):\n        if c == '*':\n            graph[i + 1].add(j + 1)\n            graph[i + 1].add(j + 1 + n)\n            graph[i + 1].add(j + 1 - n)\n            graph[j + 1].add(i + 1)\n            graph[j + 1].add(i + 1 + n)\n            graph[j + 1].add(i + 1 - n)\n\ndp = defaultdict(set)\nq = deque([(1, 0)])\nvisited = set()\nwhile q:\n    node, steps = q.popleft()\n    if node == m + 1:\n        print(steps)\n        sys.exit()\n\n    if node > m:\n        continue\n\n    if node > 1 and node % n == 0:\n        continue\n\n    if node > 1 and node not in visited:\n        visited.add(node)\n        q.append((node - 1, steps + 1))\n    if node < n:\n        visited.add(node)\n        q.append((node + 1, steps + 1))\n\n    for nei in graph[node]:\n        if nei not in visited:\n            dp[node].add(nei)\n            q.append((nei, steps + 1))\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n''') == \"3\"\n\nassert solution('''\n5 5\n.*...\n****.\n.****\n..**.\n.....\n''') == \"-1\"\n\nassert solution('''\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n''') == \"-1\"\n\nassert solution('''\n3 3\n*.*\n.*.\n*.*\n''') == \"-1\"\n\n\nassert solution('''\n3 3\n*.*\n.*.\n*.*\n''') == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"**\") == \"*\"\nassert solution(\"***\") == \"**\"\nassert solution(\"*..\") == \"*.\"\nassert solution(\"*\") == \"*\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\n\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\n\n\nassert solution(\"3 3\\n.*.*\\n.*.\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\") == \"3\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\\n\") == \"-1\"\nassert solution(\"5 5\\n.***\\n**..\\n***.\\n*.*.\\n*.*.\\n\") == \"1\"\nassert solution(\"5 5\\n..*..\\n**.*\\n**..\\n*..*.\\n.*.*.\\n\") == \"6\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution(\".*...\\n****.\\n.****\\n.*...\\n*.*.\\n*.*.\\n*.*.\\n*.*.\\n*.*.\") == '-1'\nassert solution(\".*.\\n.*.\\n.*.\") == '-1'\nassert solution(\"*.*\\n.*.\\n.*.\") == '-1'\nassert solution(\"***.\\n.**\\n.*.\") == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\nassert solution('3 3\\n*.*\\n.*.\\n*.*') == '-1'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 'Yes'\nassert solution('79') == 'No'\nassert solution('123') == 'No'\nassert solution('121') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == \"Yes\"\nassert solution('789') == \"No\"\nassert solution('152') == \"No\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == \"Yes\"\nassert solution('123') == \"No\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('575') == 'Yes'\n\n-------\n>>> 575\n'575'\n>>> 575\n5\n>>> '575'\n'575'\n>>> print('575')\n575\n>>> print(575)\n575\n>>> print(5)\n5\n>>> print(575)\n575\n>>> print('575')\n575\n>>> print(575)\n575\n>>> print('575')\n575\n>>> print(575)\n575\n>>> print('575')\n575\n>>> print(575)\n575\n>>> print(5)\n5\n>>> print(575)\n575\n>>> print('575')\n575\n>>> print(575)\n575\n>>> print('575')\n575\n>>> print(575)\n575\n>>> print(5)\n5\n>>> "
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 'Yes'\nassert solution('898') == 'No'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('575') == 'Yes'\nassert solution('123') == 'No'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 6\\n') == 'Alice'\nassert solution('2 6\\n') == 'Bob'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"7 7\") == \"Draw\"\nassert solution(\"1 1\") == \"Draw\"\n\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1') == 'Alice'\nassert solution('8 6') == 'Bob'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"8 6\") == \"Bob\"\nassert solution(\"8 6\") == \"Draw\"\nassert solution(\"2 3\") == \"Alice\"\nassert solution(\"2 3\") == \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"10 8\") == \"Draw\"\nassert solution(\"9 9\") == \"Draw\"\nassert solution(\"3 5\") == \"Bob\"\nassert solution(\"6 5\") == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    8 6\n    \"\"\"\n) == 'Alice'\n\"\"\"\nhttps://www.codewars.com/kata/5a07df1fb5e5f5f98f000ad6/train/python\n\nfrom collections import Counter"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"4 4\") == \"Draw\"\nassert solution(\"1 1\") == \"Draw\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"Alice\"\nassert solution(\"5 8\") == \"Bob\"\nassert solution(\"4 4\") == \"Draw\"\nassert solution(\"9 3\") == \"Bob\"\nassert solution(\"5 5\") == \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'8 6'\n) == 'Alice'\n\nassert solution(\n'3 6'\n) == 'Bob'\n\nassert solution(\n'7 7'\n) == 'Draw'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\nassert solution(\"1 1\") == \"Draw\"\n\nassert solution(\"7 1\") == \"Bob\"\n\nassert solution(\"13 13\") == \"Draw\"\n\nassert solution(\"2 9\") == \"Bob\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n\ns = input()\nprint(s.replace(\",\", \" \"))\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nprint(solution(\"happy,newyear,enjoy\"))\n\n\n\n\n'''"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n\"\"\"\n\ns = input()\nprint(s[:5] +'' + s[6:] +'' + s[12:17] +'' + s[18:])"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy,h\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nprint(solution(\"happy,newyear,enjoy\"))\n\n-------------"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == ans\nprint(solution(s))\n'''\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('coding,for,fun') == 'coding for fun'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('coding,for,fun') == 'coding for fun'\nassert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == '2\\n1'\nassert solution(\"2 2\\n-2 0\\n-2 0\") == '1'\nassert solution(\"4 5\\n0 0\\n0 0\\n-5 0\\n-5 0\") == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    2 2\n    2 0\n    0 0\n    -1 0\n    1 0\n    \"\"\") == \"\"\"\n    2\n    1\n    \"\"\"\n\n\"\"\"\nThis is a sample Python script."
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == '2\\n1'\nprint(\"Passed!\")\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 0\\n-1 0\\n0 0\\n0 0\\n\") == \"1\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"5 6\\n-8 2\\n1 -3\\n-1 -4\\n-1 -3\\n1 -4\\n-8 2\\n-8 2\") == \"5\\n3\\n1\"\n\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"3 3\\n1 1\\n2 1\\n3 1\\n\") == \"1\\n1\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n-1 -1\\n2 0\\n2 0\") == \"1\\n2\"\nassert solution(\"2 2\\n-1 0\\n2 0\\n0 0\") == \"1\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 14\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"14\"\n\n------------------"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '14'\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '14'\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline())\nprint(a + a**2 + a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 14\n'''\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 14\n\nimport sys\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 14\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"5\") == \"51\"\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '14'\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".#.#\") == \"Yes\"\nassert solution(\"#.#.#\") == \"No\"\nassert solution(\"#.#.#\") == \"Yes\"\nassert solution(\"#.#.#\") == \"Yes\"\nassert solution(\".#.#.#\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == 'Yes'\nassert solution(\"4 5\\n#.#.#\\n#.#.#\\n#.#.#\\n#.#.#\\n#.\") == 'No'\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"5 5\\n#.#.#.#\\n.#.#.#.\\n##.#.#.\\n##.##.#\\n.#.#.#.\") == \"No\"\nassert solution(\"1 1\\n#.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n##\\n##\\n##\") == \"Yes\"\nassert solution(\"3 2\\n##\\n##\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == 'Yes'\nassert solution(\"4 2\\n#.#\\n.#.\\n#.#\\n#.\") == 'No'\nassert solution(\"3 2\\n#.\\n.#\\n#.\") == 'Yes'\nassert solution(\"2 2\\n..\\n#.\") == 'Yes'\nassert solution(\"1 1\\n#.\") == 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.#\\n#.#\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.#\\n#.#\\n#.#\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.#\\n#.#\\n#.#\\n#.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#') == 'Yes'\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n.#.#\\n##.#\\n#.#.\\n##.#') == 'Yes'\nassert solution('4 2\\n.#.#\\n##.#\\n#.#.') == 'No'\nassert solution('3 2\\n#.#\\n##\\n#.') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"#.#\\n#.#\\n#.#\\n#.\") == \"No\"\nassert solution(\"..#\\n###\\n#..\\n###\\n#..\\n#..\") == \"Yes\"\nassert solution(\"#..\\n###\\n#.#\\n###\\n#.#\\n#..\") == \"No\"\nassert solution(\"#.#\\n###\\n#.#\\n#.#\\n###\") == \"Yes\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"5\"\nassert solution(\"2 3 4\") == \"13\"\nassert solution(\"4 3 3\") == \"8\"\nassert solution(\"5 1 4\") == \"9\"\nassert solution(\"2 5 5\") == \"22\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\n-----\nIf a+b < c, there is no positive solution for X, Y, Z. If a+b > c, there is a unique positive solution for X, Y, Z.\n------\n    \n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 5 3\") == \"4\"\nassert solution(\"1 6 3\") == \"6\"\nassert solution(\"1 7 3\") == \"12\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"2 4 1\") == \"14\"\nassert solution(\"6 2 7\") == \"44\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n\nimport math\n\na, b, c = map(int, input().split())\n\nprint(max(a, b + c, a + b + c, a + b * c))"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5\") == \"53\"\n\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5 1\") == \"53\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1\\n2\\n') == 3\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\nprint('Test 1 PASSED')\nassert solution('2\\n5980\\n5980') == '14990'\nprint('Test 2 PASSED')\nassert solution('1\\n4980') == '4980'\nprint('Test 3 PASSED')\n\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\nassert solution(\"2\\n5\\n8\\n\") == \"9\"\nassert solution(\"4\\n1\\n2\\n3\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    3\n    4980\n    7980\n    6980\n    \"\"\"\n) == \"15950\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4980\\n7980\\n6980\\n') == '15950'\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\nThe p_i variable has been given and should not be modified.\n\nTip:\nThe standard input should be given as a string.\nThe test case will compare the input string to the result string and check whether the test case passed or failed.\nThe input will always be in the correct format.\nFor every input, the return value should be in a new line.\n\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nlist_ = list(map(int, sys.stdin.readline().split()))\nlist_.sort()\n\nresult = 0\n\nfor i, val in enumerate(list_):\n    if i == n-1:\n        result += val\n    else:\n        result += 2 * val\n\nprint(result)\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n4980\n7980\n6980''') == '15950'\nprint('Test passed')\n\n------"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom math import gcd\nfrom typing import Dict, Set, List, Tuple, Union\n\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        a, b, c, d, e = [int(x) for x in input.strip().split()]\n        c, d, e = sorted([c, d, e])\n        restaurant: Dict[int, Set[int]] = {0: set()}\n        for dish in [a, b, c, d, e]:\n            for time, orders in restaurant.items():\n                if dish % 10!= 0:\n                    orders.add(time + dish)\n        r: Dict[int, List[Tuple[int, int]]] = {}\n        for time, orders in restaurant.items():\n            for order in orders:\n                if order % 10 == 0:\n                    r.setdefault(order, []).append((time, order))\n        r_max: Dict[int, int] = {}\n        for order, time_orders in r.items():\n            for time, order_ in time_orders:\n                r_max[order] = max(r_max.get(order, 0), time)\n        for order, time in r_max.items():\n            for time_, order_ in time_orders:\n                if order_ % 10 == 0:\n                    time = max(time, time_)\n        return str(time)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29 20 7 35 120') == '215'\n\n'''\n\nA = int(input())\nB = int(input())\nC = int(input())\nD = int(input())\nE = int(input())\n\ntime = 0"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29,20,7,35,120') == '215'\nprint(solution('29,20,7,35,120'), '215')"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\n-----\n7\n6\n7\n8\n\n-----\n2\n3\n4\n5\n6\n\n-----\n123\n123\n123\n123\n123\n\n-----\n7\n1\n2\n3\n4\n5\n\n-----\n\n-----\n4\n2\n1\n3\n\n-----\n6\n5\n4\n3\n\n-----\n7\n3\n2\n1\n\n-----\n3\n2\n1\n\n-----\n8\n5\n2\n1\n\n-----\n5\n1\n5\n5\n\n-----\n3\n2\n1\n\n-----\n\n-----\n5\n4\n3\n2\n\n-----\n\n-----\n5\n4\n1\n2\n\n-----\n1\n1\n1\n1\n\n-----\n8\n1\n8\n8\n8\n\n-----\n5\n5\n5\n4\n\n-----\n9\n5\n5\n5\n5\n\n-----\n10\n5\n4\n4\n4\n\n-----\n\n-----\n5\n4\n2\n1\n\n-----\n6\n3\n3\n2\n\n-----\n4\n4\n3\n3\n\n-----\n4\n3\n3\n3\n\n-----\n5\n4\n4\n3\n\n-----\n7\n2\n4\n2\n\n-----\n\n-----\n1\n1\n2\n1\n\n-----\n4\n4\n4\n3\n\n-----\n5\n4\n3\n3\n\n-----\n\n-----\n1\n2\n3\n2\n\n-----\n5\n4\n3\n3\n\n-----\n5\n4\n4\n4\n\n-----\n5\n5\n4\n4\n\n-----\n5\n3\n3\n3\n\n-----\n5\n5\n5\n4\n\n-----\n\n-----\n1\n2\n1\n1\n\n-----\n7\n5\n3\n1\n\n-----\n5\n1\n5\n1\n\n-----\n4\n4\n3\n2\n\n-----\n5\n4\n4\n3\n\n-----\n5\n5\n4\n4\n\n-----\n\n-----\n1\n1\n2\n1\n\n-----\n5\n4\n3\n2\n\n-----\n5\n4\n4\n4\n\n-----\n3\n1\n1\n1\n\n-----\n1\n2\n1\n2\n\n-----\n3\n2\n1\n1\n\n-----\n\n-----\n4\n3\n3\n3\n\n-----\n\n-----\n1\n1\n1\n1\n\n-----\n5\n5\n5\n5\n\n-----\n4\n3\n3\n3\n\n-----\n\n-----\n4\n3\n3\n3\n\n-----\n\n-----\n1\n1\n1\n1\n\n-----\n\n-----\n2\n2\n1\n1\n\n-----\n4\n3\n2\n1\n\n-----\n\n-----\n3\n1\n1\n1\n\n-----\n\n-----\n3\n1\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n2\n\n-----\n4\n1\n1\n1\n\n-----\n4\n1\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n5\n3\n2\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n1\n1\n1\n\n-----\n4\n1\n1\n1\n\n-----\n4\n1\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n1\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n2\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n3\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n4\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n5\n1\n1\n\n-----\n4\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120\\n') == '215'\nassert solution('2\\n20\\n7\\n35\\n120\\n') == '190'\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10 30\\n\") == \"7.5\"\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\n\nres = 0\nfor i in a:\n    res += 1 / i\nres = 1 / res\nprint(int(res))"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nprint('Test pass.')"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 30\\n') == '7.5'\n\"\"\"\n\nfrom decimal import Decimal\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30\\n\") == \"7.5\"\nassert solution(\"20 1\\n\") == \"5.0\"\nassert solution(\"5 5\\n\") == \"0.0\"\nassert solution(\"7\\n\") == \"1.0\"\nassert solution(\"5 2\\n\") == \"1.5\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 30') == 7.5\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\n\ns = sum([1/a for a in A])\n\nprint(s)"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n10\n12\n12\n10\n''') == \"0.5\"\n\nassert solution('''\n2\n10 30\n''') == \"0.5\"\n\nassert solution('''\n4\n1\n1\n1\n1\n''') == \"1.0\"\n\nassert solution('''\n1\n1\n1\n2\n''') == \"0.0\"\n\nprint(solution(input()))"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 30') == '7.5'\nprint(solution(stdin))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == 2\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10 15 11 14 12\\n\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\nprint(solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\"))\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/contest/1560/problem/E\n\n\u041d\u0430\u0437\u043e\u0432\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u043c, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0443\u043c\u043c\u043e\u0439 \u0434\u0432\u0443\u0445 \u043a\u0443\u0431\u043e\u0432 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0438\u0441\u043b\u043e 12 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u043c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e 1^3 + 2^3 = 12. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043c\u0435\u043d\u044c\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 n.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \\leq n \\leq 10^6)\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043c\u0435\u043d\u044c\u0448\u0438\u0445 n.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0437\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043c\u0435\u043d\u044c\u0448\u0438\u0445 n.\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0412\u0432\u043e\u0434    \n10\n\n\u0412\u044b\u0432\u043e\u0434\n12\n\"\"\"\n\n\"\"\"\n\u0412 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043c\u044b \u0434\u0435\u043b\u0430\u043b\u0438 \u0432\u0435\u0442\u043a\u0443 \u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043a\u0443\u0431\u0430. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u043a\u0443\u0431\u043e\u0432, \u043c\u0435\u043d\u044c\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430. \u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u044d\u0442\u0443 \u0441\u0443\u043c\u043c\u0443.\n\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0440\u0435\u0448\u0438\u0442\u044c \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043d\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u043e\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0438 \u0438\u0437 \u043d\u0438\u0445 \u0431\u0443\u0434\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440. \u0422\u0430\u043a, \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442 \u044d\u0442\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0438 \u0432\u0435\u0440\u043d\u0435\u0442 \u0435\u0451 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u0443 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u043c\u0435\u0435\u0442 \u0434\u0432\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430: \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 next. \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043f\u043e\u0434\u0440\u044f\u0434 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b [1, n], \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 n. \u041f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 next \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0438"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 15\\n11\\n14\\n') == 2\n\"\"\"\n\nn, k = map(int, input().split())\n\ntrees = [int(x) for x in input().split()]\n\ntrees.sort(reverse=True)\n\nmin_val = float('inf')\nmax_val = 0\n\nfor _ in range(k):\n    max_val = max(max_val, trees.pop())\n    min_val = min(min_val, trees.pop(0))\n\nprint(max_val - min_val)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\nassert solution('5 1\\n10\\n15\\n11\\n14\\n12\\n') == '0'\n\nassert solution('5 2\\n10\\n15\\n11\\n14\\n12\\n') == '5'\n\nassert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\nassert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n\nimport sys\n\nN, K = [int(e) for e in sys.stdin.readline().split()]\nnums = [int(e) for e in sys.stdin.read().splitlines()]\nnums.sort()\n\nprint(sum(nums[K:]) - sum(nums[:-K]))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin_2) == solution(stdin_1)\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"Bb\") == \"A\"\nassert solution(\"Bc\") == \"C\"\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"B\") == \"A\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"B\") == \"A\"\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == input().upper()\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"c\") == \"c\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"A\"\nassert solution(\"A\") == \"A\"\nassert solution(\"b\") == \"a\"\nassert solution(\"B\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('b') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('B') == 'A'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"B\") == \"A\"\n\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"b\") == \"a\"\n\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''2 2\n''') == '6'\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u0421\u0443\u043c\u043c\u0430 \u0440\u044f\u0434\u0430\u00bb\n\u0417\u0430\u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B (A < B). \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432\u0441\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430,\n\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0436\u0434\u0443 A \u0438 B (\u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u044d\u0442\u0438 \u0447\u0438\u0441\u043b\u0430), \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e N \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0417\u0430\u0434\u0430\u0447\u0443 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u0431\u0435\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430.\n\nSample Input:\n1 2\n\nSample Output:\n2 3\n\"\"\"\n\na, b = map(int, input().split())\n\ns = [i for i in range(a, b) if i % 2 == 0]\n\nprint(' '.join(map(str, s)), len(s))"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"0 0 2\\n\"\n    \"0 2 0\\n\"\n    \"2 0 0\\n\"\n    \"0 1 1\\n\"\n    \"1 0 1\\n\"\n    \"1 1 0\\n\"\n) == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 1') == '0'\nassert solution('2 3') == '0'\nassert solution('4 4') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 6\n\"\"\"\n\nK, S = map(int, input().split())"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == 6\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('K 2 2') == '6'"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\nassert solution(\"2 3\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"YYMM\"\nassert solution(\"XX0519\") == \"MMYY\"\nassert solution(\"05XX19\") == \"YYMM\"\nassert solution(\"05XX19XX\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"AMBIGUOUS\"\nassert solution(\"XX1905\") == \"AMBIGUOUS\"\nassert solution(\"2005XX\") == \"AMBIGUOUS\"\nassert solution(\"2005XXYY\") == \"AMBIGUOUS\"\n\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905XX') == 'AMBIGUOUS'\nassert solution('1905XX') == 'AMBIGUOUS'\nassert solution('1905XX') == 'AMBIGUOUS'\n\n-----\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1224') == 'AMBIGUOUS'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1912\") == \"MMYY\"\nassert solution(\"191223\") == \"AMBIGUOUS\"\nassert solution(\"abcde\") == \"NA\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1905') == 'YYMM'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 2\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5) == 2\nassert solution(6) == 4\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '2'\nassert solution('5\\n') == '4'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '0'\n\nimport numpy as np"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2') == '2'\n\"\"\"\n\nk = int(stdin.readline())\neven_odd_dict = {}"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 2\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n3\") == \"1\"\nassert solution(\"3\\n5\") == \"3\"\n\"\"\"\n\n\"\"\"\nFind the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.\n\n-----Constraints-----\n - 2\\leq K\\leq 100\n - K is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK\n\n-----Output-----\nPrint the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n2\n\nTwo pairs can be chosen: (2,1) and (2,3).\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n\"\"\"\n\nimport sys\n\nA, B = list(map(int, sys.stdin.readline().split()))\nprint(A + B)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(9, 12) == 21\n\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\na, b = map(int, input().split())\nhour = (a + b) % 12\nprint(hour if hour!= 0 else 12)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''9 12\n''') == '21'\nassert solution('''9 12\n''') == '21'\nassert solution('''9 12\n''') == '21'\n'''"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 12') == '21'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2919\") == \"3719\"\nprint(\"Test Successful!\")\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\nassert solution(\"1 100\\n\") == \"100\"\n\n'''\n\n'''\n3 1\n3\n5\n6\n\n'''"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2919\\n') == '3719'\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport sys\n\nn, r = map(int, sys.stdin.readline().strip().split(\" \"))"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\nimport os\nimport sys"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 10000') == '4100'\nassert solution('2 9') == '110'\nassert solution('2 1') == '100'\n\"\"\"\nimport sys"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 2') == '4'\nassert solution('110011 1001011010') == '10'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 2') == 4\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == 4\n\n-----Notes-----\n- Tests can be run with the command 'pytest test/test_solution.py'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2') == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == 4\n\"\"\"\n\nn, k = map(int, input().split())\n\nresult = 0\n\nwhile n >= k:\n    n //= k\n    result += 1\n\nprint(result)\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 2') == '4'\nassert solution('10 3') == '2'\nassert solution('1 100') == '4'\n\"\"\"\n\n\"\"\"\nGiven an integer N and an integer K, find the number of digits that N has in base K.\n\n---Constraints---\n1 <= N <= 10^9\n2 <= K <= 10\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"4\"\nprint(solution(\"11 2\"))\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == 4\n\n-------"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n2\\n3\\n4\\n5\\n') == '3'"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\nN = int(input())\nprint(N // 2)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n') == '3'\n\"\"\"\n\nn = int(input())\nprint(n//3)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\nassert solution('7') == '4'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\nassert solution('7') == '4'\nassert solution('9') == '5'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5) == 3\n\n---\nHow the solution is implemented in Java:\n\n//Takahashi wants to print a document with N pages double-sided, where two pages of data can be printed on one sheet of paper.\n//At least how many sheets of paper does he need?\n//\n//Approach 1: Brute Force\n//The problem can be solved by considering all possible combinations of two pages and trying to find a solution that satisfies the constraints.\n//\n//For example, there are N = 5 pages in the document and we can choose 1-st, 2-nd, 3-rd, 4-th and 5-th pages to print the document on the 3-rd sheet.\n//If we look at all the possible combinations of two pages and try to find one such that both pages are different, then we have 4 possible combinations.\n//\n//So, the problem can be solved in O(N * (N - 1) / 2) time and O(1) space.\n//\n//Approach 2: Optimized Solution\n//The solution above is a brute force solution. But there is a much smarter way to solve the problem by considering only the N / 2 combinations of pages that satisfy the constraints.\n//\n//Let us call the number of pages P.\n//\n//If the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//Now, if the number of pages P is even then the problem is solved in O(1) time.\n//\n//If the number of pages P is odd then we can reduce the problem to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N / 2 = (P - 1) / 2 pages.\n//\n//So, the problem is reduced to a case of N /"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\n\"\"\"\n\nfrom __future__ import print_function\nA, B = (int(x) for x in input().split())"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n\") == \"Yay!\"\nassert solution(\"3 4\\n\") == \"Yay!\"\nassert solution(\"5 5\\n\") == \":(\"\nassert solution(\"2 2\\n\") == \":(\"\nassert solution(\"1 4\\n\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n2 3\") == \"Yay!\"\nassert solution(\"1 2\\n2 4\") == \":(\nassert solution(\"7 3\\n1 2\") == \"Yay!\"\nassert solution(\"7 3\\n1 4\") == \":(\nassert solution(\"4 5\\n1 2\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5 4) == 'Yay!'\n\nassert solution(5 3) == 'Yay!'\n\nassert solution(5 2) == 'Yay!'\n\nassert solution(5 1) == ':(\n\nassert solution(4 5) == ':("
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\n\"\"\"\n\na,b = [int(x) for x in stdin.split()]\nprint(\"Yay!\" if a+b<=16 else \":(\")\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234') == '3'\nassert solution('12345') == '12'\nassert solution('123456') == '1'\nassert solution('1234567') == '12'\nassert solution('12345678') == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234') == '1'\nassert solution('1234567876') == '34'\nassert solution('98765') == '0'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\n\"\"\"\nThe input consists of a string S that contains digits 1, 2,..., 9.\nThe digit at index i is considered to be the i-th element of the array, indexed from 0.\nLunlun, the Dachshund, will take out three consecutive digits from S, treat them as a single integer X and bring it to her master. (She cannot rearrange the digits.)\nThe master's favorite number is 753. The closer to this number, the better.\nWhat is the minimum possible (absolute) difference between X and 753?\n\n----Constraints----\n - S is a string of length between 4 and 10 (inclusive).\n - Each character in S is 1, 2,..., or 9.\n\n----Input----\nInput is given from Standard Input in the following format:\nS\n\n----Output----\nPrint the minimum possible difference between X and 753.\n\n----Sample Input----\n1234567876\n\n----Sample Output----\n34\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == '34'\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\nassert solution(\"445566739\") == \"8\"\nassert solution(\"567398765\") == \"0\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234567876') == '34'\nassert solution('78887654321') == '0'\n\n------\n\n\nWe have a string, S.\nThe string consists of digits 1, 2,..., 9, and characters '+', '-', '(', ')', '*', '/'.\nLet's say that:\n* The substring of S, S[i] + S[i + 1] +... + S[j], is a valid expression.\n* N is an integer within the range [i, j] (inclusive)\n* If N is an integer, we'll call S[i] +... + S[j] a representation of N.\n* Let's denote the number of ways of representing N by a substring of S, denoted by F[i][j].\nWe know that:\n* F[i][j] = 1 if i = j.\n* F[i][j] = 0 if i + 1 = j.\n* F[i][j] = F[i + 1][j - 1] if S[i] + S[i + 1] +... + S[j] is a valid expression.\nYou are given F[1][n], F[2][n],..., F[n][n].\nFind the last four digits of F[n][n].\n\n-----Constraints-----\n1 <= n <= 10^6\n\n-----Input-----\nThe first line contains n.\nThe second line contains the n - 4 digits of the sequence F[i][j], 0 <= i <= j <= n.\n\n-----Output-----\nPrint the last four digits of F[n][n].\n\n-----Sample Input-----\n5\n11111\n\n-----Sample Output-----\n4444\n\n------\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 12 6\\n\") == \"5 3\"\nassert solution(\"2 9\\n\") == \"1 7\"\nassert solution(\"7\\n13 52 0 13 26 52\\n\") == \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 52 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\nimport sys\nimport string\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 12 6') == '5 3'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\ncount = 0\nfor i in a:\n    if i > 0:\n        count += 1\n\nprint(count, min(count, a.count(0)))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 4 1\\n') == '3'\nassert solution('3 1 4 1\\n') == '1'\nassert solution('5 1 1 2 2\\n') == '2'\nassert solution('6 1 1 2 2 3\\n') == '2'\nassert solution('7 1 1 2 2 3 4\\n') == '3'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\nassert solution('5\\n1 1 1 2 2') == '2'\nassert solution('8\\n1 1 1 2 2 3 3 4 4') == '5'\nassert solution('8\\n1 1 1 2 2 3 3 4') == '4'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = [0]\nfor i in range(n):\n    d.append(d[i] + a[i])\n\nprint(max(d[-1] - d[i] for i in range(1, n + 1)))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 4 1') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == \"3\"\nassert solution(\"3 1 4 1\\n1 1 4 1\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = [int(c) for c in sys.stdin.readline().strip().split(' ')]\n\ncurr_day = max(arr)\nday = 1\nwhile True:\n    if sum(1 for a in arr if a <= curr_day) < n:\n        curr_day -= 1\n    else:\n        break\n    day += 1\nprint(day)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == \"3\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n\"\n    \"3 1 4 1\\n\"\n) == \"3\"\n\nassert solution(\n    \"3\\n\"\n    \"1 1 1\\n\"\n) == \"1\"\n\nassert solution(\n    \"5\\n\"\n    \"1 1 1 2 2\\n\"\n) == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 4 1\") == \"3\"\nassert solution(\"3\\n1 1 4 1\") == \"1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"2\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 4 1\\n') == '3'\nassert solution('3\\n1 1 1\\n') == '1'\n\"\"\"\n\nimport math\nfrom collections import deque\nfrom functools import lru_cache\nfrom typing import Deque\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 2 2\") == 2\nassert solution(\"1 1 1 2 2\") == 2\nassert solution(\"1 1 1 2 2\") == 2\nassert solution(\"1 1 1 2 2\") == 2\nassert solution(\"1 1 1 2 2\") == 2\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 4 1\\n') == '3'\nassert solution('3 1 4 1\\n') == '1'\nassert solution('5 1 1 2 2\\n') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 2\\n3 4\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n1 2') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2\\n'\nassert solution('3 2\\n1 3\\n2 3') == '1\\n4 2\\n'\nassert solution('2 0\\n') == '1\\n1 2\\n'\n\nassert solution('4 2\\n1 2\\n2 3\\n1 4') == '2\\n4 2\\n'\nassert solution('3 2\\n1 3\\n2 3') == '1\\n4 2\\n'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2\\n4 2'\nassert solution('2 0\\n') == '1\\n1 2'\nassert solution('3 2\\n1 3\\n2 3') == '2\\n'\nassert solution('3 3\\n1 2\\n2 3') == ''\nassert solution('3 3\\n1 3\\n2 3') == ''\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3\\n2 3\\n') == '2'\nassert solution('1 2\\n2 3') == '1'\nassert solution('1 2\\n2 3\\n') == '1'\n\"\"\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 1\\n1 2\\n2 3\") == \"2\"\n\nassert solution(\"4 2\\n1 2\\n2 3\\n1 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n1 2') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == 2\nassert solution(\"2 0\\n\") == 1\nassert solution(\"3 2\\n1 3\\n2 3\") == 2\nassert solution(\"3 2\\n1 3\\n2 3\") == 2"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == '4'\n\nprint('Success')\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_result\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nprint('Test passed')\n\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == 11\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\\n') == 4\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n\nclass DisjointSet:\n    def __init__(self):\n        self.set = list(range(sys.maxsize))\n    def find(self, x):\n        if self.set[x]!= x:\n            self.set[x] = self.find(self.set[x])\n        return self.set[x]\n    def union(self, x, y):\n        self.set[self.find(x)] = self.find(y)\n    def __str__(self):\n        return str(self.set)"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"7\"\nassert solution(\"6 2\") == \"4\"\nassert solution(\"7 3\") == \"4\"\nassert solution(\"9 5\") == \"13\"\nassert solution(\"1 10\") == \"10\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n\") == \"11\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nINF = float('inf')"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\nassert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('3 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\nassert solution('3 4\\n5 10000000000\\n5 6 9999999999') == '1 1\\n1 9\\n2 1\\n2 9999999994'\nassert solution('3 5\\n5 10000000000\\n5 6 9999999999') == '1 1\\n1 9\\n2 2\\n2 13'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'2 1\\n'\n'2 2\\n') == '1 1\\n'\n\nassert solution(\n'3 6\\n'\n'10 15 12\\n'\n'1 9 12 23 26 37\\n') == '1 1\\n'\n\nassert solution(\n'2 3\\n'\n'5 10000000000\\n'\n'5 6 9999999999\\n') == '1 5\\n'\n\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_expected"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nrooms = list(map(int, stdin.readline().split()))\nletters = list(map(int, stdin.readline().split()))\ndormitories = [0 for _ in range(n)]\nrooms_dict = {}\n\nfor i in range(len(rooms)):\n    dormitories[i] = rooms[i]\n    rooms_dict[rooms[i]] = i + 1\n\nresult = []\nfor i in range(m):\n    result.append(rooms_dict[letters[i]])\n\nprint(\"\\n\".join(map(str, result)))"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\"\n\"\"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n\nfrom collections import deque\n\na, b, c, d = map(int, input().split())\n\ndic = {\n    a: (b, c),\n    b: (c, d),\n    c: (d, a)\n}\n\nq = deque()\nq.append((a, 0))\n\nvisited = set()\nvisited.add(a)\n\nwhile len(q) > 0:\n    n, k = q.popleft()\n    if k == 3:\n        break\n    for i in dic[n]:\n        if i not in visited:\n            visited.add(i)\n            q.append((i, k + 1))\n\nfor i in sorted(visited):\n    print(i, end=' ')\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\nprint('All tests are passed')"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 6 5 4''') == '2 1 3'\n\"\"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\nprint(solution('3 6 5 4'))\nprint(solution('40 40 40 60'))\nprint(solution('201 101 101 200'))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\"\"\"\n\na, b, c, d = map(int, input().split())\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3 6 5 4') == '2 1 3'\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\na, b, c, d = map(int, stdin.readline().split())\n\nprint(a + b)\nprint(a + c)\nprint(b + c)\nprint(a + b + c)\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGGGGGRR'\n\n'''\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nRRR\") == \"2\\nRRR\"\nassert solution(\"4\\nBBB\") == \"1\\nBB\"\nassert solution(\"2\\nBGR\") == \"1\\nGGR\"\nassert solution(\"6\\nBBRRRR\") == \"1\\nBBRRR\"\nassert solution(\"10\\nBBRRRRRRRRRRRR\") == \"3\\nBGRRRRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRRBGBGBGRG\"\n\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRBGRRRGRRRG\"\n\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nRBGRGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRBGBGBGRG'\n\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nRBGRGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRBRBGBGBGRG'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'\n\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRRRRBBBGBBGBGB'\nassert solution('9\\nRBBGRRBBG\\n') == '1\\nRBGRBGRRB'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('G') == 'G'\nassert solution('B') == 'B'\nassert solution('BGRGGRBGRG') == 'BGRBGRBGR'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3 4 7 5 6 8') == '4\\n2 3 5 6'\nassert solution('6 7 8 3 4 5 9 10 11') == '6\\n1 2 3 7 8 9'\nassert solution('4 10 9 8 7') == '1\\n1'\nassert solution('9 6 7 8 3 4 5 9 10 11') == '6\\n1 2 3 7 8 9'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"9 10 11 7 8 3 4 5 9\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"1\"\nassert solution(\"10 9 8 7\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n3 3 4 7 5 6 8') == \"4\\n2 3 5 6\"\nassert solution('6\\n1 3 5 2 4 6') == \"2\\n1 4\"\nassert solution('4\\n10 9 8 7') == \"1\\n1\"\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == \"6\\n1 2 3 7 8 9\"\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n3 3 4 7 5 6 8') == '4\\n2 3 5 6'\nassert solution('6\\n1 3 5 2 4 6') == '2\\n1 4'\nassert solution('4\\n10 9 8 7') == '1\\n1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6\\n1 2 3 7 8 9'"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 4 7 5 6 8\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\n\nimport heapq"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4 7 5 6') == '4'\nassert solution('1 3 5 2 4 6') == '2'\nassert solution('10 9 8 7') == '1'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\n-----\n3 2\n\n-----\n3 3\n\n-----\n3 3\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin.readlines():\n    a, b = line.split()\n    print(\"Yes\" if int(a) * int(b) % 2 == 1 else \"No\")\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"1 2\") == \"No\"\n\"\"\"\n\na, b = map(int, input().split())\nfor c in range(1, 4):\n    if a * b * c % 2 == 1:\n        print(\"Yes\")\n        exit()\nprint(\"No\")\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('4 1') == 'No'\nassert solution('1 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('1 3') == 'No'\nassert solution('3 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\nNote:\nFor the purposes of this problem, define the natural number 0 to have any number of factors.\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('81 58\\n') == '110'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nx, y = [int(e) for e in stdin.strip().split()]\nprint(f\"{(x + y) // 2}\")\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(solution(\"81 58\"))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport sys\nfrom typing import List\n\nX, Y = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"83 59\") == \"100\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('123') == '12'\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 8\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 8\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"2\") == 8\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")\n\n\"\"\"\n\nN = int(stdin.readline().rstrip())\nprint((N + 1) * N // 2)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '8'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 8\nassert solution(\"1\") == 9\nassert solution(\"3\") == 55\n\"\"\"\n\n\"\"\"\n[\uc544\uc774\ub514\uc5b4]\n- N\uc774 1\ubd80\ud130 9\uae4c\uc9c0 \uc788\uc744 \ub54c, \uacbd\uc6b0\uc758 \uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n- 1. 1\ubc88\uc9f8 \uc22b\uc790\ub294 1\uc774\uc5ec\uc57c \ud568\n- 2. 2\ubc88\uc9f8 \uc22b\uc790\ub294 1~N\uae4c\uc9c0 \ub420 \uc218 \uc788\ub2e4.\n- 3. 3\ubc88\uc9f8 \uc22b\uc790\ub294 1~N\uae4c\uc9c0 \ub420 \uc218 \uc788\ub2e4.\n-...\n- 8. 8\ubc88\uc9f8 \uc22b\uc790\ub294 1~N\uae4c\uc9c0 \ub420 \uc218 \uc788\ub2e4.\n- 9. 9\ubc88\uc9f8 \uc22b\uc790\ub294 1~N\uae4c\uc9c0 \ub420 \uc218 \uc788\ub2e4.\n\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 8\nassert solution('3') == 12\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('7\\n') == 'YES'\nassert solution('8\\n') == 'NO'\n\n\"\"\"\n\nX = int(stdin.readline())\nprint(\"YES\" if X >= 7 else \"NO\")\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 'YES'\nassert solution('2') == 'NO'\nassert solution('7') == 'YES'\nassert solution('5') == 'YES'\nassert solution('9') == 'YES'\n'''\n\n'''\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5'\n) == 'YES'\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('7\\n') == 'NO'\nassert solution('9\\n') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n\") == 'YES'\nassert solution(\"5\\n\") == 'YES'\nassert solution(\"6\\n\") == 'NO'\nassert solution(\"8\\n\") == 'YES'\nassert solution(\"7\\n\") == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('9') == 'YES'\nassert solution('2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(5) == \"NO\"\nassert solution(5) == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(readlines(stdin)) == \"YES\"\n\"\"\"\n\nX = int(input())"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nprint(solution(\"ABC999\"))\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('999') == 'ABC'\n\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('999') == 'ABC'\n\n------"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"999\") == \"ABC\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n6\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n8\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n7\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n\"\"\"\nimport sys\nimport os"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n4\\n8\\n15\\n9\") == \"Yay!\"\nassert solution(\"1\\n4\\n8\\n15\\n9\") == \"Yay!\"\nassert solution(\"1\\n4\\n8\\n15\\n9\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1\n2\n4\n8\n9\n15''') == 'Yay!'\nassert solution('''1\n1\n1\n1\n1\n1''') == 'Yay!'\nassert solution('''1\n2\n4\n8\n9\n15''') == 'Yay!'\nassert solution('''1\n2\n4\n8\n12\n15''') == 'Yay!'\nassert solution('''1\n2\n4\n8\n10\n15''') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"1\\n2\\n4\\n8\\n9\\n15\"\n) == 'Yay!'\nassert solution(\n    \"2\\n3\\n6\\n7\\n12\\n15\"\n) == 'Yay!'\nassert solution(\n    \"2\\n3\\n6\\n7\\n12\\n15\"\n) == 'Yay!'\nassert solution(\n    \"3\\n4\\n5\\n6\\n7\\n12\\n15\"\n) == 'Yay!'\nassert solution(\n    \"2\\n3\\n6\\n7\\n12\\n15\"\n) == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n2\\n1\\n4\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n\n-----\nYou are given a number n. You have to print the number of ways of making the number by adding a single digit number to it.\n\nFor example, for n = 3, there are 3 ways of adding 1, 2 and 3 to it: 32 + 1 = 33, 23 + 2 = 24 and 3 + 3 = 6.\n\n-----\n\nn = int(stdin.readline())\n\ndp = [0] * (n + 1)\ndp[0] = 1\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1] + (dp[i - 1] - dp[i - 5])\n\nprint(dp[n] % 1000007)\n\n-----\n\nfrom functools import lru_cache\n\nn = int(input())\n\ndp = [0] * (n + 1)\ndp[0] = 1\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\n\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n17\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n17\\n19\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n17\\n19\\n21\") == \"Yay!\"\nassert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n17\\n19\\n21\\n23\") == \"Yay!\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"brown\") == \"red\"\n\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"3201\") == \"red\"\nassert solution(\"3299\") == \"red\"\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(3200)) == 'pink'\n\"\"\"\n\na = int(input())\ns = input()"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pink\") == \"pink\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3200, 'pink') == 'pink'\n\n\"\"\"\n\na = int(input())\ns = input()\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3200') == 'pink'\nassert solution('2299') =='red'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3200') == 'pink'\nassert solution('2500') =='red'\n\n--------------------------------------------------------------------------------\n\nWrite 5 lines of code to test the correctness of solution:\nYou will be given an integer a and a string s consisting of lowercase English letters as input. Write a program that prints s if a is not less than 3200 and prints red if a is less than 3200.\n\n-----Constraints-----\n - 2800 \\leq a < 5000\n - s is a string of length between 1 and 10 (inclusive).\n - Each character of s is a lowercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\ns\n\n-----Output-----\nIf a is not less than 3200, print s; if a is less than 3200, print red.\n\n-----Sample Input-----\n3200\npink\n\n-----Sample Output-----\npink\n\na = 3200 is not less than 3200, so we print s = pink.\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3200 pink\") == \"pink\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\na, s = map(str, input().split())\nprint(s if int(a) >= 3200 else \"red\")\n\n\"\"\"\nSolution 2\n\"\"\"\n\na, s = input().split()\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"2800\") == \"red\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1222') == 'ARC'\nassert solution('1440') == 'AGC'\nassert solution('1598') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4783') == 'AGC'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1199\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == 'ABC'\nassert solution('1234') == 'ARC'\nassert solution('1234') == 'AGC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1130\") == \"ABC\"\nassert solution(\"1700\") == \"ARC\"\nassert solution(\"2500\") == \"AGC\"\n\"\"\"\n\nimport sys\n\nR = int(sys.stdin.readline())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(983)) == 'ABC'\nassert solution(str(0)) == 'AGC'\nassert solution(str(1)) == 'ARC'\nassert solution(str(2)) == 'ABC'\nassert solution(str(1200)) == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1180') == 'ARC'\nassert solution('1199') == 'ABC'\nassert solution('4208') == 'AGC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234') == 'ABC'\n\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"1\"\nassert solution(\"11\") == \"9\"\nassert solution(\"19\") == \"1\"\nassert solution(\"111\") == \"9\"\nassert solution(\"9\") == \"1\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == '999'\nassert solution('12') == '21'\nassert solution('101') == '109'\nassert solution('11') == '11'\nassert solution('9') == '9'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"321\"\nassert solution(\"912\") == \"921\"\nassert solution(\"111\") == \"999\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"321\"\nassert solution(\"121\") == \"212\"\nassert solution(\"1\") == \"9\"\nassert solution(\"9\") == \"1\"\nassert solution(\"99\") == \"999\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"119\") == \"991\"\n\nprint(solution(\"119\"))\n'''\n\nn = input()\nprint(\"\".join([str(int(i) if i == \"1\" else \"9\") for i in n]))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '9'\nassert solution('9') == '1'\nassert solution('111') == '999'\n\n\"\"\"\n\nn = input()\n\nprint(''.join(map(lambda x: '9' if x == '1' else '1', n)))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"1\") == \"9\"\nassert solution(\"9\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"19\") == \"91\"\nassert solution(\"12\") == \"12\"\nassert solution(\"9\") == \"99\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"119\") == \"991\"\nassert solution(\"111\") == \"999\"\nassert solution(\"111\") == \"999\"\nassert solution(\"9\") == \"1\"\nassert solution(\"99\") == \"9\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''abbaac\nac\nbccddaaf\nzzzzzzzzzz\n''') == 'abac'\nassert solution('''aba\nab\naaa\nab''') == 'aaa'\nassert solution('''aaa\naaa\naaa\naaa''') == 'aaa'\nassert solution('''aaa\naaa\naaa\naaa\naaa''') == 'aaa'\nassert solution('''aaaa\naaa\naaa\naaa\naaa''') == 'aaa'\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzz'\nassert solution('aaaaaaaaaaaaa') == 'aaaaaaaaaaaaa'\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bccddaaf'\nassert solution('zzzzzz') == 'zzzzzz'\n\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"abbaac\") == \"abac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\n\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\nfrom collections import deque\nfrom itertools import combinations\nfrom typing import Callable\n\nfrom exercise.myUtils import timer\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\") == \"2\\n5\\n4\\n333\\n0\"\nprint(solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\"))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n') == '2\\n5\\n4\\n333\\n0\\n'\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"test 2 passed\")\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n    \"\"\") == \"\"\"\n2\n5\n4\n333\n0\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 1000000000\n1 1000000000\n2 1\n    \"\"\") == \"\"\"\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n10 4\n    \"\"\") == \"\"\"\n2\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Test finished.\")\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n10 4\n13 9\n100 13\n123 456\n92 46\"\"\") == \"\"\"2\n5\n4\n333\n0\"\"\"\n\"\"\"\nProblem description\nFind\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n''') == '''\n2\n5\n4\n333\n0\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 13\") == \"1\"\nassert solution(\"123 456\") == \"4\"\nassert solution(\"13 9\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\\n13 9\") == \"2\"\nassert solution(\"100 13\\n123 456\") == \"4\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '4 3\\n3 4 1 2'\n) == '2.666666666666667'\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 1 2\") == 2.666666666666667\n-----\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == '2.666666666666667'\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\nprint(max([sum(a[i:i+k])/k for i in range(len(a)-k+1)]))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\n-----Test input-----\n\nYou can check your solution by using it in the following code.\n\nfrom solution import solution\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nprint(solution(n, k, a))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n3 4 1 2\n''') == '2.666666666666667'\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('5 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1') == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\"\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1') == \"YES\\nNO\"\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n4 2\") == \"YES\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1\") == \"NO\"\nassert solution(\"6 1\\n3 2 4 1 2 6\\n2 1\") == \"YES\"\nassert solution(\"7 1\\n1 2 3 4 5 6 7\\n1\") == \"NO\"\nassert solution(\"3 2\\n3 2 1\") == \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\") == \"NO\"\nassert solution(\"5 1\\n3 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\") == \"YES\"\nassert solution(\"6 1\\n3 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\") == \"YES\"\nassert solution(\"5 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4') == ''\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('4 2\\n4 1 2 3\\n1 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 1\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'NO'\nassert solution('4 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4') == 'YES'"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"baabbb\"\n    ) == \"bab\"\n\nassert solution(\n    \"ooopppssss\"\n    ) == \"oops\"\n\nassert solution(\n    \"z\"\n    ) == \"z\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"z\") == \"z\"\nassert solution(\"ooopppssss\") == \"oops\"\n\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\"\nimport sys\nimport re\n\nregex = r'([a-z]*)(?:\\1)'"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"ooopppssss\") == \"oops\"\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('oopppssss') == 'oops'\nassert solution('z') == 'z'\nassert solution('hippopotamuses') == 'hippopotamuses'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('z') == 'z'\nassert solution('o') == 'o'\nassert solution('oo') == 'oo'\nassert solution('oop') == 'oo'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\nassert solution('aaabbb') == 'aab'\nassert solution('aaaaa') == 'a'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\nassert solution(\"ooopppssss\") == \"oops\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bab') == 'baa'\nassert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1\\n4 3 4\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"1\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\n\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == '0'\n\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == '0'\n\nassert solution(\"1 0\\n\") == '0'\n\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == '2'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\\n2 3 2\\n2 4 5\") == \"1\"\nassert solution(\"1 2 1\\n2 3 2\\n2 4 5\") == \"0\"\n\nassert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"2\"\nassert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4''') == '1'\nassert solution('''4 3\n2 1 3\n4 3 4\n2 4 1''') == '0'\nassert solution('''3 3\n1 2 1\n2 3 3\n1 3 3''') == '0'\nassert solution('''5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3''') == '2'\n\"\"\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == '1'\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '0'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"1\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '0'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '0'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RR\") == \"RR\"\nassert solution(\"GB\") == \"GB\"\n\nassert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RR\") == \"RR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nprint(solution(\"RGBGRBB\"), \"RGBRGBR\")\nassert solution(\"GB\") == \"GB\"\nprint(solution(\"GB\"), \"GB\")\nassert solution(\"R\") == \"R\"\nprint(solution(\"R\"), \"R\")\nassert solution(\"RR\") == \"RR\"\nprint(solution(\"RR\"), \"RR\")\nassert solution(\"RRR\") == \"RRR\"\nprint(solution(\"RRR\"), \"RRR\")\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RBBRRBR\") == \"R\"\nassert solution(\"RRRR\") == \"R\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBRGBGR\") == \"GB\"\nassert solution(\"RRGB\") == \"RR\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RRRRRRRRRR\") == \"RRRRRRRRRR\"\nassert solution(\"GRBGGB\") == \"GRBGGB\"\nassert solution(\"GGRRGGGG\") == \"GGRRGGGG\"\nassert solution(\"RRRBBBB\") == \"RRRBBBB\"\n\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\n\"\"\"\n\nn = int(input())\ns = input()\n\nm = 0\nr = 0\ng = 0\nb = 0\nfor i in range(n):\n    if s[i] == 'R':\n        m += 1\n    elif s[i] == 'G':\n        g += 1\n    elif s[i] == 'B':\n        b += 1\n    if (b == g and g == r) or (b == r and r == m):\n        m += 1\n        b = m\n        g = m\n        r = m\n    elif b == m:\n        r += 1\n    elif g == m:\n        b += 1\n    elif r == m:\n        g += 1\n    if m == 3:\n        r = 0\n        g = 0\n        b = 0\n        m = 0\nprint(min(m, r, g, b))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RGBGRBB') == 'RGBGRB'\nassert solution('RR') == 'RR'\nassert solution('RGBG') == 'RG'\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RR\") == \"RR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRB\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC') == '48000.0'\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n10000 JPY\n0.10000000 BTC\n\"\"\") == \"48000.0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2\n10000 JPY\n0.10000000 BTC\n''') == '48000.0'\n\n'''\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\nassert solution(\"10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\"\n\nn = int(input())\nx_u = []\nfor i in range(n):\n    x, u = input().split()\n    x = float(x)\n    x_u.append([x, u])\n\nx = [i[0] for i in x_u]\nu = [i[1] for i in x_u]"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == 3\n\n----\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\nfrom unittest import TestCase\nfrom typing import List\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin=\"4 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123) == \"321\"\nassert solution(1024) == \"1\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\nop\\nxy') == 'opxy'\nassert solution('1\\nabc') == 'abc'\n\"\"\"\n\nfrom io import StringIO"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nassert solution(\"abc\") == \"abccba\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nprint(solution(\"ip cc\"))\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n\nimport sys\nimport fileinput\nfrom typing import Iterator, List, Tuple, Set\nfrom collections import deque"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\nip cc') == 'icpc'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ip cc\") == \"icpc\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AAA\") == \"Yes\"\nassert solution(\"BAA\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"BAB\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"BAC\") == \"No\"\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BBA') == 'No'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\nassert solution(\"BAB\") == \"No\"\n\nassert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"ABB\"\n) == \"No\"\nassert solution(\n    \"ABC\"\n) == \"Yes\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().rstrip()"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABB\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRR') == '3'\nassert solution('RRS') == '2'\nassert solution('SRR') == '0'\nassert solution('S') == '0'\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRR') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''RRS\n''') == '2'\n\n'''\n\u4e00\u756a\u4e0a\u306e\u89e3\u7b54\u306e\u3084\u3064\n'''\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('SRR') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRR\") == 3\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRR\") == 2\nassert solution(\"RRS\") == 2\nassert solution(\"RSS\") == 1\nassert solution(\"RRR\") == 2\nassert solution(\"RRSR\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRS\") == 2\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRS\") == \"2\"\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRS\") == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRR\") == \"3\"\nassert solution(\"RRS\") == \"2\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4 5\") == \"3 4 5 1 2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"3 4 5 6 7 8 9 10 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1 2 3\n\"\"\") == \"3 1 2\"\nassert solution(\n\"\"\"\n5 6 3\n\"\"\") == \"3 6 5\"\nassert solution(\n\"\"\"\n1 1 1\n\"\"\") == \"1 1 1\"\nassert solution(\n\"\"\"\n0 0 0\n\"\"\") == \"0 0 0\"\nassert solution(\n\"\"\"\n0 0 0\n\"\"\") == \"0 0 0\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 0\") == \"2 1 0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin=\"1 2 3\") == \"3 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\n\"\"\"\n\nsolution.test_cases = [\n    \"1 2 3\",\n    \"3 1 2\"\n]\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 1 3\") == \"3 2 1\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n2 3 1') == '3 1 2'\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B\\n\") == \"100\\n\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1,2) == 3\nassert solution(2,4) == 5\nassert solution(3,6) == 8\nassert solution(4,8) == 9\nassert solution(5,10) == 10\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(30, 100) == 100\nassert solution(33, 100) == 50\n\n\"\"\"\n\nfrom typing import List, Tuple\n\nstdin = \"\"\"30 100\n\"\"\".strip()\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('30 100') == '100'\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30 100\") == \"100\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+-') == '0'\nassert solution('--') == '0'\nassert solution('+-++') == '1'\nassert solution('+-+++') == '3'\nassert solution('+') == '0'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+-++') == '2'\n\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"2\"\n\n'''"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+-++\") == \"1\"\nassert solution(\"++\") == \"0\"\nassert solution(\"+-\") == \"2\"\n\nprint(\"All tests passed.\")\n\"\"\"\n\ns = input()\nprint(int(s[0] == \"-\" and s[2] == \"-\"))\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+-++\") == \"3\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('+-') == '2'\n\"\"\"\n\nstdin = input()\n\nprint(int(stdin[1]) + int(stdin[2]) + int(stdin[3]))\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"+++\") == \"0\"\nassert solution(\"+-++\") == \"2\"\nassert solution(\"+-0\") == \"0\"\nassert solution(\"+0-\") == \"0\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"-+++\") == \"-4\"\n\"\"\"\n\ns = input()\n\nfor i in range(len(s)):\n    if s[i] == '+':\n        print(int(s[:i]) + 1)\n    elif s[i] == '-':\n        print(int(s[:i]) - 1)"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/32\") == \"TBD\"\nassert solution(\"2018/04/30\") == \"TBD\"\n\nprint(\"Passed!\")\n\n\"\"\"\nimport datetime"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2019/04/30') == 'Heisei'\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/04/30\") == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\nassert solution(\"2020/04/30\") == \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/04/30\") == \"TBD\"\n\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Heisei\"\n\nprint(solution(input()))\n\nimport datetime\nprint(\"Heisei\" if datetime.datetime.strptime(input(), \"%Y/%m/%d\") <= datetime.datetime(2019, 4, 30) else \"TBD\")\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\nprint(solution(\"2019/04/30\"))\nprint(solution(\"2019/04/31\"))\n\n'''\n\n\nimport sys"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '2019/04/30'\n) == 'Heisei'\nassert solution(\n    '2018/04/30'\n) == 'TBD'\nassert solution(\n    '2020/04/30'\n) == 'TBD'\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/05/31\") == \"TBD\"\n\"\"\"\n\nstdin = input()\n\nprint(\"Heisei\" if stdin <= \"2019/04/30\" else \"TBD\")"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\\n\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\\n\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\\n\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\np = [int(x) for x in sys.stdin.readline().split()]\n\np.sort(reverse=True)\nres = 0\nfor i in range(n//2):\n    res += p[i]\nprint(res)\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_stdout\nprint(expected_stdout, file=sys.stderr)\nassert sys.stderr.getvalue() == ''\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10''') == '14'\nassert solution('''10\n6 6 6 3 6 1000000000 3 3 6 6''') == '9'\nassert solution('''3\n1337 1337 1337''') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\\n\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\\n\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\n\"\"\"\n\nimport sys\n\n_, *t = [int(i) for i in sys.stdin.readlines() if i]\n\nprint(sum([(i+1)//2*i for i in t]))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_output\nprint(solution(stdin))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\") == \"2\"\nassert solution(\"10 4\") == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2') == '2'\nassert solution('10 4') == '3'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nids = list(map(int, stdin.readline().split()))\n\nprint(k if len(set(ids)) > k else len(set(ids)))\nprint(' '.join(map(str, sorted(set(ids))[:k])))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 2 1 3 2') == '2 1'\nassert solution('1 2 3 2 1 3 2 4') == '2 1'\nassert solution('1 2 3 2 1 3 2 3') == '2 1'\nassert solution('1 2 3 2 1 3 2 3 4') == '2 1'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"1 2\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"7 2\") == \"2 1\"\nassert solution(\"10 4\") == \"3 1 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\") == \"2\\n2 1\"\nassert solution(\"10 4\") == \"3\\n1 3 2\"\nassert solution(\"5 3\") == \"3\\n1 3 2\"\nassert solution(\"1 5\") == \"1\\n5\"\nassert solution(\"2 10\") == \"2\\n10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\") == \"2\\n2 1\"\nassert solution(\"10 4\") == \"3\\n1 3 2\"\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2 1'\nassert solution('1 2\\n2 3') == '2 2 1'\nassert solution('2\\n2 3') == '2 1'\nassert solution('2\\n3\\n2 3') == '3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n3 2 1 1\\n1\\n2\") == \"1\\n1\\n2\"\nassert solution(\"4 2\\n8\\n4\\n10\") == \"1\\n1\\n2\"\nassert solution(\"6 3\\n12\\n1\\n2\\n3\\n4\\n5\") == \"1\\n1\\n2\"\nassert solution(\"5 2\\n2\\n4\\n8\\n16\") == \"1\\n1\\n2\"\n\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n'''\n\n\nn, q = map(int, stdin.readline().split())\nc = list(map(int, stdin.readline().split()))\n\nfor _ in range(q):\n    print(solution(stdin.readline()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3\\n1 3') == '1 2 3'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n2\\"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2\"\n\"\"\"\n\nfrom math import log2\nfrom typing import List, Dict\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2\\n4\") == '2 2 0 0 0\\n', solution(\"2 3\\n2\\n4\")\nassert solution(\"4 4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == '2 2 2 2 2 2 2 2 2 2 2\\n', solution(\"4 4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")\nassert solution(\"3 3\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == '2 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n', solution(\"3 3\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\")\n\"\"\"\n\nfrom collections import Counter\n\nn, q = map(int, input().split())\ncoins = list(map(int, input().split()))\ncoins.sort()\nqueries = [int(input()) for _ in range(q)]\n\nd = Counter()\nfor c in coins:\n    d[c] += 1\n\ncur = 0\nres = []\nfor q in queries:\n    while cur < q:\n        c = d.most_common()[0][0]\n        d[c] -= 1\n        if d[c] == 0:\n            d.pop(c)\n        cur += c\n    res.append(cur)\n\nprint(\" \".join(map(str, res)))"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1 -1 3 2\"\n\"\"\"\n\nn, q = [int(n) for n in stdin.readline().split()]\na = [int(n) for n in stdin.readline().split()]\nq_ = [int(n) for n in stdin.readlines()]\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_str) == answer\nprint(solution(stdin))"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 4\n2 4 8 2 4\n8\n5\n14\n10''') == '''1\n-1\n3\n2\n'''\n\nassert solution('''5 3\n2 4 8 2 4\n8\n5\n14\n10''') == '''1\n-1\n3\n2\n'''"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n\"\"\"\nimport sys\nfrom collections import Counter\n\nsys.setrecursionlimit(1500)\n\n\nclass Solution:\n    def count(self, t: int, h: int, p: str) -> int:\n        if t == 0:\n            return 0\n\n        count_c = Counter(p)\n        max_c = Counter(c for c in p[:k * n])\n        max_count = max(max_c.values())\n        count = sum(v for v in max_c.values())\n        if count == k * n:\n            return max_count\n        elif count > k * n:\n            return max_count + (k * n - count) * h\n\n        return self.count(t - 1, h, p +'' + p[n * t])\n\n    def solution(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        p = stdin.split('\\n')[0]\n        print(self.count(k, 1, p))\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2') == '21'\n\"\"\"\nfrom functools import lru_cache\nfrom itertools import combinations\n\nN, K = map(int, input().split())\ncards = list(map(int, input().split()))\nfavs = list(map(int, input().split()))\n\n@lru_cache(None)\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2') == '21'\n\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3') == '0'\n\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3') == '0'\n\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3') == '0'\n\nassert solution('4 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3') == '0'"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\n\"\"\"\n) == \"21\"\n\nassert solution(\n\"\"\"\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(expected_output)\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\\n2 4 6 6 6\"\n) == 2\n\nassert solution(\n    \"3\\n2 8 10\"\n) == 2\n\nassert solution(\n    \"4\\n1 1 1 1\"\n) == 0\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\"\nassert solution(\"3\\n4 6 6 6\") == \"2\\n1 2 3\"\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\"\nassert solution(\"3\\n2 8 10\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 6 6\") == [1, 2, 3], \"WA-1\"\nassert solution(\"2 4 6 6 6\") == [2, 3], \"WA-2\"\nassert solution(\"2 4 6 6 6\") == [3], \"WA-3\"\nassert solution(\"1 1 1 1\") == [0], \"WA-4\"\nassert solution(\"1 1 1 1\") == [0], \"WA-5\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 6 6 6\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\\n\"\nassert solution(\"4\\n1 1 1 1\") == \"0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n5 4 3 2 1\") == \"2\\n1 2 3\\n1 1 2\"\n\n\"\"\"\nfrom collections import defaultdict\nfrom math import inf"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 3') == \"2 1 1 1\"\nassert solution('5\\n2 1 3 6 6') == \"2 2 1 1 1\"\nassert solution('3\\n2 8 10') == \"2 2 1 1\"\nassert solution('3\\n2 8 10') == \"2 2 1 1\"\nassert solution('5\\n2 1 3 6 6') == \"2 2 1 1 1\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n2 4 6 6 6\"\"\") == \"2\"\nassert solution(\"\"\"3\n2 8 10\"\"\") == \"2\"\nassert solution(\"\"\"4\n1 1 1 1\"\"\") == \"0\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100010') == 1\nassert solution('10101') == 2\nassert solution('111111') == 0\nassert solution('10011010') == 2\nassert solution('1111111111111111111111') == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"101010\") == 0\nassert solution(\"00100010\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\nassert solution(\"10100100\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100010') == 1\nassert solution('10010001') == 2\nassert solution('10000010') == 0\nassert solution('10100100') == 0\nassert solution('11111111') == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"11110\") == 0\nassert solution(\"11101\") == 1\nassert solution(\"11111111\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"10000010\") == \"2\"\nassert solution(\"00000000\") == \"0\"\nassert solution(\"00100000\") == \"0\"\nassert solution(\"10100100\") == \"1\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100010') == 1\nassert solution('10100100') == 2\nassert solution('11111111') == 0\nassert solution('100000000010') == 0\nassert solution('10010001') == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"11101\") == 0"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"10101\") == \"2\"\nassert solution(\"111011\") == \"0\"\nassert solution
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\n\"\"\"\nimport sys"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\"\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom sys import stdin\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\n\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\n\n\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\nassert solution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\nassert solution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\""
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '''\n3\n4 6 7 \n'''\n\nassert solution('''\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '''\n3\n1 4 5 \n'''\n\nassert solution('''\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '''\n4\n1 3 5 6\n'''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\"\"\"\n\nfrom tools import timing\n\nstdin = open('./input.txt', 'r').read()\n\n@timing\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n') == '3\\n4 6 7 '\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n') == '3\\n1 4 5 '\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n') == '4\\n1 3 5 6 '\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\nsegments = []\nfor _ in range(n):\n    l, r = [int(x) for x in input().split()]\n    segments.append((l, r))\n\nsegments.sort()\nsegment_set = set()\nfor i in range(n):\n    s, e = segments[i]\n    for j in range(i + 1, n):\n        if segments[j][0] <= e:\n            segment_set.add(i)\n            segment_set.add(j)\n            s = min(s, segments[j][0])\n        else:\n            break\n\nresult = 0\nremoved_segment_list = []\nremoved_segment_set = set()\n\nfor i in range(n):\n    if i in segment_set:\n        result += 1\n    else:\n        removed_segment_list.append(i)\n        removed_segment_set.add(i)\n        result += 1\n\nprint(result)\n\nremoved_segment_list.sort()\n\nprint(' '.join([str(x + 1) for x in removed_segment_list]))\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\\n4 6 7'\n\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\\n1 4 5'\n\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\"\"\") == \"3\"\nassert solution(\"\"\"5 1\n29 30\n30 30\n29 29\n28 30\n30 30\"\"\") == \"3\"\nassert solution(\"\"\"6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\"\"\") == \"4\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\"\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\n''') == '30\\n31\\n10'\nassert solution('''2\n4\n1 2 3 4\n1\n2 2 2\n\n''') == '4\\n8'\nassert solution('''5\n6\n1 2 3 4 5\n1\n2 2 2\n\n''') == '6\\n12'\nassert solution('''6\n7\n1 2 3 4 5 6 7\n1\n2 2 2\n\n''') == '7\\n14'\n\n'''\n7\n1 2 3 4 5 6 7\n1\n2 2 2\n\n'''\nassert solution('''3\n5\n2 3 4 5\n1\n3 3 3\n\n''') == '5\\n8'"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30'\nassert solution('3\\n3 4 6\\n') == '10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\n\nassert solution('4\\n10 6 30 15') == '31'\n\nassert solution('3\\n3 4 6') == '10'\n\n\"\"\"\nfrom typing import List\n\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\\n6\\n\") == 10\nassert solution(\"2\\n3\\n5\\n\") == 31\nassert solution(\"1\\n5\\n3\\n\") == 5\n\"\"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open('sample_input.txt').read()) == open('sample_output.txt').read()\nprint('The solution is correct!')\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6') == '30\\n31\\n10'\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == '2\\n1\\n2\\n1'\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2\\n1 2\\n3 6\") == \"2\"\nassert solution(\"1\\n42\") == \"1\"\nassert solution(\"1\\n42\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\\n1\\n2\\n1\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n\n\"\"\"\nimport math\nfrom collections import defaultdict\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100''') == '2'\nassert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100''') == '1'\nassert solution('''4\n1\n2\n3\n4''') == '2'\nassert solution('''4\n1\n2\n3\n4''') == '1'\nassert solution('''5\n1\n2\n3\n4\n5''') == '1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\\n1\\n2\\n1\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\n1 2\\n2\\n1 2') == '1'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2'\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\nassert solution('4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected_result\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 3 6\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'YES'\nassert solution('3 3 5 18') == 'NO'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\\n3 3 5 18\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 4') == 'YES'\nassert solution('1 2 3 6') == 'NO'\nassert solution('5 2 6 27') == 'NO'\nassert solution('3 3 5 18') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'NO\\n'\nassert solution('5 2 6 27\\n3 3 5 18') == 'YES\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\n\"\"\"\nimport sys\nimport os\nfrom typing import List, Tuple\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom utils import file_utils\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == 'NO'\nassert solution('2 3') == 'NO'\nassert solution('3 4') == 'YES'\nassert solution('0 3') == 'YES'\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES'\nassert solution('2 2 1 1') == 'YES'\nassert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'NO'\nassert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'NO'\n\"\"\"\n\nimport sys\n\nnumber_of_test_cases = int(sys.stdin.readline())\n\nfor _ in range(number_of_test_cases):\n    coins = list(map(int, sys.stdin.readline().split()))\n    value_to_pay = int(sys.stdin.readline())\n    value_to_pay_per_coin = value_to_pay // coins[0]\n    value_to_pay_rest = value_to_pay % coins[0]\n    value_to_pay_rest_per_coin = value_to_pay_rest // coins[1]\n    value_to_pay_rest_rest = value_to_pay_rest % coins[1]\n    value_to_pay_rest_rest_per_coin = value_to_pay_rest_rest // coins[2]\n    value_to_pay_rest_rest_rest = value_to_pay_rest_rest % coins[2]\n    number_of_value_to_pay = value_to_pay_rest_rest_per_coin + value_to_pay_rest_rest_rest\n    if number_of_value_to_pay == 0:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\n\"\"\"\nimport sys\n\nnum_of_cases = int(sys.stdin.readline())\nfor case in range(num_of_cases):\n    line = sys.stdin.readline().split()\n    n = int(line[0])\n    a = int(line[1])\n    b = int(line[2])\n    s = int(line[3])\n    count = 0\n    if a > n:\n        count += b\n    elif b > n:\n        count += a\n    else:\n        count += a + b\n    if s!= count:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 1 1 2 1 2\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 3 1 2 1 2\") == \"YES\\n1\\n3\\n5\\n5 4 3 1\\n\"\nassert solution(\"5 3 1 2 1 0\") == \"NO\\n\"\nassert solution(\"5 3 1 1 2 1\") == \"YES\\n1\\n3\\n5\\n5 4 3 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n5 5 3 1\"\nassert solution(\"5 0 1 5 3\") == \"YES\\n0\\n5 5 3 1\"\nassert solution(\"5 1 1 5 3\") == \"NO\"\nassert solution(\"0 1 2 3 4\") == \"NO\"\nprint('All tests passed!')"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 4 3 1'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\nassert solution(\"5 4 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 4 3 1\\n'\nassert solution(\"5 1 1 2 1 2\") == 'NO\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 4 3 2 1 0') == 'YES'\nassert solution('5 3 4 2 1 0') == 'NO'\nassert solution('5 2 5 3 4 0') == 'YES'\nassert solution('4 3 2 1 0') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('4 3 2 1 0') == 'YES'\n\nassert solution('5 4 3 2 1 0') == 'YES'\nassert solution('5 5 5 5 5 5') == 'NO'\nassert solution('5 4 3 2 1 0') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 7 3 3 1 4\\n\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 2 1 0\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1 0\\n\"\nassert solution(\"5 1 1 2 1 2\\n\") == \"NO\\n\"\nassert solution(\"5 4 3 2 1 0\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1 0\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution('5 4 3 1 5 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution('5 4 3 1 5 3') == 'YES\\n1\\n3\\n4\\n5 4 3 1'\n\nassert solution('5 1 2 4 3') == 'NO'\nassert solution('0 1 2 3 4') == 'YES\\n0'"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == 'YES\\n0\\n','solution is not correct'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\nassert solution(\"5 0 4 3 2 1\") == \"NO\"\n\nassert solution(\"4 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"YES\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n1 1') == 2\nassert solution('4 3\\n1 0 0\\n1 1 0\\n1 1 1\\n1 0 1') == 3\n\"\"\"\nimport sys\n\nbooks = sys.stdin.readlines()\nn, k = list(map(int, books[0].split()))\nbooks.pop(0)\n\ndp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\nfor i in range(n):\n    book = list(map(int, books[i].split()))\n    for j in range(1, k + 1):\n        dp[i + 1][j] = min(dp[i + 1][j], dp[i][j - 1] + book[1])\n        if book[0] + book[2] >= k:\n            dp[i + 1][k] = min(dp[i + 1][k], dp[i][k])\n        else:\n            dp[i + 1][k] = min(dp[i + 1][k], dp[i][k - book[0] - book[2]] + book[1])"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\\n5 0 1\") == \"10\"\nassert solution(\"3 1 1\\n8 0 1\\n9 0 1\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1''') == '8'\nassert solution('''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0''') == '18'\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1''') == '-1'\nassert solution('''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1''') == '8'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\n\"\"\"\n\n\n\n-----\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\"\n\n\n\n\n-----\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\"\n\n\n-----\n\"\"\"\n\n\n\n-----\n\n\n\n-----\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\\n\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n\") == \"-1\"\n\n\"\"\"\n\nn, k = map(int, input().split())\nbooks = {}\n\nfor i in range(n):\n    a, b, t = map(int, input().split())\n    books[i] = (t, a, b)\n\nbooks = sorted(books.items(), key=lambda x: x[1][0])\n\nx = 0\nfor i, (key, value) in enumerate(books):\n    x += value[0]\n    if value[1] == 0 and value[2] == 0:\n        break\n\nprint(-1 if x < k else x)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == -1\nassert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == 18\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1') == 8\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1') == -1\nassert solution('5 3\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 1') == 8\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == 18\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == 8\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\") == -1\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18'\nassert solution('''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n''') == '-1'\nassert solution('''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == '8'\nassert solution('''5 4\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == '-1'\nassert solution('''8 5\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(\"task.txt\", \"r\").read()) == open(\"solution.txt\").read()\nprint(\"Well done!\")\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 3 1\\n4 2\\n6 4 8 5') == '2\\n6\\n-1'\nassert solution('2 2\\n1 6\\n3 5\\n5 2 5') == '7\\n6\\n-1'\nassert solution('3 5\\n5 2 5\\n1 6\\n2 2\\n4 8') == '-1\\n7\\n-1'\nassert solution('4 8\\n5 2 5\\n1 6\\n2 2\\n4 8') == '5\\n6\\n-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 1 2 3 1') == '2'\nassert solution('2 1\\n1 6') == '6'\nassert solution('3 5\\n1 2 3 5') == '-1'\nassert solution('4 2\\n1 1 2 3 1') == '2'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2'\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\nassert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2 6 -1 7'\nassert solution('''5\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2 6 -1 7'\nassert solution('''3\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\n\n'''\n3\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\n3\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\n5\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n'''\n\nq = int(stdin.readline().strip())\nwhile q > 0:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    if k < max(a) - min(a):\n        print(-1)\n        q -= 1\n        continue\n    b = [min(a)] * n\n    b[0] += k\n    for i in range(1, n):\n        b[i] = max(b[i-1] + k, a[i])\n    print(*b)\n    q -= 1\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == \"2\\n6\\n-1\\n7\"\n\"\"\"\n\nimport sys\nfrom math import inf\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\\n6\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\\n6\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\\n6\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\\n6\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\\n6\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n4 2\\n1 1 2 3 1') == '2'\nassert solution('4\\n5 1\\n1 1 2 3 1') == '6'\nassert solution('4\\n4 2\\n1 1 2 3 1') == '-1'\nassert solution('3\\n5 2\\n6 4 8 5') == '7'\nassert solution('4\\n5 2\\n1 6') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\\n6\\n-1\\n7'\nassert solution('''\n6 1\n1 1 1 1 1 1\n5 2\n7 5 8 5 5\n1 2\n9 3\n3 3\n2 2\n2 2\n''') == '-1\\n6\\n9\\n9'\nassert solution('''\n1 1\n3 2\n''') == '2'\nassert solution('''\n5 1\n5 1\n1 1\n1 1\n2 2\n''') == '1\\n1'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"8 8 4 15 16 23\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n4 8 15 16 23') == '5\\n4 8 15 16 23'"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 15 16 23\") == \"5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 8 15 16 23\") == \"5\"\nassert solution(\"12\\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"15\\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nc = Counter(a)\nk = 0\n\nfor i in c.values():\n    k += i % 6\n    \nprint(6*k)"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\n\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 4 8 15 16 8 16 23 15 16 42 23 42 4 8 4 8 15 16 8 16 23 15 16 42 23 42 4\") == \"0\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n4 8 15 16 23\n''') == 5\n\nassert solution('''12\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\n''') == 3\n\nassert solution('''15\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\n''') == 3\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5 5'\n) == '0'\n\nassert solution(\n    '13 42'\n) == '3'\n\nassert solution(\n    '18 4'\n) == '2'\n\nassert solution(\n    '1337 420'\n) == '92'\n\nassert solution(\n    '123456789 1000000000'\n) == '87654322'"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n100500 9000\") == \"3\"\nassert solution(\"123456789 1000\\n100500 9000\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n\ud3ec\uc778\ud2b8\n\n\ub450 \uc218\uc758 \ub367\uc148\uc744 \ud558\uba74 \ub450 \uc218\uac00 \ud569\ud558\uace0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \ubaa8\ub4e0 \uc218\ub294 \ubc18\ub4dc\uc2dc \ud558\ub098 \uc9dd\uc774 \uc788\uc744 \uac83\n\n\ubc18\ubcf5\ud558\uba74 \ub41c\ub2e4.\n\n\uc911\uac04\uc5d0 \ucd94\uac00\ud574\uc57c \ud560 \uc218\uc758 \uac1c\uc218\ub97c \uc774\uc6a9\ud558\ub294\ub370,\n\n\uc911\uac04\uc5d0 \ub354\ud574\uc9c0\ub294 \uc218\uc758 \uac1c\uc218 + \uc911\uac04\uc5d0 \ube7c\uc9c0\ub294 \uc218\uc758 \uac1c\uc218\n\n\ucd1d\uac1c\uc218\ub97c \ud574\uc918\uc11c \ub2f5\uc744 \ucc3e\uc74c\n\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == \"0\\n3\\n2\\n92\\n87654322\\n9150\"\n\"\"\"\n\nimport sys\nimport math\n\ntests = int(sys.stdin.readline())\nfor i in range(tests):\n    a, b = list(map(int, sys.stdin.readline().split()))\n    num = b - a\n    moves = 0\n    max_moves = int(math.log(b, 10))\n    # print(max_moves)\n    for i in range(max_moves, -1, -1):\n        left_moves = (b - (a * (10 ** i))) // (10 ** i)\n        # print(\"left_moves:\", left_moves)\n        right_moves = (b - ((a - (a * (10 ** i))) * (10 ** i))) // (10 ** i)\n        # print(\"right_moves:\", right_moves)\n        if left_moves + right_moves > 0:\n            # print(\"left_moves + right_moves:\", left_moves + right_moves)\n            moves += left_moves + right_moves + 1\n            break\n    # print(\"moves:\", moves)\n    print(moves)\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\\n\") == '0\\n3\\n2\\n92\\n87654322\\n9150'\n\"\"\"\nimport sys"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n13 42') == '0\\n3'\nassert solution('13 37\\n420 4200') == '2\\n92'\nassert solution('123456789 1000\\n100500 9000') == '8\\n87654322'\nassert solution('100500 9000') == '8'\n\"\"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('1 3') == '0'\nassert solution('1 3') == '0'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('1337 420\\n18 4') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n4 8') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('100500 9000') == '87654322'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339 0\\n15\\n54306 999999995\\n999999998'\nassert solution('5 2 12345\\n0 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339 0\\n15\\n54306 999999995\\n999999998'\n\n\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\"\"\"\n\nfrom typing import Callable\n\nfrom icontract import require, ensure, DBC"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nprint('Success')"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339 0\\n15\\n54306 999999995\\n999999995\\n185\\n999999998'\n\n\n\n\n\n'''\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n0 4\\n10 5 15') == '12339'\n\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom operator import itemgetter"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 12345') == '12339'\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"1 2 2 3 2 4 5\") == \"4\"\nassert solution(\"5 10 3 2 7 1 2 2 10\") == \"8\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == 6\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == 8\nassert solution('7 3\\n1 2 2 3 2 4 5') == 4"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 3 2 4 10\") == 6\nassert solution(\"1 2 2 3 2 4 6 10\") == 8\nassert solution(\"1 2 2 3 2 4 5\") == 4\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 2\n1 2 2 3 2 4 10''') == '6'\nassert solution('''8 2\n1 2 2 3 2 4 6 10''') == '8'\nassert solution('''7 3\n1 2 2 3 2 4 5''') == '4'\nassert solution('''10 2\n19 36 29 27 12 31 2 7 10 21 18''') == '9'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\n\nimport unittest\nimport collections\nfrom typing import List\n\n\nclass Solution:\n    def prepare_boxes(self, boxes: List[int], k: int) -> int:\n        max_sum = 0\n        counter = collections.Counter(boxes)\n        for box, candies_count in counter.items():\n            if (k == 1) or (k > 1 and (candies_count % k == 0)):\n                max_sum += 1\n            else:\n                max_sum += candies_count // k\n        return max_sum\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_prepare_boxes(self):\n        self.assertEqual(self.solution.prepare_boxes([1, 2, 2, 3, 2, 4, 10], 7), 6)\n        self.assertEqual(self.solution.prepare_boxes([1, 2, 2, 3, 2, 4, 10], 2), 8)\n        self."
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC', 1) == 'aBC'\n\"\"\"\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"ABa\") == \"aba\"\nassert solution(\"ABaABC\") == \"abacba\"\n\nimport sys\nassert sys.stdin.readline().strip() == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'aBC'\n\n--------Test--------\nprint(solution('ABC'))"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABCABCABC') == 'abcabcabc'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABCD') == 'abcd'\n\nprint(solution('ABC'))\nprint(solution('ABCD'))\n\n\"\"\"\n\nimport ast\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"MNO\") == \"mno\"\nassert solution(\"ZYX\") == \"zyx\"\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC') == 'abC'\nassert solution('abC') == 'abC'\nassert solution('abc') == 'abc'\nassert solution('abCdeFg') == 'abCdeFg'\nassert solution('ABCDEF') == 'abcdef'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC', 1) == 'aBC'\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == solution_mine\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\n\nassert solution('3\\nmoscow\\n40\\nkazan\\n50\\nmoscow\\n60') == '2\\n1\\n3'\n\nassert solution('3\\nmoscow\\n40\\nkazan\\n50\\nmoscow\\n60') == '2\\n1\\n3'\n\nassert solution('1\\nmoscow\\n40\\nkazan\\n50\\nmoscow\\n60') == '2\\n1\\n3'\n\nassert solution('3\\nmoscow\\n40\\nkazan\\n50\\nmoscow\\n60') == '2\\n1\\n3'"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\"\"\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nfoo\\nbar') == 'bar\\nfoo'\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\nmoscow 50\\nkazan 20\\nkazan 10\") == \"4\\n6\\n3\\n1\\n5\\n2\"\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 40\\nkhabarovsk 20\\nkazan 10\") == \"4\\n6\\n3\\n1\\n5\\n2\"\n\nprint(solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 40\\nkhabarovsk 20\\nkazan 10\"))"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n\n----\n\nThe lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 3,4,6,1,5,2.\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 1000\n''') == 'No'\n\nassert solution('''4 1000\n''') == 'No'\n\nassert solution('''6 1000\n''') == 'Yes'\n\nassert solution('''5 1000\n''') == 'Yes'\n\nassert solution('''3 1000\n''') == 'No'"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"5 9\") == \"Yes\"\nassert solution(\"5 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split())"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\n\n\"\"\"\nPossible Solution\n\nclass Solution:\n    def solve(self, n: int, k: int) -> float:\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1/3\n\n        if k < 2:\n            return 0\n        if k == 2:\n            return 1/3\n        if k == 3:\n            return 1/6\n        if k == 4:\n            return 1/4\n        if k == 5:\n            return 1/6\n        if k == 6:\n            return 1/8\n        if k == 7:\n            return 1/12\n        if k == 8:\n            return 1/16\n        if k == 9:\n            return 1/20\n        if k == 10:\n            return 1/32\n        if k == 11:\n            return 1/40\n        if k == 12:\n            return 1/48\n        if k == 13:\n            return 1/64\n        if k == 14:\n            return 1/80\n        if k == 15:\n            return 1/96\n        if k == 16:\n            return 1/128\n        if k == 17:\n            return 1/160\n        if k == 18:\n            return 1/192\n        if k == 19:\n            return 1/256\n        if k == 20:\n            return 1/320\n        if k == 21:\n            return 1/384\n        if k == 22:\n            return 1/512\n        if k == 23:\n            return 1/640\n        if k == 24:\n            return 1/768\n        if k == 25:\n            return 1/960\n        if k == 26:\n            return 1/1024\n        if k == 27:\n            return 1/1280\n        if k == 28:\n            return 1/1536\n        if k == 29:\n            return 1/1728\n        if k == 30:\n            return 1/1920\n        if k == 31:\n            return 1/2560\n        if k == 32:\n            return 1/3072\n        if k == 33:\n            return 1/3840\n        if k == 34:\n            return 1/4536\n        if k == 35:\n            return 1/512\n        if k == 36:\n            return 1/5760\n        if k == 37:\n            return 1/64\n        if k == 38:\n            return 1/7168\n        if k == 39:\n            return 1/80\n        if k == 40:\n            return 1/9456\n        if k == 41:\n            return 1/128\n        if k == 42:\n            return 1/16128\n        if k == 43:\n            return 1/192\n        if k == 44:\n            return 1/25258\n        if k == 45:\n            return 1/32\n        if k == 46:\n            return 1/3932\n        if k == 47:\n            return 1/48\n        if k == 48:\n            return 1/57600\n        if k == 49:\n            return 1/128\n        if k == 50:\n            return 1/196608\n        if k == 51:\n            return 1/256\n        if k == 52:\n            return 1/39312\n        if k == 53:\n            return 1/512\n        if k == 54:\n            return 1/58304\n        if k == 55:\n            return 1/64\n        if k == 56:\n            return 1/79808\n        if k == 57:\n            return 1/96\n        if k == 58:\n            return 1/125760\n        if k == 59:\n            return 1/192\n        if k == 60:\n            return 1/257920\n        if k == 61:\n            return 1/384\n        if k == 62:\n            return 1/4752\n        if k == 63:\n            return 1/64\n        if k == 64:\n            return 1/7864\n        if k == 65:\n            return 1/960\n        if k == 66:\n            return 1/123520\n        if k == 67:\n            return 1/192\n        if k == 68:\n            return 1/258320\n        if k == 69:\n            return 1/384\n        if k == 70:\n            return 1/477280\n        if k == 71:\n            return 1/64\n        if k == 72:\n            return 1/7872\n        if k == 73:\n            return 1/96\n        if k == 74:\n            return 1/123680\n        if k == 75:\n            return 1/192\n        if k == 76:\n            return 1/258480\n        if k == 77:\n            return 1/384\n        if k == 78:\n            return 1/477360\n        if k == 79:\n            return 1/64\n        if k == 80:\n            return 1/7936\n        if k == 81:\n            return 1/96\n        if k == 82:\n            return 1/123840\n        if k == 83:\n            return 1/192\n        if k == 84:\n            return 1/258640\n        if k == 85:\n            return 1/384\n        if k == 86:\n            return 1/477440\n        if k == 87:\n            return 1/64\n        if k == 88:\n            return 1/7856\n        if k == 89:\n            return 1/96\n        if k == 90:\n            return 1/123960\n        if k == 91:\n            return 1/192\n        if k == 92:\n            return 1/258880\n        if k == 93:\n            return 1/384\n        if k == 94:\n            return 1/477580\n        if k == 95:\n            return 1/64\n        if k == 96:\n            return 1/78880\n        if k == 97:\n            return 1/96\n        if k == 98:\n            return 1/124060\n        if k == 99:\n            return 1/192\n        if k == 100:\n            return 1/259040\n        if k == 101:\n            return 1/384\n        if k == 102:\n            return 1/477620\n        if k == 103:\n            return 1/64\n        if k == 104:\n            return 1/7892\n        if k == 105:\n            return 1/96\n        if k == 106:\n            return 1/124230\n        if k == 107:\n            return"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 10\\n\"\n) == \"0.145833333333\"\nassert solution(\n    \"3 2\\n\"\n) == \"0.833333333333\"\nassert solution(\n    \"2 2\\n\"\n) == \"0.0\"\nassert solution(\n    \"1 1\\n\"\n) == \"1.0\"\nassert solution(\n    \"2 4\\n\"\n) == \"0.5\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"3 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 10\n''') == '0.145833333333'\nprint(solution(stdin))\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial as f"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('10 10') == '0.833333333333'\nassert solution('10 1') == '0.1'\nassert solution('10 1') == '0.1'\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, N: int, K: int) -> None:\n        self.N = N\n        self.K = K\n        self.dp = [0] * (K + 1)\n\n    def probability_of_snuke_wins(self, stdin: str) -> str:\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        pass\n\n    def test_solution(self) -> None:\n        sol = Solution(10, 10)\n        self.assertEqual(\n            '0.145833333333',\n            sol.probability_of_snuke_wins(\n                '3 10',\n            ),\n        )\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10\") == '0.145833333333'\nassert solution(\"3 10\") == '0.0'\nassert solution(\"5 10\") == '0.833333333333'\nassert solution(\"8 10\") == '0.981481481481'\nassert solution(\"8 10\") == '0.981481481481'\n\"\"\"\n\nimport unittest\nimport math\n\nclass Solution:\n    def solve(self, stdin):\n        n, k = [int(x) for x in stdin.split()]\n        if k == 1:\n            return '0.0'\n        res = 0\n        for i in range(1, n + 1):\n            if math.ceil(math.log2(k)) == math.floor(math.log2(k)):\n                res += 1 / (2 ** i)\n            else:\n                res += 1 / (2 ** i) * k\n            k -= i\n        return str(res)\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self."
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\nstdin = input().strip()\n\nresult = {\n    'SUN': 0,\n    'MON': 1,\n    'TUE': 2,\n    'WED': 3,\n    'THU': 4,\n    'FRI': 5,\n    'SAT': 6\n}\n\nweekday = result[stdin]\nnext_weekday = weekday + 1 if weekday < 6 else 0\n\nprint(next_weekday)"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('SAT') == 1\n\n\"\"\"\nimport sys\n\nassert solution(sys.stdin.readline()) == 1\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\ns = input()"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('SUN') == '1'\nassert solution('MON') == '2'\nassert solution('TUE') == '3'\nassert solution('WED') == '4'\nassert solution('THU') == '5'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == 1\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('SAT') == 1\nassert solution('MON') == 0\nassert solution('THU') == 2\nassert solution('FRI') == 3\nassert solution('WED') == 1\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == 1\n\n\"\"\"\n\nS = stdin.strip()\nday_num = {'SUN': 1, 'MON': 2, 'TUE': 3, 'WED': 4, 'THU': 5, 'FRI': 6, 'SAT': 7}\nweekday = day_num[S]\nnext_weekday = (weekday + 1) % 7\nnext_day = day_num['SUN'] if next_weekday == 0 else next_weekday\nprint(next_day - 1)\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(SAT) == 1\n\"\"\"\n\nS = input()\n\ncount = 0\nwhile S!= \"SUN\":\n    if S == \"TUE\":\n        S = \"WED\"\n    elif S == \"WED\":\n        S = \"THU\"\n    elif S == \"THU\":\n        S = \"FRI\"\n    elif S == \"FRI\":\n        S = \"SAT\"\n    count += 1\nprint(count + 1)\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\nday_list = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"]\nday_day = {'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6, 'SUN': 0}\n\ndays = input()\nnext_day = day_day[days] + 1\nprint(day_list[next_day % 7])\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('SAT') == '1'\nassert solution('SUN') == '0'\nassert solution('MON') == '1'\nassert solution('TUE') == '2'\nassert solution('WED') == '3'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n\"\"\"\n\nfrom typing import List, Dict\nfrom decimal import Decimal\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('r 10 x_2000') == 'x_2001\\nx_2002\\nx_2003\\nx_2004\\nx_2005\\nx_2006\\nx_2007\\nx_2008\\nx_2009\\nx_2010'"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 20\\n\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\nsolution(\"2 10 20\\n\")\n\n\n\n-----4-----\n\nYou are given N strings.\nEvery string contains lowercase Latin letters.\n\nString S1 contains at least one equal consecutive pair of letters.\nString S2 contains at least one equal consecutive pair of letters.\n\nIt is guaranteed that the answer will not exceed 10^9.\n\nWrite a program that finds the sum of lengths of all strings\n\nthat do not contain equal consecutive pairs of letters.\n\nInput\n\nThe first line contains a single integer T (1\u2264T\u22641000) \u2014 the number of test cases.\n\nAfter that, T lines follow.\nEach line contains one string S (1\u2264|S|\u2264100).\n\nOutput\n\nFor each test case, print a single integer \u2014 the sum of lengths of all strings that do not contain equal consecutive pairs of letters.\n\nExample\n\nInput:\n3\nabac\nabcd\nabcdabcd\n\nOutput:\n5\n8\n6\n\n-----5-----\n\nYou are given a set A and N\nnumbers. You have to print all permutations of A,\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n\nsolution(\"5\\n1 3 2 1 4\")\nsolution(\"5\\n1 3 2 1 4\")\nsolution(\"5\\n1 3 2 1 4\")\n\nsolution(\"5\\n1 3 2 1 4\")\nsolution(\"5\\n1 3 2 1 4\")\nsolution(\"5\\n1 3 2 1 4\")\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3 1 1 4') == '5'\nassert solution('1 3 2 1 4') == '4'\nassert solution('4 1 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('5\\n1 3 2 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '5'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 3 1 1 4') == '5'\nassert solution('1 3 2 1 4') == '4'\nassert solution('4 1 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('3\\n4 1 2 3') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\n\nassert solution('5\\n1 3 2 1 4') == '4'\n\nassert solution('3\\n4 1 2') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"0\"\nassert solution(\"5 1 3 1 1 4\") == \"5\"\nassert solution(\"5 1 3 2 1 4\") == \"4\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 3\") == 'YES'\nassert solution(\"100 100 100\") == 'YES'\nassert solution(\"50 49 49\") == 'NO'\nassert solution(\"10 30 20\") == 'YES'\nassert solution(\"1 1000000000 1000000000\") == 'YES'\n\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"NO\"\nassert solution(\"100 100 100\") == \"YES\"\nassert solution(\"50 49 49\") == \"NO\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\\n\") == \"1 2 3\\nYES\"\nassert solution(\"1 2 3\\n100 100 100\\n\") == \"1 2 3\\nYES\\n1 1 1\"\nassert solution(\"1 2 3\\n2 2 3\\n\") == \"1 2 3\\nYES\\n1 1 1\"\nassert solution(\"1 2 3\\n100 100 100\\n2 2 3\\n\") == \"1 2 3\\nNO\\nNO\"\nassert solution(\"1 2 3\\n100 100 100\\n2 2 3\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'YES'\n'''\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\n\n\"\"\"\nSolution:\n\nt = int(input())\nfor _ in range(t):\n    x, y, z = map(int, input().split())\n    a, b, c = x, y, z\n    if x == y:\n        if x == z:\n            print('NO')\n            continue\n        else:\n            a, b, c = x, z, y\n    elif x == z:\n        if x == y:\n            print('NO')\n            continue\n        else:\n            a, b, c = z, y, x\n    else:\n        a, b, c = y, x, z\n    print(a, b, c)\n\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    x, y, z = map(int, input().split())\n    print('YES') if x == max(x, y, z) else print('NO')\n    print(max(x, y, z), min(x, y, z), min(x, y, z))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"NO\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n\"\nassert solution(\"3 2 2\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"NO\\nNO\\nNO\\n1 1 1000000000\\n\"\nassert solution(\"3 1 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n\"\nassert solution(\"1 1 1\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n\"\nassert solution(\"3 1 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\\n\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nfreq = {}\nfor num in a:\n    freq[num] = freq.get(num, 0) + 1\n\nleft = k\nanswer = 0\nfor key, val in freq.items():\n    if key <= left:\n        answer += val\n        left -= key\n\nprint(answer)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2''') == '4'\nassert solution('''5 1 4\n4 2 3 4 1''') == '1'\nassert solution('''5 3 3\n1 2 3 1 1''') == '5'\nassert solution('''5 4 5\n1 2 3 1 1''') == '1'\nassert solution('''5 5 4\n1 2 3 1 1''') == '2'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\n\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\n\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6\") == '4'\nassert solution(\"5 1 4\") == '1'\nassert solution(\"5 3 3\") == '5'\n\"\"\"\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nd = dict()\nfor i in range(n):\n    if k >= a[i]:\n        if i not in d:\n            d[i] = [a[i]]\n        else:\n            d[i].append(a[i])\n\nans = 0\nwhile d:\n    temp = dict()\n    for i in d:\n        if len(d[i]) == 1:\n            ans += 1\n            if i not in temp:\n                temp[i] = d[i][0]\n            else:\n                temp[i] += d[i][0]\n            del d[i]\n        else:\n            d[i].pop(0)\n            if i not in temp:\n                temp[i] = d[i][0]\n            else:\n                temp[i] += d[i][0]\n    d = temp\n\nprint(ans)"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\ns = map(int, stdin.readline().split())"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\nprint(\"Success\")\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\nassert solution(\"5 1 4\\n4 2 3 4 1\") == '1'\nassert solution(\"5 3 3\\n1 2 3 1 1\") == '5'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\n\"\"\"\n\nfrom typing import List\n\nn, k = map(int, input().split())\ns = input()\nc = list(map(chr, range(97, 97 + k)))\n\nans = 0\nfor i in range(n):\n    j = i + 1\n    while j < n and s[j] in c:\n        j += 1\n    ans += j - i\n\nprint(ans)"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\n\"\"\"\nfrom collections import defaultdict\n\nn, k = [int(x) for x in stdin.split()]\ns = stdin[:n]\nl = [chr(ord('a') + i) for i in range(k)]\n\nd = defaultdict(lambda: 0)\n\nfor x in s:\n    for l_ in l:\n        d[x + l_] += 1\n\nprint(sum([v for v in d.values()]))\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\nchars = set(list(input().split())[-1].split())\n\nchars = list(chars)[:k]\n\nnums = (n * (n + 1) // 2)"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\"\"\"\nimport re\nfrom collections import Counter"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == 2\nassert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\nassert solution(\"a\") == 1\nassert solution(\"b\") == 0"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 2\nabacaba\na b''') == '12'\nassert solution('''10 3\nsadfaasdda\nf a d''') == '21'\nassert solution('''7 1\naaaaaaa\nb''') == '0'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacaba') == 12\nassert solution('aaaaaaa') == 0\n\"\"\"\n\nimport string\n\nn, k = map(int, input().split())\ns = input().replace(' ', '')\n\nletters = input().replace(' ', '')\nletters = set(letters)"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"abba\") == 4\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"asd\") == 3\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n1 2 3 -1 -2\") == \"-1\"\nassert solution(\"4\\n6\\n1 2 3 -1 -2\") == \"6\"\nassert solution(\"4\\n6\\n1 2 3 -1 -2\") == \"6\"\n\nassert solution(\"5\\n5\\n1 2 3 -1 -2\") == \"2\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"1\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"3\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n6\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"3\\n-2\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_0) == test_0_answer\nassert solution(test_1) == test_1_answer\nassert solution(test_2) == test_2_answer\nassert solution(test_3) == test_3_answer\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"1\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"4\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\"\"\") == \"\"\"2\n-1\n6\n-2999999997\"\"\"\nprint('Passed')"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import List, Dict"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3\\n'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 5\n1 2\n2 3\n3 5\n4 3\n1 5\"\"\") == \"\"\"3 5\n2 1\n3 2\n3 4\"\"\"\nassert solution(\"\"\"4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\"\"\") == \"\"\"4 1\n1 2\n1 3\"\"\"\nassert solution(\"\"\"8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\"\"\") == \"\"\"3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\"\"\"\nassert solution(\"\"\"8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\"\"\") == \"\"\"3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'\nassert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n') == '3 5\\n2 1\\n3 2\\n3 4\\n'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '4 1\\n1 2\\n1 3\\n'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\\n'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\") == \"3 2\"\nassert solution(\"1 2\\n2 3\\n3 5\") == \"3 5\"\nassert solution(\"1 2\\n2 3\\n3 5\\n4 3\") == \"3 2\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 1\") == \"1 2\"\n\nassert solution(\"1 2\\n2 3\\n3 4\\n4 1\\n1 5\") == \"3 5\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('5') == '40'\nassert solution('499993') == '41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n5\\n499993') == '0\\n40\\n41664916690999888'"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5') == '0'\nassert solution('499993') == '40'\n\nassert solution('1') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n499993') == '40'\n\"\"\"\n\nfrom math import factorial\n\nclass Solution:\n    def moves(self, n):\n        return (factorial(n) - 1)"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n499993') == '40\\n41664916690999888'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1') == '0'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\") == \"1\"\nassert solution(\"5\\n499993\") == \"40\"\n\"\"\"\n\n\nimport sys\nfrom math import sqrt\nfrom collections import deque\nfrom typing import Deque, List, Tuple\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('499993') == '40'\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"499993\") == \"40\"\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"499993\") == \"40\"\nassert solution(\"5\") == \"41664916690999888\"\n\n\n----\n1\n499993\n\n499993\n499993\n\n3\n1\n499993\n\n0\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n499993\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nres = [-1] * n\nd = [0] * n\n\nfor i in range(n):\n    d[i] = abs(a[i] - i)\n\np = 0\nwhile p < n:\n    if p == 0 or d[p] == 0:\n        res[p] = d[p]\n        p += 1\n        continue\n    # k = p + 1\n    # while k < n and res[k] == -1:\n    #     if a[k] % 2!= a[p] % 2:\n    #         res[k] = res[p] + d[k]\n    #         p = k\n    #         break\n    #     k += 1\n    # else:\n    #     res[p] = -1\n    if res[p] == -1:\n        p += 1\n        continue\n    for k in range(p + 1, n):\n        if res[k] == -1:\n            continue\n        if a[k] % 2!= a[p] % 2:\n            res[k] = min(res[p] + d[k], res[k])\n\nprint(' '.join(map(str, res)))\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10\n4 5 7 6 7 5 4 4 6 4''') == '''1 1 1 2 -1 1 1 3 1 1'''\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\nassert solution('2 4 6 7 4 5 2 3') == '-1 1 1 2 3 3'\nassert solution('10 5 7 6 7 5 4 4 6 4') == '-1 -1 -1 -1 1 2 3 3'\nassert solution('3 4 5 7 6 7 5 4 4 6 4') == '-1 -1 -1 -1 -1 1 2 3 3'\n\n'''"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\"\"\"\n\nfrom typing import List\n\nimport unittest\n\n\nclass Solution:\n    \"\"\"Class to implement solution\"\"\"\n\n    def solve(self, n: int, a: List[int]) -> List[int]:\n        \"\"\"\n        calculate parity of elements in array and then check the difference of\n        even and odd positions\n        \"\"\"\n        diffs = [0] * n\n        for i, v in enumerate(a):\n            if i + v < n:\n                diffs[i + v] += 1\n            if i - v >= 0:\n                diffs[i - v] += 1\n        diffs = [val % 2 for val in diffs]\n        return diffs\n\n\nclass TestSolution(unittest.TestCase):\n    \"\"\"Class to test solution\"\"\"\n\n    def test_solution_01(self):\n        \"\"\"Test solve function\"\"\"\n        test_cases = [\n            {\n                \"input\": (\"4 5 7 6 7 5 4 4 6 4\",),\n                \"output\": (1, 1, 1, 2, -1, 1, 1, 3, 1, 1),\n            }\n        ]\n        for test_case in test_cases:\n            self.assertEqual(Solution().solve(*test_case[\"input\"]), test_case[\"output\"])\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == test_result\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nodd_even = {1: 0, 0: 1}\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"7 3\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"12345\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"7\") == \"YES\"\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('64') == '2 4 8'\nassert solution('97') == '3 5 823'\nassert solution('12345') == 'YES'"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\nprint(solution(\"64\\n32\\n97\\n2\\n12345\"))\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4') == 'NO'\nassert solution('3\\n5\\n6\\n7\\n8') == 'YES'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('64') == '2 4 8'\nassert solution('32') == 'NO'\nassert solution('97') == '3 5 823'\nassert solution('2') == 'YES'\nassert solution('12345') == 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345\\n') == 'YES\\n2 4 8'\nassert solution('64\\n32\\n97\\n2\\n12345\\n')!= 'NO\\n2 4 8'\nassert solution('64\\n32\\n97\\n2\\n12345\\n')!= 'YES\\n3 5 823'\nassert solution('64\\n32\\n97\\n2\\n12345\\n')!= 'YES\\n3 5 823'\nassert solution('64\\n32\\n97\\n2\\n12345\\n')!= 'YES\\n3 5 823'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\\n\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 1\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbbb\") == 2\nassert solution(\"bbbbb\") == 2\nassert solution(\"bbbb\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ababab\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == 2\n\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\nprint(solution(\"abba\"))\nprint(solution(\"ababab\"))\nprint(solution(\"aa\"))\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"aa\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\n\nassert solution(\"ababab\") == 0\n\nassert solution(\"aaaa\") == 0\n\nassert solution(\"ba\") == 1\n\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()\ncount_a = 0\ncount_b = 0\nresult = 0\nfor i in s:\n    if i == \"a\":\n        count_a += 1\n    else:\n        count_b += 1\nresult = count_a if count_a > count_b else count_b\n\nprint(result)\nprint(s)\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aab') == 'aba'\nassert solution('abb') == 'abba'\nassert solution('abba') == 'abba'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"aaaaaaaaaaaa\") == 10"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"ba\") == 1\n\nassert solution(\"abbababbabbababbabbb\") == 5\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"abba\"\n) == \"2\"\nassert solution(\n\"ababab\"\n) == \"0\"\nassert solution(\n\"aabbbbb\"\n) == \"4\"\nassert solution(\n\"aabb\"\n) == \"1\"\nassert solution(\n\"aa\"\n) == \"1\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 2\\n1 4\\n2 3\") == \"15\"\nassert solution(\"3\\n1 1\\n2 0\\n2 0\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == '15'\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n0 0') == '2'\nassert solution('2 2\\n1 1') == '0'\nassert solution('2 2\\n2 2') == '0'\nassert solution('2 2\\n1 0') == '1'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 4\\n2 3\") == \"15\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\") == \"2\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nprint(solution(\"3 1\"))\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(r\"1\\n2\\n3\") == \"2\"\nassert solution(r\"1\\n3\\n2\") == \"2\"\nassert solution(r\"1\\n2\\n1\") == \"3\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nprint(solution(\"3 1\"))"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 3 3\") == \"2\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '1.000000000000'\nassert solution('9\\n') == '4.000000000000'\nassert solution('6\\n') == '3.000000000000'\n\nprint('PASSED')\n\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == \"1.000000000000\"\n\n3. \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 5, \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443. \u041a\u043e\u043d\u0446\u043e\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u044e\u0431\u043e\u0435 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043b\u0438\u0431\u043e \u0447\u0438\u0441\u043b\u043e 0 (\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u0442 \u0447\u0438\u0441\u043b\u0430 5). \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\nSample Input 1:\n\n5\n\nSample Output 1:\n\n1\n\nSample Input 2:\n\n-7\n\nSample Output 2:\n\n0\n\nSample Input 3:\n\n0\n\nSample Output 3:\n\n0\n\nn = int(input())\nwhile n > 0:\n    n = n - 1\n    if n == 0:\n        print(0)\n    else:\n        print(1)\n\n4. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 8 (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e). \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u044b\u043b\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043e \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 1 \u0434\u043e 8, \u0438 \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 8.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input 1:\n\n1234567\n\nSample Output 1:\n\n7\n\nSample Input 2:\n\n77777\n\nSample Output 2:\n\n7\n\nSample Input 3:\n\n0000\n\nSample Output 3:\n\n0\n\na = input()\nb = 0\nfor i in range(len(a)):\n    if '1' <= a[i] <= '8':\n        b += 1\nprint(b)\n\n5. \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f (1 + 1/2 + 1/3 +... + 1/n) - ln(n).\n\n\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n, (n \u2264 1000)n (n \u2264 1000).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n3\n\nSample Output 1:\n\n0.26386184\n\nSample Input 2:\n\n5\n\nSample Output 2:\n\n0.277778\n\nSample Input 3:\n\n1\n\nSample Output 3:\n\n0.0"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == '2.000000000000'\nassert solution(3) == '1.000000000000'\nassert solution(5) == '4.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == '1.000000000000'\nprint(solution(3))"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0.8 1 1.2\") == \"1.000000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == '1.000000000000'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nstdin = '3\\n1\\n1\\n1.2'\nexpected = '1.000000000000'\nassert solution(stdin) == expected\n\nstdin = '3\\n1\\n1\\n1.2'\nexpected = '1.000000000000'\nassert solution(stdin) == expected\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Hello World\\n\"\nassert solution(\"2\") == \"2+1=3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Hello World\\n'\nassert solution('2') == '3\\n'\nassert solution('A') == 'A\\n'\nassert solution('B') == 'B\\n'\nassert solution('A1') == 'Hello World\\n'\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Hello World'\nassert solution('1') == 'Hello World'\nassert solution('2') == '3'\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n') == 'Hello World'\nassert solution('2\\n2\\n1\\n2\\n') == '3\\n3\\n1\\n4\\n'\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 'Hello World'\nassert solution('2\\nA\\nB\\n') == '3'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3333'\nassert solution('4 4') == '4444'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"4 4\") == \"4444\"\nassert solution(\"9 9\") == \"9999\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\na, b = input().strip().split(' ')\nsolution(a, b)\n\n\"\"\"\n\nfrom typing import List\nimport unittest\nimport sys\nimport string\nimport copy"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3333\"\nprint(\"Cool!\")\n\n\"\"\"\n\n\"\"\"\nSolution:\n1. Convert each string to integer.\n2. Use builtin sorted() function to compare.\n3. If either of them is equal, just return the first one.\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\n-------\n\nTest.assert_equals(solution(\"4 3\"), \"3333\")\nTest.assert_equals(solution(\"4 2\"), \"44\")\nTest.assert_equals(solution(\"5 5\"), \"55\")\nTest.assert_equals(solution(\"5 9\"), \"595\")\nTest."
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3333\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n\na, b = map(int, input().split())\nprint(str(a)*b + str(b)*a)\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3333'\nassert solution('4 3') == '3333'\nassert solution('1 1') == '11'\nassert solution('1 1') == '11'\nassert solution('1 1') == '11'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\nassert solution('b') == 'c'\nassert solution('z') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"b\"\n\nassert solution(\"z\") == \" \"\n\nassert solution(\"C\") == \"D\"\n\nassert solution(\"J\") == \"K\"\n\nassert solution(\"V\") == \"W\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A) == B\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\nassert solution('x') == 'z'\nassert solution('c') == 'd'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"b\") == \"c\"\nassert solution(\"z\") == \"a\"\nassert solution(\"p\") == \"q\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'b'\nassert solution('z') == 'A'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"c\") == \"d\"\nassert solution(\"z\") == \"a\"\nassert solution(\"A\") == \"B\"\nassert solution(\"Z\") == \"A\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'b'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('order', 'atc') == 'atcoder'\nassert solution('a', 'ac') == 'aca'\nassert solution('python', 'is') == 'thonis'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"order atc\") == \"atcorder\"\n\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nassert solution(\"atc oder\") == \"atcoder\"\n\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"\") == \"\"\nassert solution(\"abc\", \"\") == \"\"\nassert solution(\"\", \"abc\") == \"\"\nassert solution(\"abc\", \"def\") == \"abcdef\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oder\", \"atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nS = input()\nT = input()\nresult = T + S\nprint(result)"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oeder atc') == 'atcoder'\n'''\n\n'''\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"0\"\nassert solution(\"2 1\") == \"0\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\") == \"0\"\nassert solution(\"2\\n1000000 1000000\") == \"1000000\"\nassert solution(\"6\\n100010 010110\") == \"101010\"\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 2 4 6 3\") == \"0\"\nassert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"1 5 7 8 2\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 5 7 8 2\n\"\"\") == '0'\nassert solution(\"\"\"\n6\n5 1 2 4 6 3\n\"\"\") == '0'\nassert solution(\"\"\"\n2\n1000000 1000000\n\"\"\") == '1000000'\n\nimport os\nimport collections\nimport sys\nimport re\nimport math\nimport itertools\nfrom copy import deepcopy\n\n\nclass TextFile(object):\n    def __init__(self, filename=None, mode='r'):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n\n    def __enter__(self):\n        if isinstance(self.filename, str):\n            self.file = open(self.filename, self.mode)\n        else:\n            self.file = self.filename\n        return self.file\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self.file:\n            self.file.close()\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 7 8 2\\n\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 7 8 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '0'\nassert solution('1 2 3 4 5 6') == '0'\nassert solution('1 1000000000') == '10000000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\nassert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"6 5 2 4 1 3\\n\") == \"0\"\nassert solution(\"1 1000000000 1000000000\\n\") == \"1\"\nassert solution(\"1 10 200 300\\n\") == \"1\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 4 6 3') == '0'\nassert solution('6 5 4 3 2 1') == '1000000'\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 3 3\\n7 10 50 12 1 8\") == \"5\"\n\nassert solution(\"1 1 100 99\\n100\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == 5\nassert solution(\"1 1 100 99\\n100\\n\") == 1\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\\n\") == 6\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(solution(input()))\nprint(solution(str(input())))\n\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\nassert solution('7 4 2 1\\n1 3 5 4 2 7 6') == '6'\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3 1\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 2 3 3\n1 3 5 4 2 7 6''') == '6'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '0'\nassert solution('4 2 3\\n7 10 50 12 1 8') == '1'\n\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == 5\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 100 99') == '1'\n\"\"\"\n\nfrom itertools import groupby\nfrom functools import reduce"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n\n_, a, b, k = [int(x) for x in stdin.readline().split()]\nh = [int(x) for x in stdin.readline().split()]\n\nh = h + h\n\ndp = [[0 for j in range(len(h) - i)] for i in range(len(h))]\n\nfor i in range(len(h)):\n    dp[i][i] = a * h[i]\n\nfor i in range(len(h) - 1, -1, -1):\n    for j in range(len(h) - i - 1, -1, -1):\n        dp[i][j] = max(dp[i][j], dp[i][j + 1] + (k + 1) * b)\n\nprint(dp[0][0])\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 1 2 3\\n\") == \"0\\n0 1 2 3\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"3\", \"Too high!\"\nassert solution(\"4 2\\n1 2 3 4\") == \"0\", \"Too low!\"\nassert solution(\"4 4\\n1 2 3 4\") == \"1\", \"Too low!\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"2\", \"Too low!\"\nassert solution(\"5 6\\n1 2 3 4 5 6\") == \"2\", \"Too high!\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"7 4\\n3 2 0 6 10 12 1 18\") == \"7\"\nassert solution(\"8 5\\n3 2 0 6 10 12 1 18 2\") == \"6\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4\\n') == '0\\n1 2 3 4'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n0 1\\n') == '0\\n0 1'\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2 0 6 10 12\") == \"0\"\nassert solution(\"6 3 0 6 10 12\") == \"3\"\nassert solution(\"6 3 0 6 10 12\") == \"3\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"2 3\\n0 1 2\") == \"0\\n0 1 1\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"10 5\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\nassert solution(\"100 20\\n2 3 5 7 9 11\") == \"1\\n2 3 5 7 9 11\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n0 1 2 3\\n\") == '0\\n0 1 2 4'\nassert solution(\"6 3\\n0 1 2 3\\n\") == '0\\n0 1 2 4'"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 0 6 10 12\") == \"3\"\nassert solution(\"3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2 0 6 10 12\") == \"0\"\nassert solution(\"5 3 0 6 10 12\") == \"3\"\nassert solution(\"6 3 0 6 10 12\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n') == 1\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == 20\n\"\"\"\n\nfrom math import ceil\nfrom typing import List\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == solution(test_input_2)\nassert solution(test_input_1) == 8\nassert solution(test_input_2) == 20\n\nprint('Hooray!')\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 2 1 1 4 3 2 1 5 3 2 4 1 5 4 3 2 5 1 3 2 5 3 2 5 1 4 5 4 2 3 5 5 4 2 3 3 5 4 3 5 3 5 1 5 1 2 1 5 3 2 3 3 5 5 4 1 3 4 2 5 3 2 4 5 4 3 2 1 2 3 3 5 3 5 2 1 1 1 2 2 1 4 4 4 1 5 5 1 2 1 1 1 4 4 2 1 4 4 1 2 4 2 1 1 3 3 3 4 1 5 2 5 1 2 1 4 1 4 2 1 1 4 1 2 3 3 3 2 4 4 3 2 1 3 3 2 4 2 1 3 2 4 3 2 5 5 2 4 1 4 2 5 2 3 3 2 5 4 3 2 3 2 5 2 2 1 1 4 2 4 3 5 3 1 5 3 4 3 5 4 4 2 1 5 4 4 5 5 3 5 2 1 5 2 2 2 5 1 1 1 5 2 3 1 5 3 1 2 2 4 5 3 5 3 1 2 1 1 2 3 1 3 1 5 1 2 1 3 2 2 1 1 4 1 2 1 1 4 2 2 1 1 1 1 3 1 4 5 3 5 1 1 1 1 1 3 5 2 2 1 1 1 1 1 1 2 2 1 1 2 5 2 3 2 1 3 4 2 2 1 2 1 1 4 3 3 2 2 2 4 1 3 2 4 2 2 1 3 2 5 3 4 3 2 1 4 5 5 1 2 3 2 3 1 2 5 1 4 4 2 1 2 1 5 2 4 1 4 5 3 2 2 1 1 2 1 1 1 4 1 5 1 1 2 1 1 1 4 1 2 1 1 2 2 1 1 1 3 1 4 1 5 1 5 5 4 1 3 2 2 3 2 1 1 2 1 3 3 5 5 3 5 5 4 4 1 1 5 1 4 1 1 5 1 5 1 5 1 5 2 3 1 1 4 3 5 5 2 3 3 3 3 5 5 5 2 3 5 5 4 3 4 1 2 1 2 1 2 3 1 3 3 3 2 2 1 1 5 1 1 2 3 3 1 1 2 2 5 2 1 1 1 2 2 2 4 1 2 5 5 2 4 1 3 3 1 4 3 5 5 2 1 1 5 1 1 4 1 2 1 4 4 1 1 5 5 1 5 1 1 4 1 1 1 4 1 2 1 1 2 2 1 1 4 2 5 1 1 3 2 2 4 2 2 1 4 5 1 1 1 1 1 1 1 4 2 3 1 1 4 2 2 1 1 2 1 2 1 4 3 3 1 1 2 5 1 1 1 1 1 1 1 5 1 2 1 1 4 1 1 1 1 1 1 1 5 1 2 2 1 1 1 1 1 1 1 5 5 2 1 2 3 1 2 1 1 1 5 1 2 1 2 1 2 3 2 1 2 1 1 1 4 1 3 1 5 2 1 1 1 2 1 1 4 1 2 1 1 2 2 3 1 1 2 5 1 4 1 2 1 1 1 5 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\nassert solution('') == ''\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\nassert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n') == '20'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES'\nassert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n1 1 10 10\") == 'YES'\nassert solution(\"4\\n2\\n10 5 2 10 1 1 2 5\") == 'YES'\nassert solution(\"4\\n2\\n10 5 1 10 5 1 1 1\") == 'YES'\nassert solution(\"4\\n2\\n1 1 1 1 1 1 1 1\") == 'NO'\nassert solution(\"4\\n1\\n10000 10000 10000 10000\") == 'NO'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 1\") == \"YES\"\nassert solution
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1\n1 1 1\n2\n10 5 2 10 1 1 2 5\n3\n10 5 1 10 5 1 1 1\n4\n1 1 1 1 1 1 1 1\n5\n10 10 10 10 10 10 10 10\n''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1\\n1 2 3 4\\n2\\n10 5 1 10 5 1 1 1\\n2\\n10 5 1 10 5 1 1 1') == 'YES'\nassert solution('4\\n1\\n1 1 1 1 1\\n2\\n10 5 2 10 5 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n1\\n1\\n1\\n1') == 'YES'\nassert solution('4\\n1\\n10\\n10\\n10\\n10') == 'NO'\nassert solution('4\\n1\\n2\\n2\\n2\\n2') == 'YES'\nassert solution('4\\n1\\n2\\n2\\n2\\n2') == 'YES'\nassert solution('4\\n1\\n2\\n3\\n3\\n3') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'YES'\nassert solution('1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'NO'\nassert solution('1\\n10000 10000 10000 10000') == 'YES'\nassert solution('1\\n1 1 1 1 1 1 1 1') == 'NO'\nassert solution('1\\n10000 10000 10000 10000') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\\n1 1 10 10\") == 'YES'\nassert solution(\"5\\n1\\n1 1 10 10\") == 'NO'\nassert solution(\"6\\n1\\n1 1 10 10\") == 'NO'\nassert solution(\"7\\n1\\n1 1 10 10\") == 'NO'\nassert solution(\"5\\n1\\n1 1 1 1 1\") == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 6\\n1 1 1 1 1 1 1 1 1\") == 'NO'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\n\"\"\"\n\nimport heapq\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == '3'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 1\\n2 1 1\\n3 1 2\\n1 3 2\\n2 3 3\\n3 4 2\\n4 4 3\\n1 4 2') == '6'\nassert solution('6 6 8\\n1 6 4\\n6 1 1\\n2 3 3\\n2 4 2\\n3 5 3\\n3 6 9\\n4 5 2\\n5 3 1\\n5 4 8\\n4 2 6\\n4 3 6') == '5'\nassert solution('2 4 1\\n1 2 4\\n1 2 3\\n2 1 2') == '3'\n\nprint(solution(input()))"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 2\\n2 3 3\\n1 2 10\\n1 4 8\\n3 1 4\\n1 5 10\\n4 3 10\\n1 3 2\\n3 2 10\\n3 3 5\\n3 4 10\\n1 5 10\\n2 3 1\\n2 1 2\\n1 5 4\\n5 1 5\\n3 5 10\\n1 5 5\\n5 4 10\\n3 5 10\\n1 4 10\\n5 2 10\\n3 2 10\\n1 3 2\\n3 2 3\\n5 2 3\\n1 5 2\\n3 5 2\\n5 4 3\\n2 3 2\\n3 4 4\\n2 1 3\\n3 1 3\\n1 4 4\\n4 2 3\\n3 2 3\\n2 5 3\\n2 2 3\\n3 5 5\\n1 3 1\\n3 4 5\\n3 2 3\\n1 4 10\\n1 2 2\\n1 5 2\\n1 1 10\\n5 4 10\\n4 5 10\\n4 2 3\\n5 1 10\\n3 1 5\\n3 4 10\\n3 5 10\\n5 2 10\\n2 2 3\\n1 4 2\\n1 1 1\\n2 1 10\\n1 3 2\\n2 2 2\\n3 5 2\\n3 2 3\\n2 5 5\\n2 3 1\\n3 4 4\\n3 5 5\\n3 2 3\\n4 2 3\\n1 1 10\\n2 1 1\\n1 5 4\\n5 1 5\\n5 2 5\\n5 1 5\\n2 5 1\\n3 5 10\\n1 5 5\\n5 4 10\\n5 5 10\\n4 5 10\\n5 3 10\\n5 4 10\\n5 5 10\\n5 4 10\\n2 5 1\\n1 3 1\\n1 4 10\\n1 2 2\\n1 3 2\\n5 4 3\\n1 4 4\\n5 2 3\\n5 4 3\\n5 3 10\\n3 4 5\\n2 5 10\\n3 5 10\\n3 5 10\\n1 4 4\\n2 2 2\\n3 5 5\\n1 2 5\\n5 3 5\\n3 1 5\\n1 4 10\\n3 4 5\\n1 4 10\\n5 2 10\\n2 5 1\\n5 4 10\\n3 5 10\\n4 5 10\\n1 5 10\\n5 3 10\\n5 3 10\\n5 2 10\\n1 5 5\\n5 3 5\\n3 5 5\\n2 5 2\\n3 1 3\\n2 5 3\\n3 1 3\\n1 5 10\\n2 5 10\\n3 5 10\\n5 1 5\\n3 2 3\\n3 1 3\\n3 1 3\\n5 4 10\\n5 4 10\\n4 2 3\\n1 3 10\\n2 2 2\\n4 1 3\\n1 1 1\\n1 1 1\\n2 1 10\\n1 2 2\\n1 3 2\\n1 4 10\\n2 5 1\\n3 1 5\\n4 1 10\\n1 3 2\\n1 4 10\\n3 1 10\\n1 3 2\\n1 1 2\\n2 2 10\\n1 1 2\\n1 4 10\\n5 1 5\\n3 2 3\\n2 5 10\\n2 2 2\\n1 1 2\\n5 3 10\\n3 4 5\\n1 5 10\\n5 1 5\\n5 2 5\\n5 1 5\\n5 1 5\\n5 4 10\\n4 2 3\\n2 5 10\\n4 1 10\\n5 4 10\\n3 2 3\\n1 3 1\\n1 1 2\\n2 1 10\\n3 1 2\\n3 1 2\\n3 2 10\\n3 1 10\\n4 1 10\\n1 2 2\\n5 3 10\\n1 3 2\\n1 1 2\\n2 1 10\\n1 3 2\\n2 5 2\\n1 3 1\\n1 5 10\\n1 3 1\\n5 5 10\\n3 4 5\\n5 2 3\\n1 2 5\\n5 1 5\\n1 1 2\\n5 5 10\\n5 2 10\\n2 3 1\\n2 1 2\\n3 1 10\\n2 1 2\\n5 4 10\\n2 1 2\\n3 4 10\\n4 2 3\\n3 1 10\\n1 1 10\\n3 1 10\\n1 3 2\\n2 3 2\\n3 2 10\\n5 4 10\\n5 4 10\\n5 3 10\\n5 2 10\\n3 4 10\\n4 5 10\\n5 5 10\\n5 5 10\\n5 3 10\\n3 4 10\\n4 5 10\\n1 4 10\\n5 4 10\\n3 2 10\\n3 2 10\\n1 3 1\\n1 2 2\\n1 1 2\\n1 1 2\\n2 3 10\\n1 1 2\\n1 3 1\\n2 3 10\\n1 3 10\\n1 3 1\\n1 3 1\\n1 2 2\\n1 1 2\\n1 1 2\\n2 1 10\\n1 2 2\\n1 1 2\\n1 2 2\\n1 2 2\\n1 1 2\\n1 2 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\n\"\"\"\n\nimport math\nimport sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 7)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nn, m, k = map(int, input().split())\n\nG = defaultdict(list)\nfor _ in range(m):\n    a, b, c = map(int, input().split())\n    G[a].append((b, c))\n    G[b].append((a, c))\n\ndp = [[None] * n for _ in range(k)]\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 3\") == \"3\"\nassert solution(\"6 15 18\") == \"9\"\nassert solution(\"7 15 18\") == \"7\"\nassert solution(\"5 5 3\") == \"2\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5') == '3'\nassert solution('7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\nassert solution('1\\n2\\n2\\n1') == '2'"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 3\\n2 3 1\\n5 2 9\\n1 3 1\\n3 5 7\\n5 4 5\\n6 2 2\\n7 1 6\\n6 5 10\\n1 6 5\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n\") == \"3\"\n\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\n\"\"\"\n\n\n\nclass Graph:\n    def __init__(self, vertexes, edges):\n        self.vertexes = vertexes\n        self.edges = edges\n\n\n    def __generate_matrix(self):\n        matrix = [[0] * self.vertexes for _ in range(self.vertexes)]\n        for vertex, edges in enumerate(self.edges):\n            for edge in edges:\n                matrix[vertex][edge[0] - 1] = edge[2]\n                matrix[edge[0] - 1][vertex] = edge[2]\n        return matrix\n\n\n    def __create_vertices(self):\n        return [Vertex(index + 1) for index in range(self.vertexes)]\n\n\n    def __get_sorted_shortest_paths(self):\n        matrix = self.__generate_matrix()\n        vertices = self.__create_vertices()\n        d = [sum(row) for row in matrix]\n        vertices_copy = vertices.copy()\n        for i in range(len(vertices)):\n            for j in range(len(vertices)):\n                if d[i] > 0 and d[j] > 0:\n                    vertices_copy[j].shortest_paths[i] = min(d[i], d[j])\n                else:\n                    vertices_copy[j].shortest_paths[i] = float(\"inf\")\n            d[i] = -1\n        for i in range(len(vertices)):\n            d[i] = -1\n            for j in range(len(vertices)):\n                if i == j:\n                    vertices_copy[j].shortest_paths[i] = 0\n                elif matrix[i][j] == 0:\n                    vertices_copy[j].shortest_paths[i] = float(\"inf\")\n                else:\n                    vertices_copy[j].shortest_paths[i] = matrix[i][j]\n        vertices_copy.sort(reverse=True, key=lambda vertex: vertex.shortest_paths[0])\n        for vertex in vertices_copy:\n            vertex.shortest_paths.pop(0)\n        return vertices_copy\n\n\n    def __compute_shortest_paths(self):\n        shortest_paths = []\n        vertexes = self.__get_sorted_shortest_paths()\n        for i in range(len(vertexes)):\n            for j in range(len(vertexes)):\n                if i!= j:\n                    shortest_paths.append(vertexes[i].shortest_paths[j])\n        return shortest_paths\n\n\n    def get_k_shortest_path(self, k):\n        shortest_paths = self.__compute_shortest_paths()\n        return shortest_paths[k - 1]\n\n\nclass Vertex:\n    def __init__(self, number):\n        self.number = number\n        self.shortest_paths = [float(\"inf\") for _ in range(number)]\n\n\n    def __str__(self):\n        return str(self.number)\n\n\n    def __repr__(self):\n        return str(self.number)\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n1 1 3 4 2\"\n) == \"3 1\\n1 1 1 1 1\"\n\nassert solution(\n    \"6\\n1 5 12 13 2 15\"\n) == \"7 2\\n2 2 1 1 2 1\"\n\nassert solution(\n    \"10\\n1 2 5 129 185 581 1041 1909 1580 8150\"\n) == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 1 3 4 2''') == '3 1'\nassert solution('''6\n1 5 12 13 2 15''') == '7 2'\nassert solution('''10\n1 2 5 129 185 581 1041 1909 1580 8150''') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nstudents = list(map(int, sys.stdin.readline().split()))\n\ntotal_diversity = 0\nteams = []\n\nfor i in range(n):\n    teams.append(1)\n\nfor i in range(n):\n    best = 0\n    for j in range(n):\n        if i!= j and students[i] < students[j]:\n            best = j\n    total_diversity += students[i] - students[best]\n    teams[i] += 1\n\nprint(total_diversity, n - max(teams))\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"11 2\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1 1\") == \"11 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\nimport sys\nassert len(sys.argv) == 2\nassert solution(sys.argv[1])\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n5009\n7\n9876\n10000\n10''') == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n'\nprint('Success')\n\n''' \n3\n7\n8\n9\n''' == solution('''3\n7\n8\n9\n''')\nprint('Success')\n\n''' \n2\n9\n9\n''' == solution('''2\n9\n9\n''')\nprint('Success')\n\n''' \n2\n7\n2\n''' == solution('''2\n7\n2\n''')\nprint('Success')\n\n''' \n3\n7\n2\n''' == solution('''3\n7\n2\n''')\nprint('Success')\n\n''' \n1\n7\n''' == solution('''1\n7\n''')\nprint('Success')\n\n''' \n1\n5009\n''' == solution('''1\n5009\n''')\nprint('Success')\n\n''' \n0\n''' == solution('''0\n''')\nprint('Success')\n\n''' \n0\n''' == solution('''0\n''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')\n\n''' \n''' == solution('''''')\nprint('Success')"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '1\\n2\\n3\\n4\\n'\nassert solution('4\\n4\\n3\\n2\\n1\\n') == '4\\n1\\n2\\n3\\n'\nassert solution('3\\n9\\n10\\n') == '1\\n1\\n1\\n'\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5009\\n7\\n9876\\n10000\\n10\\n') == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10'\n\"\"\"\n\n\n\nfrom typing import List\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\") == \"1\"\n\n\"\"\"\n\n\n\n\n\nimport sys\nimport os\nimport io\nimport random\nimport itertools"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5009') == 2\nassert solution('2\\n7') == 1\nassert solution('1\\n9876') == 1\nassert solution('1\\n10000') == 1\nassert solution('1\\n10') == 1\n\nprint('Success')\n\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"5\\n100\\n10\\n999\\n10\\n1111\\n\") == \"2\\n100 10\\n1\\n999 10\\n2\\n1111\\n\"\n\"\"\"\n\nfrom itertools import groupby\nfrom typing import List, Optional\nfrom collections import Counter, deque\nfrom math import floor, log10\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n6\\n5\\n9\\n10\\n1') == '1'\nassert solution('9\\n7\\n5\\n10\\n8\\n3') == '3'\nassert solution('8\\n7\\n6\\n5\\n4\\n3\\n2') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == '1'\n\nassert solution('7\\n6\\n5\\n9\\n10\\n1') == '1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data_1) == test_result_1\n\"\"\"\n\n\"\"\"\nSolution:\n\nTest cases are small.\nEach test case is a number.\nThen we go through the input and create a sum of numbers that is equal to the test case.\nIf the sum can be equal to the test case, the test case is round.\nIf the sum cannot be equal to the test case, we go through the list of numbers that are not round, and find the ones that are closest to the test case.\nIf there are several such numbers, we choose the smallest of them.\nThe smallest number of summands is equal to the test case, and its sum is equal to the test case.\n\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nprint(solution(\"5009\\n7\\n9876\\n10000\\n10\"))"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\nassert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"3 3 3\"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\") == \"2 3 3 2 1 3\"\n\n-----Problem-----\n\n\u0412\u0430\u043c \u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e n. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043e\u0441\u0442\u0430\u0442\u043a\u043e\u0432 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0432 \u0432\u0438\u0434\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0434\u043d\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0430 \u0437\u0430\u043f\u044f\u0442\u043e\u0439 \u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0431\u0435\u043b.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u0434\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c n = 10, \u0432\u0430\u043c \u0434\u0430\u043d\u044b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f:\n\n1, 5, 10\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043e\u0441\u0442\u0430\u0442\u043a\u043e\u0432 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0442\u043e\u043c \u0436\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u0434\u0430\u043d\u044b \u043d\u0430 \u0432\u0445\u043e\u0434\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438:\n\n5\n10\n\u0421\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043b\u044e\u0431\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 print \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\nprint(a, b,..., sep='\\n')\n\u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e reduce \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f functools.\n\n\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0443\u044e \u0441\u0442\u0430\u0442\u044c\u044e \u0441 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f\u043c\u0438:\nhttps://habr.com/ru/post/332572/\n\n\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0441\u0442\u0430\u0442\u044c\u044e \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438:\nhttps://www.coursera.org/lecture/python/solutions/H9Ufj\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\"\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n\"\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1 1') == '1 1 1 1 1'\n'''"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '3 3 3'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '2 3 3 2 1 3'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '2 2 2 2'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 1 3') == '3 3 3'\nassert solution('6 4 1 3 5 2') == '3 3 3'\nassert solution('6 4 1 3 5 2') == '2 3 3 2 1 3'\nassert solution('6 4 1 3 5 2') == '2 3 3 2 1 3'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport unittest\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n1 1 1 1\") == \"2\"\nassert solution(\"4\\n1 2 3 4\\n2\\n1 2 2\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n\nn, *a = [int(x) for x in stdin.readlines()]\n\nd = {x: a[x - 1] for x in range(1, n + 1)}\n\nimport functools\n\nmin_price = functools.reduce(min, d.values())\n\nprint(min_price)\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '2 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n2\\n1 1 2\\n2\\n1 2 1\\n3\\n1 1 1 1\") == \"4\"\n\"\"\"\n\nimport sys\n\n_, N = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\nnew_arr = []\nfor i in range(N):\n    new_arr.append(arr[i])\n    for j in range(i+1, N):\n        new_arr.append(arr[i] + arr[j])\nnew_arr.sort()\nprint(new_arr[0])\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1\n''') == '3\\n2\\n1'\nassert solution('''\n3\n1\n1\n2\n''') == '1'\nassert solution('''\n1\n2\n''') == '2'\n\nprint(solution(input()))"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n5\n1 2 3 4 5\n3\n1 2 2\n4\n1 1 1 1''') == '3\\n2\\n1'\n\nassert solution('''2\n4\n1 1 1 1\n4\n1 1 1 1''') == '2\\n1'\n\nassert solution('''1\n4\n1 1 1 1''') == '1\\n1'\n\nassert solution('''1\n3\n1 1 1''') == '1\\n1'\n\nassert solution('''1\n5\n1 1 1 1 1''') == '1\\n1'"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\nprint(\"Well done!\")"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3\\n2\\n1'\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 2 5 4 3 7 1 2 5\\n1 2\\n4 3\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\") == \"5 4 0 5 3 3 9 0 2 5\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_one) == test_output_one\nassert solution(test_input_two) == test_output_two\n\"\"\"\n\nimport io\nfrom itertools import combinations"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n-----\n\"\"\"\n\"\"\"\n1. \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c\n\n\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0443\u0437\u044b\u0440\u044c\u043a\u043e\u043c.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c, \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443 \u043c\u0435\u0441\u0442\u0443. \u041f\u0440\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430.\n\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0447\u0438\u0441\u043b\u0443 \u043e\u0442 1 \u0434\u043e 10 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.\n\n\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f: 1\u2264n\u22641011\u2264n\u22641011, 1\u2264k\u226410101\u2264k\u226410101, 0\u2264ri\u2264101010\u2264ri\u2264101010\n\n\u0412\u0432\u043e\u0434:\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0442\u0435\u0441\u0442\u0435. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u043e\u0442 1 \u0434\u043e 1011. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432 \u0442\u043e\u043c \u0436\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0447\u0442\u043e \u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0442\u0435\u0441\u0442\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 k \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u0430\u0440\u0443 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 \u0442\u0435\u0441\u0442\u0435.\n\n\u0412\u044b\u0432\u043e\u0434:\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443 \u0438 \u0437\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0435\u0433\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u043e\u043c\u0435\u0440 2. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u043d\u0435\u0442, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043b\u043e -1.\n\nSample Input 1:\n\n3 4\n1 2\n3 5\n4 6\n1 2\n3 5\n4 6\n1 2\n4 5\n2 3\n\nSample Output 1:\n\n2\n\nSample Input 2:\n\n3 5\n1 2\n3 4\n1 2\n4 5\n3 4\n2 1\n\nSample Output 2:\n\n3\n\"\"\"\n\nfrom collections import deque\n\nn, m = map(int, input().split())\nqueue = deque()\n\nfor i in range(n):\n    queue.append(list(map(int, input().split())))\n\nfor i in range(m):\n    x, y = map(int, input().split())\n    if (queue[x - 1][1] < queue[y - 1][1]) or (queue[x - 1][1] == queue[y - 1][1] and queue[x - 1][0] < queue[y - 1][0]):\n        print(-1)\n    else:\n        print(x - 1)"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n-----Explanation-----\n\nWe have $n$ programmers and $k$ pairs of the programmers, which are in a quarrel.\n\nFor each pair of programmers, we want to count the number of programmers, for which the programmer $i$ can be a mentor.\n\nWe can see that if there is no other pair of programmers in a quarrel with $i$, then the $i$-th programmer can be a mentor. If there are any other pairs of programmers in a quarrel with $i$, then the $i$-th programmer can be mentor only of those programmers, for which his skill is strictly greater than the skill of the programmer in the other pair. If there are not such pairs of programmers, then there is no such $i$-th programmer can be mentor.\n\nWe can find all the pairs of programmers in a quarrel, since for each pair we have two strings of integers, which define the skill of the programmers. The strings contain only digits, and the skill of the $i$-th programmer is $r_i$. The $i$-th pair is $(x, y)$, then all the pairs of this kind are $(x, y)$, $(y, x)$, $(x, y)$ and $(y, x)$.\n\nWe can turn this problem into the problem of finding all pairs of integers in a sorted sequence with the property that all pairs of integers in a sequence are disjoint. If we sort the sequence of integers and find the pairs of integers which are disjoint, then the problem of finding mentors of the $i$-th programmer has the same solution.\n\nWe have two arrays, one with all the integers from the first sequence of integers, and the second array with all the integers from the second sequence of integers. We can find the disjoint pairs by comparing the elements of these two arrays. The $i$-th pair of integers is $(x_i, y_i)$, then we can find the index of the smallest element of the array, which is $x_i$ (if the sequence is sorted in ascending order), and the index of the biggest element of the array, which is $y_i$ (if the sequence is sorted in descending order). We can sort the arrays with the comparison between the indices of the elements of the arrays.\n\nFor the sequence of integers with $n$ elements, the sorting will take O(n log n). For each pair, we need to compare two integers, which takes O(1). The total time complexity is O(n log n + n) = O(n log n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of a sorted sequence, in which the sorting algorithm will take O(n log n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of the worst sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of a sorted sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of the worst sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of a sorted sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of the worst sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of a sorted sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of the worst sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of a sorted sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of the worst sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of a sorted sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n + n) = O(n log n).\n\nThe worst case of the sorting algorithm will be the case of the worst sequence, in which the sorting algorithm will take O(n) = O(n).\n\nSo, the total time complexity is O(n log n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3') == '0 0 1 2'\nassert solution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6') == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\n\"\"\"\n\nimport itertools\n\nn, k = map(int, stdin.readline().strip().split())\np = list(map(int, stdin.readline().strip().split()))\nq = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 2 1 2\") == \"NO\"\nassert solution(\"1 3 2\") == \"abc\"\n\nassert solution(\"3 2\") == \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"1 2 3\") == \"abb\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"1 2 3\", \"1 3 2\"]) == \"abb\"\nassert solution([\"1 2 3\", \"2 3 1\"]) == \"abb\"\nassert solution([\"1 2 3\", \"2 3 1\"]) == \"abb\"\nassert solution([\"1 2 3\", \"3 2 1\"]) == \"NO\"\nassert solution([\"1 2 3\", \"3 1 2\"]) == \"NO\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 3 2\\n1 2 3\") == \"NO\"\nassert solution(\"3 2\\n1 2 3\\n1 3 2\\n1 2 3\") == \"NO\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('1133') == 'NO'\nassert solution('11123') == 'NO'\nassert solution('111234') == 'NO'\nassert solution('123431') == 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n2 3 1\\n1 3 2\") == \"YES\\nbaa\"\nassert solution(\"3 2\\n1 3 2\\n1 2 3\") == \"NO\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == 'abb'\n\n\n-----Explanation-----\nsolution(\"3 2\\n1 2 3\\n1 3 2\") = abb\n\nIt's possible to write the string abb with the permutations p and q.\n\nFor each i from 1 to 2 the property s[p_i] <= s[p_{i + 1}] and s[q_i] <= s[q_{i + 1}] is satisfied.\n\n-----Constraints-----\n\n2 \u2264 n \u2264 10^5\n1 \u2264 k \u2264 26\nn, k, p_i, q_i are integers between 1 and n.\np_i and q_i are different from each other.\n\n\n\n\"\"\"\nimport unittest\n\nfrom typing import List, Set\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\n\n\"\"\"\n\nimport sys\n\nn = int(input())\n\ndurabilities = list(map(int, input().split()))\n\nassert len(durabilities) == n\nassert all([1 <= dur <= 10000 for dur in durabilities])\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\\n1 3 2\"\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\\n2 1 4 3\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\\n6 1 3 5 2 4\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == '2 1'\nassert solution(3) == '2 1 3'\nassert solution(4) == '2 1 4 3'\nassert solution(6) == '2 1 3 5 2 4'\nassert solution(7) == '2 1 4 3 6 2 5'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 20 10\") == \"43\"\nassert solution(\"4 10 10 10\") == \"64\"\nassert solution(\"6 5 4 5 4 5\") == \"69\"\nassert solution(\"2 1\") == \"3\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n20 10 20\\n') == '43'\nassert solution('4\\n10 10 10 10\\n') == '64'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69'\nassert solution('2\\n1 4\\n') == '3'\n\n\n\"\"\"\nimport sys\n\nsys.stdin = open(\"./input.txt\")"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n10 20 10\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"69\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\n\"\"\"\n\nfrom collections import Counter, deque, namedtuple\nfrom itertools import combinations\nfrom math import log2"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 20\") == \"43\"\n\"\"\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"69\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 5 1 3\\n') == '3'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nclass Node:\n    def __init__(self, value: int) -> None:\n        self.value = value\n        self.next = None\n        self.prev = None"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\nassert solution('2\\n1 2') == '0'\nassert solution('3\\n1 2 3') == '0'\nassert solution('4\\n1 2 3 4') == '0'\nassert solution('5\\n4 2 5 1 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\nprint('Test success.')\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"4 3 3 3\") == \"0\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nN = int(input())\n\nA = [int(i) for i in input().split()]\n\ncounts = {}\nfor a in A:\n    if a in counts:\n        counts[a] += 1\n    else:\n        counts[a] = 1\n\ngood_list = []\nfor a in counts.keys():\n    if counts[a] == a:\n        good_list.append(a)\n\ngood_list.sort()\n\nans = 0\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n4 2 1 5 3\n''') == '3'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\n\"\"\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\nassert solution('3\\n3 3 3 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nprint(\"Passed\")"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2 3 4 5') == '1'"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 1 2 3 4''') == '1'\nassert solution('''0 1 2 3 5''') == '2'\nassert solution('''0 2 3 4 5''') == '3'\nassert solution('''1 2 3 4 5''') == '4'\nassert solution('''2 3 4 5 6''') == '5'\n'''\n\nfrom typing import List"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2 3 4 5') == '1'"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\n\"\"\"\nProblem 1\n\nYou have a treasure map of some rows, and the treasure map is not a binary grid. That means there are some \"O\"s in the treasure map, which are \"0\"s.\n\nNow, we may choose any rows to go from left to right, and we should choose the one with the maximum number of \"O\"s to go from left to right.\n\nWhat is the maximum number of \"O\"s we can go from left to right?\n\n-----Constraints-----\n 1 \u2264 ROWS \u2264 100\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint a single integer denoting the maximum number of \"O\"s we can go from left to right.\n\n-----Sample Input-----\nThere is no input for this problem.\n\n-----Sample Output-----\nThere is no output for this problem.\n\"\"\"\n\n\"\"\"\nProblem 2\n\nConsider an array of size N, where each index i contains an integer, denoting the height of a vertical bar located at index i.\n\nFind the height of the tallest possible triangle that can be formed using the bars with index 0, 1 and N - 1.\n\nNote: The height of the triangle formed from two bars (index i and index j) is the smaller of the two bars' heights.\n\n-----Constraints-----\n 1 \u2264 N \u2264 10^5\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint a single integer denoting the height of the tallest possible triangle.\n\n-----Sample Input-----\nThere is no input for this problem.\n\n-----Sample Output-----\nThere is no output for this problem.\n\"\"\"\n\n\"\"\"\nProblem 3\n\nA car has to travel from one location to another.\nThe car can move either along a horizontal or vertical road.\nInitially, the car is at the location from where it has to travel.\nThe locations of the roads are given as NxN matrix.\nThe value of a cell is the length of the road that you can travel along that road.\nThe car can travel on only one road at a time.\nHowever, you can travel on a road if there is enough space in front of you.\nYour goal is to find the shortest path from location A to location B.\n\nNote: The road lengths for all locations are given in an NxN matrix called map,\nwhere map[i][j] contains the length of the road that goes from location A to location B along vertical line i and horizontal line j.\nYou can start at location A.\nThe car must travel from location A to location B.\n\n-----Constraints-----\n 1 \u2264 N \u2264 10^5\n 1 \u2264 map[i][j] \u2264 10^5\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint a single integer denoting the length of the shortest path that the car can travel.\n\n-----Sample Input-----\nThere is no input for this problem.\n\n-----Sample Output-----\nThere is no output for this problem.\n\"\"\"\n\n\"\"\"\nProblem 4\n\nThe line of the parallel lines, defined by point P and Q, is parallel to the line passing through Q.\n\nFind the intersection point of the line passing through P and Q and the line of the parallel lines.\n\n-----Constraints-----\n -10^5 \u2264 Px, Py \u2264 10^5\n -10^5 \u2264 Qx, Qy \u2264 10^5\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint two integers denoting the coordinates of the intersection point of the line passing through P and Q and the line of the parallel lines.\n\n-----Sample Input-----\nThere is no input for this problem.\n\n-----Sample Output-----\nThere is no output for this problem.\n\"\"\"\n\n\"\"\"\nProblem 5\n\nLet's call a positive integer a \"sophisticated number\" if it is divisible by 7 or it contains the digits 0, 1, 4, or 7.\n\nFor example:\n100, 122, 858, and 479 are sophisticated numbers.\n1812, 1900, and 6789 are not sophisticated numbers.\nFind the sum of all the sophisticated numbers between 1 and 10^7.\n\n-----Constraints-----\n -10^7 \u2264 number \u2264 10^7\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint a single integer denoting the sum of all the sophisticated numbers between 1 and 10^7.\n\n-----Sample Input-----\nThere is no input for this problem.\n\n-----Sample Output-----\nThere is no output for this problem.\n\"\"\"\n\n\"\"\"\nProblem 6\n\nConsider the sequence u_n = (u(n) = 1) + (u(n) = u(n - 1) + u(n - 2) + u(n - 3)).\nYou are given:\n0 \u2264 u(0) \u2264 2\n1 \u2264 u(1) \u2264 3\n2 \u2264 u(2) \u2264 5\n3 \u2264 u(3) \u2264 7\n4 \u2264 u(4) \u2264 11\n5 \u2264 u(5) \u2264 19\n6 \u2264 u(6) \u2264 37\n7 \u2264 u(7) \u2264 61\n8 \u2264 u(8) \u2264 93\n9 \u2264 u(9) \u2264 123\n10 \u2264 u(10) \u2264 199\nFind u(n) for all n.\n\n-----Constraints-----\n -10^6 \u2264 u(n) \u2264 10^6\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint u(n) for all n.\n\n-----Sample Input-----\nThere is no input for this problem.\n\n-----Sample Output-----\nThere is no output for this problem.\n\"\"\"\n\n\"\"\"\nProblem 7\n\nA single cycle on a certain number n consists of the following sequence of numbers:\n\n1, 2, 3,..., n - 1, 0, 1, 2,..., n - 2\nOr, the sequence 1, 2, 3,..., n - 2, 0, 1, 2,..., n - 1, n, 1, 2,..., n - 2, 0\n\nA single cycle of length n consists of n - 1 cycles, each single cycle of length n.\nA single cycle on a certain number n consists of the same sequence of numbers as a single cycle of length n - 1.\nA single cycle of length n on a certain number n consists of n - 1 single cycles, each of length n - 1.\nIn other words, a single cycle on a certain number n consists of n - 1 single cycles, each single cycle of length n.\n\nThe number of single cycles in a cycle of length n on a certain number n is called the order of n.\n\nGiven n, find the order of n.\n\n-----Constraints-----\n -10^6 \u2264 n \u2264 10^6\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint a single integer denoting the order of n.\n\n-----Sample Input-----\nThere is no input for this problem.\n\n-----Sample Output-----\nThere is no output for this problem.\n\"\"\"\n\n\"\"\"\nProblem 8\n\nConsider the sequence u(n) = 2^(2n + 1) - 1.\n\nYou are given:\n0 \u2264 u(0) \u2264 100\n0 \u2264 u(1) \u2264 1000\n1 \u2264 u(2) \u2264 2000\n2 \u2264 u(3) \u2264 4000\n3 \u2264 u(4) \u2264 10000\n4 \u2264 u(5) \u2264 40000\n5 \u2264 u(6) \u2264 100000\n6 \u2264 u(7) \u2264 200000\n7 \u2264 u(8) \u2264 400000\n8 \u2264 u(9) \u2264 1000000\n9 \u2264 u(10) \u2264 2000000\nFind u(n) for all n.\n\n-----Constraints-----\n -10^6 \u2264 u(n) \u2264 10^6\n\n-----Input-----\nThere is no input for this problem.\n\n-----Output-----\nPrint u(n) for all"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == '0'\nassert solution('5 5\\n') == '0'\nassert solution('1 1\\n') == '1'\nassert solution('1 10\\n') == '10'\n\n---\nThis approach is not scalable. This solution is also not optimal.\nIt is a brute force approach with a lot of redundant code.\n\nFix this solution and write an optimised one."
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\n\nH, W = input().split()"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '0'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/56d3533c22a1883a0900003e/train/python\n\nChocolate Problem\n\nGiven a rectangular chocolate bar, the goal is to cut the chocolate bar into 3 pieces such that each piece is as big as possible. \nBut when cutting, a new piece should not be larger than the largest piece.\n\nThe size of the three pieces are given in an array: arr = [h1, w1, h2, w2, h3, w3].\n\nReturn the maximum area of the pieces in a list [h1, w1, h2, w2, h3, w3].\n\nNote: The three pieces can be of different sizes.\n\nExample\n\nFor arr = [1, 2, 2, 1], the output should be\nchocolateBar(arr) = [1, 2, 2, 2].\n\nThe maximal size of the pieces are 1, 2, and 3.\n\nFor arr = [1, 1, 2, 3], the output should be\nchocolateBar(arr) = [1, 1, 2, 2].\n\nThe maximal size of the pieces are 1, 2, and 3.\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n') == 0\n\n'''\n\nimport sys"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n') == '0'\nassert solution('2 3\\n') == '1'\nassert solution('3 5\\n') == '0'\n\n---Problem link---\nhttps://codeforces.com/contest/1558/problem/A\n\"\"\"\n\nh, w = map(int, input().split())"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    3 5\n    \"\"\"\n) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n1 10 100\n\"\"\") == \"Yes\"\n\"\"\"\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 4 3 2') == 'No'\nassert solution('5\\n1 2 3 4 5') == 'Yes'\nassert solution('5\\n5 2 3 4 1') == 'No'\nassert solution('5\\n5 1 3 4 2') == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 10 100') == 'Yes'\nassert solution('3 10 100 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 100\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"2 10 100\") == \"No\"\nassert solution(\"1 100 10\") == \"No\"\nassert solution(\"2 100 10\") == \"Yes\"\nassert solution(\"2 10 1\") == \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\nassert solution(\"5\\n5 5 5 5 5\\n\") == \"No\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split(' ')))\n\nlast = 1\nfor i in range(1, len(a)):\n    if a[i - 1] * a[i] % 4 == 0:\n        last = i\n\nprint(\"Yes\") if last == n - 1 else print(\"No\")\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nprint(solution(\"1 10 100\"))"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 10 100') == 'Yes'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abac') == 'Yes'\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"zyx\") == \"zyx\"\nassert solution(\"xyz\") == \"xyz\"\nassert solution(\"abcxyz\") == \"abczyx\"\nassert solution(\"abcdefg\") == \"abgfedc\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"xya\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\ns\nt\n''') == 'Yes'\nassert solution('''\natcoder\natlas\n''') == 'No'\nassert solution('''\nabc\ncba\n''') == 'Yes'\nassert solution('''\nabcdefghijklmnopqrstuvwxyz\nzyxwvutsrqponmlkjihgfedcba\n''') == 'No'\nassert solution('''\nabc\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\n\n-----Explanation-----\ns = 'yx'\nt = 'axy'\n\nsorted(s) = ['y', 'x']\nsorted(t) = ['a', 'y', 'x']\n\ny < x\na < y\n\naxy = yxa\n\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"xyz\") == \"No\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Yes'\nassert solution('a') == 'Yes'\nassert solution('ab') == 'Yes'\nassert solution('aaa') == 'Yes'\nassert solution('aab') == 'Yes'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n\nA, B, C = map(int, input().split())\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 10\") == \"YES\"\nassert solution(\"5 1 10\") == \"NO\"\nassert solution(\"4 1 4\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"7 3 3\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 5 2\") == \"NO\"\nassert solution(\"1 10 1\") == \"YES\"\nassert solution(\"1 10 2\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin_str) == stdout_str\n\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\" or solution(input()) == \"NO\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\nimport sys\n\nA, B, C = [int(i) for i in sys.stdin.readline().split()]\nsum = 0\nfor i in range(A, B + 1):\n    if i % A == 0:\n        sum += i\n        if sum % B == 0:\n            print('YES')\n            break\nelse:\n    print('NO')\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n\nimport sys\n\nA, B, C = [int(i) for i in sys.stdin.readline().strip().split()]\nprint('YES' if C % B >= A and C % B - A < B else 'NO')\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 2) == 1\nassert solution(2, 3) == 3\nassert solution(1, 2) == 0\nassert solution(3, 3) == 9\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n''') == '1'\n\nassert solution('''\n10 8\n''') == '27'\n\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n') == '1'\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"6 10\") == 12\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n2 2\n\"\"\"\n) == '1'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"5 5\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '1'\n\"\"\"\n\nimport math\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nprint(math.floor(n * m))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"2 3\") == 5\nassert solution(\"10 10\") == 25\nassert solution(\"4 3\") == 12\nassert solution(\"9 8\") == 36\n\n-----\n\n1. read the input\n2. find out the area\n3. return the result\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 4\") == \"12\"\n\"\"\"\n\nA, B = map(int, input().split())\nprint((A - B) * (A - B) + (A - B) * (A - 2 * B))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"10 20\") == 81\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 3 2\\n7 3 6') == '4'\nassert solution('13 3 1\\n7 3 6') == '3'\nassert solution('1 10 5\\n10 10 10\\n1 10 5') == '3'\nassert solution('1 10 5\\n10 10 10\\n1 10 5') == '3'\nassert solution('1 10 5\\n10 10 10\\n1 10 5') == '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3 1\\n') == '3'\nassert solution('1 1 1\\n') == '1'\nassert solution('1 1 1\\n') == '1'\nassert solution('1 0 1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 3 1') == 3\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 3 1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2\") == \"2\"\n\nassert solution(\"4 2 3\") == \"2\"\n\nassert solution(\"1 1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('1 2 3') == '1'\nassert solution('3 2 1') == '1'\nassert solution('3 1 1') == '1'\nassert solution('1 3 1') == '2'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\") == \"3\"\nassert solution(\"5 5 2\") == \"2\"\nassert solution(\"7 5 3\") == \"2\"\nassert solution(\"10 10 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n') == 2\nassert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n') == 2\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 0\n4 1\n4 3\n0 2\n1 4\n0 3\n3 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 0\n4 1\n4 3\n0 2\n1 4\n0 3\n3 3\n\"\"\") == \"\"\"\n3\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\n-----\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\") == 2\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n\nfrom operator import itemgetter"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == 2\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n0 3\") == 7\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0 3\\n4 5\\n') == '7'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n0 3\\n\") == '7'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3\n0 3\n3 1\n2 3\n0 4''') == '7'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 3\\n') == '7'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n0 3\\n\") == \"7\"\n\"\"\"\n\nn, t = [int(x) for x in stdin.read().split()]\ntimes = [int(x) for x in stdin.read().split()]\n\ntotal_seconds = 0\n\nfor i in range(n):\n    total_seconds += times[i]\n    if i > 0:\n        total_seconds = max(total_seconds, times[i - 1] + times[i] + times[i])\n\ntotal_seconds += t\nprint(total_seconds)\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n0 1 1 2 2 3') == '6'\n\nassert solution('5 3\\n0 1 1 2 2 3') == '4'\n\nassert solution('1 3\\n0 1') == '1'\n\n\"\"\"\n\n\"\"\"\n### Input\n\nThe first line of input contains two numbers n and t separated by a single space.\nThe second line contains n numbers t_1, t_2,..., t_n separated by a single space.\n\n### Output\n\nYou should print a single number - the number of seconds the shower will emit water for.\n\n### Constraints\n\n1 \u2264 n \u2264 2 * 10^5\n0 \u2264 t_i \u2264 10^9\nt_i are unique integers\n\n### Sample Input\n\n5 2\n0 1 1 2 2\n\n### Sample Output\n\n7\n\n\"\"\"\n\n\"\"\"\n### Notes\n\nAt the end of the last minute, the switch is pushed, so the shower still emits water for a total of t seconds.\n\"\"\"\n\n\"\"\"\n## Implementation\n\nInput:\n    n and t\n    n integers t_1, t_2,..., t_n\n\nOutput:\n    x\n\nInitial State:\n    water will be emitted for t seconds\n\nSubproblem:\n    Water emitted so far\n\nSubstates:\n    Pushing the switch\n    Not pushing the switch\n    \nComplexity:\n    Time: O(n)\n    Space: O(1)\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 3\\n4 5\\n\") == \"7\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\n---"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\n\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\nassert solution('2\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n') == '1\\n1'\n\nassert solution('5\\nL 1\\nR 2\\nR 3\\n? 3\\nL 4\\n') == '2\\n2'\n\nassert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n101\\n100\\n100000\\n123\\n115\\n110\\n\") == \"2\"\nassert solution(\"10\\n101\\n100\\n100000\\n123\\n115\\n110\\n\") == \"0\"\nassert solution(\"100\\n100000\\n123\\n115\\n110\\n\") == \"0\"\n\n\"\"\"\n\n\nclass Library:\n    def __init__(self, books_count):\n        self.books_count = books_count\n        self.signup_day = 0\n        self.signup_books = []\n        self.books = []\n        self.books_per_day = 0\n        self.books_per_day_list = []\n        self.books_left = books_count\n        self.books_left_list = []\n\n    def process_query(self, query_type: int, book_id: int):\n        # print(\"Processing query:\", query_type, book_id)\n\n        if query_type == 1:\n            self.signup_books.append(book_id)\n            self.books_per_day += self.books[book_id]\n            self.books_left -= 1\n            self.books_per_day_list.append(self.books_per_day)\n            self.books_left_list.append(self.books_left)\n            # print(\"Books per day:\", self.books_per_day)\n            # print(\"Books left:\", self.books_left)\n\n        elif query_type == 2:\n            self.signup_books.pop(book_id)\n            self.books_per_day -= self.books[book_id]\n            self.books_left += 1\n            self.books_per_day_list.append(self.books_per_day)\n            self.books_left_list.append(self.books_left)\n            # print(\"Books per day:\", self.books_per_day)\n            # print(\"Books left:\", self.books_left)\n\n        elif query_type == 3:\n            self.books_per_day -= self.books[book_id]\n            self.books_per_day_list.append(self.books_per_day)\n            self.books_left_list.append(self.books_left)\n            self.books_left += 1\n            self.signup_books.append(book_id)\n            self.books.append(self.books[book_id])\n            # print(\"Books per day:\", self.books_per_day)\n            # print(\"Books left:\", self.books_left)\n\n        else:\n            self.books_per_day -= self.books[book_id]\n            self.books_per_day_list.append(self.books_per_day)\n            self.books_left_list.append(self.books_left)\n            self.books_left += 1\n            self.signup_books.append(book_id)\n            self.books.append(self.books[book_id])\n            # print(\"Books per day:\", self.books_per_day)\n            # print(\"Books left:\", self.books_left)\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1\\n2\\n3\\n?2\\nL 4\\n?1\\nL 5\\n?1\\n') == '1\\n1\\n2\\n'\n\nassert solution('10\\n100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1\\n'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == '1'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"3\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"3\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"3\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"3\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2\\n'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1\\n'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1\\n1\\n2'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115''') == '0\\n2\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\n4\\n?1\\n5\\n?1\") == \"1\\n1\\n2\"\nassert solution(\"10\\n100\\n100000\\n123\\n101\\n100000\\n123\\n110\\n115\\n?100\\n?100\\n?110\") == \"0\\n2\\n1\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '4\\n0\\n6\\n6\\n-1\\n6\\n72'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\n545\\n546\\n547\\n548"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '0\\n4\\n6\\n6\\n-1\\n6\\n72\\n'\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"9\\n2\\n1\\n3\\n5\\n9\\n13\\n13\\n\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n0\") == \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n11\\n\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n30\\n24\\n1') == '4\\n6\\n6'\nassert solution('2\\n20\\n24\\n1') == '-1\\n4'\nassert solution('1\\n30\\n24\\n1') == '6\\n6'\nassert solution('7\\n1000000000000000000\\n1') == '6\\n72'\nassert solution('5\\n1\\n5\\n3\\n4\\n5') == '0\\n3\\n3\\n2\\n0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n7\n1\n10\n25\n30\n14\n27\n1000000000000000000\n''') == '''\n0\n4\n6\n6\n-1\n6\n72\n'''\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('3') == '0'\nassert solution('2') == '0'\nassert solution('1') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n1\\n4\\n8\\n16\\n32\\n64\") == '4\\n2\\n1\\n4\\n8\\n16\\n32\\n64'\nassert solution(\"6\\n9\\n27\\n81\\n16\\n64\\n256\\n1024\\n512\\n4096\\n1024\\n512\\n2048\\n512\\n1024\\n512\\n2048\\n1024\\n512\\n2048\\n512\\n1024\\n512\\n2048\\n512\\n2048\\n512\\n1024\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512\\n2048\\n512"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4\\n3\\n2\\n1\\n0\\n') == '2\\n1\\n2\\n4\\n5\\n5\\n'\n\nassert solution('4\\n7\\n15\\n30\\n') == '2\\n2\\n2\\n3\\n4\\n'\n\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"4\"\nassert solution(\"25\") == \"6\"\nassert solution(\"30\") == \"6\"\nassert solution(\"14\") == \"6\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 2 1\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\\n11 11\\n2\\n100\") == \"NO\"\nassert solution(\"4\\n1 1 2 1\\n11 11\\n2\\n1\") == \"NO\"\nassert solution(\"4\\n1 1 2 1\\n11 11\\n2\\n100\") == \"NO\"\nassert solution(\"4\\n2 2 2\\n2\\n2\\n2\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1 3') == 'YES'\nassert solution('4 1 2 1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('11 11') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3\\n0 3 2\\n1 2 3 1\\n4\\n0 0 0 0') == 'YES'\nassert solution('1\\n1\\n0 1 1') == 'YES'\nassert solution('1\\n0\\n0 1 1') == 'NO'\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    \n    while True:\n        cur = [0] * n\n        for i, v in enumerate(a):\n            if v == 0:\n                continue\n            \n            if v > 0:\n                cur[i] = v - 1\n            else:\n                cur[i] = abs(v)\n        \n        if max(cur) == 0:\n            break\n        \n        flag = True\n        for i, v in enumerate(cur):\n            if v < 0:\n                flag = False\n                break\n            a[i] = v\n        if flag:\n            break\n    \n    if sum(a) == 0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"2\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n1 1 2 1\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n3 1 2\\n2 2 3') == \"YES\"\nassert solution('3 3 5\\n1 1 1\\n2 2 2\\n3 3 3') == \"NO\"\nassert solution('1 2 2\\n1 2 3') == \"YES\"\nassert solution('1 2 2\\n3 1 3') == \"NO\"\n\n-----Hint-----\n\nThe main idea of the solution is to count the number of heights which are greater than 0. If it is 0, you can clear the field.\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100') == 'YES'\nassert solution('2\\n3\\n1 1 2\\n4\\n1 1 2 1') == 'NO'\n\"\"\"\n\nt = int(stdin.readline())\n\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    stack = []\n    for i in range(n):\n        if a[i] > 0:\n            stack.append(a[i])\n            a[i] = 0\n        while len(stack) > 0 and stack[-1] > 0 and sum(stack) >= n:\n            stack.pop()\n            a[i] -= 1\n        if sum(a) <= 0 and len(stack) == 0:\n            print('YES')\n            break\n    if sum(a) > 0:\n        print('NO')\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\"\"\"\n\nimport sys\n\ntest_cases = int(sys.stdin.readline().strip())\n\nfor i in range(test_cases):\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    a.sort()\n    b.sort()\n\n    if a[0] + b[0] > 1:\n        print(\"NO\")\n        continue\n\n    for j in range(1, n):\n        if a[j] + b[j] > 1:\n            print(\"NO\")\n            break\n        elif a[j] + b[j] < 1:\n            print(\"NO\")\n            break\n        elif a[j] + b[j] == 1:\n            if a[j] == 0:\n                a[j] = 1\n                a[j + 1] = 1\n            else:\n                a[j] = 0\n                a[j + 1] = 0\n\n    if a == [0] * n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\\n4\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n4\\n2 2 2 2\") == \"NO\"\nassert solution(\"3\\n1 2 3\\n4\\n2 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 2 3\\n4\\n2 2 2 2\") == \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"NO\"\n\"\"\"\nfrom typing import List, Any"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abacaba', 'bacabaa') == 4\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"bacabaa\") == \"0\"\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\nassert solution(\"dbacz\") == 0\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\nassert solution(\"a\", \"a\") == 0\n\nassert solution(\"aaab\", \"cbaa\") == 3\nassert solution(\"aaab\", \"cbba\") == 2\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zcabd\") == \"0\"\nassert solution(\"dbacz\") == \"4\"\nassert solution(\"abcab\") == \"2\"\n\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def solution(self, stdin):\n        stringa = Counter(stdin)\n        stringb = Counter(stdin[::-1])\n        \n        numero = 0\n        for k, v in stringa.items():\n            if k in stringb:\n                numero += abs(stringa[k] - stringb[k])\n        return numero // 2"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 4\n\n\"\"\"\n\na, b = map(str, stdin.split())\ncnt = 0\n\nfor i in range(len(a)):\n    if a[i] == b[i]:\n        continue\n    elif b[i] == a[len(a) - i - 1]:\n        cnt += 1\n    elif a[i] == a[len(a) - i - 1]:\n        cnt += 1\n    elif b[i] == b[len(b) - i - 1]:\n        cnt += 1\n    else:\n        cnt += 2\nprint(cnt // 2)"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\nassert solution(\"abc\") == \"0\"\nassert solution(\"abcbab\") == \"3\"\nassert solution(\"abcdef\") == \"3\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\\n\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\") == \"8198\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 5 7\\n\") == \"3\\n\"\nassert solution(\"3\\n1 1 3\\n\") == \"3\\n\"\nassert solution(\"2\\n1 10 5\\n\") == \"6\\n\"\nassert solution(\"2\\n100 1 4\\n\") == \"198\\n\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nprint(solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\"))"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999') == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"5\\n0\\n0\\n5\"\nassert solution(\"2 1 3\") == \"5\\n0\\n0\\n5\"\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n\nprint(solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\"))"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999''') == '8 -198 0 2999999997 1 0 1'\n\nassert solution('''1\n10 1 1''') == '10'\n\nassert solution('''4\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\nassert solution('''1\n1 1 1''') == '1'\nassert solution('''3\n1 1 1\n1 1 1\n1 1 1''') == '0'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2\\n3\\n5') == '4'\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2\\n1') == '3'\nassert solution('5\\n5\\n4') == '5'\nassert solution('6\\n13\\n19') == '9'\nassert solution('8\\n1000000000000000000\\n1000000000000000000') == '1000000000000000000'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\") == '0'\nassert solution(\"6\\n1\") == '0'\nassert solution(\"8\\n1\") == '0'\nassert solution(\"8\\n2\") == '1'\nassert solution(\"8\\n4\") == '3'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n6\\n12\\n13\\n3620\\n10000\\n1000000000000000000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"5\\n2\") == \"3\"\nassert solution(\"6\\n3\") == \"7\"\nassert solution(\"9\\n4\") == \"10\"\nassert solution(\"11\\n5\") == \"14\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n2\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '3'\nassert solution('2\\n3\\n') == '2'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n\"\"\"\nimport sys\n\nassert len(sys.argv) == 2\n_q = int(sys.argv[1])\n\nassert _q <= 500\nassert _q >= 1\n\n_q = str(_q)\n\n_q += '\\n'\nsys.stdin.readline()"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n4\\n6\\n1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"2\\n2\") == \"3\"\nassert solution(\"7\\n22\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n7\\n9\\n') == '5\\n7\\n13\\n'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 8 5 3\") == '70'\nassert solution(\"12 8 8 7 2\") == '77'\nassert solution(\"12343 43 4543 39 123212\") == '177177'\nassert solution(\"1000000000 1000000000 1 1 1\") == '999999999000000000'\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == '999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n10 10 8 5 3\") == 70\nassert solution(\"12 8 8 7 2\") == 77\nassert solution(\"12343 43 4543 39 123212\") == 177777\nassert solution(\"1000000000 1000000000 1 1 1\") == 9999999999\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == 99999999999999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"7077177177999999999000\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '707717727999999999'\nassert solution(\"10 11 2 1 5\\n10 11 9 1 10\") == '10'\n\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    def minOperation(self, a, b, x, y):\n        self.x = x\n        self.y = y\n        self.a = a\n        self.b = b\n        \n        dp = [0] * (y+1)\n        dp[x] = y\n        q = deque()\n        q.append(x)\n        q.append(y)\n        \n        while q:\n            i = q.popleft()\n            for j in range(i+1, min(i+a, y)+1):\n                dp[j] = max(dp[j], dp[j-1])\n            for j in range(i-1, max(0, i-b), -1):\n                dp[j] = max(dp[j], dp[j+1])\n            if i+a < y:\n                q.append(i+a)\n            if i-b >= 0:\n                q.append(i-b)\n        return dp[y]\n\n\n\"\"\"\ndp[i] = max(dp[i-1], dp[i-a])\nq.append(i)\nq.append(i)\nq.append(i)\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    a, b, x, y, n = list(map(int, input().split()))\n    sol = Solution()\n    print(sol.minOperation(a, b, x, y))\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == [70, 77, 177177, 999999999000000000, 9999999999, 55, 10]\n\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8 5 3\") == \"70\"\nassert solution(\"12 343 43 45 43 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\nassert solution(\"10 11 2 1 5\") == \"10\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10 8 5 3\\n'\n        '12 8 8 7 2\\n'\n        '12343 43 4543 39 123212\\n'\n        '1000000000 1000000000 1 1 1\\n'\n        '1000000000 1000000000 1 1 1000000000\\n'\n        '10 11 2 1 5\\n'\n        '10 11 9 1 10') == '7077177177999999999000'\n\nassert solution('1 1 1 1\\n'\n        '1 1 1 1\\n'\n        '1 1 1 1\\n'\n        '1 1 1 1\\n'\n        '1 1 1 1') == '999999999'\n\nassert solution('10 11 2 1 5\\n'\n        '10 11 9 1 10\\n'\n        '1 1 1 1 1') == '55'\n\nassert solution('1 1 1 1\\n'\n        '10 11 2 1 5\\n'\n        '1 1 1 1 1') == '10'\n\n-----Problem-----\n\n\u0414\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 $a$, $b$, $x$ \u0438 $y$. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b $a$ \u0438 $b$, \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u0432 \u043a\u043e\u043d\u0446\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u043e\u0441\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $a+b$ (\u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 $a+b = 43$).\n\n\u041d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c, \u0430 \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0443\u043c\u043d\u043e\u0436\u0430\u0442\u044c \u043d\u0430 $x$ \u0438 $y$ \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435.\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0440\u0442\u0435\u0436 \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0442\u0438\u043f\u0430 int:\n\n\u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 - \u0441\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b $a+b$,\n\u0432\u0442\u043e\u0440\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 - \u0441\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b $a+b \\times x$,\n\u0442\u0440\u0435\u0442\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 - \u0441\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b $a+b \\times x \\times y$,\n\u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 - \u0441\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b $a+b \\times x \\times y \\times z$, \u0433\u0434\u0435 $z$ - \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e.\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0440\u0435\u0448\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u044f\u043c\u0443\u044e, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0432 \u043a\u0430\u043a\u043e\u043c \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0435 \u0437\u0430 \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f $a+b$ \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b $a+b \\times x$ \u0438\u043b\u0438 $a+b \\times x \\times y$.\n\n\u0422\u0430\u043a\u0436\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $a+b$ \u0434\u043b\u044f \u0441\u0443\u043c\u043c\u044b \u0447\u0438\u0441\u0435\u043b $a+b \\times x \\times y$, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $a+b$ \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $x$ \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 $y$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0447\u0435\u0442\u044b\u0440\u0435 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $a$, $b$, $x$ \u0438 $y$.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041a\u043e\u0440\u0442\u0435\u0436 \u0447\u0435\u0442\u044b\u0440\u0451\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0442\u0438\u043f\u0430 int, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0443\u043b\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n10 10 8 5 3\n12 8 8 7 2\n12"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n\") == \"70771772799999000\"\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n10 10 8 5 3\") == \"70\"\nassert solution(\"12 343 43 45 43 39 123212\") == \"177177\"\nassert solution(\"1 000 000 000 0 0\") == \"999999999 000000000\"\nassert solution(\"1 000 000 000 0 0\") == \"999999999 000000000\"\nassert solution(\"10 11 2 1 5\") == \"10\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '7077177279499999'\n\n'''\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('2 1') == '0'\nassert solution('4 5') == '0'\nassert solution('1\\n2\\n3') == ''\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\nassert solution('1 1\\n1 1') == '0'\nassert solution('1 1\\n1 2') == '1'\nassert solution('1 2\\n1 1') == '0'\nassert solution('1 2\\n2 1') == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1'\nassert solution('1 2\\n10 10\\n2 4\\n7 4\\n9 3') == '0'\nassert solution('1 2\\n10 10\\n2 4\\n7 4\\n9 3') == '2'\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '2'\nassert solution('9 3\\n2 4') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n') == '1\\n0\\n2\\n2\\n1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a, b) == answer\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('22\\n9999\\n1\\n777\\n') == '13\\n90\\n1\\n66'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Callable, Final, List\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines\n\n\nclass Digit:\n    def __init__(self, digits: List[str]) -> None:\n        self.digits = digits\n\n    def __repr__(self) -> str:\n        return f\"Digit({self.digits})\"\n\n\nclass Digits:\n    def __init__(self, *args: str) -> None:\n        self.digits = list(args)\n\n    def __repr__(self) -> str:\n        return f\"Digits({self.digits})\"\n\n\n@require(lambda digits: len(digits) > 0)\n@ensure(lambda digits, result: len(result.digits) == len(digits))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\") == 13\nassert solution(\"9999\") == 90\nassert solution(\"1\") == 1\nassert solution(\"777\") == 66\n\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n22\n9999\n1\n777''') == '13 90 1 66'\n\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n22') == '13'\nassert solution('1\\n22\\n') == '13'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint('Test 1 OK')"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\n22\n9999\n1\n777''') == '13 90 1 66'\nprint('Test 1 OK')\n\n-----Tests-----\n\nsolution('''4\n22\n9999\n1\n777''') == '13 90 1 66'\n\nsolution('''3\n22\n999\n1\n777''') == '13 90 1 66'\n\nsolution('''2\n22\n888\n1\n888''') == '13 90 1 66'\n\nsolution('''1\n22\n555\n1\n555''') == '13 90 1 66'\n\nsolution('''1\n22\n555\n1\n555''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n1\n1111''') == '13 90 1 66'\n\nsolution('''1\n1111\n1111\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nassert solution('22\\n9999\\n3\\n777') == '13\\n90\\n1\\n66'\nassert solution('22\\n9999\\n9\\n777') == '13\\n90\\n1\\n66'\nassert solution('22\\n9999\\n777') == '13\\n90\\n1\\n66'\nassert solution('22\\n9999\\n9\\n777') == '13\\n90\\n1\\n66'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\n\nassert solution(\"4\\n1\\n5\\n2 2 2 2 2\") == \"NO\"\n\nassert solution(\"5\\n1\\n5\\n2 2 2 2 2\") == \"NO\"\n\nassert solution(\"5\\n6\\n1 1 1 1 1\\n2\\n2 3\") == \"YES\\n2 1\\n4 0\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"1\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n2 3 1 3 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 6\\n1 2\\n\"\n\nassert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"NO\\n\"\n\nassert solution(\"\"\"\n6\n1 1 2 2 2 1\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\"\n\nassert solution(\"\"\"\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == \"NO\\n\"\n\n\"\"\"\n\nfrom typing import List, Union"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6'\nassert solution('4\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'NO'\nassert solution('4\\n2 2 2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 2'\nassert solution('2\\n5\\n2 3') == 'NO'\nassert solution('1\\n5\\n2 3') == 'YES\\n1 2'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 1 2\n2 2 3\n3 1 2\n\"\"\") == \"YES\\n2 3\\n1 2\"\n\nassert solution(\"\"\"\n2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\"\n\nassert solution(\"\"\"\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\"\nSolution:\n\nk = int(stdin.readline())\nfor _ in range(k):\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().strip().split()]\n    if len(set(a))!= len(a):\n        print(\"NO\")\n        continue\n    s1 = 0\n    s2 = 0\n    for i, v in enumerate(a):\n        if v > 0:\n            s1 += v\n            s2 -= v\n        else:\n            s1 += v\n            s2 += v\n        if abs(s1 - s2) > 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n        print(i + 1, s1)\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(st.splitlines()) == 'YES\\n2 6\\n1 2\\n'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(solution_text) == solution_result\nprint(\"Input:    solution({})\".format(solution_text))\nprint(\"Output:    solution({})\".format(solution_result))\nprint(\"==========================\")\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\n\"\"\"\n\nk = int(stdin.readline())\nsequences = []\nfor i in range(k):\n    sequence = list(map(int, stdin.readline().split()))\n    sequences.append(sequence)\n\nsums = {0}\nfor sequence in sequences:\n    sequence_sum = 0\n    for element in sequence:\n        sequence_sum += element\n        sums.add(sequence_sum)\n\nm = len(sums)\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\""
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\", \"\") == \"\"\nassert solution(\"\", \"2\") == \"2\"\nassert solution(\"4,2,3\", \"1\") == \"5\"\nassert solution(\"3,-1,0,2\", \"3\") == \"6\"\nassert solution(\"2,-3,-1,5,-4\", \"2\") == \"13\"\n\n\"\"\"\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K):\n        A.sort()\n        sum = 0\n        count = 0\n        for i in A:\n            if i < 0:\n                if K > 0:\n                    A[count] = -i\n                    K -= 1\n                else:\n                    sum += i\n            count += 1\n        if K % 2 == 0:\n            return sum\n        else:\n            return sum + A[count - 1]"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3\\n1') == '5'\nassert solution('3 -1 0 2\\n3') == '6'\nassert solution('2 -3 -1 5 -4\\n2') == '13'\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n\"\"\"\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        n = len(A)\n        for i in range(K):\n            A[i] = -A[i]\n        A.sort()\n        return sum(A)\n\"\"\"\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A = sorted(A)\n        n = len(A)\n        for i in range(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n        for i in range(K, n):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n        return sum(A)"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(A = [4,2,3], K = 1) == 5\nassert solution(A = [3,-1,0,2], K = 3) == 6\nassert solution(A = [2,-3,-1,5,-4], K = 2) == 13\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def maxSumAfterPartitioning(self, A: List[int], K: int) -> int:\n        n = len(A)\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = sum(A[i:i + K])\n            if i + K <= n:\n                dp[i] = max(dp[i], sum(A[i:i + K]))\n\n            for j in range(i):\n                dp[i] = max(dp[i], dp[j] + dp[i - j - 1])\n\n        return dp[n - 1]\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == \"5\"\nassert solution(\"3 -1 0 2\") == \"6\"\nassert solution(\"2 -3 -1 5 -4\") == \"13\""
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[4,2,3],1\") == 5\nassert solution(\"[3,-1,0,2],3\") == 6\nassert solution(\"[2,-3,-1,5,-4],2\") == 13"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3\\n1') == 5\nassert solution('3 -1 0 2\\n3') == 6\nassert solution('2 -3 -1 5 -4\\n2') == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(A = [4,2,3], K = 1) == 5\nassert solution(A = [3,-1,0,2], K = 3) == 6\nassert solution(A = [2,-3,-1,5,-4], K = 2) == 13\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        n = len(A)\n        for i in range(min(K, n)):\n            A[i] = -A[i]\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('[4,2,3] 1') == 5\nassert solution('[3,-1,0,2] 3') == 6\nassert solution('[2,-3,-1,5,-4] 2') == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 1\n2 -3 -1 0 2\n\"\"\") == 5\nassert solution(\"\"\"\n3 1\n-1 0 2\n\"\"\") == 6\nassert solution(\"\"\"\n3 2\n-1 0 2\n\"\"\") == 6\nassert solution(\"\"\"\n3 1\n-1 -1 2\n\"\"\") == 3\nassert solution(\"\"\"\n3 1\n0 2 -1\n\"\"\") == 1\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[4,2,3]\") == \"5\"\nassert solution(\"[3,-1,0,2]\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4]\") == \"13\"\n\n\"\"\"\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        A.sort()\n        for i in range(K):\n            if A[i] < 0:\n                A[i] *= -1\n                continue\n            if A[i] == 0:\n                A[i] = 0\n                continue\n            if A[i] % 2 == 1:\n                A[i] = -A[i]\n            else:\n                A[i] = A[i] // 2\n        return sum(A)\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == 'true'\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == 'false'\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == 'true'\nassert solution('1') == 'false'\nassert solution('0') == 'true'\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n\"\"\"\n\n\nimport math\nclass Solution:\n    def canThreePartsEqualSum(self, A: [int]) -> bool:\n        sum_all = sum(A)\n        if sum_all % 3!= 0:\n            return False\n        target = sum_all // 3\n        sum_so_far = 0\n        parts_sum = 0\n        i = 0\n        while i < len(A) and sum_so_far!= target:\n            sum_so_far += A[i]\n            i += 1\n            if sum_so_far == target:\n                parts_sum = 0\n                sum_so_far = 0\n                while i < len(A) and parts_sum!= target:\n                    sum_so_far += A[i]\n                    parts_sum += A[i]\n                    i += 1\n                if sum_so_far == target and parts_sum == target:\n                    return True\n                sum_so_far = 0\n                parts_sum = 0\n        return False\n\n\n\n\nsolution = Solution()\nprint(solution.canThreePartsEqualSum([0,2,1,-6,6,-7,9,1,2,0,1]))\nprint(solution.canThreePartsEqualSum([0,2,1,-6,6,7,9,-1,2,0,1]))\nprint(solution.canThreePartsEqualSum([3,3,6,5,-2,2,5,1,-9,4]))\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0\\n2\\n1\\n-6\\n6\\n-7\\n9\\n1\\n2\\n0\\n1') == 'true'\nassert solution('0\\n2\\n1\\n-6\\n6\\n-7\\n9\\n1\\n2\\n0\\n1') == 'false'\nassert solution('3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4') == 'true'\nassert solution('3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4') == 'false'\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\n\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        s = sum(A)\n        if s % 3:\n            return False\n        else:\n            t = s // 3\n            part = 0\n            for a in A:\n                part += a\n                if part == t:\n                    part = 0\n                    continue\n                elif part > t:\n                    return True\n            return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == False\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == True\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == True\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == False\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == True\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        sumA = sum(A)\n        if sumA % 3:\n            return False\n        third = sumA // 3\n        A = [abs(a) for a in A]\n        if sum(A[:third])!= third or sum(A[third:third * 2])!= third or sum(A[third * 2:])!= third:\n            return False\n        return True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'true'\nassert solution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'false'\nassert solution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'false'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'true'\n\nsolution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == 'false'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == 'true'\n\nsolution(\"0\\n2\\n1\\n-6\\n6\\n7\\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_str) == \"bet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nabcd\\nabcd\\nabcd\\nabcd\") == \"abcd\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n') == 'beet\\nvet\\nbeet and vet'\nassert solution('4\\nabcd\\nbcda\\ndcba\\nacbd\\n') == 'acbd'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\na\\na\\na\\nb') == ['a', 'b']\n\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nhello\") == \"hello\"\nassert solution(\"3\\ngoodbye\") == \"goodbye\"\nassert solution(\"2\\nhell\\nlo\") == \"hello\"\nassert solution(\"1\\nh\") == \"h\"\nassert solution(\"5\\nxyz\\nabc\\n123\\nabc\\nxyz\") == \"xyz\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nbeet\\nvet\\n:\") == \"beet and vet\"\n\n7\nvet\nbeet\nbed\nvet\nbet\nbeet\n\nbeat\nvet\n\nbeet and vet are written on two sheets each, while beat, bed, and bet are written on one vote each. Thus, we should print the strings beet and vet."
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\nassert solution('4\\n') == ''\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) =='vet\\nbeet'\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '7\\n'\n    'beat\\n'\n    ':\\n'\n    'vet\\n'\n    ':\\n'\n    'beet\\n'\n    ':\\n'\n    'bed\\n'\n    ':\\n'\n    'vet\\n'\n    ':\\n'\n    'bet\\n'\n    ':\\n'\n    'beet'\n    ) == 'beet\\nvet'\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\nbeat\\n:beat\\nvet\\n:vet\\nbeet\\n:beet\\nbed\\n:bed\\nbet\\n:bet') == 'beet\\nvet'\nassert solution('2\\nabc\\n:abc\\ndef\\n:def') == 'abc\\ndef'\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\") == '8'\nprint(solution(\"4 8\"))"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\") == \"8\"\nassert solution(\"1 3 2 5\") == \"9\"\nassert solution
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n4 8') == '8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n6 6') == '8'\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == 8\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom functools import lru_cache"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n\") == \"8\"\nprint(\"Check 1: \", solution(\"4 8\\n\"))\nprint(\"Check 2: \", solution(\"3 4\\n\"))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n8\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 4 1\\n2 3 2\") == '4'\nassert solution(\"2\\n1 2\\n2 1\") == '0'\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234 150 100') == '1084'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234\\n150\\n100') == '84'\n\"\"\"\n\nx, a, b = map(int, input().split())\nprint(x - a * b)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234 150 100') == '84'\nprint(solution('1234 150 100'))\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234 150 100') == '1084'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234 150 100') == '1084'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n\nx, a, b = map(int, input().split())\nprint(x - a - b)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"1234\\n\"\n\"150\\n\"\n\"100\\n\"\n) == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n\nx = int(input())\na = int(input())\nb = int(input())\n\nprint(x - (a + b))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n\n\"\"\"\nAlgorithm\n\nCreate a list of all possible arrangements for dogs, monkeys.\nCreate a dictionary to store the arrangements.\nInitialize the dictionary with 0.\nIterate from dog to monkey.\n    Initialize a list of all possible arrangements for next dog or monkey.\n    Check if next dog or next monkey is the same as previous dog or monkey.\n        If so, use previous dog or monkey to create arrangements for next dog or monkey.\n    Check if there are any arrangements for next dog or next monkey.\n        If not, store the current arrangement in dictionary, and move on to next dog or next monkey.\n    Check if current arrangement is new.\n        If so, store the current arrangement in dictionary, and move on to next dog or next monkey.\n    Check if current arrangement is same as previous arrangement.\n        If so, store the current arrangement in dictionary, and move on to next dog or next monkey.\n    Store the current arrangement in dictionary.\n    \n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"4 2\") == \"8\"\nassert solution(\"2 1\") == \"4\"\nassert solution(\"5 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"5 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == 8\nassert solution(\"1 1\") == 1\nassert solution(\"5 4\") == 20\nassert solution(\"3 2\") == 6\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '8'\nassert solution('4 4') == '8'\nassert solution('2 2') == '8'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '8'\n\"\"\"\n\n\nfrom math import factorial\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"2 2\"\"\"\n) == \"\"\"8\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nN, M = map(int, input().split(' '))"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('3 2\\n1 3\\n2 3') == 'POSSIBLE'\nassert solution('3 2\\n1 2\\n2 1') == 'IMPOSSIBLE'\nassert solution('3 3\\n1 2\\n2 3') == 'IMPOSSIBLE'\n\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\") == 'POSSIBLE'\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().strip().split())\n\ng = {}\nfor _ in range(M):\n    i, j = map(int, sys.stdin.readline().strip().split())\n    g[i] = g.get(i, []) + [j]\n\nvisited = set()"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n\") == \"POSSIBLE\"\nassert solution(\"4 2\\n1 2\\n2 3\\n3 4\\n\") == \"IMPOSSIBLE\"\n\"\"\"\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\n\"\"\"\n\nfrom math import gcd\nfrom collections import defaultdict\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n3 4\\n\") == \"POSSIBLE\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 2\\n2 3\\n1 3\") == \"IMPOSSIBLE\"\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'acdr'\nprint(solution('atcoder'))\n\n----"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder') == 'acdr'\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(solution(\"atcoder\"))\n\n'''"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"atcoder\"\n) == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"Teste unit\u00e1rio passou!\")"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"atcoder_sol\") == \"rc_der\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"Successfully passed!\")"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nprint(solution(\"rng gorilla apple\"))\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('rng gorilla apple') == 'YES'\nassert solution('rng gorilla urs') == 'NO'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla aapp\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\nimport sys\n\nfor line in sys.stdin.readlines():\n    print(solution(line))\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''rng gorilla apple''') == 'YES'\nassert solution('''rng monkey banana''') == 'NO'\n\"\"\"\n\na, b, c = map(str, input().split())\nprint(\"YES\" if a[-1] == b[0] and b[-1] == c[0] else \"NO\")\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nassert solution(\"24 36\") == \"LESS\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\nimport sys"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('36 24') == 'GREATER'\nassert solution('36 24') == 'GREATER'\nassert solution('36 24') == 'GREATER'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('36\\n24\\n') == 'GREATER'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('36\\n24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == '2'\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '2'\n\n'''\n5\nbanana\napple\nlemon\ncherry\ngrape\n''' == '5'\n\nassert solution('''\n3\napple\norange\napple\n1\ngrape\n''') == '2'\n\nassert solution('''\n5\nbanana\napple\nlemon\ncherry\ngrape\n''') == '5'\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\n---\nTheory\n\nThe number of ways to earn money is the number of ways to use the blue cards.\n\nThe number of ways to lose money is the number of ways to use the red cards.\n\nSo the answer is the difference of the two.\n\nComplexity\n\nTime complexity is O(N+M)\n\nSpace complexity is O(N)\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('apple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\"\n\n\"\"\"\n\u601d\u8003\n\n1. \u8fd9\u9053\u9898\u76ee\u7684\u5173\u952e\u662f\u8981\u6c42\u662f\u5426\u5408\u6cd5\n2. \u5982\u679c\u5408\u6cd5\u7684\u8bdd\uff0c\u5c31\u8981\u6c42\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4e0d\u80fd\u6709\u76f8\u540c\u7684\u5b57\u7b26\u4e32\n3. \u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u5c31\u8bf4\u660e\u4ed6\u4e0d\u5408\u6cd5\uff0c\u76f4\u63a5\u8fd4\u56de0\n\n\u7b2c\u4e00\u6b65\uff0c\u5c06\u8f93\u5165\u62c6\u5206\n\n1. \u7edf\u4e00\u8f93\u5165\uff0c\u6309\u7167\u6bcf\u4e00\u884c\u7684\u683c\u5f0f\u8fdb\u884c\u62c6\u5206\n2. \u62c6\u5206\u540e\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u662fN\n3. \u5c06\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5206\u5272\u540e\uff0c\u5c06\u5176\u8fdb\u884c\u7a7a\u683c\u5206\u5272\uff0c\u53d8\u6210\u4e00\u4e2alist\n4. \u62c6\u5206\u540e\u7b2c\u4e09\u4e2a\u5143\u7d20\uff0c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7b2c\u56db\u4e2a\u5143\u7d20\u4e5f\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n\n\u4ece\u8fd9\u4e2alist\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u5224\u65ad\n\n1. \u5982\u679c\u8f93\u5165\u4e3a\u7a7a\uff0c\u8fd4\u56de0\n2. \u5982\u679c\u662f\u6570\u5b57\uff0c\u8fd4\u56de0\n3. \u5982\u679c\u662f\u82f1\u6587\u5b57\u7b26\uff0c\u8fdb\u884c\u62c6\u5206\uff0c\u5224\u65ad\u5176\u662f\u5426\u4e3a1\u4e2a\uff0c\u5982\u679c\u662f\u8fd4\u56de0\n\n\u7b2c\u4e8c\u6b65\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\n\n1. \u5982\u679c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de0\n2. \u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\n3. \u5982\u679c\u76f8\u7b49\uff0c\u5219\u8fd4\u56de1\n4. \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u8fd4\u56de0\n\n\u7b2c\u4e09\u6b65\uff0c\u8fd4\u56de\u603b\u6570\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nN = int(stdin.readline())\ns_list = []\nt_list = []\nfor i in range(N):\n    s_list.append(stdin.readline())\nfor i in range(N):\n    t_list.append(stdin.readline())"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4\napple\norange\ngrape\ncherry\"\"\") == \"2\"\nassert solution(\"\"\"5\na\nb\na\nc\nd\"\"\") == \"3\"\nassert solution(\"\"\"6\na\nb\na\nc\nd\ne\"\"\") == \"4\"\nassert solution(\"\"\"10\na\na\na\na\nb\nb\nc\nc\nd\ne\"\"\") == \"6\"\nassert solution(\"\"\"4\na\nb\na\na\"\"\") == \"0\"\n\"\"\"\n(ABC163 E) TAKAHASHI'S BABY\n\"\"\"\n\nimport sys\nimport itertools\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == 2\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\nprint(solution(\"3\\napple\\norange\\napple\\n1\\ngrape\"), end=\" \")\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\na\\nb\\nc\\nd\\ne\\n') == '4'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"T\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"G\") == \"C\"\nassert solution(\"C\") == \"G\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'T'\nassert solution('T') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n\nn = int(stdin.readline())\nb = [list(map(int, stdin.readline().split())) for _ in range(2)]\n\ndp = [[0] * n for _ in range(2)]\ndp[0][0] = b[0][0]\nfor i in range(2):\n    for j in range(n):\n        if i == 0:\n            if j == 0:\n                dp[i][j] = b[i][j]\n            else:\n                dp[i][j] = b[i][j] + dp[0][j - 1]\n        else:\n            if j == 0:\n                dp[i][j] = b[i][j] + dp[i - 1][0]\n            else:\n                dp[i][j] = b[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n\nprint(dp[0][n - 1] + dp[1][n - 1])"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 2 4 1\\n1 2 2 2 1') == 14\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2 2 4 1\\n1 2 2 2 1\") == \"14\"\nassert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1''') == 14\n'''\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == 14\n\"\"\"\nfrom itertools import product"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n2 2 2\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3 3\\n2 2 2'\n) == '1'\n\nassert solution(\n    '3 5\\n1 1 1 1'\n) == '0'\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\nassert solution(\"4 4\\n2 1 3 4\") == \"0\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport unittest\n\nN, X = map(int, stdin.readline().split())\nC = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '1'\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nfrom collections import deque\n\nnumber_of_boxes, number_of_candies = map(int, stdin.readline().strip().split())\narray = deque(map(int, stdin.readline().strip().split()))\narray = array + array\nans = 0\nfor i in range(0, len(array) - 1, 2):\n    if array[i] > array[i + 1]:\n        ans += array[i] - array[i + 1]\n        array[i], array[i + 1] = array[i + 1], array[i]\n\nprint(ans)\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.matrix = [[0] * 3 for i in range(3)]\n        self.rows = [0] * 3\n        self.columns = [0] * 3\n        self.sums = 0\n\n    def read_matrix(self):\n        for i in range(3):\n            self.rows[i] = list(map(int, input().split()))\n\n    def read_sum(self):\n        for i in range(3):\n            self.sums += self.rows[i][i]\n\n    def read_column(self):\n        for i in range(3):\n            self.columns[i] = self.rows[0][i] + self.rows[1][i] + self.rows[2][i]\n\n    def check(self):\n        if self.sums!= sum(self.columns) or self.sums!= sum(self.rows[i][i] for i in range(3)):\n            return False\n        return True\n\n    def run(self):\n        self.read_matrix()\n        self.read_sum()\n        self.read_column()\n        print('Yes' if self.check() else 'No')\n\n\nsolution = Solution()\nsolution.run()"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"3 1 2\\n1 1 1\\n3 2 3\") == \"Yes\"\n\n------\n\nThis problem was asked by Google.\n\nGiven a string of parentheses, write a function to compute the minimum number of parentheses to be removed to make the string valid (i.e. each open parenthesis is eventually closed).\n\nFor example, given the string \"()())()\", you should return 1. Given the string \")(\", you should return 2, since we must remove all of them."
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'Yes'\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n3 1 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 1 1\\n2 1 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 2 1') == 'No'\nassert solution('1 0 1\\n2 0 2\\n1 0 1') == 'No'\nassert solution('1 0 1\\n2 1 2\\n1 1 1') == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1\\n') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"2 1 2\\n1 0 1\\n1 0 1\") == \"Yes\"\nassert solution(\"0 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''ABC\n''') == 'ARC'\nassert solution('''ARC\n''') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'ARC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ARC\") == \"ABC\"\n\n------------\nfrom collections import deque\n\nclass Contest:\n    def __init__(self, type: str):\n        self.type = type\n        self.queue = deque()\n\n    def add_new_contest(self, type: str):\n        self.queue.appendleft(type)\n\n    def is_empty(self) -> bool:\n        return len(self.queue) == 0\n\n    def get_type(self) -> str:\n        if self.is_empty():\n            return self.type\n        else:\n            return self.queue.pop()\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ARC') == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"ARC\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\nimport sys\n\na, b, x = map(int, sys.stdin.readline().split())\n\nresult = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\na, b, x = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    if i%x==0:\n        count += 1\nprint(count)"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == 0\nassert solution(\"1 2 3 4\") == 2\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2') == '3'\nassert solution('1 10 10') == '0'\nassert solution('4 1 10') == '1'\nassert solution('4 4 10') == '10'\nassert solution('1 1 1') == '0'\n\n\"\"\"\n\nimport sys\n\na, b, x = [int(i) for i in input().split()]\n\nprint(sum(1 for i in range(a, b + 1) if i % x == 0))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nprint(solution(\"4 8 2\"))\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 2\\n') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2\\n\") == 3\n\"\"\"\nimport sys\n\na, b, x = [int(i) for i in sys.stdin.readline().split()]\ncounter = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        counter += 1\nprint(counter)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n') == '0'\nassert solution('1 1 10\\n') == '9'\nassert solution('1 1 1\\n') == '0'\nassert solution('1 1 10\\n') == '9'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('12') == 'Christmas'\nassert solution('23') == 'Christmas Eve Eve Eve'\nassert solution('24') == 'Christmas Eve'\nassert solution('25') == 'Christmas'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\n\"\"\"\n\nD = int(input())\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"Christmas\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n\nD = int(stdin.readline())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve Eve Eve Eve Eve\"\nassert solution(\"23\") == \"Christmas Eve\"\nassert solution(\"22\") == \"Christmas\"\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('7\\n1\\n2') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"6\") == \"3\"\nassert solution(\"8\") == \"4\"\nassert solution(\"5\") == \"1\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('8') == '4'\nassert solution('7') == '4'\nassert solution('1') == '0'\nassert solution('10') == '5'\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\nassert solution('8') == '3'\nassert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == '4'\nassert solution(\"5\") == '2'\nassert solution(\"1\") == '1'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7''') == '4'\nassert solution('''2''') == '0'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6') == '4'\nassert solution('8') == '4'\nassert solution('7') == '4'\n\"\"\"\n\nfrom math import ceil\nfrom math import log2"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '4'\nassert solution('6') == '6'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '4'\n\n---\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 9 3\") == 'Yes'\n\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\"\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n\na, b, c, d = map(int, stdin.split())\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 9 3\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == \"Yes\"\n\n'''"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == 'ABC'\n\"\"\"\n\ns_1, s_2, s_3 = input().split()\n\nprint(\"\".join(list(map(lambda x: x[0].upper(), [s_1, s_2, s_3]))))\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\nfrom sys import stdin\n\ninputs = stdin.read().split()\n\nres = \"\".join(inputs[0].upper() + input[1].upper() for input in inputs[1:])\nprint(res)\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''atcoder beginner contest''') == 'ABC'\nassert solution('''aaa bb''') == 'AAB'\nassert solution('''aaa bbb''') == 'AAB'\nassert solution('''bb''') == 'B'\nassert solution('''aaa b''') == 'AB'\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\n\"\"\"\n\nfrom itertools import chain, zip_longest\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\ns1, s2, s3 = input().split()\ns1 = s1.upper()[0]\ns2 = s2.upper()[0]\ns3 = s3.upper()[0]\nprint(s1+s2+s3)\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"50 100 120\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 100 120') == 'Yes'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('50 100 120') == 'Yes'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('50 100 120') == 'Yes'\nassert solution('50 100 120') == 'Yes'\nassert solution('100 500 1000') == 'No'\nassert solution('50 100 150') == 'No'\nassert solution('20 10 20') == 'Yes'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"100 200 120\") == \"No\"\n\n-----Test Input-----\n1\n5 5 10\n\n-----Test Output-----\nNo\n\n------Notes------\n1. You may use built-in functions in python\n2. Think about what kind of conditions you need to check.\n3. The order of conditions matters.\n4. 1. Think about what kind of loops you need to use.\n5. Write code in a way that is easy to read.\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    A, B, C = map(int, line.split())\n    if (C - B) <= A:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '50 100 120'\n) == 'Yes'\n\n----\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"150 200 300\") == \"Yes\"\nassert solution(\"100 100 100\") == \"No\"\nassert solution(\"200 500 200\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 9 8 9\\n') == '5'\n\"\"\"\nfrom math import comb\nfrom functools import reduce"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 8\\n7 9 8 9\"\n) == \"5\"\nassert solution(\n    \"4 4\\n1 2 3 4\"\n) == \"0\"\nassert solution(\n    \"4 5\\n1 2 3 4 5\"\n) == \"0\"\nassert solution(\n    \"8 15\\n7 2 3 7 7 8 9 10 11 12\"\n) == \"7\"\nassert solution(\n    \"8 10\\n1 2 3 4 5 6 7 8 9 10\"\n) == \"0\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('1 2') == '1'\nassert solution('3 2') == '0'\nassert solution('1 2 3') == '2'\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n\nimport unittest\n\nN, A = map(int, input().split())\nx = list(map(int, input().split()))\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\nassert solution('4 10\\n4 4 4 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_0) == \"5\"\nassert solution(test_1) == \"0\"\nassert solution(test_2) == \"6\"\nassert solution(test_3) == \"18\"\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin='4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 3 4''') == '4 2 1 3'\nassert solution('''5\n1 2 3 4 5''') == '5 2 1 4 3'\nassert solution('''5\n3 2 1 4 5''') == '5 2 1 4 3'\nassert solution('''3\n1 2 3''') == '3 2 1'\nassert solution('''1\n1''') == '1'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('5\\n2 3 4 5 6') == '4 3 2 5 1 6'\nassert solution('6\\n3 4 5 6 7 8') == '4 3 5 6 2 7 1 8'\nassert solution('7\\n4 5 6 7 8 9 10') == '4 5 6 7 2 8 9 1 10'\n\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"3\\n1 2 3\") == \"3 2 1\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\n---\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\nimport sys\nimport bisect\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n\nh, n = map(int, input().split())\na = list(map(int, input().split()))"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == 'Yes'\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nimport math\nimport sys\n\n_, N = list(map(int, sys.stdin.readline().strip().split()))\nA = list(map(int, sys.stdin.readline().strip().split()))\n\ndp = [0] * N\ndp[0] = A[0]\ni = 0\nfor j in range(1, N):\n    dp[j] = max(dp[j - 1] - A[j], A[j])\n\nl = 0\nr = N - 1\nwhile l < r:\n    if dp[r] - dp[l] <= 0:\n        r -= 1\n    else:\n        l += 1\n\nprint(\"Yes\" if l == r else \"No\")\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nH, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n\nprint(\"Yes\" if H - sum(A) < 0 else \"No\")\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 6\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 6\") == \"Yes\"\n\nassert solution(\"3 5 6\") == \"No\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == result\n\"\"\"\n\n\"\"\"\n-------Explanation-------\nThe longest even string can be obtained by deleting one character from the end.\nWe will find the longest even string by traversing the string from the end, and delete the character that would make the string longer.\nThe value of longest_string will store the maximum length of the longest even string.\nFor example, if we have a string abaab, we want to delete a, and get the string ab, then we will delete b and get the string aba.\nWe keep a record of the longest even string by longest_string = max(longest_string, len(s)) if we find a longer even string.\nWe traverse the string from the end because we want to delete at least one character.\nIn this way, the longest even string is guaranteed to be found.\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abcdefghijklmnopqrstuvwxyz') == 26\n\"\"\"\n\n\"\"\"\nSolution:\n1. Have two pointers. One moving right, one moving left.\n2. If S[right] == S[left], increment left pointer. Otherwise, increment right.\n3. If the length of string is even, increment right.\n4. Else, increment left.\n5. If right == left, then start over.\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abcdefg') == 5\nassert solution('a') == 1\nassert solution('aaaaaa') == 6\nassert solution('aaaaab') == 5\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abaababaa') == 3\nassert solution('abaababa') == 6\nassert solution('aaa') == 3\nassert solution('aaaa') == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\n\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaaaaaa') == 0\nassert solution('ababab') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"aaaaa\") == 5\nassert solution(\"ababab\") == 4\nassert solution(\"aaaaaaaaa\") == 7\nassert solution(\"ababab\") == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaababaab\") == 6\nassert solution(\"ababab\") == 4\nassert solution(\"ab\") == 2\nassert solution(\"\") == 0\nassert solution(\"aaaaaaaaa\") == 1\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"cba\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'Yes'\nassert solution('ab') == 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'Yes'\nassert solution('cab') == 'No'\nassert solution('cba') == 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('acb') == 'Yes'\n\nassert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('abcba') == 'Yes'\nassert solution('abcbaa') == 'No'\n\nprint(solution(stdin))\n\nfrom collections import Counter"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('bca') == 'No'\n\nprint('Success')\n\nSo, this is what the first testcase does. The first testcase tests the solution function on the input 'abc', which should return Yes. The second testcase tests the solution function on the input 'bac', which should return Yes. The third testcase tests the solution function on the input 'abc', which should return No. The fourth testcase tests the solution function on the input 'bca', which should return No.\n\nThe problem description is incomplete. The problem description does not state if swapping the first and second characters in 'abc' results in abc. This is because the problem is not clear, it is unclear how to swap the characters to obtain a, b and c. This means that it is unclear if the solution function should swap the characters or not. To get complete coverage of the function, we must test all possible inputs.\n\nIf we can determine if the solution function is correct, then we can test it on all possible input values.\n\nWe need to perform a permutation on the given string and see if it can be obtained by swapping two characters.\n\nIf we can find a solution, then the solution is correct.\n\nTo find a solution, we can look for a permutation of the given string that can be obtained by swapping two characters.\n\nIf we have a solution, then the solution is correct.\n\nIf we cannot find a solution, then the solution is not correct.\n\nTo find a solution, we need to swap two characters.\n\nTo see if we can swap two characters, we need to check if a, b and c occur in the string S.\n\nSince the problem does not clearly state how to determine if a, b and c occur, we will look for all possible cases.\n\nIf a, b and c occur in the string, we can swap the characters.\n\nIf a, b and c do not occur, then we do not swap the characters.\n\n'''"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('bab') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"aba\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"5\"\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\na = [a[x] * b[x] for x in range(n)]\nsum_of_ab = sum(a)\n\na.sort()\nb.sort()\n\nsum_of_ab = sum(a)\n\nbest_sum = sum_of_ab\nbest_idx = 0\nfor i in range(n):\n    sum_of_ab = sum_of_ab - a[i] + a[i] * b[i]\n    if sum_of_ab < best_sum:\n        best_sum = sum_of_ab\n        best_idx = i\n\nprint(sum_of_ab)\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 3\\n4 2') == '20'\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 3\") == \"5\"\nassert solution(\"5 2 3 1 4\") == \"25\"\nassert solution(\"5 2 3 1 4\") == \"25\"\nassert solution(\"5 2 3 1 4\") == \"25\"\nassert solution(\"5 2 3 1 4\") == \"25\"\n\n\"\"\"\n\nimport sys\nfrom itertools import product\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('abc') == ''\nassert solution('1 2 3') == ''\nassert solution('0 5 2 7 3') == ''\nassert solution('0 1 2 3 4 5') == ''"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"20\"\nassert solution(\"1 8 7 2 4\") == \"646\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3\\n4 2\") == \"20\"\nassert solution(\"4\\n1 3\\n4 2\") == \"20\"\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\nb.sort()\n\ni = 0\nj = 0\nmul = 0\nwhile i < n:\n    mul += a[i] * b[j]\n    i += 1\n    j += 1\n\nprint(mul % (10**9 + 7))"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\n\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))\n\nmod = 998244353"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\nassert solution('1\\n1000000\\n1000000') == '757402647'\nassert solution('2\\n1 3\\n4 2') == '20'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split(' ')]\nb = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution([\"1\",\"8\",\"7\",\"2\",\"4\"]) == \"646\"\nassert solution([\"9\",\"7\",\"2\",\"9\",\"3\"]) == \"757402647\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ns = sum(a[i] * b[i] for i in range(n))\n\nprint(s % 10007)\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == '17'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sys.stdin.read())) == str(sys.stdin.read())"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"17\"\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\nprices = list(map(int, input().split()))\noffers = [None] * m\nfor i in range(m):\n    offers[i] = tuple(map(int, input().split()))"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\"\"\") == \"17\"\n\nassert solution(\"\"\"9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\"\"\") == \"17\"\n\nassert solution(\"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\n\nassert solution(\"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\n\nassert solution(\"\"\"3 4 1\n3 4 1\n1 4\n2 1\n2 3\n3 2\n\"\"\") == \"6\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1''') == '17'\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\n\nsys.setrecursionlimit(1000000)\ninput = sys.stdin.readline\n\nn, m, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ngraph = defaultdict(list)\n\nfor i in range(m):\n    x, y = [int(x) for x in input().split()]\n    graph[x].append(y)\n    graph[y].append(x)\n\nfor i in graph:\n    graph[i].sort()"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == '17'\n\"\"\"\n\nimport sys\nimport queue\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\nassert solution('9 7 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\nprint(\"Success!\")\n\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n1 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n1 7\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == 2\nassert solution(test_input_2) == 0\nassert solution(test_input_3) == 1\n\n\n\"\"\"\n\n\n\nfrom typing import List\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == '2'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n4 7\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n5 7\") == '1'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom math import inf\nfrom typing import Dict, Set, Tuple, List\n\nfrom helpers import print_assert\n\n\nclass Graph:\n    def __init__(self, vertices: int):\n        self.vertices: int = vertices\n        self.edges: Dict[int, List[int]] = {i: [] for i in range(1, vertices + 1)}\n        self.distances: Dict[Tuple[int, int], int] = defaultdict(lambda: inf)\n\n    def add_edge(self, start: int, end: int) -> None:\n        self.edges[start].append(end)\n        self.edges[end].append(start)\n\n    def min_distance(self, start: int, end: int) -> None:\n        self.distances[(start, end)] = 0\n\n    def has_path(self, start: int, end: int) -> bool:\n        return self.distances[(start, end)]!= inf\n\n    def get_distance(self, start: int, end: int) -> int:\n        return self.distances[(start, end)]\n\n    def relax(self, u: int, v: int, distance: int) -> None:\n        if self.distances[(u, v)] > distance:\n            self.distances[(u, v)] = distance\n            self.distances[(v, u)] = distance\n\n    def bellman_ford(self) -> None:\n        for v in range(1, self.vertices + 1):\n            for u in range(1, self.vertices + 1):\n                for neighbor in self.edges[u]:\n                    self.relax(u, neighbor, self.get_distance(u, neighbor) + 1)\n\n    def remove_edge(self, start: int, end: int) -> None:\n        self.edges[start].remove(end)\n        self.edges[end].remove(start)\n        self.distances[(start, end)] = inf\n        self.distances[(end, start)] = inf\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\"\"\") == \"1\"\n\n\"\"\"\n3.\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043d\u0430 \u0434\u0435\u043d\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043d \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u043f\u043e\u043a\u0443\u043f\u043e\u043a.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 $1000$, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0446\u0435\u043d\u044b \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 $1000$, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u043f\u043e\u043a\u0443\u043f\u043e\u043a.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1\n\u0412\u0432\u043e\u0434\n\n50\n80\n50\n60\n20\n\n\u0412\u044b\u0432\u043e\u0434\n\n40\n80\n80\n100\n60\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2\n\u0412\u0432\u043e\u0434\n\n60\n60\n60\n60\n\n\u0412\u044b\u0432\u043e\u0434\n\n60\n60\n60\n60\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7''') == '2'\n\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7''') == '0'\n\nassert solution('''7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7''') == '1'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n'\n\n\"\"\"\n\nfrom typing import List\n\nimport unittest\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\nassert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000001 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\"\n\"\"\"\n\nimport numpy as np\nfrom numpy.random import randint\nfrom typing import List\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == 10\nassert solution(\"4 12\") == 15\nassert solution(\"2 1000000000\") == 1999999999\nassert solution(\"7 97\") == 113\nassert solution(\"1000000000 1000000000\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1'\n\"\"\""
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n2 1\n2 2\n2 3\n2 4\n2 5\n''') == '''\n10\n15\n1999999999\n113\n1000000001\n1\n'''\n\nassert solution('''\n6 7\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n''') == '''\n10\n15\n1999999999\n113\n1000000001\n1\n'''\n\nassert solution('''\n1 1\n2 3\n1 1\n2 3\n''') == '''\n2\n3\n2\n'''\n\nassert solution('''\n4 1\n4 10\n''') == '''\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import List"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"8 4\\n3 3 3 3 2 1 2 1 1\\n\") == \"4\\n2 1 3\"\nassert solution(\"5 2\\n2 2 2 1 1\\n\") == \"2\\n1 2\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 5\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 6\\n2 3 3 1 1 2 1 2 3 3\") == \"2\\n1 3 2\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\n\"\"\"\n\nimport sys\n\nassert sys.stdin.read() == '7 2\\n1 2 3 2 1 3 2\\n'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2''') == '2\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3''') == '3\nassert solution('''10 10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''') == '2 3 4 1 2 3 5 7 8 9'\nassert solution('''10 10\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2''') == '1 2 3 4 5 6 7 8 9 10'"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\\n2 1'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\") == \"2\", \"Error\"\nassert solution(\"10 4\") == \"3\", \"Error\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\n\n'''\n\nfrom collections import deque"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"4\\n2\\n1 2\\n1 1\") == \"2\"\nassert solution(\"4\\n1 1\\n2 1\\n1 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == '263'\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'\nassert solution('''7\n1\n1\n1\n1\n1\n1\n1\n2''') == '106'\nassert solution('''9\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1''') == '225'\nassert solution('''6\n1\n2\n1\n2\n1\n3''') == '9'\nassert solution('''6\n1\n2\n2\n1\n2\n3''') == '9'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"265\"\n\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"267\"\n\nassert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('ab') == 'ab'\nassert solution('abacaba') == 'ac'\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\"\"\"\n\n\nimport re\nfrom collections import Counter, defaultdict\n\nimport sys\n\nn = input()\ns = input()\n\nc = Counter(s)\nc = {k: v for k, v in sorted(c.items(), key=lambda x: (-x[1], x[0]))}\n\nfor _ in range(int(input())):\n    l, r = map(int, input().split())\n    print(c[s[l:r]])\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 3\nassert solution(\"dfcbbcfeeedbaea\") == 6"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\nabacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\n\"\"\") == '3\\n1\\n2\\n'\nassert solution(\n\"\"\"\ndfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\n\"\"\") == '5\\n2\\n5\\n2\\n6\\n'\nassert solution(\n\"\"\"\nllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == 'c9de9f4', 'wrong result'\n\nprint(solution(stdin))"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n\ns, q = input(), int(input())\n\ns_arr = list(map(chr, range(97, 123)))\ns_count = [0] * 26\n\nfor c in s:\n    s_count[ord(c) - 97] += 1\n\nfor i in range(q):\n    data = list(map(int, input().split()))\n    if data[0] == 1:\n        s_count[ord(data[1]) - 97] -= 1\n        s_count[ord(data[2]) - 97] += 1\n    else:\n        l, r = data[1], data[2]\n        sub_str_chars = set()\n        for i in range(l - 1, r):\n            sub_str_chars.add(s_arr[ord(s[i]) - 97])\n        print(len(sub_str_chars))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"7\"\n\"\"\"\n\n\nclass String():\n    def __init__(self, string):\n        self.string = string\n\n    def substring(self):\n        l = len(self.string)\n        for n in range(l):\n            for i in range(1, l + 1):\n                if i > n:\n                    break\n                print(self.string[n:i])\n        print()\n\n    def replace(self):\n        for q in range(int(input())):\n            query, i, c = input().split()\n            query = int(query)\n            if query == 1:\n                self.string = self.string[:i] + c + self.string[i + 1:]\n            elif query == 2:\n                print(len(set(self.string[i:i + int(c)])))\n            print(self.string)\n        print()\n\n    def distinct(self):\n        s = set()\n        for i in range(int(input())):\n            query, l, r = input().split()\n            l, r = int(l), int(r)\n            if query == 2:\n                s.update(self.string[l:r])\n        print(len(s))\n        print()\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"cdfs\"\nassert solution(\"abacaba\") == \"bac\"\nassert solution(\"dfcbbcfeeedbaea\") == \"dfbcbcdeee\"\nassert solution(\"a\") == \"1\"\n\nprint(solution(\"a\"))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"codeforces\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\nassert solution('''6\n6\n8\n7\n9\n3\n1\n2\n5\n4''') == '''6\n6\n8\n7\n9\n3\n1\n2\n5\n4'''\n\nassert solution('''1\n7\n2\n3\n8\n5\n4\n6\n9\n1''') == '''1\n7\n2\n3\n8\n5\n4\n6\n9\n1'''\n\nassert solution('''6\n8\n7\n9\n1\n2\n5\n4\n3\n7''') == '''6\n8\n7\n9\n1\n2\n5\n4\n3\n7'''\n\nassert solution('''8\n5\n9\n1\n6\n3\n7\n4\n2\n8''') == '''8\n5\n9\n1\n6\n3\n7\n4\n2\n8'''"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '1'\nassert solution('123') == '12'\nassert solution('1234') == '123'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\nassert solution(\"716948309\\n594827161\\n979146319\\n33152636\\n312468495\\n285436887\\n384819056\\n71352332\\n534637316\\n45678915\\n259873309\") == \"716956319\\n59482716\\n979146319\\n33152636\\n312468495\\n285436887\\n384819056\\n71352332\\n534637316\\n45678915\\n259873309\"\n\nassert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\nassert solution(\"38692534\\n974155670\\n599381735\\n928159324\\n368598710\\n794187411\\n901232212\\n749495561\\n527609713\") == \"38692534\\n975155670\\n599381735\\n928159324\\n368598710\\n794187411\\n901232212\\n749495561\\n527609713\"\n\nassert solution(\"867349824\\n572256873\\n792846392\\n187303445\\n739812809\\n845938783\\n824339864\\n552686771\\n56702438\") == \"867349824\\n572256873\\n792846392\\n187303445\\n739812809\\n845938783\\n824339864\\n552686771\\n56702438\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('154873296\\n'\n'386592714\\n'\n'729641835\\n'\n'863725149\\n'\n'975314628\\n'\n'412968357\\n'\n'631457982\\n'\n'598236471\\n'\n'247189563') == '154873396\\n' \\\n'336592714\\n' \\\n'729645835\\n' \\\n'863725145\\n' \\\n'979314628\\n' \\\n'412958357\\n' \\\n'631457992\\n' \\\n'998236471\\n' \\\n'247789563'\nprint('Cool!')\n\nprint(solution(stdin))"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \\\n    \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == '3\\n6\\n8\\n-1\\n9\\n4\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n3 2\\n1 5') == '4\\n5\\n4'\nassert solution('10 2\\n1 2\\n3 6') == '7\\n6\\n7'\nassert solution('10 3\\n1 2\\n3 6\\n1 4') == '5\\n5\\n5'\nassert solution('10 4\\n1 2\\n3 6\\n1 4\\n7 9') == '6\\n6\\n6\\n6'\nassert solution('10 5\\n1 2\\n3 6\\n1 4\\n7 9\\n1 5') == '7\\n7\\n7\\n7\\n7'\n\n\"\"\"\n\nn, q = map(int, input().split())\nfather = [0] * (n + 1)\nfor i in range(1, n + 1):\n    father[i] = int(input())\n\nprint(' '.join(map(str, [father[i] for i in map(int, input().split())])))\n\nfor _ in range(q):\n    u, k = map(int, input().split())\n    if k > len(father[u:]):\n        print(-1)\n    else:\n        print(father[u:][k - 1])\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == '8\\n-1\\n9\\n4\\n'\nassert solution(\"3 3\\n1 1\\n1 2\\n2 3\\n\") == '1\\n1\\n2\\n'\nassert solution(\"2 3\\n1 1\\n2 3\\n\") == '1\\n-1\\n'\nassert solution(\"5 6\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\\n\") == '8\\n-1\\n9\\n4\\n'\nassert solution(\"3 5\\n1 1\\n1 2\\n2 3\\n\") == '-1\\n'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2\\n3 5\\n3 6\\n5 7\\n3 7\\n7 4\") == \"7\\n7\\n-1\\n4\"\nassert solution(\"7 5\\n1 3\\n1 6\\n4 8\\n4 9\\n3 5\\n1 10\") == \"3\\n3\\n3\\n3\\n3\\n-1\"\nassert solution(\"10 10\\n1 7\\n1 5\\n2 7\\n2 5\\n5 10\\n5 11\\n5 9\\n6 10\\n6 11\\n7 10\\n7 11\\n7 9\\n8 10\\n8 11\\n9 10\\n9 11\\n11 1\\n11 2\\n11 3\\n11 4\") == \"7\\n7\\n7\\n-1\\n-1\"\nassert solution(\"7 5\\n1 3\\n1 6\\n4 8\\n4 9\\n3 5\\n1 10\") == \"3\\n3\\n-1\\n-1\"\nassert solution(\"7 5\\n1 3\\n1 6\\n4 8\\n4 9\\n3 5\\n1 10\") == \"3\\n3\\n-1\\n-1\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n\"\"\"\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nn, q = map(int, input().strip().split())\n\nfather = [1] * (n + 1)\nfor i in range(1, n + 1):\n    father[i] = int(input())\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 8 1\") == \"8 9\"\nassert solution(\"9 1 1\") == \"9\"\nassert solution(\"5 1 1\") == \"-1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"9 9 1\") == \"9 9\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == '3\\n6\\n8\\n-1\\n9\\n4'\nprint(\"Test 1 OK\")"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3 5 3 5 7\") == \"3\"\nassert solution(\"1 1 1 3 5 3 5 7\") == \"6\"\nassert solution(\"3 1\") == \"5\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"3 4\") == \"4\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\nassert solution(\"6 3\\n1 5\\n3 4\") == \"6\\n6\\n4\"\nassert solution(\"2 6\\n1 2\\n2 2\\n2 3\") == \"1\\n2\\n1\"\nassert solution(\"2 5\\n1 2\\n2 2\\n2 3\") == \"1\\n2\\n1\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4 2\") == \"NO\"\nassert solution(\"1 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"NO\"\nassert solution(\"100 101 102 105\") == \"NO\"\nassert solution(\"3 2 1 100000000\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\n\n\"\"\"\n\n\nt = int(input())\nfor i in range(t):\n    a, b, c, n = map(int, input().split())\n    if n % 3 == 0:\n        if a == b == c:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES\\nYES\\nNO\\nNO\\nYES'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"5 3 2 8\") == \"YES\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 'YES'\nassert solution('2\\n3 2 1 100\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3') == 'YES'\nassert solution('3\\n7 6 1 1000000000\\n7 6 1 1000000000\\n7 6 1 1000000000\\n7 6 1 1000000000\\n7 6 1 1000000000') == 'NO'\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n\"\"\"\nimport sys\n\na, b, c, n = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n\nprint(\"Success\")\n\n\n\n-----Problem-----"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\nassert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 6 5\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\n\n\n'''\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 4') == 3\nassert solution('5 5\\n2 1 5 3 5') == 9\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == 3\nassert solution('5 5\\n2 1 5 3 5') == 9\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2') == 3\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\n\nprint(\"Successfully tested!\")"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 3 4\\n') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5\\n') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2\\n') == '3 3'\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('3 3\\n1 2 3') == '0'\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solve(self, stdin: List[str]) -> None:\n        n, m = map(int, stdin[0].split())\n        x = map(int, stdin[1].split())\n        for i in range(1, m):\n            x.append(i + 1)\n        \n        print(' '.join([str(f(n, x)) for f in (self.solve_naive, self.solve_fast)]))\n\n    @staticmethod\n    def solve_naive(n, x) -> int:\n        res = 0\n        for i in range(1, n):\n            res += abs(x[i] - x[i - 1])\n        return res\n    \n    @staticmethod\n    def solve_fast(n, x) -> int:\n        res = 0\n        i, j = 0, 1\n        while j < n:\n            res += abs(x[i] - x[j])\n            i += 1\n            j += 1\n        return res\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\") == \"3 3\"\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"4 4\\n2 1 5 3 5\") == \"9 8 12 6 8\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"0 0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n2 4\\n3 4\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2\\n2 3\\n2 4\\n3 4\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2\\n2 3\\n2 4\\n3 4\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2\\n2 3\\n2 4\\n3 4\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2\\n2 3\\n2 4\\n3 4\\n\") == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"4 3\\n1 2\\n2 3\\n2 4\\n3 4\\n1 2 3\") == \"YES\"\nassert solution(\"6 5\\n1 3\\n2 3\\n2 4\\n3 5\\n1 2 3 4\") == \"YES\"\nassert solution(\"6 5\\n1 2\\n2 3\\n2 4\\n3 5\\n1 2 3 4\") == \"YES\"\nassert solution(\"4 3\\n1 2\\n2 3\\n2 4\\n3 4\\n1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 3 2 1\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 2 1 4\") == \"YES\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'NO\\nNO\\nNO\\nNO\\nYES\\nYES'\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'NO\\nNO\\nNO\\nNO\\nNO\\nNO'\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'NO\\nNO\\nNO\\nNO\\nNO\\nNO'\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == 'NO\\nNO\\nNO\\nNO\\nNO\\nNO'\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"10 8\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\\n6 13\\n7 14\\n7 15\\n8 16\\n8 17\\n9 18\\n9 19\\n10 20\\n10 21\\n11 22\\n11 23\\n12 24\\n12 25\\n13 26\\n13 27\\n14 28\\n14 29\\n15 30\\n15 31\\n16 32\\n16 33\\n17 34\\n17 35\\n18 36\\n18 37\\n19 38\\n19 39\\n20 40\\n20 41\\n21 42\\n21 43\\n22 44\\n22 45\\n23 46\\n23 47\\n24 48\\n24 49\\n25 50\\n25 51\\n26 52\\n26 53\\n27 54\\n27 55\\n28 56\\n28 57\\n29 58\\n29 59\\n30 60\\n30 61\\n31 62\\n31 63\\n32 64\\n32 65\\n33 66\\n33 67\\n34 68\\n34 69\\n35 70\\n35 71\\n36 72\\n36 73\\n37 74\\n37 75\\n38 76\\n38 77\\n39 78\\n39 79\\n40 80\\n40 81\\n41 82\\n41 83\\n42 84\\n42 85\\n43 86\\n43 87\\n44 88\\n44 89\\n45 90\\n45 91\\n46 92\\n46 93\\n47 94\\n47 95\\n48 96\\n48 97\\n49 98\\n49 99\\n50 100\\n50 101\\n51 102\\n51 103\\n52 104\\n52 105\\n53 106\\n53 107\\n54 108\\n54 109\\n55 110\\n55 111\\n56 112\\n56 113\\n57 114\\n57 115\\n58 116\\n58 117\\n59 118\\n59 119\\n60 120\\n60 121\\n61 122\\n61 123\\n62 124\\n62 125\\n63 126\\n63 127\\n64 128\\n64 129\\n65 130\\n65 131\\n66 132\\n66 133\\n67 134\\n67 135\\n68 136\\n68 137\\n69 138\\n69 139\\n70 140\\n70 141\\n71 142\\n71 143\\n72 144\\n72 145\\n73 146\\n73 147\\n74 148\\n74 149\\n75 150\\n75 151\\n76 152\\n76 153\\n77 154\\n77 155\\n78 156\\n78 157\\n79 158\\n79 159\\n80 160\\n80 161\\n81 162\\n81 163\\n82 164\\n82 165\\n83 166\\n83 167\\n84 168\\n84 169\\n85 170\\n85 171\\n86 172\\n86 173\\n87 174\\n87 175\\n88 176\\n88 177\\n89 178\\n89 179\\n90 180\\n90 181\\n91 182\\n91 183\\n92 184\\n92 185\\n93 186\\n93 187\\n94 188\\n94 189\\n95 190\\n95 191\\n96 192\\n96 193\\n97 194\\n97 195\\n98 196\\n98 197\\n99 198\\n99 199\\n100 200\\n100 201\\n101 202\\n101 203\\n102 204\\n102 205\\n103 206\\n103 207\\n104 208\\n104 209\\n105 210\\n105 211\\n106 212\\n106 213\\n107 214\\n107 215\\n108 216\\n108 217\\n109 218\\n109 219\\n110 220\\n110 221\\n111 222\\n111 223\\n112 224\\n112 225\\n113 226\\n113 227\\n114"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n1 3\") == \"NO\"\nassert solution(\"8 6\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n4 7\\n4 8\\n5 6\\n6 7\\n6 8\\n7 8\\n\") == \"YES\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n2\\n1 1 1\") == \"YES\\n1 3\"\nassert solution(\"3\\n2\\n1 1 1\") == \"YES\\n1 2\"\nassert solution(\"2\\n1\\n1 1\") == \"YES\\n1 2\"\nassert solution(\"1\\n1\\n1 1\") == \"NO\"\nassert solution(\"1\\n1\\n1 1\") == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"5\\n6\\n1 1 1 2 2\\n2\\n1 1 1\\n4\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == \"YES\\n1 2\\n1 3\\n1 4\\n1 5\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"NO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"NO\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"NO\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_case_0) == test_result_0\nassert solution(test_case_1) == test_result_1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 2\\n1 3\\n1 4\\nNO\"\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\n\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected_output)\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"6\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\\n4\\n1 2 3 4 5 6 7\\n1 1 1 1 1 1 1 1\") == \"YES\\n1 2\\n1 4\\n1 3\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n4 5\\n4 6\"\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\"\"\"\nimport sys"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_0) == solution(test_1)\nassert solution(test_2) == solution(test_3)\nassert solution(test_4) == solution(test_5)"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11101010') == '011110'\nassert solution('11101010') == '0111110'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11101010') == '01111010'\nassert solution('11101100') == '0111111'\nassert solution('11111111') == '0011111'\nassert solution('11111110') == '01111110'\nassert solution('11111111') == '0011111'"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11011010\") == \"0111110\"\nassert solution(\"11011011\") == \"0111111\"\nassert solution(\"11101110\") == \"11101110\"\n\nassert solution(\"1111100\") == \"11101110\"\nassert solution(\"1111101\") == \"1111101\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111010\") == \"1110\"\nassert solution(\"11101101101010\") == \"1111101101010\"\nassert solution(\"11101101101010\") == \"1111101101010\"\nassert solution(\"1111101101010\") == \"1111101101010\"\nassert solution(\"1111101101010\") == \"1111101101010\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1111100) == '0011111'\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11011010') == '01111010'\nassert solution('1111100') == '0111111'\nassert solution('1101110') == '1101110'\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\u20181111100\u2019) == \u20180011111\u2019\nassert solution(\u20181111100\u2019) == \u20180011111\u2019\nassert solution(\u201811101110\u2019) == \u201811101110\u2019\nassert solution(\u201811101110\u2019) == \u201811101110\u2019\nassert solution(\u201811101110\u2019) == \u201811101110\u2019\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11011010\") == \"0111010\"\nassert solution(\"1111100\") == \"0011111\"\nassert solution(\"01111011\") == \"0111010\"\n\n'''\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11101010\") == \"01111010\"\n\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11101110\") == \"11101110\"\n\"\"\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 7'\nassert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\"\"\"\n\nimport collections\nfrom typing import List\n\nclass Solution:\n    def remove_bad_points(self, stdin: str) -> str:\n        n, k = list(map(int, stdin.split()))\n        segments: List[List[int]] = []\n        for i in range(n):\n            s, e = list(map(int, stdin.split()))\n            segments.append([s, e])\n        points = set()\n        for i, j in segments:\n            for point in range(i, j + 1):\n                points.add(point)\n        bad_points = set()\n        count = collections.Counter()\n        for i, j in segments:\n            for point in range(i, j + 1):\n                count[point] += 1\n                if count[point] > k:\n                    bad_points.add(point)\n        return \" \".join(map(str, sorted(bad_points)))"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\"\nassert solution(\"29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\\n\"\nassert solution(\"2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\\n1 3 5 6\\n\"\n\nprint('Hooray!')\n\n------END-------\n\n'''\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\n\"\"\"\n\nimport numpy as np\nfrom collections import defaultdict\n\nn, k = list(map(int, input().split()))\n\nsegments = [list(map(int, input().split())) for i in range(n)]\n\nintersections = defaultdict(int)\n\nfor i in range(n):\n    for j in range(i+1, n):\n        l1, r1 = segments[i]\n        l2, r2 = segments[j]\n        \n        l = max(l1, l2)\n        r = min(r1, r2)\n        \n        if l <= r:\n            intersections[(l, r)] += 1\n\nintersections = sorted(intersections.items(), key=lambda x: x[1])\n\ncount = 0\n\nfor key, val in intersections:\n    if val > k:\n        count += 1\n        \nfor i in range(count):\n    l, r = intersections[i][0]\n    print(i+1, l, r)\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\nassert solution('7 1\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n\nassert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\nassert solution('''20 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\n\"\"\"\n\n\"\"\"\nn, k = map(int, input().split())\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nans = 0\n\nfor i in range(n):\n    l, r = a[i]\n    a[i] = l\n\na.sort()\n\nt = 0\nfor i in range(n):\n    l, r = a[i]\n    t += (r - l)\n    if t > k:\n        ans = i\n        break\n\nprint(n - ans)\nprint(*a[:ans + 1])\n\"\"\"\n\n\n\n\"\"\"\ninput\nn k\nl r\nl r\nl r\nl r\nl r\nl r\n\noutput\nm\na b c d e f g h i\n\nsort\n\ninput\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\noutput\n3\n1 4 7\n\"\"\"\n\n\nn, k = map(int, input().split())\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nans = 0\n\nfor i in range(n):\n    l, r = a[i]\n    a[i] = l\n\na.sort()\n\nt = 0\nfor i in range(n):\n    l, r = a[i]\n    t += (r - l)\n    if t > k:\n        ans = i\n        break\n\nprint(n - ans)\nprint(*a[:ans + 1])\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 2 4'\n\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\nprint(\"Well done, brother!\")\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n2 1 4 3 5\n2 2 2 3 4\n''') == '19'\n\n\"\"\"\nfrom collections import defaultdict\nfrom math import inf\n\nd = defaultdict(lambda: [inf] * 200010)\n\nn = int(stdin.readline())\nfor i in range(1, n + 1):\n    x, v = map(int, stdin.readline().split())\n    d[x][i] = v\n\nres = 0\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        for x in d[i + 1][j]:\n            res += abs(d[i + 1][j][x] - d[i][j][x])\n\nprint(res)\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n1 3 2 5 4\\n2 2 2 3 4\") == 19\nassert solution(\"2\\n2 1\\n-3 0\") == 0\nassert solution(\"2\\n1 1\\n-3 0\") == 0\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 4 3 5\") == \"19\"\nassert solution(\"2 2 2 3 4\") == \"0\"\n\"\"\"\n\n\"\"\"\nGiven two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n\n \n\nExample 1:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\nExample 2:\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n\"\"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\nassert solution(\"2\\n2 1\\n-3 0\") == 0\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == '3'\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\nassert solution(\"2\\n2 1\\n-3 0\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == '3'\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == '19'\nassert solution(\"5\\n2 1 4 3 5\\n-100 2 3\") == '0'\nassert solution(\"5\\n2 1 4 3 5\\n-100 2 3\") == '0'"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\nprint(sum(min(a[i], b[j]) - max(a[i - 1], b[j - 1]) for i in range(1, n) for j in range(1, n)))"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('2 2') == '1'\nassert solution('1 2 1') == '0'\nassert solution('3 2 3') == '1'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nprint(solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\"))\n\nassert solution(\"1 2\\n1 2\") == \"0 0\"\nprint(solution(\"1 2\\n1 2\"))\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n') == '21 7 15 21 3'\n\"\"\"\nimport math\n\nMAX_INT = 2 ** 31 - 1\n\nINPUT_LINES = int(input())\nTREE = [[0] * 3 for _ in range(INPUT_LINES + 1)]\nfor i in range(1, INPUT_LINES + 1):\n    TREE[i][0] = int(input())\n    TREE[i][1] = int(input())\n    TREE[i][2] = int(input())\n\nMAX_WEIGHT = int(input())\nQUERIES = [int(x) for x in input().split()]\n\n\nclass Node:\n    def __init__(self, id, weight, l_child=None, r_child=None):\n        self.id = id\n        self.weight = weight\n        self.l_child = l_child\n        self.r_child = r_child\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\nassert solution(\"1 2\\n2 3 2\\n1 3 2\") == \"0 0\"\nassert solution(\"1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\nassert solution(\"7 2\\n1 2 1\\n2 3 2\\n1 3 2\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n1 2\\n\") == \"0 0\"\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import defaultdict, deque\nfrom queue import PriorityQueue\n\nclass Node:\n    def __init__(self, id, w):\n        self.id = id\n        self.w = w\n        self.prev = None\n        self.children = []\n\n    def get_weight(self):\n        return self.w\n\n    def get_id(self):\n        return self.id\n\n    def add_child(self, node):\n        self.children.append(node)\n\n    def __lt__(self, other):\n        return self.get_weight() < other.get_weight()"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\n\nimport sys\nimport math\nimport heapq\nimport bisect\nfrom typing import List\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3 '\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom queue import PriorityQueue"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == \"YES\"\nassert solution(test_input_2) == \"NO\"\nassert solution(test_input_3) == \"YES\"\nassert solution(test_input_4) == \"YES\"\nassert solution(test_input_5) == \"NO\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 2 2\\n3\\n1 3 4 4') == 'YES'\nassert solution('4\\n2 2 2\\n3\\n1 3 4') == 'NO'\nassert solution('4\\n2 2 2\\n3\\n1 2 4') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 4\\n5 5 5 5') == 'NO'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'NO'\n\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\n\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'NO'\n\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\n\nassert solution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'NO'"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"1\\n100\") == \"NO\"\n\n-----\nInput:\n3\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\nOutput:\nYES\nYES\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n2\n4\n1 2 2\n4\n1 3 4 4\n1\n100\nOutput:\nYES\nNO\n\n-----\nInput:\n2\n4\n1 2 2\n4\n1 3 4 4\n1\n100\nOutput:\nNO\n\n-----\nInput:\n1\n7\n1 2 2\n4\n5 5 5 5 5\nOutput:\nYES\n\n-----\nInput:\n1\n7\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n2\n1 2 2\n4\n1 3 4 4\nOutput:\nNO\n\n-----\nInput:\n1\n1\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n2\n1\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n3\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n7\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n7\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n6\n1 2 2\n4\n1 3 4 4\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n3\n1 2 2\n4\n1 3 4 4\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n5\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n6\n1 2 2\n4\n5 5 5 5 5\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nYES\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4\nOutput:\nNO\n\n-----\nInput:\n1\n4\n1 2 2\n4\n1 3 4 4"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2 2 2\n4\n5 5 5 5''') == 'YES'\nassert solution('''1\n100''') == 'NO'\nassert solution('''5\n1 2 2\n4\n5 5 5 5''') == 'YES'\nassert solution('''1\n100''') == 'NO'\nassert solution('''2\n1 2\n2\n1 2''') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == 'NO'\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n\"\n    \"3\\n\"\n    \"1 2 2\\n\"\n    \"4\\n\"\n    \"5 5 5 5\\n\"\n    \"3\\n\"\n    \"1 2 4\\n\"\n    \"1\\n\"\n    \"100\\n\"\n) == \"YES\"\nassert solution(\n    \"5\\n\"\n    \"3\\n\"\n    \"1 2 2\\n\"\n    \"4\\n\"\n    \"5 5 5 5\\n\"\n    \"3\\n\"\n    \"1 2 4\\n\"\n    \"1\\n\"\n    \"100\\n\"\n) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100') == 'YES'\nassert solution('3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n1\\n100') == 'NO'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\nassert solution(\"5 4\\n1\\n010\\n010\") == \"10\"\nassert solution(\"5 5\\n0\\n010\\n010\") == \"1\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4') == '12'\nassert solution('4 5') == '11'\nassert solution('4 0') == '0'\nassert solution('5 3') == '11'\nassert solution('4 2') == '10'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\\n1101\") == \"12\"\nassert solution(\"1001\\n10101\") == \"11\"\n\n\n\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\nassert solution(\"4 5\\n1010\\n1101\") == \"11\"\nassert solution(\"5 5\\n101010\\n110110\") == \"11\"\nassert solution(\"1 1\\n1101\") == \"0\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(b'4 4\\n1010\\n1101') == '12'\nassert solution(b'4 5\\n1001\\n10101') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010 1011') == '12'\nassert solution('1001 10101') == '11'"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '8'\nassert solution('1101') == '2'\nassert solution('1001') == '1'\nassert solution('10101') == '2'\nassert solution('101010') == '8'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n4\n6\n8\n10\n\"\"\") == \"NO\\nYES\\n2 4 1 5\\nNO\"\n\nassert solution(\"\"\"\n2\n4\n6\n8\n10\n\"\"\") == \"NO\\nYES\\n2 4 1 5\\nNO\"\n\nassert solution(\"\"\"\n5\n2\n4\n6\n8\n10\n\"\"\") == \"NO\\nYES\\n2 4 1 5\\nNO\"\n\nassert solution(\"\"\"\n5\n1\n2\n4\n8\n10\n\"\"\") == \"NO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\"\n\nassert solution(\"\"\"\n5\n1\n2\n4\n8\n10\n\"\"\") == \"NO\\nYES\\n2 4 6 8 1 3 5 11\\nNO\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6\") == '2 4 1 5'\nassert solution(\"8\\n10\") == 'NO'\nassert solution(\"6\\n12\") == 'YES\\n2 4 6 8 1 3 5 11'\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('10') == 'YES'\nassert solution('2') == 'NO'\nassert solution('6') == 'YES'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6\") == \"2 4 1 5\"\nassert solution(\"8\\n10\") == \"2 4 6 8 1 3 5 11\"\nassert solution(\"6\\n8\") == \"NO\"\nassert solution(\"10\\n12\") == \"NO\"\nassert solution(\"16\\n20\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2\\n4\\n6\\n8\\n10\\n') == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4\\n6\\n8\\n10\\n\") == 'NO\\nYES\\n2 4 1 5\\nNO\\nYES\\n2 4 6 8 1 3 5 11'\nassert solution(\"1\\n1\\n1\\n\") == 'NO\\nNO\\n1 1 1\\n'\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('3\\n6\\n8\\n10') == 'NO'\nassert solution('2\\n4') == 'YES\\n2 4'\nassert solution('1\\n5') == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('2\\n4') == 'YES'\nassert solution('8\\n10') == '2 4 1 5'\nassert solution('6\\n8') == 'NO'\nassert solution('1\\n2') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"2\\n4\") == \"YES\\n2 4 1 5\"\nassert solution(\"2\\n6\") == \"NO\"\nassert solution(\"2\\n8\") == \"YES\\n2 4 6 8 1 3 5 11\"\n\"\"\"\n\nimport sys\n\ntest_cases = int(sys.stdin.readline())\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"5\\n4\") == \"NO\"\nassert solution(\"2\\n8\") == \"YES\\n2 4 1 5\"\nassert solution(\"1\\n10\") == \"NO\"\nassert solution(\"1\\n2\") == \"YES\\n2 1\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1\\n1\\n1\\n1\\n\") == \"4\"\n\"\"\"\n\nfrom typing import List\n\nfrom Helpers import helper as hlp\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"3\\n1 1 2\") == \"1\"\nassert solution(\"5\\n1 1 1 1 1\") == \"0\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"0\"\n\"\"\"\n\nfrom sys import stdin\n\nstdin = open('./input.txt', 'r')"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('hello world') == 'hello world'\nassert solution('123 456 789') == '123 456 789'\nassert solution('999 1 999 999') == '999'\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == '5'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\nfor _ in range(n):\n    a = list(map(int, stdin.readline().split()))\n    special_elements = 0\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1] + 1:\n            special_elements += 1\n    print(special_elements)\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n9\\n3 1 4 1 5 9 2 6 5\") == '5'\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1\\n1\") == \"0\"\nassert solution(\"2\\n1 1\\n2\") == \"1\"\nassert solution(\"3\\n3 1 2\\n2\") == \"0\"\nassert solution(\"8\\n7 6 5 4 3 2 1\\n1\") == \"0\"\nassert solution(\"7\\n1 1 1 1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n3 1 4 1 5 9 2 6 5') == '5'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == '3\\n4\\n2\\n7'\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    start = [int(x) for x in input().split()]\n    end = [int(x) for x in input().split()]\n    start.sort()\n    end.sort()\n    inter = 0\n    for i in range(n-1):\n        if start[i+1] <= end[i]:\n            inter += 1\n    print(n - inter)\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\") == \"3\"\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\\n4\\n2\\n7\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\nassert solution(\"7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"2\"\n\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\"))\n\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '4'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '2'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '7'\n\"\"\"\n\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    lst = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        lst.append([x, y])\n    lst = sorted(lst, key = lambda x: x[0])\n    ans = 1\n    res = [lst[0]]\n    for i in range(1, n):\n        if lst[i][0] <= res[-1][1]:\n            res.append(lst[i])\n            ans = max(ans, len(res))\n        else:\n            res = [lst[i]]\n            ans = max(ans, len(res))\n    print(ans)\n    t -= 1\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n') == '7'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n3') == '1'\nassert solution('1\\n3\\n3') == '3'\nassert solution('1\\n3\\n4') == '1'\nassert solution('2\\n1\\n3') == '3'\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\nassert solution('10 3\\n22 15\\n22 22\\n10 5\\n22 12') == '12\\n2\\n2\\n0\\n2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    h, m = map(int, input().split())\n    print(h*60+m)\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('23 55\\n23 0\\n0 1\\n4 20\\n23 59') == '5\\n60\\n1439\\n1180\\n1'\n\"\"\"\n\nimport io\n\nstdin_text = \"\"\"5\n23 55\n23 0\n0 1\n4 20\n23 59\n\"\"\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\nprint(\"Success\")\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\nprint(\"Test finished.\")\n\n\n-----BEGIN ASSIGNMENT-----"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n23 55\n23 0\n0 1\n4 20\n23 59''') == '5\\n60\\n1439\\n1180\\n1'\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23 55\") == 5\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('LRUD') == 'LRUD'\nassert solution('LURD') == 'LURD'\nassert solution('LLDDR') == 'LDRDR'\n\"\"\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LRUD\") == \"LRUD\"\nassert solution(\"LURD\") == \"L\"\nassert solution(\"RRUDU\") == \"RRUDU\"\nassert solution(\"LLDDR\") == \"LLDRD\"\nassert solution(\"UDLRUDRD\") == \"UD\"\n\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURDLR\") == \"1 3\"\nassert solution(\"LLLDRR\") == \"2 3\"\nassert solution(\"LRDDRR\") == \"2 4\"\nassert solution(\"LURDLDR\") == \"1 4\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURDL\") == \"LDR\"\nassert solution(\"UDDDRRDDDLUULDRURDRDRDDRDRDDRDDRUDRDRDRDDRDRDRDRDRDRDRDRDRDRDRDDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"3 4\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"LRUD\") == \"UD\"\nassert solution(\"LURD\") == \"LRD\"\nassert solution(\"RRUDU\") == \"RRUD\"\nassert solution(\"LLDDR\") == \"LLDDR\"\n\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\nassert solution(\"RRUDLLDDLLLRUULRU\") == \"3 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LRUD\") == \"UDLR\"\nassert solution(\"LRUD\") == \"UDLR\"\nassert solution(\"LLDDRRR\") == \"RR\"\nassert solution(\"LLDDRRR\") == \"RR\"\nassert solution(\"RR\") == \"RR\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LRUD\") == \"LRUD\"\nassert solution(\"LURD\") == \"LRU\"\nassert solution(\"RRUDU\") == \"RRU\"\nassert solution(\"LLDDR\") == \"LLDR\"\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\") == \"3\\n1\\n0\\n2\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"7\\n4 2 4 1 4 3 4\") == \"1\"\nassert solution(\"7\\n1 1 5 4 3\") == \"0\"\nassert solution(\"7\\n1 1 1 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4') == '3\\n1\\n0\\n2'\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nimport numpy\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '3\\n1\\n0\\n2'\nassert solution('4\\n4\\n2 1 5 4 3') == '2\\n1\\n0\\n2'\nassert solution('1\\n1\\n4\\n1 1 1 3') == '1\\n0\\n0\\n2'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 4 1 4 3 4') == '3'\nassert solution('5 2 1 5 4 3') == '0'\nassert solution('1') == '0'\nassert solution('1 1 1 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('7\\n4 2 4 1 4 3 4') == '3'\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import List"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n4 2 4 1 4 3 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n7\n4 2 4 1 4 3 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n1\n4\n1 1 1 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\"\"\") == \"2\"\n\n\"\"\"\nNaive solution: Try all combinations with 2 teams.\n\nComplexity:\nO(2^n)\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\\n\") == \"121\"\nassert solution(\"1\\n1337\\n\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n1 4\\n2 2\\n2 4\\n1 3\\n2 3\\n3 3\\n2 2\\n3 4\\n1 2\\n2 3\\n2 4\\n3 4\\n\") == \"24\"\nassert solution(\"4 7\\n1 2\\n2 3\\n1 4\\n2 4\\n2 5\\n3 4\\n\") == \"20\"\nassert solution(\"3 4\\n1 2\\n3 3\\n4 4\\n\") == \"0\"\nassert solution(\"1 7\\n1 8\\n1 9\\n1 10\\n1 6\\n2 6\\n3 7\\n3 8\\n3 9\\n3 10\\n\") == \"30\"\nassert solution(\"1 9\\n1 8\\n1 7\\n1 10\\n1 6\\n2 6\\n3 7\\n3 8\\n3 9\\n3 10\\n\") == \"30\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == '0\\n'\n\nassert solution(\"1\\n1\\n1\\n\") == '0\\n'\n\nassert solution(\"1\\n3\\n\") == '1\\n'\n\nassert solution(\"3\\n1\\n\") == '2\\n'\n\nassert solution(\"2\\n1\\n\") == '1\\n'"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\\n') == '121'\nassert solution('1\\n1337\\n') == '0'\nassert solution('8\\n1 9 10 7\\n2 3\\n2 4\\n2 5\\n6 7\\n6 8\\n') == '11'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\n\nassert solution('1\\n1337') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\nassert solution('8\\n1337\\n') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n    n, k = list(map(int, sys.stdin.readline().split()))\n    a = list(map(int, sys.stdin.readline().split()))\n    a_sum = sum(a)\n    res = n\n    for i in range(1, n):\n        if a_sum % k!= 0:\n            a[i] += a[i-1]\n            a_sum += a[i-1]\n            res += 1\n    print(res)\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"0\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\n\n\n\n\n------Problem-----\n\nYou are given a list of N strings. For each string, check whether it is empty or a palindrome. Print the result for each string. If the string is empty, print \"YES\", otherwise print \"NO\". If the string is a palindrome, print \"YES\", otherwise print \"NO\".\n\n-----Input-----\n\nThe first line contains N \u2014 the number of strings.\n\nThe next N lines contain a string each.\n\nIt is guaranteed that the string consists of uppercase English letters only. The strings are not empty.\n\n-----Output-----\n\nFor each string, print the result on a new line: \"YES\" if the string is a palindrome, and \"NO\" if it is not.\n\n\n-----Example-----\nInput\n2\npalin\naba\nnot_palin\n\nOutput\nYES\nNO\n\n---Note---\n\nIf the input is:\n\n3\npalin\na\nb\n\noutput will be:\nYES\nNO\n\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for j in range(n):\n        l.append(input())\n    for s in l:\n        if s == \"\":\n            print(\"YES\")\n        else:\n            s = s.replace(' ','')\n            if s == s[::-1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"227\"\n\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n') == '6\\n18\\n0\\n227\\n8'\n\n-----"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 1\\n3 2') == '1\\n2'\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\\n8 8\\n1 2 3 4 5 6 7 8\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"1 10\") == \"0\"\nassert solution(\"10 6\") == \"6\"\nassert solution(\"8 7 1 8 3 7 5 10 8 9\") == \"8\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 1 2 3 2 1\") == \"2\"\nassert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"3\\n3 3\") == \"3\"\nassert solution(\"2\\n2 2\") == \"1\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[1,2,3],[1,1]\") == \"1\"\nassert solution(\"[1,2],[1,2,3]\") == \"2\"\nassert solution(\"[1,2,3],[1,1]\") == \"1\"\nassert solution(\"[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]\") == \"5\"\nassert solution(\"[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]\") == \"10\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('[1,2,3],[1,1]') == '1'\nassert solution('[1,2],[1,2,3]') == '2'\nassert solution('[1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[1,2,3],[1,1]\") == 1\nassert solution(\"[1,2],[1,2,3]\") == 2\nassert solution(\"[1,2,3],[1,1,4,3,1]\") == 2"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[1,2,3], [1,1]\") == \"1\"\nassert solution(\"[1,2], [1,2,3]\") == \"2\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1\n2\n3\n1\n2\n''') == '2'\nassert solution('''1\n2\n3\n1\n2\n''') == '2'\nassert solution('''1\n2\n3\n2\n3\n''') == '2'\nassert solution('''1\n2\n3\n3\n3\n''') == '3'\nassert solution('''1\n2\n3\n3\n3\n''') == '3'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 1\\n2 2') == '2'\nassert solution('1 1\\n2 2\\n3 3') == '2'\nassert solution('1 1\\n2 2\\n3 3\\n4 4') == '4'\n\nimport re"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '2'\nassert solution('4 4 4') == '4'\nassert solution('10 10 10') == '4'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1\\n1''') == '1'\nassert solution('''3\\n2''') == '2'\nassert solution('''3\\n3\\n5''') == '3'\nassert solution('''1\\n2\\n1''') == '1'\nassert solution('''2\\n4\\n3\\n1\\n4\\n1''') == '3'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1\\n1') == '2'\nassert solution('2 3\\n2 1\\n3 2') == '2'\nassert solution('1 1\\n3') == '0'\nassert solution('1 2\\n2') == '1'\nassert solution('1 1\\n1') == '1'\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == [1, 5, 10, 10, 5, 1]\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"O(n) / O(1)\"\"\"\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        cur = [1, 1]\n        if rowIndex == 1:\n            return [1, 1]\n\n        for i in range(1, rowIndex):\n            cur = [1] + [cur[i] + cur[i + 1] for i in range(len(cur) - 1)] + [1]\n        return cur\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == [1,3,3,1]\n\n\"\"\"\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> list:\n        if rowIndex == 0: return [1]\n        elif rowIndex == 1: return [1, 1]\n        else:\n            prev_row = [1, 1]\n            for i in range(2, rowIndex + 1):\n                cur_row = [1]\n                for j in range(len(prev_row) - 1):\n                    cur_row.append(prev_row[j] + prev_row[j + 1])\n                cur_row.append(1)\n                prev_row = cur_row\n            return cur_row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n'''"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\"\"\"\n\n\nclass Solution:\n    def getRow(self, numRows: int) -> List[List[int]]:\n        res = [[1] * (i + 1) for i in range(numRows)]\n        if numRows == 0:\n            return res\n        res[0][0] = 1\n        for i in range(1, numRows):\n            res[i][0] = 1\n            res[i][-1] = 1\n            for j in range(1, i):\n                res[i][j] = res[i - 1][j - 1] + res[i - 1][j]\n        return res\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == [1,3,3,1]\n\n\"\"\"\nimport math\n\nfrom tools import timing\n\n\nclass Solution:\n    @timing.time_this\n    def getRow(self, rowIndex: int) -> [int]:\n        if rowIndex < 2:\n            return [1, 1]\n\n        result = [1, 1]\n        for i in range(rowIndex - 1):\n            result = [1] + [result[j] + result[j + 1] for j in range(len(result) - 1)] + [1]\n        return result\n\n\nclass Solution2:\n    @timing.time_this\n    def getRow(self, rowIndex: int) -> [int]:\n        result = [0] * (rowIndex + 1)\n        result[0] = 1\n        for i in range(rowIndex):\n            for j in range(i, 0, -1):\n                result[j] += result[j - 1]\n            result[0] = 1\n        return result\n\n\nclass Solution3:\n    @timing.time_this\n    def getRow(self, rowIndex: int) -> [int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            last = result[:]\n            for j in range(i - 1):\n                last[j] = result[j] + last[j + 1]\n            result = last\n        return result\n\n\nclass Solution4:\n    @timing.time_this\n    def getRow(self, rowIndex: int) -> [int]:\n        result = []\n        for i in range(rowIndex + 1):\n            result.append(int(math.factorial(rowIndex) / (math.factorial(i) * math.factorial(rowIndex - i))))\n        return result\n\n\nclass Solution5:\n    @timing.time_this\n    def getRow(self, rowIndex: int) -> [int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        result = [1, 1]\n        for i in range(2, rowIndex + 1):\n            last = result[:]\n            for j in range(i - 1):\n                last[j] = result[j] + last[j + 1]\n            result = last\n        return result\n\n\nsolution = Solution()\nrow_index = 3\nprint(solution.getRow(row_index))\n\nsolution = Solution2()\nrow_index = 3\nprint(solution.getRow(row_index))\n\nsolution = Solution3()\nrow_index = 3\nprint(solution.getRow(row_index))\n\nsolution = Solution4()\nrow_index = 3\nprint(solution.getRow(row_index))\n\nsolution = Solution5()\nrow_index = 3\nprint(solution.getRow(row_index))\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == [1,3,3,1]\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"O(k) / O(k)\"\"\"\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        row = [1] * (rowIndex + 1)\n        for i in range(2, rowIndex + 1):\n            for j in range(i - 1, 0, -1):\n                row[j] += row[j - 1]\n        return row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n'''\nimport sys\nfrom typing import List\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        #\u5bf9\u6bcf\u4e00\u884c\u90fd\u53ef\u4ee5\u8fdb\u884c\u52a8\u6001\u89c4\u5212\uff0c\u9996\u5148\u6c42\u51fa\u524d\u9762\u7684\u4e24\u884c\uff0c\u518d\u6c42\u51fa\u5f53\u524d\u884c\n        #\u56e0\u4e3a\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u662f1\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662f\u524d\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e4b\u524d\u7684\u89e3\u6cd5\u8fdb\u884c\u6c42\u89e3\n        #\u6ce8\u610f\u8fd9\u91cc\u7684index\u662f0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8981\u5728\u524d\u9762\u52a0\u4e00\u4e2a1\n        pre = [1]\n        if rowIndex == 0:\n            return pre\n        elif rowIndex == 1:\n            return [1,1]\n        else:\n            for i in range(1, rowIndex+1):\n                temp = [1]\n                for j in range(1, len(pre)):\n                    temp.append(pre[j-1]+pre[j])\n                temp.append(1)\n                pre = temp\n        return pre"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\nassert solution(\"5\") == [1,5,10,10,5,1]\nassert solution(\"6\") == [1,6,15,20,15,6,1]\nassert solution(\"7\") == [1,7,21,35,35,21,7,1]\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            n &= (n - 1)\n            count += 1\n        return count\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0101111001011110111111111111111101') == 36\nassert solution('1111111111111111111111111111111111') == 31\nassert solution('1') == 1\nassert solution('1111111111111111111111111111111111') == 31\nassert solution('101010') == 5\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n'''\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        # if n < 0:\n        #     return 0\n        # return bin(n).count('1')\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight1(self, n: int) -> int:\n        return bin(n).count('1')\n\n    def hammingWeight2(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == [1]\nassert solution('1') == [1,2]\nassert solution('12') == [1,2,3]\nassert solution('123') == [1,2,4]\nassert solution('1234') == [1,2,3,4]\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"999\") == \"1000\"\nassert solution(\"12\") == \"13\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"999\") == \"1000\"\nassert solution(\"1234\") == \"1235\"\nassert solution(\"9\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"9999\") == \"1000\"\nassert solution(\"1111\") == \"1110\"\nassert solution(\"111\") == \"110\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1,2,3') == '1,2,4'\nassert solution('4,3,2,1') == '4,3,2,2'\nassert solution('4,3,2,9') == '4,3,2,0'\nassert solution('4,3,9,9') == '4,3,0,0'\n\n\"\"\"\n\n\"\"\"\nNotes:\n\nThe tricky part here is dealing with the number 9, when we add a 1 to it.\n\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"998\") == \"999\"\nassert solution(\"10\") == \"11\"\n\nassert solution(\"1\") == \"2\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234') == '1235'\nassert solution('9') == '1'\nassert solution('11') == '11'\nassert solution('0') == '1'\nassert solution('1') == '2'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"9123\") == \"10123\"\nassert solution(\"0\") == \"1\"\nassert solution(\"100\") == \"101\"\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123') == '124'\nassert solution('999') == '1000'\nassert solution('1234') == '1235'\nassert solution('567') == '568'\nassert solution('1000') == '1001'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution( [1,2,3] ) == [1,2,4]\nassert solution( [4,3,2,1] ) == [4,3,2,2]\nassert solution( [1] ) == [2]\nassert solution( [0] ) == [1]\nassert solution( [9,9,9] ) == [1,0,0,0]\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\nfrom operator import add, sub, mul"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"3 0\") == \"3\"\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(max(a+b, a-b, a*b))"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"3 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '4'\nassert solution('3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '4'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\na, b = map(int, stdin.split())\nmax_num = max(a+b, abs(a-b), a*b)\nprint(max_num)\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    a, b = line.split()\n    print(int(a) + int(b), int(a) - int(b), int(a) * int(b))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '3'\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'\n\"\"\"\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('0 5') == '3'\n'''"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\nfrom collections import deque\nfrom math import sqrt\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"42\") == \"No\"\n\n'''\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\nassert solution('10') == 'No'\nassert solution('111') == 'Yes'\nassert solution('4') == 'No'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12') == 'Yes'\nassert solution('13') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12') == 'Yes'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12') == 'Yes'\nassert solution('13') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\na = list(map(int, sys.stdin.readline().rstrip().split()))\n\nans = []\nfor i in range(n):\n    if i == 0:\n        ans.append(abs(a[i] - a[i + 1]))\n    elif i == n - 1:\n        ans.append(abs(a[i - 1] - a[i]))\n    else:\n        ans.append(min(abs(a[i - 1] - a[i]), abs(a[i] - a[i + 1])))\n\nfor i in ans:\n    print(i)\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4') == '5\\n3\\n4\\n5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\n-----\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\n\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\ncost = [abs(A[i] - A[i - 1]) for i in range(1, N)]\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\nassert solution('c') == 'vowel'\nassert solution('d') == 'consonant'\nassert solution('e') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == 'vowel'\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'vowel'\nprint(solution('a'))\n\n---Problem 3: N-Queens---\nYou are given a 6x6 Chess board, and a number of Queens N.\nThe Chess board is given as a 2D array of strings.\nEach cell of the chess board has a value corresponding to the row and column of the cell.\nReturn the number of distinct solutions to the N queens problem, which can be interpreted as the number of distinct board configurations where N queens can be placed on the Chess board without threatening each other,\nor the number of distinct ways to arrange N queens on the Chess board.\n\n-----Constraints-----\n1 <= N <= 7\n\n-----Input-----\nYou are given a 6x6 Chess board, and a number of Queens N.\nThe Chess board is given as a 2D array of strings.\nEach cell of the chess board has a value corresponding to the row and column of the cell.\n\n-----Output-----\nReturn the number of distinct solutions to the N queens problem,\nwhich can be interpreted as the number of distinct board configurations where N queens can be placed on the Chess board without threatening each other.\n\n-----Sample Input-----\n1\n1 1\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\n-----Sample Output-----\n2\n\nThe two distinct solutions to the N queens problem are:\n\n(0, 0) (0, 1)\n(1, 0) (2, 0)\n\nSince there are two distinct solutions, return 2."
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\nassert solution('c') == 'consonant'\nassert solution('d') == 'consonant'\nassert solution('e') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\n\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'vowel'\n\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"u\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nExplanation:\nThe following solution works:\n\nWe start from the left end of the row, and count the number of white stones on the row. When we encounter a white stone, we check if it is the first or the last one on the row. If it is the first, we can skip it since all white stones before the current white stone must be turned into black stones. Similarly, if it is the last, we can skip it since all white stones after the current white stone must be turned into black stones.\nThen we move to the right end of the row, and do the same check as above. We count the number of black stones in the row.\nThe minimum number of new stones that Jiro needs to place for his purpose is the smaller of the two counts."
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"BWBWW\") == \"1\"\nassert solution(\"BBWBB\") == \"0\"\nassert solution(\"WWBWW\") == \"0\"\nassert solution(\"WWBBW\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWW\") == 0\nassert solution(\"BBBB\") == 0\nassert solution(\"BBBWW\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == 1\nprint(\"Passed\")\n\nassert solution(\"BWBWB\") == 1\nprint(\"Passed\")\n\nassert solution(\"WBWBWB\") == 0\nprint(\"Passed\")\n\nassert solution(\"WBBBWB\") == 1\nprint(\"Passed\")\n\nassert solution(\"BBBBB\") == 0\nprint(\"Passed\")"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WWBWWBWWWW\") == 3\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWBWBWB') == '0'\nassert solution('WWBBBBBWW') == '1'\nassert solution('BWBWBWBWW') == '2'\nassert solution('WWWWBWBWB') == '1'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\n\nfrom __future__ import annotations\n\nimport re\n\nfrom collections import Counter\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == 1\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BBW\") == \"1\"\nassert solution(\"BWB\") == \"0\"\nassert solution(\"WW\") == \"0\"\nassert solution(\"BBWBB\") == \"0\"\nassert solution(\"BW\") == \"1\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WWBBW') == 1\nassert solution('WWBWBWBWBWWBWBWBW') == 1\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'No'\nassert solution('1 1') == 'Yes'\nassert solution('3 5') == 'Yes'\nassert solution('1221 966') == 'Yes'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 21\") == \"Yes\"\nassert solution(\"31 21\") == \"No\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"11 1\") == \"Yes\"\nassert solution(\"11 21\") == \"Yes\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 21\\n') == 'Yes'\n\"\"\"\n\nfrom unittest import TestCase, mock\nimport io\nimport unittest\nfrom unittest.mock import patch\nfrom src.solution import solution\n\n\nclass TestSolution(TestCase):\n    @patch('sys.stdout', new_callable=io.StringIO)\n    def assert_stdout(self, expected_output: str, mock_stdout: io.StringIO, function: any, args: tuple):\n        function(*args)\n        self.assertEqual(mock_stdout.getvalue(), expected_output)\n\n    def test_solution_example_1(self):\n        assert solution(io.StringIO('1 21\\n')) == 'Yes'\n\n    def test_solution_example_2(self):\n        assert solution(io.StringIO('1 10\\n')) == 'No'\n\n    def test_solution_example_3(self):\n        assert solution(io.StringIO('20 20\\n')) == 'Yes'\n\n    def test_solution_example_4(self):\n        "
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"1 21\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"1 21\") == \"No\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 4\\n\") == \"2\"\nassert solution(\"2\\n1 2\\n\") == \"1\"\nassert solution(\"2\\n1 2\\n\") == \"1\"\nassert solution(\"2\\n1 2\\n\") == \"1\"\nassert solution(\"4\\n4 4\\n\") == \"2\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8\n3 1 4 1 5 9 2\n''') == '4'\nassert solution('''9\n3 1 4 1 5 9 2 6 5\n''') == '6'\nassert solution('''7\n3 1 4 1 5 9 2\n''') == '4'\nassert solution('''10\n4 1 4 1 5 9 2 6 5 3\n''') == '6'\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\nassert solution(\"10\\n2 3 6 5 9 7 9 4 1 8 3\") == \"6\"\nassert solution(\"6\\n5 3 7 2 1 4 6\") == \"4\"\nassert solution(\"3\\n3 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 4 1 5 9 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 4 1 5 9 2') == 4\nassert solution('7 1 2 6 4 7 8 9') == 2\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\narr = list(map(int, sys.stdin.readline().strip().split()))\nans = [0] * n\n\nfor x in range(1, max(arr) + 1):\n    for i in range(n):\n        if arr[i] == x:\n            ans[i] += 1\n\nprint(max(ans))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nprint('Hooray, you have solved the problem!')\n\nSample Input:\n4\n5\n\nSample Output:\n5\n\nExplanation:\nThere are nine squares in a 4 \\times 4 square grid.\nFour of them will be painted white, so the remaining five squares will be painted black.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\") == \"5\"\n\"\"\"\n\nfrom math import ceil\n\nstdin = input()\nN = int(stdin)\nA = int(stdin)\n\ncount = ceil(N / 2) * N\n\nprint(count - A)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n4''') == '5'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4\n''') == '5'\nassert solution('''\n3\n4\n''') == '5'\nassert solution('''\n3\n3\n''') == '0'\nassert solution('''\n4\n3\n''') == '0'\nassert solution('''\n7\n1\n''') == '1'\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"2 1 1\") == \"NO\"\nassert solution(\"2 3 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 4 6') == 'YES'\nassert solution(\n    '1 1 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 6') == \"YES\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"1 1 2\") == \"NO\"\n\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import Any\nimport sys\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '2 4 6'\n) == 'YES'\n\nassert solution(\n    '5 7 3'\n) == 'YES'\n\nassert solution(\n    '2 4 1'\n) == 'NO'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"4 2 6\") == \"NO\"\nassert solution(\"2 2 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\nassert solution(\"1 1 3\") == \"NO\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 5 4\") == \"NO\"\nassert solution(\"1 2 3\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n\uc704\uc5d0 \uc8fc\uc5b4\uc9c4 \uc870\uac74\ub300\ub85c \ud480\uae30\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\n\nThe one's digit of 29 is 9.\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('29') == 'Yes'\nassert solution('19') == 'No'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"18\") == \"No\"\nassert solution(\"99\") == \"No\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n'''\n\nfrom math import floor"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29\") == 'Yes'\nassert solution(\"21\") == 'No'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('29') == 'Yes'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\") == \"Yes\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123) == \"Yes\"\nassert solution(217) == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\"\"\"\nimport sys\n\nN, M, X = list(map(int, sys.stdin.readline().split(' ')))\nA = list(map(int, sys.stdin.readline().split(' ')))\n\ncosts = [0] * N\ncosts[X] = 1\n\nfor i in range(1, N):\n    for j in range(N):\n        if j + 1 == A[i - 1] or j - 1 == A[i - 1]:\n            costs[j] = min(costs[j], costs[j - 1] + 1)\n\nfor i in range(N - 2, -1, -1):\n    for j in range(N):\n        if j + 1 == A[i] or j - 1 == A[i]:\n            costs[j] = min(costs[j], costs[j + 1] + 1)\n\nprint(costs[N - 1])\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == 1\n\n-------\nIf there are multiple ways to reach the destination, print the smallest one.\nEx:\nN = 7\nM = 6\nX = 3\nA = [3, 4, 5, 6, 7, 1, 2]\n\n1) Travel from Square X to Square 2 and incur a cost of 1.\n2) Travel from Square X to Square 1 and incur a cost of 1.\n3) Travel from Square X to Square 0 and incur a cost of 1.\n4) Travel from Square 1 to Square 2 and incur a cost of 1.\n5) Travel from Square 1 to Square 3 and incur a cost of 1.\n6) Travel from Square 1 to Square 5 and incur a cost of 1.\n7) Travel from Square 1 to Square 4 and incur a cost of 1.\n8) Travel from Square 2 to Square 3 and incur a cost of 1.\n9) Travel from Square 2 to Square 5 and incur a cost of 1.\n10) Travel from Square 2 to Square 4 and incur a cost of 1.\n11) Travel from Square 3 to Square 4 and incur a cost of 1.\n12) Travel from Square 3 to Square 5 and incur a cost of 1.\n13) Travel from Square 3 to Square 6 and incur a cost of 1.\n14) Travel from Square 4 to Square 5 and incur a cost of 1.\n15) Travel from Square 4 to Square 6 and incur a cost of 1.\n16) Travel from Square 5 to Square 6 and incur a cost of 1.\n17) Travel from Square 6 to Square 7 and incur a cost of 1.\n18) Travel from Square 6 to Square 0 and incur a cost of 1.\n19) Travel from Square 7 to Square 0 and incur a cost of 1.\n20) Travel from Square 7 to Square 1 and incur a cost of 1.\n21) Travel from Square 0 to Square 2 and incur a cost of 1.\n22) Travel from Square 0 to Square 1 and incur a cost of 1.\n23) Travel from Square 0 to Square 3 and incur a cost of 1.\n24) Travel from Square 0 to Square 4 and incur a cost of 1.\n25) Travel from Square 0 to Square 5 and incur a cost of 1.\n26) Travel from Square 0 to Square 6 and incur a cost of 1.\n27) Travel from Square 0 to Square 7 and incur a cost of 1.\n28) Travel from Square 1 to Square 2 and incur a cost of 1.\n29) Travel from Square 1 to Square 3 and incur a cost of 1.\n30) Travel from Square 1 to Square 4 and incur a cost of 1.\n31) Travel from Square 1 to Square 5 and incur a cost of 1.\n32) Travel from Square 1 to Square 6 and incur a cost of 1.\n33) Travel from Square 1 to Square 7 and incur a cost of 1.\n34) Travel from Square 2 to Square 3 and incur a cost of 1.\n35) Travel from Square 2 to Square 4 and incur a cost of 1.\n36) Travel from Square 2 to Square 5 and incur a cost of 1.\n37) Travel from Square 2 to Square 6 and incur a cost of 1.\n38) Travel from Square 2 to Square 7 and incur a cost of 1.\n39) Travel from Square 3 to Square 4 and incur a cost of 1.\n40) Travel from Square 3 to Square 5 and incur a cost of 1.\n41) Travel from Square 3 to Square 6 and incur a cost of 1.\n42) Travel from Square 3 to Square 7 and incur a cost of 1.\n43) Travel from Square 4 to Square 5 and incur a cost of 1.\n44) Travel from Square 4 to Square 6 and incur a cost of 1.\n45) Travel from Square 4 to Square 7 and incur a cost of 1.\n46) Travel from Square 5 to Square 6 and incur a cost of 1.\n47) Travel from Square 5 to Square 7 and incur a cost of 1.\n48) Travel from Square 6 to Square 7 and incur a cost of 1.\n49) Travel from Square 7 to Square 0 and incur a cost of 1.\n50) Travel from Square 7 to Square 1 and incur a cost of 1.\n51) Travel from Square 7 to Square 2 and incur a cost of 1.\n52) Travel from Square 0 to Square 1 and incur a cost of 1.\n53) Travel from Square 0 to Square 2 and incur a cost of 1.\n54) Travel from Square 0 to Square 3 and incur a cost of 1.\n55) Travel from Square 0 to Square 4 and incur a cost of 1.\n56) Travel from Square 0 to Square 5 and incur a cost of 1.\n57) Travel from Square 0 to Square 6 and incur a cost of 1.\n58) Travel from Square 0 to Square 7 and incur a cost of 1.\n59) Travel from Square 1 to Square 2 and incur a cost of 1.\n60) Travel from Square 1 to Square 3 and incur a cost of 1.\n61) Travel from Square 1 to Square 4 and incur a cost of 1.\n62) Travel from Square 1 to Square 5 and incur a cost of 1.\n63) Travel from Square 1 to Square 6 and incur a cost of 1.\n64) Travel from Square 1 to Square 7 and incur a cost of 1.\n65) Travel from Square 2 to Square 3 and incur a cost of 1.\n66) Travel from Square 2 to Square 4 and incur a cost of 1.\n67) Travel from Square 2 to Square 5 and incur a cost of 1.\n68) Travel from Square 2 to Square 6 and incur a cost of 1.\n69) Travel from Square 2 to Square 7 and incur a cost of 1.\n70) Travel from Square 3 to Square 4 and incur a cost of 1.\n71) Travel from Square 3 to Square 5 and incur a cost of 1.\n72) Travel from Square 3 to Square 6 and incur a cost of 1.\n73) Travel from Square 3 to Square 7 and incur a cost of 1.\n74) Travel from Square 4 to Square 5 and incur a cost of 1.\n75) Travel from Square 4 to Square 6 and incur a cost of 1.\n76) Travel from Square 4 to Square 7 and incur a cost of 1.\n77) Travel from Square 5 to Square 6 and incur a cost of 1.\n78) Travel from Square 5 to Square 7 and incur a cost of 1.\n79) Travel from Square 6 to Square 7 and incur a cost of 1.\n80) Travel from Square 7 to Square 0 and incur a cost of 1.\n81) Travel from Square 7 to Square 1 and incur a cost of 1.\n82) Travel from Square 7 to Square 2 and incur a cost of 1.\n83) Travel from Square 0 to Square 1 and incur a cost of 1.\n84) Travel from Square 0 to Square 2 and incur a cost of 1.\n85) Travel from Square 0 to Square 3 and incur a cost of 1.\n86) Travel from Square 0 to Square 4 and incur a cost of 1.\n87) Travel from Square 0 to Square 5 and incur a cost of 1.\n88) Travel from Square 0 to Square 6 and incur a cost of 1.\n89) Travel from Square 0 to Square 7 and incur a cost of 1.\n90) Travel from Square 1 to Square 2 and incur a cost of 1.\n91) Travel from Square 1 to Square 3 and incur a cost of 1.\n92) Travel from Square 1 to Square 4 and incur a cost of 1.\n93) Travel from Square 1 to Square 5 and incur a cost of 1.\n94) Travel from"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 3 3\n1 2 4\n''') == \"1\"\nassert solution('''\n5 3 3\n1 2 3\n''') == \"0\"\nassert solution('''\n5 3 3\n4 2 5\n''') == \"3\"\nassert solution('''\n5 2 3\n4 1 5\n''') == \"2\"\nassert solution('''\n5 2 3\n3 1 4\n''') == \"0\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n1 2 4\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\\n1 2 3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 2\\n1 3 1 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 3\\n1 2 4\") == \"1\"\nassert solution(\"5 3 2\\n4 1 3\\n2 4 1\") == \"3\"\nassert solution(\"5 3 1\\n4 1 3\\n2 4 1\") == \"1\"\nassert solution(\"5 4 2\\n4 1 3\\n2 4 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\n\n\"\"\"\n\nimport sys\n\nfrom sys import stdin\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4 3 1\") == 1\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\nimport itertools\nimport sys\nimport pdb\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n.#.\n###\n.#.\n''') == 'Yes'\n\nassert solution('''\n3 3\n##.\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\nh, w = [int(x) for x in stdin.split()]\n\ns = [list(x) for x in stdin.split(\"\\n\")]\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\nh, w = map(int, stdin.readline().split())\nstart = stdin.readline().strip()\nend = stdin.readline().strip()"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n.#\\n###\\n.#\\n') == 'Yes'\nassert solution('3 3\\n.#\\n###\\n.#\\n') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\nassert solution(\"3 3\\n.##\\n###\\n.#.\") == \"No\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#.\\n###\\n.#.\") == \"Yes\"\nassert solution(\"...\\n###\\n...\\n\") == \"No\"\n\n'''"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n..\") == \"No\"\nassert solution(\"2 2\\n..#\") == \"Yes\"\nassert solution(\"3 5\\n....#\\n#..#.\\n.###.\") == \"Yes\"\nassert solution(\"1 10\\n...#.#\\n.#.###\") == \"Yes\"\nassert solution(\"1 1\\n#\") == \"Yes\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\nassert solution('3 3\\n...\\n###\\n...') == 'No'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 30 20') == 'Yes'\n\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('10 10 10') == 'Yes'\nassert solution('10 20 10') == 'No'"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"5 5 5\") == \"Yes\"\nassert solution(\"10 3 5\") == \"No\"\nassert solution(\"10 3 10\") == \"Yes\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n'''\n\n'''\nfrom typing import List"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('10 30 1') == 'No'\nassert solution('10 1 30') == 'Yes'\n\"\"\"\n\nn = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 20 30\") == \"Yes\"\nassert solution(\"20 10 30\") == \"No\"\nassert solution(\"30 10 20\") == \"Yes\"\nassert solution(\"20 10 30\") == \"Yes\"\n\"\"\"\n\na, b, c = [int(c) for c in stdin.split()]"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 7 1\") == 'Left'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nA balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nA balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nA balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nA balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nA balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nA balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n\n-----Sample Input-----\n3 8 7 1\n\n-----Sample Output-----\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\"\"\"\n\n\"\"\"\nSOLUTION\n\nA balance scale tips to the left if L>R, where L is the total weight"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\nA, B, C, D = map(int, input().split(' '))\nprint(\"Left\" if A + B > C + D else \"Right\" if A + B < C + D else \"Balanced\")\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 7 1') == 'Left'\nassert solution('9 9 9 9') == 'Balanced'\nassert solution('1 1 1 1') == 'Right'\nassert solution('3 4 4 5') == 'Right'\n\nprint(\"The code ran Correctly\")"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == 8\nassert solution('2 1 1 1 0 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == 6\nassert solution('3 1 1 1 1 0 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == 4\nassert solution('4 1 1 1 1 1 0 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == 6\nassert solution('5 1 1 1 1 1 1 0 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == 6\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1 0 0 0 1 0 1\") == \"8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == 8\nassert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == 8\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nN = int(input())\nF = [list(map(int, input().split())) for i in range(N)]\nP = [list(map(int, input().split())) for i in range(2 * N)]\n\ndp = [[0] * 2 for i in range(N + 1)]\nfor i in range(N):\n    for j in range(2):\n        dp[i + 1][j] = max(dp[i][j], dp[i][j ^ 1] + P[i][j])\n\nprint(dp[-1][0])\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == '8'\n\n\"\"\"\n\nfrom typing import NamedTuple\nfrom enum import IntEnum\nfrom collections import namedtuple\n\nclass Weekdays(IntEnum):\n    MON = 1\n    TUE = 2\n    WED = 3\n    THU = 4\n    FRI = 5\n\nclass Period(IntEnum):\n    MOR = 1\n    AFT = 2"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == \"8\"\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1') == '8'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"999-999\") == \"No\"\nassert solution(\"A23B\") == \"Yes\"\nassert solution(\"9ABC\") == \"Yes\"\nassert solution(\"JKLMNOP\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('34-5') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == 'Yes'\nassert solution(\"3 4\") == 'No'\nassert solution(\"3 4\") == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"Yes\"\n\nprint(solution(\"269-6650\"))"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"229-9731\") == \"No\"\n\"\"\"\n\nA, B = map(int, input().split())\nS = input()\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"123-4567\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-6651\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n269-6650\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 6\\n') == '1'\n\nassert solution('1 2 6\\n') == '0'\n\nassert solution('1 2 3\\n') == '1'\n\nassert solution('1 1 1\\n') == '0'\n\nassert solution('1 1 10\\n') == '9'\n\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n\nfrom math import sqrt, ceil\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"10 10 10\") == \"10\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"4 7 7\") == \"3\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 6') == '1'\nassert solution('5 5 1') == '0'\nassert solution('4 2 6') == '1'\nassert solution('1 5 1') == '0'\nassert solution('7 7 9') == '5'\n\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\\n\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 6\\n') == '1'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nimport typing as t\n\nfrom collections import namedtuple\n\n\nclass Rectangle(namedtuple('Rectangle', ['x', 'y', 'width', 'height'])):\n\n    def __str__(self) -> str:\n        return f'({self.x}, {self.y}, {self.width}, {self.height})'\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2 6''') == '1'\nassert solution('''3 2 1''') == '2'\nassert solution('''3 0 0''') == '0'\n'''\n\nAtCoDeer the deer found two rectangles lying on the table, each with height 1 and width W.\nIf we consider the surface of the desk as a two-dimensional plane, the first rectangle covers the vertical range of [0,1] and the horizontal range of [a,a+W], and the second rectangle covers the vertical range of [1,2] and the horizontal range of [b,b+W], as shown in the following figure:\n\nAtCoDeer will move the second rectangle horizontally so that it connects with the first rectangle.\nFind the minimum distance it needs to be moved.\n\n-----Constraints-----\n - All input values are integers.\n - 1\u2264W\u226410^5\n - 1\u2264a,b\u226410^5\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nW a b\n\n-----Output-----\nPrint the minimum distance the second rectangle needs to be moved.\n\n-----Sample Input-----\n3 2 6\n\n-----Sample Output-----\n1\n\nThis input corresponds to the figure in the statement. In this case, the second rectangle should be moved to the left by a distance of 1.\n\n'''"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\nimport math\n\nW, A, B = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2 6') == '1'\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\nprint('Hooray!! The solution compiles successfully')\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3,8,2) == \"3 4 7 8\"\nprint(\"PASS\")\n\n-----\n3 8 2\n\n-----\n3 4 7 8\n\n-----\n4 5 9 1\n\n-----\n4 5 1 9\n\n-----\n4 5 9 1\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9\n\n-----\n4 5 1 9"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3 10') == '1'\nassert solution('1 3 2') == '2'\nassert solution('2 10 5') == '3'\nassert solution('2 2 2') == '2'\nassert solution('2 10 5') == '3'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\nassert solution('AtCoder Intermediate Contest') == 'IC'\nassert solution('AtCoder Senior Contest') == 'SC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder Grand Contest\") == \"GC\"\nassert solution(\"AtCoder Regular Contest\") == \"ARC\"\nassert solution(\"AtCoder Division One Contest\") == \"D1\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(AtCoder Beginner Contest) == \"ABC\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\nstdin = input()\n\nprint(\"ABC\" if stdin.startswith(\"AtCoder\") else \"Contest\")\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(AtCoder Beginner Contest) == \"ABC\"\n\"\"\"\n\n\"\"\"\nYou are given a string s that consists of only English letters.\nA valid string has two or more vowels (a, e, i, o, u).\nIf there are two or more vowels, return the substring that has the most vowels.\nIf there are no vowels, return the empty string.\n\n-----Constraints-----\n - The length of s is between 1 and 100, inclusive.\n - s consists of English letters only.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\ns\n\n-----Output-----\nPrint the substring that has the most vowels.\n\n-----Sample Input-----\nEveryday Is A Contest\n\n-----Sample Output-----\nEveryday\n\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nassert solution(\"AtCoder C Contest\") == \"ACA\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"AtCoder Beginner Contest\"\n) == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\nimport sys\nimport os\nfrom typing import Any, Union\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 4\") == \"YES\"\nassert solution(\"3 5 3\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 4\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('2 2 1') == 'YES'\nassert solution('2 3 1') == 'NO'\nassert solution('10 100 2') == 'YES'\nassert solution('5 5 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\"\n\na, b, x = map(int, input().split())\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"2 2 4\") == \"NO\"\nassert solution(\"2 3 6\") == \"YES\"\nassert solution(\"3 5 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 17') == '83'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 17') == '83'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 17') == '83'"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 17') == '83'\n\n'''"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == \"83\"\nassert solution(\"1 10\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 17') == '83'\nprint('Test pass.')\n\n---"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n') == 6\nassert solution('1\\n2\\n3\\n4\\n') == 24\nassert solution('1\\n2\\n3\\n4\\n5\\n') == 120\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == 504\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == 362880\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100\\n100\\n') == '1000000000000000000'\nprint(solution(stdin))\n\n2: The \"standard\" input is defined at the top of the file. This argument is ignored.\n\n3: We have included input and output definitions for you. You are not required to provide these, and you can modify them if you want, though just be careful to ensure that your code still passes the automated tests.\n\n4: To pass one or more automated tests, run this file as `python3 problem.py`.\n\n5: To understand better what the \"standard\" input is, review the definition of the function. The function `solution(stdin)` takes a \"standard\" input string `stdin` and returns a string `stdout`.\n\n6: The rules of this problem are the same as the rules of standard input and output:\n\nYou can test this problem by running your code on the following \"standard\" input and output:\n```pycon\n>>> print(solution(\"100\\n100\\n\"))\n1000000000000000000\n>>> print(solution(\"3\\n1\\n2\\n3\\n\"))\n6"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 1000000000\\n') == '1000000000000000000'\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(int(input()))"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000000000 1000000000\") == \"1000000000000000000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"2\\n2 1\") == \"1\"\nassert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"6\"\nassert solution(\"3\\n3 1 2\") == \"6\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 1000000000') == '1000000000000000000'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1\\n100\") == \"1000000000000000000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n0') == '0'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('2\\n0\\n0') == '0'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('010\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('218\\n4\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\"\n\n\"\"\"\nGiven the values of N and A, write a program that prints Yes or No (without quotes) depending on whether the amount to be paid can be exactly N using only the given type of coins.\n\n-----Input-----\nThe first line contains N, the second line contains A.\n\n-----Output-----\nPrint Yes if the payment can be exactly N, and otherwise print No.\n\n-----Sample Input-----\n500\n300\n\n-----Sample Output-----\nYes\n\nThe amount to be paid is 500 and the value of coins are 300. So, the answer is Yes.\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('218\\n2018') == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\\n218\\n\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2018\n218''') == 'Yes'\nassert solution('''4\n2\n''') == 'No'\nassert solution('''\n4\n1\n''') == 'Yes'\nassert solution('''\n6\n2\n''') == 'No'\nassert solution('''\n12\n1\n''') == 'Yes'\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\"\n\nimport re\nfrom collections import Counter"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 6\") =='safe'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n\nx, a, b = map(int, stdin.split())"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n') == 'dangerous'\nassert solution('4 3 6\\n') =='safe'\n\n-----Problem-----\nKadane's Algorithm\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('3 3 6') == 'dangerous'\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"2 1 1\") == \"dangerous\"\nassert solution(\"1 1 1\") == \"dangerous\"\nassert solution(\"1 1000000000 1\") == \"dangerous\"\nassert solution(\"1 1 1\") == \"dangerous\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '9'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5''') == '1'\nassert solution('''10''') == '9'\nassert solution('''10\n5\n12\n3\n6\n15\n1\n5\n8\n20\n7''') == '19'\nassert solution('''5\n7\n12\n6\n7\n8\n16\n10\n4\n2\n14\n3''') == '12'\nassert solution('''9\n14\n15\n18\n19\n10\n15\n18\n5\n9\n9\n11\n12\n14\n17\n4\n3\n13\n7\n5\n18\n17\n16\n6\n15\n8\n14\n20\n9\n15\n7''') == '20'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '9'\nassert solution('1') == '0'\n\n---\n\n\nFind the largest square number not exceeding N.\n\nGiven an integer N, find the largest square number not exceeding N.\n\nInput Format\nThe first and only line of the input contains the integer N.\n\nConstraints\n - 1 <= N <= 10^9\n\nOutput Format\nPrint the largest square number not exceeding N.\n\nSample Input 0\n5\n\nSample Output 0\n4\n\nExplanation 0\nThe largest square number not exceeding 5 is 4, that is, 36.\n\nSample Input 1\n10\n\nSample Output 1\n9\n\nExplanation 1\nThe largest square number not exceeding 10 is 9, that is, 81.\n\"\"\"\nimport math\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"8\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '9'\nprint(solution('10'))\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '9'\nassert solution('30') == '25'\nassert solution('1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3\\n1 1\\n3 2') == 10\n\n\"\"\"\n\n\nimport sys\nfrom math import gcd\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 3\\n1 1\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n2 3\n1 1\n3 2\n\"\"\") == \"10\"\n\n-----\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == expected_result\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 1') == '6'\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3\\n1 1\\n3 2') == '10'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 'no'\nassert solution('abcde') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('uncopyrightable') == \"yes\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 'yes'\nassert solution('abca') == 'yes'\nassert solution('ababc') == 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\n------"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WEEWE\") == 0\nassert solution(\"WWEEW\") == 0\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('WEEWW') == '1'\nassert solution('WWEEW') == '0'\nassert solution('WWEEWW') == '1'\nassert solution('WWWEWW') == '3'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WEEWW') == 1\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"SWEEW\") == 0\nassert solution(\"WWWEEW\") == 2\nassert solution(\"WEEWWEW\") == 0\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nWEEWW') == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WEEWW\") == 1\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"SWEEW\") == \"0\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WEEWW') == 1\nassert solution('WWWE') == 0\nassert solution('WWWEW') == 2\nassert solution('WWWEE') == 2\nassert solution('WWWEE') == 2\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WEEWW') == 1\n\nIf you have passed the previous testcase, the answer is 1.\n\nIf you are stuck, please check the sample inputs and outputs to see whether the problem can be solved by other means.\n\nPlease note that stdin.readline() throws an error when stdin does not have any input.\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WWWEEW\") == 0\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # O(N)\n        n = int(stdin[0])\n        directions = stdin[1]\n        res = 0\n        \n        for direction in directions:\n            if direction == \"E\":\n                res += 1\n        return res\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n        \n    def test_solution(self):\n        assert self.solution(\"WEEWW\") == 1\n        assert self.solution(\"WWWEEW\") == 0"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''4 3\n1 2\n2 3\n1 4\n'''\n) == '''2\n2\n1\n1'''\nassert solution(\n'''4 3\n1 2\n2 3\n1 4\n'''\n) == '''2\n2\n1\n1'''\nassert solution(\n'''4 3\n1 2\n2 3\n1 4\n'''\n) == '''2\n2\n1\n1'''\nassert solution(\n'''4 3\n1 2\n2 3\n1 4\n'''\n) == '''2\n2\n1\n1'''\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4\\n') == '2\\n2\\n1\\n1'\nassert solution('4 3\\n1 2\\n2 3\\n1 4\\n') == '2\\n2\\n1\\n1'\n\nassert solution('1 2\\n2 3\\n1 4\\n') == '1\\n1\\n0'\nassert solution('1 2\\n2 3\\n1 4\\n') == '1\\n1\\n0'\n\nassert solution('2 1\\n1 2\\n1 3\\n') == '0\\n0\\n1'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '''2\n2\n1\n1'''\n\"\"\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n3 4') == '0'\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '''2\n2\n1\n1'''\n\nassert solution('''4 3\n1 2\n2 3\n1 4\n3 4''') == '''2\n2\n1\n1'''\n\nassert solution('''4 3\n1 2\n3 4\n1 4''') == '''2\n1\n1\n1'''\n\nassert solution('''4 3\n1 2\n3 2\n1 4\n2 4''') == '''2\n1\n2\n1'''\n\nassert solution('''4 3\n1 2\n2 3\n2 4\n3 4''') == '''2\n1\n1\n2'''"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '2 2 1 1'\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\n\"\"\"\n\n\n\"\"\"\n### IMPORTANT ###\n\nIn general, the input is a graph.\n- How many roads do we need?\n- How many roads does each node have?\n- How many nodes do we have?\n\n\"\"\"\n\n\"\"\"\n### IMPORTANT ###\n\nIn general, the input is a graph.\n- How many roads do we need?\n- How many roads does each node have?\n- How many nodes do we have?\n\n\"\"\"\n\n\n\"\"\"\nimport collections\n\n###########################################################################################\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"8 5\\n1 2\\n3 4\\n4 5\\n5 6\\n2 3\\n2 4\\n3 5\\n1 7\") == \"4\\n4\\n3\\n2\\n1\"\n\n------\n\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434 \u0438 \u0440\u0430\u0441\u043f\u0430\u043a\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a. \u0414\u0430\u043b\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0446\u0438\u043a\u043b \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0439\u0442\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u0448\u043a\u043e\u043b\u044b \u043f\u043e \u0448\u043a\u0430\u043b\u0435 \u043e\u0442 1 \u0434\u043e 5. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0431\u0430\u043b\u043b\u044b \u043e\u0446\u0435\u043d\u043e\u043a \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 (1\u2264n\u2264100) \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0443. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 nn \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043f\u0430\u0440\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 \u043e\u0446\u0435\u043d\u043a\u0430 \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438 \u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441. \u041e\u0446\u0435\u043d\u043a\u0430 \u2014 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 5, \u043a\u043b\u0430\u0441\u0441 \u2014 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 12. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0435\u0432\u0430\u0436\u0435\u043d. \u0415\u0441\u043b\u0438 \u0443 \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u043d\u0435\u0442 \u043e\u0446\u0435\u043d\u043e\u043a, \u0435\u0433\u043e \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u0439 0.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 nn \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u043e\u043a \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\nSample Input 1:\n\n4\n4 3\n4 2\n5 2\n3 2\nSample Output 1:\n\n3 1\n2 1\n2 1\n1 1\n\nSample Input 2:\n\n6\n4 4\n1 1\n4 5\n1 3\n2 4\n2 4\nSample Output 2:\n\n4 2\n4 1\n\nSample Input 3:\n\n6\n1 2\n3 4\n4 5\n5 6\n3 3\nSample Output 3:\n\n4 0\n4 0\n\nSample Input 4:\n\n7\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\nSample Output 4:\n\n4 1\n4 1\n\nSample Input 5:\n\n0\nSample Output 5:\n\n0 0\n\n------\n\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434 \u0438 \u0440\u0430\u0441\u043f\u0430\u043a\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a. \u0417\u0430\u0442\u0435\u043c \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u0442\u043d\u044b\u0445 \u0438 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 (1\u2264n\u2264100). \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 nn \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e m \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u043e\u043a (1\u2264m\u2264100). \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e tt \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432 (1\u2264tt\u2264100). \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 tt \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e i \u2014 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u0430, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u043e\u043a \u0434\u043b\u044f \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0438 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443, \u0438\u0434\u0443\u0449\u0435\u043c\u0443 \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\\n\"\n\n-------"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5\\n10\") == \"15\"\nassert solution(\"2\\n5\\n10\\n15\") == \"25\"\nassert solution(\"2\\n5\\n10\\n15\\n30\") == \"25\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n5\") == \"15\\n\"\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n1\") == \"30\\n\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"2\\n5\\n10\") == \"30\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('3\\n10\\n15') == '30'\n\nprint('Success')"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n5\n10\n15\n''') == '25'\n\nprint(solution(stdin))"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n5\n10\n15\n\"\"\"\n    ) == \"25\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10\\n15\\n\") == \"25\"\nassert solution(\"2\\n0\\n0\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n1\\n10\\n15\") == \"30\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nfor line in stdin.split(\"\\n\"):\n    print(int(line) * max(map(int, line.split())))\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin.readlines():\n    print(int(line) * max(map(int, line.split())))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n5\\n10\\n15\\n') == '25'\n\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdefgh\") == 8\nassert solution(\"aabbca\") == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbca\") == 2\nprint('All tests passed.')\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbca\") == 2\nprint(\"PASSED\")\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\nassert solution('abcabcabc') == 3\nassert solution('aab') == 1\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aabbca') == 2\nassert solution('abc') == 3\n\"\"\"\n\nfrom string import ascii_lowercase\n\nimport sys"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabbca') == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbca\") == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbca') == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcbca\") == 2\n\nassert solution(\"aabbca\") == 2\n\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin=\"Sunny\") == \"Cloudy\"\nassert solution(stdin=\"Cloudy\") == \"Rainy\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\nassert solution(\"Rainy\") == \"Sunny\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 17 120\\n') == '119'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('7 17 100') == '108'\nassert solution('7 17 1000') == '18'\nassert solution('7 17 10000') == '20'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nN, A, B = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 12\") == '42'\nassert solution(\"6 10 90\") == '144'\nassert solution(\"1 20 2000\") == '20'\nassert solution(\"15 1 0\") == '15'\nassert solution(\"7 17 120\") == '119'\n\nprint('Success')\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 17 120\") == \"119\"\nassert solution(\"6 12 20\") == \"30\"\nassert solution(\"1 9 15\") == \"15\"\nassert solution(\"6 12 20\") == \"30\"\nassert solution(\"2 8 15\") == \"15\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('3 3 0') == '0'\nassert solution('0 0 0') == '0'\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().rstrip().split())"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nimport sys\n\ntry:\n    T, A, B = [int(x) for x in sys.stdin.read().split()]\n    min_fee = (A * T) if T <= B else B\n    print(min_fee)\n\nexcept Exception as e:\n    print(e)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 17 120\\n') == '119'\n\nimport re"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\nfrom math import log2\nimport numpy as np"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\nfrom math import log\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\n\"\"\"\nProblem Statement\nYou are given the following information, but you may prefer to do some research for yourself.\n\n1 Jan 1900 was a Monday.\nThirty days has September, April, June and November.\nAll the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine.\nAnd on leap years, twenty-nine.\nA leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\nHow many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"3800\"\nassert solution(\"2 4\") == \"1000\"\nassert solution(\"3 7\") == \"500\"\nassert solution(\"100 500\") == \"10000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '3800'\n\"\"\"\n\nimport os"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nimport math\nimport ast\n\nN, M = map(int, input().split())"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 'c'\nassert solution('a') == 'b'\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\ns = stdin\n\nmin_not_in_s = None\n\nfor i in range(97, 123):\n    if chr(i) not in s:\n        min_not_in_s = chr(i)\n        break\n\nprint(min_not_in_s)\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin):\n        #S = input()\n        s = stdin\n        s = sorted(s)\n        \n        for i in range(97, 123):\n            if chr(i) not in s:\n                return chr(i)\n        \n    def solution_2(self, s):\n        if len(s) == 1:\n            return None\n        else:\n            \n            s = sorted(s)\n            for i in range(97, 123):\n                if chr(i) not in s:\n                    return chr(i)"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n\ns = stdin\n\nd = {}\n\nfor c in s:\n    d[c] = d.get(c, 0) + 1\n\nmin_c = None\n\nfor c in \"abcdefghijklmnopqrstuvwxyz\":\n    if c not in d or d[c] == 0:\n        min_c = c\n        break"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nS = stdin.strip()\n\nfor i in range(97, 97 + 26):\n    if chr(i) not in S:\n        print(chr(i))\n        exit()\n\nprint(None)\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n\nS = stdin.split()[0]\n\nresult = [c for c in 'abcdefghijklmnopqrstuvwxyz' if c not in S]\nprint(result[0] if len(result) == 0 else None)\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\nfrom typing import List, Dict, Union, Tuple\nfrom collections import defaultdict\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 4 3\") == '4\\n3\\n3\\n4'\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n4 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 4 3\\n') == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2 4 2 1\\n') == '2'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_0) == test_0_result"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n1\n2''') == '2'\nassert solution('''6\n1\n2\n3\n4\n5\n6''') == '6'\n\nimport math\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 4 4 1 1 1\") == \"2\"\n\"\"\"\n\nn = int(input().strip())\narr = list(map(int, input().strip().split()))"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6\\n') == '0\\n', 'fails for: 1 2 3 4 5 6'\nassert solution('1 2 3 4 5 6\\n1 2 3 4 5 7\\n') == '2\\n', 'fails for: 1 2 3 4 5 7'\n\nassert solution('5 9 3 6 7 8\\n') == '0\\n', 'fails for: 5 9 3 6 7 8'\n\nassert solution('2 4 3 5 6 8\\n') == '8\\n', 'fails for: 2 4 3 5 6 8'\n\nassert solution('1 2 3 4 5 6\\n') == '0\\n', 'fails for: 1 2 3 4 5 6'"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('3\\n1 2 4') == '0'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 3 2 1\\n') == 3\nassert solution('5 1 2 3 2 1\\n') == 4\nassert solution('6 1 2 3 2 1\\n') == 4\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_0) == test_0_result\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == '2'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 7 1 2 5') == '8'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n7 1\n2\n5\n10''') == '8'\nassert solution('''4\n5 1\n1\n2\n4''') == '5'\nassert solution('''3\n7 1\n2\n5\n10''') == '8'\nassert solution('''5\n7 5\n2\n3\n1\n6''') == '8'\n\n'''\n3\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n2\n5\n10\n5\n7 1\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7 1 2 5') == '8'\nassert solution('3 7 1 2 5 10') == '10'\nassert solution('3 7 1 2 5 10 10 10') == '10'\nassert solution('3 7 1 2 5 10 11') == '11'\nassert solution('3 7 1 2 5 10 15') == '12'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n2\\n5\\n10\\n') == 8\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"\nassert solution(\"3\\n7 1\\n2\\n5\") == \"8\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7 1 2 5\\n10\") == \"8\"\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 1 2 5 10\") == 8\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n2\\n5\\n10') == '8'\n\"\"\"\n\nn, days, x = [int(i) for i in stdin.readline().split()]\n\nm = max(n, days, x)\n\ndp = [0 for i in range(m + 1)]\n\nfor i in range(1, m + 1):\n    dp[i] = dp[i - 1] + 1\n    if i >= days and i % days == 0:\n        dp[i] = min(dp[i], dp[i // days] + x)\n\nprint(dp[m])\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\n1\\n2\\n3\\n4\\n5\\n6\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\n\"\"\"\n\nA, B, C, X = (int(x) for x in input().split())\n\nans = 0\nfor a in range(A + 1):\n    for b in range(B + 1):\n        if C * a + b * C < X:\n            break\n        if C * a + b * C == X:\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\n\nassert solution('2\\n2\\n2\\n50') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('A') == '0'\nassert solution('A1') == '0'\nassert solution('B') == '0'\nassert solution('B1') == '0'\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\n\n-----Note-----\n - The number of ways to select coins is given by the binomial coefficient.\n - For example, if the numbers of coins of a kind are n, m, then the number of ways is (n+m)! / (n! * m!)\n\n--Problem given at leetcode.com--\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2\\n2\\n2\\n100\"\n) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\n-------\n\n7\n3\n2\n7\n\n-------\n\n5\n3\n2\n7\n\n-------\n\n0\n0\n1\n4\n\n-------\n\n0\n0\n0\n5\n\n-------\n\n0\n0\n0\n3\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n\n------\n\n0\n0\n0\n0\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\n2\\n100') == 2\n\n\"\"\"\n\nimport math\nimport random\n\nA, B, C, X = map(int, input().split())\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 2 100') == '2'\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('5 5 5') == 'No'\nassert solution('5 5 6') == 'Yes'\nassert solution('10 20 30') == 'No'\nassert solution('4 4 4') == 'Yes'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1 3 2) == 'Yes'\nassert solution(3 4 2) == 'No'\nassert solution(1 4 3) == 'Yes'\nassert solution(1 2 3) == 'No'\n\nimport sys\nassert sys.stdin.read() == '1 3 2\\n3 4 2\\n1 4 3\\n1 2 3\\n'\n\nfrom sys import stdin\nprint('Yes' if solution(stdin.read()) == 'Yes' else 'No')\n\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n\na, b, c = map(int, input().split())\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nprint(solution(\"1 3 2\"))\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input) == solution(input)\n\n'''"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3 1000\n120\n100\n140\n''') == '9'\nassert solution('''\n3 1000\n1\n100\n''') == '1'\nassert solution('''\n3 1000\n3\n100\n''') == '1'\nassert solution('''\n3 1000\n2\n100\n''') == '1'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 1000\n120\n100\n140''') == '9'\n\"\"\"\n\nimport sys\nimport re\n\nnumber_regex = re.compile(r'(\\d+)')\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\nassert solution('2 1000\\n0\\n1000\\n') == '6'\nassert solution('3 1000\\n100\\n100\\n') == '3'\nassert solution('1 1000\\n0\\n1000\\n') == '0'\nassert solution('1 1000\\n1000\\n') == '1'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 1000\n120\n100\n140\n''') == '9'\n\nprint('Success')"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\nassert solution('3 1000\\n120\\n100\\n140\\n500\\n600\\n700\\n800\\n900\\n1000') == '9'\nassert solution('3 1000\\n120\\n100\\n140\\n500\\n600\\n700\\n800\\n900\\n1000\\n500\\n600\\n700\\n800\\n900\\n1000') == '13'\nassert solution('3 1000\\n120\\n100\\n140\\n500\\n600\\n700\\n800\\n900\\n1000\\n500\\n600\\n700\\n800\\n900\\n1000') == '12'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == \"2\"\n\"\"\"\n\nimport sys\n\ninput_lines = sys.stdin.readlines()\n\nN = int(input_lines[0])\nitems = [input_lines[1+i] for i in range(N)]\n\nkinds = set(items)\nprint(len(kinds))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3'\n) == 2\n\nassert solution(\n    'apple'\n) == 1\n\nassert solution(\n    'apple\\n'\n    'orange'\n) == 2\n\nassert solution(\n    'apple\\n'\n    'apple'\n) == 1\n\n-----Explanation-----\nGiven the test input, we have 3 draws. For the first one, the item was apple. For the second and third draws, the item was orange. So, in the first draw, we have only apple, in the second draw, we have both apple and orange and in the third draw, we have only orange. So, we have 2 kinds of items.\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\") == \"2\\n\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\napple\\n:apple\\noange\\n:apple\\n\") == 2\nassert solution(\"5\\nballoon\\n:balloon\\nballoon\\n:balloon\\nballoon\") == 1\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\napple\\norange\\napple') == 2\n\"\"\"\n\n\"\"\"\n2\napple\norange\n\n2\napple\napple\n\n1\napple\n\n0\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('apple') == 1\nassert solution('apple and banana') == 2\nassert solution('apple orange') == 2\nassert solution('banana lemon') == 2\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\napple\\n:apple') == '2'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\") == 'apple'\nassert solution(\"orange\") == 'orange'"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\nassert solution(\"apple\\napple\") == \"apple\"\n\"\"\"\nimport re\nimport sys\n\nlines = [line.rstrip() for line in sys.stdin]\nN = int(lines[0])\ncounter = dict()\nfor i in range(N):\n    line = lines[1 + i]\n    if line in counter.keys():\n        counter[line] = counter[line] + 1\n    else:\n        counter[line] = 1\n\nprint(len(counter.keys()))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n\\n\") == \"\"\nassert solution(\"1\\nabc\") == \"abc\"\nassert solution(\"1\\na\\nb\") == \"ab\"\n\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1000 3 1\") == \"1 2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nN = int(stdin.readline())\nl = list(map(int, stdin.readline().split()))\n\nm = min(l)\nM = max(l)"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nN = int(stdin.readline())\n\nrating = [int(c) for c in stdin.readline().split()]\n\nmin_color, max_color = 1, 7\n\nfor i, r in enumerate(rating):\n    if r >= 2400:\n        if i > 0 and rating[i-1] < 2400:\n            min_color -= 1\n        if i < N-1 and rating[i+1] < 2400:\n            max_color -= 1\n\nprint(min_color, max_color)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == '2 2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'4\\n'\n'2100 2500 2700 2700'\n) == '2 2'\nassert solution(\n'2\\n'\n'1000 2000'\n) == '0 0'\nassert solution(\n'5\\n'\n'3000 5000 2000 3000 1000'\n) == '2 2'\nassert solution(\n'1\\n'\n'3000'\n) == '0 0'\nassert solution(\n'1\\n'\n'0'\n) == '0 0'\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oxo') == '900'\nassert solution('xox') == '100'\nassert solution('oox') == '300'\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xo\") == 700\nassert solution(\"oox\") == 700\nassert solution(\"xxx\") == 700\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('oxo') == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oxo') == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == 900\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oxo') == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('oox') == 900\nassert solution('xoo') == 700\nassert solution('xox') == 700\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxx\") == 700"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('oxo') == 900\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D H') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('HH') == 'H'\nassert solution('DH') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\n\"\"\"\n\na, b = input().split(' ')\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\nassert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\n\"\"\"\n\n\"\"\"\n\n-----Implementation-----\n\n-----Test cases-----\n- Correctness: PASS\n- Time Complexity: O(1)\n- Space Complexity: O(1)\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('2022') == '2+0+2+0=7'\nassert solution('4444') == '4+4+4+4=7'\nassert solution('1342') == '1+3+4+2=7'\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\n\"\"\"\n\nimport re\n\nnums = re.sub(r'\\s+', '', stdin)\ndigits = [int(s) for s in list(nums)]\nsigns = ['+', '-']\n\ntotal = 0\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        for k in range(1, 10):\n            for l in range(1, 10):\n                if str(i) + str(j) + str(k) + str(l) == ''.join(str(d) for d in digits) and str(signs[i - 1] + signs[j - 1] + signs[k - 1] + signs[l - 1]) == ''.join(str(s) for s in digits):\n                    total += 1\n\nprint(str(total) + '=' + ''.join(str(s) for s in digits))\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"1222\"\n) == \"1+2+2+2=7\"\n\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nstdin = open(r\"C:\\Users\\Akihito\\Downloads\\CodeEval-PermutationAndCombination\\venv\\input.txt\").read().split()\nfor i in range(int(stdin[0])):\n    stdin = stdin[1:]\n    a = stdin[0][0]\n    b = stdin[1][0]\n    c = stdin[2][0]\n    d = stdin[3][0]\n    if a + b == c - d or c + d == a - b or a + c == b - d or b + d == a - c:\n        print(\"1+2+2+2=7\")\n    else:\n        print(\"1+2+2+2=6\")\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\nassert solution(\"12222222\") == \"1+2-2-2-2-2-2-2=7\"\n\nassert solution(\"122333\") == \"1+2-3-3-3=7\"\n\nassert solution(\"10200\") == \"1-0-0-0-0-0-0=7\"\n\nassert solution(\"1112\") == \"1+1-1+1-1=7\"\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1222') == '1+2+2+2=7'\nassert solution('1223') == '12-2+3-2=7'\nassert solution('1224') == '12-2+4-2=7'\nassert solution('1225') == '12-2+5-2=7'\nassert solution('1226') == '12-2+6-2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nprint(\"The string\", solution(\"1222\"), \"is correct.\")\n\nassert solution(\"1223\") == \"1+2+2-3=7\"\nprint(\"The string\", solution(\"1223\"), \"is correct.\")\n\nassert solution(\"1224\") == \"1-2+2+2+4=7\"\nprint(\"The string\", solution(\"1224\"), \"is correct.\")\n\nassert solution(\"1225\") == \"1-2+2-5=7\"\nprint(\"The string\", solution(\"1225\"), \"is correct.\")\n\nassert solution(\"1226\") == \"1-2-2-6=7\"\nprint(\"The string\", solution(\"1226\"), \"is correct.\")"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n\nnums = input()\nnums = list(map(int, nums))\n\nnum_list = ['+', '-', '*', '/']\n\nfor i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n        for k in range(j+1, len(nums)):\n            for l in range(k+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] + nums[l] == 7:\n                    ans = num_list[i] + num_list[j] + num_list[k] + num_list[l]\n                    print('%d%s%d%s%d=7' % (nums[i], ans, nums[j], ans, nums[k]), end=\" \")\n                    print('%d%s%d%s%d=7' % (nums[j], ans, nums[k], ans, nums[l]))"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 2 2\\n') == '2\\n2\\n0\\n0\\n0'\n\"\"\"\nimport math\nfrom typing import List\n\n\nclass Node:\n    def __init__(self, key: int):\n        self.key: int = key\n        self.subordinates: List[Node] = []\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2\") == \"2 2\"\nassert solution(\"3 3 3 2 1\") == \"0 0 0\"\nassert solution(\"4 1 5 5\") == \"2 0 0\"\nassert solution(\"2 1 1\") == \"0 0 0\"\nassert solution(\"1 1\") == \"0 0 0\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"2\\n2\\n\") == \"0\\n0\"\n\"\"\"\n\n\"\"\"\nOptimal Solution:\nO(N) time, O(1) space\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\n\"\"\"\n\nimport sys\nimport io"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a_example) == \"2\\n2\\n0\\n0\\n0\"\nassert solution(b_small) == \"0\\n1\\n0\\n0\\n0\"\nassert solution(c_medium) == \"4\\n3\\n2\\n1\\n1\"\nassert solution(d_quite_big) == \"6\\n5\\n4\\n3\\n2\\n1\\n1\"\nassert solution(e_also_big) == \"4\\n3\\n2\\n1\\n1\\n1\"\n\nprint(\"Passed!\")\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0\\n'\nassert solution('5\\n2 1 2 3 4') == '2\\n1\\n0\\n0\\n0\\n'\nassert solution('5\\n2 4 3 1 5') == '0\\n0\\n1\\n2\\n0\\n'\nassert solution('5\\n4 5 3 2 1') == '0\\n0\\n0\\n0\\n1\\n'\nassert solution('5\\n1 1 1 1 1') == '5\\n'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6') == '3'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n6') == '3'\n\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n') == '3'\nassert solution('5\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n2\\n1\\n0\\n1\\n1\\n3\\n0\\n2\\n2\\n3\\n0\\n1\\n0\\n0\\n2\\n1\\n0\\n2\\n1\\n0\\n0\\n2\\n0\\n1\\n2\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n') == '3'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('0111') == 'No'\nassert solution('01010') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1118') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1345') == 'No'\nassert solution('1234') == 'No'\nassert solution('2222') == 'Yes'\nassert solution('2223') == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1010') == 'No'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('2424') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1318') == 'No'\nassert solution('2000') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1000') == 'No'\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\\n\") == 3\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == '3'\nassert solution('3\\n2 3\\n2 4\\n1 7') == '3'\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == expected_result\n\"\"\"\nfrom typing import List\nimport itertools\nimport numpy as np"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6\\n') == 3\nprint('PASSED')\n\n-----Explanation-----\n1-st part can be built by a single upper part and 1-st part of an upper and a middle, and 2-nd part of a single upper.\n2-nd part can be built by a single upper part and 1-st part of an upper and a middle, and 2-nd part of a single upper.\n3-rd part can be built by a single upper part and 1-st part of an upper and a middle, and 2-nd part of a 2-nd part of an upper and a middle.\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5\\n2 4\\n3 6\") == 3\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n1 5\n2 4\n3 6\n\"\"\") == 3\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5\\n2 4\\n3 6') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\">\") == \"<\nassert solution(\"<\") == \">\"\nassert solution(\"=\") == \"=\"\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B\") == \"<\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A F\") == \">\"\nassert solution(\"F C\") == \">\"\nassert solution(\"A B\") == \"<\"\nassert solution(\"A B\") == \"<\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">\") == \"<\"\nassert solution(\"<\") == \">\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A B\") == \">\"\nassert solution(\"A A\") == \"=\"\nassert solution(\"A C\") == \"<\"\nassert solution(\"A F\") == \">\"\nassert solution(\"B B\") == \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A B\") == \">\", \"WA-1\"\nassert solution(\"B A\") == \"<\", \"WA-2\"\nassert solution(\"B D\") == \"=\", \"WA-3\"\nassert solution(\"A B\") == \">\", \"WA-4\"\nassert solution(\"A A\") == \"=\", \"WA-5\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AB') == '<'\nassert solution('AA') == '>'\nassert solution('BB') == '<'\n\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A B\") == \">\"\n\n\"\"\"\n\nx, y = input().split()"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A A\") == \"=\"\nassert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"B B\") == \"=\"\nassert solution(\"C A\") == \"<\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n..#\\n..#\") == \"11\"\nassert solution(\"2 2\\n.#.\\n..#\") == \"1#\"\nassert solution(\"2 2\\n.##\\n.#.\") == \"11\"\nassert solution(\"2 3\\n.#.\\n.#.\\n#..\") == \"111\"\nassert solution(\"1 1\\n#.\") == \"0\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".....\\n\"\n\"#...#\\n\"\n\"#..#.\\n\"\n\"#.##.\\n\"\n\"..#..\\n\"\n\"####\\n\"\n\"....\") == \"12111221\"\n\nassert solution(\"....\\n\"\n\"#..#\\n\"\n\"#..#\\n\"\n\"###\\n\"\n\"....\\n\"\n\"....\") == \"111222\"\n\nassert solution(\"#..#\\n\"\n\"#..#\\n\"\n\"###\\n\"\n\"....\\n\"\n\"....\") == \"1111\"\n\nassert solution(\"#...\\n\"\n\"#..#\\n\"\n\"#.#.\\n\"\n\"###\\n\"\n\"....\") == \"1111222\"\n\nassert solution(\"#.##\\n\"\n\"#.#.\\n\"\n\"#...\\n\"\n\"###\\n\"\n\"....\") == \"111111\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3 5\\n'\n    '.....\\n'\n    '.#.#.\\n'\n    '.....'\n    ) == '11211'\n\nassert solution(\n    '1 1\\n'\n    '#'\n    ) == '1'\n\nassert solution(\n    '1 1\\n'\n    '.#'\n    ) == '0'\n\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".#.#.\") == \"11211\"\nassert solution(\"#.#.\") == \"1#2#1\"\nassert solution(\"..#..\") == \"11211\"\nassert solution(\"1..1\") == \"1#2#1\"\nassert solution(\"1...1\") == \"1#2#1\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"1#2#1\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nprint(solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\"))"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n.\\n..\") == \"11\"\nassert solution(\"2 2\\n..\\n..\") == \"11\"\nassert solution(\"2 2\\n#\\n..\") == \"11\"\nassert solution(\"2 2\\n.#\\n..\") == \"1111\"\nassert solution(\"2 2\\n..\\n#\") == \"1111\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"1 100 100\\n100 100 1 1\") == \"0\"\nassert solution(\"1 100 100\\n100 100 100 1 1\") == \"1\"\nassert solution(\"1 100 100\\n100 100 100 1 1\") == \"1\"\nassert solution(\"1 100 100\\n100 100 100 100 1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\"\n\n\"\"\"\nSolution Explanation\n\nConsider the following scenario:\n - We have two desks (A and B).\n - Desk A has N books on it, and Desk B has M books on it.\n - It takes us A_i minutes to read the i-th book from the top on Desk A (1 \\leq i \\leq N), and B_i minutes to read the i-th book from the top on Desk B (1 \\leq i \\leq M).\n - Given the following action:\n   - Choose a desk with a book remaining, read the topmost book on that desk, and remove that book from the desk.\nWhat is the maximum number of books that we can read at most?\n\nIn this example, the answer is 3.\n - We can read the 1-st, 2-nd, and 3-rd books in 60 minutes, and then read the 4-th book in 120 minutes.\n - We can read the 1-st, 2-nd, 3-rd, and 4-th books in 80 minutes, and then read the 5-th book in 150 minutes.\n - We can read the 1-st, 2-nd, 3-rd, 4-th, and 5-th books in 90 minutes.\n - We can read the 1-st, 2-nd, 3-rd, 4-th, and 5-th books in 120 minutes.\n - We can read the 1-st, 2-nd, 3-rd, 4-th, 5-th, and 6-th books in 150 minutes.\n - We can read the 1-st, 2-nd, 3-rd, 4-th, 5-th, and 6-th books in 180 minutes.\n - We can read the 1-st, 2-nd, 3-rd, 4-th, 5-th, and 6-th books in 210 minutes.\n - We can read the 1-st, 2-nd, 3-rd, 4-th, 5-th, and 6-th books in 240 minutes.\n\nEach time we can read a book from the top of the desk,\nand if it takes us more than 240 minutes to finish reading the books,\nwe cannot finish reading all of the books within the allowed time.\n\nThus, the maximum number of books we can read is the minimum of the maximum number of books we can read in 240 minutes or less.\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\\n\") == 3\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nassert solution(test_input_5) == test_output_5\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\nassert solution('''2 4 20\n40 60\n40 60''') == '0'\nassert solution('''1 2 1\n1 2\n1 1''') == '1'\n\n'''\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150\\n') == '3'\n\n------Solution------\nWe can first figure out that the maximum number of books we can read within 240 minutes is how many times we can read each book in both A and B, and then by solving a linear equation, we can figure out what K is.\n\nWe can also solve this problem using simple math:\n - If we read each book once in A, then we can read it in B exactly twice.\n - If we read each book twice in A, then we can read it in B exactly three times.\n - If we read each book three times in A, then we can read it in B exactly four times.\n - If we read each book four times in A, then we can read it in B exactly five times.\n - If we read each book five times in A, then we can read it in B exactly six times.\n -...\nSo, if we can read the books in A exactly five times, then we can read the books in B exactly six times.\nThat means, if we can read the books in A exactly five times, then if we add K to this value, we can read the books in B exactly six times.\n\nWe can use this formula to figure out the maximum number of books we can read within 240 minutes:\n - The maximum number of books we can read within 240 minutes is (5+5+5+5+5+6)//6 = 5.\n - We can check this answer by calculating the number of books we can read exactly five times:\n     - If we read each book once in A, then we can read it in B exactly twice.\n     - If we read each book twice in A, then we can read it in B exactly three times.\n     - If we read each book three times in A, then we can read it in B exactly four times.\n     - If we read each book four times in A, then we can read it in B exactly five times.\n     -...\n     - If we read each book five times in A, then we can read it in B exactly six times.\nSo, if we can read the books in A exactly five times, then if we add K to this value, we can read the books in B exactly six times.\n\nWe can also solve this problem using simple math:\n - If we read each book once in A, then we can read it in B exactly twice.\n - If we read each book twice in A, then we can read it in B exactly three times.\n - If we read each book three times in A, then we can read it in B exactly four times.\n - If we read each book four times in A, then we can read it in B exactly five times.\n -...\nSo, if we can read the books in A exactly five times, then if we add K to this value, we can read the books in B exactly six times.\n\nWe can also solve this problem using simple math:\n - If we read each book once in A, then we can read it in B exactly three times.\n - If we read each book twice in A, then we can read it in B exactly five times.\n - If we read each book three times in A, then we can read it in B exactly six times.\n - If we read each book four times in A, then we can read it in B exactly seven times.\n -...\nSo, if we can read the books in A exactly five times, then if we add K to this value, we can read the books in B exactly seven times.\n\nWe can also solve this problem using simple math:\n - If we read each book once in A, then we can read it in B exactly four times.\n - If we read each book twice in A, then we can read it in B exactly six times.\n - If we read each book three times in A, then we can read it in B exactly eight times.\n - If we read each book four times in A, then we can read it in B exactly nine times.\n -...\nSo, if we can read the books in A exactly five times, then if we add K to this value, we can read the books in B exactly nine times.\n\nWe can also solve this problem using simple math:\n - If we read each book once in A, then we can read it in B exactly four times.\n - If we read each book twice in A, then we can read it in B exactly six times.\n - If we read each book three times in A, then we can read it in B exactly eight times.\n - If we read each book four times in A, then we can read it in B exactly ten times.\n -...\nSo, if we can read the books in A exactly five times, then if we add K to this value, we can read the books in B exactly ten times.\n\nThus, we can figure out that the maximum number of books we can read within 240 minutes is 5 + 2 + 3 + 4 + 5 + 6 = 22.\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 10') == '3'\n\"\"\"\n\nN, M, K = [int(i) for i in stdin.split()]\nA = [int(i) for i in stdin.split()[1::2]]\nB = [int(i) for i in stdin.split()[2::2]]\n\ntime = 0\nbooks_read = 0\n\nwhile time < K:\n    time += max(A)\n    if time > K:\n        break\n    books_read += 1\n\n    time += max(B)\n    if time > K:\n        break\n    books_read += 1\n\nprint(books_read)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\nimport sys\n\na, b, c, x, y = [int(s) for s in sys.stdin.readline().strip().split(' ')]\nprint(a*x + b*y)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\nfrom typing import Tuple, List, Union\n\nfrom collections import Counter\n\nInteger = int\n\nfrom collections import Counter"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\n\"\"\"\n\uc5b4\ub5a4 \ub3c4\ubbf8\ub178\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uadf8\ub798\ud504\uc758 \ubaa8\ub4e0 \uacbd\ub85c\uc758 \uac2f\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4. \n\uccab\ubc88\uc9f8 \uc904\uc5d0\ub294 \uadf8\ub798\ud504\uc758 \uc815\uc810\uc758 \uc218 V\uc640 \uac04\uc120\uc758 \uc218 E\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. (1 \u2264 V \u2264 10,000, 1 \u2264 E \u2264 200,000)\n\ub450\ubc88\uc9f8 \uc904\uc5d0\ub294 \uadf8\ub798\ud504\uc758 \uc2dc\uc791 \uc815\uc810\uc744 \ub098\ud0c0\ub0b4\ub294 \uc815\uc218 X\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. (1 \u2264 X \u2264 V)\n\uc138\ubc88\uc9f8 \uc904\ubd80\ud130 E\uac1c\uc758 \uc904\uc5d0 \uac78\uccd0 \uac01 \uac04\uc120\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 A B C \uc138 \uac1c\uc758 \uc815\uc218\ub85c \uc8fc\uc5b4\uc9c0\ub294\ub370,\n\uc774\ub294 A\ubc88 \uc815\uc810\uacfc B\ubc88 \uc815\uc810 \uc0ac\uc774\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uace0, A\ubc88 \uc815\uc810\uacfc C\ubc88 \uc815\uc810 \uc0ac\uc774\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 \uac04\uc120\uc785\ub2c8\ub2e4. \nA\uc640 B\ub294 \uac19\uc740 \uadf8\ub798\ud504\uc5d0 \uc18d\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n-----Constraints-----\n - 1 \u2264 V, E \u2264 200,000\n - 1 \u2264 X \u2264 V\n - All values in input are integers.\n\n-----Input-----\n4 4\n1 2\n1 3\n2 3\n2 4\n\n-----Output-----\n6\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\nimport math\n\na, b, c, x, y = [int(i) for i in stdin.split(\" \")]\n\ntotal_cost = a * x + b * y"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\nfrom sys import stdin\n\nstdin = stdin.read().splitlines()\na, b, c, x, y = map(int, stdin[0].split())\nprint(((a+b+c)//2)*x + ((a+b+c)//2)*y)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\nimport sys\n\nA, B, C, X, Y = [int(i) for i in sys.stdin.read().split()]\n\na = X * (A + B) + C * Y\nb = X * B + C * (Y + A)\n\nprint(min(a, b))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 3\nassert solution('3') == 4\nassert solution('4') == 6\nassert solution('5') == 7\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"4\\n\"\n\n----"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == 4\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(3)) == '4'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\") == \"0\"\nassert solution(\"3\\n5\") == \"1\"\n\"\"\"\n\nfrom typing import Union\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '4'\nassert solution('12\\n') == '16'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4''') =='''4'''\nassert solution('''1''') =='''1'''\nassert solution('''10''') =='''3628800'''\nassert solution('''6''') =='''4'''\nassert solution('''9''') =='''23'''\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1\n\"\"\"\n    ) == \"1\"\n\nassert solution(\n\"\"\"\n2\n\"\"\"\n    ) == \"1\"\n\nassert solution(\n\"\"\"\n4\n\"\"\"\n    ) == \"2\"\n\nassert solution(\n\"\"\"\n9\n\"\"\"\n    ) == \"4\"\n\nassert solution(\n\"\"\"\n100\n\"\"\"\n    ) == \"8\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\nassert solution('100') == '97'\nassert solution('1000') == '999'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('15') == '9'\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == 9\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"9\"\nassert solution(\"1000\") == \"9\"\nassert solution(\"10000\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10) == 9\n\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '9'\nassert solution('10') == '9'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000\") == \"999\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n\"\"\"\n\n\"\"\"\nInput\n6\n10\n10\n8\n8\n8\n6\n\nOutput\n3\n\nIf we stack the mochi with diameters of 10, 10 and 8 centimeters from bottom to top in this order, we have a 3-layered kagami mochi, which is the maximum number of layers.\n\"\"\"\n\nimport sys\nfrom bisect import bisect"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nassert solution(\"1\\n10\") == \"1\"\nassert solution(\"2\\n1\\n1\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nassert solution('1\\n10\\n') == '1'\nassert solution('1\\n8\\n') == '1'\nassert solution('1\\n6\\n') == '1'\nassert solution('1\\n5\\n') == '0'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == 3\n\"\"\"\nimport math"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n10\\n8\\n8\\n6\"\n) == \"3\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\nassert solution(\"4\\n8\\n6\\n4\\n\") == \"0\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10 8 8 6\") == \"3\"\nassert solution(\"1 10 10 10\") == \"1\"\nassert solution(\"4 10 10 10 10\") == \"4\"\nassert solution(\"10 10 10 10 10\") == \"2\"\nassert solution
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('QWERTYASDFZXCV') == 5\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\nprint(solution(\"QWERTYASDFZXCV\"))\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\nprint(solution(\"QWERTYASDFZXCV\"))\n\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A) == \"Z\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 12\\n') == '2'\n\"\"\"\nimport math\nfrom typing import List\nfrom functools import reduce\nfrom itertools import combinations"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 12 40') == '2'\nassert solution('1 1 1') == '0'\nassert solution('10 10 10') == '0'\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin_sample_0) == 2\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 12 40\") == 2\n\"\"\"\nimport re"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 12 40') == '2'\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10') == '4'\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 6\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 6\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == 6\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 6\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 6\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == 6\n\"\"\"\n\nimport sys\n\nn = sys.stdin.readline()\n\nn = int(n)\n\npower = 1\n\nfor i in range(1, n + 1):\n    power = power * i\n\npower = power % (10 ** 9 + 7)\n\nprint(power)\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '6'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\npower = 1\nfor _ in range(N):\n    power *= (_ + 1)\n\nprint(power % (10 ** 9 + 7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '6'\nassert solution('1\\n1\\n2\\n3') == '6'\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\nassert solution(\"5\\n4\\n3\") == \"10\"\nassert solution(\"5\\n10\\n15\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '6'\n\"\"\"\nimport sys"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"4\"\n\"\"\"\n\nfrom typing import List\n\nimport sys"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '3'\n) == '6'\n\"\"\"\n\nfrom unittest.mock import patch\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = StringIO(input), StringIO()\n        with patch(\"sys.stdin\", stdin), patch(\"sys.stdout\", stdout):\n            main(stdin)\n            self.assertEqual(stdout.getvalue(), output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\"\"\"\n        output = \"\"\"6\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"6\"\nassert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '6'\nassert solution('9\\n') == '36'\nassert solution('2\\n') == '4'\n\"\"\"\n\nn = int(stdin.readline())\nprint(n*(n+1)//2)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1+2+3+4+5\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '6'\n\"\"\"\n\nimport sys\nimport math\n\ninput_n = int(sys.stdin.readline())\n\noutput_list = []\nfor i in range(input_n):\n    output_list.append(math.ceil(math.pow(2, input_n - i) / math.pow(2, input_n - i - 1)))\n\noutput_string = ''\nfor j in output_list:\n    output_string += str(j) +''\n\nprint(output_string)\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1\n2\n3\n''') == '2'\n\nassert solution('''2\n1\n3\n''') == '1'\n\nassert solution('''4\n5\n3\n8\n10\n''') == '4'\n\nassert solution('''2\n1\n3\n''') == '-1'\n\nassert solution('''4\n3\n3\n3\n1\n''') == '0'"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"2\"\n\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n2 3\") == \"2\"\nassert solution(\"4 1\\n2 3 4\") == \"2\"\nassert solution(\"5 1\\n2 3 4 5\") == \"2\"\nassert solution(\"7 1\\n2 3 4 5 6 7\") == \"3\"\nassert solution(\"12 1\\n2 3 4 5 6 7 8 9 10 11 12\") == \"5\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('3 2') == '1'\nassert solution('3 4') == '0'\nassert solution('3 10') == '5'\nassert solution('3 11') == '0'\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3 1') == 2\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_stdin) == test_stdout"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 1') == '2'\nassert solution('1\\n3 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 1') == '2'\nassert solution('4\\n1 1 1 1') == '0'\nassert solution('5\\n2 4 4 5') == '3'\nassert solution('3\\n6 1') == '6'\nassert solution('7\\n1 6 5 6 7 6 5') == '6'\n\"\"\"\n\n\"\"\"\n4\n2 5 4 3\n\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n2 WA\\n2 AC\\n3 WA\\n3 AC\\n1 AC\") == \"3 3\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 AC\\n2 WA\\n3 WA\\n4 WA\") == \"1 2\"\nassert solution(\"2 2\\n1 AC\\n2 WA\") == \"0 0\"\nassert solution(\"8 5\\n1 AC\\n2 WA\\n3 AC\\n4 AC\\n5 WA\\n6 AC\\n7 WA\\n8 AC\") == \"6 1\"\nassert solution(\"9 9\\n1 WA\\n2 WA\\n3 AC\\n4 WA\\n5 WA\\n6 AC\\n7 WA\\n8 WA\\n9 AC\") == \"9 3\"\n\nprint(\"Passed!\")\n\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nn, m = map(int, input().split())\n\ncount = 0\npenalties = 0\nfor _ in range(m):\n    verdict, problem = input().split()\n    if verdict == 'AC':\n        count += 1\n    elif verdict == 'WA':\n        penalties += 1\n        if problem not in ['WA', 'AC']:\n            count += 1\n\nprint(count, penalties)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\"\"\"\nimport re\nimport sys"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint('Passed')\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n''') == '2 2'\n\n\"\"\"\n\nfrom typing import Callable, List\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"2 5\\n1 AC\\n1 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"2 5\\n1 AC\\n2 WA\\n1 AC\") == \"1 1\"\nassert solution(\"2 5\\n1 AC\\n2 AC\") == \"2 0\"\nassert solution(\"2 5\\n1 AC\\n2 WA\\n2 AC\\n2 WA\\n1 WA\") == \"1 2\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_0) == '3 3'\nassert solution(test_input_1) == '1 0'\n\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '4 3'\n\n-------------\n\uccab \ubc88\uc9f8 \uc904\uc5d0 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \uac1c\uc218 T\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc73c\uba70, N, M, \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc788\ub2e4.\n\ub450 \ubc88\uc9f8 \uc904\ubd80\ud130 N\uac1c\uc758 \uc904\uc5d0 \uac78\uccd0 N\uac1c\uc758 \uc22b\uc790 p_i\uc640 S_i\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. (1 \u2264 i \u2264 N)\n\n-----Constraints-----\n - N, M, and p_i are integers.\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 M \u2264 10^5\n - 1 \u2264 p_i \u2264 N\n - S_i is AC or WA.\n\n-----Input-----\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4 \uccab \uc904\uc5d0 \uc904 \uc218\ub97c \uc758\ubbf8\ud558\ub294 \uc815\uc218 N, M, \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ud558\uc5ec \uc8fc\uc5b4\uc9c4\ub2e4.\n\ub2e4\uc74c N\uac1c\uc758 \uc904\uc5d0 \uac78\uccd0 N\uac1c\uc758 \uc22b\uc790 p_i\uc640 S_i\uac00 \uc8fc\uc5b4\uc9c4\ub2e4. (1 \u2264 i \u2264 N)\n\n-----Output-----\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4 \uccab \uc904\uc5d0 \ud55c \uc904\uc5d0 \ud558\ub098\uc529 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\ub294\ub370,\n\uac01 \uc904\uc5d0\ub294 \u2018#t\u2019\ub85c \uc2dc\uc791\ud558\uace0 \uacf5\ubc31\uc73c\ub85c \ubd84\ub9ac\ub41c \ub450 \uac1c\uc758 \uc815\uc218\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n\n\uc5ec\uae30\uc11c, \u2018#t\u2019\ub294 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ubc88\ud638\uc774\uba70, \uac01 \uc904\uc5d0 \uc788\ub294 \uc22b\uc790\ub294 \ub450 \uc815\uc218 (p_i, S_i)\ub97c \uc758\ubbf8\ud55c\ub2e4.\np_i\ub294 \uc774 \ubb38\uc81c\uc5d0 \ub0b4\uc801 \uc5c6\ub294 \ucc38\uac00\uc790\uc758 \uc218\uc774\uace0, S_i\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc788\ub294 \ucc38\uac00\uc790\ub4e4\uc774 \uc81c\ucd9c\ud588\ub358 \uac01 \ubb38\uc81c\uc5d0 \ub300\ud574 \uc5b4\ub5a4 \uc815\ub2f5\uc744 \ud47c \uac83\uc778\uc9c0\ub97c \ub098\ud0c0\ub0b8\ub2e4.\n\n\uccab \ubc88\uc9f8 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0\uc11c\ub294 1\ubc88 \ucc38\uac00\uc790\ub9cc \uc131\uacf5\ud55c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4.\n\ucc38\uac00\uc790\ub4e4\uc774 \uc81c\ucd9c\ud55c \uac01 \ubb38\uc81c\ub294 \ucc38\uac00\uc790\ub4e4\uc774 \uc798\ubabb \ud47c \uacbd\uc6b0\ub97c \ud3ec\ud568\ud558\uc5ec \ubaa8\ub450 \uc778\uc815\ub41c\ub2e4.\n\n\uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \ucc38\uac00\uc790\ub4e4\uc774 \uc815\ub2f5\uc744 \ub9de\ud78c \uacbd\uc6b0\uc5d0\ub294 \ucc38\uac00\uc790\ub4e4 \uc911 \uba87 \uba85\uc774 \uc131\uacf5\ud588\ub294\uc9c0 \ucd9c\ub825\ud558\uace0,\n\uac00\uc7a5 \uc778\uc815\ub418\ub294 \ucc38\uac00\uc790\ub4e4 \uc911 \uba87 \uba85\uc774 \uc131\uacf5\ud55c \uacbd\uc6b0\uc5d0\ub294 \uc131\uacf5\ud55c \ucc38\uac00\uc790\ub4e4 \uc911 \uba87 \uba85\uc774 \ub418\uc5c8\ub294\uc9c0 \ucd9c\ub825\ud55c\ub2e4.\n\n\ucc38\uac00\uc790\ub4e4\uc774 \uc81c\ucd9c\ud55c \uac01 \ubb38\uc81c\uc5d0 \ub300\ud55c \uc815\ub2f5\uc740 \uc5ec\ub7ec \uba85\uc77c \uc218 \uc788\uc73c\uba70, \uc774 \uc911 \uc77c\ubd80 \ucc38\uac00\uc790\ub4e4\uc774 \uc81c\ucd9c\ud588\ub358 \ubb38\uc81c\ub97c \uc81c\uc678\ud558\uba74 \uac01 \ubb38\uc81c\ub9c8\ub2e4 \ucd5c\ub300 1\uba85\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4.\n\n\ucc38\uac00\uc790\ub4e4\uc774 \uc81c\ucd9c\ud55c \uc815\ub2f5\uc740 \ucc38\uac00\uc790\ub4e4 \uc911 \ud558\ub098\ub3c4 \ub9de\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4.\n\n\ucc38\ufffd"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n4 1 5') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nh = [int(i) for i in stdin.readline().split()]\n\nh.sort()\nh = h[::-1]\n\nprint(sum([h[0] for i in range(n)]))\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 5\") == 5\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n\n\"\"\"\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        pass\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 1\") == \"4\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\n\n\n\"\"\"\nThe number of times the monster needs to die before they can be defeated is the sum of the numbers of times Fennec can use his special move before the monster dies.\nFor example, if there are four monsters, Fennec can use his special move three times to make the fourth monster die.\nThe number of times Fennec needs to do Special Move is the number of times the monster dies.\nIt is guaranteed that Fennec can use the special move at most K times, so the maximum number of times Fennec needs to do Special Move before he can win is the sum of the numbers of times the monster dies.\nGiven N and K, find the maximum number of times Fennec needs to do Special Move before he can win.\n\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq K \\leq 2 \\times 10^5\n - 1 \\leq H_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nH_1... H_N\n\n-----Output-----\nPrint the maximum number of times Fennec needs to do Special Move before he can win.\n\n-----Sample Input-----\n3 1\n4 1 5\n\n-----Sample Output-----\n4\n\nThe monster with health H_3 needs to die four times before he can be defeated.\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 5\\n1 4 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == 5\n\"\"\"\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\nfrom sys import stdin\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n2\\n') == '4'\n\n-----\n5\n5\n1 2 3 4 5\n\n-----\n3\n10\n2 1 1\n\n-----\n0\n10\n2 1 1\n\n-----\n2\n10\n1 1 1\n\n-----\n3\n10\n1 1 1\n\n-----\n0\n10\n1 1 1\n\n-----\n2\n10\n1 1 1\n\n-----\n3\n10\n1 1 1\n\n-----\n3\n10\n1 1 1\n\n-----\n4\n10\n1 1 1\n\n-----\n4\n10\n1 1 1\n\n-----\n5\n10\n1 1 1\n\n-----\n5\n10\n1 1 1\n\n-----\n5\n10\n1 1 1\n\n-----\n5\n10\n2 1 1\n\n-----\n6\n10\n1 1 1\n\n-----\n6\n10\n1 2 1\n\n-----\n6\n10\n1 1 1\n\n-----\n7\n10\n1 1 1\n\n-----\n7\n10\n1 1 1\n\n-----\n8\n10\n1 1 1\n\n-----\n8\n10\n1 1 1\n\n-----\n8\n10\n1 1 1\n\n-----\n8\n10\n1 2 1\n\n-----\n9\n10\n1 1 1\n\n-----\n9\n10\n1 2 1\n\n-----\n9\n10\n1 1 1\n\n-----\n9\n10\n1 1 1\n\n-----\n9\n10\n1 1 1\n\n-----\n9\n10\n1 1 1\n\n-----\n9\n10\n1 1 1\n\n-----\n9\n10\n1 1 1\n\n-----\n9\n10\n2 1 1\n\n-----\n10\n10\n1 1 1\n\n-----\n10\n10\n1 1 1\n\n-----\n10\n10\n1 1 1\n\n-----\n10\n10\n1 1 1\n\n-----\n10\n10\n2 1 1\n\n-----\n11\n10\n1 1 1\n\n-----\n11\n10\n1 1 1\n\n-----\n11\n10\n1 1 1\n\n-----\n11\n10\n2 1 1\n\n-----\n11\n10\n1 1 1\n\n-----\n11\n10\n1 1 1\n\n-----\n11\n10\n2 1 1\n\n-----\n11\n10\n1 1 1\n\n-----\n11\n10\n1 1 1\n\n-----\n11\n10\n1 2 1\n\n-----\n12\n10\n1 1 1\n\n-----\n12\n10\n1 1 1\n\n-----\n12\n10\n2 1 1\n\n-----\n12\n10\n1 1 1\n\n-----\n12\n10\n1 1 1\n\n-----\n12\n10\n1 1 1\n\n-----\n12\n10\n1 1 1\n\n-----\n12\n10\n1 1 1\n\n-----\n12\n10\n1 2 1\n\n-----\n13\n10\n1 1 1\n\n-----\n13\n10\n1 1 1\n\n-----\n13\n10\n2 1 1\n\n-----\n13\n10\n1 1 1\n\n-----\n13\n10\n1 2 1\n\n-----\n13\n10\n1 1 1\n\n-----\n13\n10\n2 1 1\n\n-----\n13\n10\n1 2 1\n\n-----\n13\n10\n1 1 1\n\n-----\n13\n10\n1 1 1\n\n-----\n13\n10\n1 1 1\n\n-----\n13\n10\n2 1 1\n\n-----\n14\n10\n1 1 1\n\n-----\n14\n10\n2 1 1\n\n-----\n14\n10\n1 1 1\n\n-----\n14\n10\n1 1 1\n\n-----\n14\n10\n1 1 1\n\n-----\n14\n10\n2 1 1\n\n-----\n14\n10\n1 2 1\n\n-----\n14\n10\n1 1 1\n\n-----\n14\n10\n1 1 1\n\n-----\n14\n10\n1 1 1\n\n-----\n14\n10\n2 1 1\n\n-----\n14\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 2 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n2 1 1\n\n-----\n15\n10\n1 1 1\n\n-----\n15\n10\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 2\") == \"4\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1\\n5\\n8\\n9\\n11\\n12\\n13\\n14\\n15\\n1\") == \"15\"\nassert solution(\"2\\n1\\n5\\n8\\n9\\n11\\n12\\n13\\n14\\n15\\n1\") == \"16\"\n\"\"\"\n\nn = int(input())\nk = int(input())\ncoordinates = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10\\n2\\n\") == '4'\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n10\\n2') == '4'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10') == '4'\nassert solution('7 10') == '14'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n10\\n2\") == \"4\"\nassert solution(\"1\\n10\\n20\") == \"16\"\nassert solution(\"1\\n10\\n20\\n0\") == \"4\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10\\n2\\n\") == \"4\"\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 2\") == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10 2 3') == '4'\nassert solution('3 2 2 3') == '8'\nassert solution('2 2 3') == '8'\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('40 40 40 40') == '0'\n\"\"\"\n\nimport sys\nfrom math import inf"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('10 10 10 10') == '10'\nassert solution('1 10 10 10') == '10'\nassert solution('1 100 10 10') == '110'\nassert solution('1 10 100 10') == '110'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('600 300 220 420') == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('1000 100 100 1000') == '200'\n\"\"\"\nimport math"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nA, B, C, D = [int(x) for x in input().split()]\n\ns1 = 0 if A == 0 else C\ns2 = 0 if B == 0 else D\n\ns3 = 0 if A == 0 else B\ns4 = 0 if B == 0 else A\n\nans = max(s1, s2) + max(s3, s4)\nprint(ans)\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''400\n500\n100\n200\n''') == '400'\n\nassert solution('''400\n500\n100\n200\n''') == '700'\n\nassert solution('''400\n500\n100\n200\n''') == '400'\n\nassert solution('''400\n500\n100\n200\n''') == '400'\n\nassert solution('''400\n500\n100\n200\n''') == '400'"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nprint(\"Test 1 Passed\")\n\n-----Test 2-----\n\n-----Sample Input-----\n600\n300\n200\n420\n\n-----Sample Output-----\n720\n\nThe train fare will be 600 yen if you buy ordinary tickets, and 300 yen if you buy an unlimited ticket.\nThe bus fare will be 200 yen if you buy ordinary tickets, and 420 yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for 600 yen, and the optimal choice for buses is to buy an unlimited ticket for 420 yen.\nTherefore, the minimum total fare is 720 yen.\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == '4'\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == 4\n\"\"\"\n\nn = int(input())\norder = list(map(int, input().split()))\n\na = [0 for _ in range(n)]\nfor i in range(n):\n    a[i] = abs(order[i] - (i + 1))"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 4 4 0 2\n''') == '4'\n\nassert solution('''\n5\n2 4 4 0 2\n''') == '4'\n\nassert solution('''\n6\n3 1 1 1 2 1\n''') == '1'\n\nassert solution('''\n3\n1 2 1\n''') == '0'\n\nassert solution('''\n1\n1\n''') == '1'"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('5\\n2 4 4 0 2') == 4\n'''\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == '4'\nassert solution(\"5\\n2 4 4 0 2\") == '4'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 4 0 2') == '4'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 1 0 1 1') == '4'\nassert solution('1 1 0 1 1') == '4'\nassert solution('1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4 0 2\\n\") == 4\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nassert solution(\"100 1000 1000\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 10 10\") == \"19\"\nassert solution(\"100 1000 1000\") == \"0\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nfrom sys import stdin\nimport math\n\nn = int(stdin.readline())\na = int(stdin.readline())\nb = int(stdin.readline())\n\ns = 0\nfor i in range(n + 1):\n    if int(math.log10(i)) + 1 <= a and int(math.log10(i)) + 1 >= b:\n        s += i\n\nprint(s)\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 2 5') == '84'\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 2 5') == \"84\"\n\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 2 5\") == 84\n\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\n\"\"\"\n\nn,a,b = [int(x) for x in stdin.strip().split(' ')]\nc = [str(x) for x in range(1, n + 1)]\n\ns = 0\nfor i in c:\n    s += int(i)\n\nprint(s)\n\ns = 0\nfor i in c:\n    t = 0\n    for j in i:\n        t += int(j)\n    if a <= t <= b:\n        s += int(i)\nprint(s)\n\ns = 0\nfor i in c:\n    if (int(i[0]) + int(i[1])) >= a and (int(i[0]) + int(i[1])) <= b:\n        s += int(i)\nprint(s)"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nassert solution(\"20 11 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n\nimport unittest\nimport sys\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution1(self):\n        self.assertEqual(solution('100'), 'ABC100')\n    def test_solution2(self):\n        self.assertEqual(solution('1000'), 'ABC1000')\n    def test_solution3(self):\n        self.assertEqual(solution('1000'), 'ABC1000')"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100') == 'ABC100'\nassert solution('203') == 'ABC203'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\n----\n\nimport sys\n\nassert solution(\"100\") == \"ABC100\"\nassert solution(\"133\") == \"ABC133\"\nassert solution(\"1000\") == \"ABC1000\"\nassert solution(\"1001\") == \"ABC1001\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(100) == \"ABC100\"\n\n----------------------\n\nSolution:"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"ABC100\"\nprint(solution(\"100\"))"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100') == 'ABC100'\nassert solution('200') == 'ABC200'\nassert solution('300') == 'ABC300'\nassert solution('400') == 'ABC400'\nassert solution('500') == 'ABC500'\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100') == 'ABC100'"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n') == '5'\n\n-----Explanation-----\nThe code below is used to test your solution. Feel free to modify it.\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5') == '5'\n\n\"\"\"\n\na, b = [int(i) for i in stdin.split()]\n\nprint((a-1) * 31 + (b-1) * 30)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(print())\n\"\"\"\n\na, b = [int(input()) for _ in range(2)]\n\ncount = 0\nfor i in range(1, 13):\n    for j in range(1, 32):\n        if i == a and j == b:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5') == '5'\nassert solution('5 1') == '6'\nassert solution('5 31') == '31'\nassert solution('12 31') == '365'\nassert solution('12 1') == '365'\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nnum_of_takahashi_days = (b - 1) + (31 * (a - 1))\n\nprint(num_of_takahashi_days)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"3 10\") == \"8\"\nassert solution(\"2 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3, 1) == 3\nassert solution(1, 2) == 1\nassert solution(6, 2) == 4\nassert solution(5, 2) == 5\nassert solution(4, 5) == 1\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n') == '5'\nprint('OK!')\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n1\\n2\") == \"2\"\nassert solution(\"4\\n3\\n1\\n1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\nassert solution(\"4\\n2\\n1\\n1\\n2\") == \"2\"\nassert solution(\"5\\n4\\n1\\n1\\n2\\n2\") == \"2\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1\n2\n3''') == '2'\nassert solution('''3\n1\n2\n3''') == '2'\n\n---------------------------------\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3\\n1\\n2\\n\") == \"2\"\nassert solution(\"4\\n4\\n2\\n3\\n\") == \"-1\"\nassert solution(\"3\\n2\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n2\\n1\\n1\\n\") == \"1\"\nassert solution(\"3\\n3\\n2\\n2\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n3\n1\n2''') == '2'\nassert solution('''4\n4\n1\n2\n3\n4''') == '-1'\n'''\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n3\n1\n2\n\"\"\") == '2'\nassert solution(\n\"\"\"\n5\n1\n2\n3\n4\n\"\"\") == '-1'\nassert solution(\n\"\"\"\n2\n1\n2\n\"\"\") == '0'\nassert solution(\n\"\"\"\n2\n1\n2\n\"\"\") == '1'\nassert solution(\n\"\"\"\n2\n1\n1\n\"\"\") == '0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n\") == \"1\"\nassert solution(\"3\\n2\\n\") == \"2\"\nassert solution(\"3\\n3\\n\") == \"-1\"\nassert solution(\"3\\n1\\n\") == \"0\"\nassert solution(\"3\\n2\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3\n1\n2''') == '2'\nassert solution('''4\n4\n1\n2\n3''') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n6\\n') == '1'\nassert solution('4\\n6\\n2\\n6\\n') == '2'\nassert solution('2\\n6\\n2\\n6\\n') == '1'\nassert solution('1\\n6\\n2\\n6\\n') == '1'\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\n\nfrom collections import Counter\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor _ in range(n):\n    numbers = [int(i) for i in sys.stdin.readline().split()]\n    print(sum([1 for i in numbers if i % 2 == 0]))\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n6\\n2\\n6\\n') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nassert sys.stdin.readline().rstrip() == '3'\nassert sys.stdin.readline().rstrip() == '6'\nassert sys.stdin.readline().rstrip() == '2'\nassert sys.stdin.readline().rstrip() == '6'"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\":3\\n:6\\n:2\") == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n3\\n4\\n5\\n6\") == \"1\"\nassert solution(\"2\\n2\\n3\\n4\\n5\\n6\") == \"6\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"6\"\nassert solution(\"4\\n5\\n2\\n3\\n1\\n6\\n4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '1'\nassert solution('5 2\\n1 1 2 2 5\\n') == '1'\nassert solution('5 3\\n1 1 2 2 5\\n') == '2'\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\n\nn, k = map(int, input().split())\nnumbers = list(map(int, input().split()))\nnumbers_counter = Counter(numbers)\n\nans = 0\nfor number, count in numbers_counter.items():\n    if count > k:\n        ans += count - k\n\nprint(ans)\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5\\n2 3 5') == '1'\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2 2 5') == 1\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 1 2 2 5''') == '1'\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 2 2 5\") == 1\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter, defaultdict\n\nclass Solution:\n    def gcd_of_list(self, nums: list) -> int:\n        ans = nums[0]\n        for n in nums:\n            ans = gcd(ans, n)\n        return ans\n\n    def solve(self, stdin):\n        N, K = map(int, stdin.split())\n        A = list(map(int, stdin.split()))\n        d = defaultdict(list)\n        for i, a in enumerate(A):\n            d[a].append(i)\n        \n        for v in d.values():\n            if len(v) > 1:\n                v.sort()\n                i = self.gcd_of_list(v)\n                if i > 1:\n                    for j in v:\n                        A[j] //= i\n        \n        return len(d)\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2\n1 1 2 2 5''') == '1'\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations\nfrom collections import defaultdict"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 2 2 5\") == 1\n\n------\nInput\n5 2\n1 1 2 2 5\n\nOutput\n1\n\nExplanation:\n\nFor example, if we rewrite the integer on the fifth ball to 2, there are two different integers written on the balls: 1 and 2.\nOn the other hand, it is not possible to rewrite the integers on zero balls so that there are at most two different integers written on the balls, so we should print 1.\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n6 1 1\\n') == 'Yes'\nassert solution('1 1 1\\n') == 'No'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\nassert solution(\"2\\n3 1 2\\n6 0 1\") == \"No\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 2\\n6 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n4 0 5 0\\n4 0 0 5\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\\n3 1 1\") == 'Yes'\nassert solution(\"4 4 4\\n3 4 4\") == 'No'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 3 4\") == \"No\"\nassert solution(\"3 1 2 4 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"Yes\"\nassert solution(\"4\\n1 1 2 1\") == \"No\"\nassert solution(\"4\\n2 3 1 2\") == \"No\"\nassert solution(\"4\\n3 2 3 2\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n') == 2\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nx = (a + b) / 2\nprint(round(x))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"7 5\") == \"8\"\nassert solution(\"27 45\") == \"28\"\nassert solution(\"999 999\") == \"1000\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1') == '5'\nassert solution('1 2') == '2'\nassert solution('1 3') == '2'\nassert solution('1 4') == '2'\nassert solution('100 1') == '101'\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'7 7\\n'\n'1 3\\n'\n'2 7\\n'\n'3 4\\n'\n'4 5\\n'\n'4 6\\n'\n'5 6\\n'\n'6 7') == '4'\n\"\"\"\n\n\nfrom typing import List, Tuple, Set\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\n\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n''') == '0'\n\nassert solution('''\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '6'\n\nassert solution('''\n8 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '10'\n\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n''') == '0'"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3\\n2 3\\n1 2\\n2 3\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 3\\n2 4\\n2 3\\n5 6\\n1 3\") == '4'\n\n---------------------\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == \"4\"\n-----\nhcl:#b6652a ecl:blu byr:1942\neyr:2027 iyr:2019\nhgt:177cm pid:594543312\n\nhcl:#733820 eyr:2020 hgt:163cm\niyr:2011\nbyr:1927\necl:blu pid:624930382\n\nbyr:1942 hgt:179cm pid:648518098 eyr:2026 ecl:brn hcl:#fffffd\niyr:2013\n\npid:879792628 ecl:oth\neyr:2021\nhcl:#cfa07d byr:1968 hgt:159cm iyr:2014\n\nhcl:#6b5442 ecl:brn byr:1927\npid:855764693 hgt:59in eyr:2024 iyr:2012\n\niyr:2015\nhcl:#b6652a hgt:160cm\npid:493385988 byr:1924\necl:blu eyr:2030\n\neyr:2025 hcl:#733820\nhgt:189cm iyr:2016 pid:789610044\n\neyr:2020\nhcl:#efcc98\necl:grn\nbyr:1978\niyr:2020 hgt:169cm pid:391239026\n\neyr:2024 ecl:oth hgt:179cm iyr:2014\nbyr:1954\npid:270073693 hcl:#341e13\n\nhgt:164cm ecl:hzl iyr:2019 eyr:2020\nhcl:#efcc98\npid:723262620 byr:1944\n\npid:157cm\niyr:2030 hcl:z\necl:#18002d eyr:1931 hgt:68cm\nbyr:1925\n\npid:638103597\nhcl:#cfa07d ecl:grn\niyr:2015\neyr:2025 hgt:171cm\nbyr:1938\n\nhgt:65in\nhcl:#7d3b0c iyr:2019\necl:oth eyr:2023 pid:112449735 byr:1931\n\neyr:2021 iyr:2013 hgt:179cm\necl:brn\nhcl:#b6652a pid:446311593\nbyr:1922\n\necl:hzl\neyr:2024 hcl:#c0946f\niyr:2010 hgt:155cm\nbyr:1931\npid:169013200\n\neyr:2024 ecl:brn hgt:187cm\npid:810453336 byr:1929 hcl:#341e13\n\necl:amb eyr:2022 hcl:#c0946f iyr:2013\nhgt:170cm\npid:927640282\n\nbyr:1932\neyr:2023 iyr:2018 hcl:#fffffd\npid:425927744 ecl:brn\nhgt:173cm\n\nbyr:1935 eyr:2023\nhgt:69in pid:844221084\niyr:2010 hcl:#cfa07d ecl:hzl\n\neyr:2021\nbyr:1953\nhgt:64in\necl:hzl\nhcl:#7d3b0c pid:848608161\n\nhgt:162cm\nhcl:#b6652a pid:822053014\neyr:2027 ecl:oth iyr:2010 byr:1960\n\nbyr:1931 eyr:2024\npid:146216579 hcl:#b6652a ecl:amb hgt:160cm iyr:2013\n\niyr:2012 pid:939194321\nhgt:171cm ecl:blu eyr:2030 hcl:#18171d\nbyr:1981\n\nhgt:175cm iyr:2020 hcl:#733820 pid:824116618\necl:blu byr:1954 eyr:2021\n\neyr:2025 hgt:161cm\nhcl:#b6652a iyr:2019 ecl:oth byr:1944\npid:721780502\n\nhcl:#b6652a iyr:2020\neyr:2021\nhgt:160cm\npid:908651292\necl:blu byr:1937\n\npid:286972000 iyr:2010 ecl:oth hcl:#b6652a hgt:184cm byr:1922\neyr:2026\n\necl:oth hcl:#6b5442\nbyr:1968 hgt:155cm eyr:2028\niyr:2011 pid:220167888\n\nhcl:#888785\nhgt:76in\neyr:2027\npid:898271154 ecl:amb byr:1986 iyr:2012\n\nbyr:1972 iyr:2018\nhcl:#733820 ecl:amb\neyr:2027 hgt:180cm\npid:566043377\n\nhcl:#341e13\nbyr:2002 hgt:185cm iyr:2020\neyr:2030 pid:250958607\n\neyr:2040\npid:836450024\niyr:2015\nhgt:62cm hcl:z byr:2007 ecl:gmt\n\nhgt:178in\nbyr:2025 hcl:#c0946f iyr:2015\neyr:2039\n\nhcl:#866857 eyr:2022 iyr:2018 byr:1961\npid:139722546 hgt:164cm ecl:grn\n\necl:brn byr:1942\nhcl:#c0946f eyr:2023\npid:795225596 iyr:2020\nhgt:155cm\n\necl:hzl\nhgt:191cm\nhcl:#c0946f byr:1947 iyr:2020\neyr:2023 pid:921031793\n\nhcl:z byr:2021\necl:amb hgt:170in\npid:337834086 iyr:2024\n\nhcl:#341e13\niyr:2011\neyr:2030\npid:418415112 hgt:158cm ecl:brn byr:1951\n\neyr:2021\npid:226932477\nhgt:163cm hcl:#a97842 ecl:blu byr:1953\n\neyr:2030 hcl:#866857\nhgt:193in ecl:hzl\niyr:1970 byr:2024 pid:652393758\n\npid:"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n7 7\") == \"4\"\n\n-------TESTED WITH-------\nPYTHON 3.6.9\n\n------INPUT-------\n3 6\n1 2\n2 3\n1 3\n2 3\n3 4\n4 5\n5 6\n\n------OUTPUT------\n3\n\n------INPUT-------\n6 8\n1 2\n2 3\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\n1 7\n\n------OUTPUT------\n5\n\n------INPUT-------\n6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n\n------OUTPUT------\n4\n\n------INPUT-------\n7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 7\n\n------OUTPUT------\n0\n\n------INPUT-------\n8 10\n1 2\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n8 10\n9 10\n\n------OUTPUT------\n4\n\n------INPUT-------\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n8 10\n9 10\n10 10\n\n------OUTPUT------\n0\n\n------INPUT-------\n4 4\n1 2\n2 3\n3 4\n4 4\n\n------OUTPUT------\n0\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '4'\nassert solution('6 6\\n1 3\\n2 5\\n3 4\\n4 5\\n5 6') == '0'\nassert solution('2 1\\n1 2') == '2'\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\nassert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == '7'\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == '2'\nassert solution('1 1 1') == '2'\nassert solution('5 7 5') == '7'\n\nprint(solution('5 7 5'))\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 2 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 2 1') == '2'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"3 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '5'\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == '5'\nassert solution('5 7 8') == '8'\nassert solution('7 7 8') == '7'\nassert solution('4 4 4') == '4'\n\"\"\"\n\nimport sys\n\nA, B, C = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('9 5 7') == '9'\nassert solution('7 5 7') == '7'\nassert solution('5 9 5') == '9'\nassert solution('9 6 5') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nfrom typing import List, Dict\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        ops = [int(x) for x in stdin.split()]\n        ops_map = {1: (100, 0), 2: (100, 0), 3: (0, 100), 4: (0, 100)}\n\n        pre_sugar = 0\n        pre_water = 0\n        for op in ops:\n            water, sugar = ops_map[op]\n            water = pre_water + water\n            sugar = pre_sugar + sugar\n            water, sugar = min(water, 400), min(sugar, 200)\n            pre_water, pre_sugar = water, sugar\n        return \"{} {}\".format(water, sugar)\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution().solution\n\n    def test_one(self):\n        self.assertEqual(self.solution(\"1 2 10 20 15 200\"), \"110 10\")\n\n    def test_two(self):\n        self.assertEqual(self.solution(\"1 3 1 2 1 2 3\"), \"250 200\")"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\nimport re"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\n------Solution------\n\nA, B, C, D, E, F = map(int, stdin.split())\nans = 0\nfor i in range(1, F // D + 1):\n    ans += A * i + E * (i - 1)\nfor i in range(1, (F - E) // E + 1):\n    ans += B * i + E * (i - 1)\nfor i in range(1, (F - E - D) // E + 1):\n    ans += C * i + E * (i - 1)\n\nprint(ans, ans * E)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 2 10 20 15 200\"\n) == \"110 10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2 10 20 15 200''') == '110 10'\nassert solution('''4 2 4 4 4 2 4 4 4 2 4 2 4 4 2 4 4 2 4 2 4 4 2 4 4 4 2 4 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\nassert solution(\"1 2 3 10 20 15 200\") == \"110 0\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(A, B, C, D, E, F) == (110, 10)\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('internationalization') == 'i18n'\nprint(solution('internationalization'))\n\"\"\"\n\nfrom typing import Dict\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u0438\u043d\u044b n, \u0441\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u043d\u0430 s.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 s.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.\n\nSample Input 1:\n\n3\n1\nSample Output 1:\n\n3 = 1 + 2\nSample Input 2:\n\n3\n5\nSample Output 2:\n\n6 = 5 + 5 + 5\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('w3resource') == 'w3r'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\nimport string\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    stdin='''\na\nb\n'''\n) == 'YES'\nassert solution(\n    stdin='''\na\nb\n'''\n) == 'NO'\nassert solution(\n    stdin='''\na\nb\nc\n'''\n) == 'YES'\n\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('pot') == 'YES'\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"YES\"\nassert solution(\"jot\") == \"NO\"\nassert solution(\"dot\") == \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'NO'\nassert solution('some other string') == 'NO'\n\n---Problem 2---\n\nWrite a program that receives a comma-separated sequence of integers and prints the number of items and the average of them.\n\n-----Input-----\nThe first line of the input contains the number of numbers in the sequence n (1 \\leq n \\leq 100) n\nThen n numbers follow:\n\n-----Output-----\nPrint the number of items and the average of them in a single line.\n\n-----Sample Input-----\n6\n9, 3, 1, 7, 5, 8\n\n-----Sample Output-----\n6\n4.2"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"pot top\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pot top') == 'YES'\nassert solution('top pot') == 'YES'\n\"\"\"\n\nfrom typing import Any, Dict, List, Union\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abac\") == \"c\"\n\"\"\"\n\ns = input()\nk = int(input())"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'ab'\nassert solution('ababa') == 'ab'\nassert solution('ababaa') == 'ab'\nassert solution('ababab') == 'ab'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'ab'\nassert solution('abac') == 'abac'\nassert solution('abacd') == 'abacd'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n\ns = input().strip()\nK = int(input().strip())"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\nassert solution('abacab') == 'c'\nassert solution('abacababcacab') == 'cabac'\nassert solution('abacab') == 'c'\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\nfrom itertools import product\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"abc\"\nassert solution(\"babac\") == \"ac\"\nassert solution(\"ababa\") == \"ab\"\nassert solution(\"aabbaa\") == \"ab\"\nassert solution(\"aaaaaaaaaaaaa\") == \"a\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aba') == 'b'\nassert solution('abab') == 'ab'\nassert solution('abac') == 'ab'\n\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'b'\nassert solution('abacd') == 'c'\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '5 4 2\\n2 1 1\\n3 3 4'\n) == '9'\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\nassert solution(\"6 6 3\\n1 3 4\\n2 5 6\") == \"9\"\nassert solution(\"5 5 10\\n1 3 1\\n2 4 2\\n3 4 4\\n4 5 4\") == \"19\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nW, H, N = [int(n) for n in stdin.readline().split()]\nXYA = [(int(n) for n in stdin.readline().split()) for _ in range(N)]\nleft = min(XYA, key=lambda t: t[0])\nright = max(XYA, key=lambda t: t[0])\nup = max(XYA, key=lambda t: t[1])\ndown = min(XYA, key=lambda t: t[1])"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n3 3 1\\n2 1 2\\n5 1 4\\n2 3 4\\n3 4 4\\n5 1 2\\n2 3 2\\n1 4 2\\n3 1 2\\n4 3 2\") == \"19\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\":\\\\2020\\Day11\\input\") == '963'\n\"\"\"\n\n\"\"\"\ninput :\n20 21 3\n0 0 1\n0 2 1\n1 3 2\n0 1 1\n0 0 2\n0 2 2\n2 2 1\n2 1 2\n0 1 2\n1 2 1\n2 1 3\n3 1 1\n2 1 1\n2 2 1\n1 3 1\n1 2 2\n2 2 2\n3 1 2\n3 3 1\n2 1 2\n1 2 2\n1 2 3\n0 0 1\n0 2 1\n0 0 2\n2 2 1\n2 1 2\n1 2 1\n2 1 3\n3 1 1\n2 1 1\n2 2 2\n1 3 1\n1 2 3\n3 1 2\n3 3 2\n3 2 2\n3 2 1\n2 2 2\n0 3 1\n1 1 1\n0 0 1\n1 0 1\n3 2 1\n2 3 1\n2 1 1\n1 3 1\n2 1 1\n2 1 2\n2 1 1\n1 3 1\n2 1 2\n2 3 1\n2 1 1\n1 1 1\n2 1 3\n2 1 1\n3 3 1\n3 1 2\n0 3 1\n3 0 1\n0 0 2\n0 0 1\n1 0 1\n1 2 1\n0 0 1\n1 1 1\n0 2 1\n0 1 2\n2 1 1\n0 0 1\n1 1 1\n2 1 2\n1 1 1\n0 0 1\n1 0 2\n3 2 2\n0 1 2\n0 3 2\n1 0 2\n0 0 1\n3 0 2\n3 1 1\n0 1 1\n1 0 1\n1 0 1\n3 1 2\n2 3 1\n2 2 2\n0 0 2\n1 0 2\n0 2 1\n2 1 1\n0 2 1\n1 1 1\n0 0 1\n2 1 1\n2 0 1\n1 2 2\n3 0 1\n0 3 1\n2 2 1\n2 2 2\n1 1 1\n0 0 1\n0 0 1\n0 0 1\n2 1 1\n2 1 1\n0 2 1\n1 1 1\n1 1 1\n1 1 1\n0 1 2\n1 0 1\n0 0 1\n2 0 1\n0 0 1\n0 2 1\n0 1 2\n2 1 1\n1 2 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n0 1 2\n2 0 1\n1 1 1\n0 0 1\n2 0 1\n2 0 1\n2 0 1\n1 0 1\n0 0 1\n2 0 1\n0 0 1\n1 0 1\n2 0 1\n0 0 1\n0 0 1\n1 0 1\n0 1 1\n1 1 1\n0 0 1\n0 0 1\n2 2 1\n2 1 2\n0 1 2\n0 1 2\n1 1 1\n1 1 1\n0 1 1\n0 1 2\n0 0 1\n2 1 2\n0 2 1\n0 0 1\n0 0 1\n0 0 1\n0 1 2\n2 0 1\n0 0 1\n0 2 1\n2 2 1\n0 0 1\n1 0 1\n0 0 1\n1 0 2\n0 2 1\n2 0 1\n0 0 1\n0 1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n1 0 1\n2 0 1\n1 1 1\n0 0 1\n0 0 1\n0 0 1\n2 0 1\n2 0 1\n1 2 2\n0 2 1\n1 1 1\n0 0 1\n0 0 1\n0 2 1\n0 0 1\n0 0 1\n2 0 1\n1 2 1\n1 1 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n2 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n1 1 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n1 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n0 0 1\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n1 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_str) == output_str\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4 2\n2 1 1\n3 3 4''') == '9'\n\n---\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u043e\u0442 \u043b\u0435\u0432\u043e\u0433\u043e \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430 \u0440\u0430\u0432\u043d\u044b\u043c (0, 0) \u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0432\u0432\u0435\u0440\u0445 \u0438 \u0432\u043b\u0435\u0432\u043e \u043f\u043e \u0441\u043e\u043b\u0434\u0430\u0442\u0441\u043a\u043e\u0439 \u043f\u043b\u0430\u043d\u0435\u0442\u0435.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 - \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0432 \u0441\u0430\u043d\u0442\u0438\u043c\u0435\u0442\u0440\u0430\u0445 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043b\u0434\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u0435\u043b\u0438\u043b\u0438 \u043d\u0430 \u043f\u043e\u043b\u0435. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u043d\u0430 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0448\u0430\u0445\u043c\u0430\u0442\u043d\u044b\u0435 \u0444\u0438\u0433\u0443\u0440\u044b \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0441\u043e\u043b\u0434\u0430\u0442 \u043d\u0430 \u043f\u043e\u043b\u0435 \u0434\u0432\u0438\u0433\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c:\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043b\u0434\u0430\u0442 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043f\u0440\u0438 \u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u0441\u043e\u043b\u0434\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043f\u043e \u043a\u0440\u0430\u044f\u043c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430, \u043e\u043d\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043e\u043b\u0434\u0430\u0442\u044b, \u043d\u043e \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440: \u0414\u0430\u043d\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 W = 2, H = 2, N = 5. \u041f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0432 \u0442\u0430\u043a\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434:\n\n-------------------------\n| 2 2 2 2 2 2 2 2 |\n| 2 1 1 2 1 2 2 2 |\n| 2 1 2 1 2 1 2 2 |\n| 2 1 2 1 2 1 2 2 |\n| 2 1 2 1 2 1 2 2 |\n| 2 2 2 2 2 2 2 2 |\n-------------------------\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043b\u0434\u0430\u0442 \u0440\u0430\u0432\u043d\u043e 5, \u043f\u0440\u0438 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u043a\u0440\u0430\u044f\u043c \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e:\n\n\u0421\u043e\u043b\u0434\u0430\u0442\u044b 1, 2 \u0438 3 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044f\u0442 \u0432\u043b\u0435\u0432\u043e, \u043f\u0440\u0438\u0447\u0435\u043c \u0432 \u0441\u0443\u043c\u043c\u0435 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043b\u0434\u0430\u0442 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u044b\u043c 9.\n\u0421\u043e\u043b\u0434\u0430\u0442\u044b 4, 5 \u0438 6 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044f\u0442 \u0432\u0432\u0435\u0440\u0445, \u0432 \u0441\u0443\u043c\u043c\u0435 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043b\u0434\u0430\u0442 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u044b\u043c 18.\n\u0421\u043e\u043b\u0434\u0430\u0442\u044b 7, 8 \u0438 9 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044f\u0442 \u0432\u043f\u0440\u0430\u0432\u043e, \u0432 \u0441\u0443\u043c\u043c\u0435 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043b\u0434\u0430\u0442 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u044b\u043c 27.\n\u0418\u0442\u043e\u0433\u043e, \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0440\u0430\u0432\u043d\u0430 27.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 W, H \u0438 N - \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043b\u0434\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u0435\u043b\u0438\u043b\u0438 \u043d\u0430 \u043f\u043e\u043b\u0435. \u0427\u0438\u0441\u043b\u0430 W, H \u0438 N \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u041f\u0440"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\n-------Pseudo code--------\n\nfind the area of white region within the rectangle"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 4 2\\n2 1 1\\n3 3 4'\n) == '9'"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n6 5 1\n1 10 1\n''') == '12\\n11\\n0'\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\": 1 10 1\") == \"12\"\nassert solution(\"3 5 1\") == \"12\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport math\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\":\\n10 1 10\\n1 10 1\") == \"12\\n11\\n0\\n\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n6 5 1\\n1 10 1\\n') == '12\\n11\\n0'\n\"\"\"\n\nfrom typing import List\n\n\nclass Train:\n    def __init__(self, arrival_time: int, depart_time: int, change_time: int, station_id: int):\n        self.arrival_time = arrival_time\n        self.depart_time = depart_time\n        self.change_time = change_time\n        self.station_id = station_id\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6 5 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nn = int(input())\nc, s, f = [], [], []\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    c -= 1\n    s.append(a)\n    f.append(b)\n    c.append(c)\n\ndp = [[0] * n for _ in range(2)]\n\ndp[0][0] = s[0]\n\nfor i in range(1, n):\n    if f[i] == 0:\n        dp[0][i] = max(dp[0][i-1], s[i])\n    else:\n        dp[1][i] = max(dp[0][i-1], dp[1][i-1] + s[i])"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n.*\\n:') == '*'\nassert solution('2 2\\n.*\\n:') == '*:*'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\n\"\"\"\n\nimport math\nimport sys\n\nstdin = sys.stdin.readlines()\n\nH, W = [int(num) for num in stdin[0].split(\" \")]\n\nfor i in range(H):\n    for j in range(W):\n        if stdin[1][i * W + j] == \"*\":\n            print(\"*\", end=\"\")\n        else:\n            print(\".\", end=\"\")\n    print()\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 1'\nassert solution('1 2') == '1 1\\n2 2'\n\n'''"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n.\\n.*\\n') == '.*\\n.*\\n.*\\n.*'\nassert solution('2 2\\n.\\n.*\\n') == '.*\\n.*\\n.*\\n.*'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\\n\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n*\\n.*\\n') == '.*\\n.*'\n\"\"\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n.*\\n.*\\n.*\"\nassert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\"\n\"\"\"\n\n\nimport sys\nfrom typing import List\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 2\n*.\n.*''') == '''*.\n.*\n.*\n.*'''\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.*.\\n..*.\\n') == '.*.\\n..*.\\n'\nassert solution('..*.\\n.**.') == '..*.\\n.**.'\nassert solution('*.*\\n.*.') == '*.*\\n.*.'\nassert solution('*.*\\n.**') == '*.*\\n.*.'\n\nprint('Passed all tests')\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('2 6 1 4 5') == 'YES'\nassert solution('2 6 1 4 5 3') == 'NO'\n\n\"\"\"\n\n\nimport sys\nfrom collections import Counter\n\n\"\"\"\nCreate a dictionary and a set.\nCheck if all the numbers in the set is less than or equal to the \ndictionary's value.\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n1 5 3 4 5') == 'NO'\n\"\"\"\n\nN = input()\nA = [int(x) for x in input().split()]"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"YES\"\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n_, *input_str = sys.argv\ninput_str = list(map(int, input_str))\n\ninput_dict = {}\n\nfor i in input_str:\n    if i in input_dict:\n        print(\"YES\")\n        break\n    else:\n        input_dict[i] = 1\nelse:\n    print(\"NO\")\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1 4 5') == 'YES'\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = [int(x) for x in sys.stdin.readline().strip().split(' ')]\ns = set(a)\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1 4 5\") == \"YES\"\n\n\"\"\"\n\nimport unittest\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin.split(\"\\n\")[0])\n        integers = [int(s) for s in stdin.split(\"\\n\")[1].split(\" \")]\n        if len(set(integers)) == N:\n            return \"YES\"\n        else:\n            return \"NO\"\n\nclass Testsolution(unittest.TestCase):\n    def test_1(self):\n        stdin = \"5\\n2 6 1 4 5\"\n        output = \"YES\"\n        self.assertEqual(solution(stdin), output)\n\n    def test_2(self):\n        stdin = \"8\\n5 6 7 1 4 3 8 7 3\"\n        output = \"YES\"\n        self.assertEqual(solution(stdin), output)\n\n    def test_3(self):\n        stdin = \"5\\n2 6 1 4 5\"\n        output = \"NO\"\n        self.assertEqual(solution(stdin), output)\n\n    def test_4(self):\n        stdin = \"6\\n2 3 7 6 5 4\"\n        output = \"NO\"\n        self.assertEqual(solution(stdin), output)\n\n    def test_5(self):\n        stdin = \"6\\n1 2 3 4 5 6\"\n        output = \"YES\"\n        self."
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 2 2 1 2 1 2\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 2 2 1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\"\"\"\n\n\nfrom typing import List, Tuple, Union"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n1 2 2 1 2 1 1 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n1 2 2 1 2 1 1 2\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n1 2 3 4 5\") == 2\nassert solution(\"5\\n6\\n1 2 3 4 5\") == 3\nassert solution(\"5\\n8\\n1 2 3 4 5\") == 3\nassert solution(\"5\\n8\\n1 2 3 4 5\") == 4\nassert solution(\"5\\n8\\n1 2 3 4 5\") == 4\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '3'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '4'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '1'\n\n\"\"\"\n\n\"\"\"\nAt most one row for each element in the matrix.\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\n\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '3'\n\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '4'\n\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '1'\n\nassert solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n''') == '2'\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 3 4 2 2\") == \"1\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5\\n22 5\\n987 13\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 2') == '2'\nassert solution('4 3') == '3'\nassert solution('7 3') == '3'\nassert solution('7 2') == '1'\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"4 6\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"13 3\\n22 5\\n987 13\") == \"5\"\nassert solution(\"9 1\\n99 1\\n999 1\\n1 1\\n22 1\\n22 22\\n22 222\\n22 2222\") == \"6\"\nassert solution(\"33 1\\n22 1\\n33 11\\n22 11\\n33 111\\n22 111\\n33 1111\\n22 1111\\n33 11111\\n22 11111\\n33331111\\n22 111111\\n333311111\\n2211111111\\n3333111111\\n221111111111\\n3333111111111\\n22111111111111\\n3333111111111\\n221111111111111\\n3333111111111111\\n221111111111111\\n3333111111111\\n2211111111111111\\n3333111111111111\\n221111111111111111\\n333311111111111111111111\\n2211111111111111111111111111\\n3333111111111111111111111111111\\n22111111111111111111111111111111111111111111111111111111111111111111\\n33331111111111111111111111111111111111111111111111111111111111111111111111111\\n2211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 3\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"1\"\nassert solution(\"987 13\") == \"77\"\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n, x = list(map(int, input().split()))\n    print((n // x) * x + (n % x) + 1)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '3'\n\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '1'\n\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '5'\n\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '77'\n\nassert solution('''4\n7 3\n1 5\n22 5\n987 13\n''') == '3'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('5 1\\n7 3\\n1 5\\n22 5\\n987 13') == '1'\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"5\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"77\"\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_cases[0]) == 3\nassert solution(test_cases[1]) == 1\nassert solution(test_cases[2]) == 5\nassert solution(test_cases[3]) == 77\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '1'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '5'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '77'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7\") == \"3\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"2\"\nassert solution(\"987 13\") == \"77\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"9 4 2 1 0 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 9 2 2 5 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"aabbcc\") == \"4 3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"aaaaaaa\") == \"26 10 1 9 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import Counter\n\ntest_cases = int(input())\nfor t in range(test_cases):\n    n, m = map(int, input().split())\n    string = input()\n    press_count = [0] * 26\n    press_count_wrong = [0] * 26\n\n    for i in range(n):\n        press_count[ord(string[i]) - 97] += 1\n        press_count_wrong[ord(string[i]) - 97] += 1\n    \n    for j in range(m):\n        press_count_wrong[ord(string[j]) - 97] += 1\n    \n    print(' '.join(map(str, press_count)))\n    print(' '.join(map(str, press_count_wrong)))\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 2, 0, 0, 0, 0, 0, 0, 9, 0, 3, 1, 0, 0, 0, 0, 0]\n\n\"\"\"\n\nimport sys\n\nN, M = [int(i) for i in sys.stdin.readline().strip().split()]\ns = sys.stdin.readline().strip()\np = [int(i) for i in sys.stdin.readline().strip().split()]\n\nans = [0 for _ in range(26)]\n\nfor i, c in enumerate(s):\n    ans[ord(c)-ord('a')] += pow(M, i, N) * p[i % M]\n\nsys.stdout.write(' '.join(map(str, ans)) + '\\n')\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2, 10, 1, 5, 2]\nassert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\n\nassert solution(\"codeforces\", 2, 8, [3, 10]) == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"codeforces\", 20, 10, [1, 10]) == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"26 10 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\nassert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n-----Teacher's solution-----\n\nn, m = map(int, input().split())\ns = input()\ncount = [0] * 26\nfor i in range(n):\n    for j in range(m):\n        count[ord(s[i + j]) - ord('a')] += 1\nprint(*count)\n\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\"\"\"\nimport sys\nimport unittest\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == '26 10 1 2 9 2 2 5 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nimport unittest"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"26 10\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"20 10 1 2 3 5 10 5 9 4\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n\"\"\"\n\nfrom itertools import product\n\nnumber_of_test_cases = int(stdin.readline())\n\nfor _ in range(number_of_test_cases):\n    a, b, c = map(int, stdin.readline().split())\n    print(sum(abs(x - y) for x, y in product(a, b) if x!= y))"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 4\\n10 20 30\") == '0'\nassert solution(\"5 5 5\\n2 4 3\") == '0'\nassert solution(\"2 4 3\\n1 1000000000 999999999\") == '1999999994'\nassert solution(\"3 2 5\\n3 2 6\") == '4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(output())"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\nprint(\"Ok!\")\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '2'\nassert solution('1 2\\n3 4') == '2'\nassert solution('1 2\\n2 3') == '3'\nassert solution('1 2\\n3 4') == '2'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 4\") == \"0\"\nassert solution(\"10 20 30\") == \"36\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"2 4 3\") == \"0\"\nassert solution(\"1 1000000000 1000000000\") == \"1999999994\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6''') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('1\\n1\\n1\\n1') == '0'\nassert solution('3\\n1\\n1\\n1') == '3'\nassert solution('3\\n1\\n1\\n1\\n1') == '4'"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '1'\n\"\"\"\n\n\"\"\"\nSolution 1\n\nFor each test case read the initial positions a, b, c of three friends, move one step towards left or right for each friend independently, and calculate the sum of distances between each pair of friends. Then the minimum total distance is the sum of the minimum distances between each pair of friends.\n\nComplexity\n\nTime complexity: O(n), where n is the number of test cases.\nSpace complexity: O(n), where n is the number of test cases.\n\"\"\"\n\nfrom typing import List\n\nfrom sys import stdin\n\nINPUT_LINES = stdin.read().splitlines()\nINPUT_CASES = INPUT_LINES[1:]\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n11 14 16 12\") == \"YES\"\nassert solution(\"2\\n1 8\") == \"NO\"\nassert solution(\"6\\n1 6 3 10 5 8\") == \"YES\"\nassert solution(\"6\\n1 12 3 10 5 8\") == \"YES\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(read_input()) == read_expected()\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\nassert solution(\"3\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES\\nNO\\nYES\\nYES\\nYES\\nNO'\n\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nYES\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES'\n\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"NO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\") == \"NO\"\n\n'''"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8') == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution('2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8') == \"YES\\nNO\"\nassert solution('3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n100 101\\n101 102\\n102 103\\n103 104\\n104 105\\n105 106\\n106 107\\n107 108\\n108 109\\n109 110\\n110 111\\n111 112\\n112 113\\n113 114\\n114 115\\n115 116\\n116 117\\n117 118\\n118 119\\n119 120\\n120 121\\n121 122\\n122 123\\n123 124\\n124 125\\n125 126\\n126 127\\n127 128\\n128 129\\n129 130\\n130 131\\n131 132\\n132 133\\n133 134\\n134 135\\n135 136\\n136 137\\n137 138\\n138 139\\n139 140\\n140 141\\n141 142\\n142 143\\n143 144\\n144 145\\n145 146\\n146 147\\n147 148\\n148 149\\n149 150\\n150 151\\n151 152\\n152 153\\n153 154\\n154 155\\n155 156\\n156 157\\n157 158\\n158 159\\n159 160\\n160 161\\n161 162\\n162 163\\n163 164\\n164 165\\n165 166\\n166 167\\n167 168\\n168 169\\n169 170\\n170 171\\n171 172\\n172 173\\n173 174\\n174 175\\n175 176\\n176 177\\n177 178\\n178 179\\n179 180\\n180 181\\n181 182\\n182 183\\n183 184\\n184 185\\n185 186\\n186 187\\n187 188\\n188 189\\n189 190\\n189 191\\n191 192\\n192 193\\n193 194\\n194 195\\n195 196\\n196 197\\n197 198\\n198 199\\n199 200\\n200 201\\n201 202\\n202 203\\n203 204\\n204 205\\n205 206\\n206 207\\n207 208\\n208 209\\n209 210\\n210 211\\n211 212\\n212 213\\n213 214\\n214 215\\n215 216\\n216 217\\n217 218\\n218 219\\n219 220\\n220 221\\n221 222\\n222 223\\n223 224\\n224 225\\n225 226\\n226 227\\n227 228\\n228 229\\n229 230\\n230 231\\n231 232\\n232 233\\n233 234\\n234 235\\n235 236\\n236 237\\n237 238\\n238 239\\n239 240\\n240 241\\n241 242\\n242 243\\n243 244\\n244 245\\n245 246\\n246 247\\n247 248\\n248 249\\n249 250\\n250 251\\n251 252\\n252 253\\n253 254\\n254 255\\n255 256\\n256 257\\n257 258\\n258 259\\n259 260\\n260 261\\n261 262\\n262 263\\n263 264\\n264 265\\n265 266\\n266 267\\n267 268\\n268 269\\n269 270\\n270 271\\n271 272\\n272 273\\n273 274\\n274 275\\n275 276\\n276 277\\n277 278\\n278 279\\n279 280\\n280 281\\n281 282\\n282 283\\n283 284\\n284 285\\n285 286\\n286 287\\n287 288\\n288 289\\n289 290\\n290 291\\n291 292\\n292 293\\n293 294\\n294 295\\n295 296\\n296 297\\n297 298\\n298 299\\n299 300\\n') == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution('3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a=[11, 14, 16, 12]) == \"YES\"\nassert solution(a=[11, 14, 16, 12]) == \"NO\"\n\nassert solution(a=[11, 14, 16, 12]) == \"YES\"\nassert solution(a=[11, 14, 16, 12]) == \"NO\"\n\nassert solution(a=[11, 14, 16, 12]) == \"YES\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\nassert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\nassert solution('3 3\\n1 2 4\\n2 1 4\\n2 3 4') == '0'\nassert solution('6 6 4\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 5\\n1 6\\n6 1\\n1 4\\n3 4\\n3 5\\n2 5') == '17'\nassert solution('2 2 1\\n1 1 2\\n2 1 2') == '0'\n\n-----Debugging-----\n\nInput\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n\nOutput\n22\n\nInput\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n\nOutput\n22\n\nInput\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n\nOutput\n13\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == '13'\nassert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == '22'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '22'\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\nassert solution(\"1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"1 1 2\\n1 2 5\\n2 3 7\") == \"5\"\nassert solution(\"1 2 3\\n2 1 4\\n3 1 2\") == \"2\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\n\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"9\\n3\\n9\\n13\\n27\\n6561\\n19683\"\nassert solution(\"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"9\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2\\n4\\n10\\n5\\n2\\n1\\n0\\n0') == '0'\nassert solution('2\\n1\\n100\\n10\\n20') == '20'\nassert solution('2\\n1\\n100\\n2\\n3') == '1'\n\"\"\"\n\nimport sys\n\nfrom collections import deque\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n2\\n3') == '1'\nassert solution('4\\n2\\n3\\n4') == '2'\nassert solution('3\\n1\\n2\\n3') == '1'\nassert solution('3\\n5\\n10\\n15') == '6'\nassert solution('5\\n1\\n2\\n3\\n4') == '3'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2\\n3\\n3\\n') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n3\\n4\\n') == '4'\nassert solution('2\\n1\\n0\\n') == '2'\nassert solution('2\\n0\\n1\\n') == '1'\nassert solution('1\\n1\\n') == '1'\n\"\"\"\n\n\"\"\"\nSolution:\n\nWe have to represent n as the sum of powers of 3, but no duplicates are allowed.\n\nThe powers of 3 are: 0, 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4294967297, 10995116277,\n\nSo we can use a recurrence relation:\n\nf(n) = min(f(n - p3) + 1 for p3 in {0, 1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4294967297}) for all n > 0\n\nNote that we can't include 0 as a power of 3, so if n = 1, then we don't include 0. Also note that we don't have to consider powers of 3 higher than n.\n\nWhen we use binary search, we can have two recurrence relations:\n\nf(n) = f(n - 1) + 1\nf(n) = f(n / 3) + 1\n\nWe can use binary search to get both solutions in O(log(n)).\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('4\\n2') == '3'\nassert solution('5\\n1') == '2'\nassert solution('5\\n2') == '4'\nassert solution('5\\n3') == '6'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3\\n5\\n2') == '2'\nassert solution('4\\n3\\n7\\n2') == '6'\n\"\"\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '1'\nassert solution('4\\n2\\n3\\n4\\n') == '3'\nassert solution('5\\n4\\n1\\n2\\n3\\n') == '4'\nassert solution('4\\n2\\n3\\n5\\n') == '4'\nassert solution('4\\n2\\n3\\n4\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1') == '5'\nassert solution('5\\n2') == '1'\nassert solution('5\\n3') == '3'\nassert solution('5\\n4') == '1'\nassert solution('5\\n5') == '5'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n7\") == \"6\"\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"6\\n6\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 2 2 2 2'\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n'\n) == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\nassert solution(\n    '6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n'\n) == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\nassert solution(\n    '6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n'\n) == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\nassert solution(\n    '6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n'\n) == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\nassert solution(\n    '6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n'\n) == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n1\\n2\") == \"1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1 1 1 1 1\"\nassert solution(\"3 3 3\") == \"3 3 3\"\nassert solution(\"2 3 3 2 1 3\") == \"2 3 3 2 1 3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4 4 4 1 4\") == \"4 4 4 1 4\"\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 2 3 4 5') == '1 1 1 1 1'\nassert solution('2\\n1 2') == '1 1'\n'''"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '''\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n'''"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"8\\n1 2 3 4 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('4 5') == '1 2 3 4 5'\nassert solution('1 2 3 4 5') == '0 1 2 3 4 5'\nassert solution('1 1 1 1 1 1 1 1') == '-1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6\\n1 5') == '8'\nassert solution('3 5\\n0 3 1') == '7'\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3\"\nassert solution(\"3 5\\n0 3 1\\n\") == \"7\\n5 -2 4 -1 2\"\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n1 5\n1 2\n3 6\n1 3\n3 3\n0 5\n3 7\n1 4\n1 3\n0 1\n0 3\n1 7\n0 2\n2 3\n2 7\n1 7\"\"\") == \"7\\n-2 4 -1 2\"\n\"\"\"\n\n[\n    [1 5],\n    [1 2],\n    [3 6],\n    [1 3],\n    [3 3],\n    [0 5],\n    [3 7],\n    [1 4],\n    [1 3],\n    [0 1],\n    [0 3],\n    [1 7],\n    [0 2],\n    [2 3],\n    [2 7],\n    [1 7]\n]\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 5\\n1 1\\n5 3\\n4 4\\n2 2\\n1 1\\n4 4\\n5\\n2 1\\n2\\n5\\n5\\n5\\n3\\n5\\n4\\n5\\n2\\n5') == '8'\n\n'''"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3\\n\"\nprint(solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3\\n\")\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"RUUURRRRUU\"\n\"\"\"\n\nfrom queue import Queue\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU\\nNO\\nYES\\nRRRRUUU'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == 'YES\\nRUUURRRRUU'\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\nassert solution(\"3\\n2\\n1 0\\n0 1\") == \"NO\\nRRRRUUU\"\nassert solution(\"3\\n1\\n0 1\") == \"NO\\nRRRRUUU\"\n\"\"\"\n\nimport itertools\nimport sys\n\ndebug = False\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRU\"\nassert solution(\"1\\n4 3\") == \"YES\\nU\"\nassert solution(\"1\\n4 3\\n2\") == \"NO\"\nassert solution(\"1\") == \"YES\\n\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5') == 'YES\\nRUUURRRRUU'\nassert solution('5\\n4 3\\n2') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRRRRUUU\"\nassert solution(\"5\\n4\\n1 0\\n0 1\\n1\") == \"YES\\nRRRRUUU\"\nassert solution(\"3\\n5\\n4 3\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\"\"\"\n\n\nimport sys\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n\nclass TestCase(object):\n    def __init__(self, n, packages):\n        self.packages = sorted(packages)\n        self.n = n\n\n    def __str__(self):\n        return \"TestCase(n={}, packages={})\".format(self.n, self.packages)\n\n    def __repr__(self):\n        return self.__str__()\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"9\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\") == \"8\"\nassert solution(\"217871987498122 10\\n100000000000000001 1\") == \"899999999999999999\"\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == '0'\nassert solution(\"1 1\") == '0'\nassert solution(\"500 4\") == '8'\nassert solution(\"217871987498122 10\") == '899999999999999999'\nassert solution(\"100000000000000001 1\") == '899999999999999999'\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '899999999999999999'\nassert solution('100000000000000001 1') == '899999999999999999'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 1') == '0'\nassert solution('2 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '9'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"5 1\") == \"6\"\nassert solution(\"5 9\") == \"12\"\nassert solution(\"5 1000\") == \"13\"\nassert solution(\"5 10000\") == \"11\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 0 1\\n5\\n1 1 0 1\\n\") == \"2\"\nassert solution(\"4\\n1 1 0 1\\n5\\n1 1 0 1\\n\") == \"0\"\nassert solution(\"4\\n1 1 0 1\\n5\\n1 0 1 1\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\\n\") == '2\\n0\\n2\\n4\\n1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == solution(input())"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n5\n1 1 0 1 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n4\n1 1 0 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n5\n1 1 0 1 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n4\n1 1 0 1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n5\n1 1 0 1 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n4\n1 1 0 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n\n\"\"\") == \"2\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\") == \"2\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"7\\n0 1 1 1 1 1 1\") == \"0\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 0 1 1\\n3\\n1 0 0\\n5\\n1 1 0 1\\n6\\n1 0 0 0 0 1') == '2\\n0\\n2\\n4\\n1'\nassert solution('2\\n6\\n1 0 0\\n5\\n1 1 0 1') == '1\\n0\\n0'\nassert solution('1\\n5\\n1 1 0 1 1') == '0'\n\"\"\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n0 0 1 0 0 1\") == \"0\"\nassert solution(\"5\\n0 0 0 0 1\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\") == \"2\"\nassert solution(\"2\\n1 0 0\") == \"0\"\nassert solution(\"1\\n1 1\") == \"0\"\n\n---\n\"\"\"\n\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    n = int(sys.stdin.readline().strip())\n    a = [int(x) for x in sys.stdin.readline().strip().split(' ')]\n    ans = 0\n    left = 0\n    right = n - 1\n    while left <= right:\n        for i in range(right, left - 1, -1):\n            if a[i] == 1:\n                ans += 1\n                break\n        for j in range(left, right + 1):\n            if a[j] == 1:\n                ans += 1\n                break\n        left += 1\n        right -= 1\n    print(ans)\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\\n\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"3\\n6\\n0 0 0\\n\") == \"0\"\nassert solution(\"1\\n6\\n0 0 0\\n\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0 1 0 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\") == \"2\"\nassert solution(\"7\\n1 1 0 0 1\") == \"0\"\nassert solution(\"7\\n1 1 0 0 1\") == \"0\"\nassert solution(\"7\\n1 0 0 0 1\") == \"1\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n7 3\\n4 4\\n6 2\"\n) == \"cbcacab\"\n\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 3\\n4 4\\n6 2\\n\") == \"cbcacab\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\\n\") == \"cbcabba\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\\n\") == \"ccbbaaa\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab\\nabcd\\nbaabab'\n\nassert solution('7 3\\n4 4\\n6 2') == 'cbcacab\\nabcd\\nbaabab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == 'cbcacab'\nassert solution(\"7 4\\n4 4\\n6 2\") == 'abcd'\nassert solution(\"7 1\\n4 4\\n6 2\") == 'baabab'\nassert solution(\"1 1\\n1 1\") == 'a'\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n2 2\\n3 3\\n\") == \"aab\\nbb\\naa\"\n\nassert solution(\"1 1\\n2 2\\n3 3\\n\") == \"aa\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\\n\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\\n\")!= \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\\n\")!= \"cbcabba\"\nassert solution(\"7 3\\n4 4\\n6 2\\n\")!= \"ccbbaaa\"\n\n\"\"\"\n\nimport sys\nimport math\nimport collections\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\\nabcd\\nbaabab\"\nassert solution(\"7 3\\n4 4\\n6 3\") == \"cbcacab\\nccbbaaa\"\nassert solution(\"7 3\\n4 4\\n6 4\") == \"cbcacab\\nccbbaaa\\nabcd\"\nassert solution(\"7 3\\n4 4\\n6 5\") == \"cbcacab\\nccbbaaa\\nacbabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n7 3\\n4 4\\n6 2') == 'cbcacab\\nabcd\\nbaabab'"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n    \"\"\") == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n\n\"\"\"\n\n\nimport collections\nimport sys\nfrom typing import List, NamedTuple, TextIO, Dict, Set, Iterator, Tuple\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINE = 0\n\nN = int(INPUT_LINES[INPUT_LINE])\nCANDIES_SIZE = INPUT_LINES[INPUT_LINE + 1]\nINPUT_LINE += 2\n\nassert N >= 1\nassert N <= 1000\nassert len(CANDIES_SIZE) == N\n\ncandies = [int(char) for char in CANDIES_SIZE]\n\nassert all(1 <= c <= 1000 for c in candies)\n\nSUM_CANDIES_SIZE = sum(candies)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000') == '6 23 21'\nassert solution('13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1') == '6 45 46'\nassert solution('7\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1') == '3 4 2'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100000)\nt = int(sys.stdin.readline().rstrip())\nfor _ in range(t):\n    n = int(sys.stdin.readline().rstrip())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    # a = [int(x) for x in sys.stdin.readline().rstrip().split()]\n    b = 0\n    alice = []\n    bob = []\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if not alice:\n            alice.append(a[i])\n            bob.append(0)\n        else:\n            if s >= b:\n                if s > b:\n                    alice.append(a[i])\n                    bob.append(0)\n                else:\n                    alice.append(0)\n                    bob.append(b)\n            else:\n                alice.append(0)\n                bob.append(s)\n    if sum(alice) > sum(bob):\n        print(len(alice) - 1, sum(alice), sum(bob))\n    else:\n        print(len(alice) - 1, sum(alice), sum(bob))\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\n\"\"\"\nfrom typing import List, Tuple, Dict, Union\nfrom enum import Enum\n\n\nclass Player(Enum):\n    ALICE = 1\n    BOB = 2\n\n\nclass Turn(Enum):\n    MOVE = 1\n    END = 2\n\n\nclass Move:\n    def __init__(self, player: Player, turn: Turn, candies_eaten: Union[int, None] = None) -> None:\n        self.player = player\n        self.turn = turn\n        self.candies_eaten = candies_eaten\n\n    def __repr__(self):\n        return f\"{self.player.name}: {self.turn.name} {self.candies_eaten}\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5') == '6 23 21'\nassert solution('1\\n1000') == '1 1000 0'\nassert solution('13\\n1 2 3 4 5 6 7 8 9 10 11 12 13') == '2 1 2'\nassert solution('2\\n2 1') == '2 1 2'\nassert solution('6\\n1 1 1 1 1 1') == '3 4 2'\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 1\\n1\\n5') == '1 1000 0'\nassert solution('5\\n1 2 3 4 5\\n5\\n5') == '2 1 2'\nassert solution('5\\n1 2 3 4 5\\n5\\n5') == '2 1 2'\n\"\"\"\n\nimport sys\n\ntest_cases = int(sys.stdin.readline())\n\nfor _ in range(test_cases):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().split()))\n\n    first_sum = 0\n    second_sum = 0\n    first_eat_count = 0\n    second_eat_count = 0\n    current_sum = 0\n\n    for i in range(n):\n        if first_sum + arr[i] > second_sum:\n            second_eat_count += 1\n            if current_sum > 0:\n                first_eat_count += 1\n            current_sum += arr[i]\n        elif second_sum + arr[i] > first_sum:\n            first_eat_count += 1\n            if current_sum > 0:\n                second_eat_count += 1\n            current_sum += arr[i]\n        else:\n            first_eat_count += 1\n            second_eat_count += 1\n            current_sum += arr[i]\n\n    first_sum = current_sum\n    second_sum = current_sum\n    current_sum = 0\n\n    for i in range(n - 1, -1, -1):\n        if first_sum + arr[i] > second_sum:\n            second_eat_count += 1\n            if current_sum > 0:\n                first_eat_count += 1\n            current_sum += arr[i]\n        elif second_sum + arr[i] > first_sum:\n            first_eat_count += 1\n            if current_sum > 0:\n                second_eat_count += 1\n            current_sum += arr[i]\n        else:\n            first_eat_count += 1\n            second_eat_count += 1\n            current_sum += arr[i]\n\n    print(first_eat_count, second_eat_count, first_sum, second_sum)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5') == '6 23 21'\n\"\"\"\n\n\"\"\"\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c\u0441\u044f \u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u043c, \u0438 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b.\n\n\u0412 \u043a\u043e\u0440\u0442\u0435\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\n\n\u041a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u043e\u0440\u0442\u0435\u0436\u0430\u043c\u0438.\n\n\u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Python \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 tuple.\n\n\u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0430.\n\n\u041c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0441\u0430 tuple \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u0445.\n\n\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0430\n\u041f\u0443\u0441\u0442\u043e\u0439 \u043a\u043e\u0440\u0442\u0435\u0436 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u043a\u043b\u0430\u0441\u0441\u0430 tuple.\n\n\u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c.\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0443 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"6 23 21\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\nprint(\"Test 1 passed\")\n\nassert solution(\"5 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n5\\n1 1 1 1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"5 10 10\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\nprint(\"Test 2 passed\")\n\nassert solution(\"5 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n5\\n1 1 1 1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"5 10 10\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\nprint(\"Test 3 passed\")\n\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n5\\n1 1 1 1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"3 5 6\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\nprint(\"Test 4 passed\")\n\nassert solution(\"3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n5\\n1 1 1 1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"3 5 6\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\nprint(\"Test 5 passed\")"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\\n\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\n\n\n\n7. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u043f\u0440\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043a\u0430\u043d\u0430\u043b \u0441\u0432\u044f\u0437\u0438 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u043a\u0430\u043d\u0430\u043b\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u0441\u0442\u0443\u043f\u0438\u043b \u0432 \u043e\u0444\u0438\u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0412 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0435 \u0432\u0438\u0434\u044f\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430.\n\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043a\u0430\u043d\u0430\u043b \u0441\u0432\u044f\u0437\u0438 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u043a\u0430\u043d\u0430\u043b\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u0441\u0442\u0443\u043f\u0438\u043b \u0432 \u043e\u0444\u0438\u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0412 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0435 \u0432\u0438\u0434\u044f\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430.\n\n\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u043f\u0440\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c.\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043d\u0430\u043b\u0430 \u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0443\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u0430\u043d\u0430\u043b"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n3 1\\n3 2\\n1 2 3') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"5\"\nassert solution(\"2 1\") == \"6\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"5 3\") == \"18\"\nassert solution(\"5 3\") == \"18\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"\nassert solution(\"2 1\\n1 2\\n3 4\") == \"27\"\nassert solution(\"4 0\\n2 2 4 3\") == \"17\"\nassert solution(\"4 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2 3 4\\n5 3\\n1 2 3 4 5\") == \"27\"\n\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"11\"\nassert solution(\"2 1\") == \"5\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"2 2 4 3\") == \"27\"\nassert solution(\"5 5 6 6 5\") == \"39\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '27'\nassert solution('1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '39'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n13 14 15\\n16 17 18\\n19 20 21') == '17'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n13 14 15\\n16 17 18\\n19 20 21\\n22 23 24') == '39'\nassert solution('1 2\\n2 1') == '0'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3''') == '''6\n27\n39\n11\n17'''\nassert solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3''') == '''6\n27\n39\n11\n17'''\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 4\") == \"17\"\n\"\"\"\n\nimport sys\n\nt = int(input())\nfor _ in range(t):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    for i in range(k):\n        # \uac19\uc740 \uacbd\uc6b0\uc5d4 \uc0dd\ub7b5\n        if a == b:\n            break\n        # \uc778\ub371\uc2a4 \uac12\uc744 \uae30\uc900\uc73c\ub85c \ud6c4\ubcf4\ub97c \uc0dd\uc131\n        candidates = []\n        for j in range(len(a)):\n            # \ub2e4\ub978 \uacbd\uc6b0\uc5d4 \uc0dd\ub7b5\n            if a[j]!= b[j]:\n                candidates.append((j, a[j], b[j]))\n        # \uc911\ubcf5\uc744 \ud5c8\uc6a9\ud558\ubbc0\ub85c len(candidates) > 1\n        # \uac19\uc740 \uacbd\uc6b0\ub294 \uc0dd\ub7b5\n        if len(candidates) > 1:\n            # \uac00\uc7a5 \uc791\uc740 \uac12\uc744 \ucc3e\uae30 \uc704\ud574 \ucd5c\ub300\uac12\uc744 \ucd08\uae30\ud654\n            min_diff = sys.maxsize\n            # \uac00\uc7a5 \ud070 \uac12\uc744 \ucc3e\uae30 \uc704\ud574 \ucd5c\uc18c\uac12\uc744 \ucd08\uae30\ud654\n            max_diff = -1\n            # candidates \ub9ac\uc2a4\ud2b8\ub97c \ud558\ub098\uc529 \ucd94\ucd9c\n            for j in range(len(candidates)):\n                # \uac01 \uac00\uc7a5 \ud070 \uac12\n                max_diff = max(max_diff, candidates[j][1])\n                # \uac01 \uac00\uc7a5 \uc791\uc740 \uac12\n                min_diff = min(min_diff, candidates[j][2])\n            # \uac00\uc7a5 \uc791\uc740 \uac12\uc744 \ucc3e\uc558\uc73c\ubbc0\ub85c \ub450 \uac12\uc744 \uad50\ud658\n            a[candidates[0][0]], b[candidates[0][0]] = min_diff, max_diff\n    print(sum(a))\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n1 2\") == \"6\"\nassert solution(\"2 1\\n1 2\") == \"3\"\nassert solution(\"3 4\\n5 5\") == \"11\"\nassert solution(\"5 5\\n5 5 6 6 5\") == \"17\"\nassert solution(\"5 3\\n1 2 5 4 3\") == \"39\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a) == b"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5''') == '0 7 13 18 24 35 36 37 40 45'\n\nassert solution('''10 1\n3 2 3 1 3 3 1 4 1''') == '0 2 4 7 8 11 13 14 16 17'\n\nprint(solution(input()))\n\n'''\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 3 4\\n1 2 3 4') == '0 2 3 4 7 8'\n\"\"\"\n\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaabb\") == \"aabab\"\nassert solution(\"aabab\") == \"baaba\"\nassert solution(\"aaaaabaaaaabaaaaaaaa\") == \"aaaaabaaaaabaaaaaaaa\"\nassert solution(\"aaaaab\") == \"aaaaab\"\nassert solution(\"aaabb\") == \"aabab\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == \"aaabb\"\nassert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == \"aaaaabaaaaabaaaaaaaa\"\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1') == 'aabb'\nassert solution('7 3') == 'babaa'\n\"\"\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n5 2\") == \"aaabb\"\nassert solution(\"5 8\\n5 10\") == \"baaba\"\nassert solution(\"5 8\\n5 10\") == \"baaba\"\nassert solution(\"3 1\\n3 2\") == \"aaaab\"\nassert solution(\"3 1\\n3 2\") == \"aaaab\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(string_to_test_cases('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''')) == 'aaabb'\n\nassert solution(string_to_test_cases('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''')) == 'aabab'\n\nassert solution(string_to_test_cases('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''')) == 'baaba'\n\nassert solution(string_to_test_cases('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''')) == 'bbaaa'\n\nassert solution(string_to_test_cases('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''')) == 'abb'"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaabb\\naabab\\nbaaba\\nbbaaa') == 'aabb'\nassert solution('aaabb\\naabab\\nbaaba\\nbbaaa') == 'aaabb'\nassert solution('aaabb\\naabab\\nbaaba\\nbbaaa') == 'aabab'\nassert solution('aaabb\\naabab\\nbaaba\\nbbaaa') == 'baaba'\nassert solution('aaabb\\naabab\\nbaaba\\nbbaaa') == 'bbaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaabb') == 'aaabb'\nassert solution('aabab') == 'aabab'\nassert solution('baaba') == 'baaba'\nassert solution('bbaaa') == 'bbaaa'\nassert solution('abb') == 'abb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'aaaab'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 1\") == \"aaabb\"\nassert solution(\"5\\n5 2\") == \"aabab\"\nassert solution(\"5\\n5 8\") == \"baaba\"\nassert solution(\"5\\n5 10\") == \"bbaaa\"\nassert solution(\"3\\n3 1\") == \"aaa\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19') == '6\\n1\\n5\\n10'\nassert solution('4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19') == '6\\n1\\n5\\n10'\n\"\"\"\n\nimport sys\nimport heapq\n\nsys.setrecursionlimit(100000000)\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '6'\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '1'\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '5'\nassert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '10'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '6'\nassert solution('2\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '1'\nassert solution('4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '5'\n\nassert solution('2\\n4 4\\n1 4\\n1 1\\n2 3\\n2 2') == '1'\nassert solution('3\\n2 3\\n2 2\\n4 1') == '0'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == '6'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4''') == '6'\nassert solution('''7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4''') == '1'\nassert solution('''10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3''') == '5'\nassert solution('''10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3''') == '10'\n'''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\") == \"16\"\nassert solution(\"1 2\\n1 1\\n1 2\\n3 4\") == \"2\"\nassert solution(\"1 2\\n1 2\\n1 2\\n3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\\n1\\n5\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10\\n1 5 2 3 1 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\") == \"1\"\nassert solution(\"10 1\\n1 2 3 4 5 6 7 8 9 10\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\") == \"3\\n0\\n1\\n0\\n0\\n0\\n3\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n2\\n2\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\"\nassert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n7\"\n\"\"\"\n\nimport sys\n\nN, X = list(map(int, input().split()))\n\nL = []\nfor _ in range(N):\n    y = int(sys.stdin.readline())\n    if y >= X:\n        L.append(y + X)\n    else:\n        L.append(y)\n\nprint(max(L))\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == '0\\n0\\n0\\n0'\n\n-----"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 2 0 3\\n0 4 5 6 8') == '5'\n\nassert solution('2 1 3 1 4\\n0 2 1 0 2') == '3'\n\nassert solution('1 3 3 2 1\\n0 2 3 1 1') == '0'\n\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"4 3\\n0\\n1\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 3\\n1 2 3 4\\n2 3 3\\n\") == \"1 2 3 4\\n\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 49\") == \"1 49\"\nassert solution(\"5 20 50\") == \"20 40 30 50 10\"\nassert solution(\"6 20 50\") == \"20 40 30 50 10\"\nassert solution(\"5 3 8\") == \"8 23 18 13 3\"\nassert solution(\"9 13 22\") == \"1 10 13 4 19 22 25 16 7\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 49\\n5 20 50\\n6 20 50\") == '1 49\\n20 40 30 50 10'\nassert solution(\"4 1 49\\n5 3 8\\n6 20 50\") == '1 10 13 4 19 22 25 16 7'\nassert solution(\"4 1 49\\n5 10 10\\n6 20 50\") == '1 10 13 4 19 22 25 16 7'\nassert solution(\"4 1 49\\n5 12 15\\n6 20 50\") == '1 10 13 4 19 22 25 16 7'\nassert solution(\"4 1 49\\n5 13 18\\n6 20 50\") == '1 10 13 4 19 22 25 16 7'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7\"\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\") == \"1 49\\n20 40 30 50 10\"\nassert solution(\"5 3 8\\n9 13 22\") == \"8 23 18 13 3\"\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50'\n\"\"\"\n\n\"\"\"\nIn this problem, we need to find the array which minimizes the maximum element.\n\nThe question is equivalent to the following one:\n\nWhat is the minimum value of the array that can be sorted to satisfy the given requirements?\n\nTo show that this minimum array is always possible,\nwe have to show that it is the minimum possible value of a[i].\n\nFor example, consider the following array: [3, 2, 3, 1, 2].\nThe array can be sorted in three ways:\n1. [3, 2, 3, 1, 2]\n2. [3, 2, 1, 2, 3]\n3. [1, 2, 2, 3, 3].\nIn the first way, the maximum element is 3; in the second way, it is 3; in the third way, it is 2.\n\nSo the minimum possible value of the array is the value of the maximum element, which is 2 in our case.\n\nFor the minimum possible values of the array, we have to go through the numbers from the largest to the smallest, and note them down.\n\nThis problem is just the implementation of the idea we discussed before.\n\nLet's have a look at an example:\n[5, 3, 2, 1, 2]\n\nWe can sort the array by increasing order.\n\nThe maximum element is 5, so it is the minimum possible value of the array.\n\n[5, 3, 2, 1, 2]\n[1, 2, 2, 3, 5]\n[1, 2, 2, 3, 5]\n[1, 2, 2, 3, 5]\n[1, 2, 2, 3, 5]\n\nSo if we consider the value of the array at index 0, then it is always the minimum possible value of the array.\n\nThus, for each index of the array, we'll get the minimum possible value of the array.\n\nTime: O(n), n is the size of the array. We have to go through the whole array.\nSpace: O(n), the space used by our result.\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nprint(solution(\"3 3 1 2\"))"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\n\n\nInput\n4 5 1 2 3\n\nOutput\n1 2 3 4 5\n\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2') == '1 2 3','should give 1 2 3'\nassert solution('2 3') == '2 3','should give 2 3'\nassert solution('1 2') == '1 2','should give 1 2'\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\n--------"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('2 3 5 7 9') == '9 7 5 3'\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\nSolution\n1.\n[1, 2, 3]\n[3, 2, 1]\n[1, 3, 2]\n\n1.\n[1, 2, 3]\n[3, 2, 1]\n[1, 2, 3]\n\n2.\n[1, 2, 3]\n[3, 2, 1]\n[1, 2, 3]\n\n2.\n[1, 2, 3]\n[3, 2, 1]\n[1, 2, 3]\n\n3.\n[1, 2, 3]\n[3, 2, 1]\n[1, 2, 3]\n\n3.\n[1, 2, 3]\n[3, 2, 1]\n[1, 2, 3]\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nprint('Test pass.')\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\n\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('2 3 1') == '1 2 3'\nassert solution('2 1 3') == '1 2 3'\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('12') == 'NO'\nassert solution('2') == 'YES'\nassert solution('2 3') == 'NO'\nassert solution('4') == 'YES'\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2 3') == 'YES'\nassert solution('3\\n3 3 3') == 'NO'\nassert solution('4\\n5 5 5 5') == 'NO'\nassert solution('1\\n1 1 1 1') == 'NO'\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('input.txt', 'r')) == open('output.txt', 'r').read()\nprint('Well done!')\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == 'YES'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == 'NO'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == 'NO'\nassert solution(\"2\\n2\\n2\\n2\\n2\\n\") == 'NO'\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == 'YES'\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\\n4\\n1 1 1 1\") == \"YES\"\n\"\"\"\n\nimport sys\nimport io\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 3\\n3\\n3\") == \"YES\"\nassert solution(\"4\\n2\\n2 3\\n4\\n3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"4\\n3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"4\\n1 1 1 1\\n4\\n1 1 1 1\") == \"NO\"\nassert solution(\"5\\n2\\n2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"5\\n1 1 1 1\\n4\\n1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == 'NO\\nNO\\nYES\\nNO\\nNO'\n\"\"\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2') == '1 2 3 4'\nassert solution('2\\n4') == '1 2 3 4'\nassert solution('3\\n6') == '3 1 4 2'\nassert solution('13\\n7') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('12\\n13') == '12 13 9 10 11 3 4 1 2 6 7 8 5'\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2') == '2 1 4 3'\nassert solution('3\\n5') == '5 3 1 2 4'\nassert solution('7\\n13') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('3\\n8') == '8 3 1 7 2 5 6 4'\nassert solution('5\\n10') == '10 5 4 7 3 1 2 9 8 6'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2\\n4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2\\n4\\n6\\n7\\n13\\n')!= '9 6 10 8 4 7 3 1 5 2'\n\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom functools import lru_cache\nfrom itertools import permutations\nimport sys\nimport heapq"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7'"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3\\n5\\n\") == '2 3 6 5 1 4'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n\n\nimport sys\nimport itertools"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n4\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\n\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\") == '9 6 10 8 4 7 3 1 5 2'\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\")!= '9 6 10 8 4 7 3 1 5 3'\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\")!= '9 6 10 8 4 7 3 1 5 2'\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\")!= '9 6 10 8 4 7 3 1 5 1'\n\nassert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\")!= '9 6 10 8 4 7 3 1 5 3'"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"6\\n9\") == \"1 2 3 4 5 6\"\nassert solution(\"6\\n4\") == \"1 2 3 4\"\nassert solution(\"6\\n2\") == \"1 2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 7 6') == '2'\nassert solution('3 2 6') == '1'\nassert solution('1') == '-1'\nassert solution('7') == '0'"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(r\"D:\\Downloads\\in.txt\").read()) == open(r\"D:\\Downloads\\out.txt\").read()\n\n\"\"\"\n\n\n\nfrom typing import List\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '2'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '1'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '-1'\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '0'\n\nassert solution('''4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n''') == '2'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '2\\n1\\n-1\\n0'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0') == '2\\n1\\n-1\\n0'\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6') == '2'\nassert solution('4\\n1\\n7') == '-1'\nassert solution('4\\n3 2 7 6\\n4\\n9 2 1 18 3 0') == '0'\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"7\"\nassert solution(\"7\\n7\") == \"0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n2 7\\6\") == 2\nassert solution(\"4\\n3\\n2 6\") == -1\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"7\"\nassert solution(\"7\\n7\") == \"0\"\nassert solution(\"4\\n9 2 1 18 3 0\") == \"0\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3\\n2\\n6\") == \"2\"\nassert solution(\"3\\n3\\n2\\n7\") == \"1\"\nassert solution(\"3\\n3\\n2\\n6\") == \"2\"\nassert solution(\"3\\n3\\n2\\n6\") == \"2\"\nassert solution(\"3\\n3\\n2\\n7\") == \"1\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6') == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\") == \"2 2 2 2 2 1 1 0 2\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        # create a tree from the given graph\n        n = int(stdin.readline())\n        adj = [None for _ in range(n)]\n        for _ in range(n - 1):\n            a, b = [int(i) for i in stdin.readline().split()]\n            adj[a - 1] = b - 1\n            adj[b - 1] = a - 1\n        # solution\n        result = [0 for _ in range(n)]\n        # initially color all vertices to 0\n        for i in range(n):\n            result[i] = 0\n        # count black and white vertices\n        for i in range(n):\n            # iterate through the neighbor of the vertex\n            for neighbor in adj[i]:\n                if result[neighbor] == 0:\n                    # if the neighbor is white, color it black\n                    result[neighbor] = 1\n                else:\n                    # if the neighbor is black, color it white\n                    result[neighbor] = 0\n        # print the result\n        print(*result, sep=\" \")\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n') == '2 2 2 2 2 1 1 0 2'\n\nassert solution('4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n') == '0 -1 1 -1'\n\n\n\"\"\"\n\nfrom queue import Queue\n\nn = int(input())\n\nt = [0] * n\n\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    t[a - 1] = 1\n    t[b - 1] = 1"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9\\n0 1 1 1 0 0 0 0 1') == '2 2 2 2 2 1 1 0 2'\nassert solution('4\\n0 0 1 0') == '0 -1 1 -1'\n\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 3\") == \"2 2 2 2 1 1 0 2\"\n\"\"\"\nfrom sys import stdin\n\nN = int(stdin.readline())\ncolors = list(map(int, stdin.readline().split()))\n\nadj = [set() for i in range(N)]\nfor i in range(N - 1):\n    u, v = map(int, stdin.readline().split())\n    adj[u - 1].add(v - 1)\n    adj[v - 1].add(u - 1)"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 7\\n7 8\\n7 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\") == \"2 2 2 2 2 1 1 0 2\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 3\") == \"1 -1 1 0\"\nassert solution(\"3\\n1 2\") == \"0 -1 1 -1\"\n\n---\n\n```python\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 1 1 1 0 0\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"5\\n0 1 1 1 0 0\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"0 -1 1 -1\"\n\n-----Problem-----\n\"\"\"\n\nclass Graph:\n    def __init__(self, n: int):\n        self.n = n\n        self.parent = [None] * n\n        self.rank = [0] * n\n\n    def make_set(self, x: int) -> None:\n        self.parent[x] = x\n        self.rank[x] = 0\n\n    def union(self, x: int, y: int) -> None:\n        xr, yr = self.find(x), self.find(y)\n        if xr == yr:\n            return\n        if self.rank[xr] > self.rank[yr]:\n            self.parent[yr] = xr\n        else:\n            self.parent[xr] = yr\n            if self.rank[xr] == self.rank[yr]:\n                self.rank[yr] += 1\n\n    def find(self, x: int) -> int:\n        while x!= self.parent[x]:\n            x = self.parent[x]\n        return x\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"8\") == \"2\"\nassert solution(\"12\") == \"2\"\nassert solution(\"15\") == \"2\"\nassert solution(\"16\") == \"3\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == '0'\nassert solution(3) == '-1'\nassert solution(4) == '2'\nassert solution(5) == '-1'\nassert solution(6) == '2'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\\n') == '0\\n-1\\n2\\n-1\\n-1\\n12\\n36'\nassert solution('7\\n12\\n12345\\n15116544\\n387420489\\n') == '12\\n36'\nassert solution('7\\n15116544\\n387420489\\n') == '-1\\n-1\\n36'\n\"\"\"\n\nimport sys\nimport json\nimport math\nimport traceback\nimport functools\nimport operator\n\nfrom utils import *\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"2\\n4\") == \"1\"\nassert solution(\"4\\n8\") == \"2\"\nassert solution(\"8\\n16\") == \"4\"\nassert solution(\"2\\n4\") == \"1\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('6') == '2'\nassert solution('7') == '3'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7') == '-1'\nassert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('12') == '2'\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n12\\n6\") == \"0\"\nassert solution(\"5\\n1\\n2\\n3\\n12\\n6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"3\\n12\") == \"2\"\nassert solution(\"15116544\\n387420489\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\nprint(\"Well done.\")\n\"\"\""
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '4'\n\"\"\"\n\nfrom typing import Union, Dict, List"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBRGBRGB\") == \"RRGBRGGGBBBBBRRRRBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RBRG\") == \"RBRG\"\nassert solution(\"RGBG\") == \"RBRG\"\nassert solution(\"RBRGBRBGBBGBRRRG\") == \"RBRGBRRGBBBBB\"\nassert solution(\"RB\") == \"RBR\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"5 3\") == 0\nassert solution(\"RBRGR\") == 3\n\nprint(solution(\"BGGGG\"))\nprint(solution(\"5 3\"))\nprint(solution(\"RBRGR\"))\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RBRGR') == 3\nassert solution('BBBRR') == 0\nassert solution('BGGGG') == 1\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RBRG\") == \"RGB\"\nassert solution(\"RBRGBRBGB\") == \"RBRGBRBGB\"\nassert solution(\"RBRGBRBGBRBGBRBGB\") == \"RBRGBRBGBRBGBRBGB\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BGGGG') == 1\nassert solution('5 2') == 0\nassert solution('5 3') == 3\nassert solution('5 5') == 3\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBG\") == \"RBRG\"\nassert solution(\"RGBGR\") == \"RGRGB\"\n\"\"\"\n\nimport sys\nimport os\n\nDEBUG = True"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BGGGG\") == \"1\"\nassert solution(\"RBRGR\") == \"0\"\nassert solution(\"BBBRR\") == \"3\"\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBRGBRGB\") == \"RGBRGBRGB\"\nassert solution(\"RRRR\") == \"RRRR\"\nassert solution(\"RGRGR\") == \"RRRR\"\nassert solution(\"RRRRG\") == \"RRRRG\"\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"GBRG\") == \"R\"\nassert solution(\"BRG\") == \"RB\"\nassert solution(\"RRG\") == \"RR\"\nassert solution(\"RRRB\") == \"RRRB\"\n\nprint(solution(\"GBRRBGB\"))\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == 3\n\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == 3\n\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == 3\n\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == 3\n\nassert solution('''2\n5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == 3"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n5\\n3 1 2 3 1') == '3'\nassert solution('2\\n7\\n1 1 1 1 1 2 2') == '3'"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\") == \"3\\n3\"\nassert solution(\"2\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"1\\n6\\n1 1 1 1 1 2 2\") == \"2\\n2\"\nassert solution(\"1\\n7\\n1 1 1 1 1 2 2\") == \"2\\n2\"\nassert solution(\"1\\n8\\n1 1 1 1 1 2 2\") == \"2\\n2\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n3 1 2 3 1\n7\n1 1 1 1 1 2 2''') == '3'\n\nassert solution('''1\n1 1 1 1 1 2 2''') == '3'\n\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3\\n3\\n3\\n3\\n5\\n1 2 3 1 2 3 1 3\") == \"3\\n3\\n3\\n3\\n3\\n3\\n3\"\nassert solution(\"6\\n2\\n1 1 1 1 1 2 2\\n3\\n1 1 1 1 1 2 2\\n4\\n1 1 1 1 1 2 2\\n5\\n1 1 1 1 1 2 2\\n6\\n1 1 1 1 1 2 2\") == \"6\\n3\\n3\\n3\\n3\\n3\\n3\"\nassert solution(\"4\\n1\\n1 1 1 1\\n2\\n2 2 2 2\") == \"3\\n3\\n3\"\nassert solution(\"5\\n5\\n4 4\\n4 4\\n4 4\\n4 4\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n3 3 3 3\") == \"5\\n5\\n5\\n5\\n5\\n5\"\nassert solution(\"7\\n7\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\\n3 3 3 3\") == \"7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n3\\n4\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n6\") == '5'\nassert solution(\"1\\n3\\n5\\n6\\n4\\n3\\n2\\n1\\n3\\n3\\n2\\n2\\n2\\n4\\n3\\n5\\n1\\n3\\n2\\n1\\n4\\n4\\n5\\n1\\n5\\n6\") == '6'\n\"\"\"\n\nimport sys\nimport re\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINE_COUNT = 1\nEXIT_COMMAND = 0"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 2 3\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"4\\n3 1 2 3\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n4 9 2 3\\n1\\n3') == '1'\nassert solution('3\\n5\\n1 4 3 2 3\\n4\\n1 2 3 4 1') == '3'\nassert solution('3\\n4\\n1 2 3 1') == '2'\nassert solution('2\\n4\\n1 2 3 4 1') == '4'\nassert solution('2\\n4\\n4 3 3 1') == '1'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n2 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1\\n1') == ''\nassert solution('1 2\\n1 1 2') == ''\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"1\\n1\") == \"1 \"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4 \"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4 \"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3'\nassert solution('4\\n1 2 4 3') == '1 2 3 4'\n\"\"\"\n\nfrom typing import Iterable\nimport itertools\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n5 4 1 3 2') == '1 5 2 4 3 '\nassert solution('4\\n1 2 4 3') == '1 2 3 4 '\nassert solution('1\\n1') == '1 '\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('3\\n') == '1 2 3'\nassert solution('5\\n') == '1 2 3 4 5'\nassert solution('3\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\\n') == '1 2 3 4 5 \n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n5\\n5 4 1 3 2\\n4\\n1 2 4 3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 5 2 4 3 \"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n4\\n4 3 2 1\") == \"1 2 3 4\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\nassert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"4\\n1\") == \"1 \"\nassert solution(\"1\\n1\") == \"1 \"\n\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\n\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\n\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import permutations"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\" * 5\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n2 3 1\") == \"NO\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"1\\n1\\n1\\n1\") == \"YES\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"NO\"\nassert solution(\"1\\n2\\n3\\n4\") == \"YES\"\nassert solution(\"1\\n2\\n3\\n4\\n5\") == \"NO\"\n\"\"\"\n\n\n\"\"\"\n-----SOLUTION-----\n\nThe order of the students is given by the input. The order of the students will not change if the round dance is started. \n\nThe only two conditions for a round dance to be possible are:\n\nFor each student, the next student in the clockwise direction is after them.\nFor each student, the next student in the counterclockwise direction is before them.\n\nThe answer to the first query is YES if and only if the first condition is satisfied for all n students. \n\nThe answer to the second query is YES if and only if the second condition is satisfied for all n students.\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    5\n    4\n    1 2 3 4\n    3\n    1 3 2\n    5\n    1 2 3 5 4\n    1\n    1\n    5\n    3 2 1 5 4\n    \"\"\"\n) == \"\"\"\nYES\nYES\nNO\nYES\nYES\n\"\"\"\n\n\"\"\"\nYou are given a positive integer N. You should find the count of numbers 2 <= p <= N that have the form ab, where a + b = N and a, b are distinct, a <= b.\n\nInput\nIn a single line you will receive N.\n\nOutput\nPrint the result modulo 987654321.\n\nConstraints\n1 <= N <= 1000\n\nExamples\nInput\nOutput\n\n2\n3\n0\n\nExplanation\n2: a + b = 3\n3: a + b = 6\n0: a + b = 0\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\n------\n\nInput\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n\nOutput\nYES\nYES\nNO\nYES\nYES\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(111111)"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\n-----Test Case-----\n'''\nInput\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n\nOutput\nYES\nYES\nNO\nYES\nYES\n\nExplanation\nTest Case 1:\n\nThe students are in order 1, 2, 3, 4.\n\nIn order to start a clockwise round dance, we need 3 students to come in the order 3, 2, 1.\n\nIn order to start a counterclockwise round dance, we need 3 students to come in the order 3, 2, 1.\n\nTest Case 2:\n\nThe students are in order 1, 2, 3, 4.\n\nIn order to start a clockwise round dance, we need 2 students to come in the order 2, 1.\n\nIn order to start a counterclockwise round dance, we need 2 students to come in the order 2, 1.\n\nTest Case 3:\n\nThe students are in order 1, 2, 3, 4.\n\nIn order to start a clockwise round dance, we need 5 students to come in the order 4, 2, 3, 1, 5.\n\nIn order to start a counterclockwise round dance, we need 5 students to come in the order 4, 2, 3, 1, 5.\n\nTest Case 4:\n\nThe students are in order 1, 2, 3, 5, 4.\n\nIn order to start a clockwise round dance, we need 4 students to come in the order 1, 3, 2, 5.\n\nIn order to start a counterclockwise round dance, we need 4 students to come in the order 1, 3, 2, 5.\n\nTest Case 5:\n\nThe students are in order 3, 2, 1, 5, 4.\n\nIn order to start a clockwise round dance, we need 2 students to come in the order 3, 1.\n\nIn order to start a counterclockwise round dance, we need 2 students to come in the order 3, 1.\n'''"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4') == 'YES\\nYES\\nNO\\nYES\\nYES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES'\nassert solution('4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'NO'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n19 4\\n12 7\\n6 2\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5\\n2\\n19 4\\n12 7\\n6 2\") == \"5\\n18\\n10\\n6\\n75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 2\") == \"18\"\nassert solution(\"19 4\\n12 7\") == \"10\"\nassert solution(\"6 2\\n100000 50010\") == \"75015\"\nassert solution(\"6 2\\n1 1\") == \"1\"\n\n----\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n3\n1 1\n1 1\n1 1\n\n3\n1 1\n1 1\n3\n1 1\n1 1\n1 1\n\n5\n1 1\n1 1\n1 1\n3\n1 1\n1 1\n1 1\n1 1\n\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\n\n3\n1 1\n1 1\n1 1\n\n2\n1 1\n1 1\n\n\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5 18 10 6 75015'\nassert solution('1 1\\n2 5') == '1'\n\n\n\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, Tuple, Set\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n5 2\n19 4\n12 7\n6 2\n100000 50010\n\"\"\") == \"\"\"\n5\n18\n10\n6\n75015\n\"\"\"\nprint('Success')"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n5 2\n19 4\n12 7\n6 2\n100000 50010''') == '5\\n18\\n10\\n6\\n75015'\nassert solution('''5\n8 2\n12 21\n8 6\n9 4\n11 6\n13 15\n5 2\n1 1\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10''') == '8\\n23\\n16\\n13\\n21\\n12\\n18\\n15\\n23\\n22\\n16\\n15\\n20\\n23\\n12\\n15\\n20\\n17\\n14\\n16\\n23\\n22\\n15\\n23\\n17\\n14\\n20\\n19\\n16\\n17\\n23\\n19\\n17\\n21\\n15\\n23\\n18\\n18\\n19\\n23\\n23\\n16\\n23\\n19\\n15\\n18\\n23\\n19\\n19\\n17\\n23\\n15\\n20\\n23\\n19\\n21\\n15\\n20\\n19\\n20\\n23\\n17\\n23\\n19\\n17\\n15\\n20\\n22\\n20\\n15\\n19\\n23\\n21\\n22\\n21\\n23\\n21\\n20\\n21\\n16\\n20\\n17\\n17\\n15\\n16\\n23\\n23\\n23\\n16\\n20\\n23\\n17\\n15\\n21\\n15\\n21\\n23\\n22\\n17\\n17\\n23\\n23\\n15\\n16\\n18\\n20\\n15\\n20\\n21\\n23\\n19\\n23\\n23\\n22\\n19\\n17\\n23\\n23\\n15\\n15\\n15\\n16\\n15\\n20\\n18\\n23\\n22\\n15\\n23\\n16\\n15\\n20\\n18\\n17\\n20\\n17\\n21\\n14\\n23\\n18\\n23\\n15\\n16\\n18\\n21\\n16\\n14\\n23\\n16\\n23\\n23\\n19\\n18\\n19\\n19\\n21\\n23\\n22\\n20\\n18\\n17\\n15\\n14\\n15\\n18\\n23\\n23\\n23\\n23\\n18\\n18\\n23\\n18\\n18\\n21\\n17\\n20\\n16\\n16\\n15\\n20\\n21\\n21\\n21\\n15\\n17\\n14\\n23\\n23\\n16\\n23\\n18\\n23\\n20\\n23\\n22\\n23\\n16\\n21\\n15\\n20\\n15\\n17\\n15\\n23\\n18\\n21\\n17\\n17\\n16\\n23\\n21\\n17\\n21\\n16\\n19\\n21\\n23\\n15\\n16\\n18\\n15\\n16\\n21\\n23\\n16\\n15\\n22\\n19\\n16\\n16\\n18\\n20\\n19\\n21\\n15\\n19\\n17\\n21\\n23\\n16\\n19\\n18\\n17\\n17\\n18\\n18\\n17\\n23\\n16\\n19\\n19\\n16\\n18\\n15\\n16\\n18\\n17\\n20\\n16\\n21\\n23\\n15\\n23\\n17\\n18\\n15\\n16\\n17\\n17\\n14\\n23\\n18\\n14\\n15\\n17\\n19\\n23\\n17\\n23\\n23\\n17\\n23\\n18\\n20\\n23\\n18\\n15\\n21\\n17\\n21\\n23\\n23\\n18\\n15\\n19\\n23\\n18\\n23\\n23\\n18\\n23\\n19\\n15\\n21\\n18\\n23\\n19\\n19\\n21\\n23\\n20\\n23\\n23\\n18\\n17\\n23\\n17\\n21\\n20\\n19\\n16\\n23\\n15\\n20\\n23\\n22\\n20\\n19\\n16\\n19\\n22\\n21\\n15\\n15\\n22\\n17\\n16\\n18\\n17\\n20\\n19\\n19\\n22\\n21\\n20\\n19\\n17\\n16\\n15\\n15\\n16\\n23\\n23\\n23\\n22\\n23\\n16\\n19\\n23\\n20\\n21\\n20\\n18\\n16\\n18\\n18\\n21\\n17\\n14\\n15\\n19\\n17\\n18\\n18\\n16\\n15\\n18\\n19\\n20\\n18\\n20\\n17\\n15\\n19\\n16\\n19\\n16\\n19\\n16\\n13\\n16\\n19\\n18\\n17\\n17\\n14\\n16\\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\nfrom typing import List\nimport math"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1\\n') == ''\nassert solution('1\\n1\\n1\\n') == ''\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"YES 4 2 4\"\nassert solution(\"10 4\") == \"YES 4 2 4\"\nassert solution(\"100 4\") == \"YES 4 2 4\"\nassert solution(\"8 7\") == \"YES 55 5 5 35\"\nassert solution(\"97 2\") == \"YES 55 5 5 35\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\") == \"YES\\n4 2 4\"\nassert solution(\"100 4\") == \"YES\\n55 5 5\"\nassert solution(\"8 7\") == \"NO\"\nassert solution(\"97 2\") == \"YES\\n5 5 5 35\"\nassert solution(\"8 8\") == \"YES\\n1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n10 3') == 'YES\\n4 2 4'\nassert solution('100\\n4\\n8 7') == 'YES\\n55 5 5 35'\nassert solution('8\\n7\\n97\\n8\\n3 10') == 'NO\\nNO\\nYES\\n1 1 1 1 1 1 1 1'\nassert solution('8\\n3\\n5\\n1000000000 9') == 'YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n3\\n1,2') == 'NO'\nassert solution('1000000000\\n9\\n1,2') == 'NO'\nassert solution('8\\n3\\n1,2') == 'YES\\n4 2 4'\nassert solution('8\\n3\\n1,2') == 'YES\\n4 2 4'\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n4\\n3\") == \"YES\\n4 2 4\"\nassert solution(\"3\\n10\\n8\\n7\") == \"YES\\n55 5 5 35\"\nassert solution(\"1000000000\\n9\\n\") == \"NO\"\nassert solution(\"8\\n1000000000\\n9\\n\") == \"NO\"\nassert solution(\"1000000001\\n9\\n\") == \"NO\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n\n-------TESTS-------\nInput:\n100 4\n101 0\n2 2\n100 10\nOutput:\nNO\n2 1\nNO\nNO\n1 2 2 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 3\") == \"YES\\n4 2 4\"\nassert solution(\"8 7\") == \"YES\\n55 5 5 35\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3\\n100 4\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n3\\n100 4\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n3\\n100 4\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n3\\n100 4\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n3\\n100 4\") == \"YES\\n4 2 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n3\\n5') == 'YES\\n4 2 4'\nassert solution('8\\n10\\n4') == 'YES\\n2 4 6'\nassert solution('8\\n100\\n8\\n97') == 'NO'\nassert solution('8\\n100\\n8\\n8\\n3\\n10') == 'YES\\n55 5 5 35'\nassert solution('8\\n1000000000\\n9\\n1000000000') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\nprint('Test finished')\n\n'''"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == '4\\n55\\n15000000000000000\\n51'\nprint(solution(stdin))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(\"OK!\")\n\"\"\"\n\nnum_queries = int(input())\nfor i in range(num_queries):\n    first, second, third = map(int, input().split())\n    if first % 2 == 1:\n        print(third)\n    else:\n        print(third - second)\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\n\n-----Note-----\n\nBeware of very large numbers!\n\nThe most efficient way of solving this problem is to keep candies in descending order. Otherwise, if you sort the piles of candies in ascending order, then Bob will have to discard some candies more than he wants.\n\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(\"Test complete.\")\n\n-----Example solution-----\n\nn, m = [int(x) for x in stdin.readline().split()]\npiles = []\nfor _ in range(n):\n    piles.append(int(stdin.readline()))\ns = 0\nfor i in range(m):\n    a, b, c = [int(x) for x in stdin.readline().split()]\n    if i == 0:\n        s = max(piles[a - 1], piles[b - 1], c)\n    elif max(piles[a - 1], piles[b - 1], c) == piles[a - 1]:\n        piles[a - 1] -= 1\n    elif max(piles[a - 1], piles[b - 1], c) == piles[b - 1]:\n        piles[b - 1] -= 1\n    else:\n        piles[c - 1] -= 1\nprint(s)\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"7 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"7 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"7 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\nprint(solution(stdin))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 10 100') == '9'\nassert solution('10000000000000000 10000000000000000 10000000000000000') == '51'\nassert solution('23 34 45') == '23'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec') == '6\\n3\\n5\\n4\\n15\\n10'\nprint(solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec'))\n\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\"\"\"\n\na = int(input())\nb = int(input())\nc = int(input())\n\nprint(a + b + c)\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u0434\u043b\u0438\u043d\u0430 \u0442\u0435\u043a\u0441\u0442\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0414\u043b\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e input().\n\"\"\"\n\nlength = int(input())\n\nfor i in range(length):\n    print(input())\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0442\u0435\u043a\u0441\u0442, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432. \n\n\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0424\u0430\u0439\u043b\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043c\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u0432\u0442\u043e\u0440\u043e\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0424\u0430\u0439\u043b\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u043f\u043a\u0435 \u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439.\n\n\u0424\u0430\u0439\u043b\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043e\u0442 80 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043e 4000 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.\n\n\u041c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0431\u0435\u043b.\n\n\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0442\u0435\u043a\u0441\u0442 \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0432"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\\nabcbac\") == 6\nassert solution(\"3 6\\naa\") == 3\nassert solution(\"7 1000\\nabczgyo\") == 7\nassert solution(\"5 4\\nababa\") == 4\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcbac') == 6\nassert solution('aaa') == 3\nassert solution('abczgyo') == 5\nassert solution('ababa') == 4\nassert solution('ecbedececacbcbccbdec') == 10\n\"\"\""
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\naabbc\") == 3\nassert solution(\"3 6\\nabcbac\") == 3\nassert solution(\"3 6\\naaa\") == 3\nassert solution(\"3 6\\nabczgyo\") == 3\nassert solution(\"3 6\\nababa\") == 4\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"\nassert solution(\"5 2\\nababa\\n4 1\\naa\\n2 3\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 abc\") == \"4\"\nassert solution(\"6 3 abcbac\") == \"3\"\nassert solution(\"6 3 abc\") == \"3\"\nassert solution(\"6 3 abc\") == \"3\"\nassert solution(\"7 1000 abczgyo\") == \"1000\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == '6\\n3\\n5\\n4\\n15\\n10'\nassert solution(\"1 1\\naba\\n2 6\\naba\\n2 6\\naba\") == '2\\n2\\n2'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == 'YES\\n1 3 5\\nNO\\nNO'\nassert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == 'NO\\nNO'\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 18 3 14 1\") == \"YES\\n1 3 5\"\nassert solution(\"5 4\") == \"NO\\nNO\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\\n\") == 'YES\\n1 3 5\\nNO\\nNO'\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\") == \"YES\\n2 2\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == 'YES\\n1 2\\nNO\\nNO'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 2\\n2 2') == 'YES\\n1 2'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"NO\"\nassert solution(\"5 3\\n7 18 3 14 1\\n\") == \"YES\\n1 3 5\"\nassert solution(\"1 2\\n1 2\") == \"YES\\n1 2\"\nassert solution(\"3 3\\n4 2 6\\n\") == \"NO\"\nassert solution(\"4 2\\n1 2 3 4\") == \"NO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 1\\n1 2 3\\n') == 'YES\\n1 2'\nassert solution('1\\n3 1\\n1 2 3\\n') == 'NO\\nNO'\nassert solution('1\\n4 1\\n1 2 3 4\\n') == 'NO\\nNO'\nassert solution('1\\n3 1\\n1 2 3\\n') == 'NO\\nNO'\nassert solution('2\\n5 2\\n7 18 3 14 1\\n') == 'NO\\nNO'\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n7 18 3 14 1\") == \"NO\"\nassert solution(\"5 2\\n7 18 3 14 1\") == \"YES\"\nassert solution(\"5 3\\n7 18 3 14 1\") == \"YES\\n1 2 5\"\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111000111100101111111011111100010') == '3221225471'\nassert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1001010100101000001111010011100\") == \"964176192\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\n\"\"\"\n\nimport unittest\nimport math\n\nclass Solution:\n    def reverse_bits(self, n: int) -> int:\n        bit = \"{0:0{1}b}\".format(n, 32)\n        return int(bit[::-1], 2)\n\n\nclass TestSolution(unittest.TestCase):\n    solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution.reverse_bits(43261596), 964176192)\n        self.assertEqual(self.solution.reverse_bits(4294967293), 3221225471)"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1110110110110001101100101110\") == \"100101101101100101101101110\"\nassert solution(\"111111111111111111111111111111101\") == \"10111111111111111111111111111111\"\nassert solution(\"10010110110110001101100101110\") == \"100101101101100101101101110\"\nassert solution(\"10010110110110001101100101110\") == \"100101101101100101101101110\"\nassert solution(\"10010110110110001101100101110\") == \"100101101101100101101101110\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111011011111011011011011110110111101111') == '1011111101101101101101111011011011110111111'\nassert solution('1111111111111111111111111111111111111111') == '1011111111111111111111111111111111111111111'\nassert solution('11111111111111111111111111111111111111111111') == '101111111111111111111111111111111111111111111110'\nassert solution('111111111111111111111111111111111111111111111111') == '1011111111111111111111111111111111111111111111111110'\nassert solution('1111111111111111111111111111111111111111111111111111') == '101111111111111111111111111111111111111111111111111111111110'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111011100111001110111101101110\") == \"3221225471\"\nassert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00000010100101000001111010011100\") == '964176192'\nassert solution(\"111111111111111111111111111111101\") == '3221225471'\nassert solution(\"10111111111111111111111111111111\") == '3221225471'\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        b = bin(n)[2:]\n        b = b.zfill(32)\n        return int(b[::-1], 2)\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11100101') == '10110011'\nassert solution('11001111') == '11111111'\nassert solution('11111111') == '11101101'\nassert solution('11101101') == '11101101'\nassert solution('11101111') == '11111111'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11010110110111001101111011011011') == '111111111111111111111111111111111'\nassert solution('1110010101101100111110011111011011') == '3221225471'\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution(\"4\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\nassert solution(\"3\") == [[1], [1, 1], [1, 2, 1]]\nassert solution(\"0\") == []\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == '[\\n [1],\\n[1,1],\\n[1,2,1],\\n[1,3,3,1],\\n[1,4,6,4,1]\\n]'\nprint(\"Pass\")\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\n\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution(\"10\") == [\n    [1],\n    [1, 1],\n    [1, 2, 1],\n    [1, 3, 3, 1],\n    [1, 4, 6, 4, 1],\n    [1, 5, 10, 10, 5, 1],\n    [1, 6, 15, 20, 15, 6, 1],\n    [1, 7, 21, 35, 35, 21, 7, 1],\n    [1, 8, 28, 56, 70, 56, 28, 8, 1],\n    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1],\n]\nassert solution(\"1\") == [[1]]\n\n\nNote:\n\n1 <= numRows <= 30.\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n    [1,2,1],\n    [1,3,3,1],\n    [1,4,6,4,1]\n]\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == '''[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]'''\nprint(solution(\"5\"))\nassert solution(\"0\") == '[]'\nprint(solution(\"0\"))\nassert solution(\"-1\") == '[]'\nprint(solution(\"-1\"))\nassert solution(\"1\") == '[[1]]'\nprint(solution(\"1\"))\nassert solution(\"2\") == '[[1],[1,1]]'\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ]\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nassert solution('3') == [[1], [1, 1], [1, 2, 1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nassert solution('4') == [[1],[1,1],[1,2,1],[1,3,3,1]]\nassert solution('1') == [[1]]\nassert solution('0') == []\nassert solution('-1') == []\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\najeet@gmail.com\\njai@yahoo.co.in') == ['ajeet@gmail.com', 'jai@yahoo.co.in']\nassert solution('2\\nabc@xyz.com\\ndef@test.com') == ['abc@xyz.com', 'def@test.com']\nassert solution('2\\na@b.com\\nc@d.com') == ['a@b.com', 'c@d.com']\nassert solution('0\\najeet@gmail.com') == []\nassert solution('5\\najeet@gmail.com\\njai@yahoo.co.in\\nxyz@test.com\\nabc@xyz.com\\n') == ['abc@xyz.com', 'ajeet@gmail.com', 'jai@yahoo.co.in', 'xyz@test.com']\n'''\n\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(input())"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nriya riya@gmail.com\\njulia julia@julia\") == ['riya@gmail.com', 'julia@julia']\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\nlara@hackerrank.com\\nbritts@hackerrank.com') == ['britts@hackerrank.com', 'lara@hackerrank.com']\n\nIf you want to test this in your IDE, select the solution in the menu and click the Run button.\n'''"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\ngeeksforgeeks\\nabcdefghijklmnopqrstuvwxyz') == ['abcdefghijklmnopqrstuvwxyzgeeksforgeeks']\n\nassert solution('1\\nbademail') == ['bademail']\n\nassert solution('5\\nGeeksForGeeks\\nabc-def@fgh.com\\ndef-ghi@ijk.com\\nxyz@rst.com\\npqr@stu.com') == ['abc-def@fgh.com', 'def-ghi@ijk.com', 'pqr@stu.com']\n\nprint(solution(stdin))\n\nSolution:\n\nimport re\nn = int(input())\n\nregex = re.compile(\"[A-Za-z0-9][A-Za-z0-9_-]*@[A-Za-z0-9]+.[A-Za-z]{1,3}\")\nfor _ in range(n):\n    x = input()\n    if regex.match(x):\n        print(x)\n\n/////////////////////////////////////////////////\n\nSolution 2:\n\nimport re\nn = int(input())\n\nregex = re.compile(r'^[a-z0-9_]+@[a-z0-9]+\\.[a-z]{1,3}$')\nfor _ in range(n):\n    x = input()\n    if regex.match(x):\n        print(x)\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a@leetcode.com\\nbc@leetcode.com') == ['bc@leetcode.com', 'a@leetcode.com'], \"Test Failed\"\nassert solution('a@leetcode.com\\na@leetcode.com') == ['a@leetcode.com'], \"Test Failed\"\n=====Test Suite=====\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Java cases --\nInput:\nSolution.solution(\"2\\naa@leetcode.com\\na@leetcode.com\\n\")\nOutput:\n    [\"aaa@leetcode.com\",\"aaaaaaaaa@leetcode.com\"]\n\nInput:\nSolution.solution(\"3\\naa@leetcode.com\\naaa@leetcode.com\\naa@leetcode.com\\n\")\nOutput:\n    [\"aaa@leetcode.com\",\"aaaaaa@leetcode.com\",\"aaaaa@leetcode.com\"]\n\nInput:\nSolution.solution(\"1\\nab@leetcode.com\\nbc@leetcode.com\\n\")\nOutput:\n    [\"ab@leetcode.com\",\"bc@leetcode.com\"]\n\nInput:\nSolution.solution(\"1\\naa@leetcode.com\\naaa@leetcode.com\\naa@leetcode.com\\n\")\nOutput:\n    [\"aa@leetcode.com\",\"aaaaaaaaa@leetcode.com\"]\n\n-- Python cases --\nInput:\nsolution.solution(\"2\\nabc@leetcode.com\\nabc@leetcode.com\\n\")\nOutput:\n    ['abc@leetcode.com', 'abc@leetcode.com']\n\nInput:\nsolution.solution(\"1\\nab@leetcode.com\\nbc@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'bc@leetcode.com']\n\nInput:\nsolution.solution(\"1\\nab@leetcode.com\\nab@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ab@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\nac@leetcode.com\\nbc@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ac@leetcode.com', 'bc@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\naac@leetcode.com\\nbc@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ac@leetcode.com', 'bc@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\naaaac@leetcode.com\\naa@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'aaac@leetcode.com', 'aaa@leetcode.com']\n\nInput:\nsolution.solution(\"1\\nab@leetcode.com\\nab@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ab@leetcode.com']\n\nInput:\nsolution.solution(\"2\\nab@leetcode.com\\naba@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'aba@leetcode.com']\n\nInput:\nsolution.solution(\"2\\nab@leetcode.com\\naba@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'aba@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\naba@leetcode.com\\nab@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'aba@leetcode.com', 'ab@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\nab@leetcode.com\\nab@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ab@leetcode.com', 'ab@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\nac@leetcode.com\\nbc@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ac@leetcode.com', 'bc@leetcode.com']\n\nInput:\nsolution.solution(\"1\\nac@leetcode.com\\nac@leetcode.com\\n\")\nOutput:\n    ['ac@leetcode.com', 'ac@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\nac@leetcode.com\\nbc@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ac@leetcode.com', 'bc@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\naaaac@leetcode.com\\naa@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'aaaac@leetcode.com', 'aaa@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\naaaaac@leetcode.com\\naaa@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'aaaac@leetcode.com', 'aaaa@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\nac@leetcode.com\\nac@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ac@leetcode.com', 'ac@leetcode.com']\n\nInput:\nsolution.solution(\"3\\nab@leetcode.com\\nac@leetcode.com\\nac@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ac@leetcode.com', 'ac@leetcode.com']\n\nInput:\nsolution.solution(\"1\\nab@leetcode.com\\nac@leetcode.com\\n\")\nOutput:\n    ['ab@leetcode.com', 'ac@leetcode.com']\n\nInput:\nsolution.solution(\"2\\nab@leetcode.com\\naba@leetcode.com\\n\")\nOutput:\n    ['ab@"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == []\nassert solution('\\n'.join(['valid email addresses: cat@gmail.com, valid-email@z-o.com, '\n                           'invalid email addresses: cat@gmail.com, valid-email@z-o',\n                           'valid email addresses: valid-email@z-o.com, valid-email@z-o.com, valid-email@z-o.com'])) == ['valid-email@z-o.com', 'valid-email@z-o.com', 'valid-email@z-o.com']\n\nSolution:\n\nn = int(input())\nemails = []\nfor i in range(n):\n    emails.append(input())"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\na@b.com\\nb@c.com\\nc@d.com\\ne@f.com\") == \\\n       ['e@f.com', 'a@b.com', 'b@c.com', 'c@d.com']\n\n\"\"\"\n\n\"\"\"\nImporting standard functions from the sys module\nThe sys module provides functions and variables used to manipulate different parts of the Python runtime environment. It is always available.\n\nimport sys\nprint(sys.argv)\n\n['solution.py', '4', 'a@b.com', 'b@c.com', 'c@d.com', 'e@f.com']\n\nsys.argv[0] is the name of the program itself. If it was executed from the command line, sys.argv[0] would be the name of the file itself (solution.py in our case).\n\nThe remaining elements of sys.argv are the arguments passed to the program when it was executed. They are stored as strings and will have to be converted to other types depending on the situation.\n\nThis is how the input from the console looks:\n\n>> sys.argv = ['solution.py', '4', 'a@b.com', 'b@c.com', 'c@d.com', 'e@f.com']\n>> sys.argv[0]\n'solution.py'\n>> sys.argv[1]\n'4'\n>> sys.argv[2]\n'a@b.com'\n>> sys.argv[3]\n'b@c.com'\n>> sys.argv[4]\n'c@d.com'\n>> sys.argv[5]\n'e@f.com'\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 qwertyuiopasdfghjklzxcvbnm') == ['qwertyuiopasdfghjklzxcvbnm', 'qwertyuiopasdfghjklzxcvbnm@gmail.com', 'qwertyuiopasdfghjklzxcvbnm@yahoo.com', 'qwertyuiopasdfghjklzxcvbnm@hotmail.com', 'qwertyuiopasdfghjklzxcvbnm@outlook.com']\n\nSolution:\n\n\"\"\"\n\n\"\"\"\nl = []\nfor i in range(int(input())):\n    a = input()\n    a = a.split('@')\n    if a[1].find('.')!= -1:\n        l.append(a[0] + '@' + a[1])\nprint(l)\n\nSolution:\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nrich@google.com\\n\") == ['rich@google.com']\n\"\"\"\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 abc@xyz.com, 12 @abc.com') == ['abc@xyz.com', '12@abc.com']\n\"\"\"\n\nfrom typing import List\n\nimport re\n\nn = int(input())\n\npattern = r'(\\b[A-Za-z0-9_-]+@[A-Za-z0-9]+\\.[A-Za-z]{1,3}\\b)'\n\nfor _ in range(n):\n    email = input()\n    if re.match(pattern, email):\n        print(email)\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\nassert solution('1') == [0]\nassert solution('3') == [0, 1, 1]\nassert solution('6') == [0, 1, 1, 8, 27, 64]\n\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == [0, 1, 1, 8, 27]\n>>>>>>> bb4dee632f5ba0cb12fb9378b2d551a7f5745c8d\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\nassert solution('4') == [0, 1, 1, 1]\nprint(solution('5'))\n\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nassert solution('7') == [0, 1, 1, 8, 27, 64, 125]\nassert solution('10') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nassert solution('5') == [0, 1, 1, 8, 27]\nassert solution('6') == [0, 1, 1, 8, 27, 64]\n\n======Test Case=====\n1\n3\n5\n\n======Solution=====\nfrom functools import reduce\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n\nSolution\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == [1, 1]\nassert solution(5) == [1, 2, 3, 6, 11]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nprint(solution(\"4\"), end=\"\")\n=====Problem Statement=====\nCreate a function to concatenate two integer variables.\n\nConcept\n\nYou are given two integer variables. You have to convert them into string and then, apply the join method to them to concatenate them and print the final result.\n\nNote: You can't use the join method here.\n\n>> a = 34\n>> b = 56\n>> print(a, b)\n34 56\n>> print(\"\".join(str(a), str(b)))\n3456\n\n>> print(\"-\".join(str(a), str(b)))\n34-56\n\n>> print(\"a--b--c\".join([a, b]))\n34--56--c\n\n>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--c\".join(str(a), str(b)))\n34--56--c\n\n>>>> print(\"a--b--c\".join(map(str, [a, b])))\n34--56--c\n\n>>>> print(\"a--b--"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nassert solution('10') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\nassert solution('15') == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331,\n                          2584, 4181, 6765]\n\nSolution:\n\nn = int(input())\nlist1 = list(map(lambda x: x ** 3, fibonacci(n)))\nprint(list1)\n\nExplanation:\n\na = lambda x: x ** 3\nreturns the cube of the number.\n\nfibonacci(4) -> [0, 1, 1, 8]\n\n=====Test Data=====\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n=====Sample Test Case:\nNone\n\n=====Test Case Input:\n3\n4\n5\n6\n7\n8\n9\n10\n\n=====Sample Test Case Output:\n[0, 1, 1, 8]\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 2584, 4181, 6765]\n\n=====Test Case Explanation:\nIn this case, the function will not apply the lambda function to fibonacci(3) because it is out of bounds of the array.\n\n\nProblem Statement:\n\nWrite a program that takes a number N as an input and prints all the first N fibonacci numbers (where the first two numbers are 0 and 1).\n\nInput Format:\n\nThe first line of the input contains the value of N.\n\nOutput Format:\n\nThe first line of the output should contain the first N fibonacci numbers, separated by spaces.\n\nInput:\n\n5\n\nOutput:\n\n0 1 1 2 3\n\nExplanation:\n\nThe first 5 fibonacci numbers are 0 1 1 2 3.\n\n=====Sample Input/Output:\nNone\n\n======Problem Statement======\n\nWith a given integral number n, write a program to generate a dictionary that contains (i, i x i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.\nSuppose the following input is supplied to the program:\n8\nThen, the output should be:\n{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be a console input.\nConsider use dict()\n\n=====Test Data=====\nNone\n\n=====Test Data Explanation=====\nNone\n\n=====Input Format=====\nThe first line of the input contains the value of integer n.\n\n=====Output Format=====\nPrint the output of the program in a dictionary format.\n\n>>>d = dict()\n>>>for i in range(1, n + 1):\n...     d[i] = i * i\n...\n>>>print(d)\nNone\n\n=====Sample Test Case=====\n>>>\n\nExplanation:\nNone\n\n======Solution=====\nd = dict()\nn = int(input())\nfor i in range(1, n + 1):\n    d[i] = i * i\nprint(d)\n\n>>>>>>> master\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\nassert solution('3') == [0, 1, 1]\nassert solution('4') == [0, 1, 1, 4]\nassert solution('7') == [0, 1, 1, 8, 27, 64, 125]\n\nProblem\nGiven a positive integer N, how many ways can we write it as a sum of distinct positive integers?\n\nFor example,\n\nN = 15  # 15 = 3 + 3 + 4\n\nhas three ways: 3 + 3 + 4, 3 + 4 + 3, and 4 + 4 + 2.\n\nInput Format\n\nThe first and only line of input contains the integer, N.\n\nConstraints\n\nOutput Format\n\nPrint the number of ways modulo 109 + 7.\n\nSample Input 0\n\n2\nSample Output 0\n\n2\nExplanation 0\n\nGiven N = 2, there are two ways to represent N = 2: 2 and 1 + 1.\n\nSample Input 1\n\n5\nSample Output 1\n\n4\nExplanation 1\n\nGiven N = 5, there are four ways to represent N = 5: 5, 1 + 1 + 1 + 1 + 1, 1 + 1 + 2, and 2 + 2 + 2.\n\n\nSolution:"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"<feed xml:lang='en'>\\n\"\n    + \"<title>HackerRank</title>\\n\"\n    + \"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n    + \"<link rel='alternate' type='text/html' href='https://www.hackerrank.com/'/>\\n\"\n    + \"<updated>2013-12-25T12:00:00</updated>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 1</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"</feed>\") == 1\nassert solution(\n    \"<feed xml:lang='en'>\\n\"\n    + \"<title>HackerRank</title>\\n\"\n    + \"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n    + \"<link rel='alternate' type='text/html' href='https://www.hackerrank.com/'/>\\n\"\n    + \"<updated>2013-12-25T12:00:00</updated>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 2</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 3</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"</feed>\") == 2\nassert solution(\n    \"<feed xml:lang='en'>\\n\"\n    + \"<title>HackerRank</title>\\n\"\n    + \"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n    + \"<link rel='alternate' type='text/html' href='https://www.hackerrank.com/'/>\\n\"\n    + \"<updated>2013-12-25T12:00:00</updated>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 4</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 5</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"</feed>\") == 3\nassert solution(\n    \"<feed xml:lang='en'>\\n\"\n    + \"<title>HackerRank</title>\\n\"\n    + \"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n    + \"<link rel='alternate' type='text/html' href='https://www.hackerrank.com/'/>\\n\"\n    + \"<updated>2013-12-25T12:00:00</updated>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 6</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 7</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"</feed>\") == 4\nassert solution(\n    \"<feed xml:lang='en'>\\n\"\n    + \"<title>HackerRank</title>\\n\"\n    + \"<subtitle lang='en'>Programming challenges</subtitle>\\n\"\n    + \"<link rel='alternate' type='text/html' href='https://www.hackerrank.com/'/>\\n\"\n    + \"<updated>2013-12-25T12:00:00</updated>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 8</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"<entry>\\n\"\n    + \"<author gender='male'>Harsh</author>\\n\"\n    + \"<question type='hard'>XML 9</question>\\n\"\n    + \"<description type='text/plain'>This is related to XML parsing</description>\\n\"\n    + \"<answer type='text/plain'>Valid</answer>\\n\"\n    + \"</entry>\\n\"\n    + \"</feed>\") == 5\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''<data>\n                    <animal name=\"cat\">\n                        <genus>Felis</genus>\n                        <family name=\"Felidae\" subfamily=\"Felinae\">\n                            <family name=\"Felidae\" subfamily=\"Felinae\">\n                                <order name=\"Felidae\" suborder=\"Felinae\">\n                                    <order name=\"Felidae\" suborder=\"Felinae\">\n                                        <class name=\"Felidae\" subclass=\"Felidae\">\n                                            <mammal name=\"Felis\" subtype=\"Felis Catus\">\n                                                <species name=\"Felis Catus\" subspecies=\"Felis Catus\">\n                                                    <subspecies name=\"Felis Catus\" superspecific_term_id=\"http://purl.obolibrary.org/obo/NCBITaxon_10090\">Felis catus</subspecies>\n                                                    <identifier value=\"10090\"/>\n                                                    <alternate_identifier value=\"9606\"/>\n                                                    <taxon_id value=\"10090\"/>\n                                                </species>\n                                            </mammal>\n                                        </class>\n                                    </order>\n                                </order>\n                            </family>\n                        </family>\n                    </animal>\n                </data>\n''') == 3\n\n=========================================\nWrite 5 lines of code to test the solution:\n\nimport xml.etree.ElementTree as etree\n\ntree = etree.parse('solution.xml')\nroot = tree.getroot()\n\nprint(solution(root))\n\n\"\"\"\n\nimport xml.etree.ElementTree as etree\n\ntree = etree.parse('solution.xml')\nroot = tree.getroot()\n\nprint(solution(root))\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 0\n'''"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('<data>'\n                 '<row><data1>foo</data1><data2>bar</data2></row>'\n                 '<row></row>'\n                 '<row><data3></data3></row>'\n                 '</data>') == 2\nassert solution('<a>'\n                 '<b>'\n                 '<c>'\n                 '<d>'\n                 '<e>'\n                 '<f>'\n                 '<g>'\n                 '<h>'\n                 '<i>'\n                 '<j>'\n                 '<k>'\n                 '<l>'\n                 '<m>'\n                 '<n>'\n                 '<o>'\n                 '<p>'\n                 '</e>'\n                 '</f>'\n                 '</g>'\n                 '</h>'\n                 '</i>'\n                 '</j>'\n                 '</k>'\n                 '</l>'\n                 '</m>'\n                 '</n>'\n                 '</o>'\n                 '<p>'\n                 '</p>'\n                 '</a>') == 1\nassert solution('<data>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n                 '<row>'\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 1\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 2\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 2"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\n\"\"\"\n\nExplanation:\n    - The root is level 0.\n    - The children of the root are level 1.\n    - The children of the children of the root are level 2.\n    - The children of the children of the children of the root are level 3.\n    - Since the depth of the subtree (level 3) is greater than the depth of the\n    parent (level 2), the answer is  2.\n\"\"\"\n=====Desired Output=====\n2\n\"\"\"\n\nExplanation:\n    - The root is level 0.\n    - The children of the root are level 1.\n    - The children of the children of the root are level 2.\n    - The children of the children of the children of the root are level 3.\n    - Since the depth of the subtree (level 3) is greater than the depth of the\n    parent (level 2), the answer is  2.\n\"\"\"\n\"\"\"\nFor each line, print the depth of the tree.\n\nFor each line, print the depth of the tree.\n\n1\n1\n1\n2\n2\n2\n3\n3\n3\n4\n4\n4\n5\n5\n5\n5\n6\n6\n6\n6\n6\n6\n6\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n11\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n12\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n<data>\n    <country name=\"Liechtenstein\">\n        <rank>1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank>4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank>68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n''') == 3\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n=====Test cases=====\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Python cases --\nInput:\nsolution.solution(r\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\")\nOutput:\n1\n\nInput:\nsolution.solution(r\"\"\"\n<body>\n    <b>foo</b><b>bar</b><a href='http://hackerrank.com/'>Link</a>\n</body>\n\"\"\")\nOutput:\n3\n\nInput:\nsolution.solution(r\"\"\"\n<a>\n    <b>foo</b><b>bar</b><b>foobar</b><c>foobar</c>\n</a>\n\"\"\")\nOutput:\n3\n\nInput:\nsolution.solution(r\"\"\"\n<html>\n  <head><title>HTML Parser - I</title></head>\n  <body data-modal-target class='1'><h1 class='a'>Page Title</h1><br /><br /></body>\n</html>\n\"\"\")\nOutput:\n1\n\"\"\"\n\n\nimport xml.etree.ElementTree as etree"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\n=====Constraints=====\n1 <= N <= 100\n\n=====Testcases=====\nInput 1:\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput 1:\n1\n\nInput 2:\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput 2:\n2\n\n=====Final Score=====\n60/60\n\n=====Sample Outputs=====\nInput 1:\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput 1:\n1\n\nInput 2:\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nOutput 2:\n2\n'''"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 009</title>\n        <author>jhoffner</author>\n        <updated>2013-12-25T12:00:00</updated>\n    </entry>\n</feed>\n\"\"\") == 2\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 009</title>\n        <author>jhoffner</author>\n        <updated>2013-12-25T12:00:00</updated>\n        <content type='html'>\n            <![CDATA[<html><head><title>HTML Parser - Blank Text</title></head><body><h1>HTML Parser</h1><p>Test your HTML parser knowledge</p></body></html>]]>\n        </content>\n    </entry>\n</feed>\n\"\"\") == 3\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 009</title>\n        <author>jhoffner</author>\n        <updated>2013-12-25T12:00:00</updated>\n        <content type='html'>\n            <![CDATA[<html><head><title>HTML Parser - Blank Text</title></head><body><h1>HTML Parser</h1><p>Test your HTML parser knowledge</p></body></html>]]>\n        </content>\n    </entry>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 009</title>\n        <author>jhoffner</author>\n        <updated>2013-12-25T12:00:00</updated>\n        <content type='html'>\n            <![CDATA[<html><head><title>HTML Parser - Blank Text</title></head><body><h1>HTML Parser</h1><p>Test your HTML parser knowledge</p></body></html>]]>\n        </content>\n    </entry>\n</feed>\n\"\"\") == 2\n\"\"\"\n\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"07895462130\"\n) == \"YES\"\nassert solution(\n\"919875641230\"\n) == \"YES\"\nassert solution(\n\"0789xx462130\"\n) == \"NO\"\nassert solution(\n\"9xx859463115\"\n) == \"NO\"\nassert solution(\n\"8495219780\"\n) == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('899998888') == 'YES'\nassert solution('89999999') == 'NO'\nassert solution('989999999') == 'YES'\n\n=====Test Cases=====\nYou can check your solution by running the following code:\n\nimport re\n\nfor input_string in ['899998888', '89999999', '989999999']:\n    print(solution(input_string) == 'YES' if re.match(r'^[789]\\d{9}$', input_string) else 'NO')\n\n\nRegex:\n\n1. \\d - any number\n2. [789] - any of the following numbers\n3. \\d{9} - exactly 9 numbers (like: 78998888)\n\nExample:\nInput:\n2\n97798756654\n889233754\n\nOutput:\nYES\nNO\n\n\n=====Problem Statement=====\nWrite a Python program that matches a string that has an a followed by zero or more b's.\n\nThe input string is supplied as a regular expression.\n\nExample\nInput:\nbaabab\nbaaabaab\naaabbb\naaaab\n\nOutput:\nFalse\nTrue\nFalse\nTrue\n\n=====Input Format=====\nThe first line of input contains T, the number of test cases.\n\nThe next T lines contains the test cases.\n\nEach test case contains a string that has to be matched.\n\n=====Constraints=====\n1\u2264T\u2264100\n\n1\u2264|String|\u2264100\n\nThe string contains only lowercase English letters a and b.\n\n=====Output Format=====\nPrint 'True' or 'False' for each test case without quotes.\n\n=====Sample Test Cases=====\nSample Input:\n2\nbaaab\nbbbbb\nSample Output:\nTrue\nFalse\n\n'''\n\nimport re\n\nfor _ in range(int(input())):\n    if re.search(r'a+b*', input()):\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"412-555-5555\") == \"YES\"\nassert solution(\"123-456-7890\") == \"NO\"\nassert solution(\"1-23-4567\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('799912222155') == 'YES'\nassert solution('93423643215') == 'NO'\nassert solution('934236432') == 'NO'\nassert solution('432167999') == 'YES'\nassert solution('89423432167') == 'YES'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'NO'\nassert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(123) 456-7890\") == \"YES\"\nassert solution(\"(123) 456-7890\") == \"YES\"\nassert solution(\"(123) 456-7890\") == \"YES\"\nassert solution(\"(123) 456-7890\") == \"YES\"\nassert solution(\"(123) 456-7890\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('867-5309') == 'YES'\nassert solution('8675309') == 'NO'\nassert solution('9384736483') == 'YES'\n\n======Explanation=====\nFor input 867-5309, the output should be YES as 867-5309 is a ten-digit number starting with a 7, 8, or 9.\n\nFor input 9384736483, the output should be NO as 9384736483 is not a ten-digit number starting with a 7, 8, or 9.\n\nFor input 8675309, the output should be YES as 8675309 is a ten-digit number starting with a 7, 8, or 9.\n\"\"\"\n\nimport re"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('72276489937') == 'YES'\nassert solution('123456789') == 'NO'\nassert solution('987654321') == 'NO'\nassert solution('722748689937') == 'YES'\nassert solution('72274868992') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"412-555-4242\") == \"YES\\n\"\nassert solution(\"123456789\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n\n=====Test Case 1=====\n\nInput:\n1\n412-555-4242\n\nOutput:\nYES\n\n=====Test Case 2=====\n\nInput:\n2\n123456789\n1234567890\n\nOutput:\nNO\nNO\n\n=====Test Case 3=====\n\nInput:\n1\n123\n\nOutput:\nNO\n\n=====Test Case 4=====\n\nInput:\n1\n9887645\n\nOutput:\nYES\n\n=====Test Case 5=====\n\nInput:\n1\n111\n\nOutput:\nNO\n'''\n\nimport re"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"79999999999\") == 'NO'\nassert solution(\"85593939393\") == 'NO'\nassert solution(\"41234567890\") == 'YES'\n\n=====Test Data=====\nYou can check your solution by using our in-memory data testing tool.\n\n=====Sample Test Case=====\nYou can use the sample test case to test your code.\n\n=====Challenge=====\nCan you solve this challenge in 3 lines of code?\n\n=====Solutions=====\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 6 8\\n3\\n2 3 6 7\") == \"6\\n5\\n7\"\n=====END OF CONTEXT=====\n\"\"\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 5 3 2 6 7 8 9\") == \"8 9\"\nassert solution(\"5 4 3 2 7 8 9 0\") == \"0 2 3 4 5 7 8 9\"\nassert solution(\"3 4 5 6 8 9 0\") == \"0 6 8 9\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n9 8 5\\n9 8 7 1') == '8\\n1'\nassert solution('4\\n2\\n9 8 5\\n7 1') == '8\\n5'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 4 5\n9 8 5 6 4\n''') == '''8\n5\n6\n9'''\nassert solution('''5\n1 2 3 4 5\n9 8 5 6 4\n''') == '''8\n5\n6\n9'''\nassert solution('''1\n2\n3\n3\n5\n''') == '''2\n5\n'''\nassert solution('''2\n1\n2\n3\n3\n''') == '''3\n2\n'''\nassert solution('''8\n1 2 3 4 5 6 7 8\n1 2 3 4 7 9 8 9\n''') == '''2\n3\n4\n5\n6\n7\n8\n9'''\n\n=====Test Case=====\nInput Format\n\nThe first line of input contains an integer,\n.\nThe second line contains space-separated integers\ndenoting the elements of array.\nThe third line contains an integer,\n.\nThe fourth line contains space-separated integers\ndenoting the elements of array.\n\nOutput Format\n\nOutput the symmetric difference integers in ascending order, one per line.\n\nSample Input\n\nSTDIN       Function\n-----       --------\n4           set a size M = 4\n1 2 3 4     a = {1, 2, 3, 4}\n4           set b size N = 4\n1 2 3 4     b = {1, 2, 3, 4}\nSample Output\n\n2\n3\n4\n1\n\n'''\n\nimport fileinput\nimport ast"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 6 5\\n3\\n2 3 11\") == '11 6 5', 'WA'\nassert solution(\"4\\n2 3 6 5\\n3\\n2 3 11\") == '11 6 5', 'WA'\n\"\"\"\n\nclass Solution(object):\n    def solution(self, stdin):\n        \"\"\"\n        nums1 = stdin\n        nums2 = stdin.split(\"\\n\")\n        return None\n        \"\"\"\n        a = set(stdin.split(\"\\n\")[0])\n        b = set(stdin.split(\"\\n\")[1])\n        c = sorted(list(a ^ b))\n        for i in c:\n            print(i)\n        return None"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\n=====Test Cases=====\n=====Validating Solutions====="
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 3 6 8') == '2\\n6'\n\nimport re"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\n\nassert solution('5\\n2 4 6 8 10\\n4\\n2 4 11 12') == '6\\n8\\n10\\n11\\n12'\n\nassert solution('7\\n3 5 7 9 11 13\\n8\\n2 4 11 12') == '5\\n7\\n9\\n11\\n12'\n\nassert solution('5\\n9 11 12 14\\n4\\n2 4 6 8') == '5\\n6\\n8\\n9\\n11\\n12\\n14'\n\n=====Solution=====\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 4 6 8 10\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\n\nsolution('3\\n2 4 6\\n4\\n2 4 11') == '6\\n8\\n11'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 4 5 9 12\n4\n2 4 11 12\n''') == '''9\n5\n12'''\n=====Main Solution=====\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    stdin = '''100\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n6          76         Stewart    5         \n7          79         Peter      6   \n8          98         Peter      6   \n9          100         Peter      6   \n10         92         Steven     4         \n11         98         Stewart    5         \n12         64         Stewart    5         \n13         34         Peter      3         \n14         52         Peter      5         \n15         92         Adrian     9         \n16         87         Raymond    7         \n17         45         Steven     4         \n18         58         Adrian     9         \n19         10         Steven     4         \n20         96         Adrian     9         \n21         16         Raymond    7         \n22         51         Raymond    7         \n23         9          Carroll    3         \n24         59         Carroll    3         \n25         69         Raymond    7         \n26         18         Rachael    5         \n27         55         Rachael    5         \n28         41         Rachael    5         \n29         53         Rachael    5         \n30         59         Ricky       6         \n31         10         Peter      3         \n32         48         Peter      5         \n33         50         Peter      5         \n34         50         Peter      5         \n35         25         Stewart    5         \n36         43         Carroll    5         \n37         91         Carroll    9         \n38         87         Carroll    9         \n39         24         Carroll    3         \n40         11         Carroll    3         \n41         47         Rachael    5         \n42         59         Rachael    5         \n43         51         Rachael    5         \n44         41         Rachael    5         \n45         12         Rachael    5         \n46         58         Ricky       6         \n47         96         Ricky       6         \n48         93         Ricky       6         \n49         63         Ricky       6         \n50         27         Peter      3         \n51         17         Peter      5         \n52         94         Peter      5         \n53         53         Peter      5         \n54         100         Peter      5         \n55         50         Rachael    5         \n56         60         Rachael    6         \n57         29         Rachael    4         \n58         54         Rachael    5         \n59         94         Ricky       6         \n60         24         Ricky       6         \n61         25         Rachael    5         \n62         64         Rachael    6         \n63         84         Peter      7         \n64         62         Rachael    6         \n65         55         Rachael    5         \n66         64         Rachael    6         \n67         77         Peter      7         \n68         2          Frayda      0         \n69         72         Ricky       6         \n70         38         Ricky       4         \n71         53         Rachael    5         \n72         63         Rachael    6         \n73         100         Peter      7         \n74         100         Peter      7         \n75         100         Ricky       7         \n76         41         Rachael    5         \n77         12         Rachael    5         \n78         100         Ricky       7         \n79         41         Rachael    5         \n80         24         Ricky       6         \n81         86         Rachael    6         \n82         54         Rachael    5         \n83         100         Peter      7         \n84         100         Ricky       7         \n85         96         Ricky       6         \n86         41         Rachael    5         \n87         22         Rachael    5         \n88         12         Rachael    5         \n89         77         Peter      7         \n90         77         Ricky       7         \n91         26         Rachael    5         \n92         15         Rachael    5         \n93         71         Rachael    6         \n94         55         Rachael    5         \n95         54         Rachael    5         \n96         81         Rachael    6         \n97         11         Rachael    5         \n98         100         Peter      7         \n99         100         Peter      7         \n100       100         Peter      7         \n101       100         Peter      7         \n102       100         Peter      7         \n103       100         Peter      7         \n104       100         Peter      7         \n105       100         Peter      7         \n106       100         Peter      7         \n107       100         Peter      7         \n108       100         Peter      7         \n109       100         Peter      7         \n110       100         Peter      7         \n111       100         Peter      7         \n112       100         Peter      7         \n113       100         Peter      7         \n114       100         Peter      7         \n115       100         Peter      7         \n116       100         Peter      7         \n117       100         Peter      7         \n118       100         Peter      7         \n119       100         Peter      7         \n120       100         Peter      7         \n121       100         Peter      7         \n122       100         Peter      7         \n123       100         Peter      7         \n124       100         Peter      7         \n125       100         Peter      7         \n126       100         Peter      7         \n127       100         Peter      7         \n128       100         Peter      7         \n129       100         Peter      7         \n130       100         Peter      7         \n131       100         Peter      7         \n132       100         Peter      7         \n133       100         Peter      7         \n134       100         Peter      7         \n135       100         Peter      7         \n136       100         Peter      7         \n137       100         Peter      7         \n138       100         Peter      7         \n139       100         Peter      7         \n140       100         Peter      7         \n141       100         Peter      7         \n142       100         Peter      7         \n143       100         Peter      7         \n144       100         Peter      7         \n145       100         Peter      7         \n146       100         Peter      7         \n147       100         Peter      7         \n148       100         Peter      7         \n149       100         Peter      7         \n150       100         Peter      7         \n151       100         Peter      7         \n152       100         Peter      7         \n153       100         Peter      7         \n154       100         Peter      7         \n155       100         Peter      7         \n156       100         Peter      7         \n157       100         Peter      7         \n158       100         Peter      7         \n159       100         Peter      7"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\nID\\nMARKS\\n2\\n34\\n56\\n41\\n43\\n\") == \"56.00\"\n\n=====Sample Input=====\n5\nID\nMARKS\nCLASS\nNAME\n12345\n7891011\nIT\n1\n2 3\nA\nB B\nC\nD\n\n=====Sample Output=====\n78.00\n\n=====Explanation=====\nMarks for students in column 2 are 34, 56, 41 and 43.\nAverage = (34 + 56 + 41 + 43) / 4 = 78.\n\"\"\"\n\nfrom collections import namedtuple\nn = int(input())\nfields = input().split()\ntotal = 0\nfor _ in range(n):\n    students = namedtuple('students', fields)\n    students = students(*input().split())\n    total += int(students.MARKS)\nprint(\"{:.2f}\".format(total / n))\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_text) == expected_output\n\n=====Sample Input=====\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\n=====Sample Output=====\n78.00\n\n=====Test Cases=====\nTestcase 1\nInput:\n\n5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nOutput:\n81.00\nTestcase 2\nInput:\n\n5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6\n\nOutput:\n81.00\nTestcase 3\nInput:\n\n5\nCLASS      MARKS      NAME       ID\n7          50         Steven     4\n7          38         Stewart    5\n7          73         Peter      6\n7          92         Calum      1\n7          82         Jason      3\n\nOutput:\n81.00\n=====Solution=====\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution( '3\\nID\\n100\\nName\\n50\\nMarks\\n75\\nClass\\n90\\n' ) == '75.00'\nassert solution( '3\\nID\\n100\\nName\\n50\\nMarks\\n75\\nClass\\n90\\n' ) == '75.00'\n\nassert solution( '4\\nMarks\\n75\\nClass\\n90\\nName\\n50\\nID\\n100\\n' ) == '75.00'\nassert solution( '4\\nMarks\\n75\\nClass\\n90\\nName\\n50\\nID\\n100\\n' ) == '75.00'\n\nassert solution( '3\\nID\\n100\\nName\\n50\\nMarks\\n75\\nClass\\n90\\n' ) == '75.00'\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nID\\n100\\nMARKS\\n90\\nCLASS\\n9\\nNAME\\nMadhu\\n\") == '90.00'\n\n\"\"\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 2\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"3.00\"\nassert solution(\"2 2\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"3.50\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n=====Sample Test Cases=====\n>>> Test.assert_equals(solution(\"5\\nID\\nMARKS\\nCLASS\\nNAME\\n1\\n2\\n3\\n4\\n5\"), \"3.00\")\n>>> Test.assert_equals(solution(\"3\\nMARKS\\nCLASS\\nNAME\\n1\\n2\\n3\"), \"2.00\")\n>>> Test.assert_equals(solution(\"5\\nID\\nMARKS\\nCLASS\\nNAME\\n1\\n2\\n3\\n4\\n5\"), \"3.00\")\n\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"75.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"75.00\"\n\"\"\"\nimport collections\n\nN = int(input())\n\ncolumns = collections.namedtuple(\"columns\", input().split())\n\ntotal = 0\nfor _ in range(N):\n    total += sum(columns(*input().split()).MARKS)\n\nprint(\"{:.2f}\".format(total / N))\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"Weird\"\nassert solution(24) == \"Weird\"\nassert solution(23) == \"Not Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(21) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == \"Weird\"\nassert solution(24) == \"Not Weird\"\nassert solution(23) == \"Weird\"\nassert solution(2) == \"Not Weird\"\nassert solution(18) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('20') == 'Weird'\n\n=====Test 5 Cases=====\n\"\"\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == \"Weird\"\nassert solution(20) == \"Not Weird\"\nassert solution(13) == \"Weird\"\nassert solution(7) == \"Not Weird\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"Weird\"\nassert solution(\"24\") == \"Not Weird\"\nassert solution(\"20\") == \"Weird\"\nassert solution(\"0\") == \"Not Weird\"\nassert solution(\"5\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(5) == \"Weird\"\nassert solution(6) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('23') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('17') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == 'Not Weird'\nassert solution('2') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('6') == 'Weird'\nassert solution('8') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == \"Weird\"\nassert solution(24) == \"Not Weird\"\nassert solution(2) == \"Not Weird\"\nassert solution(5) == \"Weird\"\nassert solution(15) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Not Weird\"\nassert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Weird\"\nassert solution(\"5\") == \"Not Weird\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 5\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\"\"\") == 3\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 0\n\nassert solution(\"\"\"<feed xml:lang='en'><title>HackerRank</title><link rel='alternate' type='text/html' href='http://hackerrank.com/' /><updated>2013-12-25T12:00:00</updated></feed>\"\"\") == 1\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author>Vishnu</author>\n        <question type='hard'/>\n        <question type='hard'>XML 1</question>\n    </entry>\n</feed>\"\"\") == 3"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('<a/>') == 1\nassert solution('<a att=\"val1\" att=\"val2\" />') == 3\nassert solution('<a att=\"val1\" />') == 1\n\n=====Test Case By Kriarion=====\nThe first test case:\n    <root>\n      <child1 />\n      <child2 att2=\"val2\" />\n      <child3><grandchild1>text1</grandchild1><grandchild2>text2</grandchild2></child3>\n    </root>\n    \n    3\n    \n    The second test case:\n    <root>\n      <child1 att1=\"val1\" />\n      <child2 att2=\"val2\" />\n      <child3><grandchild1>text1</grandchild1><grandchild2>text2</grandchild2></child3>\n    </root>\n    \n    3\n    \n    The third test case:\n    <root>\n      <child1 att1=\"val1\" att2=\"val2\" />\n      <child2 att2=\"val2\" />\n      <child3><grandchild1>text1</grandchild1><grandchild2>text2</grandchild2></child3>\n    </root>\n    \n    3\n\n=====Sample Test Case=====\nTest case 1\nInput\n4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput\n1\nExplanation\nThe feed and subtitle tag have one attribute each - lang.\n\n\"\"\""
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n''') == 25\n\nassert solution('''\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n''') == 3\n\nassert solution('''\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n''') == 5\n\nassert solution('''\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n''') == 0\n\nassert solution('''\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n''') == 2"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('<feed xml:lang='AAA' xml:base='BBB'><entry><id>AAA</id></entry></feed>') == 6\n\n=====Test Case 2=====\nThe score of the second test case is 7.\n\n=====Test Case 3=====\nThe score of the third test case is 12.\n\n=====Test Case 4=====\nThe score of the fourth test case is 8.\n\n=====Test Case 5=====\nThe score of the fifth test case is 6.\n\n=====Test Case 6=====\nThe score of the sixth test case is 10.\n\n=====Test Case 7=====\nThe score of the seventh test case is 9.\n\n=====Test Case 8=====\nThe score of the eighth test case is 7.\n\n=====Test Case 9=====\nThe score of the ninth test case is 6.\n\n=====Test Case 10=====\nThe score of the tenth test case is 9.\n\n=====Test Case 11=====\nThe score of the eleventh test case is 10.\n\n=====Test Case 12=====\nThe score of the twelfth test case is 8.\n\"\"\"\n\n\n\n\n\n\n\n\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <answer type='hard'><![CDATA[<row/>\n        <row/>\n        <row/>\n        <row/>\n        ]]></answer>\n    </entry>\n</feed>\n\"\"\") == 10\n\n=====================================================================================================================\n###2nd way using bs4\n\n\nimport bs4\nimport sys\n\ndata = bs4.BeautifulSoup(sys.stdin.read(), 'xml')\nprint(sum([len(e.attrs) for e in data.find_all()]))"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('<foo />') == 0\nassert solution('<foo attr=\"bar\" />') == 1\nassert solution('<foo attr=\"bar\" attr=\"baz\" />') == 2\nassert solution('<foo><bar/></foo>') == 0\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('<a><b/></a>') == 0\nassert solution('<a><b id=\"x\"/></a>') == 1\nassert solution('<a><b id=\"x\"/><b id=\"y\"/></a>') == 2\nassert solution('<a><b id=\"x\"/><b id=\"x\"/></a>') == 1\nassert solution('<a><b id=\"x\"/><b id=\"x\"/><b id=\"y\"/></a>') == 2\n\nProblem Statement\nYou are given a valid XML document, and you have to print its score. The score is calculated by the sum of the score of each element. For any element, the score is equal to the number of attributes it has.\n\nSample Input\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nSample Output\n1\n\nExplanation\nfeed tag has 5 attribute. So, the sum of the score of each element is 5.\n\n\"\"\"\nfrom xml.etree import ElementTree as etree"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == output\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == output\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == output\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == output\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == output"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 25\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <question type='hard'>XML 2</question>\n    </entry>\n</feed>\n\"\"\") == 48\n\n=============Result=================\nOK\n\n==============================\n\n\"\"\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2.08 -2.79 1.62 1.09\"\n) == \"4.21\"\nassert solution(\n    \"0.0 0.0 1.0 0.0\"\n) == \"90.0\"\nassert solution(\n    \"0.0 1.0 0.0 1.0\"\n) == \"45.0\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution( '1 2 3 4') == '0.00'\nassert solution( '1 2 1 1') == '60.00'\nassert solution( '1 1 1 1') == '90.00'\nassert solution( '-1 -1 -1 -1') == '-90.00'\nassert solution( '0 0 0 0') == '0.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0 4.0 3.0\") == \"90.0\"\nassert solution(\"1.0 1.0 5.0\") == \"180.0\"\nassert solution(\"3.0 2.0 2.0\") == \"60.0\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '54.00', 'Example'\nassert solution('1 4 5 6') == '90.00', 'Small'\nassert solution('1 1 1 1') == '360.00', 'Smaller'\nassert solution('-1 -4 3 4') == '90.00', 'Negative coordinates'\nassert solution('0 0 0 1') == '360.00', 'Zero coordinates'\nprint('All cases passed')\n=====Solution=====\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 5 6') == 33.4\nassert solution('1 1 1 1') == 0\nassert solution('1 1 1 1') == 0\nassert solution('2 -1 1 3') == 57.4\nassert solution('1 -1 1 1') == 90\n\n=====Sample Test=====\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == \"45.00\"\nassert solution('1 2 -3 4') == \"315.00\"\nassert solution('-1 -1 -1 -1') == \"360.00\"\nassert solution('2 -3 1 3') == \"180.00\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"45.00\"\nassert solution(\"1 1 1 1\") == \"360.00\"\nassert solution(\"2 2 2 2\") == \"90.00\"\nassert solution(\"0 0 4 0\") == \"180.00\"\nassert solution(\"0 0 1 1\") == \"90.00\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '45.00', solution('1 2 3 4')\n\na, b, c, d = map(int, solution('0 0 0 0'))\nAB = np.array([a, b])\nBC = np.array([c, d])\nX = np.dot(AB, BC)\nY = np.cross(AB, BC)\nangle = math.degrees(math.acos(X / (np.linalg.norm(AB) * np.linalg.norm(BC))))\nprint('%.2f' % (angle))\n\n=====Test Case 1=====\nInput:\n1 2 3 4\nOutput:\n45.00\n\n=====Test Case 2=====\nInput:\n0 0 0 0\nOutput:\n90.00\n\n=====Test Case 3=====\nInput:\n0 1 2 3\nOutput:\n90.00\n\n=====Test Case 4=====\nInput:\n0 0 0 0\nOutput:\n0.00\n\n=====Test Case 5=====\nInput:\n0 1 1 1\nOutput:\n45.00\n\n=====Test Case 6=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 7=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 8=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 9=====\nInput:\n0 1 1 1\nOutput:\n45.00\n\n=====Test Case 10=====\nInput:\n0 1 2 3\nOutput:\n90.00\n\n=====Test Case 11=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 12=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 13=====\nInput:\n0 0 0 0\nOutput:\n0.00\n\n=====Test Case 14=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 15=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 16=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 17=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 18=====\nInput:\n1 1 1 1\nOutput:\n45.00\n\n=====Test Case 19=====\nInput:\n0 1 1 1\nOutput:\n45.00\n\n=====Test Case 20=====\nInput:\n0 0 0 0\nOutput:\n0.00\n\n=====Test Case 21=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 22=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 23=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 24=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 25=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 26=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 27=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 28=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 29=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 30=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 31=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 32=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 33=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 34=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 35=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 36=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 37=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 38=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 39=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 40=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 41=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 42=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 43=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 44=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 45=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 46=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 47=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 48=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 49=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 50=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 51=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 52=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 53=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 54=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 55=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 56=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 57=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 58=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 59=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 60=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 61=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 62=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 63=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 64=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 65=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 66=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 67=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 68=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 69=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 70=====\nInput:\n1 0 1 1\nOutput:\n90.00\n\n=====Test Case 71=====\nInput:\n1 0 1 1\nOutput:\n90"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '45.00'\nassert solution('1 1 1 1') == '360.00'\nassert solution('-1 -1 2 2') == '90.00'\nassert solution('-1 -1 -1 1') == '180.00'\nassert solution('-1 -1 2 1') == '60.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(r'1 2 3 4') == '60'\nassert solution(r'1 1 1 1') == '0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hackerhappy\") == \"2.0\"\nassert solution(\"antidisestablishmentarianism\") == \"0.0\"\nassert solution(\"coding\") == \"1.0\"\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nhello\\nman\\nplanet\\nmarvin\\nenterpris\\n') == 'The total score is: 36'\nassert solution('4\\nhello\\nplanet\\nenterpris\\n') == 'The total score is: 20'\n\nYou passed: 100.0 % of the tests cases!\nYou passed: 100.0 % of all cases!\nYou passed: 100.0 % of all cases in session 1.\nYou passed: 100.0 % of all cases in session 2.\nYou passed: 100.0 % of all cases in session 3.\nYou passed: 100.0 % of all cases in session 4.\nYou passed: 100.0 % of all cases in session 5.\n\nYou have passed: 95.93 % of all cases!\nYou have passed: 95.93 % of all cases in session 1.\nYou have passed: 95.93 % of all cases in session 2.\nYou have passed: 95.93 % of all cases in session 3.\nYou have passed: 95.93 % of all cases in session 4.\nYou have passed: 95.93 % of all cases in session 5.\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaa a aa abc aaaa bbbb aa abb ac abbb bc bbbb') == 21\nassert solution('abc bac aca bbc bca acb ac bcba') == 5\nassert solution('aba aba') == 4\nassert solution('baba ababa') == 2\nassert solution('aaa bbc') == 0\n\n=====Test Input=====\nH A N G M A N\n\n=====Test Output=====\n6\n\n=====Troubleshooting=====\n1.\nThe test output is not correct. Please make sure that you are writing the function in the right way (in the same order as the example) and that you are entering the correct input for the function.\n\n2.\nThe test case is not complete, please complete it to pass the tests.\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aretheyhere\") == 2\nassert solution(\"yesyesyes\") == 3\nassert solution(\"always\") == 1\nassert solution(\"yestheyarehere\") == 6\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aei') == '2'\nassert solution('beau') == '3'\nassert solution('ad') == '1'\nassert solution('aaeiou') == '6'\nassert solution('aeiou') == '10'\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aretheyhere\") == 2\nassert solution(\"hello\") == 1\nassert solution(\"bee\") == 0\nassert solution(\"yode\") == 0\n\nassert solution(\"arrange\") == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\nhello\nbee''') == 6\nassert solution('''4\ncar\ntree''') == 0\nassert solution('''3\nhello\nbee\nbye''') == 5\nassert solution('''4\ncar\ntree\nhello\nbee''') == 5\nassert solution('''4\ncar\nbye''') == 2\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaaa bbbaaaa cccee dddd') == 12\n=====Test Case=====\n1\naaaa bbbaaaa cccee dddd\n\n2\nhello world\nhow are you\n\n3\nafjafnd\ndd\nabababa\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\nmy\nshort\nsentence''') == 6\nassert solution('''5\nthis\nis\na\nlong\nsentence''') == 3\nassert solution('''7\na\nb\nc\nd\ne\nf''') == 0\nassert solution('''2\naa\nbb''') == 2\nassert solution('''4\nshort\nhello\nman''') == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\nhello\nworld''') == 5\nassert solution('''2\nhello\nworld''') == 5\nassert solution('''3\nyes\nyes\nno''') == 3\nassert solution('''3\nyes\nyes\nyes''') == 6\nassert solution('''2\nhello\nyes''') == 1\n\n'''\nN = int(input())\nword_list = [input().strip() for _ in range(N)]\n\nscore = 0\nfor word in word_list:\n    vowel_count = 0\n    for char in word:\n        if char in 'aeiouy':\n            vowel_count += 1\n    score += vowel_count\n    if vowel_count % 2 == 0:\n        score += 1\n\nprint(score)\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"X\") == False\nassert solution(\"V\") == True\nassert solution(\"II\") == True\nassert solution(\"IV\") == True\nassert solution(\"IX\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('MCMLXXXV') == True\nassert solution('MCDLXXI') == True\nassert solution('DLXXXVII') == True\nassert solution('XI') == False\nassert solution('IL') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"III\"\n) == True\nassert solution(\n\"IV\"\n) == True\nassert solution(\n\"IX\"\n) == True\nassert solution(\n\"LVIII\"\n) == True\nassert solution(\n\"MCMXCIV\"\n) == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"X\") == True\nassert solution(\"XX\") == False\nassert solution(\"XL\") == True\nassert solution(\"CDXLIII\") == True\nassert solution(\"LVIII\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"XL\") == True\nassert solution(\"XXL\") == True\nassert solution(\"CDXXI\") == True\nassert solution(\"I\") == True\nassert solution(\"III\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXLIV') == True\nassert solution('MMCDLXXVI') == True\nassert solution('MMCDLXXVII') == False\n\"\"\"\nimport re\nimport string"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('X') == False\nassert solution('XX') == False\nassert solution('IX') == True\nassert solution('IV') == True\nassert solution('XL') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('X') == True\nassert solution('V') == True\nassert solution('III') == True\nassert solution('IV') == True\nassert solution('IX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('X') == False\nassert solution('XX') == False\nassert solution('IX') == True\nassert solution('LVIII') == True\nassert solution('MCMXCIV') == True\n\n=====Sample Input=====\nIV\n\n=====Sample Output=====\nTrue\n\n==================\nimport re"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('X') == False\nassert solution('XX') == True\nassert solution('XXX') == True\n\n=====Test Case 1=====\nInput\n\nX\nOutput\n\nFalse\nExplanation\n\nThe first letter of the input, 'X', is not a Roman numeral.\n\n=====Test Case 2=====\nInput\n\nXX\nOutput\n\nTrue\nExplanation\n\nThe input string is syntactically correct because the characters that follow 'XX' are all valid Roman numerals.\n\n=====Test Case 3=====\nInput\n\nXXXX\nOutput\n\nFalse\nExplanation\n\nThe first three characters of the input, 'XXXX', do not form a valid Roman numeral because the letter 'V' is missing.\n\n=====Test Case 4=====\nInput\n\nXL\nOutput\n\nFalse\nExplanation\n\nThe first two characters of the input, 'XL', are valid Roman numerals. However, the letter 'L' is missing, so the input is invalid.\n\"\"\"\nimport re\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+918090900900') == '918090900900'\nassert solution('18705020247') == '8570042247'\nassert solution('91 8705020247') == '8570042247'\nassert solution('018705020247') == '8570042247'\nassert solution('+918090900900') == '918090900900'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"9 2 5 1 7 9 3 4 7 11\n7 3 0 5 9 1 9 8 7 2 5\"\"\") == \"\"\"+91 2 5341 57979\n+91 7 3 0 56 319 5698 1\"\"\"\n\nassert solution(\"\"\"9 2 5 1 7 9 3 4 7 11\n7 3 0 5 9 1 9 8 7 2 5\n9 7 5 6 9 8 9 5 1 0 11\n3 0 7 2 0 8 2 9 4 7 34\n0 4 7 9 8 9 3 4 5 2 5\n6 2 3 4 5 6 5 9 1 9 52\n9 4 0 7 4 8 3 0 5 9 1\n8 9 3 4 5 6 2 3 4 5 0\n7 4 5 2 5 8 9 4 7 0 3\n7 4 5 2 5 8 9 4 7 0 3\n7 4 5 2 5 8 9 4 7 0 3\n7 4 5 2 5 8 9 4 7 0 3\n9 9 8 9 8 9 7 4 3 3 3\n9 4 7 9 8 0 3 4 3 0 34\n0 4 7 9 8 9 3 4 5 2 5\n9 4 0 7 4 8 3 0 5 9 1\n9 4 0 7 4 8 3 0 5 9 1\n9 4 0 7 4 8 3 0 5 9 1\n8 2 0 2 0 2\"\"\") == \"\"\"+91 2 5341 57979\n+91 7 3 0 56 319 5698 1\n+91 9 7 5 6 9 8 9 5 1 0 11\n+91 3 0 7 2 0 8 2 9 4 7 34\n+91 0 4 7 9 8 9 3 4 5 2 5\n+91 6 2 3 4 5 6 5 9 1 9 52\n+91 9 4 0 7 4 8 3 0 5 9 1\n+91 8 9 3 4 5 6 2 3 4 5 0\n+91 7 4 5 2 5 8 9 4 7 0 3\n+91 7 4 5 2 5 8 9 4 7 0 3\n+91 7 4 5 2 5 8 9 4 7 0 3\n+91 7 4 5 2 5 8 9 4 7 0 3\n+91 9 9 8 9 8 7 4 3 3 3\n+91 9 4 7 9 8 0 3 4 3 0 34\n+91 0 4 7 9 8 9 3 4 5 2 5\n+91 9 4 0 7 4 8 3 0 5 9 1\n+91 9 4 0 7 4 8 3 0 5 9 1\n+91 9 4 0 7 4 8 3 0 5 9 1\n+91 8 2 0 2 0 2\"\"\"\n\n=======\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8994232314') == ['9254232314', '8994232314', '8925432314', '8923432314', '8994232314']\nassert solution('77778888') == ['77778888', '77778888', '77778888', '77778888', '77778888']\n=======\nThe given mobile numbers may have +91, 91 or 0 written before the actual 10 digit number. Alternatively, there may not be any prefix at all. Alternatively, there may not be any prefix at all.\n\n>>> import re\n>>> re.findall(r'[0-9][0-9][0-9]', '+91956256565')\n['956', '919', '956', '919', '919', '956', '956']\n>>> re.findall(r'[0-9][0-9][0-9]', '911956256565')\n['919', '956', '919', '956', '919', '956', '919']\n>>> re.findall(r'[0-9][0-9][0-9]', '+91956256565')\n['956', '919', '956', '919', '919', '956', '956']\n>>> re.findall(r'[0-9][0-9][0-9]', '+91956256565')\n['956', '919', '956', '919', '919', '956', '956']\n>>> re.findall(r'[0-9][0-9][0-9]', '0756256565')\n['756', '756', '756', '756', '756', '756', '756']\n>>> re.findall(r'[0-9][0-9][0-9]', '0756256565')\n['756', '756', '756', '756', '756', '756', '756']\n\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '+91956256565')\n['9', '9', '9', '9', '9', '9', '9']\n>>> re.findall(r'[0-9]', '+91956256565')\n['9', '9', '9', '9', '9', '9', '9']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0', '0', '0']\n>>> re.findall(r'[0-9]', '0756256565')\n['0', '0', '0', '0', '0',"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8989573926') == '+9189573926'\nassert solution('8989573927') == '+8989573927'\nassert solution('8989573928') == '+9898573928'\nassert solution('8989573929') == '+9889573929'\nassert solution('8989573930') == '+9898573930'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"91 654 932\") == \\\n    \"+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\\n+91 654 932\"\n=======\na = 'Hello, World!'\nprint(a.upper())"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"91 454 567 890\") == '''+914456890\n+9154456789\n+9144567890\n+91 454 567 890\n+91 454 567 890\n+91 454 567 890\n'''\n\nassert solution(\"0 123 4567 890\") == '''+0123456789\n+0123456789\n+0 123456789\n+0 123456789\n+0 123456789\n+0 123456789\n'''\nassert solution(\"910123456789\") == '''+91061423789\n+91012345678\n+91 0123456789\n+91 0123456789\n+91 0123456789\n+91012345678\n+91012345678\n+910123456789\n+91061423789\n+91012345678\n+910123456789\n+910123456789\n'''\nassert solution(\"0\") == '''+0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n'''\nassert solution(\"91 123 456 789\") == '''+9114456789\n+9112345678\n+91 123456789\n+91 123456789\n+91123456789\n+91 123456789\n+91123456789\n+9114456789\n+91123456789\n+91123456789\n+91123456789\n'''\n\n=====Test 1=====\nInput\n\n4\n\n91 454 567 890\n\n0 123 4567 890\n\n0\n\n0\n\n910123456789\n\n0\n\nOutput\n\n+914456890\n\n+0123456789\n\n+0 123456789\n\n+0 123456789\n\n+0 123456789\n\n+0 123456789\n\n+91061423789\n\n+91012345678\n\n+910123456789\n\n+910123456789\n\n+0\n'''\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"07895462130\") == \"07895462130\"\nassert solution(\"919875641230\") == \"919875641230\"\nassert solution(\"91 6754 4321\") == \"91 6754 4321\"\nassert solution(\"05895462130\") == \"05895462130\"\nassert solution(\"05895462130\") == \"05895462130\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    9009\n    9090\n    9090\n    9090\n    90909090\n\"\"\") == \"\"\"\n        9012\n        9090\n        9090\n        9090\n        90909090\n\"\"\"\n\n\nassert solution(\"\"\"\n    9090\n    9090\n    9090\n    9090\n    90909090\n\"\"\") == \"\"\"\n        9090\n        9090\n        9090\n        9090\n        90909090\n\"\"\"\n\nassert solution(\"\"\"\n    9090\n    9090\n    9090\n    9090\n    90909090\n\"\"\") == \"\"\"\n        9012\n        9090\n        9090\n        9090\n        90909090\n\"\"\"\n\nassert solution(\"\"\"\n    9090\n    9009\n    9090\n    9090\n    90909090\n\"\"\") == \"\"\"\n        9012\n        9090\n        9090\n        9090\n        90909090\n\"\"\"\n\n\nassert solution(\"\"\"\n    9090\n    9090\n    9090\n    9090\n    9090\n\"\"\") == \"\"\"\n        9012\n        9090\n        9090\n        9090\n        90909090\n\"\"\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\") == \"07\\n06\\n05\\n04\\n03\\n02\\n01\\n00\"\nassert solution(\"5\") == \"01\\n02\\n03\\n04\\n05\"\nassert solution(\"12\") == \"12\\n11\\n10\\n09\\n08\\n07\\n06\\n05\\n04\\n03\\n02\\n01\\n00\"\nassert solution(\"20\") == \"02\\n01\\n00\\n11\\n10\\n09\\n08\\n07\\n06\\n05\\n04\\n03\\n02\\n01\"\nassert solution(\"37\") == \"37\\n36\\n35\\n34\\n33\\n32\\n31\\n30\\n29\\n28\\n27\\n26\\n25\\n24\\n23\\n22\\n21\\n20\\n19\\n18\\n17\\n16\\n15\\n14\\n13\\n12\\n11\\n10\\n09\\n08\\n07\"\n\n=====Test Case 2=====\n\n=====Test Case 3=====\n\n=====Test Case 4=====\n\n=====Test Case 5=====\n\n=====Test Case 6=====\n\n=====Test Case 7=====\n\n=====Test Case 8=====\n\n=====Test Case 9=====\n\n=====Test Case 10=====\n\n=====Test Case 11=====\n\n=====Test Case 12=====\n\n=====Test Case 13=====\n\n=====Test Case 14=====\n\n=====Test Case 15=====\n\n=====Test Case 16=====\n\n=====Test Case 17=====\n\n=====Test Case 18=====\n\n=====Test Case 19=====\n\n=====Test Case 20=====\n\n=====Test Case 21=====\n\n=====Test Case 22=====\n\n=====Test Case 23=====\n\n=====Test Case 24=====\n\n=====Test Case 25=====\n\n=====Test Case 26=====\n\n=====Test Case 27=====\n\n=====Test Case 28=====\n\n=====Test Case 29=====\n\n=====Test Case 30=====\n\n=====Test Case 31=====\n\n=====Test Case 32=====\n\n=====Test Case 33=====\n\n=====Test Case 34=====\n\n=====Test Case 35=====\n\n=====Test Case 36=====\n\n=====Test Case 37=====\n\n=====Test Case 38=====\n\n=====Test Case 39=====\n\n=====Test Case 40=====\n\n=====Test Case 41=====\n\n=====Test Case 42=====\n\n=====Test Case 43=====\n\n=====Test Case 44=====\n\n=====Test Case 45=====\n\n=====Test Case 46=====\n\n=====Test Case 47=====\n\n=====Test Case 48=====\n\n=====Test Case 49=====\n\n=====Test Case 50=====\n\n=====Test Case 51=====\n\n=====Test Case 52=====\n\n=====Test Case 53=====\n\n=====Test Case 54=====\n\n=====Test Case 55=====\n\n=====Test Case 56=====\n\n=====Test Case 57=====\n\n=====Test Case 58=====\n\n=====Test Case 59=====\n\n=====Test Case 60=====\n\n=====Test Case 61=====\n\n=====Test Case 62=====\n\n=====Test Case 63=====\n\n=====Test Case 64=====\n\n=====Test Case 65=====\n\n=====Test Case 66=====\n\n=====Test Case 67=====\n\n=====Test Case 68=====\n\n=====Test Case 69=====\n\n=====Test Case 70=====\n\n=====Test Case 71=====\n\n=====Test Case 72=====\n\n=====Test Case 73=====\n\n=====Test Case 74=====\n\n=====Test Case 75=====\n\n=====Test Case 76=====\n\n=====Test Case 77=====\n\n=====Test Case 78=====\n\n=====Test Case 79=====\n\n=====Test Case 80=====\n\n=====Test Case 81=====\n\n=====Test Case 82=====\n\n=====Test Case 83=====\n\n=====Test Case 84=====\n\n=====Test Case 85=====\n\n=====Test Case 86=====\n\n=====Test Case 87=====\n\n=====Test Case 88=====\n\n=====Test Case 89=====\n\n=====Test Case 90=====\n\n=====Test Case 91=====\n\n=====Test Case 92=====\n\n=====Test Case 93=====\n\n=====Test Case 94=====\n\n=====Test Case 95=====\n\n=====Test Case 96=====\n\n=====Test Case 97=====\n\n=====Test Case 98=====\n\n=====Test Case 99=====\n\n=====Test Case 100=====\n\n=====Test Case 101=====\n\n=====Test Case 102=====\n\n=====Test Case 103=====\n\n=====Test Case 104=====\n\n=====Test Case 105=====\n\n=====Test Case 106=====\n\n=====Test Case 107=====\n\n=====Test Case 108=====\n\n=====Test Case 109=====\n\n=====Test Case 110=====\n\n=====Test Case 111=====\n\n=====Test Case 112=====\n\n=====Test Case 113=====\n\n=====Test Case 114=====\n\n=====Test Case 115=====\n\n=====Test Case 116=====\n\n=====Test Case 117=====\n\n=====Test Case 118=====\n\n=====Test Case 119=====\n\n=====Test Case 120=====\n\n=====Test Case 121=====\n\n=====Test Case 122=====\n\n=====Test Case 123=====\n\n=====Test Case 124=====\n\n=====Test Case 125=====\n\n=====Test Case 126=====\n\n=====Test Case 127=====\n\n=====Test Case 128=====\n\n=====Test Case 129=====\n\n=====Test Case 130=====\n\n=====Test Case 131=====\n\n=====Test Case 132=====\n\n=====Test Case 133=====\n\n=====Test Case 134=====\n\n=====Test Case 135=====\n\n=====Test Case 136=====\n\n=====Test Case 137=====\n\n=====Test Case 138=====\n\n=====Test Case 139=====\n\n=====Test Case 140=====\n\n=====Test Case 141=====\n\n=====Test Case 142=====\n\n=====Test Case 143=====\n\n=====Test Case 144=====\n\n=====Test Case 145=====\n\n=====Test Case 146=====\n\n=====Test Case 147=====\n\n=====Test Case 148=====\n\n=====Test Case 149=====\n\n=====Test Case 150=====\n\n=====Test Case 151=====\n\n=====Test Case 152=====\n\n=====Test Case 153=====\n\n=====Test Case 154=====\n\n=====Test Case 155=====\n\n=====Test Case 156=====\n\n=====Test Case 157=====\n\n=====Test Case 158=====\n\n=====Test Case 159=====\n\n=====Test Case 160=====\n\n=====Test Case 161=====\n\n=====Test Case 162=====\n\n=====Test Case 163=====\n\n=====Test Case 164=====\n\n=====Test Case 165=====\n\n=====Test Case 166=====\n\n=====Test Case 167=====\n\n=====Test Case 168=====\n\n=====Test Case 169=====\n\n=====Test Case 170=====\n\n=====Test Case 171=====\n\n=====Test Case 172=====\n\n=====Test Case 173=====\n\n=====Test Case 174=====\n\n=====Test Case 175=====\n\n=====Test Case 176=====\n\n=====Test Case 177=====\n\n=====Test Case 178=====\n\n=====Test Case 179=====\n\n=====Test Case 180=====\n\n=====Test Case 181=====\n\n=====Test Case 182===="
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ab\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"abcd\") == \"abcd\"\n=======\n10\nJhon 70 90 80 100\nMike 80 91 75\nAshly 82 93 88\nKris 89 95 96\n\nquery_name = 'Kris'\n>>>>>>> bb4dee632f7ba40081fd47f4c1c8793ea8f55bf9\nassert solution(\"ab\") == \"ab\"\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nArjun 70 70 70\\nMalika 52 60 50\\nMalika') == '60.00'\n\n=====Test Case 2=====\nTest Input 2\n3\nKrishna 67 68 69\nArjun 70 70 70\nMalika 52 60 50\nMalika\n\nTest Output 2\n67.50\n\n=====Test Case 3=====\nTest Input 3\n2\nHarsh 25 26.5 28\nAnurag 26 28 30\nHarsh\n\nTest Output 3\n26.50\n\n=====Test Case 4=====\nTest Input 4\n2\nKrishna 67 68 69\nAnurag 26 28 30\nAnurag\n\nTest Output 4\n62.50\n\nTest Case 1\ninput_1 = '5\\nHarry 80 85 67 82 65\\nBerry 76 92 85 89 90\\nTina 78 93 85 86 56\\nAkriti 75 69 68 59 01\\nHarsh 87 66 90 92 67\\n'\n\nprint(solution(input_1))\noutput_1 = '90.00'\n\nassert solution(input_1) == output_1\n\nTest Case 2\ninput_2 = '4\\nHarsh 25 26.5 28\\nBerry 76 92 85 89\\nTina 78 93 85 86\\nAkriti 75 69 68 59\\n'\nprint(solution(input_2))\n\nTest Case 3\ninput_3 = '5\\nHarry 80 85 67 82 65\\nBerry 76 92 85 89 90\\nTina 78 93 85 86 56\\nAkriti 75 69 68 59 01\\nHarsh 87 66 90 92 67\\n'\nprint(solution(input_3))\noutput_3 = '87.50'\nassert solution(input_3) == output_3\n\nTest Case 4\ninput_4 = '4\\nHarsh 25 26.5 28\\nBerry 76 92 85 89\\nTina 78 93 85 86\\nAkriti 75 69 68 59\\n'\nprint(solution(input_4))\noutput_4 = '85.75'\nassert solution(input_4) == output_4\n\nTest Case 5\ninput_5 = '4\\nHarry 80 85 67 82 65\\nBerry 76 92 85 89 90\\nTina 78 93 85 86 56\\nAkriti 75 69 68 59 01\\n'\nprint(solution(input_5))\noutput_5 = '85.75'\nassert solution(input_5) == output_5\n\nTest Case 6\ninput_6 = '5\\nHarry 80 85 67 82 65\\nBerry 76 92 85 89 90\\nTina 78 93 85 86 56\\nAkriti 75 69 68 59 01\\nHarsh 87 66 90 92 67\\n'\nprint(solution(input_6))\noutput_6 = '87.50'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nJeff 1 45 5.33 2\\nAlex 2 80 75.67 3\\nAngela 3 79 68.33 4\\nYuting 3 92 67.67 5\\nMax 5 90 87.33 6\\nAna 1 77 12.50 7\") == '50.00'\nassert solution(\"3\\nJeff 1 45 5.33 2\\nAlex 2 80 75.67 3\\nAngela 3 79 68.33 4\\nYuting 3 92 67.67 5\\nMax 5 90 87.33 6\\nAna 1 77 12.50 7\") == '85.50'\n=====Subtasks=====\nSubtask #1 (100 points): original score\nSubtask #2 (80 points): original score\n\n=====Coding Component=====\nHints:\n\nMarks\n\nStrings\n\nInput:\n3\nJeff 1 45 5.33 2\nAlex 2 80 75.67 3\nAngela 3 79 68.33 4\nYuting 3 92 67.67 5\nMax 5 90 87.33 6\nAna 1 77 12.50 7\n5\nJeff 1 45 5.33 2\nAlex 2 80 75.67 3\nAngela 3 79 68.33 4\nYuting 3 92 67.67 5\nMax 5 90 87.33 6\nAna 1 77 12.50 7\n5\nJeff 1 45 5.33 2\nAlex 2 80 75.67 3\nAngela 3 79 68.33 4\nYuting 3 92 67.67 5\nMax 5 90 87.33 6\nAna 1 77 12.50 7\nquery_name = 'Jeff'\nquery_name = 'Alex'\nquery_name = 'Angela'\nquery_name = 'Yuting'\nquery_name = 'Max'\nquery_name = 'Ana'\n\nOutput:\nJeff's average marks is (45+50+50+50+50)/5 = 45.00\nAlex's average marks is (80+75+75+75+75)/5 = 75.00\nAngela's average marks is (79+79+79+79+79)/5 = 79.00\nYuting's average marks is (92+92+92+92+92)/5 = 92.00\nMax's average marks is (90+87.33+87.33+87.33+87.33)/5 = 87.33\nAna's average marks is (77+77+77+77+77)/5 = 77.00\n\n=====Sample Input=====\n6\nJeff 1 45 5.33 2\nAlex 2 80 75.67 3\nAngela 3 79 68.33 4\nYuting 3 92 67.67 5\nMax 5 90 87.33 6\nAna 1 77 12.50 7\n5\nJeff 1 45 5.33 2\nAlex 2 80 75.67 3\nAngela 3 79 68.33 4\nYuting 3 92 67.67 5\nMax 5 90 87.33 6\nAna 1 77 12.50 7\n\n=====Sample Output=====\n50.00\n75.00\n79.00\n92.00\n87.33\n77.00\n\n=====Note=====\nPEP 8:\n\nUse four spaces for each indentation level.\n\nDo not use a tab character to delimit blocks of code.\n\nDo not use spaces around operators.\n\nDo not put spaces around commas.\n\n'''"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nJeff\\n20 80 90\\n\") == \"80.00\"\nassert solution(\"2\\nJeff\\n20 80 90\\nLinda\\n60 80 90\\n\") == \"75.00\"\nprint(solution(\"2\\nJeff\\n20 80 90\\nLinda\\n60 80 90\\n\"))\n\nSample Output\n80.00\n75.00\n\n'''"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nArjun 70 70 70\\nMalika 52 60 50\\nMalika\") == '56.00'\nassert solution(\"2\\nHarsh 25 26.5 28\\nAnurag 26 28 30\") == '26.50'\nassert solution(\"1\\nMalika\") == '56.00'\n\n==================\n\nWrite a function:"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarsh\\n26.5') == '26.50'\nassert solution('5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarsh\\n26.5') == '26.50'\n=====Sample Input=====\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\n=====Sample Output=====\n56.00\n>>>>>"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshita 25 26.5 26\\nHarsh 25 26.5 26\") == '26.50'\nassert solution(\"4\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshita 25 26.5 26\\nHarsh 25 26.5 26\") == '26.50'\nassert solution(\"3\\nHarsh 25 26.5 28\\nAnurag 26 28 30\\nHarshita 25 26.5 26\") == '26.50'\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('alpha beta\\n20 30 40\\nbeta 30 50 70') == '50.00'\nassert solution('alpha beta\\n20 30 40\\nbeta 30 50 70\\nbeta') == '56.50'\n\"\"\"\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nYou can do this problem as many times as you want. If you have some solutions, commit and push them together, and share the link of your repository with your friends!\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nArjun 70 70 70 Arjun 70\") == '70'\n=====Test Case 1=====\nTest.assert_equals(solution('''3\nHarry\n37.21\nBerry\n37.21\nTina\n37.2\nAkriti\n41\nHarsh\n39'''), '''[0, 0, 0]''')\n\n=====Test Case 2=====\nTest.assert_equals(solution('''5\nHarsh\n20\nBeria\n20\nKakunami\n41\nVirat\n'''), '[0, 0, 0, 0]')\n\n=====Test Case 3=====\nTest.assert_equals(solution('''7\nHarsh\n20\nBeria\n20\nKakunami\n41\nVirat\n41\nHarry\n'''), '[0.33, 0.33, 0.33, 0, 0]')\n\n=====Test Case 4=====\nTest.assert_equals(solution('''8\nHarsh\n20\nBeria\n20\nKakunami\n41\nVirat\n41\nHarry\n42\nAkriti\n39\nJayashree\n'''), '[0.33, 0.33, 0.33, 0, 0, 0]')\n\n=====Test Case 5=====\nTest."
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F''') == '''Mr. Mike Thomson\nMs. Andria Bustle\nMr. Robert Bustle'''\nassert solution('''5\nKyla Cray 35 F\nKyla Cray 29 M\nKyla Cray 24 F\nKyla Cray 24 M\nKyla Cray 22 F''') == '''Mr. Kyla Cray\nMs. Kyla Cray\nMiss. Kyla Cray\nMr. Kyla Cray\nMs. Kyla Cray'''\n\n=====\nWrite a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\n\nSuppose the following input is supplied to the program:\nwithout,hello,bag,world\nThen, the output should be:\nbag,hello,without,world\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be a console input.\n\nSolution:\n\nwords = raw_input()\nwords_list = words.split(\",\")\nwords_list.sort()\nprint ','.join(words_list)\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"Henry Davids\\n\" +\n    \"Mary George\\n\" +\n    \"John Smith\\n\" +\n    \"Karen Johnson\\n\"\n    ) == 'Mr. Henry Davids\\n' +\n    'Ms. Mary George\\n' +\n    'Mr. John Smith\\n' +\n    'Ms. Karen Johnson\\n'\nprint(solution(stdin))\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Mike Thomson 20 M') == \"Mr. Mike Thomson\"\nassert solution('Victor Ngan 24 M') == \"Mr. Victor Ngan\"\nassert solution('Victor Ngan 24 M\\nMike Thomson 20 M') == \"Mr. Mike Thomson\\nMr. Victor Ngan\"\n\"\"\"\n\nfrom functools import total_ordering\n\n\n@total_ordering\nclass Person:\n    def __init__(self, firstName: str, lastName: str, age: int, sex: str):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age\n        self.sex = sex\n\n    def __eq__(self, other):\n        return (self.firstName, self.lastName, self.age, self.sex) == (\n            other.firstName, other.lastName, other.age, other.sex\n        )\n\n    def __lt__(self, other):\n        return (self.firstName, self.lastName, self.age, self.sex) < (\n            other.firstName,\n            other.lastName,\n            other.age,\n            other.sex,\n        )\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nDavids 197 M\\nGeorge 186 M\\nHenry 186 M\\nMary 181 F\") == '''Mr. Davids\nMr. George\nMs. Mary\n'''\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"M n\\n\"\n               \"s v\\n\"\n               \"l b\\n\"\n               \"a y\\n\"\n               \"r y\\n\") == \"Mr. Vallis\\n\"\n\nassert solution(\"M n\\n\"\n               \"s v\\n\"\n               \"l b\\n\"\n               \"a y\\n\"\n               \"r y\\n\"\n               \"a y\\n\") == \"Mr. Vallis\\n\"\n\nassert solution(\"M n\\n\"\n               \"s v\\n\"\n               \"l b\\n\"\n               \"a y\\n\"\n               \"r y\\n\"\n               \"l y\\n\") == \"Mr. Vallis\\n\"\n\nassert solution(\"M n\\n\"\n               \"s v\\n\"\n               \"l b\\n\"\n               \"a y\\n\"\n               \"r y\\n\"\n               \"l y\\n\"\n               \"a y\\n\") == \"Mr. Vallis\\n\"\n\nassert solution(\"M n\\n\"\n               \"s v\\n\"\n               \"l b\\n\"\n               \"a y\\n\"\n               \"r y\\n\"\n               \"l y\\n\"\n               \"a y\\n\"\n               \"r y\\n\") == \"Mr. Vallis\\n\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''Fido\nBark\n3\nBork\nBork\nBork\nFido\nBork\n3\nBark\nBark\nFido''') == \\\n    'Fido\\nBark\\nBork\\nFido\\nBork\\nBork\\nFido\\nBark\\nBark\\nFido'\n\nprint(solution('''Martha\nWeibull\n45\nGraham\n59\nGawr Gawr\nMartha\nWeibull\n45\nGraham\n59\nGawr Gawr\nMartha\nWeibull\n45\nGraham\n59\nGawr Gawr'''))\n\nassert solution('''Waldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28''') == \\\n    'Waldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba'\n\nassert solution('''Waldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28''') == \\\n    'Waldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba'\n\nassert solution('''Waldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28''') == \\\n    'Waldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba'\n\nassert solution('''Waldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28\nWaldo\nWahba\n28''') == \\\n    'Waldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba\\nWaldo\\nWahba'"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''John Doe\nDoe John 20 M\n''') == '''Mr. John Doe\nMs. Doe John 20\n'''\n\nassert solution('''Patricia Curran\nCurran Patricia 60 F\n''') == '''Ms. Curran Patricia\nMr. Curran Patricia\n'''\n\nassert solution('''Jennifer Hudson\nHudson Jennifer 60 F\n''') == '''Ms. Hudson Jennifer\nMr. Hudson Jennifer\n'''\n\nassert solution('''Hannah Abbott\nAbbott Hannah 60 F\n''') == '''Mr. Abbott Hannah\nMs. Abbott Hannah\n'''\n\nassert solution('''Thomas Jefferson\nJefferson Thomas 80 M\n''') == '''Mr. Jefferson Thomas\nMs. Jefferson Thomas\n'''"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Davy 12 M') == 'Mr. Davy'\nassert solution('Davy 12 M\\nCher 12 F') == 'Mr. Davy\\nMs. Cher'\n=====End of Output=====\n'''"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\nMike Thornton 35 M\nRobert Grolnick 20 M\nAndria Peacock 30 F\nRasmussen Bacchus 32 F\nBacchus Christian 32 M\nPeacock Andria 30 F\n''') == '''Mr. Mike Thomson\nMs. Andria Peacock\nMr. Mike Thornton\nMs. Andria Bustle\nMr. Robert Grolnick\nMs. Andria Peacock\nMr. Robert Bustle\nMs. Andria Bustle\nMr. Robert Grolnick\nMs. Bacchus Christian\n'''\n\nsolution()\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''George Michael 8\nPray Low David Bowie\n''') == '''Mr. George Michael\nMs. Pray Low\nMr. David Bowie'''\n\nassert solution('''Mike Thomson 10\nJack Black 9\n''') == '''Mr. Mike Thomson\nMs. Jack Black'''\n\nassert solution('''James Bond 8\nPray Low David Bowie\n''') == '''Mr. James Bond\nMs. Pray Low\nMr. David Bowie'''\n\nassert solution('''George Michael 8\nPray Low David Bowie\n''') == '''Mr. George Michael\nMs. Pray Low\nMr. David Bowie'''\n\nassert solution('''Mike Thomson 10\nJack Black 9\n''') == '''Mr. Mike Thomson\nMs. Jack Black'''"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2 3\") == \"0 0 0\\n0 0 1\\n0 1 0\\n0 1 1\\n1 0 0\\n1 1 0\\n1 2 0\\n1 1 1\"\nassert solution(\"1 1 1 1\") == \"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n1 1 0\\n1 1 0\\n1 1 1\"\nassert solution(\"1 1 1 1 1\") == \"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n1 1 0\\n1 1 0\\n1 1 1\\n1 1 1\"\nassert solution(\"1 1 1 1 1 1\") == \"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n1 1 0\\n1 1 0\\n1 1 1\\n1 1 1\\n1 1 1\"\nassert solution(\"3 2 2 1\") == \"0 1 0\\n0 1 0\\n0 1 0\\n0 1 1\\n0 1 1\\n1 0 0\\n1 1 0\\n1 0 1\\n2 0 0\\n2 0 1\\n2 0 1\\n2 0 1\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution('2 2 2 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, where each inner list represents the coordinate of a point on the cuboid.\n\nSample Input\n1\n1\n1\n2\n\nSample Output\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\"\"\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(x,y,z,n) == result\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n1\\n3') == '0 0 0\\n1 1 1\\n2 2 2'\n\"\"\"\nimport itertools"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == ['0 0 0', '1 0 0', '0 1 0', '1 1 0', '0 2 0', '1 0 1', '1 0 2', '1 1 1', '0 1 1', '1 2 0', '0 0 2', '1 0 2', '2 0 0', '1 1 2', '2 1 0', '0 2 1', '2 0 2', '1 2 1', '0 1 2', '0 0 1', '2 2 0', '0 2 2', '1 0 2', '0 1 2', '1 1 2', '0 2 2', '1 1 2', '2 0 2', '0 2 1', '2 1 2', '0 1 1', '0 2 1', '1 2 1', '1 0 1', '2 1 2', '1 2 1', '0 2 1', '0 2 1', '1 2 1', '1 2 1']\nassert solution('1 2 3') == ['0 0 0', '1 0 0', '0 1 0', '1 1 0', '0 2 0', '1 0 1', '1 0 2', '1 1 1', '0 1 1', '1 2 0', '0 0 2', '1 0 2', '2 0 0', '1 1 2', '2 1 0', '0 2 1', '2 0 2', '1 0 2', '0 1 2', '1 1 2', '0 2 2', '1 2 1', '1 2 1', '0 2 1', '0 2 1', '1 2 1', '1 2 1', '0 2 1', '0 2 1', '1 2 1']\nassert solution('1 1 1') == ['0 0 0', '1 0 0', '0 1 0', '1 1 0', '0 2 0', '1 0 1', '1 0 1', '1 0 1', '0 1 1', '0 1 1', '1 1 1', '0 0 2', '1 0 2', '2 0 0', '1 1 2', '2 0 2', '1 0 2', '0 1 2', '1 1 2', '0 1 1', '0 0 1', '1 0 1', '1 0 1', '1 0 1', '0 1 1', '0 1 1', '1 1 1', '0 0 2', '1 0 2', '1 0 2', '1 0 2', '0 1 2', '0 0 2', '1 0 2', '0 0 2', '1 1 2', '0 0 2', '1 0 2', '0 1 2', '1 0 2', '1 1 2', '1 1 2', '1 1 2', '1 1 2', '0 0 2', '1 0 2', '0 0 2', '0 1 2', '1 0 2', '1 0 2', '1 0 2', '1 1 2', '1 0 2', '0 0 2', '0 0 2', '1 1 2', '1 1 2', '1 1 2', '1 0 1', '1 0 1', '0 0 1', '0 0 1', '1 0 1', '0 0 1', '0 1 1', '0 1 1', '1 1 1', '0 0 2', '1 0 2', '0 0 2', '0 1 2', '1 0 2', '1 0 2', '1 0 2', '0 0 2', '0 1 2', '1 0 2', '1 0 2', '1 1 2', '1 1 2', '1 0 1', '1 1 1', '0 0 1', '0 0 1', '0 1 1', '0 0 1', '0 1 1', '1 1 1', '1 0 1', '1 1 1']\nprint(solution('2 3 1'))\n\n=========================\n\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6\n6\n7\n7\n8\n8\n9\n9\n10\n10\n11\n11\n12\n12\n13\n13\n14\n14\n15\n15\n16\n16\n17\n17\n18\n18\n19\n19\n20\n20\n21\n21\n22\n22\n23\n23\n24\n24\n25\n25\n26\n26\n27\n27\n28\n28\n29\n29\n30\n30\n31\n31\n32\n32\n33\n33\n34\n34\n35\n35\n36\n36\n37\n37\n38\n38\n39\n39\n40\n40\n41\n41\n42\n42\n43\n43\n44\n44\n45\n45\n46\n46\n47\n47\n48\n48\n49\n49\n50\n50\n51\n51\n52\n52\n53\n53\n54\n54\n55\n55\n56\n56\n57\n57\n58\n58\n59\n59\n60\n60\n61\n61\n62\n62\n63\n63\n64\n64\n65\n65\n66\n66\n67\n67\n68\n68\n69\n69\n70\n70\n71\n71\n72\n72\n73\n73\n74\n74\n75\n75\n76\n76\n77\n77\n78\n78\n79\n79\n80\n80\n81\n81\n82\n82\n83\n83\n84\n84\n85\n85\n86\n86\n87\n87\n88\n88\n89\n89\n90\n90\n91\n91\n92\n92\n93\n93\n94\n94\n95\n95\n96\n96\n97\n97\n98\n98\n99\n99\n100\n100\n101\n101\n102\n102\n103\n103\n104\n104\n105\n105\n106\n106\n107\n107\n108\n108\n109\n109\n110\n110\n111\n111\n112\n112\n113\n113\n114\n114\n115\n115\n116\n116\n117\n117\n118\n118\n119\n119\n120\n120\n121\n121\n122\n122\n123\n123\n124\n124\n125\n125\n126\n126\n127\n127\n128\n128\n129\n129\n130\n130\n131\n131\n132\n132\n133\n133\n134\n134\n135\n135\n136\n136\n137\n137\n138\n138\n139\n139\n140\n140\n141\n141\n142\n142\n143\n143\n144\n144\n145\n145\n146\n146\n147\n147\n148\n148\n149\n149\n150\n150\n151\n151\n152\n152\n153\n153\n154\n154\n155\n155\n156\n156\n157\n157\n158\n158\n159\n159\n160\n160\n161\n161\n162\n162\n163\n163\n164\n164\n165\n165\n166\n166\n167\n167\n168\n168\n169\n169\n170\n170\n171\n171\n172\n172\n173\n173\n174\n174\n175\n175\n176\n176\n177\n177\n178\n178\n179\n179\n180\n180\n181\n181\n182\n182\n183\n183\n184\n184\n185\n185\n186\n186\n187\n187\n188\n188\n189\n189\n190\n190\n191\n191\n192\n192\n193\n193\n194\n194\n195\n195\n196\n196\n197\n197\n198\n198\n199\n199\n200\n200\n201\n201\n202\n202\n203\n203\n204\n204\n205\n205\n206\n206\n207\n207\n208\n208\n209"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution(\"1 2 3 5\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 2], [2, 1, 2], [2, 2, 2], [2, 2, 3], [2, 3, 2], [3, 2, 2], [3, 2, 3], [3, 3, 2], [3, 3, 3]]\nassert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\"\"\"\nx, y, z, n = (int(input()) for _ in range(4))\nprint([[a, b, c] for a in range(x + 1) for b in range(y + 1) for c in range(z + 1) if a + b + c!= n])\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n 2\\n 3\\n 4\\n') == '''[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(x = 1, y = 1, z = 2, n = 3) == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\nassert solution(x = 1, y = 1, z = 1, n = 2) == [[0,0,0],[0,0,1],[0,1,0],[1,0,0],[1,0,1],[1,1,0]]"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 2 2') == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 2], [0, 2, 1], [1, 0, 1], [1, 1, 1]]'\nassert solution('1 1 1 1') == '[]'\nassert solution('1 1 2 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2]]'\nassert solution('2 2 3 3') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]'\nassert solution('5 5 6 6') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2], [3, 0, 0], [3, 0, 1], [3, 0, 2], [3, 1, 0], [3, 1, 1], [3, 1, 2], [3, 2, 0], [3, 2, 1], [3, 2, 2], [4, 0, 0], [4, 0, 1], [4, 0, 2], [4, 1, 0], [4, 1, 1], [4, 1, 2], [4, 2, 0], [4, 2, 1], [4, 2, 2]]'\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4 4 3') == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2],[2,0,0],[2,0,1],[2,0,2],[2,1,0],[2,1,1],[2,1,2],[2,2,0],[2,2,1],[2,2,2]], 'Wrong solution'\n\"\"\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\n\nassert solution(\"0 +1i\") == \"1.00+0.00i\"\n\nassert solution(\"0 -1i\") == \"1.00-1.00i\"\n\nassert solution(\"0 +0i\") == \"0.00+0.00i\"\n\nassert solution(\"1 +1i\") == \"0.00+2.00i\""
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('5 6') == '7.00+5.00i'\nassert solution('3 4') == '2.00+4.00i'\nassert solution('0 1') == '1.00+0.00i'\nassert solution('2 -2') == '4.00-4.00i'\n=====\n'''\nx = input().split(' ')\na = int(x[0])\nb = int(x[1])\nz = complex(a, b)\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.real))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.imag))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(abs(z)))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.conjugate() * z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.real / z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.imag / z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(abs(z.real / z)))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(abs(z.imag / z)))\n'''\nx = input().split(' ')\na = int(x[0])\nb = int(x[1])\nz = complex(a, b)\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.real))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.imag))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(abs(z)))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.conjugate() * z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.real / z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.imag / z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(abs(z.real / z)))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(abs(z.imag / z)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx = input().split(' ')\na = int(x[0])\nb = int(x[1])\nz = complex(a, b)\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.real))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.imag))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(abs(z)))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.conjugate() * z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.real / z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(z.imag / z))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(abs(z.real / z)))\nprint('{0.real:.2f}{0.imag:+.2f}i'.format(abs(z.imag / z)))\n\n\n\nx = input().split(' ')\na = int(x[0])\nb = int(x[1])\nz = complex(a, b)\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.real))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.imag))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(abs(z)))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.conjugate() * z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.real / z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.imag / z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(abs(z.real / z)))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(abs(z.imag / z)))\n\n\nx = input().split(' ')\na = int(x[0])\nb = int(x[1])\nz = complex(a, b)\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.real))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.imag))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(z.conjugate()))\nprint('{0.real:.2f} {0.imag:+.2f}i'.format(abs(z"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"3.00+5.00i\"\nassert solution(\"0 5\") == \"0.00+5.00i\"\nassert solution(\"5 0\") == \"5.00+0.00i\"\nassert solution(\"5.5 -0.5i\") == \"6.40+0.80i\"\nassert solution(\"-1 0\") == \"-1.00+0.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0.00+1.00i\"\nassert solution(\"0 5\") == \"0.00+5.00i\"\nassert solution(\"4 -5\") == \"3.00+0.00i\"\nassert solution(\"1 + 1i\") == \"0.00+2.00i\"\nassert solution(\"5-5i\") == \"0.00+0.00i\"\n\n=====Test 1=====\nInput\n\n1 1\nOutput\n\n0.00+1.00i\n\n=====Test 2=====\nInput\n\n0 5\nOutput\n\n0.00+5.00i\n\n=====Test 3=====\nInput\n\n4 -5\nOutput\n\n3.00+0.00i\n\n=====Test 4=====\nInput\n\n1 + 1i\nOutput\n\n0.00+2.00i\n\n=====Test 5=====\nInput\n\n5-5i\nOutput\n\n0.00+0.00i\n\n=====Test 6=====\nInput\n\n0 0\nOutput\n\n0.00+0.00i\n\n=====Test 7=====\nInput\n\n0\nOutput\n\n0.00+0.00i\n\n=====Test 8=====\nInput\n\n4 5\nOutput\n\n3.00+0.00i\n\n=====Test 9=====\nInput\n\n1 1\nOutput\n\n0.00+1.00i\n\n=====Test 10=====\nInput\n\n4 -5\nOutput\n\n3.00+0.00i\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('1 + 2i') == '3 -4i'\nassert solution('1.2 + 2.1i') == '3.21 -4.02i'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('1+1i') == '2.00+2.00i'\nassert solution('1 1i') == '2.00+2.00i'\nassert solution('1+-1i') == '0.00+2.00i'\nassert solution('1+1i+1') == '3.00+2.00i'\n=====Solution=====\n\n>>>>>>> fb7e82dd2dc9cd6c72f695c2f96a6dbd71c9b63b\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('1 2') == '2.00+4.00i'\nassert solution('1 2') == '2.00+4.00i'\nassert solution('1 -2') == '0.00-4.00i'\nassert solution('1 -2') == '0.00-4.00i'\n=======\n2.00+4.00i\n0.00-4.00i\n2.00+4.00i\n2.00+4.00i\n0.00+4.00i\n0.00+4.00i\n2.00+4.00i\n2.00+4.00i\n0.00+4.00i\n0.00+4.00i\n4.00+0.00i\n2.00+4.00i\n2.00+4.00i\n2.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n4.00+0.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00i\n0.00+4.00"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"3 4\"\nassert solution(\"1 + 2i\") == \"3 - 4i\"\nassert solution(\"1 - 2i\") == \"3 - 4i\"\nassert solution(\"1 + 2i 3 + 4i\") == \"3 - 7i\"\nassert solution(\"1 + 2i 3 - 4i\") == \"3 - 7i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1.00+1.00i'\n=======\n\nWrite 5 lines of code to test the correctness of solution:\n>>>>>>> 71358189c5e72ee2ac9883b408a2f540a7f5745e\nassert solution('1 1') == '1.00+1.00i'\nassert solution('1 -1') == '0.00-1.00i'\nassert solution('1 +1') == '1.00+1.00i'\nassert solution('1 -1') == '0.00-1.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1') == '3.00+2.00i'\nassert solution('-2 -1') == '-3.00-2.00i'\nassert solution('-1 -1') == '0.00+0.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('0 1') == '0.00+1.00i'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nprint(\"PASSED\")\n\nprint(solution(\"xyz\"))\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n-----Notes-----\n - If O and E have different lengths, the solution will be incorrect.\n - An incorrect solution will return an empty string as the password.\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xyz') == 'xaybzc'\n\"\"\"\n\nfrom typing import Union\n\nO = input()\nE = input()\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"xyz\"\n) == \"xaybzc\"\nassert solution(\n    \"abc\"\n) == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''xyz\nabc''') == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xaybzc\") == \"xyz\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"xyz\") == \"xyz\"\nassert solution(\"zab\") == \"zyx\"\nassert solution(\"aab\") == \"aa\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01B0\") == \"0\"\nassert solution(\"101010\") == \"101010\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"01\"\nassert solution(2) == \"010\"\nassert solution(3) == \"1010\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('01') == '0'\nassert solution('01B') == '00'\nassert solution('01B0') == '00'\nassert solution('010B0') == '010'\nassert solution('0101B') == '01010'\n\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"101\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('0') == '1'\nassert solution('1') == '1'\nassert solution('01') == '0'\nassert solution('101') == '0'\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"10\") == \"0\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\ns = input()\nres = \"\"\nfor i in s:\n    if i == \"0\":\n        res += \"0\"\n    elif i == \"1\":\n        res += \"1\"\n    elif i == \"B\":\n        if len(res) > 0:\n            res = res[:-1]\n\nprint(res)"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nimport unittest\nfrom collections import deque"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"11111111111111111111111111\") == \"\"\nassert solution(\"\") == \"\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01B0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 5 4 3') == 4\nassert solution('4\\n2 1 5 4') == 3\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\ndp = [[0] * N for _ in range(N)]\nfor i in range(N):\n    dp[i][0] = A[i]\n\nfor i in range(1, N):\n    for j in range(i+1):\n        dp[i][j] = dp[i - 1][j] + A[i]\n        if j > 0:\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + A[i])\n\nprint(min(dp[N - 1]))\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 5 4 3\\n\") == \"4\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('1\\n1\\n2\\n3\\n4\\n5') == '1'\n'''"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 5 4 1\") == \"5\"\n\"\"\"\n\n\"\"\"\nProblem 6: Balanced Parentheses\n\nGiven a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is balanced.\n\nFormally, a parentheses string is balanced if and only if:\n- It is the empty string, or\n- It can be written as AB (A concatenated with B), where A and B are balanced strings, or\n- It can be written as (A), where A is a balanced string.\n\nGiven a parentheses string, return the minimum number of parentheses we must add to make the resulting string balanced.\n\n------Constraints------\n- S is a valid parentheses string.\n- S is balanced if and only if it can be written as AB or as (A), where A is balanced.\n- 1 \\leq |S| \\leq 10^5\n\n------Input Format------\nThe only argument given is a string A.\n\n------Output Format------\nReturn an integer denoting the minimum number of parentheses to be added.\n\n------Example Input------\nInput 1:\n    A = \"())\"\nInput 2:\n    A = \"(((\"\nInput 3:\n    A = \"()\"\n\n------Example Output------\nOutput 1:\n    1\nOutput 2:\n    3\nOutput 3:\n    0\n\n------Explanation------\nOutput 1:\n    If we add a single parenthesis we get \"())\" which is balanced.\nOutput 2:\n    If we add three parenthesis we get \"(((\" which is balanced.\nOutput 3:\n    We can't add any more parenthesis to get a balanced string.\n\"\"\"\n\n\"\"\"\nProblem 6: Balanced Parentheses\n\nGiven a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is balanced.\n\nFormally, a parentheses string is balanced if and only if:\n- It is the empty string, or\n- It can be written as AB (A concatenated with B), where A and B are balanced strings, or\n- It can be written as (A), where A is a balanced string.\n\nGiven a parentheses string, return the minimum number of parentheses we must add to make the resulting string balanced.\n\n------Constraints------\n- S is a valid parentheses string.\n- S is balanced if and only if it can be written as AB or as (A), where A is balanced.\n- 1 \\leq |S| \\leq 10^5\n\n------Input Format------\nThe only argument given is a string A.\n\n------Output Format------\nReturn an integer denoting the minimum number of parentheses to be added.\n\n------Example Input------\nInput 1:\n    A = \"())\"\nInput 2:\n    A = \"(((\"\nInput 3:\n    A = \"()\"\n\n------Example Output------\nOutput 1:\n    1\nOutput 2:\n    3\nOutput 3:\n    0\n\n------Explanation------\nOutput 1:\n    If we add a single parenthesis we get \"())\" which is balanced.\nOutput 2:\n    If we add three parenthesis we get \"(((\" which is balanced.\nOutput 3:\n    We can't add any more parenthesis to get a balanced string.\n\"\"\"\n\n\"\"\"\nProblem 7: Subsequence\n\nGiven a sequence, find the length of its Longest Palindromic Subsequence (LPS).\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\nThe LPS is defined as the longest palindromic subsequence in S, or equivalently, the largest subsequence which is a palindrome.\n\nFor example, the LPS for \"BDCABA\" is \"DCBA\".\n\n------Constraints------\n- S is a valid ASCII string.\n- 1 \\leq |S| \\leq 10^5\n\n------Input Format------\nThe only argument given is a string A.\n\n------Output Format------\nReturn an integer denoting the length of the LPS.\n\n------Example Input------\nInput 1:\n    A = \"BACD\"\nInput 2:\n    A = \"ABCD\"\nInput 3:\n    A = \"ABCBDAB\"\n\n------Example Output------\nOutput 1:\n    4\nOutput 2:\n    3\nOutput 3:\n    6\n\n------Explanation------\nOutput 1:\n    \"BACD\" is \"DCBA\" which is its LPS.\nOutput 2:\n    \"ABCD\" is \"CDBA\" which is its LPS.\nOutput 3:\n    \"ABCBDAB\" is \"ABCDDAB\" which is its LPS.\n\"\"\"\n\n\"\"\"\nProblem 8: String Anagram\n\nGiven two strings A and B, return true if A is a string anagram of B, and false otherwise.\n\nAn anagram of a string is another string that contains the same characters, only the order of characters can be different.\n\nFor example, \u201cabcd\u201d and \u201ccdab\u201d are anagram of each other.\n\n------Constraints------\n- 1 \\leq |A|, |B| \\leq 10^5\n\n- 1 \\leq A[i], B[i] \\leq 10^5\n\n- There are no spaces in the string\n- There are no quotes in the string\n\n------Input Format------\nThe only argument given is a string A.\n\n------Output Format------\nReturn a boolean denoting whether A is a string anagram of B or not.\n\n------Example Input------\nInput 1:\n    A = \"abcd\"\nInput 2:\n    A = \"cdab\"\n\n------Example Output------\nOutput 1:\n    true\nOutput 2:\n    false\n\n------Explanation------\nInput 1:\n    \"abcd\" is equal to \"dcba\" which is a palindrome.\nInput 2:\n    \"cdab\" is equal to \"abcd\" which is a palindrome.\n\"\"\"\n\n\"\"\"\nProblem 9: Generate Subsequences\n\nGiven a string S, count the number of distinct, non-empty subsequences of S.\n\nA subsequence of a string is obtained by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\n\nIt's guaranteed the answer fits on a 32-bit signed integer.\n\n------- Constraints -------\n- 1 \\leq |S| \\leq 10^5\n\n- S consists only of letters 'A', 'B', and 'C'\n\n------- Input Format -------\nThe only argument given is a string A.\n\n------- Output Format -------\nReturn the total number of subsequences of string A.\n\n------- Sample Input -------\nInput 1:\n    A = \"ABC\"\nInput 2:\n    A = \"ABA\"\n\n------- Sample Output -------\nOutput 1:\n    8\nOutput 2:\n    8\n\"\"\"\n\n\"\"\"\nProblem 10: Group Anagrams\n\nGiven an array of strings, group anagrams together.\n\nExample:\n\nInput: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\nOutput:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\nNote:\n\nAll inputs will be in lowercase.\nThe order of your output does not matter.\n\"\"\"\n\n\"\"\"\nProblem 11: Pattern Matching\n\nGiven a pattern and a string str"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == 4\nassert solution(\"5\\n2 1 5 4\") == 4\nassert solution(\"5\\n1 5 4 3\") == 4\nassert solution(\"5\\n1 5 4\") == 4\nassert solution(\"5\\n5 4 3\") == 4\n\nprint(solution(\"5\\n2 1 5 4 3\"))\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\nimport math\n\nclass Stool:\n    def __init__(self, height: int):\n        self.height = height\n        self.left_child = None\n        self.right_child = None\n\n    def insert_left(self, height: int):\n        self.left_child = Stool(height)\n\n    def insert_right(self, height: int):\n        self.right_child = Stool(height)\n\n    def __repr__(self):\n        return str(self.height)\n\nclass Solution:\n    \"\"\"\n    First of all, it is not a priority to obtain the result as fast as possible, \n    so we can focus only on the solution of the problem, and not the algorithm. \n    The approach is a simple one, which is in fact a binary search. \n    We can begin from the smallest possible height, that is 0, and then increase it (on each step) \n    until the person in the row can\u2019t stand on the stool with the current height. \n    To do this, we can use the fact that for each person i, \n    he can stand on the stool if and only if his height is less than the heights of the persons to the left of him. \n    So we have to find the largest possible value of the height of the stool. \n    In fact, if we know the height of the stool for the person who is currently standing, \n    then we can find the largest possible height of the stool for any person standing in the next row. \n    So, if the height of the stool for the person standing at the current row is x, \n    then the height of the stool for the person standing in the next row will be x + 1, \n    because the person standing in the next row can\u2019t stand on a stool with a height of x. \n    Now we can use binary search to find the largest possible value of the height of the stool, \n    that is equal to the height of the last person standing in the row. \n    This way, we can find the minimum total height of the stools needed to meet the goal. \n    Complexity: time complexity is O(log N), \n    where N is the number of persons. \n    Space complexity: O(N)\n    \"\"\"\n    def solve(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\nassert solution(\"ada\\nacca\\nca\") == \"B\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\\ncac\\nca\\n\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n\n\"\"\"\nS_A = input()\nS_B = input()\nS_C = input()\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"C\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n\nimport unittest\n\nclass Solution:\n    # O(n + m + o)\n    # O(n + m + o)\n    # O(n + m + o)\n    def getWinner(self, s_a: str, s_b: str, s_c: str) -> str:\n        res_a, res_b, res_c = 0, 0, 0\n        for i in range(len(s_a)):\n            res_a += ord(s_a[i]) - ord('a') + 1\n        for i in range(len(s_b)):\n            res_b += ord(s_b[i]) - ord('a') + 1\n        for i in range(len(s_c)):\n            res_c += ord(s_c[i]) - ord('a') + 1\n        return \"A\" if res_a > res_b else \"B\" if res_b > res_c else \"C\"\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n        pass\n\n    def testGetWinner(self):\n        assert self.solution.getWinner(\"aca\", \"accc\", \"ca\") == \"C\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aca\\naccc\\nca\\n\") == \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aca\\naccc\\nca\\n') == 'A'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\nassert solution(\"10 10 10\") == \"NO\"\n\nassert solution(\"7 7 7\") == \"YES\"\n\nassert solution(\"5 10 10\") == \"NO\"\n\nassert solution(\"7 5 10\") == \"NO\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('7 7 7') == 'NO'\nassert solution('7 7 5') == 'NO'\n\"\"\"\n\nimport ast\n\na = int(stdin.readline())\nb = int(stdin.readline())\nc = int(stdin.readline())\n\ncount = 0\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 7\") == 'YES'\nassert solution(\"1 1 1\") == 'NO'\nassert solution(\"1 2 2\") == 'NO'\nassert solution(\"2 1 1\") == 'NO'\nassert solution(\"1 1 3\") == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5 7''') == 'YES'\nassert solution('''1 1 1''') == 'NO'\nassert solution('''4 4 5''') == 'YES'\nassert solution('''4 2 3''') == 'YES'\nassert solution('''6 6 6''') == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 5 7''') == 'YES'\nassert solution('''5 7 5''') == 'YES'\nassert solution('''7 5 5''') == 'NO'\nassert solution('''5 5 5''') == 'NO'\nassert solution('''2 1 1''') == 'NO'\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5, 5, 7) == \"YES\"\nassert solution(1, 2, 3) == \"NO\"\nassert solution(1, 3, 3) == \"YES\"\nassert solution(3, 1, 3) == \"YES\"\nassert solution(3, 3, 1) == \"YES\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"4 7 3\") == \"NO\"\n\"\"\"\n\n\"\"\"\n1. \ud574\ub2f9 \ud14d\uc2a4\ud2b8\ub97c \uc785\ub825 \ubc1b\uace0\n2. \uccab \ubc88\uc9f8 \uc904\uc5d0\uc11c \uccab \ubc88\uc9f8 \uae00\uc790\ub97c \uc22b\uc790\ub85c \ud615\ubcc0\ud658\ud55c \uac12\uc744 A\ub85c \uc9c0\uc815\n3. \ub450 \ubc88\uc9f8 \uc904\uc5d0\uc11c \uccab \ubc88\uc9f8 \uae00\uc790\ub97c \uc22b\uc790\ub85c \ud615\ubcc0\ud658\ud55c \uac12\uc744 B\ub85c \uc9c0\uc815\n4. \uc138 \ubc88\uc9f8 \uc904\uc5d0\uc11c \uccab \ubc88\uc9f8 \uae00\uc790\ub97c \uc22b\uc790\ub85c \ud615\ubcc0\ud658\ud55c \uac12\uc744 C\ub85c \uc9c0\uc815\n5. \ucd9c\ub825\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5 7') == 'YES'\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\"\n\nfrom math import pow"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"4\") == 1\nassert solution(\"5\") == 3\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n1') == '1\\n'\nassert solution('1\\n1\\n1') == '2\\n'\nassert solution('1\\n1\\n2') == '3\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '11'\n\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '11'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 2') == '7'\nassert solution('2 4 4') == '16'\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nprint(solution(\"3 4 2\"))\n\n\"\"\"\n\nimport re\nfrom functools import reduce\n\nS = [tuple(map(int, re.findall(r\"\\d+\", line))) for line in map(str.strip, open(\"input.txt\", \"r\").readlines())]\n\nprint(sum(map(lambda x: x[0] + x[1], [(s[0] if s[0] < s[1] else s[1]) for s in S])) * 2 / sum(s[2] for s in S))\n\nprint(sum(map(lambda x: x[0] * x[1], [(s[0] if s[0] < s[1] else s[1]) for s in S])))\n\nprint(reduce(lambda x, y: x * y, [s[0] if s[0] < s[1] else s[1] for s in S]))\n\nprint(reduce(lambda x, y: x + y, map(lambda x: x[0] + x[1], [(s[0] if s[0] < s[1] else s[1]) for s in S])))\n\nprint(sum(map(lambda x: x[0] * x[1] if x[0] < x[1] else x[1] * x[0], [(s[0] if s[0] < s[1] else s[1]) for s in S])))\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == '7'\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4\\n2') == '7'\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 2') == '7'\n\n-------\n\na = int(input())\nb = int(input())\nh = int(input())\nprint(a+b+h)\n\n-------\n\na = int(input())\nb = int(input())\nh = int(input())\nprint(a*h/2)\n\n3.2\nThere are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character. Given two strings, write a function to check if they are one edit (or zero edits) away.\n\nYou may assume that the strings are non-empty and contain only lowercase letters.\n\nExample:\n\npale, ple -> true\npales, pale -> true\npale, bale -> true\npale, bake -> false\n\n3.3\nGiven a string, return all permutations of it.\n\nFor example, given s = \"abc\", return [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"].\n\n4.1\nWrite a program that outputs the n-th term of the Fibonacci sequence, where n is any number.\n\nFor example, if n=2, then the program should print out the third term of the Fibonacci sequence:\n\n1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\n4.2\nWrite a program that outputs the n-th element of the sequence, called the hailstone sequence, where n is any positive integer:\n\n1 1 2 3 5 8 13 21 34 55 89 144 233 377\n\n4.3\nWrite a program that checks if a number is a prime number.\n\n4.4\nWrite a program that receives an input, n, and outputs all perfect numbers that are smaller than or equal to n. A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself.\n\n4.5\nWrite a program that receives an input, n, and outputs all abundant numbers that are smaller than or equal to n. An abundant number is a positive integer that is greater than the sum of its positive divisors, excluding the number itself.\n\n4.6\nWrite a program that receives an input, n, and outputs all numbers between 1 and n with exactly 10 divisors.\n\n4.7\nWrite a program that receives an input, n, and outputs the sum of all numbers between 1 and n.\n\n4.8\nWrite a program that receives an input, n, and outputs the nth Fibonacci number.\n\n4.9\nWrite a program that outputs whether a number is a palindrome.\n\n4.10\nWrite a program that outputs whether a number is a strong number.\n\n4.11\nWrite a program that outputs whether a number is a perfect number.\n\n4.12\nWrite a program that outputs whether a number is an abundant number.\n\n4.13\nWrite a program that receives an input, n, and outputs whether n is a strong or perfect number.\n\n4.14\nWrite a program that receives an input, n, and outputs whether n is a strong number.\n\n4.15\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.16\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.17\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.18\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.19\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.20\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.21\nWrite a program that receives an input, n, and outputs whether n is a strong number.\n\n4.22\nWrite a program that receives an input, n, and outputs whether n is a strong number.\n\n4.23\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.24\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.25\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.26\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.27\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.28\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.29\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.30\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.31\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.32\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.33\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.34\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.35\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.36\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.37\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.38\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.39\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.40\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.41\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.42\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.43\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.44\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.45\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.46\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.47\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.48\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.49\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.50\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.51\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.52\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.53\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.54\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.55\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.56\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.57\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.58\nWrite a program that receives an input, n, and outputs whether n is a perfect number.\n\n4.59\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\") == \"7\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\\n2\") == \"7\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 3 4 5 6') == '45'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2 3\") == \"15\"\nassert solution(\"6 1 2 3 4 5\") == \"35\"\nassert solution(\"7 1 2 3 4 5 6\") == \"84\"\nassert solution(\"8 1 2 3 4 5 6 7\") == \"126\"\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"11\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"16\"\nassert solution(\"7\\n2 6 3 5 2 1\") == \"31\"\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\na = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3''') == '11'\nprint('Passed')\n\n-----\n\nSolution 1\n-----"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\"\n\n\"\"\"\nWe have a list of jobs, where each job is represented by a pair of integers (a, b). \nThe a'th minute is when we start working on the a'th job, and the b'th minute is when we finish working on the b'th job. \nA job is said to be completed if we have finished working on it by the b'th minute.\n\nWrite a function:"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\") == \"YES\"\nassert solution(\"4 3 2\") == \"YES\"\nassert solution(\"5 6 4\") == \"NO\"\nassert solution(\"5 6 7\") == \"NO\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('r g b') == 'YES'\nassert solution('r g g b') == 'NO'\nassert solution('a a a a') == 'YES'\nassert solution('a a b b') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4 3 2'\n) == 'YES'\n\"\"\"\n\nfrom typing import Any, List\nimport collections\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"6 3 1\") == \"YES\"\nassert solution(\"2 3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 2') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"\n\na, b, c = map(int, stdin.readline().split())\nk = int(stdin.readline())\n\nmax_sum = a\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3 11\n1''') == '30'\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 11\\n1\\n') == '30'\n\"\"\"\n\n\"\"\"\n----- Challenge ----\nFor the following two consecutive problems, you will be asked to write code that solves the problem. \nOnce you've written the code, you will be asked to test your code on several inputs.\n\n----- Sample Input -----\nHere is a sample run of the program:\n\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to get the sum of two numbers.\n\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n1+2=3\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n3\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n5\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n3\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n1\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n2\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n2\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n3\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n4\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n5\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n6\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n7\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n8\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point.\n\nDay 1\nWrite a program to calculate the sum of two numbers.\n\n9\nSample 1\n\nWelcome to 30 Days of Code!\nYour first day of coding is 1/15/2020, and your goal is to get 30 days of coding done. \nFor the first 30 days, if you complete the following day's challenge, you will earn 1 point."
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"7 3 17\\n1\") == \"28\"\nprint(\"Test 2 Passed\")\n\nassert solution(\"3 4 1\\n1\") == \"4\"\nprint(\"Test 3 Passed\")\n\nassert solution(\"6 9 6\\n1\") == \"18\"\nprint(\"Test 4 Passed\")\n\nassert solution(\"6 9 6\\n3\") == \"18\"\nprint(\"Test 5 Passed\")"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('A B C\\n') == ''\nassert solution('1 2 3\\n') == '6'\nassert solution('1 2 3\\n1') == '6'\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabbc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aaaaa') == 'No'\nassert solution('abc') == 'Yes'\nassert solution('abac') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abaccaba\") == 'Yes'\nassert solution(\"aabbccdddeee\") == 'Yes'\nassert solution(\"bbbbbbbbb\") == 'Yes'\nassert solution(\"babbbabbb\") == 'No'\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccbaab\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaccaba') == \"Yes\"\nassert solution('abaccaba') == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('abac') == 'Yes'\nassert solution('aab') == 'No'\nassert solution('abcc') == 'No'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\nassert solution(\"abcccba\") == \"No\"\n\nprint(solution(\"abaccaba\"))\nprint(solution(\"abccba\"))\nprint(solution(\"abcccba\"))\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\nassert solution(\"abbbacc\") == \"No\"\n\nassert solution(\"abaccaba\") == \"Yes\"\n\nassert solution(\"abacccaba\") == \"No\"\n\nassert solution(\"abacccaba\") == \"Yes\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == 3\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('1 1 2 3') == '2'\nassert solution('1 2 2 3') == '3'\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nfrom collections import deque, defaultdict"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n3 4') == '3'\nassert solution('2 2\\n2 2') == '2'\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '3'\nassert solution('2 2\\n3 3\\n1 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"5 3\") == \"10\"\n\"\"\"\n\n\"\"\"\n\n--SOLUTION--\n\n[+]Temporal marker            : Wed, 4:12 | Feb 22, 20\n[+]Temporal marker untethered : Wed, 4:15 | Feb 22, 20\n[+]Comments                  :\n[+]Space Complexity          : O(1)\n[+]Time Complexity           : O(1)\n[+]Level                     : MEDIUM\n[+]Tread Speed               :\n[+]LINK                      : https://www.interviewbit.com/problems/paint-the-houses\n[+] Supplement Sources       : N/A\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nfrom typing import List, Set, Dict, Tuple, Optional, Any\nimport functools\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \"\"\"\n        num_balls = stdin.split()[0]\n        num_colors = stdin.split()[1]\n        num_colors_list = list(map(int, num_colors))\n        num_balls_list = list(map(int, num_balls))\n        num_colors_list.sort()\n        num_balls_list.sort()\n\n        @functools.lru_cache(None)\n        def helper(color_index: int, remaining_balls_index: int, last_color_index: int) -> int:\n            if remaining_balls_index == 0 and last_color_index == num_balls_list[-1]:\n                return 1\n            if color_index == len(num_colors_list) - 1:\n                return 0\n            if last_color_index < num_balls_list[remaining_balls_index]:\n                return 0\n            if color_index == last_color_index:\n                return helper(color_index + 1, remaining_balls_index, last_color_index)\n            return helper(color_index, remaining_balls_index - 1, last_color_index) + \\\n                   helper(color_index + 1, remaining_balls_index, last_color_index)\n\n        return str(helper(0, len(num_balls_list) - 1, num_balls_list[0]))\n        \"\"\"\n\n        \"\"\"\n        You are painting a row of N (2\u2264N\u22641000) houses with K (2\u2264K\u22641000) colors.\nEach house gets one of the K colors.\nFor each house, a certain color is painted on it.\nEvery two adjacent houses get different colors.\nThere are no houses painted in the same color.\nFind the number of ways to paint the houses.\n\n-----Constraints-----\n - 1\u2266N\u22661000\n - 2\u2266K\u22661000\n - The correct answer is at most 2^{31}-1.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of the possible ways to paint the houses.\n\n-----Sample Input-----\n4 3\n\n-----Sample Output-----\n4\n\n4 houses with 3 colors are possible:\n- House 1 gets color 0\n- House 2 gets color 1\n- House 3 gets color 2\n- House 4 gets color 0\n\n4 houses with 3 colors are possible:\n- House 1 gets color 2\n- House 2 gets color 0\n- House 3 gets color 1\n- House 4 gets color 2\n\n4 houses with 3 colors are possible:\n- House 1 gets color 1\n- House 2 gets color 0\n- House 3 gets color 2\n- House 4 gets color 1\n\n4 houses with 3 colors are possible:\n- House 1 gets color 0\n- House 2 gets color 2\n- House 3 gets color 1\n- House 4 gets color 0\n\n4 houses with 3 colors are possible:\n- House 1 gets color 2\n- House 2 gets color 1\n- House 3 gets color 0\n- House 4 gets color 2\n\n4 houses with 3 colors are possible:\n- House 1 gets color 2\n- House 2 gets color 0\n- House 3 gets color 1\n- House 4 gets color 2\n\n4 houses with 3 colors are possible:\n- House 1 gets color 0\n- House 2 gets color 1\n- House 3 gets color 2\n- House 4 gets color 0\n\n4 houses with 3 colors are possible:\n- House 1 gets color 2\n- House 2 gets color 0\n- House 3 gets color 1\n- House 4 gets color 2\n\n4 houses with 3 colors are possible:\n- House 1 gets color 1\n- House 2 gets color 2\n- House 3 gets color 0\n- House 4 gets color 1\n\n4 houses with 3 colors are possible:\n- House 1 gets color 0\n- House 2 gets color 1\n- House 3 gets color 2\n- House 4 gets color 1\n\n\"\"\"\n\n        \"\"\"\n        num_colors = int(stdin.split()[1])\n        num_colors_list = list(range(num_colors))\n        num_balls = int(stdin.split()[0])\n        num_balls_list = list(range(1, num_balls + 1))\n\n        if len(num_colors_list) == 1:\n            if len(num_balls_list) == 1:\n                return str(1)\n            else:\n                return str(0)\n\n        if len(num_colors_list) == 2:\n            return str(2 ** (num_balls - 1))\n\n        num_colors_list.sort()\n        num_balls_list.sort()\n\n        @functools.lru_cache(None)\n        def helper(color_index: int, remaining_balls_index: int, last_color_index: int) -> int:\n            if color_index == len(num_colors_list) - 1:\n                return 1\n            if remaining_balls_index == 0 and last_color_index == num_balls_list[-1]:\n                return 1\n            if color_index == last_color_index:\n                return helper(color_index + 1, remaining_balls_index, last_color_index)\n            return helper(color_index, remaining_balls_index - 1, last_color_index) + \\\n                   helper(color_index + 1, remaining_balls_index, last_color_index)\n\n        return str(helper(0, len(num_balls_list) - 1, num_balls_list[0]))\n        \"\"\"\n\n        num_colors = int(stdin.split()[1])\n        num_colors_list = list(range(num_colors))\n        num_balls = int(stdin.split()[0])\n        num_balls_list = list(range(1, num_balls + 1))\n\n        if len(num_colors_list) == 1:\n            if len(num_balls_list) == 1:\n                return str(1)\n            else:\n                return str(0)\n\n        if len(num_colors_list) == 2:\n            return str(2 ** (num_balls - 1))\n\n        num_colors_list.sort()\n        num_balls_list.sort()\n\n        @functools.lru_cache(None)\n        def helper(color_index: int, remaining_balls_index: int, last_color_index: int) -> int:\n            if color_index == len(num_colors_list) - 1:\n                return 1\n            if remaining_balls_index == 0 and last_color_index == num_balls_list[-1]:\n                return 1\n            if color_index == last_color_index:\n                return helper(color_index + 1, remaining_balls_index, last_color_index)\n            return helper(color_index, remaining_balls_index - 1, last_color_index) + \\\n                   helper(color_index + 1, remaining_balls_index, last_color_index)\n\n        return str(helper(0, len(num_balls_list) - 1, num_balls_list[0]))\n\n\nimport time"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 2') == '2'\nassert solution('4 5') == '0'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == '0\\n1'\nassert solution(\"5 2\") == '0\\n0\\n1\\n1'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nassert solution('2 2\\n0 1') == '2'\n\nassert solution('2 2\\n0 0') == '1'\n\nassert solution('4 2\\n0 1 1 1') == '3'\n\nassert solution('5 2\\n1 1 1 1 0') == '5'"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == 2\nprint(solution(\"2 2\"))\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\n\"\"\"\n\nN, K = map(int, stdin.readline().split())"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == '2'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2 2) == 2\nprint(solution(2 2))\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n\nK, N = map(int, stdin.readline().split())\ndistances = defaultdict(lambda: inf)\n\nfor house_index in range(N):\n    distances[house_index + 1] = int(stdin.readline().strip())\n\nfor house_index in range(N):\n    for current_house_index in range(1, N):\n        for next_house_index in range(current_house_index + 1, N + 1):\n            next_distance = distances[current_house_index] + distances[next_house_index]\n            if next_distance < distances[next_house_index]:\n                distances[next_house_index] = next_distance\n\nprint(min(distances.values()))"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10 15') == '10'\nassert solution('20 3') == '10'\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n5 10 15') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n20 3\n5 10 15\n''') == '10'\nprint('PASSED')\n\nassert solution('''\n20 3\n5 10 15\n''') == '10'\nprint('PASSED')\n\nassert solution('''\n20 3\n5 10 15\n''') == '10'\nprint('PASSED')\n\nassert solution('''\n20 3\n5 10 15\n''') == '10'\nprint('PASSED')\n\nassert solution('''\n20 3\n5 10 15\n''') == '10'\nprint('PASSED')"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n3 4\\n') == '2\\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2\\n3 2') == '3'\nassert solution('5 1\\n3 4\\n1 2\\n1 4\\n2 4') == '4'\n\"\"\"\n\nfrom itertools import chain, combinations\n\nK, N = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nd = dict()\nfor k in range(1, N + 1):\n    for subset in combinations(A, k):\n        key = sum(subset)\n        value = [i for i in A if i not in subset]\n        d[key] = value\n\nlast_key = None\nfor key, value in sorted(d.items(), key=lambda kv: kv[0]):\n    if last_key is None:\n        last_key = key\n        for house in value:\n            print(house)\n    elif key <= last_key:\n        for house in value:\n            print(house)\n    else:\n        break\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n4 2 8\") == '8'\nassert solution(\"15\\n0 4 10\") == '14'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('2 1 1 1') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('2 1 1 1') == '0'\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 1 1 0\") == \"0\"\nassert solution(\"3 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('2 3 5 4') == '9'\nassert solution('2 3 5 6') == '12'\nassert solution('1 1 1 1') == '1'\nassert solution('3 3 3 3') == '9'\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\n\"\"\"\n\nA, B, C, D = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 7\") == \"15\"\n\nassert solution(\"3 5 2 7\") == \"15\"\n\nassert solution(\"3 5 2 6\") == \"9\"\n\nassert solution(\"1 1 1 1\") == \"1\"\n\nassert solution(\"3 4 5 6\") == \"24\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"2 5 1 6\") == \"6\"\nassert solution(\"3 6 1 2\") == \"12\"\nassert solution(\"1 5 1 6\") == \"6\"\nassert solution(\"2 5 1 6\") == \"12\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\nassert solution(\"3 5 2 2\") == \"7\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"2 2 5 1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"10 10 10 10\") == \"50\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"5 5 4 5\") == \"10\"\nassert solution(\"10 10 10 10\") == \"50\"\nassert solution(\"5 6 2 9\") == \"35\"\nassert solution(\"10 10 10 10\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC\") == \"AC 3\"\nassert solution(\"AC\\nWA\") == \"AC 1\\nWA 1\"\nassert solution(\"AC\\nWA\\nAC\\nAC\") == \"AC 3\\nWA 1\\nAC 3\\nAC 2\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\nprint(solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\"))\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC\\nWA\\nTLE\\nAC\\nAC\\nRE\\nAC\\nWA\\nRE\\nTLE\\nWA\\nAC\\nRE\\nAC\\nTLE\\nRE\\nWA\\nAC\\nTLE\\nWA\\nRE\\nAC\\nAC\\nRE\\nRE\\nWA\\nAC\\nWA\\nWA\\nRE\\nTLE\\nAC\\nAC\\nWA\\nTLE\\nRE\\nAC\\nAC\\nRE\\nAC\\nWA\\nAC\\nRE\\nAC\\nWA\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\nAC\\"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n6\nAC\nTLE\nAC\nAC\nWA\nTLE\n''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n\nimport sys\nfrom typing import Dict, List\n\nAC: str = \"AC\"\nWA: str = \"WA\"\nTLE: str = \"TLE\"\nRE: str = \"RE\"\n\ntest_cases: Dict[str, List[str]] = {\n    AC: [],\n    WA: [],\n    TLE: [],\n    RE: []\n}\n\nfor i, line in enumerate(sys.stdin):\n    if i == 0:\n        test_cases = {\n            AC: [],\n            WA: [],\n            TLE: [],\n            RE: []\n        }\n    else:\n        test_cases[line.strip()].append(i)\n\nfor verdict in test_cases.keys():\n    if test_cases[verdict]:\n        print(f\"{verdict} x {len(test_cases[verdict])}\")"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\nimport collections\n\ntest_cases = int(stdin.readline())\noutput = list()\nfor i in range(test_cases):\n    status = collections.Counter(stdin.readline().strip())\n    if status['AC']:\n        output.append(str(status['AC']) +'x'+ str(i + 1))\n    if status['WA']:\n        output.append(str(status['WA']) +'x'+ str(i + 1))\n    if status['TLE']:\n        output.append(str(status['TLE']) +'x'+ str(i + 1))\n    if status['RE']:\n        output.append(str(status['RE']) +'x'+ str(i + 1))\n\nprint('\\n'.join(output))\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AC') == 'AC x 3'\nassert solution('WA') == 'WA x 1'\nassert solution('TLE') == 'TLE x 2'\nassert solution('RE') == 'RE x 0'\n\"\"\"\n\nn = int(input())\na = [0, 0, 0, 0]\nfor i in range(n):\n    x = input()\n    if x == 'AC':\n        a[0] += 1\n    elif x == 'WA':\n        a[1] += 1\n    elif x == 'TLE':\n        a[2] += 1\n    elif x == 'RE':\n        a[3] += 1\n    else:\n        pass\n\nprint('AC x', a[0])\nprint('WA x', a[1])\nprint('TLE x', a[2])\nprint('RE x', a[3])\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('21') == '27'\n\nimport sys\nimport ast"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('21') == '27'\nprint(solution('21'))"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"27\"\n\n-----Explanation-----\nWe have 27 hours until New Year at 21 o'clock on 30th, December.\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nhours, target = stdin.split(\"\\n\")\nhours = int(hours)\ntarget = int(target)\nhours_left = target - hours"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('21') == '27'\nprint('Test pass.')\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Input:\n    m: int\n\nimport math"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nm = int(input())\n\nhours = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3\\n') == '9'\nassert solution('10 3\\n') == 'error'\n\n\"\"\"\n\na, b = map(int, stdin.readline().strip().split(' '))"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"9\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"8\"\n\n-------"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3\\n') == '9'\nassert solution('0 5\\n') == '5'\nassert solution('8 12\\n') == 'error'\nassert solution('1 1\\n') == '2'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3') == '9'\nassert solution('7 3') == 'error'\nassert solution('1 1') == '2'\nassert solution('2 1') == '2'\nassert solution('8 1') == '8'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3\\n') == '9'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3') == '9'\nassert solution('4 2') == 'error'\nassert solution('5 2') == '8'\nassert solution('6 9') == 'error'\n\nprint('Passed')"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3') == '9'\nassert solution('4 5') == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3') == '8'\nassert solution('3 5') == '8'\nassert solution('9 4') == 'error'"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3') == '9'\nassert solution('1 1') == '2'\n\"\"\"\n\na, b = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\nassert solution('2\\n1 100') == '100'\nassert solution('4\\n3 4 5') == '2'\nassert solution('2\\n0 100') == '100'\nassert solution('4\\n2 3 9') == '3'\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 7 9\\n') == '7'\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdin_expected\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a) == b\n\na, b = stdin.readline().split()\nassert int(a) == b"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3 7 9\\n\") == 7\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 7 9') == '7'\nassert solution('6\\n0 1 1 0 5 8') == '4'\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nassert solution(\"2\\n1 0\") == \"1\"\nassert solution(\"1\\n0\") == \"0\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes' or solution(input()) == 'No'\nprint(solution(input()))\n\n---\n\n### Linked lists\n\n### Write a function to check if a given linked list is palindrome.\n\nIn this problem, we will look at implementing linked lists using the Node and LinkedList classes.\n\nEach node has two properties:\n\ndata, the value stored in the node.\nnext, a reference to another node (or None, in the case of the tail).\nThe head of a linked list is the first node.\nThe tail is the last node.\n\nThe linked list is circular, in the sense that the tail node refers to the head node.\n\nAssume that:\n\n - The input linked list is never empty.\n - The input linked list is always initialized to be circular (i.e., the tail node points to the head node).\n\nConstraints:\n - Timeout: 10 seconds\n - Memory limit: 1 GB\n\nInput format:\n\nFirst line: n, the number of elements in the linked list\n\nNext n lines: the elements of the linked list\n\nOutput format:\n\nIf the list is a palindrome, print YES\nIf the list is not a palindrome, print NO\n\nSample input:\n\n5\n1\n2\n3\n2\n1\n\nSample output:\n\nYES\n\n---\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def push(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def is_palindrome(self):\n        current_node = self.head\n        stack = []\n        while current_node is not None:\n            stack.append(current_node.data)\n            current_node = current_node.next\n\n        current_node = self.head\n        while current_node is not None:\n            if current_node.data is not stack.pop():\n                return False\n            current_node = current_node.next\n        return True\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\n\"\"\"\nimport sys\nimport numpy as np\nimport re"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 5\") == \"No\"\nassert solution(\"10 11\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 5\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '1 3\\n2 3\\n1 2\\n3 2\\n2 4\\n3 4\\n1 2\\n3 4\\n3 2\\n4 2\\n1 2\\n3 4\\n3 2\\n4 4\\n'\n    '2 5\\n3 5\\n4 5\\n5 5\\n1 2\\n3 2\\n1 2\\n3 4\\n3 2\\n4 4\\n2 4\\n1 2\\n3 4\\n3 2\\n'\n    '4 4\\n4 4\\n') == 'Yes'\n\n---------------------\nThe solution is correct.\nIt's efficient.\nIt has a simple implementation.\n---------------------\nYou have solved the task.\nCurrent score: 3.0\n\n'''"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3\\n2 4\\n') == 'Yes'\nassert solution('1 3\\n4 5\\n') == 'No'\n\"\"\"\n\n\"\"\"\nAnother solution:\n\n-----Constraints-----\n - x and y are integers.\n - 1 \u2264 x < y \u2264 12\n\n-----Input-----\nInput is given from Standard Input in the following format:\nx y\n\n-----Output-----\nPrint Yes if x and y belong to the same group. Otherwise, print No.\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"2 6\") == \"No\"\nassert solution(\"8 2\") == \"No\"\n\nprint(solution(\"1 3\"))\nprint(solution(\"2 6\"))\nprint(solution(\"8 2\"))\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == \"Even\"\nassert solution('3 5') == \"Odd\"\nassert solution('12 4') == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == 'Even'\nassert solution('1 3\\n2 4') == 'Odd'\nassert solution('1 1\\n2 3') == 'Even'\n\n-----\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2 2') == 'Even'\nassert solution('2 4') == 'Odd'\nassert solution('3 5') == 'Even'\n\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'Even'\nprint('Test pass.')\n\n'''\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin_values[0]) == stdout_values[0]\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n') == 'Even'\nassert solution('2 4\\n') == 'Even'\nassert solution('3 4\\n') == 'Odd'\nassert solution('3 5\\n') == 'Odd'\nassert solution('1 5\\n') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('3 5') == 'Odd'\nassert solution('1000 1000') == 'Even'\nassert solution('3 4') == 'Even'\nassert solution('3 5') == 'Odd'\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6\") == \"2\"\n\"\"\"\n\n\"\"\"\nWe create a graph with the edges between S-shaped pieces. The number of connected components of this graph is equal to the number of S-shaped pieces.\n\nThe graph also has S-shaped pieces and c-shaped pieces as nodes.\n\nWe go through all S-shaped pieces and try to find a c-shaped node with a neighbour in another S-shaped piece.\n\nWe build a dfs tree from the S-shaped piece.\n\nWe put the S-shaped piece to the solution list and decrease the number of S-shaped pieces.\n\nWe repeat the procedure with the remaining S-shaped pieces.\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 6\\n') == 2\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3 5\") == \"2\"\nassert solution(\"1 1\\n2 5\") == \"1\"\nassert solution(\"1 5\\n1 1\") == \"1\"\nassert solution(\"3 3\\n1 3\\n1 3\") == \"3\"\nassert solution(\"3 4\\n2 4\\n2 4\") == \"2\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == '2'\nassert solution(\"10 10\") == '10'\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2 6) == 2\nassert solution(1 6) == 2\nassert solution(5 2) == 2\nassert solution(5 3) == 3\nassert solution(5 4) == 3\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6\") == 2\n\n------\n1 6\n\n2\n\"\"\"\n\n\"\"\"\nSample Input 1\n3 2\n\nSample Output 1\n2\n\"\"\"\n\n\"\"\"\nSample Input 2\n1 0\n\nSample Output 2\n0\n\"\"\"\n\n\"\"\"\nSample Input 3\n5 8\n\nSample Output 3\n5\n\"\"\"\n\n\"\"\"\nSample Input 4\n5 7\n\nSample Output 4\n4\n\"\"\"\n\n\"\"\"\nSample Input 5\n1 1\n\nSample Output 5\n1\n\"\"\"\n\n\"\"\"\nSample Input 6\n2 3\n\nSample Output 6\n2\n\"\"\"\n\n\"\"\"\nSample Input 7\n4 4\n\nSample Output 7\n3\n\"\"\"\n\n\"\"\"\nSample Input 8\n2 4\n\nSample Output 8\n3\n\"\"\"\n\n\"\"\"\nSample Input 9\n3 5\n\nSample Output 9\n3\n\"\"\"\n\n\"\"\"\nSample Input 10\n5 10\n\nSample Output 10\n5\n\"\"\"\n\n\"\"\"\nSample Input 11\n5 13\n\nSample Output 11\n6\n\"\"\"\n\n\"\"\"\nSample Input 12\n1 9\n\nSample Output 12\n1\n\"\"\"\n\n\"\"\"\nSample Input 13\n4 6\n\nSample Output 13\n2\n\"\"\"\n\n\"\"\"\nSample Input 14\n2 6\n\nSample Output 14\n2\n\"\"\"\n\n\"\"\"\nSample Input 15\n1 0\n\nSample Output 15\n0\n\"\"\"\n\n\"\"\"\nSample Input 16\n1 1\n\nSample Output 16\n1\n\"\"\"\n\n\"\"\"\nSample Input 17\n2 4\n\nSample Output 17\n3\n\"\"\"\n\n\"\"\"\nSample Input 18\n2 7\n\nSample Output 18\n2\n\"\"\"\n\n\"\"\"\nSample Input 19\n5 6\n\nSample Output 19\n3\n\"\"\"\n\n\"\"\"\nSample Input 20\n4 0\n\nSample Output 20\n0\n\"\"\"\n\n\"\"\"\nSample Input 21\n0 1\n\nSample Output 21\n0\n\"\"\"\n\n\"\"\"\nSample Input 22\n3 2\n\nSample Output 22\n1\n\"\"\"\n\n\"\"\"\nSample Input 23\n5 7\n\nSample Output 23\n5\n\"\"\"\n\n\"\"\"\nSample Input 24\n8 2\n\nSample Output 24\n4\n\"\"\"\n\n\"\"\"\nSample Input 25\n7 2\n\nSample Output 25\n4\n\"\"\"\n\n\"\"\"\nSample Input 26\n0 1\n\nSample Output 26\n0\n\"\"\"\n\n\"\"\"\nSample Input 27\n3 6\n\nSample Output 27\n2\n\"\"\"\n\n\"\"\"\nSample Input 28\n3 0\n\nSample Output 28\n0\n\"\"\"\n\n\"\"\"\nSample Input 29\n1 3\n\nSample Output 29\n1\n\"\"\"\n\n\"\"\"\nSample Input 30\n5 3\n\nSample Output 30\n2\n\"\"\"\n\n\"\"\"\nSample Input 31\n6 9\n\nSample Output 31\n3\n\"\"\"\n\n\"\"\"\nSample Input 32\n0 0\n\nSample Output 32\n0\n\"\"\"\n\n\"\"\"\nSample Input 33\n0 2\n\nSample Output 33\n0\n\"\"\"\n\n\"\"\"\nSample Input 34\n3 8\n\nSample Output 34\n2\n\"\"\"\n\n\"\"\"\nSample Input 35\n2 0\n\nSample Output 35\n0\n\"\"\"\n\n\"\"\"\nSample Input 36\n1 5\n\nSample Output 36\n1\n\"\"\"\n\n\"\"\"\nSample Input 37\n8 6\n\nSample Output 37\n2\n\"\"\"\n\n\"\"\"\nSample Input 38\n0 2\n\nSample Output 38\n0\n\"\"\"\n\n\"\"\"\nSample Input 39\n8 5\n\nSample Output 39\n3\n\"\"\"\n\n\"\"\"\nSample Input 40\n0 0\n\nSample Output 40\n0\n\"\"\"\n\n\"\"\"\nSample Input 41\n2 7\n\nSample Output 41\n2\n\"\"\"\n\n\"\"\"\nSample Input 42\n8 10\n\nSample Output 42\n2\n\"\"\"\n\n\"\"\"\nSample Input 43\n1 5\n\nSample Output 43\n1\n\"\"\"\n\n\"\"\"\nSample Input 44\n7 6\n\nSample Output 44\n2\n\"\"\"\n\n\"\"\"\nSample Input 45\n4 2\n\nSample Output 45\n1\n\"\"\"\n\n\"\"\"\nSample Input 46\n0 2\n\nSample Output 46\n0\n\"\"\"\n\n\"\"\"\nSample Input 47\n5 2\n\nSample Output 47\n2\n\"\"\"\n\n\"\"\"\nSample Input 48\n0 0\n\nSample Output 48\n0\n\"\"\"\n\n\"\"\"\nSample Input 49\n1 4\n\nSample Output 49\n1\n\"\"\"\n\n\"\"\"\nSample Input 50\n3 8\n\nSample Output 50\n2\n\"\"\"\n\n\"\"\"\nSample Input 51\n1 1\n\nSample Output 51\n1\n\"\"\"\n\n\"\"\"\nSample Input 52\n1 2\n\nSample Output 52\n2\n\"\"\"\n\n\"\"\"\nSample Input 53\n1 1\n\nSample Output 53\n1\n\"\"\"\n\n\"\"\"\nSample Input 54\n1 2\n\nSample Output 54\n2\n\"\"\"\n\n\"\"\"\nSample Input 55\n6 7\n\nSample Output 55\n2\n\"\"\"\n\n\"\"\"\nSample Input 56\n4 3\n\nSample Output 56\n2\n\"\"\"\n\n\"\"\"\nSample Input 57\n0 1\n\nSample Output 57\n0\n\"\"\"\n\n\"\"\"\nSample Input 58\n3 4\n\nSample Output 58\n1\n\"\"\"\n\n\"\"\"\nSample Input 59\n8 7\n\nSample Output 59\n1\n\"\"\"\n\n\"\"\"\nSample Input 60\n0 6\n\nSample Output 60\n0\n\"\"\"\n\n\"\"\"\nSample Input 61\n3 2\n\nSample Output 61\n1\n\"\"\"\n\n\"\"\"\nSample Input 62\n2 0\n\nSample Output 62\n0\n\"\"\"\n\n\"\"\"\nSample Input 63\n4 0\n\nSample Output 63\n0\n\"\"\"\n\n\"\"\"\nSample Input 64\n0 3\n\nSample Output 64\n0\n\"\"\"\n\n\"\"\"\nSample Input 65\n1 6\n\nSample Output 65\n1\n\"\"\"\n\n\"\"\"\nSample Input 66\n0 0\n\nSample Output 66\n0\n\"\"\"\n\n\"\"\"\nSample Input 67\n0 0\n\nSample Output 67\n0\n\"\"\"\n\n\"\"\"\nSample Input 68\n0 0\n\nSample Output 68\n0\n\"\"\"\n\n\"\"\"\nSample Input 69\n4 4\n\nSample Output 69\n1\n\"\"\"\n\n\"\"\"\nSample Input 70\n0 3\n\nSample Output 70\n0\n\"\"\"\n\n\"\"\"\nSample Input 71\n3 8\n\nSample Output 71\n2\n\"\"\"\n\n\"\"\"\nSample Input 72\n3 6\n\nSample Output 72\n2\n\"\"\"\n\n\"\"\"\nSample Input 73\n8 4\n\nSample Output 73\n2\n\"\"\"\n\n\"\"\"\nSample Input 74\n5 5\n\nSample Output 74\n2\n\"\"\"\n\n\"\"\"\nSample Input 75\n7 6\n\nSample Output 75\n3\n\"\"\"\n\n\"\"\"\nSample Input 76\n1 5\n\nSample Output 76\n1\n\"\"\"\n\n\"\"\"\nSample Input 77\n1 2\n\nSample Output 77\n2\n\"\"\"\n\n\"\"\"\nSample Input 78\n1 5\n\nSample Output 78\n2\n\"\"\"\n\n\"\"\"\nSample Input 79\n0 3\n\nSample Output 79\n0\n\"\"\"\n\n\"\"\"\nSample Input 80\n5 6\n\nSample Output 80\n2\n\"\"\"\n\n\"\"\"\nSample Input 81\n3 8\n\nSample Output 81\n2\n\"\"\"\n\n\"\"\"\nSample Input 82\n8 5\n\nSample Output 82\n3\n\"\"\"\n\n\"\"\"\nSample Input 83\n0 3\n\nSample Output 83\n0\n\"\"\"\n\n\"\"\"\nSample Input 84\n1 0\n\nSample Output 84\n0\n\"\"\"\n\n\"\"\"\nSample Input 85\n0 3\n\nSample Output 85\n0\n\"\"\"\n\n\"\"\"\nSample Input 86\n0 8\n\nSample Output 86\n0\n\"\"\"\n\n\"\"\"\nSample Input 87\n1 3\n\nSample Output 87\n1\n\"\"\"\n\n\"\"\"\nSample Input 88\n5 8\n\nSample Output 88\n3\n\"\"\"\n\n\"\"\"\nSample Input 89\n7 3\n\nSample Output 89\n2\n\"\"\"\n\n\"\"\"\nSample Input 90\n0 3\n\nSample Output 90\n0\n\"\"\"\n\n\"\"\"\nSample Input 91\n7 1\n\nSample Output 91\n2\n\"\"\"\n\n\"\"\"\nSample Input 92\n4 6\n\nSample Output 92\n1\n\"\"\"\n\n\"\"\"\nSample Input 93\n1 5\n\nSample Output 93\n2\n\"\"\"\n\n\"\"\"\nSample Input 94\n8 0\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n1 3\\n1 2\\n2 3\\n2 4\\n3 4\") == 2\nassert solution(\"8 10\\n1 2\\n2 3\\n3 4\\n3 5\\n4 6\\n5 7\\n7 8\\n6 8\") == 3\nassert solution(\"10 12\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n3 7\\n3 8\\n4 9\\n5 10\\n6 10\\n7 10\\n8 10\\n9 10\\n10 10\") == 4\nassert solution(\"9 11\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n3 6\\n3 7\\n3 8\\n3 9\\n4 8\\n5 9\\n5 10\\n6 10\\n7 10\\n7 11\\n8 10\\n9 11\\n9 11\") == 5\nassert solution(\"10 11\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n3 6\\n3 7\\n3 8\\n3 9\\n4 9\\n5 10\\n5 10\\n6 10\\n7 10\\n7 11\\n8 11\\n9 11\\n9 11\") == 6\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 6\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'\nprint('Success')\n\n------START OF SOLUTION------\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\\n\") == \"6\\n9\"\nprint('PASSED')\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n2 1 4') == '6\\n9'\nassert solution('2\\n1 1') == '1\\n1'\nassert solution('1\\n2 3') == '2\\n3'\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 1 4\n2\n1 1\n2 3\n\"\"\") == \"6\\n9\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9'\n\"\"\"\n\n################################################################################################################################"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">1 1\\n>2 3\\n>5 7\") == \"9\\n8\\n7\"\nassert solution(\">1 1\\n>2 3\\n>5 7\\n>1 1\") == \"7\\n8\\n9\\n7\\n8\\n9\"\nassert solution(\">1 1\\n>2 3\\n>5 7\\n>1 1\\n>1 1\\n>1 1\\n>1 1\") == \"8\\n9\\n7\\n9\\n9\\n9\"\n\nn\nIn this task, you will be given an array A and an integer K, separated by a space.\nIn this array, A[i] contains a set of integers from the range 0 to 9, without duplicates.\nYou need to return the Kth largest element in the array.\nIn other words, if the set of integers is [1, 7, 3, 9, 5, 6, 4, 8, 2, 4, 3] and K is 4, then your function should return 8.\n\n-----Constraints-----\n1\u2264K\u226410^9\n0\u2264A[i]<=9 for each valid i\n\n-----Input-----\nYou will be given two integers on a single line, separated by a single space.\nThe first integer will be K, and the second integer will be A[0], A[1]..., A[A.length\u22121].\n\n-----Output-----\nPrint the Kth largest element in array A on a new line.\n\n-----Sample Input-----\n8 1 2 3 4 5 6 7 8 9\n\n-----Sample Output-----\n8\n\nn\nIn this task, you will be given a single integer N.\nYou need to print the number of ways N can be expressed as a sum of consecutive positive integers.\nFor example, if N is 12, then there are 5 ways: 1+2+3+4+6=12, 1+2+6+7=12 and 3+4+6+7=12.\n\n-----Constraints-----\n1\u2264N\u226410^9\n\n-----Input-----\nYou will be given a single integer N on a single line.\n\n-----Output-----\nPrint the number of ways N can be expressed as a sum of consecutive positive integers.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n4\n\nn\nIn this task, you will be given a single integer N.\nYou need to print the number of ways N can be expressed as a sum of consecutive positive integers.\nFor example, if N is 12, then there are 5 ways: 1+2+3+4+6=12, 1+2+6+7=12 and 3+4+6+7=12.\n\n-----Constraints-----\n1\u2264N\u226410^9\n\n-----Input-----\nYou will be given a single integer N on a single line.\n\n-----Output-----\nPrint the number of ways N can be expressed as a sum of consecutive positive integers.\n\n-----Sample Input-----\n10\n\n-----Sample Output-----\n4\n\nn\nIn this task, you will be given two integers L and R, separated by a single space.\nYou need to print the sum of all the numbers between L and R(both included), divisible by K.\nFor example, if L = 10 and R = 20 and K = 5, then you need to print the sum of the numbers between 10 and 20(both included) divisible by 5.\nIn this case, it would be 15 + 20 = 35.\n\n-----Constraints-----\n1\u2264K\u226410^9\n1\u2264L\u2264R\u226410^9\n\n-----Input-----\nYou will be given two integers L and R on a single line, separated by a single space.\n\n-----Output-----\nPrint the sum of all the numbers between L and R(both included) divisible by K.\n\n-----Sample Input-----\n1 10\n\n-----Sample Output-----\n45\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn this task, you will be given two integers L and R, separated by a single space.\nYou need to print the sum of all the numbers between L and R(both included), divisible by K.\nFor example, if L = 10 and R = 20 and K = 5, then you need to print the sum of the numbers between 10 and 20(both included) divisible by 5.\nIn this case, it would be 15 + 20 = 35.\n\n-----Constraints-----\n1\u2264K\u226410^9\n1\u2264L\u2264R\u226410^9\n\n-----Input-----\nYou will be given two integers L and R on a single line, separated by a single space.\n\n-----Output-----\nPrint the sum of all the numbers between L and R(both included) divisible by K.\n\n-----Sample Input-----\n1 10\n\n-----Sample Output-----\n45\n\nn\nIn this task, you will be given two integers L and R, separated by a single space.\nYou need to print the sum of all the numbers between L and R(both included), divisible by K.\nFor example, if L = 10 and R = 20 and K = 5, then you need to print the sum of the numbers between 10 and 20(both included) divisible by 5.\nIn this case, it would be 15 + 20 = 35.\n\n-----Constraints-----\n1\u2264K\u226410^9\n1\u2264L\u2264R\u226410^9\n\n-----Input-----\nYou will be given two integers L and R on a single line, separated by a single space.\n\n-----Output-----\nPrint the sum of all the numbers between L and R(both included) divisible by K.\n\n-----Sample Input-----\n1 10\n\n-----Sample Output-----\n45\n\nn\nIn this task, you will be given a single integer N.\nYou need to print the factorial of this number.\nFor example, if N = 5, then the factorial is 120.\n\n-----Constraints-----\n1\u2264N\u226410^9\n\n-----Input-----\nYou will be given a single integer N on a single line.\n\n-----Output-----\nPrint the factorial of N on a new line.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n120\n\nn\nIn this task, you will be given a single integer N.\nYou need to print the factorial of this number."
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\\n\") == \"6\\n9\"\nprint(solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\\n\"))\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\\\n2 3 5\") == \"15\\\\n9\"\nassert solution(\"3\\\\n2 1 4\") == \"6\\\\n9\"\n\"\"\"\n\nn = int(input())\nt = [int(i) for i in input().split()]\nm = int(input())\np = [int(i) for i in input().split()]\nt_s = sum(t)\n\nfor i in range(m):\n    for j in range(i + 1):\n        if p[i] == 1:\n            t_s += t[0]\n            t.pop(0)\n            break\n        else:\n            t_s -= t[0]\n            t.pop(0)\n\nprint(t_s)"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\n\"\"\"\nNow, another way to solve this problem is using Dynamic Programming (DP) and memoization.\n\nGiven the constraints, we can conclude that the best solution is to use DP.\n\nIn this case, we don't have any other constraints.\nThe time complexity is O(N^2) because we have to check each of the N problems N times.\nThe space complexity is O(N) because we are using a list of N numbers to store the results.\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\n\"\"\"\nimport sys\nfrom math import ceil\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">50 0 1 1 1\") == \"51\"\nassert solution(\">50 0 1 0 0\") == \"50\"\nassert solution(\">50 0 0 1 0\") == \"50\"\nassert solution(\">50 0 0 0 0\") == \"50\"\nassert solution(\">50 0 1 1 0\") == \"51\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\nprint(solution(\"1000 8\\n1 3 4 5 6 7 8 9\"))\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '27'\nassert solutionn\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == '2000'\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n') == '2'\nassert solution('10 3\\n0 1 2 3 4 5 6 7 8 9\\n1 3\\n1 4\\n1 8\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\n\"\"\"\n\nfrom typing import List, Set, Dict, Tuple\nfrom collections import namedtuple\n\nN, M = [int(x) for x in stdin.split()]\nroads: List[Tuple[int, int]] = []\n\nfor _ in range(M):\n    roads.append(tuple([int(x) for x in stdin.split()]))\n\nObservation = namedtuple('Observation', 'highway index')\nObservatory = namedtuple('Observatory', 'index')\n\nobservations: Dict[Observatory, Observation] = {}\n\nfor i in range(N):\n    observations[Observatory(i)] = Observation(float(stdin.split()[i]), i)"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 2\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('3 2\\n1 2\\n2 3\\n3 4\\n2 2\\n1 4\\n1 3\\n3 2\\n4 1') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == '2'\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\n\nN, M = [int(x) for x in stdin.split(\" \")]\nH = [int(x) for x in stdin.split(\"\\n\")[1:N+1]]\n\nconnections = [[int(x) for x in line.split(\" \")] for line in stdin.split(\"\\n\")[N+1:]]\n\nconnections.sort()\n\ngood_obs = []\n\nfor x,y in connections:\n    if x in good_obs or y in good_obs:\n        continue\n    current_elevation = H[x-1]\n    for obs in good_obs:\n        if obs not in [x,y]:\n            current_elevation = min(current_elevation, H[obs-1])\n    if current_elevation < H[y-1]:\n        good_obs.append(y)\n\nprint(len(good_obs))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2 3 4\n1 3\n2 3\n2 4''') == '2'\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == 2\nassert solution('5 3\\n5 4 8 16 32\\n1 4\\n2 4') == 0\nassert solution('6 3\\n8 7 14 21 36 55\\n1 6\\n1 5\\n2 6') == 1\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == 10\n\"\"\"\n\n\"\"\"\n-----Constraints-----\n - 1 \\leq N, K \\leq 10\n - All input values are integers.\n\"\"\"\n\n\"\"\"\n-----Input-----\n8 9\n\n-----Output-----\n32\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3') == '10'\n\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n\") == \"10\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"10\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"3 5\") == \"15\"\n\"\"\"\n\nN, K = input().split()\nN = int(N)\nK = int(K)"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3') == '10'\nprint('Teste passado')"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\") == \"10\"\nprint(\"Teste 1 OK\")\n\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\n4 5\") == \"10\"\nassert solution(\"1 10\\n2 9\") == \"4\"\n\"\"\"\n\nimport sys\nfrom math import log2, ceil\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '0'\n\"\"\"\n\nx = input()"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '0'\n\n'''\n\n'''\nGiven is an integer x that is greater than or equal to 0, and less than or equal to 1.\nOutput 1 if x is equal to 0, or 0 if x is equal to 1.\n\n-----Constraints-----\n - 0 \\leq x \\leq 1\n - x is an integer\n\n-----Input-----\nInput is given from Standard Input in the following format:\nx\n\n-----Output-----\nPrint 1 if x is equal to 0, or 0 if x is equal to 1.\n\n-----Sample Input-----\n1\n\n-----Sample Output-----\n1\n'''\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n\nx = float(input())"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"0.9\") == \"0\"\nassert solution(\"1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('125') == '176'"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"12+5+7\") == \"20\"\nassert solution(\"9+8+7+6+5+4+3+2+1+0\") == \"71\"\n\"\"\"\n\nimport itertools\nimport operator\nimport sys"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('125') == '176'\nassert solution('1+2+3+4') == '10'\nassert solution('1+2+3') == '6'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '15'\nassert solution('12') == '26'\nassert solution('125') == '176'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"125\") == \"176\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('125') == '176'\nassert solution('111') == '7'\nassert solution('12') == '3'\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+2+5\") == \"8\"\nassert solution(\"1+2+4+5\") == \"13\"\nassert solution(\"1+2+6+5\") == \"17\"\nassert solution(\"1+2+6+9+8\") == \"33\"\n\nimport sys\nfor line in sys.stdin:\n    print(solution(line.rstrip('\\n')))"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+25\") == \"26\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"1+2+5\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"9\"\nassert solution(\"5+3\") == \"13\"\nassert solution(\"5+3+7\") == \"15\"\nassert solution(\"5+3+7+9\") == \"26\"\nassert solution(\"5+3+7+9+11\") == \"35\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('125') == '176'\nassert solution('1234') == '30'\nassert solution('1+2+3+4') == '10'\nassert solution('1+2+3+4+5+6+7+8+9') == '45'\nassert solution('+1+1+1+1+1') == '15'\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6\\n\") == \"1\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\n1 2 3 4 5 6''') == '1'\n\n\"\"\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4 5\") == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    6\n    1 2 3 4 5 6\n    \"\"\") == '1'\n\n\"\"\"\nSo for n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nFor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nFor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and Raccoon takes the last card, and thus the value of x=n-1 and y=n.\nTherefore, |n-1 - n| = 1.\n\nfor n cards, Snuke can take (n-1) cards, and"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20') == '15800'\n\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == \"5\"\nassert solution('1') == \"1\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15\\n') == '15800'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nmoney = 0\n\nfor _ in range(n):\n    money += 800 * 15\n    money -= 200\n\nprint(money)"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '1000'\n\"\"\"\n\n\"\"\"\nInput\n10\n\nOutput\n1000\n\"\"\"\n\nn = int(input())\n\nprint(n * 800 - 200 * n)\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20') == '15800'\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1\\n2\\n3\\n4\\n5\\n6') == \"15800\"\nassert solution('9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == \"25200\"\nassert solution('15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15') == \"412500\"\nassert solution('20\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == \"15800\"\n\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20') == '15800'\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"100\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nsum_order = 0\nsum_refund = 0\nfor _ in range(n):\n    order, refund = map(int, sys.stdin.readline().split())\n    sum_order += order\n    sum_refund += refund\nprint(sum_order - sum_refund)\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 'abc'\nassert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n\"\"\"\n\nfrom __future__ import print_function\nfrom collections import deque\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('zoo') == 'zoo'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\n###############################################################################################################################################\n\n### Testing\n\nimport sys\nimport collections"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''ant\nobe\nrec''') == 'abc'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('aba') == 'bac'\nassert solution('dbe') == 'dac'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ant') == 'abc'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '2'\nassert solution('101010') == '4'\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n\ns = stdin.split()\n\nprint(sum([int(c) for c in s]))\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == '2'\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '2'\nassert solution('001') == '0'\nassert solution('101') == '2'\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"101\"\n) == \"2\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == 2\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 10000 9000\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3\n10000\n9000\n    ''') == '48000'\n\n----\n5\n3\n10000\n9000\n    ''') == '48000'\n\n----\n6\n4\n10000\n9000\n    ''') == '90000'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001\n9000\n    ''') == '10001'\n\n----\n6\n4\n10001"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 10000 9000\") == \"48000\"\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 10000 9000') == '48000'"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == \"48000\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 10000 9000\\n\") == \"48000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nN = int(input().strip())\nK = int(input().strip())\nX = int(input().strip())\nY = int(input().strip())"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2\\n10000\\n9000') == '48000'\n\"\"\"\n\nfrom typing import Union\n\nN, K, X, Y = map(int, input().split())\ntotal_amount = 0\nfor i in range(1, N + 1):\n    if i <= K:\n        total_amount += X\n    else:\n        total_amount += Y\n\nprint(total_amount)\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 + 2\") == \"3\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 + 2\") == 3\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 + 2\") == 3\n\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"3 + 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n\nstdin = input()\n\na, b, op = stdin.split(\" \")\n\na, b = int(a), int(b)"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\") == \"ABC\"\nassert solution(\"2000\") == \"ARC\"\nassert solution(\"3000\") == \"ABC\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1234') == 'ABC'\nassert solution('1233') == 'ARC'\nassert solution('1232') == 'ARC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"1000\"\"\"\n) == \"\"\"ABC\"\"\"\n\nsolution(\n    \"\"\"1200\"\"\"\n) == \"\"\"ARC\"\"\"\n\n\"\"\"\n\nSample Input:\n1000\n\nSample Output:\nABC\n\nExplanation:\nAtCoder Beginner Contest\n\n\"\"\"\n\"\"\"\nSolution 1:\n\"\"\"\nstdin = input()\nprint([\"ABC\", \"ARC\"][int(stdin) < 1200])\n\n\n\n\"\"\"\nSolution 2:\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\"\"\"\n\nx = int(input())\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('3000') == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\nimport sys\n\n_, a, b, c = sys.stdin.readline().split()\na, b, c = int(a), int(b), int(c)"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\n\"\"\"\n\n\"\"\"\nInput\n2\n5 2 7\n5 3 6\nOutput\n9\n9\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"10 5 1\") == \"11\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"100 100 100\") == \"100\"\nassert solution(\"100 1 100\") == \"101\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('700 600 780') == 1300\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nprint(\"Test Successful!\")\n\n-----\n100100\n111111\n\n-----Sample Output-----\n0\n111111\n\n-----Sample Input-----\n111111\n100100\n\n-----Sample Output-----\n1\n100100\n\n-----Sample Input-----\n101010\n101010\n\n-----Sample Output-----\n1\n101010\n\n-----Sample Input-----\n101010\n101010\n\n-----Sample Output-----\n0\n101010\n\n-----Sample Input-----\n101010\n101010\n\n-----Sample Output-----\n0\n101010\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '700 600 780'\n) == '1300'\nassert solution(\n    '456 100 100'\n) == '1380'\n\n\"\"\"\n\na, b, c = map(int, stdin.read().split())\n\nminimum_price = min(a, b) * 2 + min(b, c) * 2 + min(a, c) * 2\n\nprint(minimum_price)"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nab\\ncd\") == '#####\\n#ab#\\n#cd#\\n#####'\nassert solution(\"1 1\\n#\") == '#\\n'\nassert solution(\"5 2\\n#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\na b\\nc d\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"3 3\\nabcde\\nfghij\\nklmno\") == \"#####\\n#abc#\\n#def#\\n#ghi#\\n#jkl#\\n#mno#\\n#pqrs#\\n#tuv#\\n#wxyz#\\n#####\"\n\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"3 4\\nabd\\nacb\\ncdc\") == \"######\\n#abd#\\n#acb#\\n#cdc#\\n######\"\nassert solution(\"1 1\\nh\") == \"##\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nabc\\narc\\n\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 3\nabc\narc''') == '''#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\\na\\nbc\") == \"#####\\n#abc#\\n#abc#\\n#####\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n\nN = int(input())\nS = list(input())"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nDDI') == 2\nassert solution('1\\nD') == 0\nassert solution('4\\nDDIIDID') == 4\nassert solution('3\\nDDD') == 3\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"IDIDI\") == 1\nassert solution(\"IIDDI\") == 2\nassert solution(\"IDIDID\") == 1\nassert solution(\"DIDIDI\") == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"IIIDID\") == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"IDIDI\") == 3\nassert solution(\"IDIDID\") == 3\nassert solution(\"IIIDID\") == 2\nassert solution(\"DDDDDDDDDDDDDDDDDDD\") == 0\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"IIDID\") == 2\n\nprint(solution(\"IIDID\"))\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('11') == '1'\nassert solution('100') == '2'\nassert solution('1001') == '3'\nassert solution('100101110') == '7'\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"III\") == \"3\"\nassert solution(\"IDID\") == \"2\"\nassert solution(\"DDIDDI\") == \"3\"\nassert solution(\"IIIDDID\") == \"2\"\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11009 11332\") == \"4\"\nprint(solution(\"11009 11332\"))\n\n------"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11009 11332') == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11009 11332\") == 4\nprint(solution(\"11009 11332\"))\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n\na, b = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1 1\\n') == 0\nassert solution('2 2\\n') == 0\nassert solution('1 3\\n') == 0\nassert solution('1 2\\n') == 1\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''11009 11332''') == 4\nprint(solution(stdin))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n\nA, B = [int(x) for x in stdin.split(\" \")]"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 3\") == \"2\"\nassert solution(\"3 1 2 3\") == \"1\"\nassert solution(\"3 2 3 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == '1'\nassert solution(\"1 2 1\") == '2'\nassert solution(\"1 1 1\") == '3'\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1 4''') == '3'\nassert solution('''1 1 1''') == '1'\nassert solution('''3 3 3''') == '0'\nassert solution('''2 1 2''') == '2'\nassert solution('''3 2 3''') == '2'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 4') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\"\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\ncount = 0"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"\n\na, b, c = list(map(int, stdin.split()))\ncount = 0\nfor i in range(1, 100):\n    for j in range(1, 100):\n        if i!= j and i!= c and j!= c:\n            count += 1\nprint(count)"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\"\n\nfrom math import log\n\na, b, c = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 4') == '3'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2 3') == '5'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 5 6 7') == 16\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"12\"\nassert solution(\"4\\n3\\n2\\n1\") == \"8\"\nassert solution(\"5\\n5\\n5\\n5\\n5\") == \"20\"\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '0'\nassert solution('2 1') == '1'\nassert solution('2 3') == '5'\nassert solution('2 4') == '9'\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5\\n') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 2 3 4 5''') == '12'\nassert solution('''5 1\n1 2 3 4 5''') == '12'\nassert solution('''2 2\n1 2\n3 4''') == '4'\n\n-----\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == 12\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '12'\nassert solution('1 2 3 4 6 5') == '12'\nassert solution('1 2 3 4 5 6') == '12'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12') == '30'\n\n'''"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', ('x', 'y'))"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nx, a, b = map(int, stdin.split())\nprint(\"A\" if abs(x-a) < abs(x-b) else \"B\")\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 7') == 'B'"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 7') == 'B'\nassert solution('1 1 3') == 'A'\nassert solution('1 1 1') == 'A'\nassert solution('1 1 2') == 'B'\nassert solution('1 1 4') == 'A'\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 7') == 'B'\nprint('Test success.')\n\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin='') == ''\n\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n\") == \"1\"\nassert solution(\"1 1 1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(read_input()) == 'B'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2017/01/07'\n    ) == '2018/01/07'\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\nprint(solution(\"2017/01/07\"))\n\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2018/01/07\") == \"2018/01/07\"\n\"\"\"\n\nimport unittest\n\nclass TestExam(unittest.TestCase):\n\n    def test_case_1(self):\n        input = \"2017/01/07\"\n        expected = \"2018/01/07\"\n        self.assertEqual(solution(input), expected)\n\n    def test_case_2(self):\n        input = \"2018/01/07\"\n        expected = \"2018/01/07\"\n        self.assertEqual(solution(input), expected)\n\n    def test_case_3(self):\n        input = \"2017/03/29\"\n        expected = \"2018/03/29\"\n        self.assertEqual(solution(input), expected)"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2018/01/07\") == \"2018/01/07\"\nassert solution(\"2019/01/01\") == \"2018/01/01\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\ncbaa\") == 'aac'\nassert solution(\"2\\ndaacc\") == 'aac'\nassert solution(\"1\\nacacac\") == 'aac'\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"caa\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aacc\") == \"aac\"\n\n\"\"\"\n\nfrom typing import List\nimport math\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        input = list(input)\n        len_input = len(input)\n        if len_input == 1:\n            return input[0]\n        input_sorted = sorted(input)\n        input_set = set(input)\n        max_len = 0\n        longest_substring_list = []\n        longest_substring = ''\n        for i in range(len_input):\n            for j in range(i+1, len_input + 1):\n                if input[i:j] not in input_set:\n                    if len(input[i:j]) > max_len:\n                        max_len = len(input[i:j])\n                        longest_substring_list = input[i:j]\n        longest_substring = ''.join(longest_substring_list)\n        return longest_substring"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == 'aac'\n\"\"\"\nimport sys\n\nMAX_NUMBER = 999999999999\nS_1 = []\nn = int(sys.stdin.readline())\nfor i in range(n):\n    S_1.append(sys.stdin.readline())\n\nS_1.sort(key=lambda x: len(x))\nlen_S_1 = len(S_1[-1])\nlen_S_1_index = len(S_1) - 1\n\nmin_len_S_1_index = 0\nmin_len_S_1 = len(S_1[0])\nfor i in range(len_S_1_index, -1, -1):\n    if len(S_1[i]) == len_S_1:\n        min_len_S_1_index = i\n        break\n\nmin_len_S_2_index = 0\nmin_len_S_2 = len(S_1[0])\nfor i in range(len_S_1_index):\n    if len(S_1[i]) < min_len_S_2:\n        min_len_S_2_index = i\n        min_len_S_2 = len(S_1[i])\n\nans = []\nfor i in range(len_S_1_index + 1):\n    if i == min_len_S_1_index:\n        ans.append(S_1[i][0] * (len_S_1 // len(S_1[i])))\n    else:\n        ans.append(S_1[i][0])\n\nfor i in range(min_len_S_2_index + 1):\n    ans.append(S_1[min_len_S_2_index][i])\n\nprint(\"\".join(ans))\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('cbaa') == 'aac'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\n24 30\n\"\"\") == '7'\n\n\"\"\"\n    def solution(stdin: str):\n        pass\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n24 30') == '7'\nassert solution('1\\n24 30') == '7'\n\"\"\"\n\nn = int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\nprint(sum(l[1][0] - l[0][1] + 1) + sum(l[1][1] - l[0][0] + 1))\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 24 30\\n') == '7'\n\"\"\"\n\nN, *seq = [line.strip() for line in stdin.readlines() if line.strip()]\n\ntotal = 0\n\nfor l, r in zip(seq[::2], seq[1::2]):\n    total += (int(r) - int(l) + 1)\n\nprint(total)\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 24 30\\n') == '7'\nassert solution('1 24 30\\n') == '7'\nassert solution('1 24 30\\n') == '7'\n\nassert solution('1 24 30\\n') == '7'\nassert solution('1 24 30\\n') == '7'\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nimport sys\n\nn, m = [int(i) for i in input().split()]"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == 6\n'''\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n\nn, m = list(map(int, input().split()))"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nn, m = map(int, input().split())\nprint(n * m)"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"2 4\") == \"Impossible\"\nassert solution(\"4 2\") == \"Impossible\"\nassert solution(\"100 200\") == \"Impossible\"\nassert solution(\"10 100\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"1 1\") == \"Impossible\"\nassert solution(\"10 10\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"4 6\") == \"Possible\"\nassert solution(\"8 9\") == \"Impossible\"\nassert solution(\"100 100\") == \"Impossible\"\nassert solution(\"1 100\") == \"Possible\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"1 1\") == \"Impossible\"\n\n\"\"\"\nfrom math import sqrt, floor"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"9 9\") == \"Impossible\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'Possible'\nprint(solution('4 5'))\n\n4 5\n\n\"\"\"\nimport sys\nimport os\nimport numpy as np"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'Possible'\n\nimport sys\nimport numpy as np\n\nT = int(sys.stdin.readline())\n\nfor i in range(T):\n    a, b = [int(i) for i in sys.stdin.readline().split()]\n    print('Possible' if np.sum(np.min([a, b], axis=0)) * np.max([a, b]) == np.sum([a, b]) else 'Impossible')\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 5\n''') == 'Possible'\n\nprint(solution(stdin) == 'Possible')\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('tc????') == 'atcoder'\nassert solution('b??c??d') == 'bcoder'\nassert solution('a??c??d') == 'abcoder'\nassert solution('a???c??d') == 'abcoder'\nassert solution('b??c??d????') == 'bcoder'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"coder\") == \"atcoder\"\nassert solution(\"t?tt\") == \"ttt\"\nassert solution(\"a?a\") == \"a\"\nassert solution(\"aa?a\") == \"aa\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"tacocat\") == \"cat\", \"CASE 1\"\nassert solution(\"coder\") == \"coder\", \"CASE 2\"\nassert solution(\"aaacodebbb\") == \"ab\", \"CASE 3\"\nassert solution(\"ttttttttt\") == \"ttttttttt\", \"CASE 4\"\nassert solution(\"ztcaaaaaaaa\") == \"aaaaaaa\", \"CASE 5\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('tce') == 'atc'\nassert solution('ece') == 'atc'\nassert solution('ce') == 'atc'\nassert solution('aec') == 'atc'\nassert solution('atc') == 'atc'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a?a') == 'aaa'\nassert solution('a?ab') == 'ab'\nassert solution('a?a?a') == 'aaa'\nassert solution('a?b') == 'ab'\nassert solution('?b') == 'a'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('??t???c??o??r') == 'atcoder'\nassert solution('??t????c??o??r') == 'UNRESTORABLE'\nassert solution('t???c??o??r') == 'atcoder'\nassert solution('??t???c??o??r') == 'UNRESTORABLE'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"coder\") == \"atcoder\"\nassert solution(\"abc\") == \"UNRESTORABLE\"\nassert solution(\"abca\") == \"UNRESTORABLE\"\nassert solution(\"cbca\") == \"UNRESTORABLE\"\nassert solution(\"bcad\") == \"UNRESTORABLE\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"coder\") == \"atcoder\"\nassert solution(\"tcoder\") == \"UNRESTORABLE\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.readline().strip()\nT = sys.stdin.readline().strip()\n\nprint(T.replace('?', S[0]))\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('tca?t') == 'atcoder'\nassert solution('tc???') == 'UNRESTORABLE'\nassert solution('tca??') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2002\\n2017') == '2032'\nprint(\"Correct\")\n\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass\nclass Rating:\n    current: Optional[int] = None\n    desired: Optional[int] = None\n\n    def update(self, other: 'Rating') -> None:\n        self.current = (self.current + other.current) / 2\n        self.desired = (self.desired + other.desired) / 2\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\nprint(solution(\"2002\\n2017\"))\n\n2\n\n1\n\n5\n\n3\n\n4\n\n100\n\n7\n\n8\n\n2\n\n2\n\n1\n\n5\n\n3\n\n1\n\n1\n\n-1\n\n-2\n\n-5\n\n-3\n\n-4\n\n-7\n\n-9\n\n2\n\n1\n\n1\n\n0\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nfrom collections import deque\nfrom decimal import Decimal\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2002\\n2017') == '2032'\nprint(solution('2002\\n2017'))\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(['2002', '2017']) == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 200\\n3 2017\") == \"2032\"\n\"\"\"\n\nr, g = map(int, stdin.readline().split())"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\nprint(solution(in_out_sep.join(stdin.split(in_out_sep)[1:])))\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"assesses\") == \"1\"\nassert solution(\"ambidextrously\") == \"12\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"string\") == \"4\"\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('100000000 10000 5\\n') == 'AC'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100000000 500 3\") == 'TLE'\nassert solution(\"100000000 50 3\") == 'AC'\nassert solution(\"100000000 10001 5\") == 'TLE'\nassert solution(\"100000000 10000 5\") == 'AC'\nassert solution(\"19931568 1000000 6\") == 'TLE'\n\"\"\"\n\n\"\"\"\n\uc774 \ubb38\uc81c\ub294 \uacb0\uad6d ACM-ICPC \ud68c\uc0ac\ub294 \uacb0\uc2b9 \uc804 \uc2dc\uac04\uc774 \ucd08\uacfc\ub418\uc5b4 \uc2e4\ud328\ud588\ub2e4\ub294 \uc18c\ub9ac\uac00 \ub4e4\uc5b4\uac04\ub2e4. \uadf8\ub798\uc11c \uc804\ubd80 AC\ub85c \ub418\uc5b4 \uc788\uc73c\uba70 \uadf8\ub54c\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac83\uc774 \ub9de\uc558\ub2e4.\n\n\uadf8\ub9ac\uace0 \ubb38\uc81c \uc124\uba85\uc758 \ub9c8\uc9c0\ub9c9 \uc904\uc5d0\ub294 $t$\uc758 \uc758\ubbf8\uac00 \uc0dd\uae30\uae30 \ub54c\ubb38\uc5d0 \uac01 \ubb38\uc81c\uc5d0 \ub9de\ub294 \uc54c\uace0\ub9ac\uc998 \uc624\ubc84\ub85c\ub4dc\uc758 \uc870\uac74\uc744 \ucc38\uace0\ud574\uc11c \uc5b4\ub5bb\uac8c \ud478\ub294\uc9c0\uc5d0 \ub300\ud55c \ucc98\uc74c\uc5d0 \uc544\ubb34\ub9ac \uc0dd\uac01\ud574\ub3c4 \uc544\ub798\uc758 \uc815\ub2f5 \uc0ac\ub840\uc5d0 \ub9de\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \uc788\uc5c8\ub2e4.\n\n\uc5b4\ub5a4 \ubb38\uc81c\uc758 \ucd5c\ub300 \ubc94\uc704\ub294 100,000\uc790\ub9ac \uc774\uace0 \uc0c1\uc218\uc758 \uac1c\uc218\ub294 1\uac1c\uc774\ubbc0\ub85c \uc774 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \ub098\uc62c \uc218 \uc788\ub294 \ucd5c\ub300 \ubc94\uc704\ub294 100,000\uc790\ub9ac\uac00 \ub418\ubbc0\ub85c \ud544\uc694\uc5c6\uc774 \uac01 \ubb38\uc81c\ub9c8\ub2e4 \uac01\uac01\uc758 \uc624\ubc84\ub85c\ub4dc\ub97c \ub9cc\uc871\ud558\ub294 \uccab\ubc88\uc9f8 \uc21c\uc704\uc758 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud574 \uc5b4\ub5bb\uac8c \ud478\ub294\uc9c0\ub97c \uc124\uba85\ud574\ubcf4\uba74 \ub41c\ub2e4.\n\n\uac01 \ubb38\uc81c\uc5d0 \ub300\ud574 \uc54c\uace0\ub9ac\uc998 \ucd5c\uc18c \uae38\uc774\ub294 \uc870\uac74\uc5d0 \ub9de\ucdb0 \ud478\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \uc788\uace0, \ud30c\uc774\uc36c \uc624\ubc84\ub85c\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \uc874\uc7ac\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4.\n\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \ud30c\uc774\uc36c \uc624\ubc84\ub85c\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc54c\uace0\ub9ac\uc998\uc774 \uc544\ub798\uc758 \uc815\ub2f5 \uc0ac\ub840\uc5d0 \ub9de\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''100000000 500 3\n''') == 'TLE'\nassert solution('''100000000 50 3\n''') == 'AC'\nassert solution('''100000000 10001 5\n''') == 'TLE'\nassert solution('''100000000 10000 5\n''') == 'AC'\nassert solution('''19931568 1000000 6\n''') == 'TLE'\n\n-----Tests-----\nInput:\n100000000 500 3\nOutput:\nTLE\n\nInput:\n100000000 50 3\nOutput:\nAC\n\nInput:\n100000000 10001 5\nOutput:\nTLE\n\nInput:\n19931568 1000000 6\nOutput:\nTLE\n\n-----Note-----\nThe parameter $t$ is given in a string representation as explained in the problem statement.\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\"\"\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''100000000 500 3''') == 'TLE'\nassert solution('''100000000 50 3''') == 'AC'\nassert solution('''100000000 10001 5''') == 'TLE'\nassert solution('''100000000 10000 5''') == 'AC'\nassert solution('''19931568 1000000 6''') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\nimport sys\nsys.stdin = open('test.txt', 'r')\nprint(solution(input()))\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100000000 10001 5\") == \"AC\"\nassert solution(\"100000000 500 3\") == \"TLE\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('100000000 10000 5\\n') == 'AC'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\"\"\"\n\nm, n, t = map(int, input().split())"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4') == '0 0 0 0\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\\n\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\\n\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\\n\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\\n\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4\\n\") == \"0 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\\n\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0''') == '4 0 0 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\n\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2''') == '0 0 0 4\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\n\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3''') == '2 0 0 0\\n4 16 0 0\\n8 32 0 0\\n0 0 0 4'\n\nassert solution('''0 0 0 0\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2''') == '4 16 8 2\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0'\n\nassert solution('''0 0 0 0\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3''') == '4 16 8 2\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0'"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 4 0\\n4 0 4 0\\n8 16 16 16\\n32 16 16 32\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 4 0\\n4 0 4 0\\n8 16 16 16\\n32 16 16 32\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\n\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\n\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '0 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n=============================\n1. Initialise the grid.\n2. Initialise the variables to store the number of cells containing number 2 and the total number of cells containing number 2.\n3. Traverse the input and fill the grid.\n4. If a key was pressed to move the tiles left, then we need to move the tiles in the same row to the left. \n   If the key was pressed to move the tiles down, then we need to move the tiles in the same column to the left.\n   If the key was pressed to move the tiles right, then we need to move the tiles in the same row to the right. \n   If the key was pressed to move the tiles up, then we need to move the tiles in the same column to the right.\n5. We need to merge the cells in the same row.\n6. We need to merge the cells in the same column.\n7. We need to merge the cells in the same box.\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n0\n''') == '''2 0 0 0\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n'''\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n1\n''') == '''0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n'''\nassert solution('''2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\n''') == '''0 0 0 0\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n'''\nprint('All cases passed')\n\"\"\"\n\nimport sys\nimport math\nimport itertools"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n0 0 2048 64\"\n\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n8 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"0 0 0 0\\n8 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\n\"\"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"C2H6 10\") == '0'\nassert solution(\"C6H6OCH2O 10\") == '6'\nassert solution(\"CH3OH 1\") == '1'\nassert solution(\"C6H14 10\") == '12'\nassert solution(\"C5H10\") == '0'\n\nprint('The local tests are done. Click on \"Check\" for more details.')\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H 2\") == 0\nassert solution(\"O\") == 0\nassert solution(\"H2O\") == 0\nassert solution(\"C2H6 10\") == 6\nassert solution(\"C3H8\") == 6\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H2O 10\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H2O 10\") == \"0\"\nassert solution(\"H2O 10\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"C2H6 10\"\n    \"O\"\n) == \"0\"\nassert solution(\n    \"CH3OH 1\"\n    \"CH4\"\n) == \"1\"\nassert solution(\n    \"C6H6OCH2O 10\"\n    \"HCN\"\n) == \"0\"\nassert solution(\n    \"C6H14 10\"\n    \"C5H10\"\n) == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == output\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('C2H6 10') == '6'\nassert solution('C3H8') == '0'\nassert solution('CH3OH 1') == '1'\nassert solution('C6H6OCH2O 10') == '12'\nassert solution('C6H14 10') == '0'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H2O 10\") == \"0\"\nassert solution(\"CH4 10\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C2H4 10\") == \"2\"\nassert solution(\"C10H4O10 10\") == \"0\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H2O') == '0'\nassert solution('C6H6OCH2O 10') == '6'\nassert solution('C6H14 10') == '12'\n\"\"\"\n\nimport string\nimport re\nfrom collections import Counter"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[ { { () () () } ]\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"[ { [[()]] (({})) } ] ( ) {\") == \"]\"\nassert solution(\"()\") == \"ok so far\"\nassert solution(\"\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('([] [] ]') == ']'\nassert solution('[ { { () () () () } } ] () {}') == 'ok so far'\n\nsolution(\"\"\"\n13\n(([] [[]] ())\n\"\"\")\n\n\"\"\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[ { { () () () () } ]\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"[ { [[()]] (({})) } ]\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"([] [] ]\") == ']'\nassert solution(\"(([] [[]] ())\") == 'ok so far'\nassert solution(\"[ { { () () () () } ]\") == ']'\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == 'ok so far'\nassert solution(\"(1 1)\") == ')'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"([] [] ]\") == \"[7]\", \"Wrong result for ([[] []]])\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\", \"Wrong result for (([[] [[]] ()]])\"\nassert solution(\"[ { { () () () () } ]\") == \"] 20\", \"Wrong result for [ { { () () () () } ]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\", \"Wrong result for [ { [[()]] (({})) } ] () {}\"\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () () } } ]\") == \"]\"\nassert solution(\"[ { ((())) } ] () {}\") == \"ok so far\"\nassert solution(\"[ { ((())) } ] ( ( ) )\") == \"]\"\nassert solution(\"[ { ((())) } ] ( { ) ( } )\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[ { { () () () } } ] () {}\") == \"[\"\nassert solution(\"([] [] )\") == \"]\"\nassert solution(\"()\") == \"ok so far\"\nassert solution(\"( )\") == \"ok so far\"\nassert solution(\"( [ ] )\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n([] [] ]\") == \"]\"\nassert solution(\"13\\n(([] [[]] ())\") == \"ok so far\"\nassert solution(\"21\\n[ { { () () () () } ]\") == \"]\"\nassert solution(\"27\\n[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"1\\n([] [])\") == \"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { ((())) } ] () {}\") == \"ok so far\"\nassert solution(\"[ { { (() ) } } ] () {}\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8\n([] [] ]\n''') == '] 7'\nassert solution('''13\n(([] [[]] ())\n''') == 'ok so far'\nassert solution('''21\n[ { { () () () () } ]\n''') == '] 20'\nassert solution('''27\n[ { [[()]] (({})) } ] () {}\n''') == 'ok so far'\nassert solution('''23\n[ { (())) [] } ] () {}\n''') == '] 19'"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\n\nprint(solution(input().strip()))\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\neat') == 'Player 2 lost'\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\nassert solution('3\\napple\\next\\napple\\n') == 'Player 1 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle\n\n''') == 'Fair Game'\n\nassert solution('''3\napple\nextra\napple\n\n''') == 'Player 1 lost'\n\nassert solution('''2\napple\nneat\n\n''') == 'Player 2 lost'\n\nprint('Success')\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\napple\near\nreal\nletters\nstyle\n''') == 'Fair Game'\nassert solution('''3\napple\nextra\napple\n''') == 'Player 1 lost'\nassert solution('''2\napple\nneat\napple\n''') == 'Player 2 lost'\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Fair Game'\nassert solution('apple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\nassert solution('apple\\nextra\\napple\\n') == 'Player 2 lost'\nassert solution('apple\\nneat\\napple\\n') == 'Player 1 lost'\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\"\"\") == \"Player 2 lost\"\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nexra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n\"\"\"\nimport sys"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 * 100\") == \"100000000\"\nassert solution(\"10+100\") == \"110\"\nassert solution(\"10*100\") == \"1000\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000*100\") == \"100000\"\nassert solution(\"10+100\") == \"110\"\nassert solution(\"1000+100\") == \"1010\"\nassert solution(\"10000+100\") == \"11010\"\nassert solution(\"10+10+10+10\") == \"110+110+110+110\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 * 100') == '10000'\nassert solution('10 + 1000') == '1010'\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000*100\") == \"10000\"\nassert solution(\"100+1000\") == \"10100\"\nassert solution(\"10+1000\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 * 100\") == \"100000\"\nassert solution(\"10000 + 10\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000*100\") == \"100000\"\nassert solution(\"10000+10\") == \"1010\"\n\"\"\"\n\nimport io\nimport sys\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\"\n\nfrom utils.number import create_number\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '10010'\nassert solution('10\\n+\\n1000') == '1010'\n\"\"\"\n\nimport sys\n\nA = int(sys.stdin.readline())\noperator = sys.stdin.readline()[0]\nB = int(sys.stdin.readline())"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\nimport sys"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n\nfrom collections import deque\n\nclass Card:\n    def __init__(self, val, suit):\n        self.val = val\n        self.suit = suit\n\n    def __repr__(self):\n        return f\"{self.val} of {self.suit}\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\nassert solution(\"52 in\") == \"8\"\n\nSample Input 1:\n8\nSample Output 1:\n3\nSample Input 2:\n4\nSample Output 2:\n2\nSample Input 3:\n5\nSample Output 3:\n3\nSample Input 4:\n1\nSample Output 4:\n0\nSample Input 5:\n2\nSample Output 5:\n2\nSample Input 6:\n6\nSample Output 6:\n3\nSample Input 7:\n5\nSample Output 7:\n3\nSample Input 8:\n7\nSample Output 8:\n4\nSample Input 9:\n11\nSample Output 9:\n6\nSample Input 10:\n19\nSample Output 10:\n8\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\nassert solution('mumu mau') =='mumumau'\n\nprint(\"All tests passed.\")\n'''"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"blabber mop\") == \"blabbermop\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'\nassert solution('zapata os') == 'zapataoexos'\nassert solution('menolaxios toxes') =='menolaxiosextoxes'\n\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"paixanaxio\") == \"paixanaxioxanax\"\nassert solution(\"starchs\") == \"starchsexanax\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\nprint('All tests passed.')\n\n-----Solution-----\n\"\"\"\n\ny = int(input())"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\nprint('Passed')\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2020) == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\n\"\"\"\n\nfrom collections import Counter\nimport itertools"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"\n\nfrom math import factorial\n\nstdin = input()\nK = int(input())\nnums = list(map(int, stdin.split()))\n\nways = 0\n\nfor i in range(K):\n    cnt = 0\n    for j in range(K):\n        if nums[i] > nums[j]:\n            cnt += 1\n    if cnt == K - i:\n        ways += factorial(K) // (factorial(i) * factorial(K - i - 1))\n\nprint(ways)\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nprint(\"Successfully passed all test cases!\")\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\nassert solution('1 2 3 4 5') == '1'\n\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999\\n') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999\\n') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999\\n') == '0 0'\n\n\"\"\"\nimport sys\nimport math\nimport numpy as np"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\nassert solution(\"5 0\\n3 4 5 2 1\") == \"3 0\"\nassert solution(\"3 0\\n3 4 5 2 1\") == \"2 9\"\n\"\"\"\n\n\nimport math\n\nfrom tools import timing\n\nn, p = input().split()\nn, p = int(n), int(p)\n\nt = input().split()\nt = [int(i) for i in t]"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n-----Problem Description-----\nWe have a time-honored contest, ACM ICPC (Association for Computing Machinery International Collegiate Programming Contest) sponsored by Kattis, where a team of three students receives a problem set. The problems have variable difficulty levels and only one single computer per team is allowed to solve the problems. This contest is also known as ICPC SG (International Collegiate Programming Contest Season).\n\nThis contest also has its own rule: On the $p$th problem, the first team that solves this problem will be awarded a special prize, which is called \u201cFirst to Solve Problem \u2018A\u2019+...\u2018A\u2019$+(N-1)$\u201d.\n\nThis contest will be held for the ICPC Regional Contest 15 (ICPC RCON 15) by Kattis. As a result, you should take into consideration the following:\n\nThe problem set has at least 3 problems\nEach problem has difficulty levels\nAt least one team is awarded the prize \"First to Solve Problem \u2018A\u2019+...\u2018A\u2019$+(N-1)$\"\nThe set of problems cannot contain the same problem more than once\nThe problems have not been given in an order\nYou should assume that a team cannot solve a problem more than once.\nEach problem has a unique difficulty level\nThe contest duration is 300 minutes\nThe prizes are different for each problem\nThe problem set consists of exactly $N$ problems\n\nYour team is expected to use a contest strategy that is in some sense optimal. Please describe the contest strategy that you will use in the following format:\n\n\u201cYour team will solve the problem id A first, and then they will solve the problem id B second.\u201d\nThe last line of input will be the value of $N$ and $p$.\n\nThe first line of output should contain the number of accepted problems.\nThe second line should contain the lowest total penalty minutes.\n\n-----Constraints-----\n$0 \\leq N \\leq 13$\n$0 \\leq p \\leq N-1$\n$1 \\leq A[i] \\leq 999$\n$0 < B[i] < 3000$\n\n-----Sample Input-----\n6 2\n30 270 995 996 997 998 999\n\n-----Sample Output-----\n2 330\n\n-----Explanation-----\nSample input is shown in above sample input.\nThe problem set contains $6$ problems, which are ordered as\n\nProblem ID: A\nDifficulty level: 30\nPenalty minutes: 270\n\nProblem ID: B\nDifficulty level: 995\nPenalty minutes: 996\n\nProblem ID: C\nDifficulty level: 997\nPenalty minutes: 998\n\nProblem ID: D\nDifficulty level: 999\nPenalty minutes: 1000\n\nThe first team to solve the problem A first, and then they will solve the problem B second.\nThis is a valid contest strategy and the lowest total penalty minutes is 330 minutes.\n\n\"\"\"\n\nn,p = map(int, input().split())\ntime = 0\npen = 0\nproblems = [int(x) for x in input().split()]\nA = 0\ncount = 0\nfor i in range(len(problems)):\n    time += 1\n    if problems[i]>p:\n        pen += p\n        A += 1\n        if time>300:\n            break\n        p = 0\n        count += 1\n    else:\n        pen += problems[i]\n        if time>300:\n            break\n        p = problems[i]\nprint(count, pen)"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"sample_input_1.txt\").read()) == \"2 330\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\nprint('test passed')\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nprint(solution(INPUT))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\") == \"2 570\"\nassert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\n\"\"\"\n\nfrom typing import List\n\nN, p = [int(i) for i in input().split()]\nlines: List[int] = [int(i) for i in input().split()]\nmax_minutes: int = 300\n\nmin_penalty_time: int = 0\nbest_solution: List[int] = []"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaabbaabba\") == 2, 'WA :('\nassert solution(\"aaaaaaaa\") == 1, 'WA :('\nassert solution(\"abcdef\") == 6, 'WA :('\n\nprint('PASS')\n\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(None) is None\nassert solution(\"a\") == 1\nassert solution(\"aba\") == 2\nassert solution(\"abab\") == 2\nassert solution(\"aaaaaaaaa\") == 1\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"abca\") == 2\nassert solution(\"abcdef\") == 6\n\nprint(\"All test cases passed.\")\n\n-----\n\nThe solution is to solve the following:\n\nFind the period of the string, which is the smallest integer k such that k-periodic string of length n = n\nFind the period of the length-k string, which is the smallest integer k such that k-periodic string of length n = n / k\n\nOnce the period of the length-k string is found, the length of the string (m) must also be a multiple of the period (n / k)\n\nFor example, with n = 10, m = 100, and k = 5, the length of the length-k string is 10 / 5 = 2, and it is also a multiple of 10 / 5 = 2.\n\nIn this case, n = 10 and k = 5 is the smallest k such that k-periodic string of length n = n.\n\nIf k is not a multiple of m, then there is a remainder r. For example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, but it is not a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is not the smallest k such that k-periodic string of length n = n.\n\nWrite code to compute the period of the length-k string. If the period of the length-k string is not found, return the string \"No solution\".\n\nIf the string is a multiple of the period, then write the remainder r as the smallest non-negative integer such that (n / k) * k = n % k = r.\n\nIf the string is not a multiple of the period, then write \"No solution\".\n\nFor example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, and it is also a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is the smallest k such that k-periodic string of length n = n.\n\nIf k is not a multiple of m, then there is a remainder r. For example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, but it is not a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is not the smallest k such that k-periodic string of length n = n.\n\nWrite code to compute the period of the length-k string. If the period of the length-k string is not found, return the string \"No solution\".\n\nIf the string is a multiple of the period, then write the remainder r as the smallest non-negative integer such that (n / k) * k = n % k = r.\n\nIf the string is not a multiple of the period, then write \"No solution\".\n\nFor example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, and it is also a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is the smallest k such that k-periodic string of length n = n.\n\nIf k is not a multiple of m, then there is a remainder r. For example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, but it is not a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is not the smallest k such that k-periodic string of length n = n.\n\nWrite code to compute the period of the length-k string. If the period of the length-k string is not found, return the string \"No solution\".\n\nIf the string is a multiple of the period, then write the remainder r as the smallest non-negative integer such that (n / k) * k = n % k = r.\n\nIf the string is not a multiple of the period, then write \"No solution\".\n\nFor example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, and it is also a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is the smallest k such that k-periodic string of length n = n.\n\nIf k is not a multiple of m, then there is a remainder r. For example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, but it is not a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is not the smallest k such that k-periodic string of length n = n.\n\nWrite code to compute the period of the length-k string. If the period of the length-k string is not found, return the string \"No solution\".\n\nIf the string is a multiple of the period, then write the remainder r as the smallest non-negative integer such that (n / k) * k = n % k = r.\n\nIf the string is not a multiple of the period, then write \"No solution\".\n\nFor example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, and it is also a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is the smallest k such that k-periodic string of length n = n.\n\nIf k is not a multiple of m, then there is a remainder r. For example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, but it is not a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is not the smallest k such that k-periodic string of length n = n.\n\nWrite code to compute the period of the length-k string. If the period of the length-k string is not found, return the string \"No solution\".\n\nIf the string is a multiple of the period, then write the remainder r as the smallest non-negative integer such that (n / k) * k = n % k = r.\n\nIf the string is not a multiple of the period, then write \"No solution\".\n\nFor example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, and it is also a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is the smallest k such that k-periodic string of length n = n.\n\nIf k is not a multiple of m, then there is a remainder r. For example, with n = 10 and k = 3, the length of the length-k string is 10 / 3 = 3, but it is not a multiple of 10 / 3 = 3. Therefore, r = 10 % 3 = 1.\n\nIn this case, n = 10 and k = 3 is not the smallest k such that k-"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaabbaabba\") == 2\nassert solution(\"aaaaaaaa\") == 1\nassert solution(\"abcdef\") == 6\nassert solution(\"aa\") == 2\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\nprint('Passed')"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\nprint(\"PASSED\")\n\n-----Solution-----\n\nimport re"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\nassert solution(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\") == 10\nassert solution(\"ababababababab\") == 4\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2\\n'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n') == '1\\n1\\n'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30\\n') == '0\\n1\\n'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n'''\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\n\"\"\"\n\nM, N = map(int, stdin.readline().split())\nT = list(map(int, stdin.readline().split()))\nX = list(map(int, stdin.readline().split()))\n\ndelta = T[-1] - T[0]\ndist = [X[i + 1] - X[i] for i in range(N - 1)]\n\nans = set()"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\n\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\n\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == '2\\n1 2'\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == '1\\n1'\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == '0\\n1'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\nprint(\"Successfully tested.\")\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\\n\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\\n\"\n\"\"\"\n\nM, N = map(int, stdin.readline().split())\nstones = list(map(int, stdin.readline().split()))\nstones.sort()\n\ndist = [x * 2 for x in range(1, N - 1)]\ndist.sort()\n\nresult = [stones[0]]\nfor i in dist:\n    if i >= stones[len(stones) - 1]:\n        result.append(stones[len(stones) - 1])\n    else:\n        result.append(stones[stones.index(i) + 1])\n\nprint(len(result))\nprint(' '.join(map(str, result)))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\n''') == '2\\n1 2'\nassert solution('''5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\n''') == '1\\n1'\nassert solution('''3 6\n1 2 4\n11 12 15 19 24 30\n''') == '0\\n1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n3\\n4') == ''\nassert solution('2\\n1') == ''\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5551212''') == '1'\nassert solution('''5551212''') == '1'\nassert solution('''5551212''') == '1'\nassert solution('''5551212''') == '1'\nassert solution('''5551212''') == '1'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\nprint('Hooray!')\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\nassert solution('5551212') == '1'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"32/17\") == \"0/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n\nimport sys\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\nC E G\\nD F# A') == \"Transposition\"\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == \"Inversion\"\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == \"Retrograde\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\nassert solution('3\\nD C E G\\nC D E G') == 'Nonsense'\nassert solution('3\\nD F# A\\nA D F#') == 'Nonsense'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Transposition'"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Transposition\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Inversion\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\nfrom enum import Enum\n\nclass C(Enum):\n    A = \"A\"\n    B = \"B\"\n    C = \"C\"\n    D = \"D\"\n    E = \"E\"\n    F = \"F\"\n    G = \"G\"\n    H = \"H\"\n    I = \"I\"\n    J = \"J\"\n    K = \"K\"\n    L = \"L\"\n    M = \"M\"\n    N = \"N\"\n    O = \"O\"\n    P = \"P\"\n    Q = \"Q\"\n    R = \"R\"\n    S = \"S\"\n    T = \"T\"\n    U = \"U\"\n    V = \"V\"\n    W = \"W\"\n    X = \"X\"\n    Y = \"Y\"\n    Z = \"Z\"\n\nC_MAP = {\n    \"A\": C.A,\n    \"B\": C.B,\n    \"C\": C.C,\n    \"D\": C.D,\n    \"E\": C.E,\n    \"F\": C.F,\n    \"G\": C.G,\n    \"H\": C.H,\n    \"I\": C.I,\n    \"J\": C.J,\n    \"K\": C.K,\n    \"L\": C.L,\n    \"M\": C.M,\n    \"N\": C.N,\n    \"O\": C.O,\n    \"P\": C.P,\n    \"Q\": C.Q,\n    \"R\": C.R,\n    \"S\": C.S,\n    \"T\": C.T,\n    \"U\": C.U,\n    \"V\": C.V,\n    \"W\": C.W,\n    \"X\": C.X,\n    \"Y\": C.Y,\n    \"Z\": C.Z,\n}"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nprint(\"The strings above should be \\\"Gah kove bababa\\\", \\\"Catacillar\\\", and \\\"Cociccah gs the bestuh\\\".\")\n\"\"\""
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\nassert solution(\"I hate bo-na-na\") == \"Go-bo oo-bo-bo\"\n\nSample Case 2\nI love b-a-n-a\nThe function should return \"Gah kove bababa\"\n\nSample Case 3\nI love bo-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 4\nI like bo-n-a\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 5\nI love ba-n-a\nThe function should return \"Gah kove bababa\"\n\nSample Case 6\nI like bo-n-a\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 7\nI love ba-na-na\nThe function should return \"Gah kove bababa\"\n\nSample Case 8\nI love ba-na-na\nThe function should return \"Gah kove bababa\"\n\nSample Case 9\nI love ba-na-na\nThe function should return \"Gah kove bababa\"\n\nSample Case 10\nI love ba-na-na\nThe function should return \"Gah kove bababa\"\n\nSample Case 11\nI love ba-na-na\nThe function should return \"Gah kove bababa\"\n\nSample Case 12\nI like ba-n-a\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 13\nI like ba-n-a\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 14\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 15\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 16\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 17\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 18\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 19\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 20\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 21\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 22\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 23\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 24\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 25\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 26\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 27\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 28\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 29\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 30\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 31\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 32\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 33\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 34\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 35\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 36\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 37\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 38\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 39\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 40\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 41\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 42\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 43\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 44\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 45\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 46\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 47\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 48\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 49\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 50\nI like ba-na-na\nThe function should return \"Go-bo oo-bo-bo\"\n\nSample Case 51"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nfrom string import ascii_lowercase"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'I love ba-na-na'\n) == 'Gah kove bababa'\nassert solution(\n    'Cat-a-pil-lar'\n) == 'Catacillar'\nassert solution(\n    'Co-ding is the best'\n) == 'Cociccah gs the bestuh'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nfrom typing import Dict\nimport re\n\nCONSONANTS = {\n    \"b\": \"A\",\n    \"c\": \"A\",\n    \"d\": \"A\",\n    \"g\": \"A\",\n    \"k\": \"A\",\n    \"n\": \"A\",\n    \"p\": \"A\",\n    \"t\": \"A\",\n    \"B\": \"A\",\n    \"C\": \"A\",\n    \"D\": \"A\",\n    \"G\": \"A\",\n    \"K\": \"A\",\n    \"N\": \"A\",\n    \"P\": \"A\",\n    \"T\": \"A\",\n    \"b\": \"A\",\n    \"c\": \"A\",\n    \"d\": \"A\",\n    \"g\": \"A\",\n    \"k\": \"A\",\n    \"n\": \"A\",\n    \"p\": \"A\",\n    \"t\": \"A\",\n}\n\nVOWELS = {\n    \"a\": \"a\",\n    \"e\": \"o\",\n    \"i\": \"u\",\n    \"o\": \"o\",\n    \"u\": \"u\",\n    \"a\": \"A\",\n    \"e\": \"A\",\n    \"i\": \"U\",\n    \"o\": \"A\",\n    \"u\": \"U\",\n}"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\nprint('test passed')\n\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"14\"\nprint(solution(\"4\"))"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nimport sys\nfrom math import ceil\n\nsys.stdin = open(\"fidget_cubes.in\", \"r\")\nsys.stdout = open(\"fidget_cubes.out\", \"w\")\n\nt = int(input())\n\nfor _ in range(t):\n    v = int(input())\n    \n    x = ceil(v ** (1/3))\n    y = ceil(v ** (1/3))\n    z = ceil(v ** (1/3))\n    \n    total = x*y*z\n    \n    print(total)"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nn = int(input())\n\ns = n * (n+1) // 2\n\nprint(s)\n\n\"\"\"\nIt is not gonna be that easy...\n\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '16'\nassert solution('3') == '14'\nassert solution('4') == '16'\nassert solution('5') == '26'\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"16\"\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 6\nassert solution('4') == 16\nassert solution('3') == 14\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nprint(solution(''))"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\") == \"4\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n\nprint('Success')\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n//  Halloween Candy Store\n\n//  You're a candy store owner for a Halloween candy store. You have one candy bar with N chocolates in it and you have N boxes of Halloween candy, each box having K chocolates. You have a customer, who asks you for the maximum number of candy bars he can buy with a single box of Halloween candy. You decide that he must buy either one candy bar with K chocolates or K+1 chocolates. Help him to find the maximum number of candy bars he can buy.\n\nInput Format\n\nFirst line contains T, the number of test cases.\n\nEach of the next T lines contains three space-separated integers, :,, and, respectively.\n\nConstraints\n\n1 \u2264 T \u2264 1000\n\n1 \u2264 N, K \u2264 104\n\nOutput Format\n\nFor each test case, output a single line containing one integer \u2015 the maximum number of bars the customer can buy with a single box of Halloween candy.\n\nSample Input 0\n\n3\n5 1\n6 2\n10 10\nSample Output 0\n\n2\n4\n20\nExplanation 0\n\nCase 1:  Suppose the customer buys one of our candy bars with 5 chocolates. Then he can buy the second bar for 1 candy.\n\nCase 2:  Suppose the customer buys one of our candy bars with 6 chocolates. Then he can buy the second bar for 2 candy.\n\nCase 3:  Suppose the customer buys one of our candy bars with 10 chocolates. Then he can buy the second bar for 10 candy, and also the third bar for 10 candy.\n\nSample Input 1\n\n3\n6 2\n10 10\n20 30\nSample Output 1\n\n3\n4\n30\nExplanation 1\n\nCase 1:  Suppose the customer buys one of our candy bars with 6 chocolates. Then he can buy the second bar for 2 candy.\n\nCase 2:  Suppose the customer buys one of our candy bars with 10 chocolates. Then he can buy the second bar for 10 candy, and also the third bar for 10 candy.\n\nCase 3:  Suppose the customer buys one of our candy bars with 20 chocolates. Then he can buy the second bar for 30 candy.\n\nSample Input 2\n\n3\n7 7\n10 10\n20 30\nSample Output 2\n\n4\n5\n40\nExplanation 2\n\nCase 1:  Suppose the customer buys one of our candy bars with 7 chocolates. Then he can buy the second bar for 7 candy.\n\nCase 2:  Suppose the customer buys one of our candy bars with 10 chocolates. Then he can buy the second bar for 10 candy, and also the third bar for 10 candy.\n\nCase 3:  Suppose the customer buys one of our candy bars with 20 chocolates. Then he can buy the second bar for 20 candy.\n\nSample Input 3\n\n1\n5 1\nSample Output 3\n\n2\nExplanation 3\n\nCase 1:  Suppose the customer buys one of our candy bars with 5 chocolates. Then he can buy the second bar for 1 candy.\n\nCase 2:  Suppose the customer buys one of our candy bars with 5 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 4\n\n1\n1 1\nSample Output 4\n\n1\nExplanation 4\n\nCase 1:  Suppose the customer buys one of our candy bars with 1 chocolates. Then he can buy the second bar for 1 candy.\n\nCase 2:  Suppose the customer buys one of our candy bars with 1 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 5\n\n1\n100 1\nSample Output 5\n\n100\nExplanation 5\n\nCase 1:  Suppose the customer buys one of our candy bars with 100 chocolates. Then he can buy the second bar for 1 candy.\n\nSample Input 6\n\n1\n101 1\nSample Output 6\n\n101\nExplanation 6\n\nCase 1:  Suppose the customer buys one of our candy bars with 101 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 7\n\n1\n10 1\nSample Output 7\n\n10\nExplanation 7\n\nCase 1:  Suppose the customer buys one of our candy bars with 10 chocolates. Then he can buy the second bar for 1 candy.\n\nCase 2:  Suppose the customer buys one of our candy bars with 10 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 8\n\n1\n1000 1\nSample Output 8\n\n1000\nExplanation 8\n\nCase 1:  Suppose the customer buys one of our candy bars with 1000 chocolates. Then he can buy the second bar for 1 candy.\n\nSample Input 9\n\n1\n10 100\nSample Output 9\n\n10\nExplanation 9\n\nCase 1:  Suppose the customer buys one of our candy bars with 10 chocolates. Then he can buy the second bar for 1 candy.\n\nCase 2:  Suppose the customer buys one of our candy bars with 100 chocolates. Then he can buy the second bar for 10 candy.\n\nSample Input 10\n\n1\n101 101\nSample Output 10\n\n101\nExplanation 10\n\nCase 1:  Suppose the customer buys one of our candy bars with 101 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 11\n\n1\n1 1\nSample Output 11\n\n1\nExplanation 11\n\nCase 1:  Suppose the customer buys one of our candy bars with 1 chocolates. Then he can buy the second bar for 1 candy.\n\nSample Input 12\n\n1\n1 1\nSample Output 12\n\n2\nExplanation 12\n\nCase 1:  Suppose the customer buys one of our candy bars with 1 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 13\n\n1\n101 1\nSample Output 13\n\n101\nExplanation 13\n\nCase 1:  Suppose the customer buys one of our candy bars with 101 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 14\n\n1\n101 101\nSample Output 14\n\n102\nExplanation 14\n\nCase 1:  Suppose the customer buys one of our candy bars with 101 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 15\n\n1\n101 1\nSample Output 15\n\n101\nExplanation 15\n\nCase 1:  Suppose the customer buys one of our candy bars with 101 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 16\n\n1\n101 101\nSample Output 16\n\n102\nExplanation 16\n\nCase 1:  Suppose the customer buys one of our candy bars with 101 chocolates. Then he can buy the second bar for 2 candy.\n\nSample Input 17\n\n1\n101 101\nSample Output 17\n\n102"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\nassert solution(\"5 10\\n1 2 3 4 5\\n\") == \"0\"\n\nprint(\"Successfully passed!\")\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 10\\n4 8 1 9 7') == '2'\nprint('Test success.')\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n1 3 1 7\") == \"4\"\nassert solution(\"5 10\\n1 3 1 7\") == \"2\"\nassert solution(\"5 10\\n4 8 1 9 7\") == \"2\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == 3\nassert solution('5 10\\n4 8 1 9 7\\n') == 2\nassert solution('4 10\\n1 3 1 7\\n') == 4\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"impossible\"\n\"\"\"\n\nfrom collections import namedtuple\n\nN, M = map(int, input().split())\nStations = namedtuple('Stations', ('capacity', 'occupied', 'waiting'))\n\nfor _ in range(N):\n    capacity, occupied, waiting = map(int, input().split())\n    Stations(capacity, occupied, waiting)"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0\\n') == 'impossible'\nassert solution('1 2\\n1 0 0\\n0 1 1\\n') == 'impossible'\nassert solution('2 3\\n1 0 0\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('2 3\\n0 0 1\\n0 0 1\\n0 0 1\\n') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(inputs.get(1)) == 'possible'\nassert solution(inputs.get(2)) == 'impossible'\n\"\"\"\n\n\n\nfrom collections import deque\nfrom copy import deepcopy\n\ninputs = [\n    (1, 2, [0, 1, 1]),\n    (1, 2, [1, 0, 0]),\n    (1, 2, [1, 0, 1]),\n]"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0\\n') == 'impossible'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 0 0\\n0 1 0') == 'possible'\nassert solution('1 2\\n1 0 1\\n0 0 0') == 'impossible'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n0 1 0\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 2\n0 1 1\n1 0 0''') == 'possible'\nassert solution('''1 2\n0 1 1\n1 0 0''') == 'impossible'\n'''\n'''\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\n''') == '1.875'\nprint(solution(stdin) == '1.875')\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1.875'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.8333'\nassert solution('6 2') == '4.25'\n\nprint('Success')\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n--Problem 1: An Easy Factorial Problem\n\nfactorial(n)\n------------------------\nfactorial(n) = n!\n------------------------\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\nprint(solution(\"1 1\"))\nprint(solution(\"2 3\"))\nprint(solution(\"6 2\"))"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n\n\n\nimport sys\nimport re\nimport math"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n\nh, n, m = map(int, input().split())"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 1 0''') == '0 0'\nassert solution('''4 2 7''') == '1 4'\nassert solution('''3 0 0''') == '1 6'\n'''\n\n'''\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 7\\n') == '1 4'\n\"\"\"\n\na, b, c = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 1 0''') == '0 0'\nassert solution('''4 2 7''') == '1 4'\nassert solution('''3 0 0''') == '1 6'\n'''\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\nprint(solution(\"1 1 0\\n\"))"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3''') == '0 1'\nassert solution('''1\n2\n3\n4\n5\n6\n7''') == '0 4'\n\n-----Problem-----\nA pyramidal brick is a brick that is a pyramid. The first layer has height $1$, the second layer has height $2$, and so on. In other words, the $i$-th layer has height $i$.\n\nYou have $N$ bricks, each with height $2i$, so you can build a pyramid using $N$ bricks. You want to build a pyramid using the minimum number of bricks.\n\nFor example, if you have $4$ bricks of height $2$, you can build a pyramid with height $\\text{max}(0, 2, 2, 2) = 2$, since you can combine three of the bricks. However, if you have $4$ bricks of height $1$, you can't build a pyramid because you don't have a $3$-bricks to combine.\n\nGiven three integers $0 \\leq H_1 \\leq H_2 \\leq H_3 \\leq 1000$, $0 \\leq N \\leq 10^6$, and $0 \\leq M \\leq 10^6$, return the minimum possible number of bricks you must use to build a pyramid with height $\\text{max}(0, H_1, H_2, H_3)$.\n\n-----Constraints-----\n$1 \\leq H_i \\leq 1000$ for $1 \\leq i \\leq 3$.\n$0 \\leq N, M \\leq 10^6$\n\n-----Test Case-----\nSample Input 1:\n1 1 0\nSample Output 1:\n0 0\n\nSample Input 2:\n4 2 7\nSample Output 2:\n1 4\n\nSample Input 3:\n3 0 0\nSample Output 3:\n1 6\n'''\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n') == '1'\n\nassert solution('4\\nBWWB\\nWBWB\\nWBBW\\nBWBW\\n') == '0'\n\nassert solution('6\\nBWWBB\\nWBWBW\\nWBBWW\\nBBWBW\\nWBBWW\\nWWBWW\\n') == '0'\n\nassert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n') == '0'\n\nassert solution('4\\nWBWB\\nBWWB\\nWBBW\\nBWBW\\n') == '1'"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"6\\nBWWB\\nBWBW\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBB\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WWWWWWWBBWBWWWWWWWWWWWBWWBWBWW\") == 1\nassert solution(\"WWWWWWWBBWBWWWWWWWWWWWBWWBWBWW\") == 0\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4\\nWBBW\\nWBWB\\nBWWB\\nBWBW'\n) == '1'\nassert solution(\n    '4\\nBWWB\\nBWBB\\nWBBW\\nWBWW'\n) == '0'\nassert solution(\n    '6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBW'\n) == '0'\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"4\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\n\") == \"0\"\nassert solution(\"6\\nBWWWWB\\nWBWWWB\\nWBBWWW\\nBBWWWB\\nWBBWWW\\nWWWWBB\\n\") == \"0\"\nassert solution(\"6\\nBWWWBB\\nWBWWWB\\nWBBWBB\\nBWWWBW\\nWWWWBB\\nBWWWBB\\n\") == \"0\"\nassert solution(\"6\\nWBBWBW\\nWBWBWW\\nBWWBWW\\nBWBWBB\\nWBBWBB\\nWWBBBW\\n\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nWBWB\\nBWWB\\nBWBW\\nWBBW') == '0'\nassert solution('6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW') == '0'\n\nprint('Success')"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BWBWBW\\nWBWBWB\\nWBBWBW\\nBBWBWB\\nBWWBWB\\nWWBWBB') == '1'\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n4\nWBBW\nWBWB\nBWWB\nBWBW\n''') == '1'\n\nassert solution('''\n4\nBWWB\nBWBB\nWBBW\nWBWW\n''') == '0'\n\nassert solution('''\n6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n''') == '0'\n\nimport io\nimport sys"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n2 4 1 3\") == \"3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 4 1\\n1 2 1 3\\n2 6 3 4\") == '3 1\\n3 4'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2 1 3 4\\n5 6 7 8\\n4 5 1 3\\n3 4 5 2') == '2 1\\n3 4'\nassert solution('1\\n2 1 3 4\\n5 6 7 8\\n4 5 1 3\\n3 4 5 2') == '3 2\\n3 7'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys\n\nsys.setrecursionlimit(2000)\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 2\") == \"3 4\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\"\"\") == \"\"\"2\n1\n3\n3\n1\"\"\"\n\n\nassert solution(\"\"\"5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\"\"\") == \"\"\"2\n3\n3\n1\n3\"\"\"\n\n\nassert solution(\"\"\"6\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\"\"\") == \"\"\"4\n3\n3\n1\n3\"\"\"\n\n\nassert solution(\"\"\"7\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n2 6 7 2\n1 2 1 3\n1 4 5 8\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1 1\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n1 2 1 2\n2 6 3 4\n2 4 1 3\n1 2 1 3\n1 4 5 8\n\"\"\") == \"\"\"2 1\n3 4\n3 2\n1 2\n3 7\"\"\"\nprint(\"Let's go!\")\n\n\"\"\"\n---\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([3, 2, 0, -4], 1) == True\nassert solution([1, 2], 0) == True\nassert solution([1], -1) == False\n\"\"\"\n\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        hash_map = set()\n        curr = head\n        while curr is not None:\n            if curr in hash_map:\n                return True\n            hash_map.add(curr)\n            curr = curr.next\n        return False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('[3,2,0,-4]', 1) == True\nassert solution('[1,2]', 0) == True\nassert solution('[1]', -1) == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1,2,3,4,5,6,7]') == 'true'\nassert solution('[1,2,3,4,5,6,7,8,9,10]') == 'true'\nassert solution('[1,2,3,4,5,6,7,8,9,10,6,7,8,9,10,6,7,8,9,10]') == 'true'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3,2,0,-4,2') == True\nassert solution('1,2') == True\nassert solution('1') == False\nassert solution('3,2,0,-4') == True\nassert solution('3,2,0,-4,2') == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1]') == 'true'\nassert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2,3]') == 'false'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\nassert solution(\"[1,2]\\n1\") == False\nassert solution(\"[1]\\n-1\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[3,2,0,-4]\", 1) == True\nassert solution(\"[1,2]\", 0) == True\nassert solution(\"[1]\", -1) == False\nassert solution(\"[]\", -1) == False\nassert solution(\"[3,2,0,-4]\", -1) == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == False\nassert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2]\") == True\nassert solution(\"[1]\") == False\n\n\"\"\"\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while slow!= fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n        return True\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4\") == \"0 1\"\nassert solution(\"1 2 3 4 5\") == \"1 2\"\nassert solution(\"1 2 3 4 5 6 7\") == \"3 4\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"3 4\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n7\\n11\\n15\\n9\") == \"0 1\"\n\nIn this example, because nums[0] + nums[1] = 2 + 7 = 9,\nwe return [0, 1].\n\nWrite your code here\nclass Solution:\n    def twoSum(self, nums, target):\n        if len(nums) <= 1:\n            return False\n        else:\n            for i in range(len(nums)):\n                for j in range(i+1,len(nums)):\n                    if nums[i] + nums[j] == target:\n                        return [i,j]\n            return False"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5\\n3\") == \"No\"\nassert solution(\"1\\n5\\n6\") == \"Yes\"\nassert solution(\"1\\n5\\n3\\n6\\n7\") == \"No\"\nassert solution(\"1\\n5\\n3\\n6\\n7\\n8\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\nassert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\nassert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\nassert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\nassert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\nassert solution(nums = [5, 25, 75], target = 100) == [1, 2]\nassert solution(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 55) == [4, 9]\nassert solution(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 45) == [7, 7]\nassert solution(nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15) == [2, 3]\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 7 11 15\") == \"0 1\"\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(0, [2, 7, 11, 15]) == [0, 1]\nassert solution(0, [3, 2, 4]) == [1, 2]\nassert solution(0, [3, 3]) == [0, 1]\n\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\n3') == '0\\n0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 7 11 15') == [0, 1]\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\nfrom typing import List, Tuple\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \"\"\"\n        >>> Solution().twoSum([2, 7, 11, 15], 9)\n        [0, 1]\n        \"\"\"\n        length = len(nums)\n        hash_table = {value: index for index, value in enumerate(nums)}\n        for index, value in enumerate(nums):\n            if target - value in hash_table and index!= hash_table[target - value]:\n                return [index, hash_table[target - value]]\n        return []\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == '0'\nassert solution(\"4\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\"\nassert solution(\"5\\n\") == \"1\"\nassert solution(\"6\\n\") == \"2\"\n\n'''\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\"\n\n\"\"\"\nsolution 2:\nWe can always define the vertices of a polygon as a plane with the origin of the polygon placed at the centroid of the polygon, and the diagonal from vertex $i$ to vertex $j$ being the line segment from vertex $i$ to vertex $j$ with the slope of the line as the ratio of the areas of the triangles created by the vertices $i$ and $j$ (the triangles in the polygon have equal areas). We can simply consider the intersection between the diagonals of two vertices and then sum the intersections. \n\nA polygon is convex if and only if there is a line passing through all the points in the polygon and passing through all the interior angles of the polygon. By finding the area of the polygon, we can easily get the area of the triangles making up the polygon. \n\nLet $A_i$ denote the area of the triangle with vertices $A_i$, $i = 1,\\ldots, n$. Let $f(n)$ denote the number of intersections between pairs of diagonals in a polygon with $n$ vertices. Then, we have $f(n) = \\sum_{i=1}^{n} \\sum_{j=1}^{n} A_i A_j A_j / (A_i + A_j)$, where $A_i$ denote the area of the triangles with vertices $A_i$\n\nBy using the formula given in the question, the number of intersections between pairs of diagonals can be calculated in linear time. Let $d_1$ and $d_2$ denote the diagonals of the polygon with vertices $d_1 = (x_1, y_1)$ and $d_2 = (x_2, y_2)$, respectively. The number of intersections between diagonals $d_1$ and $d_2$ is $d_1 \\cap d_2 = {(x_1, y_1),(x_2, y_2)}$ or equivalently $d_1 \\cap d_2 = (min(x_1, x_2), min(y_1, y_2))$.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"0\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"8\") == \"3\"\nassert solution(\"10\") == \"6\"\nassert solution(\"12\") == \"10\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1,1\\n2,2\\n3,3\\n4,4\\n') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '0'\n\"\"\"\nfrom __future__ import annotations\n\nimport math\n\nfrom collections import deque\n\nfrom dataclasses import dataclass\n\nfrom dataclasses_json import dataclass_json\n\n\n@dataclass_json\n@dataclass\nclass Point:\n    x: float\n    y: float\n\n    def __add__(self, other: Point) -> Point:\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: Point) -> Point:\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, scalar: float) -> Point:\n        return Point(self.x * scalar, self.y * scalar)\n\n    def __rmul__(self, scalar: float) -> Point:\n        return self.__mul__(scalar)\n\n    def __eq__(self, other: Point) -> bool:\n        return math.isclose(self.x, other.x) and math.isclose(self.y, other.y)\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n\n\n@dataclass_json\n@dataclass\nclass Line:\n    p1: Point\n    p2: Point\n\n    def __eq__(self, other: Line):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def __hash__(self):\n        return hash((self.p1, self.p2))\n\n\n@dataclass_json\n@dataclass\nclass Circle:\n    center: Point\n    radius: float\n\n    def __eq__(self, other: Circle):\n        return math.isclose(self.radius, other.radius) and self.center == other.center\n\n    def __hash__(self):\n        return hash((self.center, self.radius))\n\n\n@dataclass_json\n@dataclass\nclass Polygon:\n    vertices: list[Point]\n\n    def edges(self) -> list[Line]:\n        return [Line(self.vertices[i], self.vertices[i + 1]) for i in range(len(self.vertices) - 1)]\n\n    def diagonals(self) -> list[Line]:\n        return [Line(self.vertices[i], self.vertices[i + 1]) for i in range(len(self.vertices) - 1)] + [\n            Line(self.vertices[i], self.vertices[0]) for i in range(1, len(self.vertices))]\n\n    def intersections(self) -> int:\n        queue = deque()\n        intersections = 0\n        for diagonal in self.diagonals():\n            queue.append(diagonal)\n            while len(queue) > 1:\n                first = queue.popleft()\n                second = queue.popleft()\n                if first.p1 == second.p1 or first.p1 == second.p2 or first.p2 == second.p1 or first.p2 == second.p2:\n                    continue\n                else:\n                    intersections += 1\n                    queue.append(first)\n                    queue.append(second)\n        return intersections\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 1\nassert solution('6') == 2\n\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"4\") == 1\n\"\"\"\n\nfrom math import sqrt, factorial\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"2\\n1 3 2 1\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n1 2 2 1''') == '4'\nassert solution('''1\n3 7''') == 'impossible'"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\nmoves = 0\na.sort()\n\nfor i in range(n):\n    if a[i] % 2 == 0:\n        moves += a[i] // 2\n    else:\n        moves += (a[i] + 1) // 2\n        \n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\n\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\na.sort()"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nsocks = [int(x) for x in stdin.readline().strip().split()]\n\ncount = 0\n\nfor i in range(len(socks)):\n    count += socks.count(i+1) * (len(socks) - socks.index(i+1))\n\nprint(count if count % 2 == 0 else \"impossible\")\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('2\\n3 7') == 'impossible'\n\"\"\"\n\nn = int(input())\nsocks = [int(x) for x in input().split()]\n\npairs = [socks[i:i+2] for i in range(0, len(socks)-1, 2)]\npairs.sort(key=lambda x: x[0])\n\npossible = True\n\nfor i in pairs:\n    if i[0] == i[1]:\n        print(pairs.index(i)//2)\n        possible = False\n        break"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1 2 2 3 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\n3 1 1 2\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3\n2 3 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n6\n1 2 1 2 3 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n2 3 1 2 4\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\n\"\"\"\n\nimport collections\nimport itertools\nimport sys\nfrom typing import Iterator, List, Sequence, Tuple\n\nclass _IInput:\n    def read(self) -> str:\n        return input()\n\n    def close(self):\n        pass\n\n    def is_open(self) -> bool:\n        return True\n\nclass _TestInput(_IInput):\n    def __init__(self, inputs: Sequence[str]):\n        self._inputs = inputs\n        self._input_iter = iter(self._inputs)\n\n    def read(self):\n        try:\n            return next(self._input_iter)\n        except StopIteration:\n            self.close()\n            raise StopIteration()\n\n    def close(self):\n        self._input_iter = iter(())\n\n    def is_open(self):\n        return bool(self._inputs)\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(123) == 123\nassert solution(1234) == 1234\nassert solution(123450995) == 123450000\nassert solution(123450995, 5) == 123450"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\n\"\"\"\n\nfrom typing import List, Any, Union\nfrom math import ceil\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '10'\nassert solution('3 0') == '10'\nassert solution('1 0') == '10'\nassert solution('2 2') == '100'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"184 1\") == 180\nassert solution(\"123450995 1\") == 123451000\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(123450995)) == str(123451000)\n\nfrom sys import stdin\n\namount, bills = int(stdin.readline()), {0: 1, 1: 10, 2: 100, 3: 1000}"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 3') == '0.500000'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\n'''\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 1') == '0'\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\nassert solution(\"3\\n3 3\\n2 2\\n1 1\") == \"0.000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1\\n1 0\\n1 1\\n') == '0.000000'\nassert solution('4\\n0 1\\n0 0\\n1 1\\n1 0\\n') == '0.414214'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n1 2\\n2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\"\"\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\n\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2\\n1 2 3 4\\n3 2 3 4\\n3 4 2 1\\n2 6 2\\n4 2 6 8 1\\n') == '1\\n2\\n6\\n8'"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1 2 4\"\n\"\"\"\nfrom collections import defaultdict\n\nn = int(input())\nE = int(input())\narr = list(map(int, input().split()))\nsongs = defaultdict(set)\nfor i in range(E):\n    for song in list(map(int, input().split())):\n        songs[song].add(i)\nfor i in range(1, n+1):\n    for song in songs:\n        if i in songs[song]:\n            songs[song].clear()\n    if songs:\n        print(i)\n        break\n    else:\n        songs.clear()\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\\n') == '1\\n2\\n6\\n8\\n\n'''\n\nimport sys"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('5 5 3') == '40'\nassert solution('7 7 6') == '49'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('2 3 2') == '8'\nassert solution('3 4 1') == '6'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '0'\nassert solution('1\\n') == '0'\nassert solution('3\\n') == '0'\nassert solution('3 1 2\\n') == '0'\nassert solution('2 3 1\\n') == '8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"5 5 5\") == \"55\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4 5''') == '60'\nassert solution('''2 2 2''') == '8'\nprint('Success')\n\nExplanation:\n\nIn Sample Case 1, there are 3 eye designs and 4 nose designs and 5 mouth designs. So, there are 60 different Jack-O\u2019-Lantern designs.\n\nIn Sample Case 2, there are 2 eye designs and 2 nose designs and 2 mouth designs. So, there are 8 unique Jack-O\u2019-Lantern designs.\n\nIn Sample Case 2, there are 2 eye designs and 2 nose designs and 2 mouth designs. So, there are 8 unique Jack-O\u2019-Lantern designs.\n\n-----Notes-----\nHint: Think about permutations and combinations.\n\"\"\"\n\nimport itertools\n\nN, T, M = map(int, input().split())\n\nfor e, n, m in itertools.permutations(range(1, N + 1), 3):\n    print(e * t * m)\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('1 1 1') == '0'\nassert solution('0 1 1') == '0'\nassert solution('3 2 2') == '8'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 2\") == '1.6666666666666667'\n\"\"\"\n\nn = int(input().strip())\n\nbases = list(map(int, input().strip().split()))\n\nposs = 0\nfor b in bases:\n    if b >= 0:\n        poss += b\n\nposs = poss + bases.count(-1)\n\nprint(round(poss / len(bases), 3))\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 0 2') == '1.6666666666666667'\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 1 2\") == \"2.5\"\nassert solution(\"3 0 1\") == \"2.5\"\nassert solution(\"3 -1 4\") == \"2.5\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\nimport re\n\nn = int(input())\nfor _ in range(n):\n    # m = re.findall('[0-4]+', input().split())\n    m = [int(x) for x in input().split()]\n    print(sum(m) / len(m))\n\n\"\"\"\nimport re\n\nn = int(input())\nfor _ in range(n):\n    m = [int(x) for x in input().split()]\n    print(round(sum(m) / len(m), 3))\n\n\"\"\"\n\"\"\"\n\u0421\u043f\u0438\u0441\u043a\u0438 \u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u0430\u043c \u0441\u0442\u0440\u043e\u0438\u0442 \u0441\u0442\u043e\u043b\u0431\u0447\u0430\u0442\u0443\u044e \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u043e\u043b\u0431\u0447\u0430\u0442\u0443\u044e \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443.\n\nSample Input:\n\n1 2 3 4 5\nSample Output:\n\n1 2 3 4 5\n     4 5\n2 3 4 5\n     3 5\n3 4 5\n     2 4\n4 5\n     1 3\n5 4\n     1 2\n\nimport numpy as np\n\ninput()\nx = np.arange(1, 6)\ny = np.array(list(map(int, input().split())))\n\nfor i in range(5):\n    print(\" \" * i, end=\"\")\n    for j in range(5):\n        print(y[j + i * 5], end=\" \")\n    print()\n\n\"\"\"\n\n\"\"\"\n\u0421\u0442\u0440\u043e\u043a\u0438 \u0438 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0438 \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b 3, 21, 34, 34, 55, 89, 34, 21, 34, 34, \u043e\u043d\u0430 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439:\n\n34 34 34\n34 21 34\n34 34 34\n55 34 34\n34 34 34\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443 \u0447\u0438\u0441\u043b\u0443.\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0446\u0435\u043b\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439. \u0424\u0443\u043d\u043a\u0446\u0438\u044f"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 0 2\\n3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4\\n3 0 2') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 0 2\") == '1.6666666666666667'\nassert solution(\"3\\n1 -1 4\") == '2.5'\n\"\"\"\n\nimport re\n\nN = int(input())\nbases = [int(x) for x in re.findall(r'\\d+', input())]\n\ntotal = 0\nfor i in range(N):\n    if bases[i] >= 0:\n        total += bases[i]\n\nprint(total / (N - bases.count(-1)))\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 2\\n1 -1 4') == '2.5'\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('3 0 2\\n1 -1 4'), '2.5')\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1.0'\nassert solution('1\\n0') == '1.0'\nassert solution('1\\n0 1') == '1.0'\nassert solution('1\\n0 0') == '1.0'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('3 4') == '4'\nassert solution('5 6') == '6'\nassert solution('6 7') == '7'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 3\n''') == '6'\nassert solution('''15 12\n''') == '7'\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123864 123865') == 1\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123456 123456') == '1'\nassert solution('123434 123434') == '0'\n\"\"\"\n\n\nfrom collections import Counter\nfrom itertools import permutations\nfrom math import factorial\nfrom math import prod\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '123864 123865'\n) == '1'\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123864 123865\") == 1\nassert solution(\"198765 198769\") == 0\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\n'''\n\nimport math\n\nN = int(stdin.readline())\n\ntotal = 0\nfor _ in range(N):\n    total += 1 / N\n\nprint(1 - total)"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '0.0'\nassert solution('10') == '1.0'\nassert solution('100') == '0.1'\n\n-----\nThe number of gift-giving pairs is $\\frac{n(n-1)}{2}$, and the probability that somebody gives a gift to themselves is $\\frac{n(n-1)}{2}$.\n\nA person with $n$ people to choose from can have either $n(n-1)$ pairs of gift-giving people or $n(n-1)$ pairs of $n$ people in total.\n\nIn this problem, we want to determine the probability that a person gives gifts to themselves. This can be written as a function with $n$ arguments, and its domain is $\\{0, 1, \\dots, n-1\\} \\times \\{0, 1, \\dots, n-1\\}$.\n\nIn particular, $f(i, j)$ is the number of pairs $(a, b)$ where $a$ and $b$ are integers from $0 \\le a \\le i$ and $0 \\le b \\le j$.\n\nIn particular, the function takes $n$ arguments and gives the probability to be $0$, $1$,..., $n-1$.\n\nAt most $n^2$ arguments are passed to the function.\n\n- $f(0, j) = 0$ for all $0 \\le j < j$\n- $f(i, 0) = 0$ for all $0 \\le i < i$\n- $f(0, 0) = 1$\n- $f(i, i) = 0$ for all $0 < i < i$\n- $f(i, j) = f(i-1, j) + f(i-1, j-1)$ for all $0 < i < j < j$\n\nSo,\n\n- $f(0, j) = 0$ for all $0 \\le j < j$\n- $f(i, 0) = 0$ for all $0 \\le i < i$\n- $f(0, 0) = 1$\n- $f(i, i) = 0$ for all $0 < i < i$\n- $f(i, j) = f(i-1, j) + f(i-1, j-1)$ for all $0 < i < j < j$\n\nWe also know that\n\n- $f(0, j) = j$ for all $0 \\le j < j$\n- $f(i, 0) = i$ for all $0 \\le i < i$\n\nSo, we may solve this problem as follows:\n\n- For each of the $n$ arguments, we maintain a variable $c_j$, where $c_j$ is the number of integers $j$ such that $0 \\le j \\le j$ and $f(i, j) = j$.\n- For each of the $n$ arguments, we maintain a variable $c_i$, where $c_i$ is the number of integers $i$ such that $0 \\le i \\le i$ and $f(i, j) = i$.\n- We will solve the above problem by the following loop, where $n$ is the number of arguments, and $a_i$ is the number of integers $i$ such that $0 \\le i \\le i$ and $f(i, j) = i$."
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''2''') == '0.5'\nassert solution('''3''') == '0.66666667'\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.6666666666666666'\nassert solution('10\\n') == '0.5555555555555556'"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.666666666'\n\n\n'''\nimport math\nimport sys"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0.5\"\nassert solution(\"3\") == \"0.66666667\"\n\"\"\"\n\nn = int(input().strip())\n\nprint(1 - (1 / n * (n - 1)) ** n)"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(180) == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution(96) == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution(1) == 'impossible'\nassert solution(0) == 'impossible'\n\nprint('All tests passed.')\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"180\") == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution(\"96\") == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(180)) == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(str(96)) == \"triple 19\\ntriple 19\\ndouble 15\\nsingle 9\"\n\n-----Notes-----\nDarts will always hit a section, so $2 \\leq n \\leq 182$\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\nprint(solution(\"180\"))\nprint(solution(\"96\"))\n\"\"\"\n\nimport math\nimport sys\n\nTARGET = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"\n\nimport pytest"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"180\") == \"triple 20\"\nassert solution(\"96\") == \"triple 19\"\nassert solution(\"20\") == \"impossible\"\n\n:param stdin: input string\n:return: output string\n\"\"\"\n\nfrom collections import namedtuple\n\nTriple = namedtuple('Triple', ['score','section'])\nDouble = namedtuple('Double', ['score','section'])\nSingle = namedtuple('Single', ['score','section'])"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 4 7\n''') == '168'\nassert solution('''5 2 2\n''') == '36'"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(\"Test finished.\")\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\nassert solution('5 2 3') == '15'\nassert solution('8 4 10') == '240'\nassert solution('9 4 11') == '399'\n\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\nprint('Success')"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nprint(solution(\"10 4 7\"))\n\nassert solution(\"5 2 2\") == \"36\"\nprint(solution(\"5 2 2\"))\n\nprint(\"Success\")\n\n'''\n\n\nimport math"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 2') == 36\nassert solution('10 4 7') == 168\n\"\"\"\n\nimport math\n\na, b, c = list(map(int, input().split()))\nprint(math.ceil(a * c * b / 4))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 10\\n5 8\") == \"7\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == 1\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 2 1\\n1 1 0 1\") == \"2\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10\\n3 10\\n3 10') == '1', 'input 1'\nassert solution('1\\n3 10') == '7', 'input 2'\nprint('Passed')"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6 7 1 2\\n4 5 2 1\") == \"7\"\nassert solution(\"3\\n5 8 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\n2 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10') == '7'\nassert solution('2 3 8') == '1'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 8\\n5 8\") == \"1\"\nassert solution(\"1\\n3 10\") == \"7\"\nassert solution(\"1\\n2 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\\n1 9\\n1 1\\n2 1\") == \"5\"\nassert solution(\"5 7\\n1 5\\n2 10\\n1 2\\n1 1\") == \"1\"\nassert solution(\"6 7\\n3 5\\n4 10\\n5 5\\n2 6\\n1 6\") == \"0\"\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nprint('Passed')\n\nSample Input 3:\n2\nSimon says stop.\nSimon says touch your nose.\nSample Output 3:\n stop.\n touch your nose.\n\nSample Input 4:\n2\nSimon says raise your right hand.\nSimon says touch your left hand.\nSample Output 4:\n raise your right hand.\n touch your left hand.\n\nSample Input 5:\n2\nSimon says.\nSimon says touch your left hand.\nSample Output 5:\n touch your left hand.\n\nSolution\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\nSimon says smile.\n''') =='smile.'\nassert solution('''3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == 'raise your left hand.'\nassert solution('''2\nSimon says smile.\nSimon says raise your right hand.\n''') == ''\nassert solution('''3\nSimon says smile.\nSimon says raise your right hand.\nSimon says raise your left hand.\n''') =='smile.'\nassert solution('''3\nSimon says smile.\nSimon says raise your right hand.\nSimon says raise your left hand.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n1\nSimon says smile.\n''') =='smile.'\nassert solution('''\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == 'raise your right hand.\\nraise your left hand.'\nassert solution('''\n1\nSimon says smile.\nSimon says smile.\nSimon says smile.\n''') =='smile.'\nassert solution('''\n1\nSimon says sm.\nSimon says sm.\nSimon says sm.\n''') =='sm.'\nassert solution('''\n1\nSimon says sm.\nSimon says sm.\nSimon says sm.\nSimon says sm.\n''') =='sm.'\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\"\n) == \"\"\"\n raise your right hand.\n raise your left hand.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') == '''\nraise your right hand.\nLower your right hand.\nraise your left hand.\n'''\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"\"\"smile.\n\"\"\", solution(\"\"\"1\nSimon says smile.\n\"\"\")\nassert solution(\"\"\"2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\"raise your right hand.\nraise your left hand.\n\"\"\", solution(\"\"\"2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\")\nassert solution(\"\"\"3\nSimon says smile.\nSimon says frown.\nSimon says laugh.\nSimon says look up.\nSimon says touch your nose.\nSimon says touch your nose.\nSimon says touch your nose.\n\"\"\") == \"\"\"smile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\nsmile.\n\"\"\", solution(\"\"\"3\nSimon says smile.\nSimon says frown.\nSimon says laugh.\nSimon says look up.\nSimon says touch your nose.\nSimon says touch your nose.\nSimon says touch your nose.\n\"\"\")\n\n\"\"\"\n8\nSimon says smile.\nLower your right hand.\nSimon says frown.\nSimon says look up.\nSimon says touch your nose.\nSimon says frown.\nSimon says smile.\nSimon says raise your left hand.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\n' +\n    'Lower your right hand.\\n' +\n    'Simon says raise your left hand.\\n') == 'raise your right hand.\\n' +\n    'raise your left hand.\\n'\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") == \"smile.\"\n\nassert solution(\"\"\"\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"raise your right hand.\\nraise your left hand.\"\n\nassert solution(\"\"\"\n2\nSimon says smile.\nSimon says smack.\n\"\"\") == \"smile.\\nsmack.\"\n\nassert solution(\"\"\"\n3\nSimon says raise your right hand.\nSimon says raise your left hand.\nSimon says smile.\n\"\"\") == \"raise your right hand.\\nraise your left hand.\\nsmile.\"\n\nassert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") == \"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\nSimon says smile.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says stop moving.\\n') == 'raise your left hand.\\nraise your right hand.\\nstop moving.\\n'\nassert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') == ''\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\n') == ''\nassert solution('1\\nSimon says smile.\\n') =='smile.\\n'\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"\"\" smile.\n\"\"\"\n\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\" raise your right hand.\n raise your left hand.\n\"\"\"\n\n\"\"\"\n\nSample Input 2:\n1\nSimon says go.\nSample Output 2:\n go.\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''0 0 4 6 10 12 16 18''') == '5'\nassert solution('''1 2 4 6 10 12 16 18''') == '0'\n\nprint('Test finished.')"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\nprint(solution(\"0 0 4 6 10 12 16 18\"))\n\n---Problem 3---\nThere is a list of N people on the internet. The each person has a name and a personality score between 0 and 10. Let's call the person who has the highest personality score the \"best\". We want to figure out the best \"performers\" and \"non-performers\". A person is a \"performer\" if they have a score at least X and a non-performer if their score is below X.\n\nFor example, if X = 3 and the following scores are given:\n\nSteve: 5\nJohn: 10\nYara: 7\nMike: 4\nNatalie: 9\nSteve: 10\nJohn: 9\nYara: 3\nMike: 4\nNatalie: 10\nThe \"best\" performers are Steve and Mike, and the \"non-performers\" are John, Yara and Natalie.\n\nWrite a function solution(X, people) where X is an integer between 0 and 10, and people is a list of non-negative integers. The function should return the list of people who are performers and the list of people who are non-performers.\n\n-----Input-----\nThe input consists of a single line containing two integers X and N, where N is the number of people and X is the minimum score required for a person to be a performer.\n\n-----Output-----\nThe function should return a list of integers corresponding to the \"best performers\", and a list of integers corresponding to the \"non-performers\".\n\n-----Examples-----\nSample Input 1:\n3 4\n0 2 4 10\n5 6 9 8\n7 8\n1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n3 4\n0 2 4 10\n1 2 3 4 5 6 7 8 9\n7\nSample Output 1:\n[1, 3, 5, 7]\n[0, 2, 4, 6, 8, 9]\n\nSample Input 2:\n2 1\n3 1\n0 1\nSample Output 2:\n[0]\n[1, 2]\n\nSample Input 3:\n1 4\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n1 4\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n4\nSample Output 3:\n[0, 1, 2, 3, 4]\n[5, 6, 7, 8, 9]\n\nSample Input 4:\n3 3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n3 3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n3\nSample Output 4:\n[0, 1, 2]\n[3, 4, 5, 6, 7, 8, 9]\n\nSample Input 5:\n4 1\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n4 1\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n5\nSample Output 5:\n[0, 1, 2, 3, 4]\n[5]\n\n-----Problem 4---\nWrite a function solution(N, Q) which takes in an integer N (0 < N < 100), and a list of Q queries, and returns the list of values corresponding to the output of each query.\n\nQueries are written as integers on a single line. The first line contains the integer, K (1 < K < N), the number of queries. Then, K lines follow, each containing two integers.\n\n-----Input-----\nThe input consists of a single line containing two integers N and Q, where N is the number of values and Q is the number of queries.\n\n-----Output-----\nThe function should return a list of length N, where each element in the list is either a 0 or 1.\n\n-----Examples-----\nSample Input 1:\n6 1\n0\n1\n0\n1\n1\n0\nSample Output 1:\n[0, 1, 0, 1, 1, 0]\n\nSample Input 2:\n8 3\n1\n0\n1\n0\n1\n0\n1\n0\n0\nSample Output 2:\n[0, 1, 0, 1, 1, 0, 0, 0]\n\nSample Input 3:\n5 2\n0\n1\n0\n1\n0\nSample Output 3:\n[0, 1, 1, 1, 0]\n\nSample Input 4:\n5 1\n1\n0\nSample Output 4:\n[0]\n\nSample Input 5:\n9 5\n0\n1\n0\n1\n1\n0\n1\n1\n0\n1\nSample Output 5:\n[0, 1, 1, 0, 1, 1, 0, 1, 1]\n\n-----Problem 5---\nWe are working on a new super-computer with a primitive calculator. It's a calculator that can only handle 3 operations: addition, subtraction, and multiplication.\n\nYour task is to write a program that can evaluate any expression that can be written in the form of the sum or subtraction of products of two integers (i.e., the sum or subtraction of two products can be broken down into smaller sum or subtraction of products).\n\nWe can use parentheses to solve complex expressions, but we cannot use any other parenthesis symbols.\n\nFor example, the expression (5+3)*2+(4-1) is okay, but (5+3)*2+ or 3*(4-1) is not.\n\nSample Input 1:\n4+5*6-4\nSample Output 1:\n60\n\nSample Input 2:\n3*4*5*6\nSample Output 2:\n720\n\nSample Input 3:\n0-2*3\nSample Output 3:\n-12\n\nSample Input 4:\n5*5\nSample Output 4:\n25\n\nSample Input 5:\n4-2-2\nSample Output 5:\n-1\n\nSample Input 6:\n1\nSample Output 6:\n1\n\nSample Input 7:\n10+10+10+10+10+10+10+10+10+10\nSample Output 7:\n1010\n\nSample Input 8:\n-5*5\nSample Output 8:\n-25\n\nSample Input 9:\n0\nSample Output 9:\n0\n\nSample Input 10:\n10-20*30+40-50\nSample Output 10:\n-1240\n\nSample Input 11:\n10-5*4-5\nSample Output 11:\n-10\n\nSample Input 12:\n10-5+4*6\nSample Output 12:\n14\n\nSample Input 13:\n-10+10\nSample Output 13:\n0\n\nSample Input 14:\n-5*-5\nSample Output 14:\n25\n\nSample Input 15:\n5-5*5\nSample Output 15:\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''0 0 4 6 10 12 16 18''') == '5'\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n0 2\\n1 2\\n2 3\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC\\n') == '3\\n0 1\\n0 2\\n0 3'\nassert solution('4 1\\nA\\nA\\nG\\nT\\n') == '2\\n0 1\\n0 2\\n0 3'\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n1 2\\n2 3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"AA\\nAT\\nTT\\nTC\"\n) == \"3\\n0 1\\n0 2\\n0 3\"\n\nassert solution(\n\"GA\\nGC\\nGT\\nTA\"\n) == \"2\\n0 1\\n0 2\\n1 3\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\"\n\nassert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bab\") == \"aba\"\nassert solution(\"bbab\") == \"bbaba\"\nassert solution(\"bbaba\") == \"bbaba\"\nassert solution(\"bba\") == \"bb\"\nassert solution(\"aaaa\") == \"aaaa\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"abba\") == \"b\"\nassert solution(\"abbba\") == \"bb\"\nassert solution(\"abcdef\") == \"ab\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('abc') == '-1'\nassert solution('aba') == '-1'\nassert solution('abab') == 'ab'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"b\") == -1\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == -1\n\nprint(solution('aaaa'))\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"bbbaa\") == \"bba\"\nassert solution(\"bbbaab\") == \"bba\"\nassert solution(\"bbbabb\") == \"bba\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == \"-1\"\nassert solution(\"abb\") == \"-1\"\nassert solution(\"abba\") == \"abba\"\nassert solution(\"baa\") == \"a\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"babba\") == \"bba\"\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Dr. Chaz needs 2 more piece[s] of chicken!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\n'''\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 100\\n2 3\\n\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution(\"20 100\\n3 2\\n\") == \"Dr. Chaz needs 3 more piece[s] of chicken!\"\n\"\"\"\n\n\n\"\"\"\nMemoization\n\"\"\"\nimport sys"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('30 3\\n30 3') == 'Dr. Chaz needs 0 pieces of chicken!'\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('20 100\\n5 2') == 'Dr. Chaz needs 2 more piece[s] of chicken!'\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''20 100\n''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('''2 3\n''') == 'Dr. Chaz needs 1 more piece of chicken!'\nassert solution('''20 20\n''') == 'Dr. Chaz needs 0 more piece of chicken!'\nassert solution('''20 100\n''') == 'Dr. Chaz will have 80 pieces of chicken left over!'\n\n------Solution------\n1. Take the difference between chicken and people. If there is a negative number, that means there is leftovers, if it is greater than 0, there is no leftovers.\n2. If there is a leftovers, then return chicken % people\n3. If there is not leftovers, then return -1 * (chicken % people)\n'''\nimport sys"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10\\n2 2 2') == '0'\nassert solution('4 980\\n1 1 1\\n5 2 3\\n5 2 1') == '-2'\nassert solution('3 990\\n1 1 1\\n5 2 3\\n5 2 1') == '20'\nassert solution('3 990\\n1 1 1\\n5 2 3\\n5 2 1') == '20'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('1\\n2\\n') == '0'\nassert solution('1\\n2\\n3\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n') == '2'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('2 3\\n1 1 1\\n5 2 3') == -2\nassert solution('5 3\\n1 1 1\\n5 2 3\\n5 2 1') == 0\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == '-2'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\nassert solution(\"2 2\\n2 2\") == \"0\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 10\\n4 4 4\\n2 1 1\\n1 1 1\") == \"0\"\nassert solution(\"3 10\\n1 2 2\\n1 2 1\") == \"-2\"\nassert solution(\"3 10\\n1 1 2\\n2 2 1\") == \"0\"\nassert solution(\"3 10\\n1 1 2\\n2 1 2\") == \"0\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\nprint(\"All test cases passed.\")\n\nprint(solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\"))\nprint(solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\"))\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\nprint('all tests passed')\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\nassert solution('4 3\\nkala\\no#a#\\nkula\\ni#as') == 'as'\nassert solution('4 3\\nkala\\no#a#\\nkula\\ni#as') == 'kala'\n\nassert solution('2 2\\nkala\\n#a#\\nkula\\ni#as') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\"\"\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sample_input) == \"kala\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\nb') == 'b'\nassert solution('a\\nbb') == 'aa'\nassert solution('a\\nbb\\ncc') == 'ab'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'as'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\n\"\"\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\n\"\"\"\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"WNEENWESWNENENWWE\"\n) == 13\nassert solution(\n\"WNEENWESWNENENWWE\"\n) == 13\nassert solution(\n\"WNENENENENWNEENWSEENWWWNWESENENWNENENWSEWNENENENENENEN\"\n) == 24\nassert solution(\n\"WNENENENENWNEENWSEENWWWNWESENENWNENENWSEWNENENENENENEN\"\n) == 24\nassert solution(\n\"WNENENENENWNEENWSEENWWWNWESENENWNENENWSEWNENENENENENEN\"\n) == 24\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WNEENWEENEENE') == '10'\nassert solution('NSEW') == '4'\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"NSEW\") == 4\nassert solution(\"NNNEENNNWNWSEENWNNNNWNWESWNNNWNNNNEENNN\") == 13\nassert solution(\"NWSWWENWNWSWWNWNWSWNWESWNWNWESWNWSWESWNWNWENW\") == 13\nassert solution(\"NNEESESESEESESWSWESWNWWSE\") == 11\nassert solution(\"NWSWENWSWNNESW\") == 8\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(WNEENWEENEENE) == 10\nassert solution(NSEW) == 4\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('NSEW') == 4\nassert solution('NNNNWWWWWWWWWNNNNWWWWWWWWWNNNNNNWWWWWWWWWWWWWWWNNNNNWWWWWWWWWWWWWWWWWWW') == 10\nassert solution('NNNNWWWWWWWWWNNNNWWWWWWWWWNNNNWWWWWWWWWWWWWWWNNNNNWWWWWWWWWWWWWWWWWWW') == 13"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('WNEENWEENEENE') == '10'\nassert solution('NSEW') == '4'\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WNEENWEENEENE') == 10\n\"\"\"\n\nroute = input()\ncharacters = {'N': 0, 'S': 0, 'E': 0, 'W': 0}\n\nfor char in route:\n    if char == 'N':\n        characters['N'] += 1\n    elif char == 'S':\n        characters['S'] += 1\n    elif char == 'E':\n        characters['E'] += 1\n    elif char == 'W':\n        characters['W'] += 1\n\nprint(max(characters.values()) * 2 + 10)\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n----"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n\n-----Hint-----\n\nThink about the operators and what their precedence means.\n\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\"\nassert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\"\nassert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'problems ahead'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\nassert solution(\"1 2 3 0\") == \"problems ahead\"\nassert solution(\"0 1 0 0\") == \"problems ahead\"\nassert solution(\"1 0 0 0\") == \"problems ahead\"\n\"\"\"\nProblem:\n========\nGloisa has been reading the manual for the last three weeks, and is almost able to start it up. However, there is one equation she needs that has some operators smudged out. That equation is\\[ a~?~ b~ =~ c~?~ d \\]\n\nwhere the question marks are the unknown operators. So far, Gloisa has only managed to narrow the operators down to $+$, $-$, $*$ and $/$ (integer division).\n\nAlthough there may be multiple valid sets of operators for this equation, Mildra wants to help out by making a program that narrows the possibility space for Gloisa.\n\n-----Input-----\nThe first line and only line consist of $4$ integers, $a$, $b$, $c$ and $d$, the values in the expression above.\n\n-----Output-----\nPrint out all the expressions that evaluate to true, separated by a newline and sorted alphanumerically. ($\\texttt{`*'} < \\texttt{`+'} < \\texttt{`-'} < \\texttt{`/'}$)\n\nA valid expression must have a space between the integers, operators and the equal sign. Note that expression including division by zero is not a valid expression.\n\nIf none of the expressions are valid, print out \u201cproblems ahead\u201d (without the quotes).\n\n-----Limits-----\n - $0 \\leq a,b,c,d \\leq 100$\n\n-----Examples-----\nSample Input 1:\n1 2 3 4\nSample Output 1:\n1 - 2 = 3 - 4\n1 / 2 = 3 / 4\n\nSample Input 2:\n0 4 2 2\nSample Output 2:\n0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"problems ahead\\n\"\nassert solution(\"1 2 3 1\") == \"1 - 2 = 3 - 1\\n1 / 2 = 3 / 1\\n\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\n\n------------------------------------------------------------\n\n\"\"\"\nimport math"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('MAMA TATA') == '''\n.T..\nMAMA\n.T..\n.A..\n'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"P....\\nI....\\nD....\\nZ....\\nBANANA\\nM....\\nA....\"\nassert solution(\"MAMA TATA\") == \"T..\\nMAMA\\nT..\\nA..\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'BANANA PIDZAMA'\n) == '\\n'.join([\n    '.P....',\n    '.I....',\n    '.D....',\n    '.Z....',\n    'BANANA',\n    '.M....',\n    '.A....',\n])\nassert solution(\n    'MAMA TATA'\n) == '\\n'.join([\n    'T..',\n    'MAMA',\n    'T..',\n    'A..',\n])\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABBA CCCB') == '4\\n.C..\\n.C..\\nABBA\\n.B..'\nassert solution('MAMA TATA') == '5\\n.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABBA PC\") == \"C.C\\n.C\\nABBA\\n.B\\n\"\nassert solution(\"POOP PA\") == \"P..\\n..P\\n.P..\\n..P\\n.A..\\n..A\\n\"\nassert solution(\"CAAA C\") == \"C..\\n.C\\nC..\\n.C\\nC..\\n\"\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('ABBA') == 'C..\\nC..\\nABBA\\nB..'\nassert solution('SEND') == 'S.E.N.D\\nS.E.N.D\\nS.E.N.D'\nassert solution('MAMA TATA') == 'T..\\nMAMA\\nT..\\nA..'\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABBA CCCB\") == \".C..\\n.C..\\nABBA\\n.B..\"\nassert solution(\"BBBB\") == \".B..\\n.B..\\n.B..\\n.B..\"\nassert solution(\"ABC BAC\") == \".A..\\n.B..\\n.A..\\n.C..\"\nassert solution(\"ABC DEF GHI\") == \".A..\\n.B..\\n.C..\\n.D..\\n.E..\\n.F..\\n.G..\\n.H..\"\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BANANA PIDZAMA') == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n\nimport math\nimport timeit\nimport functools\nimport matplotlib.pyplot as plt\nfrom random import randint, randrange, sample\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\\n\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\\n\") == \"365\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == '10'"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == 10\nassert solution('2\\n1 365\\n20 28') == 365\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26\\n') == '10'\nassert solution('2\\n1 365\\n20 28\\n') == '365'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 3\"\nprint(\"test passed\")\n\nSample Input 3:\n11\nSample Output 3:\n3 0\n\nSample Input 4:\n22\nSample Output 4:\n9 4\n\nSample Input 5:\n100\nSample Output 5:\n49 0\n\"\"\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0 1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 2'\nassert solution('4') == '2 3'\nassert solution('5') == '2 4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 3\"\nprint(solution(\"4\"))\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == (\"0 1\")\nassert solution(\"2\") == (\"0 1\")\nassert solution(\"3\") == (\"0 1\")\nassert solution(\"4\") == (\"1 3\")\n\"\"\"\n\nimport sys\nimport math\nsys.stdin = open('input.txt')\n\nK = int(input())\ncounter = 0\ncount_B = 0\ncount_A = 1\n\nwhile counter < K:\n    print(count_A, count_B)\n    count_B += 1\n    count_A = count_B\n    counter += 1"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ('0 1', '')\nassert solution('0 1') == ('0 1', '')\nassert solution('1 1') == ('0 1', '1 1')\nassert solution('1 0') == ('0 1', '0 0')\nassert solution('1 2') == ('0 1', '1 0')\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"3\") == \"0 1\"\n\"\"\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '2 3'\nassert solution('1') == '0 1'\nassert solution('22') == '1 2'\nassert solution('100') == '27 24'\nassert solution('7') == '4 0'\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2 3\"\nprint(\"All examples passed.\")"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == \"\"\"\nB 100 49\nA 1 197\nA 49 100\n0.1965897693\n\"\"\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == \"\"\"\nB 100 49\nA 1 197\nA 49 100\n0.1965897693\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n\"\"\") == \"\"\"\nA 0 99\nA 0 99\nA 0 99\nA 0 99\n0.4974874372\n\"\"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nprint('Success')"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\"\"\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\"\"\") == \"\"\"B 100 49\nA 1 197\nA 49 100\n0.1965897693\"\"\"\nprint(\"PASSED\")\n\nassert solution(\"\"\"4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\"\"\") == \"\"\"A 0 99\nA 0 99\nA 0 99\nA 0 99\n0.4974874372\"\"\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1\\n1\\n') == 1\nassert solution('2\\n1\\n2\\n') == 1\nassert solution('2\\n1\\n2\\n3\\n') == 8\nassert solution('2\\n1\\n2\\n3\\n4\\n') == 16\n\nprint(solution(input()))"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\nassert solution('2\\n1\\n1') == '1'\n'''\nimport sys\nimport math"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == '168'\n\"\"\"\n\n\"\"\"\n--- Day 3: Toboggan Trajectory ---\nWith the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.\n\nDue to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (.) and trees (#) you can see. For example:\n\n..##.......\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == '168'\n\"\"\"\n\n\"\"\"\nThis problem can be solved easily using dynamic programming\n\nmaxi[i] -> Maximum value of (a_i * a_i +... + a_k * a_k) * (a_{k+1} +... + a_n)\n\nmaxi[i] = (maxi[i - 1]) * (a_i +... + a_k) + a_i * a_i +... + a_k * a_k"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nprint(solution(\"5\\n2\\n1\\n4\\n3\\n5\"))\nassert solution(\"2\\n1\\n1\") == \"1\"\nprint(solution(\"2\\n1\\n1\"))\n\"\"\"\n\nimport sys\nimport itertools\nfrom math import prod\n\nstdin = sys.stdin.read()\nn = int(stdin.split(\"\\n\")[0])\narr = [int(x) for x in stdin.split(\"\\n\")[1:-1]]\n\na = set(arr)\n\nret = 0\nfor a_k in itertools.combinations(arr, r=2):\n    ret = max(prod(a_k) * (sum(a_k) + sum(arr) - sum(a_k)), ret)\n\nprint(ret)\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n1\\n') == '1'\nassert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 ABC DEF 0') == 'CDBEAF'\nassert solution('3 3 ABC DEF 2') == 'CABEDF'\nassert solution('3 3 ABC DEF 10') == 'CBADEF'\nassert solution('4 4 Q W E R T Y U I 0') == 'QWERTYUI'\nassert solution('1 2 3 4 0') == '12345'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDABEF'\n\nassert solution('3 3\\nABD\\nCDE\\n0') == 'ACDBAE'\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import zip_longest"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nABC\\nDEF\\n3\") == \"CBADEF\"\n\n\"\"\"\n\n\nimport collections"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\nassert solution('3 3\\nABC\\nDEF\\n0\\n') == 'CBADEF'\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 3\nABC\nDEF\n0\"\"\") == \"CBADEF\"\nprint(\"Test PASSED\")\n\n\"\"\"\nSample Input 1:\n3 3\nABC\nDEF\n0\nSample Output 1:\nCBADEF\n\nSample Input 2:\n3 3\nABC\nDEF\n2\nSample Output 2:\nCDBEAF\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nGHI\\nJKL\\n0\") == \"GHIJKL\"\nassert solution(\"3 3\\nMNO\\nPQR\\n0\") == \"MPQRNO\"\nassert solution(\"3 3\\nSTU\\nVWX\\n5\") == \"SVWXTVX\"\nassert solution(\"1 1\\nA\\n0\") == \"A\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF', 'wrong solution'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\nassert solution('3 3\\nCBA\\nDEF\\n2\\n') == 'CBADEF'\n\n-----Instructions-----\n\n1.\n2.\n3.\n\nConstraints\n\n1. 1 \u2264 N1, N2 \u2264 100\n2. 1 \u2264 T \u2264 50\n3. For the tests, order of the ants in any row is irrelevant.\n\n-----Notes-----\n\n1. If there are two or more ants in the same position in both rows, there is no guarantee about which of them will survive in the solution.\n\n2. The ants are numbered from 1 to N1 + N2 - 1.\n\n3. Time out error\n\n-----Questions-----\n\n1.\n2.\n3.\n\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 6\nassert solution(4) == 10\nassert solution(5) == 15\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4', \"Wrong answer\"\nprint('Hooray!')\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"5\"\nassert solution(\"2\\n5\\n100T\\n100N\\n100T\\n100T\\n100N\") == \"4\"\nassert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"5\"\nassert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"5\"\n\n----Problem Description----\nTask Score 50%\nA lucky number is a number that has only divisors in the set of integers {1, 2, \u2026, n}.\n\nFor example, if n = 7, then the lucky numbers in the range [1, 7] are 1, 2, 4, 5, 7 and 8, because 1, 2, 4, 5, 8 and 7 are their own divisors.\n\nFor a given positive number n, define L(n) as the sum of the lucky numbers in the range [1, n].\n\nFor example, L(7) = 1 + 2 + 4 + 5 + 7 + 8 = 36. And for n = 10, L(10) = 1 + 2 + 4 + 5 + 7 + 8 + 9 + 10 + 12 + 14 = 94.\n\nLet S(n) be the sum of the lucky numbers in the range [1, n].\n\nFor example, S(10) = 1 + 2 + 4 + 5 + 7 + 8 + 9 + 10 + 12 + 14 = 94. And for n = 100, S(100) = 1 + 2 + 4 + 5 + 7 + 8 + 9 + 10 + 12 + 14 + 16 + 18 + 19 + 20 + 24 + 25 + 27 + 28 + 32 + 36 + 38 + 39 + 40 + 42 + 43 + 44 + 46 + 49 + 51 + 52 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100 = 10201.\n\nLet F(n) be the Fibonacci number at index n.\n\nFor example, F(6) = 8, F(7) = 13, F(8) = 21 and F(9) = 34. Let C(n) be the number of the Fibonacci numbers in the range [1, n] whose value is less than S(n).\n\nFor example, C(10) = 9 because F(6) + F(7) + F(8) = 21 + 34 + 55 = 89 > 94, F(7) + F(8) + F(9) = 34 + 55 + 89 = 145 > 94, and F(8) + F(9) + F(10) = 55 + 89 + 145 = 254 <= 94. And C(100) = 49.\n\nLet F(n) be the Fibonacci number at index n.\n\nFor example, F(6) = 8, F(7) = 13, F(8) = 21 and F(9) = 34. Let C(n) be the number of the Fibonacci numbers in the range [1, n] whose value is less than S(n).\n\nFor example, C(10) = 9 because F(6) + F(7) + F(8) = 21 + 34 + 55 = 89 > 94, F(7) + F(8) + F(9) = 34 + 55 + 89 = 145 > 94, and F(8) + F(9) + F(10) = 55 + 89 + 145 = 254 <= 94. And C(100) = 49.\n\nLet F(n) be the Fibonacci number at index n.\n\nFor example, F(6) = 8, F(7) = 13, F(8) = 21 and F(9) = 34. Let C(n) be the number of the Fibonacci numbers in the range [1, n] whose value is less than S(n).\n\nFor example, C(10) = 9 because F(6) + F(7) + F(8) = 21 + 34 + 55 = 89 > 94, F(7) + F(8) + F(9) = 34 + 55 + 89 = 145 > 94, and F(8) + F(9) + F(10) = 55 + 89 + 145 = 254 <= 94. And C(100) = 49.\n\n----Problem Description----\nTask Score 50%\nA lucky number is a number that has only divisors in the set of integers {1, 2, \u2026, n}.\n\nFor example, if n = 7, then the lucky numbers in the range [1, 7] are 1, 2, 4, 5, 7 and 8, because 1, 2, 4, 5, 8 and 7 are their own divisors.\n\nFor a given positive number n, define L(n) as the sum of the lucky numbers in the range [1, n].\n\nFor example, L(7) = 1 + 2 + 4 + 5 + 7 + 8 = 36. And for n = 10, L(10) = 1 + 2 + 4 + 5 + 7 + 8 + 9 + 10 + 12 + 14 = 94.\n\nLet S(n) be the sum of the lucky numbers in the range [1, n].\n\nFor example, S(10) = 1 + 2 + 4 + 5 + 7 + 8 + 9 + 10 + 12 + 14 = 94. And for n = 100, S(100) = 1 + 2 + 4 + 5 + 7 + 8 + 9 + 10 + 12 + 14 + 16 + 18 + 19 + 20 + 24 + 25 + 27 + 28 + 32 + 36 + 38 + 39 + 40 + 42 + 43 + 44 + 46 + 49 + 51 + 52 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\nT\\n5\\nT\\nN\\n6\\nN\\n7\\nT\\n8\\nT') == '7'\nassert solution('2\\n2\\nN\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT') == '1'\nassert solution('3\\n2\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT') == '3'\nassert solution('1\\n1\\n1\\nT\\nT\\nP\\nN\\nN\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP') == '8'\nassert solution('1\\n2\\n3\\n4\\nT\\nT\\nN\\nP\\nP\\nP\\nN\\nT\\nN\\nN\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nT\\nP\\nN') == '1'\n\nSample Case #1\nSample Input 1:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 1:\n5\n\nSample Case #2\nSample Input 2:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 2:\n4\n\nSample Case #3\nSample Input 3:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 3:\n5\n\nSample Case #4\nSample Input 4:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 4:\n1\n\nSample Case #5\nSample Input 5:\n3\n5\n100 T\n100 T\n100 T\n100 T\n100 N\nSample Output 5:\n3\n\nSample Case #6\nSample Input 6:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 6:\n5\n\nSample Case #7\nSample Input 7:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 7:\n1\n\nSample Case #8\nSample Input 8:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 8:\n3\n\nSample Case #9\nSample Input 9:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 9:\n5\n\nSample Case #10\nSample Input 10:\n2\n5\n100 T\n100 T\n100 T\n100 T\n100 N\nSample Output 10:\n1\n\nSample Case #11\nSample Input 11:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 11:\n3\n\nSample Case #12\nSample Input 12:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 12:\n5\n\nSample Case #13\nSample Input 13:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 13:\n1\n\nSample Case #14\nSample Input 14:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 14:\n3\n\nSample Case #15\nSample Input 15:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 15:\n5\n\nSample Case #16\nSample Input 16:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 16:\n1\n\nSample Case #17\nSample Input 17:\n3\n5\n100 T\n100 T\n100 T\n100 T\n100 N\nSample Output 17:\n3\n\nSample Case #18\nSample Input 18:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 18:\n5\n\nSample Case #19\nSample Input 19:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 19:\n1\n\nSample Case #20\nSample Input 20:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 20:\n3\n\nSample Case #21\nSample Input 21:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 21:\n5\n\nSample Case #22\nSample Input 22:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 22:\n1\n\nSample Case #23\nSample Input 23:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 23:\n3\n\nSample Case #24\nSample Input 24:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 24:\n5\n\nSample Case #25\nSample Input 25:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 25:\n1\n\nSample Case #26\nSample Input 26:\n3\n5\n100 T\n100 T\n100 T\n100 T\n100 N\nSample Output 26:\n3\n\nSample Case #27\nSample Input 27:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 27:\n5\n\nSample Case #28\nSample Input 28:\n2\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 28:\n1\n\nSample Case #29\nSample Input 29:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\nSample Output 29:\n3\n\nSample Case #30\nSample Input 30:\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\nSample Output 30:\n5\n\nSample Case #31\nSample Input 31:\n2\n5\n100 T\n100 N"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('1\\n3') == '2'\nassert solution('1\\n5') == '4'\nassert solution('1\\n7') == '6'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '5'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\nT\\nT\\nP\\nN\\nT\\nT\\nT\\nT\") == \"4\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\nT\\nT\\nP\\nN\\nT\\nT\\nT\\nT\") == \"1\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '2'"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"1\"\nassert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"1\"\n\nprint(solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\"))\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"4\"\nprint(\"Test 1 OK\")\n\nassert solution(\"\"\"\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"1\"\nprint(\"Test 2 OK\")\n\nassert solution(\"\"\"\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n\"\"\") == \"4\"\nprint(\"Test 3 OK\")\n\nassert solution(\"\"\"\n1\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n\"\"\") == \"1\"\nprint(\"Test 4 OK\")\n\nassert solution(\"\"\"\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"1\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\n\nd = math.gcd(a, b)\nprint(d * (a + b - d))\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 2 5 6\\n1 4 5 6\") == \"6\"\nassert solution(\"6 8\\n1 2 4 5 6 7 8\\n1 2 3 4 5 6 7\\n1 2 3 4 5 7 8\\n1 2 3 5 6 7 8\\n1 4 5 6 7 8\\n1 4 6 7 8\\n1 5 6 7 8\\n1 5 7 8\\n1 6 7 8\") == \"22\"\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\nroads = sorted(list(map(int, input().split())))\nplowed = [0] * (n + 1)\nfor i in range(m):\n    plowed[roads[i]] = 1\ncount = 0\nfor i in range(1, len(plowed)):\n    if i == 1 or not plowed[i - 1]:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '6'\n\nassert solution('6 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n1 1') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4\\n2 1 2\\n3 4') == '6'\nassert solution('6 8\\n1 2 1 3 1 4 2 5 4 6') == '22'\nassert solution('5 1\\n3 2\\n2 3\\n4 5') == '0'"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n6 8') == '22'\nassert solution('6 8\\n6 8') == '22'\n\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n6 8') == '22'\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3 4\\n2 1 3') == '6'\nassert solution('6 8\\n2 1 3\\n2 3 4\\n4 2 5\\n1 3 4\\n5 1 2') == '22'"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 2') == '2'\nassert solution('4 3') == '6'\nassert solution('4 1') == '2'\nassert solution('6 8') == '22'\n\"\"\"\n\nfrom math import factorial\nfrom collections import Counter, deque\nfrom copy import copy\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2 3 4 5') == '6'\nassert solution('6 8\\n1 2 3 4 5 6') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n5 6 7 8\") == \"6\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\n\nedge = [[] for i in range(n)]\n\nfor i in range(n - 1):\n    edge[int(stdin.readline()[:-1]) - 1].append(int(stdin.readline()[:-1]) - 1)\n    edge[int(stdin.readline()[:-1]) - 1].append(int(stdin.readline()[:-1]))\n\ncolor = [0 for i in range(n)]\nedgeColor = [[0, 0] for i in range(n)]\n\nfor i in range(m):\n    u, v = map(int, stdin.readline().split())\n    edgeColor[u][v] = 1\n    edgeColor[v][u] = 1\n\ndp = [[] for i in range(n)]\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 3\n6 5 4\n7 8 9\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 4\n4 3 2 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 4\n1 2\n1 2\n\"\"\") == \"1\"\n\n\"\"\"\nA stack of coins is represented as a list of heights $L=L[0],L[1],L[2],...,L[n]$, where $n$ is the number of coins in the pile. The coins are arranged such that the coins above the coins at the entrance form a pyramid, and the coins in the vault are stacked from bottom to top. The entry to the vault is the north-west corner, and the exit from the vault is the south-east corner.\n\nEach move of your friend will be described as follows:\n\nhe starts from the entrance to the vault, and climbs the vault with at most one stack of coins. He cannot jump, so he always climbs the stack to the north, then to the north-east, etc.\n\nNote that he will never step on a coin in the vault.\n\nIf he lands on a stack of coins where he cannot climb any further, he is still on the same stack as before, but his height does not change.\n\nGiven the heights of the coins at the entrance to the vault, your task is to find the height of the shortest ladder that allows the duck to reach the special coin at the exit.\n\n-----Problem-----\nYou are given four integers $A$, $B$, $C$ and $D$ with $0 < A,B,C,D < 10^9$.\n\nThe height of the coins at the entrance to the vault is $A$, at the vault is $B$, and at the exit is $C$. The height of the coins at the entrance to the vault is $D$.\n\nYou are given a shortest ladder of length $n$ that is at least $n$ meters long. The height of the ladder is at least $n$ meters.\n\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\nassert solution(\"1 4\\n4 3 2 1\") == \"0\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == \"0\"\nassert solution(\"3 3\\n1 2 3\") == \"1\"\nassert solution(\"3 3\\n6 5 4\") == \"0\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9\\n') == '1'\nassert solution('1 4\\n4 3 2 1\\n') == '0'\nprint('Success')"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == 1\nassert solution('1 4\\n4 3 2 1') == 0\n\"\"\"\n\nimport sys\nimport unittest\nfrom typing import List, Union, Set\n\nimport numpy as np\n\nM, N = list(map(int, sys.stdin.readline().split()))\n\nvault = []\nfor _ in range(M):\n    row = list(map(int, sys.stdin.readline().split()))\n    vault.append(row)"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4\\n6\\n2\\n\") == \"28\"\nassert solution(\"10 3\\n10\\n2\\n12\\n\") == \"16\"\n\"\"\"\n\nimport math\n\nX = int(input())\nN = int(input())\n\ncosts = []\nfor _ in range(N):\n    costs.append(int(input()))\n\ncosts.sort(reverse=True)\n\nsum = X\nfor cost in costs:\n    sum += math.floor((X / cost))\n    X -= math.floor((X / cost)) * cost\nprint(int(sum))\n\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\", \"3\\n4\\n6\\n2\\n\") == \"28\"\n\"\"\"\nx = int(input())\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\ns = x - a[0]\nfor i in range(1,n):\n    s += a[i]\n    s -= a[i-1]\n    print(s)"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(10) == 28\nassert solution(10, 3) == 16\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12\\n') == '16'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''10\n3\n4\n6\n2''') == '28'\nprint(solution(stdin))\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nX = int(input())\nN = int(input())\nsum_ = 0\nfor i in range(N):\n    sum_ += int(input())\nprint(X + sum_)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'no hiss'\nassert solution('mississippi') == 'hiss'\nassert solution('amiss') == 'hiss'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'amiss'\n) == 'hiss'\nassert solution(\n    'octopuses'\n) == 'no hiss'\nassert solution(\n    'hiss'\n) == 'no hiss'\nassert solution(\n    'mississippi'\n) == 'hiss'\nassert solution(\n    'he'\n) == 'no hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"hiss\") == \"hiss\"\nassert solution(\"kiss\") == \"no hiss\"\nassert solution(\"mississippi\") == \"no hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nprint('All tests passed.')\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"test\") == \"no hiss\"\nassert solution(\"abcd\") == \"no hiss\"\nassert solution(\"mississippi\") == \"hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"forsooth\") == \"no hiss\"\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('mississippi') == 'hiss'\nassert solution('octopuses') == 'no hiss'\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"mississippi\") == \"hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"hiss\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\nc++\nC++\nc\nc#\") == 3\nassert solution(\"5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux\") == 5\n\"\"\"\n\n\"\"\"\nimport re\n\nn = int(input())\na = set()\nfor _ in range(n):\n    a.add(re.sub(r\"\\W+\", \"\", input()))\nprint(len(a))\n\"\"\"\n\nn = int(input())\nwords = set()\nfor _ in range(n):\n    words.add(input())\nprint(len(words))\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nc++\\nC++\\nc\\nC#\") == \"3\"\nassert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\n2\\n2\\n2\\n2\\n\") == \"3\"\nassert solution(\"5\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\\n\") == \"5\"\nassert solution(\"5\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\n\") == \"3\"\nassert solution(\"5\\nc\\nc\\nc\\n\") == \"5\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nassert solution('5\\nc++\\nC++\\nc\\nc#\\nArtificial intelligence') == '5'\n\n------\n\nimport sys"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nC#\") == \"3\"\nassert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n\"c++\"\\n\"C++\"\\n\"c\"\\n\"C#\"\\n') == '3'\nassert solution('5\\n\"cryptography\"\\n\"blockchain\"\\n\"Artificial intelligence\"\\n\"Machine-Learning\"\\n\"Linux\"\\n') == '5'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\n\") == 3\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n02\n\"\nWrite a function that finds the longest palindromic substring of a given string. The function will take in a single parameter, a string, and will return the longest palindromic substring contained in that string.\"\n\n-----Input-----\nA string containing only uppercase and lowercase English letters.\n-----Output-----\nA string containing the longest palindromic substring contained in the input string.\n\n-----Examples-----\nSample Input 1:\nabcbccbadefegdehijhklij\nSample Output 1:\nbcbadefegde\n\nSample Input 2:\nabccbadefegdehijhklij\nSample Output 2:\nbcbadefegde\n\nSample Input 3:\nzzz\nSample Output 3:\nz\n\nSample Input 4:\nccc\nSample Output 4:\nc\n\nSample Input 5:\naa\nSample Output 5:\na\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n03\n\"\nGiven a number of squares, a and b, output the number of ways we can arrange them on a number line so that all squares lie in between the two points (a, 0) and (b, 0).\n\nA solution requires at least 1 square, and no more than 10000 squares. If there are no solutions, output -1.\n\n-----Input-----\nThe first line contains two integers, a and b, the minimum and maximum values for a and b.\n-----Output-----\nThe only line of output must contain the number of ways in which we can arrange the squares.\n\n-----Examples-----\nSample Input 1:\n1 10\nSample Output 1:\n1\n\nSample Input 2:\n2 2\nSample Output 2:\n1\n\nSample Input 3:\n1 1\nSample Output 3:\n-1\n\nSample Input 4:\n3 3\nSample Output 4:\n2\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n04\n\"\nWrite a function that takes a positive integer n (n\u22651) as a parameter and outputs the sum of the squares of the first n natural numbers.\n\n-----Input-----\nA single integer that is guaranteed to be greater than or equal to 1.\n-----Output-----\nThe sum of the squares of the first n natural numbers.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n1\n\nSample Input 2:\n2\nSample Output 2:\n5\n\nSample Input 3:\n3\nSample Output 3:\n25\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n05\n\"\nA string is a palindrome if it is identical forward and backwards. For instance, the string \u201canna\u201d is a palindrome, whereas the string \u201cracecar\u201d is not.\n\nWrite a function that checks if a given string is a palindrome. If it is a palindrome, the function must return True, otherwise it must return False.\n\n-----Input-----\nA single line string with no more than 255 characters and the following special characters: space, new line, tab, backslash, comma, and double quote.\n-----Output-----\nA boolean value, either True or False.\n\n-----Examples-----\nSample Input 1:\nabba\nSample Output 1:\nTrue\n\nSample Input 2:\n\"anna\"\nSample Output 2:\nTrue\n\nSample Input 3:\n\"abcdefghijklmnopqrstuvwxyz\"\nSample Output 3:\nFalse\n\nSample Input 4:\nracecar\nSample Output 4:\nFalse\n\nSample Input 5:\nA\nSample Output 5:\nFalse\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n06\n\"\nWrite a function that checks if a given string is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once.\n\nFor example, the sentence \"The quick brown fox jumps over the lazy dog\" is a pangram, because it uses the letters A-Z at least once (case is irrelevant).\n\n-----Input-----\nA single line string with no more than 255 characters and the following special characters: space, new line, tab, backslash, comma, and double quote.\n-----Output-----\nA boolean value, either True or False.\n\n-----Examples-----\nSample Input 1:\nWe promptly judged antique ivory buckles for the next prize\nSample Output 1:\nTrue\n\nSample Input 2:\nWe promptly judged antique ivory buckles for the prize\nSample Output 2:\nFalse\n\nSample Input 3:\nWe promptly judged antique ivory buckles for the prize\nSample Output 3:\nFalse\n\nSample Input 4:\nWe promptly judged antique ivory buckles for the prize\nSample Output 4:\nFalse\n\nSample Input 5:\nWe promptly judged antique ivory buckles for the prize\nSample Output 5:\nTrue\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n07\n\"\nGiven a positive integer n, write a function that returns True if n is a perfect square and False if it is not.\n\nA perfect square is an integer that can be expressed as the square of a positive integer. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\n\nNote: Do not use any built-in library function such as sqrt.\n\n-----Input-----\nA single integer, n (0 < n < 100,000)\n-----Output-----\nA boolean value, either True or False.\n\n-----Examples-----\nSample Input 1:\n3\nSample Output 1:\nFalse\n\nSample Input 2:\n4\nSample Output 2:\nTrue\n\nSample Input 3:\n15\nSample Output 3:\nFalse\n\nSample Input 4:\n25\nSample Output 4:\nTrue\n\nSample Input 5:\n13\nSample Output 5:\nTrue\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n08\n\"\nWrite a function that checks if a given string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n\nYou can ignore casing and non-letter characters.\n\n-----Input-----\nA single line string with no more than 255 characters and the following special characters: space, new line, tab, backslash, comma, and double quote.\n-----Output-----\nA boolean value, either True or False.\n\n-----Examples-----\nSample Input 1:\nTact Coa\nSample Output 1:\nTrue\n\nSample Input 2:\ntaco cat\nSample Output 2:\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nC++\\nC++\\nC\\nC#') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\nprint('Passed')\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == '5'\n\"\"\"\n\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\ndic = {}\nfor i in range(n):\n    s = sys.stdin.readline().rstrip()\n    dic[s] = 1\nans = 0\nfor s1 in dic:\n    for s2 in dic:\n        if s1 == s2 or s1.replace('-','') == s2 or s1.replace('-','').upper() == s2 or s2.replace('-','') == s1 or s2.replace('-','').upper() == s1:\n            ans += 1\nprint(ans)\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n\nprint(solution('TCGTTC'))\nprint(solution('CCC'))\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n\nprint('Success')\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TGG\") == 9\nassert solution(\"TTCTT\") == 3\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TCCTTC\") == 9\nassert solution(\"TCCT\") == 7\n\"\"\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CC\") == 9\nassert solution(\"TTT\") == 21\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"TCC\") == \"7\"\nassert solution(\"TGGCGT\") == \"21\"\n\nprint(solution(\"TCCG\"))\n\nSample Input 2:\nGTCGTC\nSample Output 2:\n\"7\"\nprint(solution(\"GTCGTC\"))\n\nSample Input 3:\nTTCGTCGTCGTGTCG\nSample Output 3:\n\"21\"\nprint(solution(\"TTCGTCGTCGTGTCG\"))\n\nSample Input 4:\nGTCGTCGTCGTGTCGTCGTGTCGT\nSample Output 4:\n\"63\"\nprint(solution(\"GTCGTCGTCGTGTCGTCGTGTCGT\"))\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\"\n\nfrom collections import Counter\n\nassert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('315 45') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"350\\n95\") == \"179\"\nassert solution(\"350\\n95\") == \"179\"\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\nassert solution('180\\n-270') == '-90'\nassert solution('270\\n90') == '180'\nassert solution('-270\\n90') == '-90'"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\nassert solution(\"180\\n90\") == \"180\"\nassert solution(\"315\\n45\\n90\\n90\\n180\\n90\") == \"90\"\nassert solution(\"0\\n360\\n45\\n0\") == \"180\"\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\nassert solution(\"0\", \"360\") == \"0\"\nassert solution(\"180\", \"180\") == \"0\"\n\"\"\"\nfrom math import atan, atan2, degrees"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"31545\") == \"90\"\nassert solution(\"270\") == \"90\"\nassert solution(\"180270\") == \"180\"\nassert solution(\"31545\") == \"90\"\nassert solution(\"45\") == \"90\"\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\n\n'''"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('315', '45') == '90'\nassert solution('180', '270') == '90'\nassert solution('0', '360') == '0'\nassert solution('180', '90') == '180'\nassert solution('45', '360') == '-90'\n\"\"\"\n\nfrom math import atan, pi"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\nassert solution('180\\n360') == '0'\nassert solution('360\\n180') == '-90'\nassert solution('180\\n0') == '0'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"0\"\nassert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"0\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'''5\n1\n23\n18\n13\n99'''\n) == '3'\nprint('Test pass.')"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == '3'\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\nassert solution('5\\n1\\n23\\n18\\n13\\n55') == '1'\nassert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == '1'\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"5\\n1\\n23\\n18\\n13\\n99\"\n) == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBB\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WWWWBBW\") == \"1\"\nassert solution(\"WWWBBBWW\") == \"0\"\nassert solution(\"WWBBWWBWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWBBWWW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWBWBB\") == 1\nassert solution(\"WWWWBBW\") == 0\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBBW\") == \"1\"\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWW\") == \"0\"\nassert solution(\"WWBWBWW\") == \"0\"\nassert solution(\"BBWBWBW\") == \"0\"\nassert solution(\"BBWBWWW\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBWW\") == \"0\"\nassert solution(\"WBBWWW\") == \"1\"\nassert solution(\"WBBWBB\") == \"1\"\nassert solution(\"WWBBBW\") == \"0\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWBWBB\") == 1\nassert solution(\"WWWWBBW\") == 0\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBWWBW\") == \"1\"\n\n\"\"\"\nfrom typing import List\nimport re\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WWBWBB') == '1'\nassert solution('WWWWBBW') == '0'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\"\n\na, b, c, d = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1\") == \"1.299038105676658\"\nassert solution(\"3 3 3 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 2 3') == '6'\nassert solution('1 2 1 1') == '1.299038105676658'\nprint('Success')\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3, 3, 3, 3) == 9\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\nprint('Passed all tests.')\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3 2 1 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"abccba\") == \"abccba\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrroooobert\") == \"robert\"\nassert solution(\"roboobert\") == \"robert\"\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('abcabc') == 'abc'\nassert solution('abcabcabc') == 'abc'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"robert\") == \"robert\"\n\nassert solution(\"rooobert\") == \"robert\"\n\nassert solution(\"roooobert\") == \"robert\"\n\nassert solution(\"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('roooobert') == 'robert'\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, inString: str):\n        outString = \"\"\n        prev = \"\"\n        for c in inString:\n            if prev == c:\n                continue\n            else:\n                outString += c\n                prev = c\n        return outString\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution.solution('robert'), 'robert')\n        self.assertEqual(self.solution.solution('rooobert'), 'robert')\n        self."
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rjhtg') == 'rjhtg'\nassert solution('rjhtgf') == 'rjhtgf'\nassert solution('rrrooobbbert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roobert') == 'robert'\nassert solution('rrroobert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('roboobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin='robert') == 'robert'\nassert solution(stdin='rooobert') == 'robert'\n\nassert solution(stdin='robertapalaxiamethostenes') == 'rpoalxhstmnts'\nassert solution(stdin='robertapalaxiamethostenes') == 'rpnoalxhstmnts'\nassert solution(stdin='robertapalaxiamethostenisss') == 'rpnoalxhstmnts'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nimport sys\n\ns, v1, v2 = sys.stdin.read().splitlines()\ns, v1, v2 = int(s), int(v1), int(v2)"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\n\"\"\"\n\na, b, c = map(int, input().split())\n\na_q, b_q = a//b, c//b\na_r, b_r = a % b, b % b\n\nprint(\"Impossible\") if a_q > a_r or b_q > b_r else print(a_q, b_q)\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"1000 9 7\") == \"108 4\"\nassert solution(\n\"1000 900 7\") == \"Impossible\"\n\"\"\"\n\nfrom collections import namedtuple\n\nNumber = namedtuple('Number', ['size', 'volume', 'count'])"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 9 7') == '108 4'"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\"\n\nfrom collections import namedtuple\n\nBOTTLE = namedtuple('Bottle', ['size', 'volume'])"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1 1 2 1 0\"\n\"\"\"\n\n\"\"\"\n7.9 \u2013 Ponte pi\u00f9 lunga: scrivi un programma che data in ingresso una sequenza di interi, identifica il numero di ponte pi\u00f9 lunga della sequenza e visualizzi tale numero.\n\nAd esempio, se il programma riceve in input la sequenza [2,1,2,1,2,1,2,2,2,1,2,1,2,1,2,1,1,1,2,2,1,1,2,1,1,2,2,2,2,1,2,1,2,1,2,1,1,2,1,1,2,2,1,1,2,2,2,2,1,2,1,1,2,2,2,1,2,1,1,2,1,2,2,2,2,1,2,1,2,2,2,2,2,2,1,1,2,1,2,2,1,2,1,1,1,2,2,1,1,2,1,2,2,2,2,1,2,1,2,1,2,1,1,2,2,2,2,2,2,2,2,2,1,2,1,1,1,1,1,2,1,1,2,1,2,2,2,1,2,1,2,2,2,2,1,2,1,1,1,1,2,1,2,1,2,2,1,2,2,1,2,1,2,2,2,2,1,2,2,2,2,1,1,2,2,1,1,2,2,2,2,1,1,2,1,1,2,2,2,2,2,2,1,1,1,2,2,2,1,2,2,1,1,1,2,2,1,1,1,2,2,1,1,2,2,1,2,1,2,1,2,2,1,1,2,1,1,2,2,2,2,2,2,1,2,1,1,2,2,2,2,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,1,1,1,1,2,2,1,1,2,1,2,2,2,1,2,2,2,1,1,2,2,1,2,1,1,2,1,1,2,1,2,2,2,2,2,1,1,2,1,1,2,1,2,1,2,2,2,1,2,2,1,1,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,2,2,2,2,2,2,1,2,1,2,2,1,2,1,2,1,1,2,1,2,2,2,2,2,2,2,1,2,1,1,1,2,2,1,1,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,1,1,2,1,1,2,1,2,2,1,1,1,2,1,1,1,1,1,1,2,2,1,1,2,1,2,2,1,1,1,2,1,2,2,2,2,1,2,1,2,2,2,1,1,1,2,2,2,2,1,1,2,2,1,1,1,1,1,1,2,1,1,1,2,2,2,1,2,1,2,1,1,1,2,2,2,1,2,1,2,2,1,2,1,1,2,1,1,1,2,1,1,2,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,1,1,2,1,1,2,2,1,2,1,1,2,1,1,2,2,1,1,2,1,2,1,2,1,1,2,2,2,2,1,1,2,2,2,1,2,1,2,2,2,1,2,1,1,1,2,2,2,1,2,2,2,2,1,2,2,1,1,1,1,1,2,2,2,1,2,1,1,2,2,2,1,1,2,2,1,2,2,1,2,1,2,2,1,2,2,1,2,2,1,1,2,1,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,1,1,1,2,1,2,2,1,2,2,1,1,1,1,1,1,2,2,1,1,2,1,2,2,1,2,1,2,1,2,1,1,1,2,1,2,2,2,1,1,1,2,1,1,2,1,1,2,2,1,2,1,2,1,2,1,1,1,1,2,2,1,1,2,2,1,2,1,1,1,2,1,1,2,1,2,2,2,1,1"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\\n\") == \"1\\n1\\n2\\n1\\n0\\n\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"9\\n0\\n0\\n0\\n0\\n\"\nassert solution(\"2 2\\n.\\nX\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"2 2\\n.\\nX\\n.\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"2 2\\n.\\nX\\n.\\nX\\n\") == \"0\\n0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"4 4\\n\"\n\"#..#\\n\"\n\"..X.\\n\"\n\"..X.\\n\"\n\"#XX#\"\n) == \"1\\n\" + \"1\\n\" + \"2\\n\" + \"1\\n\" + \"0\\n\"\nprint(\"Test 1 OK.\")\n\nassert solution(\n\"4 4\\n\"\n\"....\\n\"\n\"....\\n\"\n\"....\\n\"\n\"....\"\n) == \"9\\n\" + \"0\\n\" + \"0\\n\" + \"0\\n\" + \"0\"\nprint(\"Test 2 OK.\")\n\nassert solution(\n\"4 4\\n\"\n\"#...\\n\"\n\"#...\\n\"\n\"#...\\n\"\n\"#...\"\n) == \"1\\n\" + \"0\\n\" + \"0\\n\" + \"0\\n\" + \"0\"\nprint(\"Test 3 OK.\")\n\nassert solution(\n\"5 5\\n\"\n\"#...#\\n\"\n\"#...#\\n\"\n\"#...#\\n\"\n\"#...#\\n\"\n\"#...#\"\n) == \"9\\n\" + \"0\\n\" + \"0\\n\" + \"0\\n\" + \"0\\n\" + \"0\"\nprint(\"Test 4 OK.\")\n\nassert solution(\n\"5 5\\n\"\n\".....\\n\"\n\".....\\n\"\n\".....\\n\"\n\".....\\n\"\n\".....\"\n) == \"9\\n\" + \"0\\n\" + \"0\\n\" + \"0\\n\" + \"0\\n\" + \"0\"\nprint(\"Test 5 OK.\")"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nimport sys; input = sys.stdin.readline\nassert solution(input()) == \"9\\n0\\n0\\n0\\n0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n..#\\n..X\\n..X\\n#XX\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n212\n1253\"\"\") == '1953566'\nassert solution(\"\"\"5\n23\n17\n43\n52\n22\"\"\") == '102'\n\"\"\"\n\nn = int(input())\npow_sum = 0\nfor i in range(n):\n    pow_sum += int(input()) ** n\nprint(pow_sum)"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('212\\n1253') == '1953566'\nprint(solution(stdin))"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n212\\n1253\") == \"1953566\"\nassert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('212\\n1253') == '1953566'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"2\", \"1253\"]) == \"1953566\"\n\"\"\"\n\nN = int(input())\ndata = []\nfor i in range(N):\n    data.append(input())"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"212 1253\") == \"1953566\"\nprint(solution(\"212 1253\"))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nprint(solution(\"212\\n1253\"))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nassert solution(\"23\\n17\\n43\\n52\\n22\") == \"102\"\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10\\\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\nprint(\"Success\")\n'''\nA = [float(i) for i in input().split()]\nI = [float(i) for i in input().split()]\n\nO, A, P = A\nC = I\n\nwhile True:\n    if sum([int(i) for i in C]) > A:\n        for i in range(3):\n            C[i] = str(round(C[i] - (A/sum([int(i) for i in C])), 5))\n            if C[i] < 0.1:\n                C[i] = 0.0\n            elif C[i] < 1.0:\n                C[i] = 1.0\n    else:\n        break\n\nprint(\" \".join(C))"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\n\u043d\u0430\u0439\u0442\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432 \u0446\u0435\u043b\u044b\u0445 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \n(\u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 50 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0442\u043e \u043e\u043d\u0430 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043e 50 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e \u0447\u0435\u0442\u044b\u0440\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443)\n\"\"\"\n\"\"\"\nstdin = input()\nnumbers = stdin[1:].split()\nnumbers = [int(i) for i in numbers]\nprint(f'{numbers}')\na = 1\nfor i in numbers:\n    a *= i\nprint(a)\n\"\"\"\n\nstdin = input()\nnumbers = stdin[1:].split()\nprint(numbers)\na = 1\nfor i in numbers:\n    a *= int(i)\nprint(a)\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10\\\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\"\"\"\n\n\"\"\"\n## Solutions"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\n\n\"\"\"\n\nA, B, C = map(int, stdin.readline().strip().split())\nI, J, K = map(int, stdin.readline().strip().split())"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '''10 10 10'''\n) == '''0.000000 0.000000 0.000000'''\nassert solution(\n    '''9 9 9'''\n) == '''0.000000 3.000000 6.000000'''"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.000000 0.000000 0.000000\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\"\"\"\nimport math\n\nA, B, C = map(int, input().split())\nI, J, K = map(int, input().split())\n\norange = A * I\napple = B * J\npineapple = C * K\n\nprint(math.floor(orange % 1), end=\" \")\nprint(math.floor(apple % 1), end=\" \")\nprint(math.floor(pineapple % 1))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 10') == '0.0 0.0 0.0'\nassert solution('9 9 9') == '0.0 3.0 6.0'\nassert solution('8 8 8') == '0.0 0.0 0.0'\nassert solution('6 6 6') == '0.0 0.0 0.0'\nassert solution('2 2 2') == '0.0 0.0 0.0'\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\n\"\"\"\nfrom math import ceil, floor\n\nA, B, C = map(int, stdin.readline().split())\nI, J, K = map(int, stdin.readline().split())\n\nC = ceil(C * (I / J))\nA = floor(A * (K / J))\nB = floor(B * (K / J))\n\nprint(\"{:.6f} {:.6f} {:.6f}\".format(A - C, B - C, C - A - B))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\n\nprint('Success')\n\n-----Discussion-----\n\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\nSample Input 3:\nfoss<<rritun\nSample Output 3:\nforritun\n\n'''\n\nimport math"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nassert solution('lorem<ipsum<dolor') == 'loremipsuldol'"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a<bc<') == 'bc'\nassert solution('foss<<rritun') == 'forritun'\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a<bc<\") == \"bc\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"foss<rritun\") == \"foss<ritun\"\n\nSample Input 3:\ngigit\nSample Output 3:\ngi"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nprint(solution(\"a<bc<\"))\nprint(solution(\"foss<<rritun\"))\n\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Rivest-Shamir-Adleman\") == \"RSA\"\n\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nassert solution(\"P-Opt\") == \"PO\"\nassert solution(\"F-Act\") == \"FA\"\n\nassert solution(\"D-Divide\") == \"DV\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a-b-c') == 'abc'\nassert solution('KMP') == 'KMP'\nassert solution('K-M-P') == 'KMP'\nassert solution('Knuth-Morris-Pratt') == 'KMP'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Rivest-Shamir-Adleman\") == \"RSA\"\nassert solution(\"Bertrand-Pueys\") == \"BP\"\nassert solution(\"Bertrand-Pueys-Trul\") == \"BPT\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\nassert solution('Homer-Simpson') == 'HS'\n\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"0 0 0\") == \"Estate or Copper\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"1 0 1\") == \"Province or Gold\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 1\") == \"Province\"\nassert solution(\"2 1 2\") == \"Duchy\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('1 1 1') == 'Province or Gold'\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 1') == 'Province or Gold'\nassert solution('2 2 0') == 'Province or Copper'\nassert solution('2 2 2') == 'Province or Gold'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 2\") == \"Estate or Copper\"\nassert solution(\"1 2 1\") == \"Province or Gold\"\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 2 0') == 'Province or Gold'\nassert solution('3 0 1') == 'Province or Silver'\nassert solution('0 0 2') == 'Province or Silver'\n\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 1 1') == 'Province or Gold'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 1 1\") == \"Duchy or Silver\"\nassert solution(\"0 0 0\") == \"Copper\"\nassert solution(\"3 1 2\") == \"Estate or Province\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n\nG, S, C = [int(x) for x in input().split()]"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 2 0\") == \"Province or Gold\"\nassert solution(\"0 1 1\") == \"Province or Gold\"\nassert solution(\"0 1 2\") == \"Province or Copper\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.00'\nassert solution('10 3\\n80 90\\n') == '75.7142857'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'impossible'\nassert solution('1 1\\n10 5') == '5'"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\nprint(solution(stdin))\n\n#######################\n## EXERCISE 2.4\n#######################\n\nimport sys\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n80 90\") == \"75.7142857\"\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\nprint('The local tests are done. Try to solve the problem yourself and see if you can get a value close to the local tests values.')\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\nd, s = input().split()\nd, s = int(d), int(s)\n\ncount = k // n\nleft_num = k - (count * n)"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\nprint('Success')\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\na, b = map(int, input().split())\nx, y = map(int, input().split())\n\nprint(y * a + x * b)\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('6 10') == 'impossible'\nassert solution('2 3') == 'impossible'\nassert solution('2 2') == '90.00'\nassert solution('7 5') == '30.00'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4'\nassert solution('1 2 3 4 5') == '5'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2, 3, 1, 5, 4, 7, 6\") == \"4, 2, 3, 5, 7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\nassert solution(\"1\\n3\") == \"1\\n3\"\nassert solution(\"2\\n1 2\") == \"2\\n1 2\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nnums = list(map(int, stdin.readline().strip().split()))\nstack = []\nfor i in range(len(nums)):\n    while stack and nums[stack[-1]] < nums[i]:\n        stack.pop()\n    if not stack:\n        stack.append(i)\n    else:\n        print(i - stack[-1])\n        for _ in range(stack[-1] + 1, i):\n            print(nums[stack[-1]])\n            stack.append(stack[-1])\n        stack.append(i)\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 5 4 7 6\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2 1 5 4 7 6\") == '4 2 3 5 7'\nassert solution(\"5 1 2 3 4\") == '1 2 3 4 5'\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2,3,1,5,4,7,6\") == \"2,3,5,7\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7\n2 3 1 5 4 7 6''') == '4\\n2 3 5 7'\nassert solution('''1\n2 3 4 5 6 7''') == '5\\n1 2 3 4 5'\nassert solution('''3\n1 2 3''') == '3\\n1 2 3'\nassert solution('''5\n2 1 3 4 5''') == '5\\n2 1 3 4 5'\n\nprint(solution(input()))\n\n=======\n=======\n>>>>>>> dcfd30b13974d4896eea9a8c02c74b57e8b52f5b\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 1 5 4 7 6') == '4', 'Test 1 Failed'\nassert solution('1 2 3 4 5') == '5', 'Test 2 Failed'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10', 'Test 3 Failed'\n\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\"\"\"\n\nh, m = [int(x) for x in stdin.split()]\nprint(h-45, m+15)\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10\") == \"9 25\"\n\nSample Input 1:\n10 20\nSample Output 1:\n9 40\nassert solution(\"10 20\") == \"9 40\"\n\nSample Input 2:\n0 30\nSample Output 2:\n23 45\nassert solution(\"0 30\") == \"23 45\"\n\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"23 45\") == \"0 30\"\nassert solution(\"6 11\") == \"5 40\"\nassert solution(\"12 1\") == \"11 40\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"7 22\") == \"6 49\"\nassert solution(\"21 22\") == \"18 57\"\nassert solution(\"23 23\") == \"0 0\"\n\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nprint('Test pass.')\n\n----\n\"\"\"\n\nh1, m1 = map(int, stdin.split())\nh2 = h1 + 45 // 60\nm2 = m1 + 45 % 60\nprint(h2, m2)\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\nimport time"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('9 0') == '8 45'\nassert solution('23 45') == '22 44'"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\n'''"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2.718281) == 1.414214\nassert solution(0.36788) == 1.0\n'''"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.718281') == '2.718281'\nassert solution('0.36788') == '1.141414'\n\"\"\"\n\nfrom math import e\nimport unittest\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.000000') == '1.414214'\n\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2.718281\") == \"1.414214\"\n\nprint(solution(\"2.718281\"))\n\n-----Solution-----\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom util.error import error\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.414213'\nassert solution('4.800000') == '2.0'\n\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nprint('Success')\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.000000') == '1.414214'\n\"\"\"\nimport math\nimport sys\n\nn = float(sys.stdin.readline())\nprint(f'{math.pow(n, math.infty):.6f}')\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('3') == '3\\n2,1\\n'\nassert solution('50') == '50\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\\n'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3:','sample 1'\nassert solution('50') == '50:','sample 2'\n\nprint('Success')\n\n--------------------------------------------------\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\nT = int(input())\nfor i in range(T):\n    S = int(input())\n    a = ''\n    if S % 2 == 1:\n        print(S, ':')\n        for j in range(1, S // 2 + 1):\n            a = ','.join([str(j), str(S - j)])\n            print(a)\n    else:\n        print(S, ':')\n        for j in range(1, S // 2):\n            a = ','.join([str(j), str(S - j)])\n            print(a)\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '3\\n2,1'\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3:\", \"WA, 3\"\nassert solution(\"50\") == \"50:\", \"WA, 50\"\nassert solution(\"1\") == \"1:\", \"WA, 1\"\n\nprint(\"Success!\")\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"100\") == \"100:\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3: 2,1\\n\"\nassert solution(\"50\") == \"50: 2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3:\", 'Wrong output'\nassert solution(\"50\") == \"50:\", 'Wrong output'\n\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3:', 'check 1'\nassert solution('50') == '50:', 'check 2'\n\n\"\"\"\n\nstdin = input()\n\nstdin = int(stdin)\n\narr = []\n\nfor i in range(stdin):\n    arr.append([])\n\nfor i in range(stdin):\n    arr[i].append(i+1)"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3: \"\nassert solution(\"2,1\") == \"2,1: \"\nassert solution(\"5\") == \"5: \"\nassert solution(\"2,1\") == \"2,1: \"\nassert solution(\"50\") == \"50: \"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3:2,1\"\nassert solution(\"50\") == \"50:2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n\nimport sys\nimport re\nfrom typing import List"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n\nimport sys\nfrom typing import List, Dict"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == 'yes'\n\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('RBRR') == 'RRR'\nassert solution('RBRRB') == 'RRRRB'\nassert solution('RBRRBL') == 'RRRRBLL'\n\"\"\"\nimport re\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('RBRRBRLLR') == 'CHCS'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('RRRRRRRRRRR') == 'CHCS'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\"\n\n\"\"\"\nTLE\nimport collections"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('RRRRRRRRR') == 'SSSSSSSSS'\nassert solution('RLLLLRRRR') == 'CHCCHCSH'\nassert solution('RLLLLRRRRRRRRRRRRRR') == 'SSSSSSSSSSSSSSSSSSS'\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\nprint(solution(\"2 4 7\"))\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n\nX, Y, N = map(int, sys.argv[1].split())\n\nfor i in range(1, N + 1):\n    if i % X == 0 and i % Y == 0:\n        print(\"FizzBuzz\")\n    elif i % X == 0:\n        print(\"Fizz\")\n    elif i % Y == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3 7''') == '''1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7'''\nassert solution('''2 4 7''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7'''\nassert solution('''4 7 20''') == '''1\nFizz\nBuzz\nFizz\n7\nFizz\nBuzz\nFizz\n9\nFizz\n11\nFizz\n13\nFizz\n15\nFizz\n17\nFizz\n19\nFizz\nFizz\n22\nFizz\nBuzz\nFizz\n23\nFizz\n25\nFizz\n27\nFizz\n29\nFizz\nFizz\n31\nFizz\n33\nFizz\n35\nFizz\nFizz\n37\nFizz\nFizz\n39\nFizz\nFizz\n41\nFizz\nFizz\n43\nFizz\nFizz\n45\nFizz\nFizz\n47\nFizz\nFizz\n49\nFizz\nFizz\n51\nFizz\nFizz\n53\nFizz\nFizz\n55\nFizz\nFizz\n57\nFizz\nFizz\n59\nFizz\nFizz\n61\nFizz\nFizz\n63\nFizz\nFizz\n65\nFizz\nFizz\n67\nFizz\nFizz\n69\nFizz\nFizz\n71\nFizz\nFizz\n73\nFizz\nFizz\n75\nFizz\nFizz\n77\nFizz\nFizz\n79\nFizz\nFizz\n81\nFizz\nFizz\n83\nFizz\nFizz\n85\nFizz\nFizz\n87\nFizz\nFizz\n89\nFizz\nFizz\n91\nFizz\nFizz\n93\nFizz\nFizz\n95\nFizz\nFizz\n97\nFizz\nFizz\n99\nFizz\nFizz\n101\nFizz\nFizz\n103\nFizz\nFizz\n105\nFizz\nFizz\n107\nFizz\nFizz\n109\nFizz\nFizz\n111\nFizz\nFizz\n113\nFizz\nFizz\n115\nFizz\nFizz\n117\nFizz\nFizz\n119\nFizz\nFizz\n121\nFizz\nFizz\n123\nFizz\nFizz\n125\nFizz\nFizz\n127\nFizz\nFizz\n129\nFizz\nFizz\n131\nFizz\nFizz\n133\nFizz\nFizz\n135\nFizz\nFizz\n137\nFizz\nFizz\n139\nFizz\nFizz\n141\nFizz\nFizz\n143\nFizz\nFizz\n145\nFizz\nFizz\n147\nFizz\nFizz\n149\nFizz\nFizz\n151\nFizz\nFizz\n153\nFizz\nFizz\n155\nFizz\nFizz\n157\nFizz\nFizz\n159\nFizz\nFizz\n161\nFizz\nFizz\n163\nFizz\nFizz\n165\nFizz\nFizz\n167\nFizz\nFizz\n169\nFizz\nFizz\n171\nFizz\nFizz\n173\nFizz\nFizz\n175\nFizz\nFizz\n177\nFizz\nFizz\n179\nFizz\nFizz\n181\nFizz\nFizz\n183\nFizz\nFizz\n185\nFizz\nFizz\n187\nFizz\nFizz\n189\nFizz\nFizz\n191\nFizz\nFizz\n193\nFizz\nFizz\n195\nFizz\nFizz\n197\nFizz\nFizz\n199\nFizz\nFizz'''"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n'\n\nprint(solution('2 3 7'))\nprint(solution('2 4 7'))\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 7\") == \"\"\"\\\n1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\\\n\"\"\"\n\nassert solution(\"2 4 7\") == \"\"\"\\\n1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\\\n\"\"\"\n\n\"\"\"\nProblem Statement\n\nWrite a program to print the integers from 1 to 1000.\n\nHowever, for multiples of three, print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\".\n\nFor numbers which are multiples of both three and five print \"FizzBuzz\".\n\nYou need to implement a function which prints these strings."
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n\nassert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 2\n3 3 3 2''') == 'It hadn't snowed this early in 3 years!'\nassert solution('''2 10\n0 100''') == 'It hadn't snowed this early in 0 years!'\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\n'''\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\nimport sys\nfrom itertools import groupby"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\nassert solution('2 10\\n1 100') == 'It hadn\\'t snowed this early in 2 years!'\n\n-----Solution-----\n'''\n\nn, dm = [int(x) for x in stdin.readline().strip().split()]\ncount = 0\nfor i in [int(x) for x in stdin.readline().strip().split()]:\n    if i < dm:\n        count += 1\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\nassert solution('1 1\\n100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '7'\nassert solution('10 2') == '2'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n10 2\n\"\"\"\n) == 2\n\"\"\"\n\n\"\"\"\n)\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 2\\n') == '7'\nassert solution('10 10\\n') == '7'\n\nprint(solution(stdin))"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == 2\n\"\"\"\n\ns, n = input().split()\ns, n = int(s), int(n)\n\nnum_rounds = 0\nwhile n!= 1:\n    if n % 2 == 1:\n        n -= 1\n    n //= 2\n    num_rounds += 1\n\nprint(num_rounds + (s - num_rounds) % 2)\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"7\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10') == '7'\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == 4\nassert solution('7 7') == 7\nassert solution('6 10') == 4\nassert solution('8 10') == 3\nassert solution('9 10') == 2"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"abk\") == \"abk\"\n\nprint('Successfully passed all tests')\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"bxgjmhnvymwz\") == \"bxgjmhnvymwz\"\nassert solution(\"xxxyyyyxyyx\") == \"xxxyyyyxyyx\"\nassert solution(\"iiixiixiixi\") == \"iiixiixiixi\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nprint(\"Test passed\")\n\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"k\") == \"k\"\nassert solution(\"kik\") == \"kik\"\nassert solution(\"kokaszkasza\") == \"kokaszkasza\"\n\"\"\""
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"koasas\") == \"koasas\"\nassert solution(\"\") == \"\"\nassert solution(\"kdsjkdjkjd\") == \"kdsjkdjkjd\"\n\n------Problem------\nLittle Marica got a new e-mail and wants to decipher it. Help her!\n\nEach e-mail is a matrix with $n \\times c$ dimensions. Each element of the matrix can be any ASCII character. The e-mail must be deciphered from column-major order (you can ignore the letters in the header and in the footer).\n\nFor example, the e-mail above is encoded like this (note that there are spaces between every column):\n\n>>> e-mail = [\n... \"w a\",\n... \"h r\",\n... \"c s\",\n... \"e b\",\n... \"a n\",\n... \"d e\",\n... \"a n\",\n... \"s w\",\n... \"c s\",\n... \"r r\",\n... \"b u\",\n... \"f f\",\n... \"e e\",\n... \"n a\",\n... \"h s\",\n... \"p m\",\n... \"t o\",\n... \"p l\",\n... \"t e\",\n... \"e s\",\n... \"b a\",\n... \"k r\",\n... \"j e\",\n... \"s t\",\n... \"d e\",\n... \"l i\",\n... \"t o\",\n... \"k e\",\n... \"l t\",\n... \"b i\",\n... \"g l\",\n... \"s a\",\n... \"s a\",\n... \"n i\",\n... \"r s\",\n... \"l i\",\n... \"o n\",\n... \"p p\",\n... \"n o\",\n... \"m u\",\n... \"e l\",\n... \"b a\",\n... \"h r\",\n... \"c p\",\n... \"o k\",\n... \"e t\",\n... \"s n\",\n... \"m i\",\n... \"a n\",\n... \"s w\",\n... \"w h\",\n... \"c p\",\n... \"r g\",\n... \"w s\",\n... \"h a\",\n... \"r c\",\n... \"o a\",\n... \"r e\",\n... \"e a\",\n... \"e d\",\n... \"h p\",\n... \"e i\",\n... \"e p\",\n... \"e s\",\n... \"w a\",\n... \"h p\",\n... \"w a\",\n... \"e d\",\n... \"w a\",\n... \"b i\",\n... \"w a\",\n... \"b g\",\n... \"o a\",\n... \"a e\",\n... \"s n\",\n... \"n n\",\n... \"a h\",\n... \"c e\",\n... \"s n\",\n... \"k n\",\n... \"s c\",\n... \"h p\",\n... \"o n\",\n... \"h n\",\n... \"w g\",\n... \"c p\",\n... \"w a\",\n... \"w i\",\n... \"c i\",\n... \"o t\",\n... \"o i\",\n... \"a o\",\n... \"t a\",\n... \"g h\",\n... \"w i\",\n... \"w a\",\n... \"o t\",\n... \"o p\",\n... \"w a\",\n... \"w i\",\n... \"o o\",\n... \"w i\",\n... \"n i\",\n... \"n e\",\n... \"g n\",\n... \"w i\",\n... \"w o\",\n... \"w i\",\n... \"w h\",\n... \"o n\",\n... \"w a\",\n... \"s a\",\n... \"w i\",\n... \"w e\",\n... \"w g\",\n... \"w a\",\n... \"w i\",\n... \"w g\",\n... \"w o\",\n... \"w e\",\n... \"w n\",\n... \"w n\",\n... \"w g\",\n... \"o k\",\n... \"n n\",\n... \"w i\",\n... \"o o\",\n... \"w i\",\n... \"w g\",\n... \"o i\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o n\",\n... \"o"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"kakasi\") == \"kakosi\"\nassert solution(\"bokm\") == \"bokm\"\nassert solution(\"bokmko\") == \"bokmko\"\nassert solution(\"bokmkolu\") == \"bokmkolu\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 2\\n7 3\") == \"8 3\"\nassert solution(\"8 2\\n7 4\") == \"8 3\"\nassert solution(\"8 2\\n9 3\") == \"9 4\"\nassert solution(\"8 2\\n14 5\") == \"9 4\"\nassert solution(\"8 2\\n17 6\") == \"9 5\"\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '8 3'\nassert solution('6') == '8 2'\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\"\n\nfrom math import ceil, log2\n\nN = int(input())\nK = int(input())"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"8 2\"\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"8 2\"\n\"\"\"\n\n\"\"\"\nL = int(input())\nK = int(input())\n\nB = 0\nwhile (1 << B) < K:\n    B += 1\n\ni = B - 1\nwhile i >= 0:\n    if ((1 << i) + (1 << (i - 1))) > K:\n        break\n    i -= 1\n\nprint(B, (B - i) + 1)\n\"\"\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apples and pears\") == \"YES\"\nassert solution(\"oranges and peaches\") == \"NO\"\nassert solution(\"oranges and pears\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"tasty sprout\") == \"YES\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('stairs') == 'YES'\nassert solution('drought') == 'NO'\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''a\n2\nerres\nairs\nares\naires\neet\neat\n2\napples and pears\nplates of meat\n2\ntasty\nsprout\ndifficult route\nworried and troubled\nforever in doubt\napples and pears\n2\n''') == '''YES\nNO\nYES\nYES\nNO\nYES\n'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\"\nassert solution(\"drought\\n2\\naught ought aut acht\\nought oubt outte out oute\\n5\\ntasty sprout\\ndifficult route\\nworried and costly\\nforever in doubt\\napples and pears\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\"\nprint(\"All cases passed!\")\n\n\"\"\"\n\n\"\"\"\n    My solution:\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('stairs') == 'YES'\n\nassert solution('drought') == 'YES'\n\nassert solution('apple') == 'YES'\n\nassert solution('apples and pears') == 'YES'\n\nassert solution('tasty sprout') == 'YES'"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''drough\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and fraught\nforever in doubt\napples and pears\n''') == '''YES\nNO\nYES\nYES\nNO\n'''\nprint('Success')\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''drought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and frequent\napples and pears''') == '''YES\nNO\nYES\nYES\nNO'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"WIN\"\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == \"LOSE\"\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\n\"\"\"\n\nimport sys\nimport string\nfrom typing import List\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'WIN'\n\"\"\"\n\nstdin = \"\"\"\nBANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n') == 'LOSE'\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BANANA\") == \"WIN\"\nassert solution(\"TEST\") == \"LOSE\"\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"PROPERSECURITY\") == \"WIN\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('JOE') == 'INCREASING'\nassert solution('BOB') == 'DECREASING'\nassert solution('ANDY') == 'NEITHER'\nassert solution('AL') == 'DECREASING'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nprint('Passed!')\n\n-----Note-----\nThe tests were made by using the C++ implementation of the program.\n\n-----Hints-----\nWhat data structure can you use to check if the list is in increasing or decreasing order?\nYou can create a list of names, and then check if it's sorted.\n'''\n\nimport sys"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('3\\nJOE\\nMEGHAN\\nTOBIN') == 'INCREASING'\n\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\"\nimport math\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    ('stdin', 'expected'),\n    (\n            (\n                    \"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\",\n                    \"DECREASING\",\n            ),\n            (\n                    \"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\",\n                    \"NEITHER\",\n            ),\n    ),\n)\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\"\n\nimport collections\nimport operator\n\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(input())\n\nl.sort(key=operator.itemgetter(0))\nm = collections.Counter(l)\nprint(\"INCREASING\" if len(m) == n and all(map(lambda x: x[1] > 1, m.items())) else \"DECREASING\" if len(m) == n and all(map(lambda x: x[1] > 1, m.items())) else \"NEITHER\")\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\nassert solution(\"5\\nANDY\\nAL\\nADAM\") == \"INCREASING\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\\n\".join([\"5\", \"JOE\", \"BOB\", \"ANDY\", \"AL\", \"ADAM\"])) == \"DECREASING\"\nassert solution(\"\\n\".join([\"11\", \"HOPE\", \"ALI\", \"BECKY\", \"JULIE\", \"MEGHAN\", \"LAUREN\", \"MORGAN\", \"CARLI\", \"MEGAN\", \"ALEX\", \"TOBIN\"])) == \"NEITHER\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\nNo winner!\", \"Winners not listed in order\"\n\"\"\"\nimport re"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10 13') == 'George wins!'\nassert solution('4 10 13') == 'Jess wins!'\nassert solution('3 10 13') == 'No winner!'\nassert solution('4 10 13') == 'No winner!'\n\"\"\"\n\nfrom itertools import zip_longest\n\nn, p, m = map(int, input().split())\nscores = {}\nfor i in range(n):\n    name = input()\n    scores[name] = []\nfor i in range(m):\n    s = input().split()\n    scores[s[0]].append(s[1])\nfor i in range(m):\n    scores[input()].sort(reverse=True)\nfor name in scores:\n    score = 0\n    for i in scores[name]:\n        score += int(i)\n    if score >= p:\n        print(name +'wins!')\n        break\nelse:\n    print('No winner!')\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\n\") == \"\"\"George wins!\nJess wins!\nNo winner!\"\"\"\n\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n\") == \"\"\"Nina wins!\nJess wins!\nNo winner!\"\"\"\n\nprint(\"Success!\")"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == 'George wins!\\nNina wins!\\nJess wins!'\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'Nina wins!\\nJess wins!\\n'\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"\"\"George wins!\nJess wins!\"\"\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"Nina wins!\nJess wins!\"\"\"\nassert solution(\"7 10 13\\nJane\\nKelly\\nPeter\\nMolly\\nNick\\nJess\\nLynn\\nJess 2\\nJane 2\\nJess 2\\nLynn 2\\nJane 1\\nJess 3\\nLynn 3\\nJess 3\\nLynn 3\\nNick 1\\nPeter 1\\nPeter 2\\nNick 2\\nLynn 2\\nMolly 1\\nNick 1\") == \"\"\"No winner!\"\"\"\nassert solution(\"7 10 13\\nJane\\nKelly\\nPeter\\nMolly\\nNick\\nJess\\nLynn\\nJess 2\\nJane 2\\nJess 2\\nLynn 2\\nJane 1\\nJess 3\\nLynn 3\\nJess 3\\nLynn 3\\nNick 1\\nPeter 1\\nPeter 2\\nNick 2\\nLynn 2\\nMolly 1\\nNick 1\") == \"\"\"No winner!\"\"\"\nassert solution(\"7 10 13\\nJane\\nKelly\\nPeter\\nMolly\\nNick\\nJess\\nLynn\\nJess 2\\nJane 2\\nJess 2\\nLynn 2\\nJane 1\\nJess 3\\nLynn 3\\nJess 3\\nLynn 3\\nNick 1\\nPeter 1\\nPeter 2\\nNick 2\\nLynn 2\\nMolly 1\\nNick 1\") == \"\"\"No winner!\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\nassert solution(\"3 10 13\") == \"Nina wins!\"\nassert solution(\"3 10 13\") == \"Nina wins!\"\nassert solution(\"3 10 13\") == \"Nina wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nBob wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\nassert solution(\"3 10 11\") == \"No winner!\"\nassert solution(\"3 10 12\") == \"No winner!\"\nassert solution(\"3 10 13\") == \"No winner!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\n\"\n\n\"\"\"\n\nn, p, m = map(int, stdin.readline().split())\nnames = [stdin.readline().strip() for _ in range(n)]\nscores = dict()\nfor _ in range(m):\n    name, score = stdin.readline().split()\n    scores[name] = scores.get(name, 0) + int(score)\n\nfor name in names:\n    if scores[name] >= p:\n        print(name, \"wins!\")\n        break\nelse:\n    print(\"No winner!\")"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \\\n\"George wins!\\nNina wins!\\nJess wins!\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 0 0 5 4\") == '2.0'\nassert solution(\"6 0 0 2 7 6\") == '2.0'\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport math\n\nx, y, x1, y1, x2, y2 = [float(e) for e in stdin.split()]"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\"\"\"\n\nfrom sys import stdin\n\nx, y, x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n\nimport math\n\nprint(math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nassert solution('983456') == '0'\nassert solution('1234567') == '2345678'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('156') == '165'\n\nprint(solution('330'))\nprint(solution('1'))"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"156\") == \"165\"\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"330\") == '0'\nassert solution(\"156\") == \"165\"\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123) == 234\nassert solution(152) == 254\nassert solution(846) == 858\nassert solution(456) == 456\nassert solution(9) == 9\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"330\") == 0\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1566') == '1666'\nassert solution('1234') == '1234'\nassert solution('3334') == '3334'\nassert solution('9090') == '9909'\nassert solution('8808') == '8880'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1516') == '1517'\nassert solution('1') == '2'\nassert solution('123') == '124'\nassert solution('321') == '322'\nassert solution('1234') == '1235'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\n\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\n\n\"\"\"\n\nfrom typing import List\nimport timeit\nimport itertools"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\n\"\"\"\n\nimport collections\nfrom functools import reduce"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n\nSample Input 3:\n3 4\n120000 150000 160000\n180000 180000\nSample Output 3:\n2\n\nSample Input 4:\n3 4\n20000 110000 100000\n99999 20000\nSample Output 4:\n1\n\nSample Input 5:\n3 4\n120000 100000 160000\n120000 100000 160000\nSample Output 5:\n2\n\n-----Solution-----\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n\n'''"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\n\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"10\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n0\\n42\\n84\\n420\\n126\") == \"6\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n2\\n3\") == \"3\"\nassert solution(\"1\\n2\\n3\\n4\") == \"4\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 1 3') == '4'\nassert solution('1') == '0'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\n\n\"\"\"\n\nnums = [int(num) for num in input().split('\\n')]\n\nseen = set()\n\nfor num in nums:\n    if num % 42 in seen:\n        print(len(seen))\n        break\n    else:\n        seen.add(num % 42)\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == '10'\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == '1'\n\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"42\\n42\\n42\\n42\\n42\\n42\\n42\\n42\\n42\\n42\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"1\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n\nprint('Success')"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"9 4\") == \"no\"\nassert solution(\"13 4\") == \"no\"\nassert solution(\"2 5\") == \"yes\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"1 1\") == \"no\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 1\n11100\n11110\n11101\n11100''') == 'no'\nassert solution('''4 1\n11110\n11101\n11100\n11100''') == 'yes'\nassert solution('''1 0\n11110''') == 'yes'\nassert solution('''1 0\n11110\n11110\n11110\n11110''') == 'yes'\nassert solution('''1 0\n1111\n1111\n1111\n1111''') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('13 1000') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('1 1') == 'no'\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"12 3\") == \"no\"\nassert solution(\"12 4\") == \"no\"\n\n-----Problem-----\nGiven $N$ (1 <= N <= 10^15) and $b$ (0 <= b <= 50), write code to determine whether it is possible to create a collection of files that all have a size of at most $b$ bits, and each file is not equal to the other files.\n\n-----Hints-----\n\n1. Think about whether you can create an algorithm that does what the question asks you to do.\n\n2. The condition you need to check is whether $N$ can be represented as the product of two numbers with $1 \\le a \\le b$ as the gcd.\n\n3. You will probably need to determine whether a number is prime, and if you don't know the algorithm, try to implement it yourself.\n\n\n-----Test Cases-----\nYou can check your solution by using some sample test cases.\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3') == 'yes'\nassert solution('2 2') == 'no'\nassert solution('1 0') == 'yes'\n\"\"\"\n\nn, b = map(int, input().split())"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"7 4\") == \"no\"\nassert solution(\"7 5\") == \"no\"\nassert solution(\"10 10\") == \"yes\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('123 123') == 'no'\nassert solution('1 1') == 'no'\nassert solution('2 4') == 'no'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n\n\nimport collections\nfrom collections import Counter"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H02H10P11H02\") == 'GRESKA'\nassert solution(\"P01K02H03H04\") == '12 12 11 13'\n\nprint(solution(stdin))\n\n---\n\nclass Solution:\n    def solution(self, deck):\n        pass\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.solution = solution\n\n    def test_example_1(self):\n        self.assertEqual(self.solution(\"P01K02H03H04\"), \"12 12 11 13\")\n\n    def test_example_2(self):\n        self.assertEqual(self.solution(\"H02H10P11H02\"), \"GRESKA\")\n\n    def test_example_3(self):\n        self.assertEqual(self.solution(\"P16H17H18H19H20H21H22H23H24H25H26H27H28H29H30H31H32H33H34H35H36H37H38H39H40H41H42H43H44H45H46H47H48H49H50H51H52H53\"), \"GRESKA\")\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\n:param stdin: String with card labels.\n:return: String with missing cards, one for each suit.\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(P09K04H09H09H09T04) == \"GRESKA\"\n\nSample Input 3:\nK12T02T11K03T01K12T08K09T10T09H10T08H05T10P05H08H06H10P10H03K10H09H11T07H03H12P07K08T01H12H03H01T03H12T06H06T05P09K05T06H13K13T05H09P09P12T10T12H12P10H08H06T05P09K05T05H13K04T10T03K07H05H04P08H04H10T04P05H12T03H08H02P12T11T12H03P12P11K12P05T12T06H13H12P05P06T01P11T12T10T11H12H08T02P03H03K10T06P09H04T08H06K06T11T08P03K08H12T07H09T07H02H09H08T08T07K04T09P10T09P10T10H12H08T03H07H09P09T03H09T02P03K09T06H09P09H04T05H10T04H05H08H03P03H03K02H11H01P12T10T11H03P12H05H02H03P03K12T09H08K11K12P03P03H02H01H12H04H09H04T07H08P08H12T08H10T10H06H03H12T08H03H07H10H03K12T04H04P04T12T05H11P09P11H11P12T11H05K11K05P11H12H11K06H11T03H12P08K02H10T12T10P04T01T12H10T12P10H09H05T10T12T10T08P11H10T07H11P08H05T02P03T04T08K12H02H03H07T03H03K12T02H04H01H06T10H09K10H10T11P11H02P01H12T02H12T04T02K12P11T07H02H12H02T09T05T12P11K03P09H11P01T08H09K04T07H07T05P02K06H05T09K12T08H05H04T07P05H02H09H05H08T12P12T12T12T08P12T12H03T04H07H04T05H08H05H07H06H10T12H10T03H09H02H09K03H12T10H10T09H06T03K08H07T12T10H12H09K10T03K08T12T03T09H11H11T10T06K06P12T12T10H05H11K12T08K12P06T12T12T09P11H12P12T12H12H07H09H09H11T07P11H12T03H13T10T10H09T10T04H13T05P09H12T08P12T10H07T08H11T02P03H07H11K02H10T12T10P10T08H12H03T08P04H12T07H13P11H11H07T12H10T09H06H03T12H09P10H07H08H12T03H12H09H10T11H08H12P03K06H08H08P09T12T04H03T04H10T12T03K08T04H09T12T08H03H12P05H03K09H07T10H04P10T05H06H05T09P10H12H09P12T09T12T10H09H03H12T04H08H08T12P10T12H02H02T03T04H12H11P12T12T04T07H08P10H11P12T04H03K12H12H02T05H09H05H03K05P09H08H07T09T12H09H02T10P09H09T02P08H12T05H12H12T10H09H09T08H04H10T09P12H12T02H03T10T02H03P12T11T08H06H12H09H04T08P12T12T07H07T08H09H12H11P10T12T10T12T10T08H09T12H09P10T06H10T07H11P04T04H13H08P12T04H12H09H10P12H10T11T12T03K03K04T03H12P12H12H08T06H12T09H09P12H08H12T02H12H09H04H08H09T12H09H04H09T07H02H03K12H12H08T10T07H08T03H08H09T11H03K07H03H03T12H09P10H03H12P11T09T03H05H02T12T09T05P03H10T03H05H12H10H05P09H11T09H12T06T03H08K12H09P12H10T10H09H09P09P12T07H11H03H09P12T08H05H12T02H03H02P12H12T03H07P12T08H12P02P11H06H07T12T03T04H12H07T12H08T12P03P09H04H12T09P12H12T08T12H09H03K12H12H02T09T10T05H04T10T12T09H12H03H12P12T11T08H07H12H09H07T04H03T10T09T10T03K06H07H10P10H08T06H12T12H11H09H05H08T07P12T12T11H10P12H06H03H12P12T05H12H09H07H11H02P12T09T04H12H09H09P11T08P12H12H08H12P03H11H05H03H05T10T03H12T08H07H04T08H09H09P12T10H08T03H08T02P02P11T12H10T07H08"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04\") == \"12 12 11 13\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\n\"\"\"\n\nR, S, K = list(map(int, input().split()))\n\npicture = []\nfor i in range(R):\n    picture.append(input())\n\nrows = len(picture)\ncols = len(picture[0])\n\nmax_kill = 0"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\n\"\"\"\n\nR, S, K = input().split()\nR, S, K = int(R), int(S), int(K)\nfor _ in range(R):\n    print(\"\".join(['-' if i % S <= K else '|' if i % S < K <= i % S + K else '+' if i % S >= K - S else '.' for i in range(S)]))\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n\n-----Test cases-----\nYour solution should pass the following test cases.\nNote: passing all the test cases does not mean that your solution is correct.\n\nCorrect implementation may have additional test cases.\nYour test cases should not implement any sort of optimization, nor should it read input from stdin or print anything.\nYour test cases should only contain your implementation of the problem.\n\n-----Problem-----\nGiven dimensions of a rectangular window and the length of the side of a racket, your task is to determine the maximal number of flies that can be killed in a single shot.\n\n-----Constraints-----\nAll the input data will be correct.\n\nAll the input data will be given in the correct format.\n\nAll the test cases are guaranteed to be generated randomly and are valid.\n\nAll the test cases are designed to be solvable in a real-world application.\n\nYou can find some of the examples in the tests folder.\n\nInput:\n\nThe first line of input contains three integers $R$, $S$ and $K$ ($3 \\leq K \\leq R$, $S \\leq 100$) that denote the dimensions of Marin\u2019s picture and the length of the side of the racket.\n\nEach of the following $R$ lines contains $S$ characters that describe Marin\u2019s picture. The picture\u2019s pixels marked with \u2018*\u2019 denote the position of a fly, whereas all the other pixels are marked with \u2018.\u2019 and denote empty space. On his window, there is at least one fly that Marin can kill with his racket.\n\nOutput:\n\nThe first line of output must contain the maximal number of flies Marin can kill in a single shot.\n\nThe folllowing $R$ lines must contain Marin\u2019s picture, on it clearly marked a position of the racket that will ensure Marin kills as many flies as possible. The horizontal sides of the racket are denoted with a series of characters \u2018-\u2019 and the vertical ones with \u2018|\u2019, whereas angles are denoted with \u2018+\u2019. For a more detailed explanation, consult the sample tests.\n\nPlease note: Marina\u2019s racket will affect only the flies located strictly inside the racket, and the racket must be located inside the window with all its parts. In other words, it is assumed that the flies located at the sides of the racket will have enough time to fly away.\n\nIn the first sample input, the window is a rectangle with dimensions $3 \\times 5$.\n\nMarin can kill at most 1 fly in a single shot with his racket on the following picture:\n\nSample Input 2:\n7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\nSample Output 2:\n2\n......\n.*.*.*\n+--..\n|.*|..\n+--..\n*....*\n\nSample Input 3:\n2 2 2\n.*.*\n.*.*\nSample Output 3:\n0\n..\n*.*\n+--\n\nSample Input 4:\n2 1 2\n.*\n.*\nSample Output 4:\n2\n..\n*\n+--\n\nSample Input 5:\n4 1 2\n....\n....\n....\n....\nSample Output 5:\n1\n.\n.\n.\n.\n\nSample Input 6:\n6 3 2\n.....\n.*.*\n.....\n.....\n....*.\nSample Output 6:\n0\n..\n*.*\n...\n.**.\n...\n\nSample Input 7:\n4 2 2\n****\n**.\n**.\n****\nSample Output 7:\n0\n..\n*.*\n...\n.**.\n...\n\nSample Input 8:\n5 6 2\n...\n.*.*\n.*.*\n.*.*\n.*.*\n.*.*\nSample Output 8:\n5\n...\n*.*\n****\n****\n****\n****\n\nSample Input 9:\n5 3 2\n***.\n**.*\n*.*.\n***.\nSample Output 9:\n3\n..\n*.*\n****\n\nSample Input 10:\n6 3 2\n****.\n*.*.\n****\n***.\n**.*\n*.*.\nSample Output 10:\n2\n..\n*.*\n****\n***\n**.*\n*.*.\n\nSample Input 11:\n1 2 2\n**\nSample Output 11:\n0\n\nSample Input 12:\n5 3 2\n*.**\n****\n****\n****\n****\nSample Output 12:\n4\n..\n*.*\n****\n****\n****\nSample Input 13:\n5 3 2\n****\n.*.*\n****\n****\n****\nSample Output 13:\n4\n..\n*.*\n****\n****\n****\nSample Input 14:\n5 3 2\n***.\n**.\n***\nSample Output 14:\n1\n..\n*.*\n****\n****\nSample Input 15:\n6 3 2\n****\n*.*.\n****\n****\n****\n****\nSample Output 15:\n3\n..\n*.*\n****\n****\n****\n****\nSample Input 16:\n4 1 2\n***\n*.*\n****\n****\nSample Output 16:\n2\n..\n*.*\n****\n****\nSample Input 17:\n4 1 2\n****\n*.*.\n****\n****\nSample Output 17:\n0\n\nSample Input 18:\n5 3 2\n*****\n*.*.\n****\n*****\nSample Output 18:\n0\n\nSample Input 19:\n5 3 2\n*****\n*.*.\n****\n*****\nSample Output 19:\n0\n\nSample Input 20:\n5 3 2\n*****\n*.*.\n****\n****\n*****\nSample Output 20:\n0\n\nSample Input 21:\n5 3 2\n*.*.\n*.*.\n****\n****\n****\nSample Output 21:\n0\n\nSample Input 22:\n5 3 2\n****\n*.*.\n****\n****\n****\nSample Output 22:\n2\n..\n*.*\n****\n****\nSample Input 23:\n5 3 2\n****\n*.*.\n****\n****\n****\nSample Output 23:\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....\n''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 5 3\n.....\n.*.*.\n.....\n''') == '1'\nassert solution('''7 6 4\n......\n.*.*.*\n......\n.*.*..\n..*...\n..*...\n*....*\n''') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == solution(stdin)\nprint(solution(stdin))\n\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    \"\"\"Solution for Aufgabe 2\"\"\"\n\n    def max_kill(self, r, s, k):\n        \"\"\"\n        :param r: length of picture\n        :param s: length of side of the racket\n        :param k: length of side of the side of the racket\n        :return: maximal number of flies that can be killed in a single shot\n        \"\"\"\n        # input parsing\n        picture = [input().split() for _ in range(r)]\n        for row in picture:\n            for char in row:\n                if char!= '.':\n                    raise Exception(\n                        'All picture pixels should be \".\", but got \"{}\"'.format(char)\n                    )\n        # horizontal position of the racket\n        rh = (len(picture[0]) - k) // 2\n        # vertical position of the racket\n        rv = (len(picture) - k) // 2\n        # minimal number of shots\n        min_shots = 1\n        # final result\n        res = 0\n        for _ in range(r):\n            if picture[_][rh] == '*':\n                res += 1\n                if picture[_][rh + k] == '*':\n                    res += 1\n                if picture[_][rh + 2 * k] == '*':\n                    res += 1\n            elif picture[_][rh + k] == '*':\n                res += 1\n            if picture[_][rv] == '*':\n                res += 1\n                if picture[_][rv + k] == '*':\n                    res += 1\n                if picture[_][rv + 2 * k] == '*':\n                    res += 1\n            elif picture[_][rv + k] == '*':\n                res += 1\n            # if the total number of kills is greater than the previous one,\n            # we have to update it\n            if res > min_shots:\n                min_shots = res\n            res = 0\n        return min_shots\n\n\nclass TestsForSolution(unittest.TestCase):\n    \"\"\"Class to run tests for the solution\"\"\"\n\n    def test_solution(self):\n        \"\"\"Test if solution works correctly\"\"\"\n\n        assert Solution().max_kill(4, 3, 3) == 2\n        assert Solution().max_kill(3, 5, 3) == 1\n        assert Solution().max_kill(3, 5, 4) == 1\n        assert Solution().max_kill(3, 7, 4) == 2\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 5 3\"\n) == \"1\"\n\nassert solution(\n    \"7 6 4\"\n) == \"2\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n\"\n\".....\\n\"\n\"*.**.\\n\"\n\".....\\n\") == \"1\"\n\nassert solution(\"7 6 4\\n\"\n\"......\\n\"\n\"*.**.*\\n\"\n\"......\\n\"\n\"*.**.*\\n\"\n\"..*...\\n\"\n\"..*...\\n\"\n\"*....*\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\\n\"\n\".....\\n\"\n\".*.*.\\n\"\n\".....\\n\"\n\"*....\\n\"\n) == \"1\\n\"\n\nassert solution(\"7 6 4\\n\"\n\"......\\n\"\n\"*.*.*.\\n\"\n\"......\\n\"\n\"*.*..\\n\"\n\"..*...\\n\"\n\"..*...\\n\"\n\"*....\\n\"\n) == \"2\\n\"\n\nassert solution(\"4 5 4\\n\"\n\".....\\n\"\n\"*....\\n\"\n\"....*\\n\"\n\"*.*..\\n\"\n\"..*..\\n\"\n) == \"2\\n\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''AC AD AH AS KD''') == '4'\nassert solution('''2C 4D 4H 2D 2H''') == '3'\nprint('Success')\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"2C 2D 4H 4D 4S\") == 4\nassert solution(\"2C 2D 4H 4D 4S\") == 4\nassert solution(\"2C 2D 4H 4D 4S\") == 4\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AC AH AS KD') == '4'\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC AD AH AS KD') == '4'\nassert solution('2C 4D 4H 2D 2H') == '3'\n\"\"\"\n\n\"\"\"\n\ub0b4 \ud480\uc774\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n0 0 0 0 0') == '7'\nassert solution('4 3\\n0 0 0 0') == '4'\nassert solution('8 6\\n0 0 0 0 1 1 1 1') == '1'\nassert solution('6 7\\n0 0 0 0 1 1 1 1') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\\n0 0 0 0 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\\n0 0 0 0 0\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n2 1 0 1\") == \"3\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"4 5\") == \"6\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 1 0 1\") == \"5\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 1 0 1\") == \"5\"\nassert solution(\"2 1 1 1 0 1\") == \"5\"\nassert solution(\"2 1 1 1 0 1\") == \"5\"\nassert solution(\"2 1 1 1 0 1\") == \"5\"\nassert solution(\"2 1 1 1 0 1\") == \"5\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n0 0 0 0 0') == 7\n\nprint(solution(input()))\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'\nassert solution('7 5\\n0 0 0 0 0') == '0'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\nassert solution('[a-zA-Z]') == '\\\\[[-]?\\n'\nassert solution('(123)') == ')|3[(]'\n\n'''\n\nimport string"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''All your base are belong to us.\\n''') == '''@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n'''\nassert solution('''What's the Frequency, Kenneth?\\n''') == '''\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n'''\nassert solution('''\\\"\\'\\\"Hello World!\\\"\\'\\'\\n''') == '''\\\"\\'\\\"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\\"\\'\\'\\n'''\nassert solution('''\\\"\\'\\'\\\"Hello World!\\\"\\'\\'\\n''') == '''\\\"\\'\\\"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\\"\\'\\'\\n'''\n'''\nSample Input 3:\n\"A\"\n\"B\"\n\"C\"\nSample Output 3:\n@[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|[](*|)|"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"All your base are belong to us.\") == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@`/0|_|_|0[ ]0|_|_|0[ ]0|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|_|_|0[ ]0|"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nprint(solution(\"All your base are belong to us.\"))\nprint(solution(\"What's the Frequency, Kenneth?\"))\n\"\"\"\n\nimport string"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'+ '`/0|_||Z [email\u00a0protected]"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nassert solution(\"$00$\") == \"0\\n\"\nassert solution(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126\\n\"\n\n\"\"\"\n\nsolution('$00$')"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"All your base are belong to us.\") == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\nassert solution(\"What's the Frequency, Kenneth?\") == '\\/\\/[-]@\\'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"All your base are belong to us.\") == \"1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \"\n\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nassert solution(\"All your base are belong to us.\") == \"1111\\t0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.1111\\"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == 'Alice'\nassert solution('2\\n1') == 'Bob'\nassert solution('1\\n2\\n3') == 'Alice'\nassert solution('2\\n1\\n3') == 'Bob'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nassert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('5') == 'Alice'\n\nassert solution('6') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'Bob'\nassert solution('1') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('5') == 'Alice'\nassert solution('8') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'Bob'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('1') == 'Alice'\nassert solution('5') == 'Bob'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has $ letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"thirty is the number of letters here\") == \"thirty is the number of letters here\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('this sentence has $ letters') == 'this sentence has thirtyone letters'\nassert solution('thirtyone is the number of letters here') == 'thirty is the number of letters here'\n\"\"\"\nimport sys\n\nnumber_to_words = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6:'six',\n    7:'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16:'sixteen',\n    17:'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    30: 'thirty',\n    40: 'forty',\n    50: 'fifty',\n    60:'sixty',\n    70:'seventy',\n    80: 'eighty',\n    90: 'ninety'\n}"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"blah blah $ seventeen\") == \"blah blah seventeen\"\nassert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has twentyeleven letters\") == \"this sentence has twentyeleven letters\"\nassert solution(\"this sentence has onehundredseventyseven letters\") == \"this sentence has onehundredseventyseven letters\"\nassert solution(\"this sentence has onehundredseventysevenletters\") == \"this sentence has onehundredseventysevenletters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has onehundredtwentythree letters\") == \"this sentence has onehundredtwentythree letters\"\nassert solution(\"this sentence has onehundredthirtyeleven letters\") == \"this sentence has onehundredthirtyeleven letters\"\nassert solution(\"this sentence has onethousandletters\") == \"this sentence has onethousandletters\"\nassert solution(\"this sentence has onehundredtwothreeletters\") == \"this sentence has onehundredtwothreeletters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('$') == 'zero'\nassert solution('this sentence has $ letters') == 'this sentence has thirtyone letters'\nassert solution('thirtyone') == 'thirtyone'\n\"\"\"\n\nn = int(input())\nstring = ''\nfor _ in range(n):\n    s = input()\n    string += s[0]\nstring = string.replace('$', '')\nprint(string)"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters\\n') == 'this sentence has $ letters'\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"four\", \"4\"\nassert solution(\"9\") == \"nine\", \"9\"\nassert solution(\"13\") == \"thirteen\", \"13\"\nassert solution(\"19\") == \"nineteen\", \"19\"\nassert solution(\"68\") == \"sixtyeight\", \"68\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has thirtyone letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"one two three\") == \"onetwothree\"\nassert solution(\"ten twenty one\") == \"tentwentyone\"\nassert solution(\"twenty-two\") == \"twentytwotwo\"\nassert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"hundredandfifteen\") == \"hundredhundredfifteen\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\nimport codewars_test as test\n\ntest.assert_equals(solution(\"Abcd\"), \"0\")\ntest.assert_equals(solution(\"EaEbFabG\"), \"5\")"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n\"\"\"\n\nimport math"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'Abcd'\n) == '0'\n\nassert solution(\n    'EaEbFabG'\n) == '5'\n\nassert solution(\n    'abcd'\n) == '0'\n\nassert solution(\n    'EaEbFabG'\n) == '5'\n\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n\n\nfrom typing import List\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return len(stdin) // 4\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(Solution().solution(\"Abcd\"), \"0\")\n        self.assertEqual(Solution().solution(\"EaEbFabG\"), \"5\")\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\nassert solution(\"Cd\") == \"0\"\nassert solution(\"Ca\") == \"0\"\nassert solution(\"EbaFc\") == \"2\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Not a moose'\nassert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('2 2') == 'Even 4'\nassert solution('3 5') == 'Odd 6'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 3\") == \"Not a moose\"\nassert solution(\"0 0\") == \"Not a moose\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"Even 1\"\nassert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"4 2\") == \"Not a moose\"\nassert solution(\"2 2\") == \"Even 1\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 0') == 'Not a moose'\nassert solution('6 3') == 'Even 8'\n\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"2 2\") == \"Even 0\"\nassert solution(\"0 1\") == \"Even 0\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 3') == 'Not a moose'\nassert solution('4 3') == 'Even 8'\nassert solution('3 0') == 'Not a moose'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n3 3') == 'Odd 6'\nassert solution('3 3\\n4 4') == 'Even 6'\nassert solution('1 1\\n1 1') == 'Even 1'\nassert solution('0 0\\n0 0') == 'Not a moose'\nassert solution('5 5\\n5 5') == 'Even 0'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('1 1') == 'Not a moose'\nassert solution('1 10') == 'Odd 9'\nassert solution('8 5') == 'Even 12'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 0\") == \"Not a moose\"\n\n\"\"\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 2\n\nSample Case:\n\nSample Case:\nSample Case:\n\nSample Case:\nSample Case:\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('jla') == 'def'\nassert solution('tomo') =='mono'\nassert solution('6666') == 'dak'\nassert solution('jla') == 'def'\nassert solution('tomo') =='mono'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('5 4 3 2 1') == '12345'\nassert solution('5 4 3 2 10') == '12345'\nassert solution('5 4 3 2 100') == '12345'\n\nassert solution('1 2 3 4 5') == '5'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"tomo\") == 1\nassert solution(\"mono\") == 1\nassert solution(\"dak\") == 2\nassert solution(\"6666\") == 2\n\nprint(\"Success\")\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n t\\no\\nm\\no\\nd\\n6\\n') == '2'\nassert solution('2\\n j\\na\\n52') == '2'\n\n-----\n'''\nfrom itertools import permutations"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == 'a'\nassert solution('23') == 'h'\nassert solution('3') == 'i'\nassert solution('1') == 'g'\nassert solution('2') == 'h'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') =='sad'\n\nassert solution('0 1 2 3 4 5 6 7 8 9') == 'jklmno'\n\nassert solution('0 1 2 4 5 7') == 'asdfg'\n\nassert solution('0 1 2 3 5 6 7 8 9') == 'pqrstu'\n\nassert solution('0 1 2 3 4 5 7 8 9') == 'vwxyz'"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('tomo') == 1\nassert solution('mono') == 1\nassert solution('dak') == 2\n\"\"\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\ntomo\\nmono\\ndak\\n6666') == '1'\nassert solution('2\\nja\\nla\\n52') == '2'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('tomo') =='mono'\nassert solution('mono') == 'dak'\nassert solution('6666') == 'ja'\nassert solution('1234') == ''\nassert solution('12345') == ''\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') == '..#..\\n.##.\\n#A.\\n.##.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.###.#.#.*.\\n#.D.#.O.*.G.*\\n.###.#.#.*.\\n..#...#...*..'\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"...#...#...*..\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\n\"\"\"\n\nimport io\nimport sys\n\nsys.stdin = io.StringIO(\"\"\"A\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\nAA\nAB\nAC\nAD\nAE\nAF\nAG\nAH\nAI\nAJ\nAK\nAL\nAM\nAN\nAO\nAP\nAQ\nAR\nAS\nAT\nAU\nAV\nAW\nAX\nAY\nAZ\nBA\nBB\nBC\nBD\nBE\nBF\nBG\nBH\nBI\nBJ\nBK\nBL\nBM\nBN\nBO\nBP\nBQ\nBR\nBS\nBT\nBU\nBV\nBW\nBX\nBY\nBZ\nCA\nCB\nCC\nCD\nCE\nCF\nCG\nCH\nCI\nCJ\nCK\nCL\nCM\nCN\nCO\nCP\nCQ\nCR\nCS\nCT\nCU\nCV\nCW\nCX\nCY\nCZ\nDA\nDB\nDC\nDD\nDE\nDF\nDG\nDH\nDI\nDJ\nDK\nDL\nDM\nDN\nDO\nDP\nDQ\nDR\nDS\nDT\nDU\nDV\nDW\nDX\nDY\nDZ\nEA\nEB\nEC\nED\nEE\nEF\nEG\nEH\nEI\nEJ\nEK\nEL\nEM\nEN\nEO\nEP\nEQ\nER\nES\nET\nEU\nEV\nEW\nEX\nEY\nEZ\nFA\nFB\nFC\nFD\nFE\nFF\nFG\nFH\nFI\nFJ\nFK\nFL\nFM\nFN\nFO\nFP\nFQ\nFR\nFS\nFT\nFU\nFV\nFW\nFX\nFY\nFZ\nGA\nGB\nGC\nGD\nGE\nGF\nGG\nGH\nGI\nGJ\nGK\nGL\nGM\nGN\nGO\nGP\nGQ\nGR\nGS\nGT\nGU\nGV\nGW\nGX\nGY\nGZ\nHA\nHB\nHC\nHD\nHE\nHF\nHG\nHH\nHI\nHJ\nHK\nHL\nHM\nHN\nHO\nHP\nHQ\nHR\nHS\nHT\nHU\nHV\nHW\nHX\nHY\nHZ\nIA\nIB\nIC\nID\nIE\nIF\nIG\nIH\nII\nIJ\nIK\nIL\nIM\nIN\nIO\nIP\nIQ\nIR\nIS\nIT\nIU\nIV\nIW\nIX\nIY\nIZ\nJA\nJB\nJC\nJD\nJE\nJF\nJG\nJH\nJI\nJJ\nJK\nJL\nJM\nJN\nJO\nJP\nJQ\nJR\nJS\nJT\nJU\nJV\nJW\nJX\nJY\nJZ\nKA\nKB\nKC\nKD\nKE\nKF\nKG\nKH\nKI\nKJ\nKK\nKL\nKM\nKN\nKO\nKP\nKQ\nKR\nKS\nKT\nKU\nKV\nKW\nKX\nKY\nKZ\nLA\nLB\nLC\nLD\nLE\nLF\nLG\nLH\nLI\nLJ\nLK\nLL\nLM\nLN\nLO\nLP\nLQ\nLR\nLS\nLT\nLU\nLV\nLW\nLX\nLY\nLZ\nMA\nMB\nMC\nMD\nME\nMF\nMG\nMH\nMI\nMJ\nMK\nML\nMM\nMN\nMO\nMP\nMQ\nMR\nMS\nMT\nMU\nMV\nMW\nMX\nMY\nMZ\nNA\nNB\nNC\nND\nNE\nNF\nNG\nNH\nNI\nNJ\nNK\nNL\nNM\nNN\nNO\nNP\nNQ\nNR\nNS\nNU\nNV\nNW\nNX\nNY\nNZ\nOA\nOB\nOC\nOD\nOE\nOF\nOG\nOH\nOI\nOJ\nOK\nOL\nOM\nON\nOO\nOP\nOQ\nOR\nOS\nOT\nOU\nOV\nOW\nOX\nOY\nOZ\nPA\nPB\nPC\nPD\nPE\nPF\nPG\nPH\nPI\nPJ\nPK\nPL\nPM\nPN\nPO\nPP\nPQ\nPR\nPS\nPT\nPU\nPV\nPW\nPX\nPY\nPZ\nQA\nQB\nQC\nQD\nQE\nQF\nQG\nQH\nQI\nQJ\nQK\nQL\nQM\nQN\nQO\nQP\nQQ\nQR\nQS\nQT\nQU\nQV\nQW\nQX\nQY\nQZ\nRA\nRB\nRC\nRD\nRE\nRF\nRG\nRH\nRI\nRJ\nRK\nRL\nRM\nRN\nRO\nRP\nRQ\nRR\nRS\nRT\nRU\nRV\nRW\nRX\nRY\nRZ\nSA\nSB\nSC\nSD\nSE\nSF\nSG\nSH\nSI\nSJ\nSK\nSL\nSM\nSN\nSO\nSP\nSQ\nSR\nSS\nST\nSU\nSV\nSW\nSX\nSY\nSZ\nTA\nTB\nTC\nTD\nTE\nTF\nTG\nTH\nTI\nTJ\nTK\nTL\nTM\nTN\nTO\nTP\nTQ\nTR\nTS\nTT\nTU\nTV\nTW\nTX\nTY\nTZ\nUA\nUB\nUC\nUD\nUE\nUF\nUG\nUH\nUI\nUJ\nUK\nUL\nUM\nUN\nUO\nUP\nUQ\nUR\nUS\nUT\nUU\nUV\nUW\nUX\nUY\nUZ\nVA\nVB\nVC\nVD\nVE\nVF\nVG\nVH\nVI\nVJ\nVK\nVL\nVM\nVN\nVO\nVP\nVQ\nVR\nVS\nVT\nVU\nVV\nVW\nVX\nVY\nVZ\nWA\nWB\nWC\nWD\nWE\nWF\nWG\nWH\nWI\nWJ\nWK\nWL\nWM\nWN\nWO\nWP\nWQ\nWR\nWS\nWT\nWU\nWV\nWW\nWX\nWY\nWZ\nXA\nXB\nXC\nXD\nXE\nXF\nXG\nXH\nXI\nXJ\nXK\nXL\nXM\nXN\nXO\nXP\nXQ\nXR\nXS\nXT\nXU\nXV\nXW\nXX\nXY\nXZ\nYA\nYB\nYC\nYD\nYE\nYF\nYG\nYH\nYI\nYJ\nYK\nYL\nYM\nYN\nYO\nYP\nYQ\nYR\nYS\nYT\nYU\nYV\nYW\nYX\nYY\nYZ\nZA\nZB\nZC\nZD\nZE\nZF\nZG\nZH\nZI\nZJ\nZK\nZL\nZM\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == \"\"\"..#..\n.#.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"..#..\\n.##.\\n#.#.\\n.#.#\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.###.#.#.*.#.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.#.\\n..#...#...*..\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"...#..\\n.##.#\\n#.A.#\\n.##.#\\n...#..\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\n\"\"\"\n\nimport os\nimport time\n\n_, filename = os.path.split(__file__)\nwith open(f\"{filename}_input.txt\") as f:\n    _input = f.read().strip()\n\n_OUTPUT_PATH = f\"{filename}_output.txt\"\n\nclass Node:\n    def __init__(self, data, next_node=None, prev_node=None):\n        self.data = data\n        self.next_node = next_node\n        self.prev_node = prev_node\n    \n    def set_next(self, next_node):\n        self.next_node = next_node\n    \n    def set_prev(self, prev_node):\n        self.prev_node = prev_node\n\nclass DoubleLinkedList:\n    def __init__(self, head=None):\n        self.head = head\n    \n    def insert(self, data):\n        new_node = Node(data)\n        new_node.set_next(self.head)\n        self.head = new_node\n    \n    def insert_after(self, prev_node, data):\n        if not prev_node:\n            print(\"Previous node does not exist.\")\n            return\n        new_node = Node(data)\n        new_node.set_next(prev_node.next_node)\n        prev_node.next_node = new_node\n        new_node.set_prev(prev_node)\n        if new_node.next_node:\n            new_node.next_node.set_prev(new_node)\n    \n    def insert_before(self, next_node, data):\n        if not next_node:\n            print(\"Next node does not exist.\")\n            return\n        new_node = Node(data)\n        new_node.set_prev(next_node.prev_node)\n        next_node.prev_node = new_node\n        new_node.set_next(next_node)\n        if new_node.prev_node:\n            new_node.prev_node.set_next(new_node)\n    \n    def remove(self, node):\n        if not node:\n            print(\"Node does not exist.\")\n            return\n        if node.prev_node:\n            node.prev_node.set_next(node.next_node)\n        if node.next_node:\n            node.next_node.set_prev(node.prev_node)\n        if self.head == node:\n            self.head = node.next_node\n        del node\n    \n    def print_list(self):\n        node = self.head\n        while node:\n            print(node.data)\n            node = node.next_node"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == '3.141593'\nassert solution(\"21\") == '1385.442360'\n\"\"\"\nimport sys"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '5.586087'\nassert solution('12') == '14.334909'\nassert solution('1') == '3.141593'\n\"\"\"\n\nimport math\n\nR = input()\nR = int(R)\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nprint('The local tests are done. Click on \"Check\" for more details.')\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1''') == '''3.141593'''\nassert solution('''3''') == '''6.283214'''\n\nassert solution('''123''') == '''314.159265'''\nassert solution('''12345''') == '''14236.6679'''\n\nassert solution('''314159265''') == '''614396.99'''\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == '3.141593'\nassert solution(\"21\") == '1385.442360'\nassert solution(\"10000\") == '2.000000'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"25.000000\"\nassert solution(\"4\") == \"16.000000\"\nassert solution(\"1\") == \"3.141593\"\nassert solution(\"0\") == \"3.141593\"\nassert solution(\"-1\") == \"3.141593\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 3.141593\nassert solution('2') == 2.0\nassert solution('3') == 1.414214\n\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nassert solution('10000') == '9216.539264'\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\\n\") == \"2\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 -2 3\") == 2\nassert solution(\"5\\n129 44 394 253 147\") == 0"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\nassert solution(\"6\\n5 0 -100 0 20\") == \"20\"\nassert solution(\"7\\n
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 3\") == 2\nassert solution(\"5\\n129 44 394 253 147\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n-2 3\") == '2'\nassert solution(\"5\\n129 44 394 253 147\") == '0'\n\nprint(solution(stdin))"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 -2 3\\n\") == \"2\"\nassert solution(\"1 -2 3\\n\") == \"2\"\nassert solution(\"1 -2 3\\n\") == \"2\"\nassert solution(\"1 -2 3\\n\") == \"2\"\nassert solution(\"1 -2 3\\n\") == \"2\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\nassert solution('5\\n129 44 394 253 147\\n') == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 -2 3') == '2'\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nprint(sum(i for i in nums if i < 0))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 2') == '3'\nassert solution('1 1 1') == '2'\nassert solution('1 1 2') == '3'\nassert solution('1 2 3') == '4'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\n\"\"\"\n\nn = int(input())\ntime = list(map(int, input().split()))\ntime.sort()\n\ntotal_time = 0\nfor i in range(n):\n    total_time += time[i]\n    if i!= n-1:\n        total_time += time[i+1]\nprint(total_time)\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2 2') == '6'\nprint(solution('3\\n4 1 2'))\n\n------Test------\nimport os\nimport sys\n\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\n\nfrom libs.advent import *\nfrom adventils import *\n\nfrom time import sleep"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('4\\n1 2 3') == '8'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 2 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == 2\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_01) == expected_result_01\nassert solution(test_input_02) == expected_result_02\nassert solution(test_input_03) == expected_result_03\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"\n\nfrom collections import deque\n\nclass Graph:\n    def __init__(self, N):\n        self.graph = []\n        self.row = N\n        self.col = N\n        self.walls = []\n        self.buildings = []\n        self.fire = []\n        self.start = []\n        self.min = float('inf')\n        self.max = -float('inf')\n        self.direction = {\n            'U': (-1, 0),\n            'D': (1, 0),\n            'L': (0, -1),\n            'R': (0, 1)\n        }\n\n    def BFS(self, start, end, fire, walls):\n        queue = deque([start])\n        while queue:\n            r, c = queue.popleft()\n            if r == end[0] and c == end[1]:\n                return True\n\n            for direction in self.direction:\n                next_r = r + self.direction[direction][0]\n                next_c = c + self.direction[direction][1]\n                if (next_r >= 0 and next_r < self.row and next_c >= 0 and next_c < self.col) and (next_r, next_c) not in walls and (next_r, next_c) not in fire:\n                    queue.append((next_r, next_c))\n\n        return False"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(2, 4, 4, '1111') == '2'\nassert solution(2, 4, 4, '1S01') == '2'\nassert solution(2, 4, 4, '1011') == 'NOT POSSIBLE'\nassert solution(2, 4, 4, '0U11') == 'NOT POSSIBLE'\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == 4\n\"\"\"\n\n_, C = map(int, input().split())\nnums = list(map(int, input().split()))"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == 4\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2 1 1', '3') == 3\nassert solution('4 5', '1') == 0\nassert solution('1', '1') == 1\nassert solution('3 5', '2') == 1\nassert solution('5 6', '2') == 0\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\n\"\"\"\n\nN, C = input().split()\nN, C = int(N), int(C)\narr = list(map(int, input().split()))\n\ntotal = 0\ncount = 0\nfor i in range(0, N):\n    total += arr[i]\n    if total <= C:\n        count += 1\n    else:\n        count += 1\n        total = arr[i]\n\nprint(count)\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == 4\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == 3\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\\n\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\\n\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\nassert solution(\"SSPPR\") == \"5\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\n\"\"\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"SSPPR\\n5\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SSPPR\") == \"5\"\nassert solution(\"SSPPR\") == \"10\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('S') == '1'\nassert solution('SSP') == '2'\nassert solution('SSPP') == '3'\nassert solution('SSPPS') == '6'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"SSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n\nprint(solution(input()))\n\n'''\n\nimport numpy as np"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\"\"\"\n\n\"\"\"\nExplanation:\nThe stopwatch contains one button which alternates between starting and stopping the timer.\n\nTime: O(N)\nSpace: O(1)\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2\\n5\\n9\\n10\\n17') =='still running'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') == '4'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\nassert solution('4\\n2\\n5\\n9\\n10\\n17\\n') == '4\\n5\\n9\\n10\\n17\\n'\nassert solution('4\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\nprint(solution('4\\n2\\n5\\n9\\n10\\n17\\n'))"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n7\") == \"4\\n\"\nassert solution(\"5\\n2\\n5\\n9\\n10\") == \"still running\"\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n11\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n7\\n11\\n') == '4\\n'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\"\"\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\nassert solution(\"2\\n2\\n2\\n2\\n2\") == \"4\"\n\nprint(solution(input().strip()))\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\"\"\"\nimport os\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n7\n11\n''') =='still running'\nassert solution('''\n5\n2\n5\n9\n10\n17\n''') == '4'\n\n\"\"\"\n\nfrom typing import List\n\nfrom collections import deque\n\nclass StopWatch:\n    def __init__(self, seconds: int = 0):\n        self._is_running = False\n        self._seconds = seconds\n        self._queue = deque()\n\n    def start(self):\n        self._is_running = True\n        self._queue.append(0)\n\n    def stop(self):\n        self._is_running = False\n        self._queue.append(self._seconds)\n\n    def toggle(self):\n        self._is_running = not self._is_running\n        if self._is_running:\n            self._seconds += 1\n            self._queue.append(self._seconds)\n        else:\n            self._seconds = self._queue.pop()\n\n    def reset(self):\n        self._seconds = 0\n\n    def __repr__(self) -> str:\n        return f'is_running: {self._is_running}, seconds: {self._seconds}'\n\n    def __str__(self) -> str:\n        return f'is_running: {self._is_running}, seconds: {self._seconds}'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\nassert solution(\"7\\n11\") == \"4\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"impossible\"\nassert solution(\"6 6 1 3 2 2 3\") == \"0.6\"\n\"\"\"\n\nn = int(input())\nc = list(map(int, input().split()))\n\ncan = []\nfor i in range(n):\n    can.append(c[i]*(i+1))\n\nprint(max(can)/max(c))\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"impossible\"\nassert solution(\"6 1 3 2 2 3\") == \"0.6\"\n\"\"\"\n\nimport sys\n\n\"\"\"\n  1) sort the canister amount to achieve the maximum filling\n  2) fill the balloon and check if the balloon is empty or not\n  3) return the maximum filling\n\n  ex: \n  6 1 3 2 2 3\n  1 2 3 4 5 6\n  1 2 3 4 5 6\n  1 2 3 4 5 6\n  1 2 3 4 5 6\n  1 2 3 4 5 6\n  1 2 3 4 5 6\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2') == 'impossible'\nassert solution('6\\n6 1 3 2 2 3') == '0.6'\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2\\n2 2\") == \"impossible\"\n\nimport re"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\") == \"impossible\"\n\nassert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\n\nassert solution(\"3\\n1 2 3\") == \"impossible\"\n\nassert solution(\"2\\n1 1\") == \"0.5\"\n\nassert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 1 3 2 2 3\\n2 2\") == \"0.6\"\n\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\nprint(solution(a))"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\\n\") == \"0.6\"\nassert solution(\"2\\n2 2\\n\") == \"impossible\"\nassert solution(\"2\\n4\\n\") == \"impossible\"\nassert solution(\"1\\n1\\n\") == \"1.0\"\nassert solution(\"1\\n0\\n\") == \"0.0\"\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 1 4\", \"1 6 1 6\") == 'Emma'\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == 'Tie'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Gunnar'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nassert solution('1 10 1 10\\n1 20 2 10') == 'Tie'\nassert solution('1 1 1 1\\n1 3 2 3') == 'Tie'\nassert solution('1 1 1 1\\n1 4 2 4') == 'Tie'"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == \"Emma\"\nassert solution('1 8 1 8\\n1 10 2 5') == \"Tie\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n1 4 1 4\n1 6 1 6\n''') == 'Emma'\nassert solution('''\n1 8 1 8\n1 10 2 5\n''') == 'Tie'\n\nprint('Successfully passed the challenge.')"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\nimport os\nimport io\nfrom unittest import TestCase\nfrom unittest.mock import patch\nfrom collections import Counter\n\nclass TestSolution(TestCase):\n    def test_solution(self):\n        with patch('builtins.input', side_effect=[\n            '1 4 1 4',\n            '1 6 1 6',\n        ]) as input_mock:\n            with patch('sys.stdout', new=io.StringIO()) as output_mock:\n                solution()\n\n                self.assertEqual(output_mock.getvalue(), \"Emma\")\n\n    def test_solution2(self):\n        with patch('builtins.input', side_effect=[\n            '1 8 1 8',\n            '1 10 2 5',\n        ]) as input_mock:\n            with patch('sys.stdout', new=io.StringIO()) as output_mock:\n                solution()\n\n                self.assertEqual(output_mock.getvalue(), \"Tie\")\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 8 1 8\\n1 10 2 5') == \"Tie\"\nassert solution('1 4 1 4\\n1 6 1 6') == \"Gunnar\"\nassert solution('1 5 1 5\\n1 5 1 6') == \"Tie\"\nassert solution('1 5 1 5\\n1 5 1 6') == \"Emma\"\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n\"\"\"\n\nimport os\nimport sys\nimport math\nimport time"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') =='something is fishy'\nassert solution('1 2 3 mumble mumble 7 mumble 8') =='something is fishy'"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\nprint('Hooray!')"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n1 2 3 mumble 5''') =='makes sense'\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8''') =='something is fishy'\n'''"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\nimport sys\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\"\n\n\"\"\"\n\u601d\u8def:\n\u6309\u7167\u6240\u6709\u53e3\u540c\u58f0\u8ba1\u6570\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\\n\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\\n\") == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 mumble 5''') == \"makes sense\"\nassert solution('''8\n1 2 3 mumble mumble 7 mumble 8''') == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\nassert solution(\"4 9 25 49 81\") == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\nassert solution(\"4 9 25 49 81\") == '2 121'"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0 0'\nassert solution('1\\n5\\n6\\n9\\n12\\n15') == '1 18'\n\"\"\"\n\nfrom math import log, ceil"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin_lines) == expected_stdout_lines\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3 6 9 12 15\n''') == '1 18'\nassert solution('''4 9 25 49 81\n''') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 6 9 12 15\\n4 9 25 49 81\") == \"1 18\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 6 9 12 15\\n\") == \"1 18\"\nassert solution(\"4 9 25 49 81\\n\") == \"2 121\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 4\\n7 3\\n5 0\\n6 2\\n0 3\\n2 6\\n5 1\\n3 7\") == \"INCORRECT\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n'''\n) == 'CORRECT'\n\nassert solution(\n'''\n4\n2 3\n1 0\n0 2\n3 1\n'''\n) == 'CORRECT'\n\nassert solution(\n'''\n8\n0 0\n0 7\n2 0\n3 3\n2 3\n2 4\n5 0\n5 5\n0 5\n'''\n) == 'INCORRECT'\n\nassert solution(\n'''\n3\n0 1\n2 0\n0 2\n'''\n) == 'INCORRECT'\n\nassert solution(\n'''\n2\n0 0\n2 0\n'''\n) == 'CORRECT'"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\nassert solution(\"3\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\n\nprint(solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\"))"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\nSample Output 2:\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\n\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\\n\") == \"1 1 1\"\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\nm = np.array([input().split() for _ in range(n)], int)\na = np.bitwise_and(m.sum(0), m.sum(1))\nprint(' '.join(map(str, a)))\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\nassert solution('''2\n0 1\n1 0''') == '1 1'\nassert solution('''3\n1 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0''') == '0 0 0 0'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n0 1 1\n1 0 1\n1 1 0\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n\"\"\") == \"1 2 3 1 11\"\n\nassert solution(\"\"\"5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n\"\"\") == \"1 2 3 1 11\"\n\"\"\"\nimport numpy as np\n\nn = int(input())\na = np.array([[int(n) for n in input().split()] for _ in range(n)])\n\nfor i in range(n):\n    for j in range(n):\n        print(int(a[i][j]) & int(a[i][j - 1]), end=' ') if j > 0 else print(int(a[i][j]), end=' ')\n    print()\n\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == '1 1 1'\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == '1 2 3 1 11'"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('31 1') == 'Saturday'\nassert solution('1 10') == 'Sunday'\nassert solution('7 10') == 'Sunday'\nassert solution('10 10') == 'Sunday'\n\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.testcase[0]) == solution.testcase[1]\nprint(\"Solution is correct!\")\n\n'''"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('16 1') == 'Saturday'\nassert solution('11 1') == 'Sunday'\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('1 1') == 'Thursday'\nassert solution('1 1') == 'Thursday'\n\n-----Solution-----\n'''"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\nprint(solution(\"1 1\"))\nprint(solution(\"17 1\"))\n\n\n\n\nWrite 5 lines of code to test the correctness of solution:\nWrite a program that, given a date in $2009$, determines the day of week on that date.\n\n-----Input-----\nThe first line contains two positive integers $D$ (day) and $M$ (month) separated by a space. The numbers will be a valid date in $2009$.\n\n-----Output-----\nOutput the day of the week on day $D$ of month $M$ in $2009$. The output should be one of the words \u201cMonday\u201d, \u201cTuesday\u201d, \u201cWednesday\u201d, \u201cThursday\u201d, \u201cFriday\u201d, \u201cSaturday\u201d or \u201cSunday\u201d.\n\n-----Examples-----\nSample Input 1:\n1 1\nSample Output 1:\nThursday\n\nSample Input 2:\n17 1\nSample Output 2:\nSaturday"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Saturday'\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('21 2') == 'Sunday'\nassert solution('24 3') == 'Monday'\nassert solution('28 4') == 'Tuesday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 1''') == 'Thursday'\n\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"4 7\") == \"Sunday\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"Saturday\"\n\"\"\"\n\nd, m = [int(c) for c in stdin.split()]"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n') == '2'\nassert solution('1\\n2\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n100\\n4\\n12') == '129\\n480'"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nprint('Test pass.')"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\nassert solution('1\\n100\\n3\\n') == '5\\n50'\nassert solution('1\\n100\\n7\\n') == '12\\n80'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100\\n500\\n12\") == \"129\\n480\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40\\n'\nassert solution('1\\n500\\n12\\n') == '129\\n480\\n'\nassert solution('100\\n500\\n12\\n') == '129\\n480\\n'\nassert solution('1\\n50\\n12\\n') == '129\\n480\\n'\n\"\"\"\n\nl, d, x = map(int, input().split('\\n'))\nprint(l+d, l, d)\n\ns = [str(l), str(d)]\nfor i in range(len(s)):\n    s[i] = str(s[i])\n    s[i] = '0'*(3-len(s[i])) + s[i]\nprint(''.join(s))\n\nprint(max(int(s[0]+s[1]), int(s[1]+s[0])))\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 7') == '4 9', 'case1'\nassert solution('10 8 7') == '9 9', 'case2'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\\n\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\\n\"\nassert solution(\"100\\n5\\n12\\n\") == \"129\\n480\\n\"\n\"\"\"\n\nL, D, X = (int(x) for x in input().split())\nwhile L < 1 or L > 10000:\n    print(\"Out of range!\")\n    L, D, X = (int(x) for x in input().split())\nwhile D < 1 or D > 10000:\n    print(\"Out of range!\")\n    L, D, X = (int(x) for x in input().split())\nwhile X < 1 or X > 36:\n    print(\"Out of range!\")\n    L, D, X = (int(x) for x in input().split())\nprint(L, D, X)\n\nlow = min(L, D)\nup = max(L, D)\nprint(low, up)\n\nlow_digits = 0\nup_digits = 0\nfor i in range(low, up + 1):\n    digits_sum = 0\n    for j in str(i):\n        digits_sum += int(j)\n    if digits_sum == X:\n        low_digits = i\n        break\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40\\n'\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n') == '1\\n1\\n1\\n'\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4''') == '4.0\\n3'\n\nassert solution('''3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\n''') == '6.0\\n3'\n'''\n\n-----\n\n\u0410\u043d\u0442\u043e\u043d \u043f\u043e\u043a\u0443\u043f\u0430\u043b \u043f\u043e\u043b \u0434\u0435\u0440\u0435\u0432\u044f\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 \u0438 \u0445\u043e\u0447\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e. \u041d\u0430 \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u043e\u043d \u0441\u043c\u043e\u0433 \u0441\u0432\u043e\u0434\u0438\u0442\u044c \u043a \u043f\u043e\u043b\u0443, \u043e\u043d \u0434\u043e\u0432\u043e\u043b\u0435\u043d \u0442\u0435\u043c, \u0447\u0442\u043e \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b \u0441\u0432\u043e\u044e \u0434\u0435\u043b\u0430\u044e\u0449\u0443\u044e \u043a\u0440\u0430\u0441\u043e\u0442\u0443. \u0410 \u0437\u0430\u0442\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u0437\u0434\u0430\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b \u0432 \u043d\u0435\u043c \u0441\u0442\u0430\u0440\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434 \u0438\u0437 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n\n\u0412 \u0442\u043e\u0442 \u0447\u0430\u0441 \u0432\u0435\u043b\u0438\u043a\u0438\u0439 \u0434\u0440\u0443\u0433 \u0410\u043d\u0442\u043e\u043d \u0437\u0430\u0445\u043e\u0442\u0435\u043b \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043d\u043e \u043d\u0435 \u0445\u043e\u0447\u0435\u0442, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d \u0440\u0435\u0448\u0438\u043b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 \u043d\u0430\u0439\u0442\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u043e\u0435 \u0434\u0435\u043b\u043e \u0431\u0435\u0437 \u0442\u0440\u0443\u0434\u0430. \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043e\u043d \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0430\u0439\u0442\u0438, \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u043e\u0432\u044b\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 \u0432\u044b\u043b\u043e\u0436\u0438\u043b \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0436\u0435 \u0431\u044b\u043b \u0440\u0430\u043d\u0435\u0435 \u043f\u0438\u0441\u0430\u0442\u044c.\n\n\u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0435\u043c\u0443. \u0412 \u043a\u043e\u0434\u0435 \u0435\u0441\u0442\u044c \u0446\u0438\u043a\u043b for, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 1 \u0434\u043e 100 \u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u044d\u0442\u0438\u0445 100 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0444\u043e\u0440\u043c\u0443\u043b:\n\n\\[ \\frac{1}{3} \\] \\[ \\frac{1}{4} \\] \\[ \\frac{1}{5} \\] \\[ \\frac{1}{6} \\] \\[ \\frac{1}{7} \\] \\[ \\frac{1}{8} \\] \\[ \\frac{1}{9} \\] \\[ \\frac{1}{10} \\]\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u0435\u0440\u0443\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\nSample Input 1:\n\nSample Output 1:\n\nSample Input 2:\n\nSample Output 2:\n\nSample Input 3:\n\nSample Output 3:\n'''"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4''') == '4.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3''') == '6.0\\n3'\n\nprint('Success')"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\nprint('Passed')\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"1.5\"\nassert solution(\"1 1\") == \"0.0\"\nassert solution(\"5 1\") == \"2.5\"\nassert solution(\"1 2\") == \"1.0\"\nassert solution(\"3 3\") == \"3.0\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '6.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\n\nprint(solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3'))\n\n-----Problem-----\n\nAnte has a piece of land, and the land contains N apple trees. However, Ante\u2019s piece of land is triangular and it is not easy for him to determine which apple trees belong to him.\n\nYour program will be given the coordinates of the vertices of the triangle forming Ante\u2019s piece, and the coordinates of all apple trees. Determine the area of land belonging to Ante, and the number of trees belonging to him. We consider apple trees on the very border of his piece to belong to him.\n\nThe area of a triangle with vertices $(x_ A, y_ A), (x_ B, y_ B)$ and $(x_ C, y_ C)$ is given by the following formula:\\[ \\frac{|x_ A(y_ B - y_ C) + x_ B(y_ C - y_ A) + x_ C(y_ A - y_ B)|}{2} \\]\n\n-----Input-----\nThe first three lines contain the coordinates of the vertices of the triangle.\n\nThe following line contains the integer $N$ $(1 \\le N \\le 100)$, the number of apple trees.\n\nEach of the following $N$ lines contains the coordinates of one apple tree.\n\nAll coordinate are pairs of positive integers less than 1000, separated by a space.\n\n-----Output-----\nOutput the area of land belonging to Ante on the first line, with exactly one digit after the decimal point.\n\nOutput the number of trees belonging to Ante on the second line.\n\n-----Examples-----\nSample Input 1:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 1:\n4.0\n3\n\nSample Input 2:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 2:\n6.0\n3\n\nSample Input 3:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 3:\n6.0\n3\n\nSample Input 4:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 4:\n6.0\n3\n\nSample Input 5:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 5:\n6.0\n3\n\nSample Input 6:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 6:\n6.0\n3\n\nSample Input 7:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 7:\n6.0\n3\n\nSample Input 8:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 8:\n6.0\n3\n\nSample Input 9:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 9:\n6.0\n3\n\nSample Input 10:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 10:\n6.0\n3\n\nSample Input 11:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 11:\n6.0\n3\n\nSample Input 12:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 12:\n6.0\n3\n\nSample Input 13:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 13:\n6.0\n3\n\nSample Input 14:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 14:\n6.0\n3\n\nSample Input 15:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 15:\n6.0\n3\n\n-----Problem-----\n\nAnte has a piece of land, and the land contains N apple trees. However, Ante\u2019s piece of land is triangular and it is not easy for him to determine which apple trees belong to him.\n\nYour program will be given the coordinates of the vertices of the triangle forming Ante\u2019s piece, and the coordinates of all apple trees. Determine the area of land belonging to Ante, and the number of trees belonging to him. We consider apple trees on the very border of his piece to belong to him.\n\nThe area of a triangle with vertices $(x_ A, y_ A), (x_ B, y_ B)$ and $(x_ C, y_ C)$ is given by the following formula:\\[ \\frac{|x_ A(y_ B - y_ C) + x_ B(y_ C - y_ A) + x_ C(y_ A - y_ B)|}{2} \\]\n\n-----Input-----\nThe first three lines contain the coordinates of the vertices of the triangle.\n\nThe following line contains the integer $N$ $(1 \\le N \\le 100)$, the number of apple trees.\n\nEach of the following $N$ lines contains the coordinates of one apple tree.\n\nAll coordinate are pairs of positive integers less than 1000, separated by a space.\n\n-----Output-----\nOutput the area of land belonging to Ante on the first line, with exactly one digit after the decimal point.\n\nOutput the number of trees belonging to Ante on the second line.\n\n-----Examples-----\nSample Input 1:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 1:\n4.0\n3\n\nSample Input 2:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 2:\n6.0\n3\n\nSample Input 3:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 3:\n6.0\n3\n\nSample Input 4:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 4:\n6.0\n3\n\nSample Input 5:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 5:\n6.0\n3\n\nSample"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        assert solution('3') == '2'\n    def test_solution(self):\n        assert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\nn = int(input())\n\nwhile True:\n    x = n**2\n    for i in range(2, n):\n        if x % i == 0:\n            break\n    else:\n        print(i)\n        break\n    n += 1\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('3') == '2'\nassert solution('30') == '7'\nassert solution('10') == '4'\n\n'''\n\nimport math\nfrom collections import defaultdict\nfrom collections import Counter\nimport functools\nfrom itertools import combinations\nfrom itertools import permutations\nfrom itertools import product\nimport re\nfrom collections import namedtuple\n\nfrom typing import Dict, List, Tuple, Generator, Callable\nfrom copy import deepcopy\nfrom collections import deque\nfrom itertools import combinations\nfrom functools import partial\nfrom math import log10\n\nimport numpy as np"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\") == \"1\"\nassert solution(\"9A-USKOK\") == \"1\"\nassert solution(\"I-NTERPOL\") == \"1\"\nassert solution(\"G-MI6\") == \"1\"\nassert solution(\"RF-KGB1\") == \"1\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1\\nHE GOT AWAY!'\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\nSample Case 0\nInput:\nAAAAA-BBBBB-FFFFF\nSample Output:\n11\n\nSample Case 1\nInput:\nFFFFF-AAAAA-BBBBB\nSample Output:\n11\n\"\"\"\nimport unittest\nimport collections\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\"\"\"\n\nstdin = \"\"\"N-FBI1\n9A-USKOK\nI-NTERPOL\nG-MI6\nRF-KGB1\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4\\n4 2 3 1\") == '2.8284271247461903'"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n\"\"\"\n\nfrom math import atan2"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"9.0\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n3 3 3\n4 5 4''') == '6.843530573929037'\nassert solution('''2\n5 4 4\n3 5 5''') == '9.00000'\n\nprint('Success')"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == '8.0'\n\nhttps://www.codewars.com/kata/55983863da40caa2c900004e/train/python\n\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 6 6\\n6 6 6\") == '8.0'\n\"\"\"\n\nfrom math import sqrt\nfrom typing import List\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"1.9142135623730951\"\nassert solution(\"1 2 3\") == \"1.2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 0 1\") == \"2.0\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 3 3\n4 5 4\n''') == '8.0'\nassert solution('''\n2\n3 3 3\n4 5 6\n''') == '6.843530573929037'\n\n'''\nimport math\nimport decimal\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nprint('All tests passed.')\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nprint('Success')\n\na = int(input())\nnum = 0\nfor i in range(a, 10**9+1):\n    if i % sum(int(j) for j in str(i)) == 0:\n        num = i\n        break\nprint(num)"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('7') == '9'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('87') == '87'\nassert solution('122') == '123'\nassert solution('854') == '854'\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\"\nimport math"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4+7') == '7'\nassert solution('1+9+8+4+7+1') == '7'\nassert solution('1+9+8+4+7+1+3+6+8+9') == '11'\nassert solution('1+9+8+4+7+1+3+6+8+9+2+5+8+4+3') == '23'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1+2+3+4+5+6+7+8+9') == '188'"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+3+8+4\") == \"19\"\nassert solution(\"1+9+8+4+3+8+4+9+8+4+3+8+4+9+8+4+3+8+4\") == \"31\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+9+8+4') == '7'\n\nprint(solution('1+9+8+4'))\nprint(solution('1+2+3+4+5+6+7+8+9'))\nprint(solution('1+9+8+4'))"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+3+5+6+7+8+9+0\") == \"188\"\n\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\nassert solution(\"1+9+8+4\") == \"7\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1+9+8+4') == 7\nassert solution('1+2+3+4+5+6+7+8+9') == 188\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"2 3\"\nassert solution(\"1 3 -2\") == \"1 -2\"\nassert solution(\"3 4 5\") == \"0 0 0\"\nassert solution(\"3 1 5\") == \"0 3 0\"\nassert solution(\"4 -1 -3\") == \"0 0 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('1 5 1') == '5 1'\nassert solution('1 3 -1') == '3 -1'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 2\\n') == '2 5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 5 2''') == '2 5'\nassert solution('''2 2 -4 5''') == '5 -2 4'\nassert solution('''1 5 2\n2 2 -4 5''') == '5 -2 4'"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\"\"\"\n\nfrom typing import List\n\nclass Polynomial:\n\n    def __init__(self, coefficients: List[int]):\n        self.coefficients = coefficients\n\n    def __str__(self) -> str:\n        result = []\n\n        for coefficient in reversed(self.coefficients):\n            result.append(str(coefficient))\n\n            if coefficient > 0:\n                result.append(\" + \")\n            elif coefficient < 0:\n                result.append(\" - \")\n\n        result.append(\"0\")\n\n        return \"\".join(result)\n\n    def __repr__(self) -> str:\n        return \"Polynomial(coefficients=%s)\" % repr(self.coefficients)\n\n    def __add__(self, other: \"Polynomial\") -> \"Polynomial\":\n        return Polynomial([self.coefficients[i] + other.coefficients[i] for i in range(len(self.coefficients))])\n\n    def __sub__(self, other: \"Polynomial\") -> \"Polynomial\":\n        return Polynomial([self.coefficients[i] - other.coefficients[i] for i in range(len(self.coefficients))])\n\n    def evaluate(self, x: int) -> int:\n        value = 0\n\n        for coefficient in self.coefficients:\n            value += coefficient * x ** len(self.coefficients)\n\n            if coefficient > 0:\n                value = +value\n\n            elif coefficient < 0:\n                value = -value\n\n        return value"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 -4 5\") == \"5 -2 4\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"6 -14 -20 -22 -24 1\") == \"1 -14 -20 -22 -24 1\"\nassert solution(\"3 2 1\") == \"2 1 3\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\\n2 2 -4 5\") == \"2 5\"\nassert solution(\"1 5 2\\n3 2 -4 5\") == \"3 4 5\"\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1\\n') == '1 1 1 3 3 3 2 2 2'"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aabbcc') == 'aaabbbcc'\nassert solution('aabbbbcc') == 'aaabbbbcc'\n'''\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def freq_sorter(self, N: int, C: int, S: str):\n        \"\"\"\n        Sorting by frequency - 1 means the largest occurrence gets priority\n        \"\"\"\n        S = [int(i) for i in S.split(' ')]\n        counter = {}\n        for i in S:\n            if i not in counter:\n                counter[i] = 1\n            else:\n                counter[i] += 1\n\n        S = list(counter.items())\n        S.sort(key=lambda x: x[1], reverse=True)\n        for i in range(N):\n            print(S[i][0], end=\" \")"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 2\\n2 1 2 1 2\"\n) == \"2 2 2 1 1\"\nassert solution(\n    \"9 3\\n1 3 3 3 2 2 2 1 1\"\n) == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 1 2 1 2\\n') == '2 2 2 1 1'\n\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1\\n') == '1 1 1 3 3 3 2 2 2'"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\nprint('Success')\n\nNotes\n---\n\nSolutions\n---\n\n```python3\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\nprint(solution(a))\n\nSample Input 3:\n23 43\nSample Output 3:\n541\n\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\nprint(math.ceil((b / a) * 100))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 38\\n24') == '875'\nprint(solution(stdin))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\nassert solution('1 100 2') == '100'\nassert solution('1 100 2 100') == '101'\nassert solution('1 100 2 100 2 100') == '101'\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\"\"\"\n\nimport sys\n\na, i = map(int, sys.stdin.readline().split())\n\nprint(a * (i // a))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\nassert solution('100 100') == '0'\nassert solution('2 2') == '0'\nassert solution('3 9') == '2'\n\"\"\"\nimport sys\n\nnum_articles, impact_factor = input().strip().split()\nnum_articles = int(num_articles)\nimpact_factor = int(impact_factor)"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"38 24\") == \"875\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\nprint('Test pass.')"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nprint('Test passed')\n\n-----Test format-----\nYou can find the input and output for every test case in the description of the problem.\n\nIf your solution passes all the tests, it will be accepted and you will receive a rating of 10 points.\n\nYou can submit your solution as many times as you like.\n\nPlease, do not change the names of the functions.\n\nWhen discussing with your group:\n- Explain your solution step by step.\n- Explain the meaning of the function code.\n\nYou can submit your solution as many times as you like.\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('918 999') == '999'\nassert solution('999 918') == '999'\nassert solution('1317 734') == '931'\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n\na, b = input().split()\nprint(int(a[::-1]) if int(a[::-1]) > int(b[::-1]) else int(b[::-1]))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"1 2\") == \"21\"\n\"\"\"\n\nA, B = input().split()\nA, B = sorted([int(A), int(B)])\nprint(A if A > B else B)\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nprint(solution(stdin))\n\nNote: stdin = input() will evaluate to a single string\n\"\"\"\nimport sys\n\nl, w = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\n\"\"\"\n\nimport sys\nimport itertools\nimport re"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 3') == 'impossible'\nassert solution('1 3\\n2 3') == 'impossible'\nassert solution('1 3\\n3 3') == 'contest'\nassert solution('1 3\\n4 3') == 'contest'\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solve(self, input_string: str) -> str:\n        # Parse input\n        l, w = input_string.split()\n        l, w = int(l), int(w)\n\n        # Find all permutations with valid weight\n        valid_perms = []\n        letters = 'abcdefghijklmnopqrstuvwxyz'\n        for perm in self.get_permutations(letters):\n            if self.valid_weight(perm, w):\n                valid_perms.append(''.join(perm))\n\n        # Check if valid permutations\n        if len(valid_perms) == 0:\n            return \"impossible\"\n\n        return min(valid_perms, key=lambda x: (-len(x), x))\n\n    def get_permutations(self, letters):\n        if len(letters) == 0:\n            return []\n\n        if len(letters) == 1:\n            return [letters]\n\n        permutations = []\n        for idx, letter in enumerate(letters):\n            rest = letters[:idx] + letters[idx+1:]\n            permutations.extend(self.get_permutations(rest) + [letter] * letter)\n\n        return permutations\n\n    def valid_weight(self, perm, w):\n        for letter in perm:\n            if w <= 0:\n                return False\n            w -= ord(letter) - ord('a') + 1\n\n        return w == 0\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\n'''"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\nfrom typing import List, Tuple, Set\nfrom itertools import combinations\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\nl, w = list(map(int, input().split()))\n\ns = [1, 3, 4, 6, 7, 9, 10, 15, 16, 18, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 40]\n\nresult = []\n\nfor i in range(len(s)):\n    for j in range(i + 1, len(s)):\n        if s[i] + s[j] == w:\n            result.append(\"\".join([chr(i) for i in range(97, 97 + s[i])]))\n            result.append(\"\".join([chr(i) for i in range(97, 97 + s[j])]))\n\nresult = set(result)\n\nprint(*sorted(result), sep=\"\\n\") if len(result)!= 0 else print(\"impossible\")\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 9\n''') == 'impossible'\nassert solution('''5 7\n''') == 'possible'\nassert solution('''5 8\n''') == 'impossible'\nassert solution('''1 1\n''') == 'impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 \"X\"' == 'X\\nX')\nassert solution('3 12 \"A\"' == 'ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n')\nassert solution('5 4 \"!\"' == '!!!!!\\n!\\n\\n\\n!')\nassert solution('2 2 \"X\"') == 'X\\nX'\nassert solution('3 12 \"A\"') == 'ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".X\\n--\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nABABABABABAB\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin_lines) == expected_stdout_lines\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 \"X\"\\nX^\\n--\\n\\n.X\\n--') == '.^\\n--\\n\\n.^\\n--'\nassert solution('3 12 \"A\"\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--') == '.^\\n--\\n\\n.'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--') == '.^\\n--'\nassert solution('3 12 \\'A\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA') == 'BBABABABABAC\\nBBBABABABABA\\nBBABABABABAB'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 'X'\") == \".X\\n--\\n\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\nprint(\"Solution 1: \", solution(stdin))\n\nimport re"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 \"A\"') == 'A'\nassert solution('1 2 \"A\"') == 'A'\nassert solution('2 1 \"A\"') == 'AB'\nassert solution('3 3 \"B\"') == 'BBB'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 \"X\"'\n                ) == '.X'\nassert solution('3 12 \"A\"'\n                ) == 'AABABABABABA'\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom copy import copy\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'impossible'\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\n\"\"\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\"\n\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'impossible'\nassert solution('3 1 1') == '1 1 1'\nassert solution('2 5 4 14') == '1 1 2'\nassert solution('2 4 4 14') == '1 1 2'\nassert solution('2 3 4 14') == 'impossible'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\"\n) == \"good job\"\n\nassert solution(\n    \"5\\n2\\n4\\n6\\n7\"\n) == \"1\\n3\"\n\nassert solution(\n    \"8\\n2\\n4\\n6\\n7\"\n) == \"1\\n3\\n5\"\n\nassert solution(\n    \"9\\n2\\n4\\n6\\n7\\n9\\n10\\n11\\n13\"\n) == \"1\\n3\\n6\\n12\"\n\nassert solution(\n    \"9\\n2\\n4\\n6\\n7\\n9\\n10\\n11\\n13\"\n) == \"1\\n3\\n6\\n12\\n14\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5\\n6') == 'good job'\nassert solution('3\\n4\\n8\\n9') == 'good job'\nassert solution('3\\n4\\n6\\n7\\n9\\n10\\n11\\n12') == '3\\n6\\n9\\n12'\n\nimport math"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n10\\n11') == '6\\n12'\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == ''\nassert solution('10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == '12\\n13'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == '12\\n13'"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == 'good job'\nassert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '1 3 6'\n\nprint(solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13'''))"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2\\n1\\n2\\n3\\n4\\n5\\n6\") == \"3\"\nassert solution(\"2\\n3\\n4\\n5\\n6\\n7\\n9\\n8\") == \"1\"\nassert solution(\"8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\") == \"1\"\nassert solution(\"7\\n2\\n1\\n2\\n3\\n4\\n5\\n6\") == \"3\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"1\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\") == 'good job'\nassert solution(\"6\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\") == '1\\n3\\n6\\n12'\nassert solution(\"6\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\") == '1\\n3\\n6\\n12'\nassert solution(\"1\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\") == 'good job'\nassert solution(\"1\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\") == '1\\n3\\n6\\n12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n2\\n3\\n7\\n5\\n9\\n6\\n10\\n11') == 'good job'\nassert solution('4\\n1\\n2\\n3\\n7\\n5\\n9\\n6\\n10\\n11') == '4\\n6\\n1\\n3\\n2'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\\n14\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"1\\n3\\n6\\n12\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\"\n\n\n\nSample Input:\n5\n2\n4\n5\n7\n8\n9\n10\n11\n13\nSample Output:\n1\n3\n6\n12\n14\n\n\"\"\"\n\nn = int(input())\nnumbers = set()\nfor i in range(n):\n    numbers.add(int(input()))\n\nnumbers = list(numbers)\nnumbers.sort()\n\nfor i in numbers:\n    print(i)\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9\n2\n4\n5\n7\n8\n9\n10\n11\n13''') == '''good job'''\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '''1\n3\n6\n12\n17\n21'''\nassert solution('''1\n2\n3\n5\n6\n7\n8\n9\n10''') == '''1\n4\n6\n8\n10'''\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '''1\n2\n3\n4\n5\n7\n8\n9\n10'''\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '''1\n2\n3\n4\n5\n6\n7\n8\n9\n10'''\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n1\\n3\\n6\\n12\\n\") == \"1\\n3\\n6\\n12\"\n\nprint(solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n1\\n3\\n6\\n12\\n\"))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 9.9 40075000 272.1') == '157079.04857106 15.598261092309'"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nn, p, s, v = [int(i) for i in stdin.split()]"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\nprint(solution(\"10 8.9 40075000 272.1\"))\n\n-----Notes-----\nThe first line in the input is the number of airports, the second line is the number of billions of operations per second, the third line is the length of the optimal tour of all European airports in meters, and the fourth line is the speed of the private jet in meters per second.\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\nSample Input:\n100 200.9 5937500.4 1117.9\nSample Output:\n3393.94775952 13.84683665"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n\nn, p, s, v = [float(i) for i in input().split()]\nc = (s * (1 + 1 / n) / v)\n\nprint(\"{} {}\".format(math.ceil(c * p * 10**9), c))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\n\np = float(input().split()[1]) * 10 ** 9\ns = float(input().split()[2])\nv = float(input().split()[3])"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5.5 5000 100.1 50') == '1.41103845 0.817726023'\nassert solution('5 4.9 10000 200.2 300') == '1.87599081 0.812571352'\nassert solution('6 5.9 1000 300.3 250') == '1.88891115 0.813573412'\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10**6)\n\ndelta = 1.0 / (10**6)\n\nn, p, s, v = (int(x) for x in input().split())"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1''') == '''0'''"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 0\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n'''\n\nimport math"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"3\") == 2\nassert solution(\"10\") == 8\nassert solution(\"0\") == 1"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('4') == '10'\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\nA\nA\nA\nA''') == 3\nassert solution('''4\nB\nB\nA\nA''') == 2\nassert solution('''4\nD\nC\nA\nA''') == 1\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\"\n    \"A\"\n    \"A\"\n    \"A\"\n    \"A\"\n    ) == \"3\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nA\\nB\\nA\\nA\") == 3\nassert solution(\"4\\nA\\nC\\nA\\nA\") == 3\nassert solution(\"4\\nB\\nC\\nA\\nA\") == 2\nassert solution(\"4\\nA\\nB\\nA\\nA\") == 3\nassert solution(\"4\\nB\\nB\\nA\\nA\") == 2"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCABC\") == 3\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A\\nA\\nA\\nA') == '3'\nassert solution('B\\nA\\nA\\nA') == '1'\nassert solution('A\\nA\\nB\\nA') == '1'\nassert solution('B\\nC\\nA\\nB') == '2'\nassert solution('A\\nB\\nC\\nA') == '3'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A\\nA\\nA\\nA') == '3'\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AABAA\") == \"3\"\nassert solution(\"ABABAB\") == \"4\"\nassert solution(\"AAABBA\") == \"2\"\nassert solution(\"AAABAA\") == \"1\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == '3'\nassert solution('4\\nB\\nB\\nC\\nD') == '0'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\nprint(\"All tests passed.\")\n\n-----Solution-----\n\n'''\nn = int(stdin.readline())\n\nfor i in range(n):\n    if stdin.readline() == 'A\\n':\n        continue\n    else:\n        print(i+1)\n        break\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nA\\nA\\nB\\nA\") == \"2\"\n\n\"\"\"\n\nn = int(input())\na = [input() for i in range(n)]\nb = [i if a[i] == \"A\" else a[i] for i in range(n)]\nprint(b.count(\"A\"))\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"2 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x.\\nxx.x\\n.x.\"\nassert solution(\"2 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x.\\nxx.x\\n.x.\"\nassert solution(\"2 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x.\\nxx.x\\n.x.\"\nassert solution(\"2 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..x.\\nxx.x\\n.x.\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\nprint(solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\"))\n\n-----Problem-----\nMirko has received his mom\u2019s order to read an article in the \u201cMoja Tajna\u201d magazine. The article is written in a very small font size which Mirko cannot read. Mirko realized that he can read in a smaller font size if he could enlarge it.\n\nHe scanned the article with a 1D scanner that has the parameter $Z_ R$ and $Z_ C$, that is, he can replace each character he scans by a matrix of $Z_ R$ rows and $Z_ C$ columns. Mirko realized that for the same character he scanned, if he would enlarge it by the same amount, the enlarged character would have the same letters.\n\nFor example, if the scanned character is \u201cx\u201d, then the character Mirko scanned with the scanner is enlarged to a matrix of $Z_ R = 1$ rows and $Z_ C = 2$ columns.\n\nLet $A(r, c)$ be the amount of enlarged characters Mirko scanned so far. Let $B(r, c)$ be the amount of enlarged characters Mirko scanned so far. Then, $A(r, c) = B(r, c) + 1$.\n\nMirko was unable to read the article in time and his mom was not happy. To make her happy, you are to count the minimal amount of enlarged characters Mirko should scan to read the article in time.\n\n---Input Format---\nThe first line contains $R$ integers separated by a space, $R$, $C$, $Z_ R$ and $Z_ C$, respectively.\n\nEach of the next $R$ lines contains a row of $C$ characters.\n\n---Output Format---\nPrint the minimum amount of enlarged characters Mirko should scan to read the article in time.\n\n---Sample Input---\n3 3 1 2\n.x.\nx.x\n.x.\nSample Output:\n3\n---Explanation---\nThe enlarged character \u201c.x.\u201d is equal to the scanned character \u201cx\u201d.\n\nThe enlarged character \u201cx.x\u201d is equal to the scanned character \u201cx\u201d and so on.\n\nMirko scanned 3 enlarged characters."
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == expected\n\n-----Solution-----\n\"\"\"\n\na, b, zr, zc = [int(s) for s in input().split()]\narticles = [input() for _ in range(a)]"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..\\n'\n\nassert solution('3 3 1 2\\nx.\\nx.\\nx.') == '..xx..\\nxx..xx\\n..xx..\\n'\n\nassert solution('3 3 1 2\\n.x\\nx.\\n.x.') == '..x..\\nxx..\\n..x..\\n'\n\nassert solution('3 3 1 2\\nx.x\\nx.\\nx.') == '..xx..\\nxx..\\n..xx..\\n'\n\nassert solution('3 3 1 2\\n.x\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..\\n'"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \".xx..\\nxx..xx\\n..xx..\"\nassert solution(\"6 6 2 2\\n.x.\\nx.x\\n.x.\") == \".xx..\\nxx..xx\\n..xx..\\n..xx..\"\nassert solution(\"4 4 2 2\\n.x.\\nx.x\\n.x.\\n.x.\") == \".xx..\\nxx..xx\\nxx..xx\\nxx..xx\"\n\nimport numpy as np\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\nassert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\nassert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\nassert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\nassert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\"\n\nSample Input:\n3 3 1 2\n..x.\nx.x\n..x.\nSample Output:\n..xx..\nxx..xx\n..xx..\n\"\"\"\n\nimport numpy\n\nrow, column, Z_R, Z_C = map(int, stdin.readline().split())\n\nmatrix = numpy.zeros((Z_R*row, Z_C*column), dtype=str)\n\nfor i in range(row):\n    matrix[Z_R*i: Z_R*(i+1), :] = stdin.readline().strip()\n\nprint('\\n'.join([''.join(i) for i in matrix]))"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"2 2 1 1\\nxx\\n..\") == \"..xx\\n..xx\\n\"\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 1 2\n.x.\nx.x\n.x.\n'''.strip()) == '..xx..\\nxx..xx\\n..xx..\\n'\n\n\"\"\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    print(line.rstrip())"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('F 60 13 20\\n') == '14 20'\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F60 13 20\") == \"14 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('F 60 13 20') == '14 20'\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('F 60 13 20') == '14 20'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('F 60 13 20') == '14 20'\n\"\"\"\n\nfrom sys import stdin\n\nfor i in range(int(stdin.readline())):\n    F = stdin.readline().strip().split()\n    D, H, M = [int(x) for x in stdin.readline().strip().split()]\n    if F[0] == 'F':\n        if H == 23:\n            if M == 59:\n                H, M = 0, 0\n            else:\n                H, M = H, M + M\n        else:\n            H, M = H, M + H\n    elif F[0] == 'B':\n        if H == 0:\n            if M == 0:\n                H, M = 23, 59\n            else:\n                H, M = M - M, M - 1\n        else:\n            H, M = H - H, M - H\n    if M < 0:\n        M = 59 + M\n        H = H - 1\n    elif M > 59:\n        H = H + 1\n        M = M - 59\n    print(f'{H:0>2d} {M:0>2d}')\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"13 20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\n\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"F 60 13 20\") == \"14 20\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"F60 1320\") == \"14 20\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\nassert solution(\"JAN 9\") == \"nope\"\nassert solution(\"NOV 32\") == \"nope\"\nassert solution(\"OCT 32\") == \"nope\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 25') == 'nope'\n\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 25') == 'nope'\nassert solution('SEP 31') == 'yup'\nassert solution('SEP 25') == 'nope'"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 25\") == \"nope\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"FEB 9\") == \"nope\"\nassert solution(\"SEP 30\") == \"nope\"\nassert solution(\"OCT 20\") == \"yup\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"OCT 31\") == \"yup\"\nassert solution(\n\"OCT 31\") == \"yup\"\nassert solution(\n\"OCT 31\") == \"yup\"\nassert solution(\n\"OCT 31\") == \"yup\"\nassert solution(\n\"OCT 31\") == \"yup\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(oct 31) == 'yup'\nassert solution(nov 1) == 'nope'\nassert solution(oct 3) == 'nope'\nassert solution(oct 30) == 'nope'\nassert solution(oct 31) == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 30\") == \"nope\"\nassert solution(\"NOV 12\") == \"nope\"\nassert solution(\"NOV 32\") == \"nope\"\nassert solution(\"NOV 13\") == \"nope\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 25') == 'nope'\n\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"##\\n#.\\n.\\n###\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"######.\\n#.#.#.#\\n#.honi#\\n###.#.#\\n#.nera#\\n#.#.#.#\\n#.#.#.#\\n######.\"\nassert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"######.\\n#.#.#.#\\n#.honi#\\n###.#.#\\n#.nera#\\n#.#.#.#\\n#.#.#.#\\n######.\"\nassert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"######.\\n#.#.#.#\\n#.honi#\\n###.#.#\\n#.nera#\\n#.#.#.#\\n#.#.#.#\\n######.\"\nassert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"######.\\n#.#.#.#\\n#.honi#\\n###.#.#\\n#.nera#\\n#.#.#.#\\n#.#.#.#\\n######.\"\nassert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"######.\\n#.#.#.#\\n#.honi#\\n###.#.#\\n#.nera#\\n#.#.#.#\\n#.#.#.#\\n######.\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\nassert solution(\"5 5\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\npera\\n\") == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n#.oker.#\\n#.nera#.\\n#.irak.#\\n#.#pera.#\\n#.#.#.#.'\nassert solution(\"5 5\\n2 2 2 2\\nhoni\\noker\\nnera\\n\") == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n#.oker.#\\n#.nera#.\\n#.#.#.#.'\nassert solution(\"5 5\\n2 2 2 2\\nhoni\\n\") == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n#.#.#.#.'\nassert solution(\"4 4\\n2 2 2 2\\nnera\\n\") == '#.#.#.#.\\n.#.#.#.#\\n#.nera#.\\n#.#.#.#.'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"4 4\n2 2 2 2\nhoni\noker\nnera\nirak\"\"\"\n) == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4 4 2 2\\nhoni\\noker\\nera\\nera'\n) == '\\n#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n#oker#.#\\n#.nera#.\\n#.#irak#\\n#.#.#.#\\n#.#.#.#'\nassert solution(\n    '4 4 2 2\\nhoni\\noker\\nera\\nera'\n) == '\\n#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n#oker#.#\\n#.nera#.\\n#.#irak#\\n#.#.#.#\\n#.#.#.#'\nassert solution(\n    '4 4 2 2\\nhoni\\noker\\nera\\nera'\n) == '\\n#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n#oker#.#\\n#.nera#.\\n#.#irak#\\n#.#.#.#\\n#.#.#.#'\nassert solution(\n    '3 3 2 2\\nhoni\\noker\\nera'\n) == '\\n#.#.#\\n#.#.#\\n#.honi\\n#oker#\\n#.#.#\\n#.#.#\\n#.nera'\nassert solution(\n    '5 4 2 2\\nhoni\\noker\\nera\\nera\\nhoni\\nnera\\nhoni'\n) == '\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.honi#.\\n#oker#.#\\n#.nera#.\\n#.#.#.#\\n#.#.#.#\\n#.honi#.\\n#nera#.#\\n#.honi#.'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak') == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.\"\n\nSample Input:\n3 3\n0 0 0\nhoni\noker\nnera\nSample Output:\nhoni\noker\nnera\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 2 2 2\\nhoni\\noker\\nera\\nnera\") == \"#####.#.#.\\n#####.#.#\\n#.honi#.\\n###oker#.\\n#.nera#.\\n#####.#.#\\n#####.#.#\\n\"\nassert solution(\"4 4 2 2 2\\n#\\n#\\n#\\n#\\n\") == \"#####.#.#.\\n#####.#.#\\n#.honi#.\\n#.honi#.\\n#.honi#.\\n#.honi#.\\n#.honi#.\\n#.honi#.\\n#.honi#.\\n#.honi#.\\n#.honi#.\\n\""
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\n\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4') == 'Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Kh2,Kh3,Kh4,Th6,Th7,Th8,Qh5,Kh5,Th3,Kh6,Kh7,Qh2,Qg8,Kh1,Qf8 White: Kg1,Kg2,Kg3,Kg4,Kg5,Kg6,Kg7,Kg8,Qg7,Kg5,Kg4,Kg3,Qg2,Qg1 Black: Kg9,Kg8,Kg7,Kg6,Kg5,Kg4,Kg3,Kg2,Kg1,Kg9,Qg9,Kg8,Kg7,Kg6,Kg5,Kg4,Kg3,Kg2,Kg1\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Kh2,Kh3,Kh4,Th6,Th7,Th8,Qh5,Kh5,Th3,Kh6,Kh7,Qh2,Qg8,Kh1,Qf8 White: Kg1,Kg2,Kg3,Kg4,Kg5,Kg6,Kg7,Kg8,Qg7,Kg5,Kg4,Kg3,Qg2,Qg1 Black: Kg9,Kg8,Kg7,Kg6,Kg5,Kg4,Kg3,Kg2,Kg1,Kg9,Qg9,Kg8,Kg7,Kg6,Kg5,Kg4,Kg3,Kg2,Kg1\") == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Kh2,Kh3,Kh4,Th6,Th7,Th8,Qh5,Kh5,Th3,Kh6,Kh7,Qh2,Qg8,Kh1,Qf8 White: Kg1,Kg2,Kg3,Kg4,Kg5,Kg6,Kg7,Kg8,Qg7,Kg5,Kg4,Kg3,Qg2,Qg1 Black: Kg9,Kg8,Kg7,Kg6,Kg5,Kg4,Kg3,Kg2,Kg1,Kg9,Qg9,Kg8,Kg7,Kg6,Kg5,Kg4,Kg3,Kg2,Kg1\") == \"+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+') == '+p::q::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::p::"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\", \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\", \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|p.|p.|p.|p.|p.|p.|:::|p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|p.|p.|p.|p.|p.|p.|:::|p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|p.|p.|p.|p.|p.|p.|:::|p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n    \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black: Kd8,Ra8,Qh8,Bg8,Bg7,Qg7,Bf7,Nh7,Qf7,Qg6,Rf6,Kf5,Rh5,Rh4,Rf4,Ra4,Kg4,Kh4,Qd3,Qc2,Qb2,Qa1,Rb1,Rc1,Nd1,Ne1,Nf1,Ng1,Kg1,Kh1,Nh1,Kf1,Kb1,Kh1,Kc1,Rd1,Rb1,Qb1,Qc1,Qd1,Rc1,Nd1,Ne1,Nf1,Ng1,Kh1,Kh1,Nh1,Kg1,Kf1,Kd1,Kc1,Ng1,Nf1,Nh1,Kh1,Kh1,Nh1,Kg1,Kd1,Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:P:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: b5,g5,h5,e5,d5,c5,f5,b4,g4,h4,e4,d4,c4,f4,e3\\nBlack: Ra2,a3,a4,a5,a6,a7,a8,Ra1,b1,c1,d1,e1,f1,g1,h1\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:P:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n|:B:|.r.|:B:|.k.|:B:|.R.|:::|.B.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\nWhite: b5,g5,h5,e5,d5,c5,f5,b4,g4,h4,e4,d4,c4,f4,e3\\nBlack: Ra2,a3,a4,a5,a6,a7,a8,Ra1,b1,c1,d1,e1,f1,g1,h1\\nWhite: b3,c3,d3,e3,f3,g3,h3,b"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output\n\"\"\"\nimport copy"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\", solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\")\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P."
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.00000000 4.00000000\") == \"Diablo is happy!\"\nassert solution(\"2.00000000 4.00000000\") == \"Need more materials!\"\n\n-----Solution-----\n\nx1, y1 = map(float, stdin.split())\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.000000 4.000000\")!= \"Need more materials!\"\n\"\"\"\n\nA = float(stdin.readline().split()[0])\nN = int(stdin.readline().split()[0])"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('2.4 3.4') == 'Need more materials!'\nassert solution('0.1 0.4') == 'Diablo is happy!'\nassert solution('1.1 1.4') == 'Need more materials!'\nassert solution('3.2 1.6') == 'Diablo is happy!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\"\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.0 2.0') == 'Need more materials!'\nassert solution('1.0 4.0') == 'Diablo is happy!'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\nA, N = [float(x) for x in input().strip().split()]\nprint('Need more materials!' if A * N < 0.01 else 'Diablo is happy!')\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('0.5 1.5') == 'Need more materials!'\nassert solution('0.5 1.5') == 'Need more materials!'\nassert solution('0.5 0.5') == 'Diablo is happy!'\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('1.0 4.0') == 'Need more materials!'\n\"\"\"\n\nfrom typing import List, Optional\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\n\nassert solution('1.0 4.0') == 'Need more materials!'\n\nassert solution('4.0 4.0') == 'Diablo is happy!'\n\nassert solution('0.1 0.1') == 'Need more materials!'\n\nassert solution('0.0 0.0') == 'Diablo is happy!'"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.200000 4.200000') == 'Need more materials!'\nassert solution('2.848484 2.614224') == 'Need more materials!'\nassert solution('0.50000000 0.50000000') == 'Diablo is happy!'\n\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1 10 2 1') == 'use the stairs'\nassert solution('10 3 10 2 1') == '10'\nassert solution('1 1 1 1 1') == '1'\nassert solution('10 100000000 100000000') == '10'\nassert solution('10 10000000 100000000') == 'use the stairs'\n'''\n\nimport math\nimport sys\nimport numpy as np"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('10 1 10 2') == 'use the stairs'\nassert solution('10 1 10 4 2') == '12'\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 1 10 3 1\") == \"use the stairs\"\nassert solution(\"10 1 10 4 1\") == \"9\"\nassert solution(\"10 1 10 5 1\") == \"use the stairs\"\nassert solution(\"100 1 10 4 1\") == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nf, s, g, u, d = (int(x) for x in stdin.split())"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\n\"\"\"\n\u041f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435 \u043d\u0430 \u043a\u043e\u0440\u0430\u0431\u043b\u0435\n\u0414\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e N. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u043e N \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0441 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0438\u0445 \u0434\u043b\u0438\u043d\u044b \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0445 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u0412\u0432\u043e\u0434:                                                  \u0412\u044b\u0432\u043e\u0434:\n4                                                        [1, 2, 3, 4]\n2                                                        [1, 2]\n5                                                        [1, 2, 3, 4, 5]\n3                                                        [1, 2, 3]\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0421\u043f\u0438\u0441\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0442 0 \u0434\u043e 10 000 \u0447\u0438\u0441\u0435\u043b. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442\u0432\u0435\u0442\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n\nSample Input 1:\n\nSample Output 1:\n\nSample Input 2:\n\nSample Output 2:\n\nSample Input 3:\n\nSample Output 3:\n\nSample Input 4:\n\nSample Output 4:"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"100 1 10 2 1\") == \"6\"\nassert solution(\"1 100 2 1\") == \"use the stairs\"\nassert solution(\"1000 1 10 2 1\") == \"use the stairs\"\nassert solution(\"100 1 10 1 1\") == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"100 100 1000 2 1\") == \"use the stairs\"\nassert solution(\"100 100 1000 2 1\") == \"use the stairs\"\nassert solution(\"100 100 1000 2 1\") == \"use the stairs\"\n\n'''"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\n\n\"\"\"\n\nn = int(input())\ns = [int(input()) for _ in range(n)]\ng = [(s[i]*(4/5)**i) for i in range(n)]\nprint(sum(g)/n)\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\n\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8\\n89.06666666666666'\n\"\"\"\n\nimport collections\n\n_, students = list(map(int, input().split()))\nscores = collections.deque(list(map(int, input().split())))\ntotal, average = 0, 0\n\nwhile scores:\n    student = scores.popleft()\n    total += student * (1 + (4 / 5) ** scores.count(student))\n\nprint('{:.6f}'.format(total / students))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '27.0'\nassert solution('3\\n1\\n2\\n3\\n') == '8.5'\nassert solution('5\\n1\\n2\\n3\\n4\\n5\\n') == '2.8'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\nassert solution(\"3\\n500\\n120\\n75\\n0\") == \"64.99999999999997\"\nassert solution(\"2\\n125\\n37\") == \"40.0\"\n\nimport sys"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8\\n89.06666666666666'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\nprint(solution(\"3\\n500\\n120\\n75\"))\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\nassert solution(\"5\\n1 1 2 2\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"0\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '8'\n\nassert solution('15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '12'\n\nassert solution('15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '12'\nassert solution('15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '12'"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\nprint(solution(stdin))\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def run(self) -> None:\n        n = int(input())\n        days = list(map(int, input().strip().split()))\n        dp = [0] * (max(days) + 1)\n        for d in days:\n            dp[d] += 1\n        ans = 0\n        for i in range(1, len(dp)):\n            if dp[i] > 20:\n                break\n            ans += 1\n        print(ans)\n\nSolution().run()"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\n-----Solution-----\nLet us define d(k) as the total number of days passed for a developer to reach k-th day where the sum of all dirty pushes for that day is at least $20$. Theorem 1 states that it is always possible to make $20$ by the end of a year. \n\nSo we want to find the largest possible $d(k)$. Notice that the day d(k) is always smaller than $d(k+1)$. Hence we can start from the end of the year. Let us define dp(k) as the largest value of $d(k)$ such that all days between $d(k)$ and $d(k+1)$ are at least $20$.\n\nTo find dp(k), we can consider every $d(k)$ between $1$ and $365$ and at each day we only need to check if the total number of dirty pushes up to that day is greater than or equal to $20$. If it is then dp(k) = max(dp(k), d(k) + 1). \n\nTo find dp(k) for the last day of the year, we only need to check if the total number of dirty pushes on that day is less than $20$. If it is then we need to look at the day before. If it is also less than $20$, then dp(k) = max(dp(k), d(k) + 1) = dp(k) + 1. \n\nSo, let us define a function:"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\nassert solution(\"3\\n1 45 65\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\nprint(solution(\"5\\n1 45 65 84 346\"))\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 45 65 84 346') == '4'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\n\n-----Problem-----\nThe problem is solved by using breadth-first search with a queue to store all the available moves, and then expanding the next possible moves to new nodes, marking each path as visited.\n\n-----Solution-----"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(r\"D:\\Code\\GitHub\\TestFiles\\p19\\input.txt\").read()) == \"1\"\n\n------Solution------\n\"\"\"\n\nfrom collections import deque\n\nw, h = (int(x) for x in input().split())\nm = [input() for _ in range(h)]\n\npos = (0, 0)\ngold = 0"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n---\nSample Input:\n7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\n\"\"\"\n\nclass Node:\n    def __init__(self, char: str, is_trap: bool, is_wall: bool):\n        self.char = char\n        self.is_trap = is_trap\n        self.is_wall = is_wall"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 7\\n#####\\n#.G#T\\nT.#G\\n#.#.\\n#G#.') == '3'\nassert solution('6 7\\n#####\\n#G.T#\\n#..G#\\n#####\\n#..T#\\n#G#T\\n') == '1'\nassert solution('6 7\\n#####\\n#T.#G\\n#..G#\\n#####\\n#G.#\\n#..T#\\n#G#T\\n') == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''7 4\n#######\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stin) == out\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nn, m = (int(i) for i in input().split())"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('________') == '1'\nassert solution('$$$______') == '0'\nassert solution('_$$__$$__$$_$_$$__$$__$$_') == '2'\nassert solution('__$$___$$_$$_$$__$$___$$_') == '2'\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('12345') == 5\nassert solution('12345\\n56789') == 9\n\nimport sys\nassert solution(sys.stdin.read()) == _______\n\nimport sys\nassert solution(sys.stdin.read()) == _______\n'''\n\n'''\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0432 \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u00ab\u0441\u0443\u0431\u0431\u043e\u0442\u0430\u00bb \u0438\u043b\u0438 \u00ab\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435\u00bb, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00abYES\u00bb \u0438\u043b\u0438 \u00abNO\u00bb \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\nSample Input 1:\n\n\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a\nSample Output 1:\n\nNO\nSample Input 2:\n\n\u043f\u044f\u0442\u043d\u0438\u0446\u0430\nSample Output 2:\n\nYES\n'''"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$__$___$__$___$__$__$___$_____$___\\n_____$_$_________$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\nassert solution(\"13 50\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n___$_$______$_$____$_$_$______$_$_$____$_$_$___\\n____$___$____$___$__$__$_$__$___$___$___$__$__\\n_$_$_$__$___$__$__$_$__$___$___$_$__$__$__\\n_$$__$$___$__$___$__$__$___$__$___$__$$$__$_\\n_$$__$___$__$___$__$__$___$__$___$__$$$__$_\\n_$$__$___$__$___$__$__$___$__$___$__$$$__$_\\n__$__$___$__$___$__$___$__$___$__$__$__$_\\n_$$__$___$__$___$__$__$___$__$___$__$$$__$\\n_$$__$___$__$___$__$__$___$__$___$__$$$__$\\n_$$__$___$__$___$__$__$___$__$___$__$$$__$\\n__$___$_$$_____$___$__$_$_$___$_$___$__$_\\n_$_$___$__$_____$_$__$___$___$__$_$___$__\\n_$__$___$__$_____$__$____$___$__$__$__$_\\n__$___$___$_____$___$_$_$____$___$__$__$_\\n_$_$___$__$_____$___$__$____$___$__$__$_\\n_$__$___$__$_____$___$__$____$___$__$__$_\\n__$___$__$_____$___$__$_$_$___$_$___$__$_\\n__$___$__$_____$___$_$_$___$_$___$__$_\\n_$___$__$_____$___$___$___$___$__$_\\n_$___$__$_____$___$___$___$___$__$_\\n__$___$__$_____$___$___$___$___$__$_\\n__$___$__$_____$___$___$___$___$__$_\\n___$___$_____$___$__$___$___$___$__$_\\n__$___$_____$___$__$___$___$___$__$_\\n___$__$_____$___$__$___$___$___$__$_\\n___$__$_____$___$__$___$___$___$__$_\\n__$___$_____$___$__$___$___$___$__$_\\n__$___$_____$___$__$___$___$___$__$_\") == 5\n\nassert solution(\"13 50\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n___$_$______$_$____$_$_$______$_$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$_________$_$_________$_$_____$_$_________\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\") == 5\n\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n$_____$___$_____$___$_____$___$_____$___$_____$\\n$_____$___$_____$___$_____$___$_____$___$_____$\\n____$___$___$_____$___$_____$___$_____$___$___\\n___$____$___$_____$___$_____$___$_____$___$__\\n__$_____$___$_____$___$_____$___$_____$___$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_\\n\") == 5"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n\") == \"5\"\n\"\"\"\n\n\nfrom typing import Callable\nfrom termcolor import colored\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin) == test_stdout"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'i cant speak pig latin'\n) == 'iyay antcay eakspay igpay atinlay'\nassert solution(\n    'and i can speak pig latin'\n) == 'and iyay ayay speak pig laytin'\nassert solution(\n    'is this working'\n) == 'is thisway istay working'"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i can speak pig latin') == 'iay ay canspeay igpay atinlay'\nassert solution('i can speak at pig latin') == 'iay ay canspeay atinlay'\nassert solution('i speak at pig latin') == 'iay speakay atinlay'\nassert solution('i can speak pig latin or english') == 'iay ay canspeay igpay atinlay oray ay engglishay'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nprint(solution('i cant speak pig latin'))\n-----Problem-----\nTranslating to Pig Latin involves taking each word in a sentence, then:\n\n- removing all letters from the beginning up to and including the first vowel,\n- appending ay to the end, and\n- writing the word in all lowercase letters.\n\nWrite a program that translates a sentence to Pig Latin.\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('I') == 'I'\nassert solution('i') == 'i'\nassert solution('i cant speak pig latin') == 'iay cantpay speakyay pigway'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\n\"\"\")\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\"\"\") == \"nymble\"\nassert solution(\"\"\"2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"3\n3\nr\ncucumber\nsalad\n3\nnymble\npancakes\npea soup\npunsch\"\"\") == \"r\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n'''"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == \"Anywhere is fine I guess\"\nassert solution(2) == \"nymble\"\nassert solution(3) == \"nymble\"\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nprint(solution(input()))"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\"\n\nimport re\nfrom typing import List"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n\") == \"nymble\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\nassert solution(\"1\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\n\nassert solution(\"4\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"potatoes\"\n\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"Anywhere is fine I guess\"\n\nassert solution(\"5\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"potatoes\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 0 15\\n') == '3'\n\"\"\"\n\na, b, h = [int(x) for x in input().split()]\n\nnum_crawls = int(h / (a - b))\nremainder = h % (a - b)"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 15\") == \"3\"\nassert solution(\"0 5 10\") == \"0\"\nassert solution(\"10 0 3\") == \"4\"\nassert solution(\"10 1 3\") == \"3\"\nassert solution(\"10 2 3\") == \"2\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 0 15''') == '3'\nassert solution('''0 1 10''') == '10'\nassert solution('''10 10 0''') == '0'\nassert solution('''10 10 10''') == '0'\n'''\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 0 15') == '3'\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 0 15\\n') == '3'\n\"\"\"\n\nimport math\n\na, b, h = map(int, input().split())\nprint(math.ceil(h/a) - math.floor(h/b))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 0 15') == 3\n\n\"\"\"\n\nimport sys\n\n\"\"\"\n\uc774 \ubb38\uc81c\ub294 \ub3d9\uc804\uad50\ud658 \uae30\ubcf8\uc801\uc778 \uc0ac\uc6a9\ubc95\ub9cc \uc774\uc6a9\ud574\uc11c \uc811\uadfc\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n1.\ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4e4\ub824\uba74\na. \ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4e4\ub824\uba74\n1. \ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 (a - b) + h \n2. \uc774 \uc774\uc720\ub294, \ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 \ud56d\uc0c1 \ud604\uc7ac \uac00\uc9c0\uace0 \uc788\ub294 \ud654\ud3d0\uc5d0\uc11c \ud604\uc7ac \uac00\uc9c0\uace0 \uc788\ub294 \ud654\ud3d0\ub97c \ubf51\uc744 \uc218 \uc788\ub294 \uacbd\uc6b0\ub97c \uad6c\ud588\uc74c\uc744 \ud65c\uc6a9\ud558\uae30 \ub54c\ubb38\uc774\ub2e4.\na. \ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4e4\ub824\uba74\n\ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 a - b \nb. \ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4e4\ub824\uba74\n\ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 b \n\uc774\ub97c \uc774\uc6a9\ud558\uc5ec, \ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4dc\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \ubaa8\ub450 \uad6c\ud55c \ud6c4, \uadf8 \uc911\uc5d0\uc11c \ucd5c\ub300 \uac12\uc744 \uad6c\ud558\uc600\ub2e4.\n\n2. \ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 (a - b) + h \n\uc774 \uc774\uc720\ub294, \ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 \ud56d\uc0c1 \ud604\uc7ac \uac00\uc9c0\uace0 \uc788\ub294 \ud654\ud3d0\uc5d0\uc11c \ud604\uc7ac \uac00\uc9c0\uace0 \uc788\ub294 \ud654\ud3d0\ub97c \ubf51\uc744 \uc218 \uc788\ub294 \uacbd\uc6b0\ub97c \uad6c\ud588\uc74c\uc744 \ud65c\uc6a9\ud558\uae30 \ub54c\ubb38\uc774\ub2e4.\na. \ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4e4\ub824\uba74\n\ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 a \nb. \ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud574\uc11c \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4e4\ub824\uba74\n\ub9cc\ub4e4\uc5b4\uc57c \ud560 \uac12\uc740 b \n\uc774\ub97c \uc774\uc6a9\ud558\uc5ec, \ucd5c\ub300\ud55c \ub9ce\uc740 \ud654\ud3d0\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac00\uc7a5 \ud070 \uac12\uc744 \ub9cc\ub4dc\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \ubaa8\ub450 \uad6c\ud55c \ud6c4, \uadf8 \uc911\uc5d0\uc11c \ucd5c\ub300 \uac12\uc744 \uad6c\ud558\uc600\ub2e4.\n\"\"\"\n\na, b, h = map(int, sys.stdin.readline().split())\nprint((a - b) + h)\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 0 15\\n') == '3'"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\nprint(solution(\"11 15\"))\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\nimport sys\n\nS = sys.stdin.readline().strip().split()\nR1, S = int(S[0]), int(S[1])\nR2 = int((R1 + S) / 2)\nprint(R2)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10') == '10'\nassert solution('12 11') == '12'\nassert solution('12 20') == '20'\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 15') == '19'\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"18 20\") == \"13\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 15') == '19'"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 15') == '19'\nassert solution('17 7') == '7'\nassert solution('4 0') == '4'\nassert solution('-2 -8') == '-2'\nassert solution('0 -1') == '0'\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\"\n\nr1, s = map(int, input().split())\nprint((r1+s)//2)\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('North West South') == 'Yes'\nassert solution('South West North') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin=\"South West East\") == \"Yes\"\nassert solution(stdin=\"South East West\") == \"No\"\nassert solution(stdin=\"East West North\") == \"No\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West East') == 'No'\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"East West North\") == \"No\"\nassert solution(\"North East South\") == \"No\"\nassert solution(\"North West South\") == \"Yes\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South') == 'No'\n\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West North East\") == \"No\"\nassert solution(\"North South South West\") == \"No\"\nassert solution(\"South West East\") == \"Yes\"\n\n-----Problem-----\nYou are a startup company and your car model is called \"Parking Car\". You want to implement a parking lot system for your cars, where cars park in the direction opposite to where they are leaving. This way, the cars coming out of the same direction will end up in the same parking lot.\n\nYour parking lot has two parking levels. Cars can park on the first level if they want to leave in the same direction in which they entered.\n\nImplement the ParkingCar class:\n\nParkingCar(direction) Initializes a ParkingCar object that is empty. direction is a string that can be one of the four directions: North, East, South, West.\npark(direction) If there is space in the direction that the car wants to enter, it parks there and becomes occupied. direction is a string that can be one of the four directions: North, East, South, West. Otherwise, this method returns False.\nleave(direction) If the car is occupied and if the direction in which the car wants to leave is opposite to the direction in which it entered, it returns True and the car becomes empty. Otherwise, this method returns False. direction is a string that can be one of the four directions: North, East, South, West.\nNote that the term \"opposite direction\" is used in the sense of \"opposite of the direction in which a car entered\". For example, if a car parks in direction West and wants to leave in direction South, it is opposite in the sense of direction.\n\n-----Solution-----\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('East South East') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('South East West') == 'No'\nassert solution('North West South') == 'No'\nassert solution('North East West') == 'Yes'\n\nassert solution('North West East') == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North West South') == 'No'\nassert solution('West South East') == 'Yes'\n\n-----Problem-----\nYou are given the direction from which you arrive and the direction in which you want to leave.\n\nYour task is to determine if you should yield the right-of-way to the other vehicle.\n\n-----Pseudo Code-----\nCheck whether there is a car in the way of your car from the other side.\n\nWrite 5 lines of code to test the correctness of solution:\nA startup company tries to develop software for self-driving cars. One of the surprisingly difficult problems turns out to be right-of-way at an intersection. The local traffic regulations prescribe that your vehicle must yield the right-of-way if one of the following two conditions is satisfied:\n - You want to pass straight through the intersection; another vehicle is approaching from your right.\n - You want to turn left at the intersection; another vehicle is approaching from the opposite direction or from your right.\n\nNote that it is not important in which direction the other vehicle wants to leave the intersection.\n\nWrite a program that decides if your car should yield the right-of-way to the other vehicle.\n\n-----Input-----\nThree strings $a,b,c \\in \\{ \\text {North},\\text {South},\\text {East},\\text {West}\\} $, corresponding to the direction from which you arrive, the direction in which you want to leave, and the direction from which the other vehicle approaches. You can assume $a \\neq b$ and $a \\neq c$.\n\n-----Output-----\nA single line with the string \u201cYes\u201d or \u201cNo\u201d as explained above.\n\n-----Explanation of Sample $1$-----$1$\nIn this example, you arrive from South and want to turn left to leave towards West. The other vehicle comes from East, which corresponds to your right. Consequently, you have to yield the right-of-way to the other vehicle because of condition $2$.\n\n-----Examples-----\nSample Input:\nSouth West East\nSample Output:\nYes\n\n-----Problem-----\nYou are given the direction from which you arrive and the direction in which you want to leave.\n\nYour task is to determine if you should yield the right-of-way to the other vehicle.\n\n-----Pseudo Code-----\nCheck whether there is a car in the way of your car from the other side.\n\nWrite 5 lines of code to test the correctness of solution:\nA startup company tries to develop software for self-driving cars. One of the surprisingly difficult problems turns out to be right-of-way at an intersection. The local traffic regulations prescribe that your vehicle must yield the right-of-way if one of the following two conditions is satisfied:\n - You want to pass straight through the intersection; another vehicle is approaching from your right.\n - You want to turn left at the intersection; another vehicle is approaching from the opposite direction or from your right.\n\nNote that it is not important in which direction the other vehicle wants to leave the intersection.\n\nWrite a program that decides if your car should yield the right-of-way to the other vehicle.\n\n-----Input-----\nThree strings $a,b,c \\in \\{ \\text {North},\\text {South},\\text {East},\\text {West}\\} $, corresponding to the direction from which you arrive, the direction in which you want to leave, and the direction from which the other vehicle approaches. You can assume $a \\neq b$ and $a \\neq c$.\n\n-----Output-----\nA single line with the string \u201cYes\u201d or \u201cNo\u201d as explained above.\n\n-----Explanation of Sample $1$-----$1$\nIn this example, you arrive from South and want to turn left to leave towards West. The other vehicle comes from East, which corresponds to your right. Consequently, you have to yield the right-of-way to the other vehicle because of condition $2$.\n\n-----Examples-----\nSample Input:\nSouth West East\nSample Output:\nYes\n\n-----Problem-----\nYou are given the direction from which you arrive and the direction in which you want to leave.\n\nYour task is to determine if you should yield the right-of-way to the other vehicle.\n\n-----Pseudo Code-----\nCheck whether there is a car in the way of your car from the other side.\n\nWrite 5 lines of code to test the correctness of solution:\nA startup company tries to develop software for self-driving cars. One of thesurprisingly difficult problems turns out to be right-of-way at an intersection. The local traffic regulations prescribe that your vehicle must yield the right-of-way if one of the following two conditions is satisfied:\n - You want to pass straight through the intersection; another vehicle is approaching from your right.\n - You want to turn left at the intersection; another vehicle is approaching from the opposite direction or from your right.\n\nNote that it is not important in which direction the other vehicle wants to leave the intersection.\n\nWrite a program that decides if your car should yield the right-of-way to the other vehicle.\n\n-----Input-----\nThree strings $a,b,c \\in \\{ \\text {North},\\text {South},\\text {East},\\text {West}\\} $, corresponding to the direction from which you arrive, the direction in which you want to leave, and the direction from which the other vehicle approaches. You can assume $a \\neq b$ and $a \\neq c$.\n\n-----Output-----\nA single line with the string \u201cYes\u201d or \u201cNo\u201d as explained above.\n\n-----Explanation of Sample $1$-----$1$\nIn this example, you arrive from South and want to turn left to leave towards West. The other vehicle comes from East, which corresponds to your right. Consequently, you have to yield the right-of-way to the other vehicle because of condition $2$.\n\n-----Examples-----\nSample Input:\nSouth West East\nSample Output:\nYes\n\n-----Problem-----\nYou are given the direction from which you arrive and the direction in which you want to leave.\n\nYour task is to determine if you should yield the right-of-way to the other vehicle.\n\n-----Pseudo Code-----\nCheck whether there is a car in the way of your car from the other side.\n\nWrite 5 lines of code to test the correctness of solution:\nA startup company tries to develop software for self-driving cars. One of thesurprisingly difficult problems turns out to be right-of-way at an intersection. The local traffic regulations prescribe that your vehicle must yield the right-of-way if one of the following two conditions is satisfied:\n - You want to pass straight through the intersection; another vehicle is approaching from your right.\n - You want to turn left at the intersection; another vehicle is approaching from the opposite direction or from your right.\n\nNote that it is not important in which direction the other vehicle wants to leave the intersection.\n\nWrite a program that decides if your car should yield the right-of-way to the other vehicle.\n\n-----Input-----\nThree strings $a,b,c \\in \\{ \\text {North},\\text {South},\\text {East},\\text {West}\\} $, corresponding to the direction from which you arrive, the direction in which you want to leave, and the direction from which the other vehicle approaches. You can assume $a \\neq b$ and $a \\neq c$.\n\n-----Output-----\nA single line with the string \u201cYes\ufffd"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('West South East') == 'No'\nassert solution('South East West') == 'Yes'\nassert solution('East South West') == 'No'\n\nSample Input:\nEast West North\nSample Output:\nYes\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 16\\naains\\nckog\\nrroh\") =='marywasnosyagain'\nassert solution(\"3 15\\nhckp\\nghlwrye\") == 'nocthkpghlwrye'\nassert solution(\"6 12\\naaai\\nhckpl\\nrroh\") == 'hckplrrroh'\nassert solution(\"6 14\\nqthn\\nrroh\") == 'nosyrroh'\nassert solution(\"6 15\\nqxkc\\nhckpl\\nrroh\") == 'nosyrroh'\n\nSample Case #1:\n1 9\naain\nbcrhbbk\n\nSample Case #2:\n3 10\nxaa\nbcrhbbk\n\nSample Case #3:\n6 15\nnctpjxbnwmzwzjkv\ncxgqvxckdjrzdbmh\n\nSample Case #4:\n5 16\naaain\nbcrhbbk\naaain\nbcrhbbk\naaain\n\nSample Case #5:\n6 15\nzzzzz\nbcrhbbk\n\nSample Case #6:\n6 14\nzxnkcsb\nncthkpghlwrye\n\n-----Problem-----\nThe Autokey cipher is a simple variant of the Caesar cipher. The idea is to add a simple function to the Caesar cipher, such that for a given key $k$, and a given plaintext $a$, the ciphertext $b$ is computed by first appending the key $k$ to the plaintext $a$, and then applying the function to it.\n\nThe function used here is the operation of adding $k$ to each letter of $a$ in the same manner as the Caesar cipher. For example, if the input was $a = \"ncthkpghlwrye\"$ and $k = 5$, then the output would be $b = \"ncthkpghlwrye\"$.\n\nCreate a function that takes two parameters: $k$ and $a$, and returns the ciphertext $b$.\n\n-----Solution-----\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n*\n`\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n*\nSample Input:\n4 7\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\nSample Output:\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n*\nSample Input:\n10 13\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\nSample Output:\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n*\nSample Input:\n9 10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\nSample Output:\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n*\nSample Input:\n5 7\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\nSample Output:\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n*\nSample Input:\n3 10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\nSample Output:\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n*\nSample Input:\n4 10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\nSample Output:\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n*\nSample Input:\n5 8\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\nSample Output:\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n`\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nprint(solution(\"5 16\\nagain\\npirpumsemoystoal\"))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 16\\naaa\\naaa') =='marywasnosyagain'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n\"\"\"\n\nfrom string import ascii_lowercase\nimport string"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aa') == 'aa'\nassert solution('abc') == 'abc'\nassert solution('abac') == 'aaca'\nassert solution('abcde') == 'adbg'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Either'\nassert solution('3') == 'Odd'\nassert solution('5') == 'Even'\n\nimport sys"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Either'\nassert solution('3') == 'Odd'\nassert solution('5') == 'Even'\nassert solution('1') == 'Either'\nassert solution('0') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"2\") == \"Odd\"\nassert solution(\"3\") == \"Even\"\nassert solution(\"4\") == \"Odd\"\nassert solution(\"5\") == \"Odd\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Odd\"\nassert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"5\") == \"Odd\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Either'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n314\n1\n5926\n5\n35897\n''') == '''3\n1\n4\n1\n5'''\n\nassert solution('''5\n0\n1\n2\n3\n4\n''') == '''0\n1\n1\n2\n2\n'''\n\nassert solution('''5\n5\n1\n2\n3\n4\n''') == '''2\n2\n2\n3\n2\n'''\n\nassert solution('''6\n0\n0\n1\n1\n2\n2\n''') == '''1\n2\n3\n3\n4\n3\n'''\n\nassert solution('''6\n0\n0\n0\n0\n0\n0\n''') == '''0\n1\n2\n2\n3\n3\n3\n'''"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor _ in range(n):\n    numbers = list(map(int, sys.stdin.readline().strip().split()))\n\n    for n in numbers:\n        if n == 0:\n            print(1)\n            continue\n\n        count = 0\n        while n:\n            n = n // 10\n            count += 1\n\n        print(count)\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor _ in range(n):\n    numbers = list(map(int, sys.stdin.readline().strip().split()))\n\n    for n in numbers:\n        if n == 0:\n            print(1)\n            continue\n\n        for digit in str(n):\n            print(len(digit))\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n314\n1\n5926\n5\n35897\"\"\") == \"3\\n1\\n4\\n1\\n5\"\n\nassert solution(\"\"\"5\n314\n1\n5926\n5\n35897\"\"\") == \"3\\n1\\n4\\n1\\n5\"\n\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\nassert solution(\"2\\n123456789\") == \"9\"\nassert solution(\"1\\n123456789\") == \"8\"\nassert solution(\"1\\n1234567890123456789\") == \"19\"\nassert solution(\"1\\n123456789012345678901\") == \"20\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nprint(\"Test 1 OK\")\n\nassert solution(\"3\\n1010\\n100\\n1000\\n100\") == \"2\\n3\\n3\\n4\\n4\"\nprint(\"Test 2 OK\")\n\nassert solution(\"4\\n1111\\n111\\n1111\\n1111\") == \"3\\n2\\n3\\n4\\n5\"\nprint(\"Test 3 OK\")\n\nassert solution(\"4\\n1111\\n1110\\n1111\\n1110\") == \"3\\n2\\n3\\n4\\n5\"\nprint(\"Test 4 OK\")"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint(solution('5\\n314\\n1\\n5926\\n5\\n35897'))\n\nassert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint(solution('5\\n314\\n1\\n5926\\n5\\n35897'))\n\nassert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint(solution('5\\n314\\n1\\n5926\\n5\\n35897'))\n\n-----Problem-----\nBudget Watcher\nYou are a budget watcher who regularly visits a certain restaurant. The restaurant sells burgers, fries and drinks.\n\nAt the restaurant, you have to take a bill, which contains entries for all items that you purchased. You want to calculate the total price of the bill without paying attention to the taxes.\n\nTo do that, you need to know for each item, the price of a single burger, the price of a single drink and the price of a single fries.\n\nYou have to convert all prices from dollars to euros. Given the cost of a burger, the cost of a drink and the cost of a fries, write a program that converts the prices from dollars to euros and reports the total price of the bill.\n\n-----Input-----\nInput begins with a line containing the cost of the burger in dollars.\n\nThe next line contains the cost of the fries in dollars.\n\nThe third line contains the cost of the drink in dollars.\n\n-----Output-----\nPrint the total price of the bill in euros.\n\n-----Examples-----\nSample Input:\n10\n5\n1\nSample Output:\n9.1\nExplanation:\n10 dollars (10) is equal to 9.1 euros (9 + 1/100)\n\nSample Input:\n0\n10\n2\nSample Output:\n20\nExplanation:\n10 dollars (10) is equal to 20 euros (10 + 2/100)\n\nSample Input:\n0\n5\n1\nSample Output:\n5.0\nExplanation:\n5 dollars (5) is equal to 5 euros (5 + 0/100)\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"3\\n123\\n456\\n789\") == \"3\\n2\\n5\\n3\"\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n1\") == \"1\\n0\"\nassert solution(\"1\\n2\") == \"2\\n1\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 5\\nc\\ti\\n\\tk\\no\\nr\\to\\nt\\te\\n\\tf\\nu\\hw\\np\\we\\n\\wee\\n\\can\\th\\tw\\tr\\oi\\n\\it\\of\\n\\ot\\n\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\\nno\\nno\\nyes\\nyes\"\nprint(solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the'))\n\nSample Input:\n9 5\nj m\nn d\ne b\ni k\nu m\nk c\nb g\no n\nc j\nj d\nSample Output:\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\") == \"yes\\n\" * 10\nassert solution(\"9 5\\n\"\n        \"a b\\n\"\n        \"c d\\n\"\n        \"e f\\n\"\n        \"g h\\n\"\n        \"i j\\n\"\n        \"k l\\n\"\n        \"m n\\n\"\n        \"o p\\n\"\n        \"q r\\n\"\n        \"s t\\n\"\n        \"u v\\n\"\n        \"w x\\n\"\n        \"y z\") == \"no\\n\" * 10\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\nhello world\\nhelloworld') == 'yes'\nassert solution('4 3\\na b\\nab ba\\na b\\nba a') == 'yes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\r\\nt e\\r\\nt f\\ru h\\r\\nw p\\r\\nwe we\\r\\ncan the\\r\\nwork people\\r\\nit of\\r\\nout the\\r\\n') == 'yes'\nassert solution('4 6\\na b\\na b\\nba b\\nab b\\nba a\\nb a') == 'yes'\nassert solution('7 3\\na b\\na b\\nba b\\nab b\\nba a\\nb a') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 5\\n\"\n+ \"c t\\n\"\n+ \"i r\\n\"\n+ \"k p\\n\"\n+ \"o c\\n\"\n+ \"r o\\n\"\n+ \"t e\\n\"\n+ \"t f\\n\"\n+ \"u h\\n\"\n+ \"w p\\n\"\n+ \"we we\\n\"\n+ \"can the\\n\"\n+ \"work people\\n\"\n+ \"it of\\n\"\n+ \"out the\") == \"yes\\n\" * 13\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\\nno\\nno\\nyes\\nyes\"\nassert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\") == \"yes\\nno\\nno\\nyes\\nyes\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\nc a\\nh e\\nt t\\nt f\\ni r\\nt u\\n\") == \"no\\nyes\"\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2 1'\nassert solution('1\\n2\\n3\\n4\\n') == '4 3'\nassert solution('1\\n3\\n5\\n7\\n9\\n') == '7 6'\nassert solution('1\\n3\\n5\\n7\\n9\\n') == '7 6'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 5\\ncti\\nrkp\\noce\\rorot\\nte\\ttf\\tunh\\twp\\twe\\tcan\\the\\twork\\tpeople\\tit\\tof') == 'yes\\nno\\nno\\nyes\\nyes\\n'\n\nassert solution('7 9\\nfqts\\nxnyr\\nocxn\\noczq\\nzqxn\\nocdz\\nzqcd\\nqzoc\\nzocq\\nxcdz\\nzqcd\\nzcdq\\nzcdq') == 'no\\nno\\nno\\nno\\nno\\nno\\n'\n\nprint(solution(stdin))"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"yes\\n\"\nassert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"no\\n\"\nassert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"no\\n\"\nassert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"no\\n\"\nassert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"no\\n\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == 1\n'''"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\ncarrots?\\nbunnies') == 1\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'\nassert solution('3 2\\njoe?\\ngarol\\nmary') == '2'\nassert solution('1 10\\nmary') == '0'\n\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $1 \\le N \\le 1000$ \u0438 $1 \\le K \\le 1000$, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d N \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u043e\u043c\u0435\u0440\u0430 \u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430 (1, \u0430 \u043d\u0435 0). \u0414\u0430\u0442\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439, \u0435\u0441\u043b\u0438 \u0435\u0435 \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0446\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 $1 \\le N \\le 1000$ \u0438 $1 \\le K \\le 1000$ \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f $N$ \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0441\u044f\u0446\u0435\u0432, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0417\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0438\u0445 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043c\u0435\u0441\u044f\u0446\u0435\u0432.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1\n\n\u0412\u0432\u043e\u0434    \n\n3 2\n\n\u044f\u043d\u0432\u0430\u0440\u044c\n\u0444\u0435\u0432\u0440\u0430\u043b\u044c\n\u043c\u0430\u0440\u0442\n\u0412\u044b\u0432\u043e\u0434\n\n\u043c\u0430\u0440\u0442\n\u044f\u043d\u0432\u0430\u0440\u044c\n\u0444\u0435\u0432\u0440\u0430\u043b\u044c\nSample Input 2\n\n6 3\n\n\u0444\u0435\u0432\u0440\u0430\u043b\u044c\n\u043c\u0430\u0440\u0442\n\u0438\u044e\u043d\u044c\n\u0438\u044e\u043b\u044c\n\u0430\u0432\u0433\u0443\u0441\u0442\n\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c\n\u043e\u043a\u0442\u044f\u0431\u0440\u044c\n\u0412\u044b\u0432\u043e\u0434\n\n\u0430\u0432\u0433\u0443\u0441\u0442\n\u0438\u044e\u043b\u044c\n\u043c\u0430\u0440\u0442\n\u0438\u044e\u043d\u044c\n\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c\n\u043e\u043a\u0442\u044f\u0431\u0440\u044c\n\u0444\u0435\u0432\u0440\u0430\u043b\u044c\nSample Input 3\n\n6 6\n\n\u044f\u043d\u0432\u0430\u0440\u044c\n\u0444\u0435\u0432\u0440\u0430\u043b\u044c\n\u043c\u0430\u0440\u0442\n\u0438\u044e\u043d\u044c\n\u0438\u044e\u043b\u044c\n\u0430\u0432\u0433\u0443\u0441\u0442\n\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c\n\u043e\u043a\u0442\u044f\u0431\u0440\u044c\n\u0412\u044b\u0432\u043e\u0434\n\n\u044f\u043d\u0432\u0430\u0440\u044c\n\u0430\u0432\u0433\u0443\u0441\u0442\n\u0438\u044e\u043b\u044c\n\u0438\u044e\u043d\u044c\n\u043c\u0430\u0440\u0442\n\u043e\u043a\u0442\u044f\u0431\u0440\u044c\n\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c\n\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0435\u0441\u044f\u0446\u0430 \u043f\u043e \u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430\u043c \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\nSample Input 4\n\n3 5\n\n\u044f\u043d\u0432\u0430\u0440\u044c\n\u043c\u0430\u0440\u0442\n\u0438\u044e\u043d\u044c\nSample Output 4\n\n\u044f\u043d\u0432\u0430\u0440\u044c\n\u0438\u044e\u043d\u044c\n\u043c\u0430\u0440\u0442\n\"\"\"\n\nn, k = map(int, input().split())\na = ['\u044f\u043d\u0432\u0430\u0440\u044c', '\u0444\u0435\u0432\u0440\u0430\u043b\u044c', '\u043c\u0430\u0440\u0442', '\u0430\u043f\u0440\u0435\u043b\u044c', '\u043c\u0430\u0439', '\u0438\u044e\u043d\u044c', '\u0438\u044e\u043b\u044c', '\u0430\u0432\u0433\u0443\u0441\u0442', '\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c', '\u043e\u043a\u0442\u044f\u0431\u0440\u044c', '\u043d\u043e\u044f\u0431\u0440\u044c', '\u0434\u0435\u043a\u0430\u0431\u0440\u044c']\nprint('\\n'.join([i for i in a if int(a.index(i) + 1) >= n]))\n\n\n\"\"\"\n\u0414\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b. \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u043e\u043c\u0435\u0440 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0412\u0432\u043e\u0434: [3, 1, 2, 5, 6]\n\u0412\u044b\u0432\u043e\u0434: 1\n\"\"\"\n\na = [3, 1, 2, 5, 6]"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == '1'"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies\\n') == 1\nassert solution('2 1\\ncarrots?\\nkittens\\n') == 0\nassert solution('3 2\\ncarrots?\\nbunnies\\nkittens\\n') == 1"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == expected\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"carrots?\\nbunnies\") == 1\n'''"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:q:|.r.|:q:|.r.|:q:|.r.|:q:|\\n+---+---+---+---+---+---+---+---+\\n|:q:|:q:|:q:|:q:|:q:|:q:|:q:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:r:|:r:|:r:|:r:|:r:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:r:|:r:|:r:|:r:|:r:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:r:|:r:|:r:|:r:|:r:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:r:|:r:|:r:|:r:|:r:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:r:|:r:|:r:|:r:|:r:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:r:|:r:|:r:|:r:|:r:|:r:|:r:|\\n+---+---+---+---+---+---+---+"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n|.r.|:::|."
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|r.|:b:|:q:|:k:|:n:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.:|:p:|.p.:|:p:|.p.:|\\n+---+---+---+---+---+---+---+---+\\n|...|:n:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:p:|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:p:|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:p:|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.p.:|:p:|:p:|:p:|.p.:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.:|:B.:|.Q.:|:K.:|.B.:|:r:|\\n+---+---+---+---+---+---+---+---+\") == \\\n    \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|r.|:b:|:q:|:k:|:n:|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.:|:p:|.p.:|:p:|.p.:|\\n+---+---+---+---+---+---+---+---+\\n|...|:n:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:p:|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:p:|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:p:|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r.|:::|.b|:q|.k|:::|.n|:r|\n+---+---+---+---+---+---+---+---+\n|.p|p.|p.|p.|p.|p.|p.|p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n|:::|...|:::|...|p|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|.P|:::|.P|p|:::|.P|p|:::|.P|p|\n+---+---+---+---+---+---+---+---+\n|.P|:::|.P|p|:::|.P|p|p|:::|.P|p|\n+---+---+---+---+---+---+---+---+\n|:R|.N|:B|.Q|:K|.B|:::|.R|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") =="
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"\n.k......|.r......|.b......|.q......|.k......|.r......|.b......|.q......|\n7.....P.|7.....P.|7.....P.|7.....P.|7.....P.|7.....P.|7.....P.|7.....P.\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n.7......|.7......|.7......|.7......|.7......|.7......|.7......|.7......\n7......P|7......P|7......P|7......P|7......P|7......P|7......P|7......P\n.r......|.r......|.r......|.r......|.r......|.r......|.r......|.r......\n.r......|.r......|.r......|.r......|.r......|.r......|.r......|.r......\n.r......|.r......|.r......"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Ke1,Q"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n----"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\n-----Instructions-----\nYou are given a position of a chessboard and should print it in the notation used in a standard chess notation.\n\nThe rules of the notation are as follows:\n\nThe input is a string consisting of characters \u201c+\u201d (white pawn), \u201c-\u201d (black pawn), \u201c:\u201d (white piece), \u201c.\u201d (black piece), \u201c|\u201d (white bishop), \u201c#\u201d (black bishop), \u201cK\u201d (white king), \u201cQ\u201d (black king), \u201ck\u201d (white knight), \u201cq\u201d (black knight), \u201ca\u201d (white rook), \u201cb\u201d (black rook), \u201c.\u201d (white queen), and \u201c.\u201d (black queen).\n\nYou should print the list of positions of white pieces first (then black pieces), then positions of white bishops, then positions of black bishops and then positions of white and black kings. The positions of pieces and bishops should be printed as in the examples.\n\nNote that the input string can contain characters that are not used in the standard chess notation (like \"*\" and \"&\").\n\nAll the pieces should be located on a chessboard, i.e. none of them can be on a space with other pieces of the same color.\n\nThe input string can contain as many of the same piece as you want.\n\nThe black king must be on the second rank (e.g. d4, e4, f4, g4, h4,...). The white king must be on the eighth rank (e.g. a2, b2, c2, d2, e2, f2, g2, h2,...).\n\nThe input string does not have to contain any of the characters \"k\" (white knight), \"q\" (black queen), or \"K\" (white king), or \"Q\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('6 7') == 'You will become a flying monkey!'\n\"\"\"\nfrom math import sqrt, ceil, log\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"1 1\") == \"You will become a flying monkey!\"\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"11 2\") == \"You will become a flying monkey!\"\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"8 2\") == \"You will become a flying monkey!\"\n\n-----Explanation-----\nThe Wizard starts by telling you two integers: 8 and 3. He then secretly selects a number from 1 to 8, and does not tell you this number.\n\nAt the end of the game, assuming you are not the Wizard, you must guess the secret number. If you guess correctly, then you will be granted your wish; but if the Wizard wins (you guess incorrectly), then you will become a flying monkey.\n\nYou can always exactly determine the Wizard\u2019s secret number (and guarantee that you win) using only 3 questions.\n\nSince 8 is even, the answer to all 3 questions will be \u201ctrue\u201d, and the secret number is 8.\n\nIn other words, the Wizard\u2019s secret number is 8.\n\nFor example, suppose that the Wizard selects 6, then you must guess 6, because it is even.\n\nYou guess 6, and the Wizard wins (you guess incorrectly).\n\nIn this case, you will become a flying monkey.\n\nBecause 8 is also even, the answer to the second and third questions will be \u201ctrue\u201d, and the secret number is 8.\n\nIn other words, the Wizard\u2019s secret number is 8.\n\nIn this case, the Wizard\u2019s secret number is 8.\n\nBecause 6 is odd, the answer to the first question will be \u201cfalse\u201d, and the secret number is 8.\n\nIn this case, the Wizard\u2019s secret number is 8.\n\nBecause 7 is between 7 and 10, the answer to the second question will be \u201ctrue\u201d, and the secret number is 8.\n\nIn this case, the Wizard\u2019s secret number is 8.\n\nSince the Wizard\u2019s secret number is 8, you must guess 8.\n\nSince the Wizard won, you get your wish.\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('2 5') == 'You will become a flying monkey!'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"Your wish is granted!\"\nassert solution(\"2 2\") == \"Your wish is granted!\"\nassert solution(\"3 3\") == \"You will become a flying monkey!\"\nassert solution(\"1 2\") == \"Your wish is granted!\"\nassert solution(\"4 3\") == \"You will become a flying monkey!\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('7 2') == 'You will become a flying monkey!'\n\n'''\n\nfrom math import sqrt\n\nn, k = map(int, input().split())"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(    \"6 3\") == \"Your wish is granted!\", \"Wrong answer\"\nassert solution(    \"8 3\") == \"Your wish is granted!\", \"Wrong answer\"\nassert solution(    \"8 3\") == \"Your wish is granted!\", \"Wrong answer\"\nassert solution(    \"1 4\") == \"Your wish is granted!\", \"Wrong answer\"\nassert solution(    \"10 3\") == \"Your wish is granted!\", \"Wrong answer\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('3 3') == 'You will become a flying monkey!'\n\n-----Hints-----\nUse bisection search.\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('9 2') == 'You will become a flying monkey!'\nassert solution('9 3') == 'You will become a flying monkey!'\nassert solution('10 5') == 'You will become a flying monkey!'\nassert solution('10 6') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == 16\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('16') == '16'\nassert solution('12345') == '15'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '1'\nassert solution('10') == '26'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(16) == 16\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"1\") == \"1\"\nassert solution(\"16.3\") == \"16.3\"\nassert solution(\"1.3\") == \"1.3\"\nassert solution(\"16.343\") == \"16.343\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\nimport io\nimport sys\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 180\n1 2\n\"\"\"\n) == \"4\"\nprint(solution(\n\"\"\"\n3 10\n1 3\n2 5\n3 2\n\"\"\"\n))\nassert solution(\n\"\"\"\n3 10\n1 3\n2 5\n1\n\"\"\"\n) == \"0\"\nprint(solution(\n\"\"\"\n3 10\n2 5\n1 3\n\"\"\"\n))\nassert solution(\n\"\"\"\n6 20\n45 30 55 20 80 20\n\"\"\"\n) == \"4\"\nprint(solution(\n\"\"\"\n7 20\n1 3\n2 5\n1\n\"\"\"\n))\nassert solution(\n\"\"\"\n5 200\n100 200 200 200\n\"\"\"\n) == \"5\"\nprint(solution(\n\"\"\"\n5 200\n1 1 1 1\n\"\"\"\n))\nassert solution(\n\"\"\"\n7 20\n100 200 200 200\n\"\"\"\n) == \"0\"\nprint(solution(\n\"\"\"\n5 10\n5 5 5 5\n\"\"\"\n))\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 180\\n1 1 2 3\") == \"4\"\n\"\"\"\n\nimport math\n\nT, N = map(int, input().split())\nS = list(map(int, input().split()))\n\nS = sorted(S)\nprint(T // max(S))\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\n\"\"\"\n\ud30c\uc774\uc36c\n\nimport sys\ninput = sys.stdin.readline\n\nT = int(input())\ntasks = list(map(int, input().split()))\n\nprint(sum(tasks[:T])//tasks[T-1])\n\"\"\"\n\nT = int(input())\ntasks = list(map(int, input().split()))\nprint(sum(tasks[:T])//tasks[T-1])\n\n\"\"\"\n\ud30c\uc774\uc36c\n\nimport sys\ninput = sys.stdin.readline\n\nT = int(input())\ntasks = list(map(int, input().split()))\n\ntasks.sort(reverse=True)\nprint(sum(tasks[:T])//tasks[T-1])\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\n\n\"\"\"\nPossible solutions:\n\nsolution1:\nimport math\nimport sys\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 2\n1 2 3 4 5''') == '3'\nassert solution('''5 180\n45 30 55 20 80 20''') == '4'\nassert solution('''6 180\n2 3 3 2 2 1''') == '5'\nassert solution('''6 180\n1 1 1 1 1 1''') == '1'\n\nprint('Success')"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 3 4 5\") == \"0\\n\"\nassert solution(\"2 2\\n1 2\") == \"0\\n\"\nassert solution(\"2 3\\n1 2 3\") == \"2\\n\"\nassert solution(\"2 3\\n1 2 3\") == \"2\\n\"\nassert solution(\"2 3\\n1 2 3\") == \"2\\n\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 180\\n1\\n1') == '4'\nassert solution('6 180\\n3\\n3\\n3\\n3\\n3') == '2'\nassert solution('6 180\\n4\\n4\\n4\\n4\\n4') == '0'\n\"\"\"\n\nfrom collections import deque\nimport math\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\n---\n- `N` the number of steel rods.\n- `L_i` the lengths of the steel rods.\n\n*The lengths of the steel rods are positive integers.\n*The integer `N` is always greater than or equal to `1`.\n*The integer `N` is always less than or equal to `100`.\n*Each integer `L_i` is always greater than or equal to `1`.\n*Each integer `L_i` is always less than or equal to `50`."
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\"\n\na = int(input())\nl = [int(input()) for i in range(a)]\nb = l[0] + l[1]\nfor j in l:\n    b += j\nprint(b)\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(solution(\"4\\n21\\n34\\n18\\n9\"))\n\nassert solution(\"1\\n25\") == \"25\"\nassert solution(\"2\\n31\") == \"50\"\nassert solution(\"3\\n44\") == \"100\"\nassert solution(\"1\\n1\") == \"1\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\nmin_rod = 1\nmax_rod = arr[n - 1] + arr[n - 2]\n\nwhile min_rod <= max_rod:\n    mid = (min_rod + max_rod) // 2\n\n    total_length = 0\n    fused_length = 0\n    for rod in arr:\n        if rod > mid:\n            fused_length += rod - mid\n\n    if fused_length >= n:\n        max_rod = mid - 1\n    elif fused_length < n:\n        min_rod = mid + 1\n\nprint(max_rod)\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\n\nassert solution('hello world') == 'hello world'\n\nassert solution('string cheese') =='string cheese'\n\nassert solution('jessica loves jam') == 'jessica loves jam'"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n21\n34\n18\n9''') == '79'\nassert solution('''5\n19\n46\n7\n15\n''') == '118'\nassert solution('''3\n55\n15\n''') == '77'\n\n-----Explanation-----\n- For each length, we first calculate the number of rods that can fit into a jumbo javelin,\n- Then we calculate the difference between the total length of the jumbo javelin and the total length of the final jumbo javelin.\n\nThe length of the final jumbo javelin is the sum of the length of all the rods.\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\n\nassert solution(\"21 34 18 9\") == \"79\"\n\nassert solution(\"21 34 18 9\") == \"79\"\n\nassert solution(\"21 34 18 9\") == \"79\"\n\nassert solution(\"21 34 18 9\") == \"79\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''4 4 6\n1 3 0\n2 1 1\n3 2 0\n4 3 2'''\n) == '''2 3 0\n3 1 1\n4 2 0'''\nprint(solution(input()))\n\nSolution 1:\n    # Put the first three bottles in the front of the fridge\n    # and the others in the rear.\n    # \n    # For each of the first three bottles, we want to put\n    # two of them in the front of the fridge and one in the\n    # rear. To be consistent, we should put the one in the\n    # rear in the front of the fridge.\n    # \n    # We can fill the first three bottles in the following way:\n    #     3 bottles in the front, 2 of them in the rear\n    #     2 bottles in the front, 1 of them in the rear\n    #     1 bottle in the front, 0 bottles in the rear\n    # We can fill the remaining n - 3 bottles in the following way:\n    #     1 bottle in the front, 0 bottles in the rear\n    # \n    # Therefore, the optimal refill scheme is\n    #     1 bottle in the front, 0 bottles in the rear\n    #     2 bottles in the front, 1 bottle in the rear\n    #     3 bottles in the front, 2 of them in the rear\n    # \n    # The probability of getting a cold bottle in the first three\n    # slots is 1 / (3 * 2 * 1) = 1 / 18 = 0.0625\n    # The probability of getting a cold bottle in the remaining\n    # slots is 1 / (n - 3 * 2 * 1) = 1 / (n - 18) = 1 / (n - 3) = 0.25\n    # Therefore, the optimal refill scheme is\n    #     1 bottle in the front, 0 bottles in the rear\n    #     2 bottles in the front, 1 bottle in the rear\n    #     3 bottles in the front, 2 of them in the rear\n    # \n    # However, if we fill the remaining n - 3 bottles in the following way:\n    #     1 bottle in the front, 0 bottles in the rear\n    #     2 bottles in the front, 1 bottle in the rear\n    #     3 bottles in the front, 2 of them in the rear\n    # \n    # then there is a chance that all the next m students will get a\n    # cold bottle from the first 3 slots, but there is no chance\n    # that they will get a cold bottle from the remaining slots.\n    # Therefore, the optimal refill scheme is impossible.\n    # \n    # Consider another example, where we want to maximize the probability\n    # of getting a cold bottle for the next m students.\n    # \n    #     2 bottles in the front, 1 bottle in the rear\n    #     3 bottles in the front, 2 of them in the rear\n    # \n    # For the first m students, we can put the 2 bottles in the front, and\n    # the 1 bottle in the rear. The probability of getting a cold bottle is\n    # 2 / (2 * 1 * 1) = 1 / 4 = 0.25\n    # \n    # For the next m - 1 students, we can put the 3 bottles in the front,\n    # and the 1 bottle in the rear. The probability of getting a cold\n    # bottle is 3 / (3 * 1 * 1) = 1 / 9 = 0.11111111\n    # \n    # Therefore, the optimal refill scheme is\n    #     2 bottles in the front, 1 bottle in the rear\n    #     3 bottles in the front, 2 of them in the rear\n    # \n    # So, the probability of getting a cold bottle is 2 / (2 * 1 * 1) + 3 / (3 * 2 * 1) = 1 / 3 = 0.33333\n    # \n    # Similarly, if we fill the remaining n - m bottles in the following way:\n    #     1 bottle in the front, 0 bottles in the rear\n    #     2 bottles in the front, 1 bottle in the rear\n    #     3 bottles in the front, 2 of them in the rear\n    # \n    # then there is a chance that all the remaining students will get a\n    # cold bottle from the first 3 slots, but there is no chance\n    # that they will get a cold bottle from the remaining slots.\n    # Therefore, the optimal refill scheme is impossible.\n    \n    from itertools import product\n    \n    # Return list of lists.\n    # The number of lists returned is the number of different ways\n    # to fill the first m slots.\n    # We don't need to consider the last n - m slots.\n    def fill_all_slots(m):\n        return [list(lst) for lst in product([0, 1, 2], repeat=m)]\n    \n    def get_p(slot):\n        return 1 / (slot[0] * slot[1] * slot[2])\n    \n    # The number of bottles in the front of the fridge\n    # is the number of bottles in the first m slots.\n    n_front = int(input())\n    \n    # The number of bottles in the rear of the fridge\n    # is the number of bottles in the last n - m slots.\n    n_rear = int(input())\n    \n    # The number of bottles in the front of the fridge\n    # is the number of bottles in the first m slots.\n    m_front = int(input())\n    \n    # The number of bottles in the rear of the fridge\n    # is the number of bottles in the last n - m slots.\n    m_rear = int(input())\n    \n    # The number of slots in the fridge\n    n_slots = int(input())\n    \n    # The capacity of each slot\n    slot_cap = int(input())\n    \n    # The total number of bottles in the fridge\n    n = n_front + n_rear\n    \n    # The total capacity of the fridge\n    s = n * slot_cap\n    \n    # The number of times that we need to fill all m slots\n    # is the number of ways we can fill the first m slots,\n    "
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 3 3 4\n0 1 4''') == '''2 3 0'''\nassert solution('''5 3 3 4\n0 1 4\n1 2 5\n1 1 5\n1 1 5\n1 1 5\n4 4 4\n0 1 3\n1 3 2\n1 2 2\n1 3 2\n3 4 2\n1 4 2\n0 4 2\n2 4 1\n2 2 1\n3 4 1\n2 1 1\n3 3 1\n2 3 1\n2 3 1\n1 3 1\n1 1 3\n1 3 1\n1 3 1\n2 2 1\n1 3 1\n1 1 3\n1 3 1\n1 3 1\n1 3 1\n1 1 3\n3 4 1\n1 3 1\n1 3 1\n1 3 1\n2 1 1\n1 1 3\n1 1 3\n1 2 2\n0 1 2\n3 3 1\n1 3 1\n1 3 1\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 3 1\n1 3 1\n1 1 3\n1 2 2\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n0 1 2\n2 2 1\n1 2 1\n1 2 1\n1 1 3\n1 1 3\n1 2 2\n1 1 3\n1 1 3\n1 2 2\n1 1 3\n1 1 3\n0 1 2\n2 1 1\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 2 2\n1 1 3\n1 1 3\n1 2 2\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n0 1 2\n3 3 1\n1 3 1\n1 3 1\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 2 2\n1 1 3\n1 2 2\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1 3\n1 1"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\\n\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n5 0 1 3\\n\") == \"impossible\"\nassert solution(\"5 3 3 4\\n0 5 0 1 3\\n\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n2 0 1 3 4\\n\") == \"impossible\"\nassert solution(\"5 3 3 4\\n0 1 4 2\\n\") == \"impossible\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 3 3 4\n0 1 4\n\"\"\") == \"\"\"2 3 0\"\"\"\n\nassert solution(\"\"\"5 3 3 4\n0 1 4\n\"\"\") == \"\"\"impossible\"\"\"\n\nassert solution(\"\"\"5 3 3 4\n0 1 4\n0 3 2\n0 4 1\n0 2 5\n0 5 4\n\"\"\") == \"\"\"5 2 4 5\"\"\"\n\nassert solution(\"\"\"5 3 3 4\n0 1 4\n0 3 2\n0 4 1\n0 2 5\n0 5 4\n\"\"\") == \"\"\"impossible\"\"\"\n\nassert solution(\"\"\"5 3 3 4\n0 1 4\n0 3 2\n0 4 1\n0 5 4\n0 2 5\n0 3 6\n0 5 4\n0 4 6\n0 5 7\n0 3 6\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 3 6\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n0 5 10\n0 2 7\n0 4 6\n0 5 7\n0 5 8\n0 4 6\n0 5 9\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('5 1 3 4\\n0 1 4') == 'impossible'\n\"\"\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 1 3 4\n2 4 5\n1 1 5''') == \"1 2 0\"\nassert solution('''1 3 4 2\n3 4 5\n0 0 0''') == \"impossible\"\nassert solution('''4 1 3 4\n2 4 5\n0 0 0\n0 0 0''') == \"2 3 0\"\nassert solution('''2 3 2 4\n3 4 5\n0 0 0\n0 0 0''') == \"impossible\"\nassert solution('''1 1 1 1\n1 1 1 1\n0 0 0\n0 0 0''') == \"3 3 0\"\n'''"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\"\"\"\n\nimport sys\n\nn, m, s, d = map(int, sys.stdin.readline().split())\nfridge = [int(c) for c in sys.stdin.readline().split()]\n\ncounts = [0] * d\nfor c in fridge:\n    counts[c] += 1\n\nans = 0\nfor c in range(d):\n    if counts[c] == 0:\n        continue\n    for i in range(m):\n        if (c + i) % d in fridge:\n            ans += 1\n    if ans == s:\n        print(c)\n        break\nelse:\n    print('impossible')\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3 3 4\n0 1 4''') == '2 3 0'\nassert solution('''5 3 3 4\n0 3 4\n0 1 4''') == '2 3 0'\nassert solution('''6 5 10 3\n0 0 0 0 0\n0 1 3 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0''') == '3 2 0'\nassert solution('''6 5 10 3\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 1 3 0 0''') == '2 1 1'\n'''\n6 5 10 3\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 1 3 0 0\n'''\nassert solution('''6 5 10 3\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 1 3 0 0''') == 'impossible'\n'''\n6 5 10 3\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 1 3 0 0\n'''\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('5 3 3 4\\n1 1 4') == 'impossible'\nassert solution('5 3 3 4\\n1 1 4\\n1 1 4') == 'impossible'\nassert solution('5 3 3 4\\n0 2 4') == '2 1 0'\nassert solution('5 3 3 4\\n0 2 4\\n0 1 4') == 'impossible'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 0\") == \"0 1 2 2 2 0\"\nassert solution(\"0 1 2 2 2 1\") == \"1 0 0 0 0 1\"\n\nprint(solution(\"0 1 2 2 2 7\"))\nprint(solution(\"0 1 2 2 2 0\"))\nprint(solution(\"0 1 2 2 2 1\"))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 6\") == \"0 0 0 0 0 0\"\n\"\"\"\n\nx = [int(i) for i in input().split()]\nk = x[0]\nq = x[1]\nr = x[2]\nb = x[3]\nn = x[4]\np = x[5]\ns = {\n    \"k\": k,\n    \"q\": q,\n    \"r\": r,\n    \"b\": b,\n    \"n\": n,\n    \"p\": p\n}\n\nt = k+q+r+b+n+p\nfor i in s:\n    if s[i] == t:\n        print(0, 0, 0, 0, 0, 0)\n    elif s[i] > t:\n        print(-(s[i]-t), 0, 0, 0, 0, 0)\n    elif s[i] < t:\n        print(s[i]-t, 0, 0, 0, 0, 0)\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 1 1 1 1\") == \"0 0 0 0 0 0\"\nassert solution(\"0 0 1 2 2 7\") == \"1 0 0 0 0 1\"\n\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 2 3 4 5 6\") == \"0 0 0 0 0 0\"\nassert solution(\"1 2 2 2 7\") == \"0 1 0 0 0 1\"\n\"\"\"\nimport numpy as np\n\nnumbers = list(map(int, input().split()))\n\nking = numbers[0]\nqueen = numbers[1]\nrook = numbers[2]\nbishop = numbers[3]\nknight = numbers[4]\npawns = numbers[5]"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 1 2 2 2 9') == '1 -2 0 0 0 0 1'\nassert solution('0 1 2 2 2 8') == '1 -1 0 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nprint(solution(\"0 1 2 2 2 7\"))\nassert solution(\"0 2 2 2 2 8\") == \"0 -1 0 0 0 1\"\nprint(solution(\"0 2 2 2 2 8\"))\nassert solution(\"1 2 1 2 2 5\") == \"1 1 0 0 0 1\"\nprint(solution(\"1 2 1 2 2 5\"))\nassert solution(\"0 0 2 2 2 6\") == \"0 0 0 0 1 1\"\nprint(solution(\"0 0 2 2 2 6\"))\nassert solution(\"0 2 2 2 2 8\") == \"0 -1 0 0 0 1\"\nprint(solution(\"0 2 2 2 2 8\"))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nassert solution('0 2 0 2 7') == '0 1 0 0 1 0'\nassert solution('0 2 0 2 0') == '0 0 0 1 0 0'\nassert solution('0 2 0 2 2') == '0 0 0 0 1 0'\nassert solution('0 2 2 2 0') == '1 0 0 0 0 0'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''0 1 2 2 2 7''') == '1 0 0 0 0 1'"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\nprint(solution(\"2\\n123456 0.6666\\nqwerty 0.3334\"))\n\n-----Notes-----\n\nDon't forget to import math from the math library.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n'''\n\nimport math"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"3\\n123456 0.6666\\nqwerty 0.3334\\n111111 0.1111\\n222222 0.1111\") == \"2.1111\"\nprint(\"The numbers are correct.\")\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('2\\n123456 0.6666\\nqwerty 0.3334\\n') == '1.3334'\nassert solution('2\\n123456 0.6666\\nqwerty 0.3334\\nqwerty 0.3334\\n') == '1.3334'\nassert solution('2\\n123456 0.6666\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334') == '1.3334'\nassert solution('2\\n123456 0.6666\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334\\n') == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n12345 6.6666\\nqwerty 0.3333') == '1.3333'\nassert solution('3\\n12345 6.6666\\nqwerty 0.3333') == '1.3333'\nassert solution('2\\n12345 6.6666\\nqwerty 0.3333') == '1.3333'\n\n---Problem---\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0456\u0437 $N$ \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b. \u0417\u043d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u0443 \u0432\u0441\u0456\u0445 \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0430\u0440\u0448\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 $K$, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0437\u0440\u043e\u0441\u0442\u0430\u043d\u043d\u044f.\n\n\u0414\u043e\u0432\u0433\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\n\u0412\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456: \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b, \u0440\u043e\u0437\u043c\u0456\u0440 \u0441\u043f\u0438\u0441\u043a\u0443, \u0447\u0438\u0441\u043b\u043e $K$.\n\n\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0443:\n> python solution.py\n\u0412\u0438\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456: \u0441\u0443\u043c\u0430 \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0430\u0440\u0448\u0438\u0445 \u0437\u0430 $K$.\n\n\u0412\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456: \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b, \u0440\u043e\u0437\u043c\u0456\u0440 \u0441\u043f\u0438\u0441\u043a\u0443, \u0447\u0438\u0441\u043b\u043e $K$.\n\n\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0443:\n> python solution.py\n\u0412\u0438\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456: \u0441\u0443\u043c\u0430 \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0430\u0440\u0448\u0438\u0445 \u0437\u0430 $K$.\n\n\u0412\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456: \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b, \u0440\u043e\u0437\u043c\u0456\u0440 \u0441\u043f\u0438\u0441\u043a\u0443, \u0447\u0438\u0441\u043b\u043e $K$.\n\n\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0443:\n> python solution.py\n\u0412\u0438\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456: \u0441\u0443\u043c\u0430 \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0430\u0440\u0448\u0438\u0445 \u0437\u0430 $K$.\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\nSolution:\n\nimport math\nimport re"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n123456 0.6666\nqwerty 0.3334''') == '1.3334'\n\n-----Solution-----\n\nn = int(stdin.readline())\n\npasswords = []\nprobabilities = []\nfor i in range(n):\n    x = stdin.readline().rstrip().split(' ')\n    passwords.append(x[0])\n    probabilities.append(float(x[1]))"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\nassert solution(\"4 2\\n1 2 4\") == \"1\"\nassert solution(\"4 2\\n2 1 4\") == \"2\"\nassert solution(\"4 2\\n2 4 1\") == \"2\"\nassert solution(\"4 2\\n4 2 1\") == \"2\""
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n3 2 4') == '1'\nassert solution('6 2\\n1 2 4 6 6 7') == '1'\nassert solution('9 1\\n3 2 3 4 5 6 7 8') == '2'\nassert solution('8 2\\n1 2 3 4 5 6 7 8') == '2'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\"\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 2 4\") == '1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4\\n3') == '1'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1\n1 2 4''') == '1'\nassert solution('''2 1\n2 2''') == '0'\n'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '27\\\n    C C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') ==\n    'G:\n    F: -------------------------------------*--------------------\n    E:       *   *          *             *   *                  \n    D: ----*-------**-----*-------------*-------*----------------\n    C: * *     *      * *     **    * *           *         ** **\n    B: --------------------------**-----------------*-----*------\n    A:\n    g: -----------------------------------------------*----------\n    f:\n    e: ----------------------------------------------------------\n    d:\n    c:\n    b:\n    a: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                               \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                   \\ne: ----------------------------------------------------------\\nd:                                                   \\nc:                                                   \\nb:                                                   \\na: ----------------------------------------------------------\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '27'\n    'C C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'\n) ==\n'''\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:\ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:\nc:\nb:\na: ----------------------------------------------------------\n'''\n\nprint(\n    solution(\n        '27'\n        'C C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'\n    )\n)\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n\"\"\"\n) == \"\"\"\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\n)\n\n\nassert solution(\n\"\"\"\n3\nA 1\nB 2\nC 3\n\"\"\"\n) == \"\"\"\nG:\nF: -------------------------------------*--------------------\nE:       *           *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA: *           *           *             *   *                  \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\n)\n\nassert solution(\n\"\"\"\n5\nA 1\nB 2\nC 3\nD 4\nE 5\n\"\"\"\n) == \"\"\"\nG:\nF: -------------------------------------*--------------------\nE:       *           *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA: *           *           *             *   *                  \ng: -----------------------------------------------*----------\nf: *           *           *             *   *                  \ne: ----------------------------------------------------------\nd: *           *           *             *   *                  \nc: *           *           *             *   *                  \nb: *           *           *             *   *                  \na: ----------------------------------------------------------\n\"\"\"\n)\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6\nA A E\nA G F E\nB B D E\nB G F E D\nC E D\nC E D B\n\"\"\") == \"\"\"\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\".strip()\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nCC D E C E C D2 CC D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G: \\nF: *************\\nE:   *     *      *         *\\nD: * *      * *     **    * *\\nC: **********************\\nB: **********************\\nA: **********************************\\ng: *****************************************************************\\nf: ******************************************************************\\ne: ********************************************************************\\nd: ********************************************************************\\nc: ********************************************************************\\nb: ********************************************************************\\na: ********************************************************************'\nprint(solution(stdin))\n\n------"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:\ng: -----------------------------------------------*----------\nf:                                                 *\ne: ----------------------------------------------------------\nd:\nc:                                                   *\nb:\na: ----------------------------------------------------------\n\"\"\".strip()\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"33\\nA B A G G A G B A G A G B\") == \"\"\"G:\nG:\nG:\nG:\nG:\nG:\nG:\nG:\nF: -------------------------------------*--------------------\nE:       *          *             *          *           *\nD: ---------------------------------------*-------------*-------\nC:        *          *             *          *           *\nB:        *          *             *          *           *\nA: ---------------------------------------*-------------*-------\ng:                                                  *        \nf:        *          *             *          *           *\ne:        *          *             *          *           *\nd:        *          *             *          *           *\nc:        *          *             *          *           *\nb:        *          *             *          *           *\na: ---------------------------------------*-------------*-------\n\"\"\"\n\"\"\"\nScore = \nComplexity = \n\"\"\"\nimport unittest\nimport timeit\nfrom collections import deque"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF:\\t*\\t\\t**\\t\\t*\\t\\t*\\t**\\t\\t*\\t\\t*\\t*\\t*\\t**\\t\\t*\\t\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t\\t*\\t*\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t\\t*\\t*\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t\\t*\\t*\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\t*\\t**\\t*\\t*\\"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n3 3 4\") == \"possible\"\nassert solution(\"3\\n3 3 3\") == \"possible\"\nassert solution(\"3\\n3 3 5\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"5\\n2 4 5 2 4\") == \"possible\"\nassert solution(\"5\\n2 4 5 6 8\") == \"impossible\"\nassert solution(\"5\\n1 1 1 1 1\") == \"impossible\"\n\nimport math\nfrom typing import List\n\n\nclass Solution:\n    def solve(self, N: int, sticks: List[int]) -> str:\n        if sum(sticks) / 3 == math.floor(sum(sticks) / 3):\n            return \"possible\"\n        return \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 1''') == 'possible'\nassert solution('''3\n1 1 1''') == 'possible'\nassert solution('''3\n0 0 0''') == 'possible'\nassert solution('''3\n0 0 0''') == 'possible'\nassert solution('''3\n1 2 2''') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n3 3 4') == 'possible'\nassert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n5 5 2') == 'impossible'\nassert solution('3\\n1 2 3') == 'impossible'\n\n\"\"\"\n\nfrom itertools import combinations\nimport math"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1') == 'possible'\nassert solution('4\\n1 1 1') == 'possible'\nassert solution('5\\n1 1 1 1 1') == 'possible'\nassert solution('3\\n1 1 1') == 'impossible'\nassert solution('4\\n1 1 1 1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('2\\n1 1') == 'impossible'\nassert solution('3\\n1 2 1') == 'impossible'\nassert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 1 1') == 'possible'\n\n-----Test Input-----\n2\n0 0\n0 0\nSample Test:\nTest:\nInput:\n2\n0 0\n0 0\nOutput:\nimpossible\nimpossible\n\"\"\"\n\nn = int(input())\nl = [int(x) for x in input().split()]\nprint(\"possible\" if sum(l) > 2 and l[0] < l[1] + l[2] and l[1] < l[0] + l[2] and l[2] < l[0] + l[1] else \"impossible\")\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"2\\n2 1\") == \"possible\"\nassert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"4\\n2 1 2\") == \"possible\"\nassert solution(\"3\\n1 2 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 1\\n') == 'possible'\nassert solution('7 10 2\\n') == 'possible'\nassert solution('3 1 1\\n') == 'possible'\nassert solution('7 10 2\\n') == 'possible'\nassert solution('7 11 2\\n') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('4\\n1 2 3 4') == 'possible'\nassert solution('3\\n2 2 2') == 'impossible'\n\nprint(solution(stdin))\n\n----\n\n\"\"\""
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"3\\n1 2 3\") == \"impossible\"\nassert solution(\"3\\n2 2 1\") == \"impossible\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\n---Problem---\nYou are given a list of integers L. You want to build a tower of height H with L bricks. You can choose any one of the integers in L as the top of your tower. You can build the tower in the following manner:\n\nStart from the first element of L (index 0). Pick the first element of L and remove it from L. Then repeat the following process until you decide to stop.\n\nIf the element picked is less than or equal to the current tower height H, then the element is added to the tower and removed from L. Otherwise, the element is ignored.\n\nAt the end, the tower is said to have a height H.\n\nFor example, given L = [2, 1, 3], a possible tower with height H = 4 is: [2, 1, 3] -> [2, 1, 3] -> [2, 1] -> [1, 3] -> [1] -> [].\n\nNote that the tower itself contains L elements, not just the elements of the tower.\n\nFind the number of towers with height H with L elements.\n\n-----Solution-----\n\"\"\"\nimport math\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('5 2 4 4 2 1 2 1 2 2 2') == 4\nassert solution('10 5 7 3 2 1 2 2 2 1 1 3') == 3\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 3 2 1 2 2 1 1 3\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 3 2 1 2 1 2\") == \"3\"\nassert solution(\"4\\n1 3 2 1\") == \"1\"\nassert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1\\n2\") == \"1\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\nassert solution(\"10\\n2 1 2 1 2 3 2 1 1 3\") == \"2\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('1 1 1') == 1\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    6\n    ASHMEADE 9.90 8.85\n    BLAKE 9.69 8.72\n    BOLT 9.58 8.43\n    CARTER 9.78 8.93\n    FRATER 9.88 8.92\n    POWELL 9.72 8.61\n    \"\"\"\n    ) == \"35.54\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\nA 2.61 8.65\nB 4.69 8.64\nC 5.01 8.37\nD 5.15 7.86\nE 5.15 7.88\n''') == 'A B E D C'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\") == \"35.54\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 8.95 10.85\\n6 8.84 10.35\\n5 8.94 10.47\\n2 10.02 10.38\\n3 10.30 10.43\\n4 10.10 10.62\\n1 10.54 10.58\\n2 10.34 10.70\") == \"10.69 10.89 10.68\"\n\"\"\"\n\nimport unittest\nimport math"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n\"\n\"ASHMEADE 9.90 8.85\\n\"\n\"BLAKE 9.69 8.72\\n\"\n\"BOLT 9.58 8.43\\n\"\n\"CARTER 9.78 8.93\\n\"\n\"FRATER 9.88 8.92\\n\"\n\"POWELL 9.72 8.61\\n\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\\n\") == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nBOB 2.9 8.67\\nTAMMY 2.9 8.67\\nCONOR 2.9 8.67\") == \"35.54\"\n\"\"\"\nimport os\n\nimport numpy as np\nimport pandas as pd\n\nfrom time import time\nfrom unittest import TestCase, main\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nJAMES\\t9.80\\t10.80\\nROBERT\\t9.73\\t10.20\\nWILLIAM\\t9.80\\t10.80\\nJOSEPH\\t9.20\\t9.87\\n\") == \"30.55\"\nassert solution(\"4\\nJAMES\\t9.80\\t10.80\\nROBERT\\t9.73\\t10.20\\nWILLIAM\\t9.80\\t10.80\\nJOSEPH\\t9.20\\t9.87\\n\") == \"30.55\"\nassert solution(\"4\\nJAMES\\t9.80\\t10.80\\nROBERT\\t9.73\\t10.20\\nWILLIAM\\t9.80\\t10.80\\nJOSEPH\\t9.20\\t9.87\\n\") == \"30.55\"\nassert solution(\"4\\nJAMES\\t9.80\\t10.80\\nROBERT\\t9.73\\t10.20\\nWILLIAM\\t9.80\\t10.80\\nJOSEPH\\t9.20\\t9.87\\n\") == \"30.55\"\nassert solution(\"4\\nJAMES\\t9.80\\t10.80\\nROBERT\\t9.73\\t10.20\\nWILLIAM\\t9.80\\t10.80\\nJOSEPH\\t9.20\\t9.87\\n\") == \"30.55\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''ASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61''') == \"35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('1 2\\n2 4') == 2\n\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6\\n') == '2'\nassert solution('2\\n4 5\\n1 2\\n5 7\\n') == '0'\nassert solution('2\\n1 1\\n2 2\\n') == '0'\nassert solution('2\\n3 3\\n1 2\\n') == '1'\nassert solution('2\\n4 4\\n1 2\\n') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"3\\n2 5\\n5 6\") == \"2\"\nassert solution(\"3\\n2 5\\n5 6\") == \"2\"\nassert solution(\"3\\n2 5\\n5 6\") == \"2\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2\n2 4\n5 6\n''') == '2'\nassert solution('''\n4\n1 5\n2 4\n3 3\n4 2\n5 6\n''') == '2'\nassert solution('''\n4\n2 2\n3 3\n1 2\n3 3\n''') == '1'\nassert solution('''\n7\n1 3\n2 4\n3 5\n4 6\n5 7\n6 7\n7 8\n''') == '0'\n\n\"\"\""
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 4\\n5 6\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(input())\ns = set()\nfor i in range(n):\n    L, U = map(int, sys.stdin.readline().split())\n    s.add((L, U))\n\ns.add((1, 2*n))\n\nL = 1\nU = 2*n\n\nwhile L <= U:\n    m = (L+U)//2\n    count = 0\n    for l, u in s:\n        count += max(0, u - m)\n    if count <= m:\n        L = m+1\n    else:\n        U = m-1\n\nprint(U)\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\nprint(solution(stdin) == '2')\n\n-------\n\n1\n0 2\n2 4\n0 1\n\n-------\n\n1\n0 2\n2 4\n0 1\n\n2\n0 1\n2 4\n0 2\n\n2\n0 1\n2 4\n0 2\n\n0\n1 2\n2 4\n0 1\n\n3\n0 1\n2 4\n0 2\n\n0\n1 2\n2 4\n0 1\n\n2\n0 1\n2 4\n0 2\n\n1\n0 2\n2 4\n0 1\n\n1\n0 2\n2 4\n0 1\n'''\nfrom typing import List\n\nclass Solution:\n    def getMin(self, intervals: List[int]) -> int:\n        if len(intervals) <= 1: return len(intervals)\n        intervals.sort()\n        ans = 1\n        for i in range(1, len(intervals)):\n            if intervals[i][0] > intervals[i - 1][1]:\n                ans += 1\n        return ans"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == 2\n\n---Problem Statement---\n\nGiven a list of intervals, remove all intervals that are covered by another interval in the list. In other words,\n\nGiven [3, 4] and [2, 4] as input, the output list would be [2, 3]. Given [1, 4] and [2, 3] as input, the output list would be [2, 3]\n\n'''"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('hey') == 'hee'\nassert solution('heyhey') == 'heeeeeey'\nassert solution('heeeeee') == 'heeeeeeeey'\nassert solution('h') == 'he'\n\nprint(solution(stdin))\n\nSolution"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hey\") == \"heey\"\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"heyhey\") == \"heehee\"\nassert solution(\"heeeeee\") == \"heeeeeee\"\nassert solution(\"heeeeeeee\") == \"heeeeeeeeee\"\nassert solution(\"heeeeeeeeeeee\") == \"heeeeeeeeeeeeeeee\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"heeey\") == \"heehee\"\nassert solution(\"hiee\") == \"heehe\"\nassert solution(\"heee\") == \"heeeeee\"\nassert solution(\"hii\") == \"hi\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hey') == 'heey'\nassert solution('bye') == 'heeby'\nassert solution('very late') =='veely latee'\nassert solution('good morning!') == 'goood morng!e'\nassert solution('hi!') == 'heeih!'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hey') == 'hee'\nassert solution('yea') == 'yeae'\nassert solution('hello') == 'heeeeee'\nassert solution('bye') == 'beee'\nassert solution('later') == 'eerr'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hey hey hey hey') == 'heehehee'\nassert solution('h') == 'h'\nassert solution('h he e') == 'hhee'\nassert solution('heyy') == 'heey'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(hi) == hhee\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"heye\") == \"heehe\"\nassert solution(\"hey\") == \"heehe\"\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''hi''') == '''heey'''\nassert solution('''Later!''') == 'Alligator!'''\nassert solution('''In the end he came back and said \"Later\"''') == 'Alligator!Alligator!'''\n\n-----\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_solution\nprint(solution(input))\n\n2\n1 2 3\n1 3 4\n1 4 5\n\n1\n2 3\n2 4 5\nSample Output:\n1 2\n1 3\n1 4\n\n'''\n\nimport sys\nimport math\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n1 2\\n') == ''\nassert solution('2\\n1 2\\n1 3\\n') == ''\nassert solution('4\\n1 2 1 3\\n') == ''\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4\\n1 1 2 3\\n2 0 3 4\\n3 2 0 4\\n3 3 3 0\") == \"1 2\\n1 3\\n1 4\\n\"\nassert solution(\"4\\n2 2 1 3\\n3 2 1 4\\n3 3 3 0\") == \"1 2\\n1 3\\n1 4\\n\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\\n') == '1 2\\n1 3\\n1 4\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"5\\n1 0 1 1 2\\n2 1 0 2 3\\n3 2 1 0 3\\n4 3 2 2 0\\n5 4 4 4 0\") == \"1 2\\n2 3\\n3 4\"\nassert solution(\"7\\n1 0 1 1 2\\n2 1 0 2 3\\n3 2 1 0 3\\n4 3 2 2 0\\n5 4 4 4 0\\n6 5 5 5 0\\n7 6 6 6 0\") == \"1 2\\n2 3\\n3 4\\n4 5\\n5 6\"\nassert solution(\"14\\n
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\\n2 3\\n3 4\\n\") == \"1 2\\n1 3\\n1 4\\n\"\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\nassert solution('1\\n0\\n1\\n2\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3\\n0\\n1\\n2\\n3"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nprint(\"Hooray!\")"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\n------ Notes ------\n\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(DRM_ENC) == ABCD\nprint(solution(DRM_ENC))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\"\n\n\"\"\"\nCode Challenge\n  Name: \n    Cipher\n  Filename: \n    cipher.py\n  Problem Statement:\n    Print the following pattern for the given number of rows. \n    See the sample output for more details.\n    \n  Hint: \n    The string sequence should be the same for every line. The only difference \n    in each line is the value of the variable i. \n  Input:\n    5\n  Output:\n    Below is the output of the program.\n      * \n      * * \n      * * * \n      * * * * \n      * * * * * \n      * * * * \n      * * * \n      * * \n      * \n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Pallindromic Integer\n  Filename: \n    pallindromic.py\n  Problem Statement:\n    You are given a space separated list of integers. \n    If all the integers are positive and if any integer is a palindromic integer, \n    then you need to print True else print False.\n    (Take Input from User)  \n  Hint: \n      A palindromic number or numeral palindrome is a number that remains the same\n      when its digits are reversed. \n      Like 16461, for example, it is \"symmetrical\"\n      You need to develop using any and all and List comprehension\n  Input: \n    12 9 61 5 14\n  Output:\n    True\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Pangram\n  Filename: \n    pangram.py\n  Problem Statement:\n    Write a Python function to check whether a string is PANGRAM or not\n    Take input from User and give the output as PANGRAM or NOT PANGRAM.\n  Hint:\n    Pangrams are words or sentences containing every letter of the alphabet at least once.\n    For example: \"The quick brown fox jumps over the lazy dog\"  is a PANGRAM.\n  Input: \n    The five boxing wizards jumps.\n  Output:\n    NOT PANGRAM\n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Vowels Finder\n  Filename: \n    vowels.py\n  Problem Statement:\n    Remove all the vowels from the list of states  \n  Hint: \n    Use nested for loops and while\n  Input:\n    state_name = [ 'Alabama', 'California', 'Oklahoma', 'Florida']\n  Output:\n    ['lbm', 'clfrn', 'klhm', 'flrd']\n    \n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Pattern Builder\n  Filename: \n    pattern.py\n  Problem Statement:\n    Write a Python program to construct the following pattern. \n    Take input from User.  \n  Input: \n    5\n  Output:\n    Below is the output of the program.\n      * \n      * * \n      * * * \n      * * * * \n      * * * * * \n      * * * * \n      * * * \n      * * \n      * \n\"\"\"\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Pangram\n  Filename: \n    pangram.py\n  Problem Statement:\n    Write a Python function to check whether a string is PANGRAM or not\n    Take input from User and give the output as PANGRAM or NOT PANGRAM.\n  Hint:\n    Pangrams are words or sentences containing every letter of the alphabet at least once.\n    For example: \"The quick brown fox jumps over the lazy dog\"  is a PANGRAM.\n  Input: \n    The five boxing wizards jumps.\n  Output:\n    PANGRAM\n\"\"\"\n\n\n\n\"\"\"\nCode Challenge\n  Name: \n    Intersection\n  Filename: \n    Intersection.py\n  Problem Statement:\n    With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155]\n    Write a program to make a list whose elements are intersection of the above given lists.  \n\"\"\"\n\n\"\"\"\nCode Challenge\n  Name: \n    Duplicate\n  Filename: \n    duplicate.py\n  Problem Statement:\n    With a given list [12,24,35,24,88,120,155,88,120,155]\n    Write a program to print this list after removing all duplicate values \n    with original order reserved  \n\"\"\"\n\n\"\"\"\nCode Challenge\n  Name: \n    Mailing List\n  Filename: \n    mailing.py\n  Problem Statement:\n  I recently decided to move a popular community  mailing list (3,000 subscribers, \n  60-80 postings/day) from my server to Google Groups. \n  I asked people to joint he Google-based list themselves, \n  and added many others myself, as the list manager. \n  However, after nearly a week, only half of the list had been moved. \n  I somehow needed to learn which people on the old list hadn't yet \nl  signed up for the new list.\n\n\n  Fortunately, Google will let you export a list of members of a group to \n  CSV format. \n  Also, Mailman (the list-management program I was using on\n  my server) allows you to list all of the e-mail addresses being used \n  for a list. Compose of that, I can quickly scan the list of people \n  who have not yet signed up to the new list.\n  \n  Fortunately the list of e-mail addresses is exported in a format \n  that can be easily read into a spreadsheet, or pared down further \n  to a smaller dataset. \n  \n  See the instructions in the code for details.\n\n\n  Hint:\n      Refer to mailing.csv for the layout of the list of email addresses.\n      \n  Code Challenge\n    Name: \n      Mailing List\n    Filename: \n      mailing.py\n    Problem Statement:\n      I recently decided to move a popular community  mailing list (3,000 subscribers, \n      60-80 postings/day) from my server to Google Groups. \n      I asked people to joint he Google-based list themselves, \n      and added many others myself, as the list manager. \n      However, after nearly a week, only half of the list had been moved. \n      I somehow needed to learn which people on the old list hadn't yet \n      signed up for the new list.\n\n      Fortunately, Google will let you export a list of members of a group to \n      CSV format. \n      Also, Mailman (the list-management program I was using on\n      my server) allows you to list all of the e-mail addresses being used \n      for a list. Compose of that, I can quickly scan the list of people \n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"SQYRZQEBT\") == \"ABCD\"\nassert solution(\"SQYRZQEBTQ\") == \"ABCD\"\n\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('VLTKWHKZB') == 'VLTKWHKZB'\nassert solution('VQQAJSXR') == 'VQQAJSXR'\nassert solution('VQQAJSXR') == 'VQQAJSXR'\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('BRCAALZK') == 'CABD'\nassert solution('EWPGAJRB') == 'ABCD'\nassert solution('EWPALGFPE') == 'ABCD'\nassert solution('EWPZGFPM') == 'ABCD'\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"VJHEWQQHZ\") == \"ZRKB\"\nassert solution(\"XWEGCTD\") == \"ZRKB\"\nassert solution(\"RTEYTYQE\") == \"ZRKB\"\nassert solution(\"YJNNXGQH\") == \"ZRKB\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WXY\") == \"XYW\"\nassert solution(\"KXANW\") == \"ABC\"\nassert solution(\"QVWSYX\") == \"QVWSYX\"\n\"\"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 2\nassert solution('abcdef') == 0\nassert solution('abd') == 1\nassert solution('a') == 1\nassert solution('z') == 0\n\n---"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 2\nassert solution('def') == 0\nassert solution('abba') == 0"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcc\") == 1\n\"\"\"\n\nimport collections\nimport collections.abc\nimport itertools\nimport math\nimport unittest\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abracadabra') == 3\nassert solution('abccba') == 0\nassert solution('geeksforgeeks') == 4\nassert solution('abcc') == 3\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == ans\nprint(solution(s))\n\n-----Notes-----\nFor C:\nint solution(char *s) {\n    int count = 0;\n    for (int i = 0; i < strlen(s); i++) {\n        if (strlen(s) - i < strlen(s) - i) {\n            count++;\n        }\n    }\n    return count;\n}\n\nfor Java:\nint solution(char[] s) {\n    int count = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s.length - i < s.length - i) {\n            count++;\n        }\n    }\n    return count;\n}\n\nFor C++:\nint solution(string &s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.length() - i < s.length() - i) {\n            count++;\n        }\n    }\n    return count;\n}\n\nFor Haskell:\nimport Data.Char\n\nsolution = Data.Char.minimalLength\nsolution \"a\" = 1\nsolution \"ab\" = 2\nsolution \"abc\" = 2\nsolution \"abcab\" = 1\nsolution \"abcd\" = 3\nsolution \"abcdef\" = 1\nsolution \"abcdefgh\" = 3\n\nsolution \"aab\" = 1\nsolution \"aabb\" = 2\nsolution \"aaa\" = 0\nsolution \"aaaaa\" = 0\nsolution \"aabbb\" = 1\nsolution \"aaaaaa\" = 2\nsolution \"aabbcc\" = 1\n\nsolution \"aaabbbccc\" = 1\nsolution \"aaabbccccc\" = 0\nsolution \"aaabbccccccc\" = 0\n\nsolution \"aaabbccccccc\" = 3\nsolution \"aaabbccccccccc\" = 1\nsolution \"aaabbccccccccc\" = 1\n\nsolution \"aaabbccccccccc\" = 2\nsolution \"aaabbcccccccccc\" = 2\nsolution \"aaabbcccccccccc\" = 2\nsolution \"aaabbcccccccccc\" = 2\n\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution \"aaabbcccccccccc\" = 1\nsolution"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbcba\") == 0\n\nassert solution(\"abccba\") == 1\n\nassert solution(\"abc\") == 3\n\n-----Explanation-----\nWe can remove the first two characters, \"ab\", and then the whole string.\n\"\"\"\nimport string\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Constraints-----\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abc') == 2\n\nassert solution('dad') == 0\n\nassert solution('abba') == 0\n\nassert solution('abaa') == 1\n\nassert solution('aaaa') == 2"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin.count(\"a\") - 1\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaah\") == \"no\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaah\") == \"go\"\n\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaah') == 'no'\nassert solution('h') == 'go'\nassert solution('aaaaah') == 'go'\n\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaah') == 'go'\n\nassert solution('aaaaaah') == 'no'\n\nassert solution('a') == 'go'\n\nassert solution('aaaaaaah') == 'no'\n\nassert solution('a' * 999 + 'h') == 'no'"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaah') == 'go'\nassert solution('aaaaaah') == 'no'"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaah') == 'go'\nassert solution('h') == 'no'\nassert solution('aaaaaah') == 'go'\nassert solution('aaahh') == 'no'\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n------------------\n\nimport sys"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaaah\") == \"go\"\nassert solution(\"h\") == \"no\"\nassert solution(\"aaaaaah\") == \"go\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaaah') == 'no'\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1B2A1A2A2A2\") == \"B\"\nassert solution(\"A2B1B2A1B2A2A2\") == \"A\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nrecord = input()\n\nwhile True:\n    if \"A1\" in record:\n        record = record.replace(\"A1\", \"A\")\n    if \"B1\" in record:\n        record = record.replace(\"B1\", \"B\")\n    if \"A2\" in record:\n        record = record.replace(\"A2\", \"A\")\n    if \"B2\" in record:\n        record = record.replace(\"B2\", \"B\")\n    if len(record) == 0:\n        break"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2B1A2B2A1A2A2A2\") == \"B\"\nassert solution(\"A2B1A2B2A1A2A2A2B1A2B2A1A2A2A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2B1A2B2A1A2A2A2B1A2B2A1A2A2A2\") == \"B\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('B2A1B2A2A2A2A2') == 'B'\n\nprint(\"All tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2B1A2A2A2\") == \"B\"\nassert solution(\"A1A2B2A2B1A2A2A2\") == \"B\"\nassert solution(\"B1A2A2B2A1B2A2A2\") == \"A\"\nassert solution(\"A2A2A2A2B1A2B2A2\") == \"A\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B2B1B1B1A2A2') == 'B'\nassert solution('A1A1A1A1A1B2B2B2') == 'B'\n\nprint('All tests passed.')\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2A1B2A2B1A2A2A2\") == \"B\"\n\"\"\"\n\nstdin = input()\nrecord = []\nwhile stdin:\n    record.append(stdin[0])\n    record.append(stdin[1])\n    stdin = stdin[2:]\n\nscore = {\n    'A': 1,\n    'B': 2\n}\nscore = {\n    'A': score[record[0]],\n    'B': score[record[1]]\n}"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == 'A'\nassert solution(\"A1B1A1B1A1B1A1B1A1B2\") == 'B'\nassert solution(\"A1A1B1A1B1A1B1A1B1A1B1\") == 'A'\nassert solution(\"A2B2A1A1B1A2B2A1A1B1A1B1A1B1\") == 'B'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A1B1') == 'B'\nassert solution('A2B2') == 'A'\nassert solution('A2B2A1A2A2A2') == 'A'\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n2 3 4\\n2 4 5\\n2 5 6\\n1 3 6') == '5'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('3 3 2') == '1'\nassert solution('5 3 2 1') == '1'\nassert solution('5 4 2 1') == '1'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"21\"\nprint(solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\"))\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n3 2 3\\n3 1 2\\n3 1 1\\n1 2 5\\n1 1 10\\n1 2 2\") == \"6\"\nassert solution(\"7 7\\n1 2 5\\n3 5 7\\n4 6 7\\n7 5 7\\n1 1 10\\n2 5 3\\n3 2 5\\n3 3 10\\n1 5 1\\n2 5 2\\n3 4 6\\n3 1 3\\n4 1 4\\n5 1 4\\n2 6 5\\n5 4 6\\n5 6 7\\n5 6 7\\n3 5 2\") == \"8\"\nassert solution(\"5 5\\n1 2 7\\n1 3 7\\n2 4 7\\n2 5 7\\n3 4 7\\n3 5 7\\n4 5 7\\n4 5 7\\n3 5 7\\n3 5 7\\n4 5 7\\n4 5 7\\n5 4 7\\n5 5 7\\n5 5 7\\n1 2 1\\n2 2 1\\n3 2 1\\n4 2 1\\n5 2 1\\n1 3 1\\n2 3 1\\n3 3 1\\n4 3 1\\n5 3 1\\n1 4 1\\n2 4 1\\n3 4 1\\n4 4 1\\n5 4 1\\n1 5 1\\n2 5 1\\n3 5 1\\n4 5 1\\n5 5 1\\n1 5 1\\n1 5 1\\n2 5 1\\n2 5 1\\n3 5 1\\n3 5 1\\n4 5 1\\n4 5 1\\n5 5 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 3\\n3 1 2\\n1 2 10\\n2 3 20\\n3 4 30') == '14'\n\"\"\"\n\nimport sys\nfrom heapq import heappush, heappop\n\n\nclass Graph:\n    def __init__(self, n):\n        self.n = n\n        self.edges = {i: [] for i in range(1, n + 1)}\n\n    def add_edge(self, a, b, w):\n        self.edges[a].append((b, w))\n        self.edges[b].append((a, w))\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 6') == '12'\nassert solution('4 4 6') == '9'\nassert solution('3 4 7') == '15'\nassert solution('5 6 8') == '18'\nassert solution('2 4 5') == '10'"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n2 3 1\\n3 1 2\\n4 2 4\") == \"4\"\nprint('Test 1 OK')\n\nassert solution(\"1 2 3\\n2 3 1\\n3 1 2\\n4 2 4\") == \"4\"\nprint('Test 2 OK')\n\nassert solution(\"1 2 3\\n2 3 1\\n3 1 2\\n4 2 4\") == \"4\"\nprint('Test 3 OK')\n\nassert solution(\"1 2 3\\n2 3 1\\n3 1 2\\n4 2 4\") == \"4\"\nprint('Test 4 OK')\n\nassert solution(\"1 2 3\\n2 3 1\\n3 1 2\\n4 2 4\") == \"4\"\nprint('Test 5 OK')"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\nassert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\nassert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\nassert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\nassert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\\n2 3 2\") == \"4\"\nassert solution(\"1 2 3\\n2 3 1\") == \"4\"\nassert solution(\"1 2 3\\n2 1 2\") == \"4\"\nassert solution(\"1 2 3\\n2 2 2\") == \"3\"\nassert solution(\"1 2 3\\n2 3 2\\n3 4 2\") == \"4\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D H3e2l3o1W1o3r4l2d1!2') == 'HHHeellloWooorrrrlld!!'\nprint('Passed')\n\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D HHHeellloWooorrrrlld!!\") == \"HHHeelllooorrrrlld!!\"\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D 3eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') == 'e' * 99 + '2'\nassert solution('D 4eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') == 'e' * 99 + '2'\nassert solution('D 5eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') == 'e' * 99 + '2'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D HHHlloWooorrlld!!1\") == \"HHHlloWooorrlld!!1\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\n\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 'Alice'\nassert solution('4') == 'Alice'\nassert solution('6') == 'Bob'\nassert solution('8') == 'Bob'\nassert solution('10') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\nassert solution(\"6\") == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"4\") == \"Alice\"\nassert solution(\"8\") == \"Alice\"\n\"\"\"\n\nimport sys\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"4\") == \"Alice\"\nassert solution(\"5\") == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"10\") == \"Alice\"\nassert solution(\"99\") == \"Alice\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"5\") == \"Bob\"\nassert solution(\"8\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"4\") == \"Alice\"\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('5\\n') == 'Alice'\nassert solution('4\\n') == 'Bob'\nassert solution('7\\n') == 'Bob'\nassert solution('8\\n') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2''') == 'Alice'\nassert solution('''6''') == 'Bob'\n\n'''\nAlice and Bob play the following game.\n\nAlice will split the given branch into two parts, say, A and B.\nBob will split the given branch into two parts, say, C and D.\n\nWe will call A1 the piece that Alice breaks off, and B1 the piece that Bob breaks off.\n\nNow the game can be summarized as:\n\nAlice will be awarded if either:\n\nB1=A1 or B1=A1\u22121,\nor\nB1=C1 or B1=C1\u22121.\nBob will be awarded if either:\n\nA1=B1 or A1=B1\u22121,\nor\nA1=D1 or A1=D1\u22121.\n\nGiven the length of the branch, find and print the name of the winner: Alice or Bob. If there are multiple valid solutions, print any of them.\n\n'''\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('6 4 6') == '6+4=8'\nassert solution('3 5 7') == '3+5=8'\nassert solution('8 1 1') == '8=1'\nassert solution('8 9 9') == '8=9'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\nassert solution('5 3 8') == '5 * 3 = 15'\nassert solution('5 3 8') == '5 - 3 = 2'\nassert solution('5 3 8') == '5 / 3 = 1'\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"3 5 6\") == \"3+5=8\"\n\"\"\"\n\nprint(*(int(i) for i in input().split()), *[\"=\", \"+\", \"-\", \"*\", \"/\"])"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 2\") == \"5-3=2\"\nassert solution(\"5 5 8\") == \"5*5=8\"\nassert solution(\"5 2 1\") == \"5/2=2.5\"\nassert solution(\"5 5 3\") == \"5/5=1\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 4, 2) == '3+2=5'\nassert solution(1, 2, 3) == '1+2=3'\nassert solution(1, 4, 1) == '1+4=5'\nassert solution(2, 1, 3) == '2+1=3'\nassert solution(5, 3, 8) == '5+3=8'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 8\") == \"5 + 3 = 8\"\nassert solution(\"1 5 3\") == \"1 - 5 = -4\"\nassert solution(\"8 8 8\") == \"8 * 8 = 64\"\nassert solution(\"5 5 5\") == \"5 / 5 = 1\"\nassert solution(\"3 6 9\") == \"3 - 6 = -3\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('1 2 3') == '1+2=3'\nassert solution('2 2 3') == '2*2=4'\nassert solution('2 3 5') == '2*3=6'\nassert solution('4 2 5') == '4-2=2'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 9\") == \"5+3=9\"\nassert solution(\"5 9 3\") == \"5+9=3\"\nassert solution(\"5 9 8\") == \"5+9=8\"\nassert solution(\"5 5 9\") == \"5=5+9\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 3 8\"\n) == \"5+3=8\"\n\nassert solution(\n    \"3 5 6\"\n) == \"3-5=2\"\n\nassert solution(\n    \"1 2 3\"\n) == \"1+2=3\"\n\nassert solution(\n    \"2 1 3\"\n) == \"2+1=3\"\n\nassert solution(\n    \"4 5 6\"\n) == \"4*5=20\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('1 2 3') == '1+2=3'\nassert solution('2 5 7') == '2+5=7'\nassert solution('100 500 600') == '100+500=600'\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('7\\n3 2 2 1 1 3 1') == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\n\nassert solution('10\\n2 1 1 1 1 1 1 1 1') == 'NO'\n\nassert solution('5\\n2 3 1 1') == 'NO'\n\nassert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\n\nassert solution('8\\n4 2 2 1 1 1 3 1') == 'YES'"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"8\\n3 2 1 3 1 1 1 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == 'YES'\nassert solution(\"8\\n1 3 1 1 3 1 1\") == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n4 1 3 1 1 4') == 'NO'"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"NO\"\nassert solution(\"6 4 4 2 1 1\") == \"NO\"\nassert solution(\"3 3 2 2 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1 2 1\") == 'YES'\nassert solution(\"2 2 1 1 2 1 1\") == 'NO'\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nghost\\nmummy\\nwitch\\ndemon\") == \"ghost\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\ndemon\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"demon\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"10\\ndemon\\nmummy\\nwitch\\nghost\\nghost\\nghost\\nghost\") == \"mummy\"\nassert solution(\"10\\ndemon\\nmummy\\nwitch\\nghost\\nghost\\nghost\\nghost\") == \"mummy\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'a'\nassert solution('aab') == 'ab'\nassert solution('abb') == 'ab'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nghost\") == \"ghost\"\nassert solution(\"2\\nmummy\\nwitch\") == \"mummy,witch\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('6\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\n') =='mummy'\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def getMaxCategory(self, stdin):\n        answer = collections.defaultdict(int)\n\n        for _ in range(int(stdin)):\n            cate = input()\n            answer[cate] += 1\n\n        answer = sorted(answer.items(), key=lambda x: x[1], reverse=True)\n\n        return answer[0][0]"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nghost\") == \"ghost\"\nassert solution(\"5\\nghost\\nghost\\nmummy\\nwitch\\ndemon\") == \"mummy\"\nassert solution(\"10\\nghost\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"20\\nghost\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\nghost\\nghost\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"50\\nghost\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\nghost\\nghost\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\nghost\\nghost\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\\nmummy\\nwitch\\nghost\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\n\"\"\"\n\n\"\"\"\nReturns the max of a list of numbers.\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch'\nassert solution('6\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch\\ndemon\\ndemon'\nassert solution('7\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon') == 'demon\\ndemon\\ndemon'\nassert solution('8\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch\\ndemon\\ndemon'\nassert solution('9\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon') =='mummy\\nghost\\nwitch\\ndemon\\ndemon'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch'\nassert solution('6\\nghost\\nmummy\\nwitch\\ndemon\\nghost\\ndemon\\ndemon\\n') == 'ghost\\nmummy\\nwitch\\ndemon'\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('ghost') == 'ghost'\nassert solution('mummy') =='mummy'\nassert solution('witch') == 'witch'\nassert solution('demon') == 'demon'\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\n\"\n                 \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n                 \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n                 \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n                 \"George_Winston Summer Lullaby 215\") == \"\"\"Artist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\"\"\"\n\n\"\"\"\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\"\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"Artist Album Song_Title Length_seconds\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\nGeorge_Winston Summer Lullaby 215\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\"\"\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\"\"\".strip()\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Tchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n'''\n\nassert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n'''"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n\"\n\nSample Input:\nAlbum Song_Title Length_seconds Artist\n3\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n3\nAlbum\nSong_Title\nLength_seconds\nSample Output:\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\n\nAlbum Song_Title Length_seconds Artist\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\n\nAlbum Song_Title Length_seconds Artist\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\n\nAlbum Song_Title Length_seconds Artist\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\n\nAlbum Song_Title Length_seconds Artist\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\"\"\"\n\n\"\"\"\nGiven a list of integers, print the list in reverse order.\n\n-----Input-----\nThe first line contains a list of integers separated by a space.\n\n-----Output-----\nPrint the list in reverse order, one integer per line.\n\n-----Examples-----\nSample Input:\n1 2 3 4 5\nSample Output:\n5 4 3 2 1\n\"\"\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7\\n5 5 5 5 5 5 5\") == \"YES\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 3 8\n
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5 5 5 5 5 5\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('5 5 5 5 5 5\\n5 5 5 5 5 5 5') == 'NO'\n\nSample Input:\n1 1 1\n1\nSample Output:\nYES\n\nSolution:"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 6 6 6 6 6 6\") == \"NO\"\nassert solution(\"2 10 7\\n5 5 6 6 5 5 6\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 5 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5\\n5 5 5 5 5 5 5') == 'NO'\nassert solution('2 10 7\\n10 10 10 10 10 10') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5\\n5 5 5 5 5 5 5') == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('5 5 7\\n5 5 5 5 5 5') == 'NO'\nassert solution('5 5 7\\n5 5 5 5 5') == 'YES'\nassert solution('5 5 7\\n5 5 5 5') == 'NO'\nassert solution('5 5 7\\n5 5 5') == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 6\\n5 5 5 5 5 5') == 'YES'\nassert solution('2 10 5\\n5 5 5 5') == 'YES'\nassert solution('2 10 4\\n5 5 5') == 'YES'\nassert solution('2 10 3\\n5 5 5') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5 5 5 5\\n1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"2 10 7\\n1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5 5 5 5\\n1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\n\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\n\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\n\nassert solution('''2 10 7\n5 5 5 5 5 5''') == 'NO'\n\nassert solution('''2 10 7\n5 5 5 5 5''') == 'NO'"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\") == \"66.666667 50.000000\"\n\"\"\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == 'Not Effective'\nassert solution(\"10\\nYYYY\\nNNNN\\nYYYY\\nYYYY\\nYYYY\\nYYNN\\nYYYY\\nYYYY\\nYYNN\") == '100.000000'\nassert solution(\"10\\nNNNN\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY\") == '100.000000'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667 50.000000\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"66.666667\\n50.000000\"\n\n\"\"\"\n\nnum = int(stdin.readline())\n\nvaccinated = []\nunvaccinated = []\nA = []\nB = []\nC = []\n\nfor i in range(num):\n    row = stdin.readline()\n    if row[0] == \"Y\":\n        vaccinated.append(i)\n    else:\n        unvaccinated.append(i)\n    if row[1] == \"Y\":\n        A.append(i)\n    if row[2] == \"Y\":\n        B.append(i)\n    if row[3] == \"Y\":\n        C.append(i)\n\nv_size = len(vaccinated)\nu_size = len(unvaccinated)\n\nA_size = len(A)\nB_size = len(B)\nC_size = len(C)"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nNYNY\\nNNYY\\nNYYY\\nYYNN') == '66.666667'\n\nassert solution('3\\nNYNN\\nYYNN\\nYYNN') == '50.000000'\n\nassert solution('10\\nYYNN\\nYYYN\\nYYYY\\nYYNN\\nNNYY\\nYYYY\\nYYYY\\nYYYY\\nYYYY') == 'Not Effective'\n\nassert solution('3\\nYYNN\\nYYNN\\nYYNN') == '50.000000'\n\nassert solution('8\\nYYNN\\nYYNN\\nYYYY\\nYYNN\\nNNYY\\nYYYY\\nYYYY') == 'Not Effective'"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nNYNY\\nNNYY\\nYYNN\\nYYNY\") == \"66.666667\"\nassert solution(\"7\\nYNNNN\\nNNYYY\\nYYNNN\\nYNYNY\\nYYYNN\\nYYYYN\") == \"50.000000\"\nassert solution(\"5\\nNNN\\nYNNN\\nYYYY\\nYYNN\") == \"Not Effective\"\nassert solution(\"8\\nNNNN\\nNNNN\\nNNNN\\nNNYY\\nNNNN\\nNNYY\\nYNNN\\nYYYY\") == \"Not Effective\"\nassert solution(\"6\\nNNNY\\nNNYY\\nNNNN\\nNNNN\\nYYYY\") == \"Not Effective\"\n\"\"\"\nimport os\nimport sys\nimport time"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY''') == '''Not Effective\n66.666667\n50.000000'''\n\nimport numpy as np"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"Not Effective\"\nassert solution(\"5\\nNYYY\\nNNNY\\nYYYN\\nYYNY\") == \"66.666667\"\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY\\n\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"10\\nNNYY\\nNYNN\\nYYNN\\nYYYY\\nNYYY\\nNNNN\\nYYYN\\nYYNN\\nYYNN\\nYYYY\\n\") == \"Not Effective\\n50.000000\\n66.666667\"\nassert solution(\"10\\nNNNN\\nYYNN\\nYYYY\\nYNNN\\nYYYY\\nNNNN\\nYYNN\\nYYNN\\nYYYY\\n\") == \"Not Effective\\n50.000000\\n66.666667\"\n\nimport sys"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('NYNY') == 'Not Effective'\nassert solution('NNYY') == '66.666667'\nassert solution('NYYY') == '50.000000'\nassert solution('NYYN') == '66.666667'\nassert solution('NNNY') == 'Not Effective'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BAACC\") == \"3\", \"WA\"\n\n-----Test Input-----\n1\nA\n-----Test Output-----\n1\nA\n\"\"\"\n\nN = int(input())\n\nletters = input()"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"BAABC\") == \"Goran\"\nassert solution(\"AABAAB\") == \"Adrian\"\nassert solution(\"AAAAAC\") == \"Adrian\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('BAACC') == '3'\nassert solution('ABCAB') == '2'\nassert solution('BCBA') == '1'"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BAACC\") == 3\nassert solution(\"AAAAA\") == 1\nassert solution(\"ABABC\") == 3\nassert solution(\"CABAB\") == 3\nassert solution(\"ABAAB\") == 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BAACC\") == \"2\"\nassert solution(\"BAABC\") == \"Bruno\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"ABCCC\") == \"Adrian\"\n\"\"\"\n\nn = int(input())\na = list(input())\ncorrect = [0, 0, 0]\nfor i in range(n):\n    if a[i] == \"A\":\n        correct[0] += 1\n    elif a[i] == \"B\":\n        correct[1] += 1\n    else:\n        correct[2] += 1\nmax_correct = max(correct)\nresult = []\nfor i in range(3):\n    if correct[i] == max_correct:\n        result.append(i + 1)\nprint(max_correct)\nfor i in result:\n    print(i, end=\" \")\n\n\"\"\"\nShort version\nimport collections\nn = int(input())\na = input()\ncounts = collections.Counter(a)\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BAACC') == 3\nassert solution('ABCBA') == 3\nassert solution('ABCAB') == 3\nassert solution('BABACC') == 3\nassert solution('ABCBC') == 2"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BAACC') == 'Goran'\nassert solution('ABBAC') == 'Adrian'\nassert solution('ACACC') == 'Adrian'\nassert solution('CCAABB') == 'Bruno'\nassert solution('ACCCAA') == 'Adrian'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BAACC\") == '3'\nassert solution(\"BCCA\") == '2'\nassert solution(\"CABB\") == '2'\nassert solution(\"ABBB\") == '1'\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\ns = input()\n\nc = Counter(s)\nb = sorted(c.values())\nmax_occur = b.pop()\n\nm = len([k for k, v in c.items() if v == max_occur])\n\nboys = [k for k, v in c.items() if v == max_occur]\n\nprint(max_occur)\nprint(*sorted(boys), sep=\"\\n\")\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AB') == 'A'\nassert solution('ABC') == 'A'\nassert solution('B') == 'A'\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n\n\n\"\"\"\nThe problem is to find the maximum sum of score you can achieve in a game. You will play the game till you score atleast N.\n\nInput :\nFirst line contains T, the number of test cases.\nNext T lines contains N, the number of points scored by you.\n\nOutput :\nPrint the maximum score you can score.\n\nConstraints :\n1 <= T <= 105\n1 <= N <= 105\n\nExample :\nInput :\n2\n5\n10\n2\n100\nOutput :\n105\n110\n\"\"\"\n\n\"\"\"\n1 <= T <= 105\n1 <= N <= 105\n\nT = int(input())\n\nfor i in range(T):\n    N = int(input())\n    if N >= 105:\n        print(N)\n    else:\n        print(N+105)\n\"\"\"\n\n\"\"\"\nFind the sum of all the numbers that can be written as the sum of fifth powers of their digits.\n\nInput :\nFirst line contains T, the number of test cases.\nEach line contains one integer N, the number of which you have to find the sum of its digits.\n\nOutput :\nPrint the sum of all the numbers of the above category.\n\nConstraints :\n1 <= T <= 105\n1 <= N <= 1018\n\nExample :\nInput :\n3\n1\n145\n1234\nOutput :\n145\n10\n145\n\"\"\"\n\n\"\"\"\n1 <= T <= 105\n1 <= N <= 1018\n\nT = int(input())\n\nfor i in range(T):\n    N = int(input())\n    s = 0\n    while N > 0:\n        s += (N % 10)**5\n        N //= 10\n    print(s)\n\"\"\"\n\n\n\"\"\"\nThe challenge is to find the sum of the digits of the number 2^(n) + 3^(n) + 5^(n) + 7^(n) + \u2026 + (2*n-1)^(n).\n\nInput :\nFirst line contains T, the number of test cases.\nEach line contains one integer N.\n\nOutput :\nFor each test case, print the sum of digits of 2^(n) + 3^(n) + 5^(n) + 7^(n) + \u2026 + (2*n-1)^(n).\n\nConstraints :\n1 <= T <= 105\n0 <= N <= 105\n\nExample :\nInput :\n2\n4\n5\nOutput :\n10\n22\n\"\"\"\n\n\"\"\"\nInput :\n2\n4\n5\nOutput :\n14\n35\n\"\"\"\n\n\"\"\"\n1 <= T <= 105\n1 <= N <= 105\n\nT = int(input())\n\nfor i in range(T):\n    N = int(input())\n    s = 0\n    while N > 0:\n        s += (N % 10)**5\n        N //= 10\n    print(s)\n\"\"\"\n\n\"\"\"\nFind the sum of all the numbers that can be written as the sum of fifth powers of their digits.\n\nInput :\nFirst line contains T, the number of test cases.\nEach line contains one integer N, the number of which you have to find the sum of its digits.\n\nOutput :\nPrint the sum of all the numbers of the above category.\n\nConstraints :\n1 <= T <= 105\n1 <= N <= 1018\n\nExample :\nInput :\n3\n1\n145\n1234\nOutput :\n145\n10\n145\n\"\"\"\n\n\"\"\"\n1 <= T <= 105\n1 <= N <= 1018\n\nT = int(input())\n\nfor i in range(T):\n    N = int(input())\n    s = 0\n    while N > 0:\n        s += (N % 10)**5\n        N //= 10\n    print(s)\n\"\"\"\n\n\"\"\"\nFind the sum of the digits of the number 2^(n) + 3^(n) + 5^(n) + 7^(n) + \u2026 + (2*n-1)^(n).\n\nInput :\nFirst line contains T, the number of test cases.\nEach line contains one integer N.\n\nOutput :\nFor each test case, print the sum of digits of 2^(n) + 3^(n) + 5^(n) + 7^(n) + \u2026 + (2*n-1)^(n).\n\nConstraints :\n1 <= T <= 105\n0 <= N <= 105\n\nExample :\nInput :\n2\n4\n5\nOutput :\n10\n22\n\"\"\"\n\n\"\"\"\n1 <= T <= 105\n1 <= N <= 105\n\nT = int(input())\n\nfor i in range(T):\n    N = int(input())\n    s = 0\n    while N > 0:\n        s += (N % 10)**5\n        N //= 10\n    print(s)\n\"\"\"\n\n\"\"\"\nThe problem is to find the minimum number of coins needed to get a total of N from a set of coins.\n\nInput :\nFirst line contains T, the number of test cases.\nEach test case contains two lines of input. First line contains N, the total number of pennies"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1\") == (3, 543)\n\"\"\"\n\nimport re"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1\") == (3, 543)\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right''') == '3 543'\nassert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1''') == '3 543'\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n-1''') == '4 502'\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n-1''') == '4 502'\n\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\nprint(solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\"))\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\"\"\") == \"3 543\"\nassert solution(\"\"\"7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\"\"\") == \"4 502\"\nassert solution(\"\"\"2 A wrong\n3 A right\n3 B wrong\n4 A wrong\n-1\"\"\") == \"1 0\"\nassert solution(\"\"\"2 A wrong\n3 A right\n3 B wrong\n4 A wrong\n-1\"\"\") == \"1 0\"\nassert solution(\"\"\"2 A wrong\n3 A right\n3 B wrong\n4 A wrong\n-1\"\"\") == \"1 0\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1') == (3, 543)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1') == (\n    '3 543'\n)\nprint(solution('3 E right\\\\n10 A wrong\\\\n30 C wrong\\\\n50 B wrong\\\\n100 A wrong\\\\n200 A right\\\\n250 C wrong\\\\n300 D right\\\\n-1'))"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == '3 543'\n\n----Solution----\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1') == '3 543'\n\"\"\"\n\nfrom itertools import groupby\nfrom typing import List, Tuple\nimport re\n\nSTART, NUM, LET, RES = range(4)"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\n\"\"\"\nimport sys\nimport ast"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_one) == test_output_one\nassert solution(test_input_two) == test_output_two\n\"\"\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == 5\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\n\"\"\"\nimport re"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\"\"\"\nimport math\nfrom copy import deepcopy\nfrom itertools import permutations\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n\n\"\"\"\nfrom numpy import array\nfrom itertools import product\nfrom functools import reduce"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n') == 5\n\"\"\"\n\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\n''') == '5'\nprint('Test passed\\n')\n\n-----Instructions-----\nIn a hopscotch game, your objective is to hop from tile to tile in a single direction (up, down, left, or right). You can hop any number of tiles in a single direction. You can hop on any tile, and you can hop on a tile if and only if the tile has not been visited before.\n\nNote that the hopscotch game is played on a grid with dimensions $n \\times n$ with $1 \\le n \\le 50$. The tile numbering is assumed to begin at $1$, not at $0$.\n\nYou are given a starting position $(x_1,y_1)$ on the grid, and you want to visit all the tiles at least once. Your goal is to hop as few steps as possible, i.e., to hop from $(x_1,y_1)$ to $(x_n,y_n)$ for some $n \\ge 1$, and to return to $(x_1,y_1)$.\n\nNote that you can hop in any direction, i.e., a step on the x-axis or the y-axis.\n\nFor example, on the grid above, you can hop from $(3,2)$ to $(3,4)$ in a total of three steps, as there are no obstacles on the way. On the other hand, there is a wall on the $(5,2)$ tile, so you have to hop from $(3,2)$ to $(4,2)$ instead. On the other hand, it is not possible to hop from $(5,2)$ to $(5,3)$.\n\nGiven the starting position $(x_1,y_1)$ and the dimensions of the hopscotch game, print a single integer \u2014 the minimum number of steps that you need to hop from $(x_1,y_1)$ to reach any tile, or $-1$ if you cannot reach any tile.\n\n-----Constraints-----\nThe starting position $(x_1,y_1)$ is always $(1,1)$.\n\nThe dimensions of the hopscotch game will always be a positive integer between $1 \\le n \\le 50$.\n\nEach of the next $n$ lines will contain $n$ space-separated integers $x_i$ ($1 \\le x_i \\le k$). This is the starting position of the hopscotch game.\n\nSample Input:\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\nSample Output:\n5\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 7') == 'gunilla has a point'\nassert solution('5 5') == 'edward is right'\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"\nassert solution(\"4\\n1 1\\n2 2\\n3 3\\n4 4\") == \"edward is right\"\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\n\nassert solution(\"2\\n5 5\") == \"edward is right\"\n\nassert solution(\"2\\n0 0\") == \"edward is right\"\n\nassert solution(\"2\\n5 6\") == \"edward is wrong\"\n\nassert solution(\"2\\n0 0\") == \"edward is right\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n1 7\n5 5''') == 'gunilla has a point'\n\"\"\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\""
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7\\n5 5\") == 'gunilla has a point'\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1 7') == 'gunilla has a point'\nassert solution('2\\n5 5') == 'edward is right'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"edward is right\"\nassert solution(\"1 7\") == \"gunilla has a point\"\n\n\"\"\"\n\nfrom typing import List\nfrom unittest import TestCase\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin)\n        intervals = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n        events = []\n\n        for interval in intervals:\n            events.append((interval[0], 1))\n            events.append((interval[1], -1))\n\n        events.sort()\n\n        sum = 0\n        for _, change in events:\n            sum += change\n\n        if sum!= 0:\n            return \"edward is right\"\n        return \"gunilla has a point\"\n\nclass TestSolution(TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"2\\n1 7\\n5 5\"), \"gunilla has a point\")\n\n    def test_solution_2(self):\n        self.assertEqual(solution(\"3\\n1 7\\n5 5\"), \"edward is right\")\n\n    def test_solution_3(self):\n        self.assertEqual(solution(\"3\\n1 7\\n5 3\"), \"edward is right\")\n\n    def test_solution_4(self):\n        self."
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"\nassert solution(\"3\\n3 5\\n6 10\\n6 9\") == \"edward is right\"\n\nSample Output:\ngunilla has a point\nedward is right\n\n\"\"\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 11\\n\"\n        \"t 1 10\\n\"\n        \"t 1 2\\n\"\n        \"t 1 3\\n\"\n        \"s 1\\n\"\n        \"s 2\\n\"\n        \"s 3\\n\"\n        \"s 4\\n\"\n        \"t 5 6\\n\"\n        \"s 5\\n\"\n        \"s 6\\n\"\n        \"s 10\\n\") == [4, 4, 4, 1, 2, 2, 4, 1]\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 11\\n't 1 10\\n's 1\\n's 2\\n's 3\\n't 5 6\\n's 5\\n's 6\\n's 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == [4, 4, 4, 1, 2, 2, 4, 4, 4, 4]\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 11\\n\"\n                 \"t 1 10\\n\"\n                 \"t 1 2\\n\"\n                 \"t 1 3\\n\"\n                 \"s 1\\n\"\n                 \"s 2\\n\"\n                 \"s 3\\n\"\n                 \"s 4\\n\"\n                 \"t 5 6\\n\"\n                 \"s 5\\n\"\n                 \"s 6\\n\"\n                 \"s 10\") == \"4\"\n\nassert solution(\"10 11\\n\"\n                 \"t 1 10\\n\"\n                 \"t 1 2\\n\"\n                 \"t 1 3\\n\"\n                 \"s 1\\n\"\n                 \"s 2\\n\"\n                 \"s 3\\n\"\n                 \"s 4\\n\"\n                 \"t 5 6\\n\"\n                 \"s 5\\n\"\n                 \"s 6\\n\"\n                 \"s 10\") == \"4\"\n\n\"\"\"\n\"\"\"\nSolution 1\n\"\"\"\n\nn, q = map(int, stdin.readline().split())\nfor i in range(q):\n    t, x, y = stdin.readline().split()\n    if t == 't':\n        x, y = int(x), int(y)\n        n += (x ^ y)\n    else:\n        x = int(x)\n        print(n & 1 << x - 1)\n\n\"\"\"\nSolution 2\n\"\"\"\nn, q = map(int, input().split())\nl = []\nfor i in range(q):\n    t, x, y = input().split()\n    if t == 't':\n        l.append([x, y])\n    else:\n        x = int(x)\n        print(sum([1 for i, j in l if i == x or j == x]))\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '4'\nassert solution('3 2 1') == '3'\nassert solution('5 2 1') == '2'\nassert solution('5 3 2') == '1'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 11\\n\"t 1 10\"\\n\"t 1 2\"\\n\"t 1 3\"\\n\"s 1\"\\n\"s 2\"\\n\"s 3\"\\n\"s 4\"\\n\"t 5 6\"\\n\"s 5\"\\n\"s 6\"\\n\"s 10\"\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nassert solution('10 11\\n\"t 1 10\"\\n\"t 1 2\"\\n\"t 1 3\"\\n\"s 1\"\\n\"s 2\"\\n\"s 3\"\\n\"s 4\"\\n\"t 5 6\"\\n\"s 5\"\\n\"s 6\"\\n\"s 10\"\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\nn, m = map(int, input().split())\n\nfor _ in range(m):\n    type, *args = input().split()\n    if type =='s':\n        print(n - int(args[0]))\n    else:\n        i, j = map(int, args)\n        n = max(n - j, 0) + max(i - 1, 0)\nprint(n)\n\n'''\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"t 4 5\\n\"\n\"t 4 6\\n\"\n\"s 4\\n\"\n\"t 4 7\\n\"\n\"s 5\\n\"\n\"t 4 8\\n\"\n\"s 6\\n\"\n\"t 4 9\\n\"\n\"s 7\\n\"\n\"t 5 10\\n\"\n\"s 8\\n\"\n\"t 5 11\\n\"\n\"s 9\\n\"\n\"t 6 12\\n\"\n\"s 10\\n\"\n\"t 6 13\\n\"\n\"s 11\\n\"\n\"t 7 14\\n\"\n\"t 7 15\\n\"\n\"t 7 16\\n\"\n\"t 7 17\\n\"\n\"t 7 18\\n\"\n\"t 7 19\\n\"\n\"t 7 20\\n\"\n\"s 12\\n\"\n\"s 13\\n\"\n\"t 8 21\\n\"\n\"t 8 22\\n\"\n\"t 8 23\\n\"\n\"s 14\\n\"\n\"s 15\\n\"\n\"t 9 24\\n\"\n\"t 9 25\\n\"\n\"t 9 26\\n\"\n\"s 16\\n\"\n\"t 9 27\\n\"\n\"s 17\\n\"\n\"t 9 28\\n\"\n\"s 18\\n\"\n\"t 9 29\\n\"\n\"s 19\\n\"\n\"t 10 30\\n\"\n\"s 20\\n\"\n\"t 10 31\\n\"\n\"s 21\\n\"\n\"t 10 32\\n\"\n\"s 22\\n\"\n\"t 10 33\\n\"\n\"s 23\\n\"\n\"t 10 34\\n\"\n\"s 24\\n\"\n\"t 10 35\\n\"\n\"s 25\\n\"\n\"t 10 36\\n\"\n\"s 26\\n\"\n\"t 10 37\\n\"\n\"s 27\\n\"\n\"t 10 38\\n\"\n\"s 28\\n\"\n\"t 10 39\\n\"\n\"s 29\\n\"\n\"t 10 40\\n\"\n\"s 30\\n\"\n\"t 10 41\\n\"\n\"s 31\\n\"\n\"t 10 42\\n\"\n\"s 32\\n\"\n\"t 10 43\\n\"\n\"s 33\\n\"\n\"t 10 44\\n\"\n\"s 34\\n\"\n\"t 10 45\\n\"\n\"s 35\\n\"\n\"t 10 46\\n\"\n\"s 36\\n\"\n\"t 10 47\\n\"\n\"s 37\\n\"\n\"t 10 48\\n\"\n\"s 38\\n\"\n\"t 10 49\\n\"\n\"s 39\\n\"\n\"t 10 50\\n\"\n\"s 40\\n\"\n\"t 10 51\\n\"\n\"s 41\\n\"\n\"t 10 52\\n\"\n\"s 42\\n\"\n\"t 10 53\\n\"\n\"s 43\\n\"\n\"t 10 54\\n\"\n\"s 44\\n\"\n\"t 10 55\\n\"\n\"s 45\\n\"\n\"t 10 56\\n\"\n\"s 46\\n\"\n\"t 10 57\\n\"\n\"s 47\\n\"\n\"t 10 58\\n\"\n\"s 48\\n\"\n\"t 10 59\\n\"\n\"s 49\\n\"\n\"t 10 60\\n\"\n\"s 50\\n\"\n\"t 10 61\\n\"\n\"s 51\\n\"\n\"t 10 62\\n\"\n\"s 52\\n\"\n\"t 10 63\\n\"\n\"s 53\\n\"\n\"t 10 64\\n\"\n\"s 54\\n\"\n\"t 10 65\\n\"\n\"s 55\\n\"\n\"t 10 66\\n\"\n\"s 56\\n\"\n\"t 10 67\\n\"\n\"s 57\\n\"\n\"t 10 68\\n\"\n\"s 58\\n\"\n\"t 10 69\\n\"\n\"s 59\\n\"\n\"t 10 70\\n\"\n\"s 60\\n\"\n\"t 10 71\\n\"\n\"s 61\\n\"\n\"t 10 72\\n\"\n\"s 62\\n\"\n\"t 10 73\\n\"\n\"s 63\\n\"\n\"t 10 74\\n\"\n\"s 64\\n\"\n\"t 10 75\\n\"\n\"s 65\\n\"\n\"t 10 76\\n\"\n\"s 66\\n\"\n\"t 10 77\\n\"\n\"s 67\\n\"\n\"t 10 78\\n\"\n\"s 68\\n\"\n\"t 10 79\\n\"\n\"s 69\\n\"\n\"t 10 80\\n\"\n\"s 70\\n\"\n\"t 10 81\\n\"\n\"s 71\\n\"\n\"t 10 82\\n\"\n\"s 72\\n\"\n\"t 10 83\\n\"\n\"s 73\\n\"\n\"t 10 84\\n\"\n\"s 74\\n\"\n\"t 10 85\\n\"\n\"s 75\\n\"\n\"t 10 86\\n\"\n\"s 76\\n\"\n\"t 10 87\\n\"\n\"s 77\\n\"\n\"t 10 88\\n\"\n\"s 78\\n\"\n\"t 10 89\\n\"\n\"s 79\\n\"\n\"t 10 90\\n\"\n\"s 80\\n\"\n\"t 10 91\\n\"\n\"s 81\\n\"\n\"t 10 92\\n\"\n\"s 82\\n\"\n\"t 10 93\\n\"\n\"s 83\\n\"\n\"t 10 94\\n\"\n\"s 84\\n\"\n\"t 10 95\\n\"\n\"s 85\\n\"\n\"t 10 96\\n\"\n\"s 86\\n\"\n\"t 10 97\\n\"\n\"s 87\\n\"\n\"t 10 98\\n\"\n\"s 88\\n\"\n\"t 10 99\\n\"\n\"s 89\\n\"\n\"t 10 100\\n\"\n\"s 90\\n\"\n\"t 11 1\\n\"\n\"t 11 2\\n\"\n\"t 11 3\\n\"\n\"t 11 4\\n\"\n\"t 11 5\\n\"\n\"t 11 6\\n\"\n\"t 11 7\\n\"\n\"t 11 8\\n\"\n\"t 11 9\\n\"\n\"t 11 10\\n\"\n\"s 91\\n\"\n\"s 92\\n\"\n\"s 93\\"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"t 1 10\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n\" * 10\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('hello world') == 'dlrow olleh'\nassert solution('hello world') == 'dlrow olleh'\nassert solution('hello world') == 'dlrow olleh'\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\nprint(\"Test 1 OK\")\n\nassert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\nprint(\"Test 2 OK\")\n\nassert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\nprint(\"Test 3 OK\")\n\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016'"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2015\\n1982\\n2016\\n'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2016\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\") == \"2015\\n1982\\n2016\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    4\n    Iceland 2016\n    Sweden 2015\n    Iceland 1982\n    Norway 1999\n    3\n    Sweden 1\n    Iceland 1\n    Iceland 2\n    '''\n) == '''\n    2016\n    1982\n    2016\n    '''\n)\n\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\nSample Input:\n5\nKorea 2017\nJapan 2018\nKorea 2016\nJapan 2019\nChina 2020\n3\nKorea 1\nKorea 2\nKorea 3\nSample Output:\n2017\n2016\n\"\"\"\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n\\n') == ''\nassert solution('Iceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n\\n3\\nIceland 1\\nIceland 2\\nIceland 3\\n\\n') == '2015\\n1982\\n2016\\n'\nassert solution('Iceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n\\n3\\nIceland 1\\nIceland 2\\nIceland 3\\n\\n') == '2016\\n2015\\n2014\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(input())\nprint(str(solution(str(input()))))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n''') == '2015\\n1982\\n2016\\n'\nassert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n''') == '2016\\n1982\\n2016\\n'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2\n''') == '2015\\n1982\\n2016\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\nimport string\nimport itertools\n\ns = stdin.strip()\ncount = 0"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\n\nimport itertools\nfrom typing import List\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"abc\") == 1\nassert solution(\"a\") == 0\nassert solution(\"\") == 0\nassert solution(\"a\" * 100) == 1\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n\n-----Notes-----\nKeep the input in a single string.\nYou may assume the input does not have any punctuation.\nDo not assume that the input string is in a valid English text.\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n'''\n) == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''\nprint(\"All tests passed.\")\n\n---\n---\n\nIn this mission, we will learn how to work with strings.\n\nWe'll learn several important string operations, such as indices, slicing, etc.\n\nLet's start with a brief explanation of the operations and main string methods.\n\nstring = \"text\"\n\nstring[index] - returns the character of the string at the specified index.\n\nIf the index is not a valid index (index < 0 or index >= len(string)), the function should return the empty string.\n\nindex = -1\nstring[index]\nResult:\n\n-1\n\nindex = 1\nstring[index]\nResult:\n\nt\n\nindex = 100\nstring[index]\nResult:\n\n''\n\nstring[index] = 'A'\nstring\nResult:\n\n'text'\n\nstring[index] = 'A'\nstring\nResult:\n\n'text'\n\nstring = \"text\"\n\nlen(string) - returns the length of the string.\n\nstring = \"text\"\nlen(string)\nResult:\n\n4\n\nstring[0:index] - returns a substring from the start of the string up to the specified index.\n\nIf the specified index is not a valid index (index < 0), the function should return an empty substring.\n\nstring = \"text\"\nstring[0:4]\nResult:\n\n'text'\n\nstring[0:-1] - returns a substring from the start of the string up to the last index.\n\nIf the specified index is not a valid index (index < 0), the function should return an empty substring.\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[4:0]\nResult:\n\n''\n\nstring[:] - returns a substring from the start of the string up to the last index.\n\nIf the specified index is not a valid index (index < 0), the function should return an empty substring.\n\nstring = \"text\"\nstring[0:4]\nResult:\n\n'text'\n\nstring[1:4]\nResult:\n\n'tex'\n\nstring[0:]\nResult:\n\n'text'\n\nstring[:-2]\nResult:\n\n'text'\n\nstring[4:]\nResult:\n\n'tex'\n\nstring[:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[1:-1]\nResult:\n\n'tex'\n\nstring[1:4]\nResult:\n\n'tex'\n\nstring[0:]\nResult:\n\n'text'\n\nstring[:-2]\nResult:\n\n'text'\n\nstring[4:]\nResult:\n\n'tex'\n\nstring[:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[1:-1]\nResult:\n\n'tex'\n\nstring[1:4]\nResult:\n\n'tex'\n\nstring[0:]\nResult:\n\n'text'\n\nstring[:-2]\nResult:\n\n'text'\n\nstring[4:]\nResult:\n\n'tex'\n\nstring[:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[1:-1]\nResult:\n\n'tex'\n\nstring[1:4]\nResult:\n\n'tex'\n\nstring[0:]\nResult:\n\n'text'\n\nstring[:-2]\nResult:\n\n'text'\n\nstring[4:]\nResult:\n\n'tex'\n\nstring[:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[1:-1]\nResult:\n\n'tex'\n\nstring[1:4]\nResult:\n\n'tex'\n\nstring[0:]\nResult:\n\n'text'\n\nstring[:-2]\nResult:\n\n'text'\n\nstring[4:]\nResult:\n\n'tex'\n\nstring[:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[1:-1]\nResult:\n\n'tex'\n\nstring[1:4]\nResult:\n\n'tex'\n\nstring[0:]\nResult:\n\n'text'\n\nstring[:-2]\nResult:\n\n'text'\n\nstring[4:]\nResult:\n\n'tex'\n\nstring[:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[1:-1]\nResult:\n\n'tex'\n\nstring[1:4]\nResult:\n\n'tex'\n\nstring[0:]\nResult:\n\n'text'\n\nstring[:-2]\nResult:\n\n'text'\n\nstring[4:]\nResult:\n\n'tex'\n\nstring[:4]\nResult:\n\n'text'\n\nstring = \"text\"\nstring[0:-1]\nResult:\n\n'text'\n\nstring[0:4]\nResult:\n\n'text'\n\nstring[4:0]\nResult:\n\n''\n\nstring = \"text\"\nstring[1:-1]\nResult:\n\n'tex'\n\nstring[1:4]\nResult:"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Inefficiency is a blight on the world and its humanity\") == \"Inefficiency is a blight on the world and its humanity\\n.\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency. is a blight on.. and its humanity'\n'''\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency. is a blight on.. and its humanity'\n\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency. is a blight on.. and its humanity'\n\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency. is a blight on.. and its humanity'\n\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == 'Engineering will save the world from inefficiency. is a blight on.. and its humanity'"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\nSolution\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity'''\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity'''\n'''\n\n----Solutions----\n'''"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Inefficiency is a blight on the world and its humanity\") == \"Inefficiency is a blight on the world and its humanity\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n-1 2 3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\"\"\") == \"unsatisfactory\"\n\n-------------------"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n-1 0 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\nassert solution(\"4 4\\n-1 1 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\nassert solution(\"4 4\\n-1 -2 3\\n-1 1 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"satisfactory\"\nassert solution(\"4 4\\n-1 -2 3\\n-1 -2 3\\n1 2 -3\\n1 2 -3\\n\") == \"satisfactory\"\nassert solution(\"4 4\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\n\"\"\"\nimport os\nimport sys\nimport re\nfrom collections import Counter"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2 3\\n1 -2 3') == 'unsatisfactory'\nassert solution('3 3\\n1 2 3\\n1 -2 3\\n1 -2 -3') =='satisfactory'\n\"\"\"\n\nimport sys\nimport pytest\nimport re\nfrom queue import Queue\n\nclass Node:\n    def __init__(self, value, children):\n        self.value = value\n        self.children = children\n\n    def __repr__(self):\n        return \"Node: {value:%s, children:%s}\" % (self.value, self.children)\n\n    def __eq__(self, other):\n        return (self.value, self.children) == (other.value, other.children)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\nassert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') =='satisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 1 1 1 1 1 1') == 'none'\n\"\"\"\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nres = []\n\nfor i in range(len(arr)):\n    count = 0\n    for j in range(len(arr)):\n        if arr[i] == arr[j]:\n            count += 1\n    if count == 1:\n        res.append(arr[i])"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1\n1\n1\n5\n3\n4\n6\n6''') == '4'\n\nassert solution('''2\n1\n2\n3\n3\n4\n6\n6''') == 'none'\n\nassert solution('''2\n1\n2\n3\n4\n5\n6\n6''') == 'none'\n\nassert solution('''3\n2\n3\n2\n5\n6\n6\n6''') == '1'\n\nassert solution('''3\n1\n2\n2\n2\n5\n6\n6''') == '1'"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'none'\nassert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n\nN = int(stdin.readline().strip())\n\noutcomes = [int(i) for i in stdin.readline().strip().split(' ')]\n\nunique = set(outcomes)\nunique_count = {}\n\nfor j in outcomes:\n    if j in unique_count:\n        unique_count[j] += 1\n    else:\n        unique_count[j] = 1"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 3 3') == 'none'\nassert solution('1\\n1') == 'none'\nassert solution('2\\n1 1') == '0'\nassert solution('2\\n1 1') == '1'\nassert solution('2\\n1 1') == '1'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\nassert solution('8\\n5 5 5 5 5 5 5') == 'none'\n\nassert solution('8\\n6 6') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nprint(solution(stdin))\n\nSample Input:\n3\n6 6 5\nSample Output:\nnone\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 1 1 1') == 'none'\nassert solution('1 2 1 1 1') == 'none'\nassert solution('2 1 2 3 4 5 5') == '1'\nassert solution('5 2 1 2 1 1') == 'none'\nassert solution('1 1 1 1 1') == 'none'\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"05:00:00\") == \"06:00:00\"\n\"\"\"\nfrom datetime import datetime\nimport time\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\"\n\ncurrent_time = input()\nexplosion_time = input()\nhour = int(current_time[:2]) - int(explosion_time[:2])\nminutes = int(current_time[3:5]) - int(explosion_time[3:5])\nseconds = int(current_time[6:]) - int(explosion_time[6:])\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20:00:00' '04:00:00') == '08:00:00'\n\nprint('HERE')\nassert solution('04:00:00' '05:00:00') == '04:00:00'\n\nassert solution('02:59:59' '03:59:59') == '02:59:59'\n\nassert solution('23:59:59' '01:00:00') == '23:59:59'\n\nassert solution('23:59:59' '24:00:00') == '00:00:00'"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('04:00:00') == '08:00:00'\n\nSample Input:\n20:00:00\n08:00:00\nSample Output:\n04:00:00\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"16:00:00\"\n\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"08:00:00\") == \"08:00:00\"\nassert solution(\"22:00:00\") == \"22:00:00\"\nassert solution(\"01:00:00\") == \"01:00:00\"\n\nimport math"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\"\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nassert solution('21:00:00', '04:00:00') == '17:00:00'\nassert solution('10:00:00', '24:00:00') == '06:00:00'\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\n\"\"\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('31 6') == '4'"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"100 100 10\") == \"0\"\nassert solution(\"100 100 10 10\") == \"0\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin.readline()\nl, n = [int(i) for i in stdin.split()]\nqueue = deque()\nqueue.append((1, 0))\nans = 0\nwhile len(queue) > 0:\n    num, count = queue.popleft()\n    if count == n:\n        ans = num\n        break\n    if num * 10 <= l:\n        queue.append((num * 10, count + 1))\n    if num + 1 <= l:\n        queue.append((num + 1, count + 1))\n\nprint(ans)\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == '1'\nassert solution(\"3 1\") == '1'\nassert solution(\"3 5\") == '2'\nassert solution(\"1 1000000000\") == '1'\nassert solution(\"3 1000000000\") == '2'\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n\na, b = map(int, stdin.strip().split(' '))\n\nprint((b-1) // a + 1)\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('4 6') == '4'\nassert solution('1 2') == '2'"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"31 6\") == \"4\"\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('31 6') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == \"4\"\n\nSolution 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"4\") == \"2.999858849431641\"\nassert solution(\"6\") == \"3.099999999999998\"\n\"\"\"\n\nn = int(input())\nans = 1\nfor i in range(1, n+1):\n    ans += 1/i\nprint(round(ans, 12))\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"10\") == \"2.718281828459045\"\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == '2.6666666666666665'\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 2.6666666666666665\nassert solution('3') == 2.6666666666666665\n\"\"\"\n\nimport sys\nfrom math import e"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"7 3 5\") == \"opponent\"\nassert solution(\"2 2 6\") == \"paul\"\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"9 2 3\") == \"opponent\"\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 4') == 'paul'\nassert solution('3 4 1') == 'opponent'\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('10 10 10') == 'paul'\nassert solution('0 0 10') == 'opponent'\nassert solution('0 10 10') == 'paul'\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"1 1 1\") == \"opponent\"\nassert solution(\"5 2 7\") == \"opponent\"\nassert solution(\"6 3 6\") == \"paul\"\nassert solution(\"3 1 0\") == \"opponent\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(5,3,7) == 'paul'\nassert solution(4,4,8) == 'opponent'\nassert solution(6,5,4) == 'paul'\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 7\\n') == 'paul'\n\nassert solution('5 3 7\\n') == 'opponent'\n\nassert solution('5 3 7\\n') == 'paul'\n\nassert solution('5 3 7\\n') == 'opponent'\n\nassert solution('5 3 7\\n') == 'paul'"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('5 5 4') == 'opponent'\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('3') == '2'\nassert solution('10') == '2'\nassert solution('100') == '4'\nassert solution('1000') == '6'\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 2\nassert solution('5') == 3\n\"\"\"\n\nn = int(input())\nprint(n * 2)\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '6'\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\n\n-----Problem-----\nhttps://www.hackerrank.com/challenges/chess/problem\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '2'\n\"\"\"\n\n\"\"\"\nAnother easy solution:"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '5'\n\"\"\"\n\n\"\"\"\nTo solve this problem, we need to make N cuts in one of the four directions. We will make N horizontal cuts and N vertical cuts.\n\nWe can make N horizontal cuts if and only if N is even. In this case we will need to make N / 2 horizontal cuts and (N / 2) vertical cuts.\n\nWe can make N vertical cuts if and only if N is odd. In this case we will need to make (N - 1) / 2 horizontal cuts and (N - 1) / 2 vertical cuts.\n\nBy the previous logic we have that we can make a valid cut if and only if we make an odd number of cuts in one direction and an even number of cuts in the other.\n\nBy the problem statement, we have to do an odd number of cuts in horizontal direction and an even number of cuts in the vertical direction.\n\nTo do an odd number of cuts, we can make (N - 1) / 2 horizontal cuts and (N - 1) / 2 vertical cuts.\n\nTo do an even number of cuts, we can make N / 2 horizontal cuts and N / 2 vertical cuts.\n\nSo if we want to do N cuts in one direction, we can do (N - 1) / 2 horizontal cuts and (N - 1) / 2 vertical cuts.\n\nIf we want to do N cuts in the other direction, we can do N / 2 horizontal cuts and N / 2 vertical cuts.\n\nIn both cases we are left with N / 2 cuts in both directions.\n\nSo we can say that the largest number of cuts we can do is N / 2.\n\nSo the solution is 2 * (N / 2)\n\nThis solution took me quite some time, and the brute force approach was one of the ideas I went with in order to solve the problem.\n\nThe space complexity of this solution is O(N), since we have to store a NxN matrix.\n\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 2\n\"\"\"\nfrom math import log2, ceil"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 2\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 2\nassert solution('2\\n') == 4\nassert solution('3\\n') == 6\nassert solution('4\\n') == 10\nassert solution('5\\n') == 12\n\n\"\"\"\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Result:\n    pieces: int\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"No\"\nassert solution(\"123a\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(123) == 'Yes'\nassert solution(1234) == 'Yes'\nassert solution(12345) == 'Yes'\nassert solution(12345678) == 'Yes'\nassert solution(123456789) == 'No'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('12345') == 'Yes'\nassert solution('123a5') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123','123') == \"Yes\"\nassert solution('123','321') == \"No\"\nassert solution('123','1234') == \"No\"\nassert solution('123','1234a') == \"Yes\"\nassert solution('123','1234b') == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('A123') == 'No'\nassert solution('A123B') == 'Yes'\nassert solution('A123') == 'No'\n\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123', '123') == 'Yes'\nassert solution('1234', '1234') == 'Yes'\nassert solution('1234', '1ab2') == 'No'\nassert solution('1234', '1AB2') == 'No'"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('c0deninja5') == 'Yes'\nassert solution('c0deninja51') == 'No'\nassert solution('c0deninja5') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\" or solution(input()) == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('zepelepenapapa papapripikapa') == 'zelena paprika'\nassert solution('zepelepenapa papapripipikapa') == 'zelena paprika'\nassert solution('zepelepenapa papapripipipikapa') == 'zelena paprika'\nassert solution('zepelepenapa papapripipipipikapa') == 'zelena paprika'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"kemija\") == \"kepemipijapa\"\nassert solution(\"peemu\") == \"pemu\"\nassert solution(\"papek\") == \"papipkapa\"\nassert solution(\"\") == \"\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('kemija') == 'kelipapikapa'\nassert solution('paprika') == 'papapripikapa'\n\nprint(solution('zepelepenapa'))\nprint(solution('paprika'))\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"paprika\") == \"paprika\"\nassert solution(\"kemija\") == \"pemipijapa\"\nassert solution(\"kemija\") == \"pemipijapa\"\nassert solution(\"kemija\") == \"pemipijapa\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zepelepenapa\") == \"zelena paprika\"\nassert solution(\"dzepemipijapa\") == \"dzeko pimija\"\nassert solution(\"paprika\") == \"papapripikapa\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"36 2\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(32, 2) == \"-32\"\nprint(solution(32, 2))\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32 2') == '-32'\nassert solution('13 4') == 'IMPOSSIBLE'\nassert solution('0 6') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\nx, y = [int(s) for s in input().split()]"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n32 2\n''') == '-32'\n\nassert solution('''\n32 2\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n-32 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n32 2\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n-5 100\n''') == 'ALL GOOD'"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"32 2\") == \"-32\"\n'''\n\nx, y = map(int, input().split())"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 2') == '-32'\nassert solution('32 -2') == '-32'\nassert solution('100 2') == 'IMPOSSIBLE'\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"36 1\") == \"IMPOSSIBLE\"\nassert solution(\"32 1\") == \"ALL GOOD\"\nassert solution(\"34 0\") == \"IMPOSSIBLE\"\n\nassert solution(\"32 2\") == \"-32\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32 2') == '-32'\nassert solution('50 1') == 'ALL GOOD'\nassert solution('50 0') == 'IMPOSSIBLE'\nassert solution('110 0') == 'ALL GOOD'\nassert solution('0 0') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''32 2''') == '-32'\nassert solution('''65 6''') == 'ALL GOOD'\nassert solution('''32 0''') == 'IMPOSSIBLE'\nassert solution('''32 32''') == 'IMPOSSIBLE'\nassert solution('''-32 2''') == '-32'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\n\nassert solution('2 2 3 3\\n1 2 4') == 'one'\n\nassert solution('2 2 3 3\\n1 3 5') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 1 1\") == \"none\"\nassert solution(\"1 2 2\") == \"none\"\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\nassert solution(\"4 4 4\") == \"both\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 2 3 3\n1 3 4''') == 'both'\nassert solution('''2 2 3 3\n1 3 4\n3 3 5''') == 'both'\nassert solution('''2 2 3 3\n1 3 4\n2 4 6''') == 'one'\nassert solution('''2 2 3 3\n1 3 4\n2 4 6\n3 5 7''') == 'none'\nassert solution('''2 2 3 3\n1 3 4\n2 4 6\n3 5 7\n4 8 9''') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"5 7 3 7\") == \"none\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 2 3 4\") == \"none\"\n\n-----Solution-----\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\n\"\"\"\n\nimport sys\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Data:\n    A: int\n    B: int\n    C: int\n    D: int\n    P: int\n    M: int\n    G: int\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'none'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\n\"\"\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 3 3\\n1 3 4\\n') == 'both'\nassert solution('2 2 3 3\\n1 1 5\\n') == 'both'\nassert solution('2 2 3 3\\n1 3 4\\n') == 'one'\nassert solution('2 2 3 3\\n1 3 5\\n') == 'one'\nassert solution('2 2 3 3\\n1 2 6\\n') == 'none'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6 8') == 10\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"2 4 4\") == \"2\"\nassert solution(\"5 0 -5\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"6 8 -3\") == \"10\"\nassert solution(\"1 5 -7\") == \"9\"\nassert solution(\"3 -1 5\") == \"6\"\nassert solution(\"-4 6 0\") == \"4\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('1 2 3') == '4'\nassert solution('-3 -1 -2') == '1'\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]\nprint(abs(a - b) * abs(b - c) // 2)\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"3 4 5\") == \"8\"\nassert solution(\"-10 -8 -5\") == \"0\"\nassert solution(\"1 2 3\") == \"6\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 8') == '10'\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 3 5\") == \"7\"\nassert solution(\"-3 -2 2\") == \"1\"\nassert solution(\"-3 -2 -2\") == \"0\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nimport math\nh, v = map(int, stdin.split())\nprint(int(math.ceil(h/math.sin(math.radians(v))))+1)\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('500 70') == '533'\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('500 70') == '533'\n\nassert solution('250 60') == '296'\n\nassert solution('2000 0') == '2000'\n\nassert solution('2000 89') == '2000'\n\nassert solution('2000 88') == '2000'"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('500 70') == '533'\nassert solution('2 1') == '4'\nassert solution('2 2') == '2'\nassert solution('0 1') == '0'\nassert solution('2 0') == '0'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"500 70\") == \"533\"\n\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('500 70') == '533'\nassert solution('1 90') == '0'\nassert solution('12 34') == '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nh, v = map(int, stdin.split())\nprint(h + (h - v) if h > v else h - v)\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 9\") == '9.0'\nassert solution(\"4 10\") == '5.0'\nassert solution(\"4 9\") == '4.0'\nassert solution(\"4 8\") == '4.5'\nassert solution(\"4 7\") == '4.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\n\nimport sys\n\nn, g = map(float, sys.stdin.readline().split())\n\nv = []\nd = []\nt = []\nfor i in range(n):\n    _d, _t = map(int, sys.stdin.readline().split())\n    v.append(_d / (_d ** 2 + g * _t ** 2) ** 0.5)\n    d.append(_d)\n    t.append(_t)\n\nfor _d, _t in zip(d, t):\n    print(f\"{_d * v[0]:.6f}\")\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\n\"\"\"\n    Best:\n        time: O(1)\n        space: O(1)\n\n    Assumptions:\n        - N, g are ints\n        - theta is in range [1, 89]\n        - D are ints\n        - theta are in range [1, 89]\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'\n\"\"\""
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n') == '30.0 30.0 30.0 30.0 30.0 30.0 30.0 30.0 30.0'\nassert solution('1\\n1\\n2\\n3\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'\nprint(solution(stdin))"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n\nimport math\nfrom typing import List, Dict"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nn = int(stdin.readline())\ntemperatures = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n28 27 29 27\") == \"1 29\"\nassert solution(\"5\\n32 37 33 35 34\") == \"1 36\"\n\n\"\"\"\nimport sys\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass(frozen=True)\nclass DailyTemps:\n    max_temp: int\n    min_temp: int\n\nclass Solution:\n    \"\"\"\n    Since the minimum temperature will be lower than the maximum temperature\n    during the two-day hiking trip, we can know that the temperature on the \n    start day will be greater than the temperature on the end day. Hence, we can\n    start by looking for the first day that will have a temperature that is \n    greater than or equal to our end temperature.\n    \"\"\"\n    @staticmethod\n    def find_start_day(temps: List[DailyTemps], end_temp: int) -> int:\n        start_idx, end_idx = 0, len(temps) - 1\n        while start_idx < end_idx:\n            mid_idx = (start_idx + end_idx) // 2\n            mid_temp = temps[mid_idx].max_temp\n            if mid_temp < end_temp:\n                start_idx = mid_idx + 1\n            elif mid_temp > end_temp:\n                end_idx = mid_idx\n            else:\n                return mid_idx\n        return start_idx\n\n    @staticmethod\n    def is_greater_than_or_equal(day_temps: List[DailyTemps], end_temp: int) -> bool:\n        for i, t in enumerate(day_temps):\n            if t.max_temp <= end_temp:\n                return False\n        return True\n\n    @staticmethod\n    def minimum_temperature(day_temps: List[DailyTemps]) -> int:\n        return min(day_temps, key=lambda t: t.max_temp).max_temp\n\n    def solve(self, input_file: str) -> str:\n        n = int(next(sys.stdin))\n        temps = [DailyTemps(int(t) for t in next(sys.stdin).split()) for _ in range(n)]\n        end_temp = int(next(sys.stdin))\n        start_day = self.find_start_day(temps, end_temp)\n        if self.is_greater_than_or_equal(temps[:start_day], end_temp):\n            start_day = start_day + 1\n        result = (start_day, self.minimum_temperature(temps[start_day:start_day + 2]))\n        return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\nassert solution('4\\n10 10 10 10') == '4 10'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n26 29 31') == '1 30'\nassert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('7\\n23 27 31 28 30\\n19 36 29 37') == '3 36'\nassert solution('8\\n23 27 31 28 30\\n19 36 29 37\\n1 38 25 39') == '3 38'\nassert solution('10\\n23 27 31 28 30\\n19 36 29 37\\n1 38 25 39\\n6 43 41 42') == '6 43'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"10\\n5 4 3 2 1 8 7 6 9 10\") == \"6 3\"\nassert solution(\"3\\n22 20 21\") == \"1 2\"\nassert solution(\"4\\n3 1 2 3\") == \"1 2\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('5\\n27 31 28 30') == '2 28'\nassert solution('4\\n31 28 30') == '3 3'\nassert solution('5\\n30 31 28 29') == '2 1'\nassert solution('5\\n30 29 28 29') == '2 1'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\nassert solution('3 4\\n1 1 1\\n1 2 1') == '1'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n'''"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 6\\n1 2 3 5 10') == '3'\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        n, a = list(map(int, stdin.split()))\n        arr = np.array(list(map(int, stdin.split()[1:])))\n\n        min_ships = np.min(arr)\n        max_ships = np.max(arr)\n\n        if a < min_ships * (n - 1):\n            return '0'\n        elif min_ships == max_ships:\n            return str(n - 1)\n        else:\n            return str(np.sum(arr >= a // min_ships) + np.sum(arr < a // max_ships))\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n\nn, a = map(int, input().split())\np = list(map(int, input().split()))"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\nassert solution('3 6\\n4 5 2') == '1'\nassert solution('3 6\\n2 3 1') == '1'\nassert solution('3 6\\n1 2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\nassert solution('3 6\\n5 5 4') == '1'\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\nassert solution(\"3 6\\n2 3 3\") == \"1\"\nassert solution(\"3 6\\n3 3 3\") == \"0\"\nassert solution(\"3 6\\n2 3 2\") == \"1\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdsrc) == answer\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n3\\n1\\n') == '1'\nassert solution('2\\n2\\n1\\n') == '1'\nassert solution('3\\n1\\n2\\n') == '1'\nassert solution('4\\n4\\n2\\n') == '0'\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\nassert solution(\"1 1\\n1\") == \"0\"\n\"\"\"\n\nn, a = [int(i) for i in input().split()]\ne = [int(i) for i in input().split()]\nwins = 0\n\nfor i in range(n):\n    if a > e[i]:\n        wins += 1\nprint(wins)\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WWMWMMWWMM') == '9'\n\"\"\"\n\nfrom typing import List\n\n\nclass Counter:\n    def __init__(self, counter_type: str, limit: int):\n        self._counter = {\n            'W': 0,\n            'M': 0\n        }\n        self._counter_type = counter_type\n        self._limit = limit\n        self._count = 0\n\n    def _update(self, char: str):\n        self._counter[char] += 1\n        if self._counter[char] == self._limit:\n            if char == self._counter_type:\n                self._count += 1\n            self._counter[char] = 0\n            self._counter[self._counter_type] -= 1\n        return self._count\n\n    def increase(self, char: str):\n        self._update(char)\n        return self\n\n    def decrease(self, char: str):\n        self._update(char)\n        return self\n\n    def reset(self):\n        self._counter = {\n            'W': 0,\n            'M': 0\n        }\n        self._count = 0\n        return self\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WWMMMM\") == 8\nassert solution(\"WMWMWWMMW\") == 10\nassert solution(\"MWMWMM\") == 4\nassert solution(\"MWMWWMMMW\") == 10\nassert solution(\"WWMWMW\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\n---\n## hidden code\n\n```python\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('MWWMWMMWM') == '9'\n\nSample Input:\n2\nWMWMWMWMW\nMWWMWMWMW\nSample Output:\n5\nassert solution('WMWMWMWMW') == '5'\n\nSample Input:\n3\nMMMM\nWMWMW\nMMMM\nSample Output:\n3\nassert solution('MMMM') == '3'\n\nSample Input:\n4\nMMMMW\nWMMMW\nWWWMW\nWWWW\nSample Output:\n4\nassert solution('MMMMW') == '4'\n\nSample Input:\n5\nMMMMMW\nWMMMWW\nWMWMWW\nWMWMWW\nMWWMWW\nSample Output:\n3\nassert solution('MMMMMW') == '3'\n\nSample Input:\n6\nMMMMWWW\nWMMMWWW\nWMMMWWW\nWMMMWWW\nWMMMWWW\nWWWWWMW\nSample Output:\n2\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('MWWMWMMWM') == 9\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1\nMWWMWMMWM\n''') == '9'\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MWWMMMMMM\") == \"9\"\nassert solution(\"MWMWMWM\") == \"6\"\nassert solution(\"MWWMWMWM\") == \"6\"\nassert solution(\"WWWMMMMM\") == \"6\"\nassert solution(\"MWWMWMMW\") == \"6\"\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"MWWMWMMWM\") == \"9\"\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nfrom collections import deque\n\nn, m = map(int, input().split())\ncommands = deque(input().split())\neggs = 0\n\nfor i in range(n):\n    eggs += 1\n    if i == m:\n        eggs -= m\n    if commands[0] == 'undo':\n        eggs += commands.popleft()\n    else:\n        eggs += int(commands.popleft())\n    if eggs == n:\n        print(i)\n        break\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n1 -1 2 -1\") == \"3\"\nassert solution(\"5 4\\n-1 -2 3 0\") == \"0\"\nassert solution(\"5 4\\n0 -1 2 -1\") == \"1\"\nassert solution(\"5 4\\n0 0 2 -1\") == \"0\"\nassert solution(\"5 5\\n0 0 2 -1\") == \"0\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n\nfrom sys import stdin\n\nstdin = open('./input.txt')\n\nN, M = map(int, stdin.readline().split())\ncommand = [int(c) for c in stdin.readline().split()]"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('2 1\\n2') == '1'\n\"\"\"\n\nimport math\n\nn, k = input().split()\n\nn = int(n)\nk = int(k)\n\nl = []\nfor i in range(k):\n    s = input().split()\n    l.append(s)"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 1\\n3 1\\n1 -1\\n-1 -1\\n2 -3\\n1 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n2 2\\n1 2\\n5 1\\n1 -1\\n-1 -1\\n\") == '3'\n\nassert solution(\"4 5\\n1 1\\n3 1\\n1 -1\\n-1 -1\\n2 -3\\n1 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n2 2\\n1 2\\n5 1\\n1 -1\\n-1 -1\\n\") == '0'\n\nassert solution(\"4 5\\n1 1\\n3 1\\n1 -1\\n-1 -1\\n2 -3\\n1 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n2 2\\n1 2\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n2 2\\n1 2\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n2 2\\n1 2\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n1 2\\n2 -3\\n2 1\\n5 1\\n1 -1\\n-1 -1\\n1 3\\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 4, '8 -2 3 undo 2') == 3\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\\n\") == \"6 7\"\nprint(solution(\"2 3\\n1 2 3\\n3 2 1\\n\"))\n\n------ Hints ------\n\n------ Complexity ------ \nTime: O(N*M)\nSpace: O(1)\n\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2 3') == '6 7'\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n\n-----Test Case-----\nimport codewars_test as Test\nfrom solution import solution\nTest.assert_equals(solution(\"2 3\\n1 2 3\\n3 2 1\"), \"6 7\")\nTest.assert_equals(solution(\"2 2\\n2 2\\n1 1\"), \"0 1\")\nTest.assert_equals(solution(\"1 1\\n1 1\"), \"0 0\")\n\"\"\"\n\nimport codewars_test as Test\nfrom solution import solution\nTest.assert_equals(solution(\"2 2\\n2 2\\n1 1\"), \"0 1\")\nTest."
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 3\\n3 2 1') == '6 7'"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('sample.in').read()) == '7 4', 'ERROR'\nassert solution(open('input.in').read()) == open('output.out').read(), 'ERROR'\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n3 2 1') == '6 7'"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n1 2 3\n3 2 1\n'''.strip()) == '''\n6 7\n'''.strip()\n\nassert solution('''\n1 1\n2\n'''.strip()) == '''\n1\n'''.strip()\n\nassert solution('''\n1 1\n10\n'''.strip()) == '''\n10\n'''.strip()\n\nassert solution('''\n1 1\n1\n'''.strip()) == '''\n1\n'''.strip()\n\nassert solution('''\n1 1\n0\n'''.strip()) == '''\n0\n'''.strip()"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n1 2 3') == '6 7'"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1\\n') == '6 7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\"\"\"\n\nfrom math import ceil\nfrom typing import List"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64\\n665\"\nprint(solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\"))"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\nals mollen mollen mollen mollen mollen mollen') == '64 correct\\n665 incorrect'\n\nimport re"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n'\n              'als mollen mollen mollen mollen mollen mollen\\n'\n              '4\\n'\n              'als when correct\\n'\n             'mollen moles correct\\n'\n             'mollen destroy correct\\n'\n             'mollen mills incorrect\\n') == '64 correct\\n665 incorrect'\n\nassert solution('7\\n'\n              'als mollen mollen mollen mollen mollen mollen\\n'\n              '4\\n'\n              'als when correct\\n'\n             'mollen moles correct\\n'\n             'mollen destroy correct\\n'\n             'mollen mills incorrect\\n'\n             'mollens destroy incorrect\\n') == '65 incorrect\\n66 correct'\n\nassert solution('7\\n'\n              'als mollen mollen mollen mollen mollen mollen\\n'\n              '4\\n'\n              'als when correct\\n'\n             'mollen moles correct\\n'\n             'mollen destroy correct\\n'\n             'mollen mills incorrect\\n'\n             'mollens destroy incorrect\\n'\n             'mollens destroy incorrect\\n') == '65 incorrect\\n66 incorrect'\n\nassert solution('7\\n'\n              'als mollen mollen mollen mollen mollen mollen\\n'\n              '4\\n'\n              'als when correct\\n'\n             'mollen moles correct\\n'\n             'mollen destroy correct\\n'\n             'mollen mills incorrect\\n'\n             'mollens destroy incorrect\\n'\n             'mollens destroy incorrect\\n') == '65 incorrect\\n66 incorrect'\n\nassert solution('7\\n'\n              'als mollen mollen mollen mollen mollen mollen\\n'\n              '4\\n'\n              'als when correct\\n'\n             'mollen moles correct\\n'\n             'mollen destroy correct\\n'\n             'mollen mills incorrect\\n'\n             'mollens destroy incorrect\\n'\n             'mollens destroy incorrect\\n') == '65 incorrect\\n66 incorrect'"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n\"\n                \"als mollen mollen mollen mollen mollen mollen\\n\"\n                \"4\\n\"\n                \"als when correct\\n\"\n                \"mollen moles correct\\n\"\n                \"mollen destroy correct\\n\"\n                \"mollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nassert solution(\"5\\n\" + \"als when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n0 incorrect\"\nassert solution(\"4\\n\" + \"als when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n0 incorrect\"\nassert solution(\"7\\n\" + \"als when correct\\nmollen moles correct\\nmollen destroy correct\\n\" + \"als mollen mollen mollen mollen mollen mollen\\nmollen mills incorrect\") == \"64 correct\\n0 incorrect\"\nassert solution(\"5\\n\" + \"als when correct\\nmollen moles correct\\n\" + \"als mollen mollen mollen mollen mollen mollen\\n\" + \"als when correct\\nmollen moles correct\\n\" + \"als mollen mollen mollen mollen mollen mollen\\nmollen mills incorrect\") == \"64 correct\\n0 incorrect\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n''') == '''\n64 correct\n665 incorrect\n'''\n\nassert solution('''\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n''') == '''\n64 correct\n665 incorrect\n'''\n\nassert solution('''\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n''') == '''\n64 correct\n665 incorrect\n'''\n\nassert solution('''\n7\nals mollen mollen mollen mollen mollen mollen\n4\nmollen moles when correct\nmollen destroy correct\nmollen mills incorrect\n''') == '''\n64 correct\n665 incorrect\n'''\n\nassert solution('''\n7\nmollen mollen mollen mollen mollen mollen\n4\nmollen moles when correct\nmollen destroy correct\nmollen mills incorrect\n''') == '''\n64 correct\n665 incorrect\n'''"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n mollen destroy correct\\n mollen mills incorrect') == '64 correct\\n665 incorrect'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == '64\\n665'\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n\nn = int(input())\na = input().split()\n\nb = [int(i) for i in a]\n\nc = [0 for i in range(n)]\n\nfor i in range(n):\n    for j in range(i, n):\n        if b[i] > b[j]:\n            c[i] = max(c[i], c[j] + b[i])\n\nprint(max(c))\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n\nN = int(input())\nt = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nday = 0\nfor i in range(n-1):\n    if a[i+1] > a[i]:\n        day += 1\n    else:\n        day = 1\n\nprint(day)\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\nprint(solution(open(\"input.txt\").read()))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 3 4 3''') == '7'\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\"\n\nN = int(input())\nt = list(map(int, input().split()))\n\nday = 1\nwhile sum(t) > 0:\n    day += 1\n    for i, num in enumerate(t):\n        t[i] -= 1\n\nprint(day)\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n---Problem:---\nFarmer Jon has recently bought n tree seedlings that he wants to plant in his yard. It takes 1 day for Jon to plant a seedling, and for each tree Jon knows exactly in how many days after planting it grows to full maturity. Jon would also like to throw a party for his farmer friends, but in order to impress them he would like to organize the party only after all the trees have grown. More precisely, the party can be organized at earliest on the next day after the last tree has grown up.\n\nHelp Jon to find out when is the earliest day when the party can take place. Jon can choose the order of planting the trees as he likes, so he wants to plant the trees in such a way that the party will be as soon as possible.\n\n###\n\n\"\"\"\n\nN = input()\nt = input()\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\"\"\"\n\nfrom typing import List, Tuple\nfrom math import inf\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('5\\n1.1 0.2\\n2.1 2.0\\n3.1 3.0\\n4.1 4.0\\n5.1 5.0\\n') == '1.1 0.2\\n2.1 2.0\\n3.1 3.0\\n4.1 4.0\\n5.1 5.0'\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nimport math\n\nN, A = map(int, input().split())\nx_list, y_list = [], []\n\nfor _ in range(N):\n    x, y = map(float, input().split())\n    x_list.append(x)\n    y_list.append(y)\n\nx_list.sort()\ny_list.sort()"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"3\\n1 1\\n0 2\\n4\\n\") == \"1.0 1.0\\n1.0 3.0\\n0.0 4.0\"\nassert solution(\"2\\n3\\n0.0 0\\n0.0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"2\\n3\\n0.0 0\\n1.0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"3\\n0.0 0\\n1.0 2\\n4\\n\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0\n1 1\n0 2\n6\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n4\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n5\n0 0\n1 1\n0 2\n4\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\"\n\nassert solution(\"\"\"\n5\n0 0\n1 1\n0 2\n5\n\"\"\") == \"\"\"\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nassert solution(\"5\\n0 0\\n1 1\\n1 1\\n0 2\") == \"0.0 0.0\\n0.5 1.0\\n0.5 2.0\\n1.5 2.0\\n0.0 4.0\"\nassert solution(\"6\\n0 0\\n1 1\\n0 2\\n0 3\\n1 1\\n0 4\") == \"0.0 0.0\\n1.0 1.0\\n1.0 2.0\\n0.0 2.0\\n0.0 3.0\\n1.0 4.0\"\n\n\"\"\"\n\n\nimport numpy as np\nfrom math import gcd"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0.0 0.0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == 1\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 1\nassert solution(\"10\") == 2\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\nassert solution('0') == 1\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 2\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''4''') == '4'\nassert solution('''5''') == '6'\nassert solution('''3''') == '5'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"100\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 1\nassert solution('10') == 3\n\"\"\"\n\nn = int(input())\n\na = n\ni = 0\ndays = 1\n\nwhile n > 0:\n    a = a - i * 2\n    i += 1\n    n -= 1\n    if n == 0 and a % 2!= 0:\n        days = days + (i + a // 2)\n    elif n == 0 and a % 2 == 0:\n        days = days + i\n\nprint(days)\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '3'\n'''"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 16\") == \"34\"\nassert solution(\"12 16\") == \"34\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\nm, sigma = map(int, sys.stdin.readline().split())\n\nprint(a * (m // 2) + b * (sigma // 2))"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''12 16\n2 3\n''') == '34'\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n12 16\\n2 16\\n2 16\") == \"34\"\n\"\"\"\n\na, b = [int(x) for x in stdin.split('\\n')[0].split()]\nm, sigma = [int(x) for x in stdin.split('\\n')[1].split()]"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a=3, b=1, m=12, s=16) == 34\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 1') == '5'\nassert solution('4 4') == '20'\nassert solution('4 6') == '16'\nassert solution('4 7') == '28'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n12 16\n\"\"\") == \"34\"\n\"\"\"\na=int(stdin.readline())\nb=int(stdin.readline())\nm=int(stdin.readline())\ns=int(stdin.readline())\n\nc=int(m/2)"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\n\"\"\"\n\na, b = [int(x) for x in stdin.split(\"\\n\")[0].split()]\nm, s = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\nx, y = 1, 1\n\nwhile x * a + y * b < m:\n    if x >= s:\n        x = 1\n    else:\n        x += 1\n    \n    if y >= s:\n        y = 1\n    else:\n        y += 1\n\nprint(x * a + y * b)\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n12 16') == '34'\nassert solution('20 48\\n2 11') == '76'\nassert solution('5 8\\n1 1') == '8'\nassert solution('5 8\\n3 4') == '12'\nassert solution('5 8\\n4 3') == '14'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 2\n7 3\n3 2\n6 3\n3 4\n7 2\n3 1\n5 2\n1 1\n7 7\n1 4\n9 7\n3 9\n5 4\n7 2\n3 3\n1 5\n9 2\n3 1\n1 3\n3 8\n5 1\n6 7\n7 6\n4 5\n8 4\n5 1\n3 2\n2 5\n8 1\n3 4\n1 8\n1 3\n1 1\n8 2\n7 2\n7 8\n8 3\n3 9\n9 4\n4 5\n4 3\n5 9\n7 7\n4 2\n7 7\n5 5\n2 6\n8 3\n1 1\n6 2\n9 7\n9 7\n3 1\n2 7\n6 5\n2 4\n6 3\n4 5\n7 5\n9 8\n1 5\n4 8\n7 2\n2 2\n4 5\n3 2\n4 4\n7 8\n9 7\n4 7\n3 9\n3 7\n1 2\n4 8\n7 8\n2 6\n6 6\n2 1\n5 2\n7 1\n7 3\n3 8\n8 7\n9 7\n4 2\n6 3\n2 4\n1 4\n5 7\n3 5\n1 2\n1 7\n9 1\n6 3\n7 1\n6 7\n3 2\n7 7\n8 5\n4 7\n5 7\n3 8\n5 3\n5 3\n2 5\n5 2\n7 8\n8 2\n7 7\n3 3\n4 3\n3 6\n1 3\n2 3\n2 8\n8 1\n6 1\n4 8\n4 5\n5 7\n7 5\n6 1\n4 6\n3 2\n4 2\n4 4\n6 2\n4 1\n8 7\n4 8\n5 7\n2 5\n7 3\n5 6\n5 5\n3 9\n8 2\n1 5\n5 7\n2 3\n9 8\n7 3\n3 7\n3 7\n4 7\n7 2\n8 5\n2 4\n4 2\n3 5\n3 2\n9 2\n6 3\n8 2\n5 1\n7 7\n2 7\n3 7\n7 7\n8 4\n2 1\n3 7\n5 7\n5 3\n8 1\n4 2\n4 8\n5 6\n7 4\n3 7\n7 1\n6 6\n3 8\n3 5\n5 7\n3 2\n6 7\n7 6\n8 6\n3 7\n4 2\n2 3\n2 6\n3 8\n9 4\n7 4\n2 7\n3 5\n8 4\n2 2\n4 5\n4 2\n8 5\n8 6\n8 4\n2 6\n6 7\n8 6\n3 9\n6 6\n8 1\n5 1\n5 7\n3 5\n2 6\n7 2\n7 5\n8 3\n5 7\n2 7\n3 7\n9 6\n8 5\n5 1\n9 8\n7 7\n5 4\n4 5\n3 6\n4 3\n3 9\n9 5\n8 7\n9 3\n7 5\n3 6\n6 7\n6 4\n7 5\n5 2\n5 7\n3 2\n4 7\n6 3\n7 5\n5 7\n4 4\n6 1\n2 2\n3 2\n4 8\n3 6\n1 2\n6 4\n5 4\n3 6\n8 3\n6 4\n7 4\n5 1\n6 3\n2 3\n4 2\n2 4\n1 6\n3 8\n8 4\n5 7\n3 7\n6 6\n5 1\n3 2\n2 1\n9 5\n2 8\n3 2\n2 7\n4 8\n5 4\n6 1\n2 4\n1 2\n4 1\n4 2\n6 8\n4 3\n1 6\n6 2\n5 4\n2 5\n6 2\n1 7\n4 6\n7 4\n6 6\n3 5\n5 1\n1 3\n6 5\n8 7\n1 2\n6 1\n7 5\n6 5\n6 7\n8 3\n5 1\n3 2\n8 8\n5 2\n5 3\n4 4\n4 4\n8 2\n3 4\n1 8\n9 1\n1 1\n4 5\n8 4\n3 2\n2 5\n3 7\n5 7\n3 5\n4 8\n3 7\n8 8\n6 1\n4 5\n7 4\n5 7\n3 7\n6 3\n2 2\n4 7\n6 7\n7 5\n3 4\n5 7\n6 2\n3 7\n7 2\n6 7\n4 2\n5 7\n6 7\n7 4\n3 8\n1 6\n5 1\n3 7\n4 8\n6 1\n6 4\n8 7\n2 6\n4 8\n4 3\n7 5\n5 2\n7 7\n3 6\n2 4\n7 6\n3 5\n4 8\n3 1\n2 6\n3 6\n5 7\n6 7\n5 1\n4 1\n4 2\n6 3\n7 5\n5 7\n5 7\n2 4\n5 7\n3 1\n7 6\n4 7\n4 1\n4 2\n7 8\n5 1\n6 2\n8 6\n4 2\n6 3\n3 4\n2 4\n1 7\n8 7\n2 5\n7 4\n6 6\n1 1\n4 7\n7 8\n6 7\n3 4\n3 3\n4 4\n8 1\n8 6\n4 3\n4 6\n6 7\n8 4\n2 5\n5 3\n1 6\n3 3\n7 1\n3 1\n2 5\n5 8\n3 5\n5 3\n7 7\n4 4\n5 8\n8 6\n4 4\n5 6\n7 7\n6 6\n5 3\n7 1\n4 2\n2 4\n5 7\n5 7\n4 5\n8 3\n2 6\n3 5\n7 6\n8 5\n6 1\n2 2\n7 4\n5 3\n6 7\n1 6\n4 6\n2 4\n3 2\n8 1\n1 1\n5 2\n3 1\n3 4\n7 2\n3 1\n1 2\n8 6\n3 3\n1 7\n7 1\n1 2\n5 2\n4 6\n3 2\n5 4\n4 7\n3 8\n4 7\n6 6\n4 1\n7 1\n4 6\n5 6\n8 5\n1 7\n6 5\n2 1\n2 4\n1 5\n7 3\n4 5\n7 8\n8 1\n5 6\n7 1\n6 1\n2 4\n4 1"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2 3 1''') == 3\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 1') == 3\nassert solution('4\\n1 3 1 2') == 1\nassert solution('4\\n1 2 2 3') == 5\nassert solution('4\\n1 2 3 1') == 3\nassert solution('4\\n2 1 3 1') == 5\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n'''"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\nassert solution(\"5\\n0 0 1 1 1\") == 3\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == 1\nassert solution(\"1\\n1\") == 1\n\n\"\"\"\n\nfrom collections import Counter\nimport numpy as np\nfrom copy import deepcopy"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nn = int(input())\n\nlanguages = list(map(int, input().split()))\n\nlanguages.sort()\n\ncount = 1\n\nfor i in range(0, n):\n    if languages[i] - languages[i - 1] > 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n\"\"\"\n\nfrom __future__ import annotations\nfrom collections import defaultdict\n\nclass Solution:\n    def calc_level(self, people: dict) -> dict:\n        \n        # Level is zero if no one speaks the same language\n        level = [0] * (max(people.keys()) + 1)\n        for p in people:\n            for n in people[p]:\n                level[n] = max(level[n], level[p] + 1)\n        return level\n        \n    def max_level(self, levels: list) -> int:\n        return max(levels)\n        \n    def main(self, stdin: str) -> str:\n        n = int(stdin)\n        people = defaultdict(list)\n        for i in range(n):\n            people[i] = list(map(int, stdin.split()))\n        \n        levels = self.calc_level(people)\n        return str(self.max_level(levels))"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nx = list(map(int, sys.stdin.readline().split()))\n\nl = set(x)\n\nprint(len(l) * (len(l) - 1))\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 3 1''') == '3'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.0') == '1088'\nassert solution('100.0') == '1008'\nassert solution('89.0') == '98'\nassert solution('0.0') == '0'\nassert solution('0.00001') == '1'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.0') == '1088'\n\nsolution('1.001') == '1'\n\nsolution('1.12') == '12'\n\nsolution('1.2') == '12'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0\") == 1088\n\"\"\"\n\n\"\"\"\nSolution:\nInput to program\n1.0\n\nOutput from program\n1088\n\"\"\"\n\nfrom typing import Union\n\nx = float(input())\nx = round(x * 1000 / 5280)"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0') == '1088'\nassert solution('2.0') == '2224'\nassert solution('4.0') == '4480'\nassert solution('12.0') == '2160'\nassert solution('16.0') == '2288'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1.0) == 1088\nassert solution(2.0) == 1995\nassert solution(3.0) == 2890\nassert solution(5.0) == 5880\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"1000\"\nassert solution(\"1\") == \"1000\"\nassert solution(\"2.5\") == \"2140\"\nassert solution(\"5.3\") == \"1910\"\nassert solution(\"9\") == \"990\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"1.2\") == \"1100\"\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '1.0') == '1088'\nassert solution(\n    '0.5') == '664'\nassert solution(\n    '0.12') == '386'\nassert solution(\n    '0.59') == '3936'\nassert solution(\n    '0.8') == '4608'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"3.5\") == \"2355\"\nassert solution(\"1.55\") == \"2155\"\n\n---Problem---\nYou have been given a positive floating-point number $X$. You are required to print the closest Roman numeral representation of $X$.\n\nThe number of Roman characters used is restricted to the digits I, V, X, L, C, D, M.\n\nRoman numerals are represented by seven different symbols:\n\nI     1\nV     5\nX     10\nL     50\nC     100\nD     500\nM     1000\n\nFor example, the Roman numeral for $4.2$ is IV.\n\nNote that the Roman numeral system is decimal-based, and not base-10.\n\nIt is not necessary to write the most significant place value in Roman numerals, but you must write all of the significant values, from largest to smallest.\n\nFor example, the Roman numeral for $4000$ is MMMM.\n\n---Constraints---\nYou are only required to output a single value denoting the Roman numeral representation of $X$.\n\n---Examples---\nSample Input:\n4.2\nSample Output:\nIV\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\\n2 4\\n1 3\\n1 1\\n1 1\") == \"5.000000\\n5.000000\\n5.000000\"\nassert solution(\"0 4\\n0 0\\n0 0\\n0 0\") == \"10.000000\\n10.000000\\n10.000000\"\nassert solution(\"0 4\\n100 100\\n0 0\\n100 100\") == \"10.000000\\n10.000000\\n10.000000\"\nassert solution(\"1 2\\n1 1\\n1 1\") == \"2.000000\\n2.000000\\n2.000000\"\nassert solution(\"1 2\\n1 0\\n1 0\") == \"1.000000\\n1.000000\\n1.000000\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0 0 100\\n100 0 0 100\\n100 0 0 0\\n0 100 0 100') == '25.0\\n25.0\\n25.0\\n25.0'\nassert solution('4\\n0 0 0 100\\n100 0 0 100\\n100 0 0 0\\n0 100 0 100') == '0.0\\n0.0\\n0.0\\n0.0'\nassert solution('4\\n100 0 0 100\\n100 0 0 0\\n0 100 0 100') == '25.0\\n25.0\\n25.0\\n25.0'\nassert solution('4\\n0 0 0 100\\n100 0 0 100\\n100 0 0 0') == '0.0\\n0.0\\n0.0\\n0.0'\nassert solution('4\\n0 0 0 100\\n100 0 0 100\\n100 0 0 0') == '0.0\\n0.0\\n0.0\\n0.0'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([\"0 4\", \"1 1 1 1\", \"1 1 1 1\", \"1 1 1 1\"]) == \"25.000000\"\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 4\") == \"25.000000000\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 4\\n100 0 0\\n100 0 100\\n100 100 0\\n100 100 100\\n') == '25.0 25.0 25.0 25.0'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 4\\n100 200 200 100\\n200 300 300 100\\n300 400 400 100\") == \\\n    \"25.000000\\n25.000000\\n25.000000\\n25.000000\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 4') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\\n'\n\"\"\"\n\nfrom math import *\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 4') == '25.000000000'\n\nassert solution('5 1') == '100.000000000'\n\nassert solution('9 9') == '900.000000000'\n\nassert solution('13 3') == '250.333333333'\n\nassert solution('8 8') == '800.000000000'"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n10 100 100 100 100\\n20 10 10 10 10') == '0.500'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0\\n4') == '25.000000000'\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE\\nNE'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == 'DA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nDA\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\nNE\\"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1\\n2\\n3\") == \"DA\"\nassert solution(\"5 3 4\\n1\\n2\\n3\") == \"DA\"\nassert solution(\"5 3 4\\n1\\n2\\n3\\n4\") == \"DA\"\nassert solution(\"5 3 4\\n1\\n2\\n3\\n4\\n5\") == \"NE\"\n\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3\n4\n5\n6\n7''') == 'DA'\n\nassert solution('''2\n4\n1\n1\nSample Output:\nNE\nNE\n'''\n) == 'NE'\n\nassert solution('''2\n3\n2\n1\nSample Output:\nDA\nDA'''\n) == 'DA'\n\nassert solution('''1\n5\n3\nSample Output:\nNE'''\n) == 'NE'\n\nassert solution('''3\n2\n2\nSample Output:\nDA'''\n) == 'DA'"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\"\"\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\nprint(solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\"))\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n7 3\") == \"6\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nlist_a = []\nfor _ in range(n):\n    list_a.append(tuple(map(int, sys.stdin.readline().strip().split())))"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n7 42\\n\") == \"6\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nprint(solution(\"2\\n0 0\\n7 42\\n\"))\n\nassert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nprint(solution(\"2\\n0 0\\n7 42\\n\"))\n\nassert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nprint(solution(\"2\\n0 0\\n7 42\\n\"))\n\nassert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nprint(solution(\"2\\n0 0\\n7 42\\n\"))\n\nassert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nprint(solution(\"2\\n0 0\\n7 42\\n\"))"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0\\n7 42\\n\") == 6\n\n-------\n\nSample Input:\n4\n0 0\n7 42\n3 6\n5 9\nSample Output:\n6\n\n-------\n\nSample Input:\n2\n0 0\n3 6\nSample Output:\n9\n\n-------\n\nSample Input:\n1\n0 0\n5 7\nSample Output:\n7\n\n-------\n\nSample Input:\n3\n0 0\n4 6\n8 9\nSample Output:\n9\n\n-------\n\"\"\"\n\n\"\"\"\n  1. sort \n  2. binary search\n  3. \n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nassert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nassert solution(\"3\\n0 0\\n7 42\\n1 2\\n7 42\\n\") == \"6\"\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0\\n7 42\\n') == 6\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0 0\\n7 42') == '6'\n\"\"\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"\\n\") == \"\"\nassert solution(\"0\\n1\") == \"\"\nassert solution(\"0\\n1\\n1\") == \"1\"\nassert solution(\"0\\n1\\n2\") == \"2\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\nassert solution('3\\n-> ALICE\\nALICE -> BOB\\nALICE BOB -> CARL') == '1'\nassert solution('3\\n-> ALICE\\nALICE -> BOB\\nALICE BOB -> CARL\\nALICE CARL -> BOB') == '4'\nassert solution('3\\n-> ALICE\\nALICE -> BOB\\nALICE BOB -> CARL\\nALICE CARL -> BOB') == '2'\nassert solution('3\\n-> ALICE\\nALICE -> BOB\\nALICE BOB -> CARL\\nALICE CARL -> BOB\\nALICE BOB -> CARL') == 'error'"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\nassert solution('2\\n-> ALICE\\nALICE -> BOB -> CARL') == '1'\nassert solution('2\\n-> ALICE\\nALICE -> BOB -> CARL') == '1'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'correct'\nassert solution('1 -> 2') == 'correct'\nassert solution('1 -> 2 -> 3 -> 4') == 'correct'\nassert solution('2 -> 1') == '1'\nassert solution('2 -> 1 -> 3') == '3'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1 2 3\n->\n4 -> 6\n6 -> 1\n\"\"\"\n) == \"correct\"\nassert solution(\n\"\"\"\n2 -> A\nA -> 2\nB -> 1\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n1 -> A\nA -> 1\nB -> 2\n\"\"\"\n) == \"2\"\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'correct'\nassert solution('ALICE -> BOB') == 'correct'\nassert solution('ALICE -> BOB -> CARL') == '1'\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"2\\n-> A\\n-> A -> B\") == \"1\"\nassert solution(\"5\\n-> A\\n-> A -> B\\nA A -> C\\nA A -> B\\nA A -> C\") == \"1\"\nassert solution(\"5\\n-> A\\n-> A -> B\\nA A -> C\\nA A -> B\\nA A -> A\") == \"correct\"\nassert solution(\"4\\n-> A\\n-> A -> B\\nA A -> C\\nA A -> B\\nA A -> A\") == \"4\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == 'correct'\n\"\"\"\n\n\"\"\"\nTheorem Proving,\nProve that Axiom $\\forall x\\in a^n, f(x)=x$\n\n1. All the axioms are valid for the first line of input\n2. If f is continuous, it is valid for all lines in the proof\n3. If f is binary, it is valid for all lines in the proof\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nprint(solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***'))\n\nExplanation:\nPenny and Marty get 1 votes each, which is not enough to get either a simple or absolute majority.\nConnie and Froggatt get 2 votes each, which is enough to get a simple majority.\nPenny and Froggatt both get a majority by their 1 votes, so Penny is the winner.\nAll other candidates received less than a simple majority, so the game is over and they get a Runoff! message.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(expected_output)\nprint(solution(str(input())))\n\n-----Solution-----\nn = 0\ncandidates = set()\nvotes_dict = {}\n\nfor line in stdin:\n    if line == \"***\":\n        break\n    \n    if line not in candidates:\n        candidates.add(line)\n        votes_dict[line] = 0\n    \n    votes_dict[line] += 1\n\nwinner = None\nmax_votes = 0\n\nfor candidate, votes in votes_dict.items():\n    if votes > max_votes:\n        max_votes = votes\n        winner = candidate"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == \"Runoff!\"\nassert solution('Penny Franklin') == \"Connie Froggatt\"\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == \"Connie Froggatt\"\nassert solution('Penny Franklin\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\n***') == \"Connie Froggatt\"\nassert solution('Penny Franklin\\nPenny Franklin\\n***') == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Penny Franklin\\n\"\n                \"Marti Graham\\n\"\n                \"Connie Froggatt\\n\"\n                \"Joseph Ivers\\n\"\n                \"Connie Froggatt\\n\"\n                \"Penny Franklin\\n\"\n                \"Connie Froggatt\\n\"\n                \"Bruce Stanger\\n\"\n                \"Connie Froggatt\\n\"\n                \"Barbara Skinner\\n\"\n                \"Barbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\n\"\n                \"Marti Graham\\n\"\n                \"Connie Froggatt\\n\"\n                \"Joseph Ivers\\n\"\n                \"Connie Froggatt\\n\"\n                \"Penny Franklin\\n\"\n                \"Connie Froggatt\\n\"\n                \"Bruce Stanger\\n\"\n                \"Barbara Skinner\\n\"\n                \"***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\n\"\n                \"Marti Graham\\n\"\n                \"Connie Froggatt\\n\"\n                \"Joseph Ivers\\n\"\n                \"Barbara Skinner\\n\"\n                \"***\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\n\"\n                \"Marti Graham\\n\"\n                \"Connie Froggatt\\n\"\n                \"Joseph Ivers\\n\"\n                \"***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\n\"\n                \"Marti Graham\\n\"\n                \"Connie Froggatt\\n\"\n                \"***\") == \"Connie Froggatt\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\n\nimport re"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\n***\\n\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\n***\\n\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\n***\\n\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\nPenny Franklin\\n***\\n\") == \"Penny Franklin\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(SAMPLE_INPUT) == '2'\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom typing import List, Dict, Set\n\nfrom icontract import require, ensure, DBC\n\n\nclass Language(DBC):\n    \"\"\"Represent a language.\"\"\"\n\n    @require(lambda name: len(name) >= 1)\n    @require(lambda name: name[0] in ascii_lowercase)\n    @require(lambda name: name[-1] in ascii_lowercase)\n    def __init__(self, name: str) -> None:\n        \"\"\"Initialize with a language name.\"\"\"\n        self.name = name\n\n    @ensure(lambda self, name: self.name == name)\n    def __eq__(self, other: \"Language\") -> bool:\n        \"\"\"Return True if both languages are same.\"\"\"\n        return self.name == other.name\n\n    @ensure(lambda self, name: self.name!= name)\n    def __ne__(self, other: \"Language\") -> bool:\n        \"\"\"Return True if both languages are not same.\"\"\"\n        return self.name!= other.name\n\n    @ensure(lambda self: self.name.islower())\n    def __repr__(self) -> str:\n        \"\"\"Represent the language as a lowercase string.\"\"\"\n        return self.name\n\n\nclass Char(DBC):\n    \"\"\"Represent a character.\"\"\"\n\n    @require(lambda name: len(name) >= 1)\n    @require(lambda name: name[0] in ascii_lowercase)\n    @require(lambda name: name[-1] in ascii_lowercase)\n    def __init__(self, name: str) -> None:\n        \"\"\"Initialize with a character name.\"\"\"\n        self.name = name\n\n    @ensure(lambda self, name: self.name == name)\n    def __eq__(self, other: \"Char\") -> bool:\n        \"\"\"Return True if both characters are same.\"\"\"\n        return self.name == other.name\n\n    @ensure(lambda self, name: self.name!= name)\n    def __ne__(self, other: \"Char\") -> bool:\n        \"\"\"Return True if both characters are not same.\"\"\"\n        return self.name!= other.name\n\n    @ensure(lambda self: self.name.islower())\n    def __repr__(self) -> str:\n        \"\"\"Represent the character as a lowercase string.\"\"\"\n        return self.name\n\n\nclass LanguageConversation(DBC):\n    \"\"\"Represent a language conversation.\"\"\"\n\n    def __init__(\n        self, character: Char, languages: Dict[Language, int]\n    ) -> None:\n        \"\"\"Initialize with a character and a mapping of languages to number of\n        conversations.\"\"\"\n        self.character = character\n        self.languages = languages\n\n    def __eq__(self, other: \"LanguageConversation\") -> bool:\n        \"\"\"Return True if both language conversations are the same.\"\"\"\n        return self.character == other.character and self.languages == other.languages\n\n    def __ne__(self, other: \"LanguageConversation\") -> bool:\n        \"\"\"Return True if both language conversations are not the same.\"\"\"\n        return not (self == other)\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the conversation as a string.\"\"\"\n        return f\"{self.character} {self.languages}\"\n\n\nclass Character:\n    \"\"\"Represent a character.\"\"\"\n\n    def __init__(self, name: str, languages: Set[Language]) -> None:\n        \"\"\"Initialize with a character name and a set of languages the character\n        speaks.\"\"\"\n        self.name = name\n        self.languages = languages\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the character as a string.\"\"\"\n        return f\"{self.name} {self.languages}\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(SAMPLE_INPUT) == OUTPUT\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\"\"\"\n) == \"2\"\n\"\"\"\n\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == \"2\"\nassert solution(test_input_1) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nprint('Test 1: ', solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n'''))\n\nassert solution('''\n9\nAnakin Skywalker Lars Jawaese\nAnakin Skywalker Lars Basic\nBib Fortuna Basic Jawaese\nChewbacca Basic Huttese\nBiggs Darklighter Basic\nDarth Vader Jawaese\nDarth Vader Basic\nHan Solo Basic Jawaese\nJabba the Hutt Jawaese\nPrincess Leia Basic Jawaese\nR2D2 Basic Jawaese\n''') == '5'\nprint('Test 2: ', solution('''\n9\nAnakin Skywalker Lars Jawaese\nAnakin Skywalker Lars Basic\nBib Fortuna Basic Jawaese\nChewbacca Basic Huttese\nBiggs Darklighter Basic\nDarth Vader Jawaese\nDarth Vader Basic\nHan Solo Basic Jawaese\nJabba the Hutt Jawaese\nPrincess Leia Basic Jawaese\nR2D2 Basic Jawaese\n'''))\n\nassert solution('''\n10\nBoba Fett Huttese Jawaese\nChewbacca Huttese Basic Jawaese\nDarth Vader Huttese Basic Jawaese\nHan Solo Huttese Basic Jawaese\nJabba the Hutt Jawaese Basic Jawaese\nPrincess Leia Huttese Basic Jawaese\nR2D2 Basic Jawaese Basic Jawaese\nTom Solo Huttese Basic Jawaese\n''') == '4'\nprint('Test 3: ', solution('''\n10\nBoba Fett Huttese Jawaese\nChewbacca Huttese Basic Jawaese\nDarth Vader Huttese Basic Jawaese\nHan Solo Huttese Basic Jawaese\nJabba the Hutt Jawaese Basic Jawaese\nPrincess Leia Huttese Basic Jawaese\nR2D2 Basic Jawaese Basic Jawaese\nTom Solo Huttese Basic Jawaese\n'''))\n\n'''\nimport copy\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\nassert solution(\n\"8\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nSebulba Jawaese\") == '3'\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"12\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\nPolly-Pitt Basic Jawaese Jawaese\") == \"7\"\nassert solution(\"6\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"1\"\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\\n\") == \"2\"\n\nSample Input:\n8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nJabba-the-Hutt Boba-Fett\nR2D2 Chewbacca\nJabba-the-Hutt Chewbacca\nJabba-the-Hutt Luke\nGrakchawwaa Jabba-the-Hutt\nR2D2 Jabba-the-Hutt\nChewbacca Grakchawwaa\nGrakchawwaa R2D2\nJabba-the-Hutt Chewbacca\nJabba-the-Hutt Luke\nR2D2 Jabba-the-Hutt\nChewbacca Grakchawwaa\nR2D2 Grakchawwaa\nGrakchawwaa R2D2\nChewbacca Grakchawwaa\nGrakchawwaa R2D2\nGrakchawwaa Chewbacca\nR2D2 Chewbacca\nJabba-the-Hutt Jabba-the-Hutt\nR2D2 Jabba-the-Hutt\nGrakchawwaa Grakchawwaa\nR2D2 Grakchawwaa\nJabba-the-Hutt Jabba-the-Hutt\nChewbacca Grakchawwaa\nJabba-the-Hutt Grakchawwaa\nR2D2 Grakchawwaa\nBib-Fortuna Luke\nGrakchawwaa Bib-Fortuna\nBib-Fortuna Grakchawwaa\nJabba-the-Hutt Jabba-the-Hutt\nJabba-the-Hutt Bib-Fortuna\nChewbacca Grakchawwaa\nR2D2 Grakchawwaa\nBib-Fortuna R2D2\nBib-Fortuna Chewbacca\nJabba-the-Hutt R2D2\nGrakchawwaa Jabba-the-Hutt\nR2D2 Jabba-the-Hutt\nBib-Fortuna R2D2\nGrakchawwaa R2D2\nGrakchawwaa Bib-Fortuna\nR2D2 Bib-Fortuna\nGrakchawwaa R2D2\nChewbacca Bib-Fortuna\nGrakchawwaa Bib-Fortuna\nJabba-the-Hutt R2D2\nGrakchawwaa Jabba-the-Hutt\nChewbacca R2D2\nGrakchawwaa R2D2\nGrakchawwaa Chewbacca\nJabba-the-Hutt Chewbacca\nChewbacca Grakchawwaa\nJabba-the-Hutt Chewbacca\nChewbacca Grakchawwaa\nGrakchawwaa R2D2\nJabba-the-Hutt Grakchawwaa\nR2D2 Grakchawwaa\nGrakchawwaa R2D2\nBib-Fortuna R2D2\nBib-Fortuna Grakchawwaa\nR2D2 Grakchawwaa\nBib-Fortuna R2D2\nGrakchawwaa R2D2\nGrakchawwaa Bib-Fortuna\nR2D2 Bib-Fortuna\nGrakchawwaa R2D2\nGrakchawwaa Bib-Fortuna\nBib-Fortuna R2D2\nGrakchawwaa R2D2\nJabba-the-Hutt R2D2\nR2D2 Grakchawwaa\nGrakchawwaa Jabba-the-Hutt\nR2D2 Bib-Fortuna\nGrakchawwaa Bib-Fortuna\nJabba-the-Hutt Grakchawwaa\nChewbacca Grakchawwaa\nJabba-the-Hutt Bib-Fortuna\nGrakchawwaa R2D2\nJabba-the-Hutt R2D2\nJabba-the-Hutt R2D2\nChewbacca Grakchawwaa\nJabba-the-Hutt R2D2\nBib-Fortuna R2D2\nGrakchawwaa R2D2\nGrakchawwaa Chewbacca\nJabba-the-Hutt Jabba-the-Hutt\nChewbacca Grakchawwaa\nJabba-the-Hutt Grakchawwaa\nChewbacca Grakchawwaa\nJabba-the-Hutt Jabba-the-Hutt\nGrakchawwaa R2D2\nChewbacca Grakchawwaa\nGrakchawwaa R2D2\nGrakchawwaa Chewbacca\nBib-Fortuna Grakchawwaa\nChewbacca Grakchawwaa\nJabba"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"\n\nn, b, h, w = [int(i) for i in input().split()]\n\nprices = [int(i) for i in input().split()]\nbeds = [int(i) for i in input().split()]\n\ndp = [[float(\"inf\")] * (w + 1) for _ in range(h + 1)]\ndp[0][0] = 0\n\nfor _ in range(n):\n    for i in range(1, h + 1):\n        for j in range(1, w + 1):\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + prices[i - 1])\n            if i - 1 >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + beds[i - 1])\n            if j - 1 >= 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + prices[i - 1])\n            if i - 1 >= 0 and j - 1 >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + prices[i - 1] * min(beds[i - 1], beds[i - 1]))\n\nans = dp[-1][-1]"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\n-------------"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n2 9 3') =='stay home'\nassert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n2 9 3') =='stay home'\nassert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n2 9 3') =='stay home'\nassert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n2 9 3') =='stay home'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1000 2 3\") == \"stay home\"\nassert solution(\"1 1000 2 3\") == 900\nassert solution(\"3 1000 2 3\") == 1300\n\nassert solution(\"4 1000 2 3\") == \"stay home\"\nassert solution(\"3 1000 2 3\") == 1300\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1000 1 3\\n200\\n27 3 20') == '900'\nassert solution('1 1000 1 3\\n200\\n27 3 20') =='stay home'\nassert solution('3 10000 1 3\\n200\\n27 3 20') =='stay home'\nassert solution('3 10000 2 3\\n200\\n27 3 20') =='stay home'\nassert solution('3 10000 1 3\\n500\\n27 3 20') =='stay home'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n') == 900\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('5 10000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') =='stay home'\nassert solution('4 1000 3 3\\n200\\n0 2 2\\n300\\n27 3 20') == '1000'\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n') == 900\nprint('Success')\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\n\nassert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20\n''') =='stay home'\n\nassert solution('''3 1000 2 3\n200\n0 2 2\n300\n20 27 3\n''') =='stay home'''"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A C D E F G A B C ') == 'C D F G A B'\nassert solution('C D F D C D F F F C ') == 'A# C D# F'\nassert solution('C D F G A B C D E F ') == 'C D F G A B C D E F'\nassert solution('C D F G A B C D E F G ') == 'C D F G A B C D E F G'\nassert solution('C D F G A B C D E F G A ') == 'C D F G A B C D E F G A B'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"10\\nC D E G\") == \"none\"\n\n\"\"\"\nfrom music.chord import Chord"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 C C C C C C\") == \"A# C D# F\"\nassert solution(\"4 E D G D B G E\") == \"A B C D# F# G\"\n\"\"\""
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nC D F G') == 'C D F G A# B'\nassert solution('5\\nA A A A A') == 'A A A A A A'\nassert solution('4\\nD G B D') == 'D G B D A# C'\n\n---------------\nSample Input:\n5\nC D F G A\nSample Output:\nC D F G A A# B C# D# E\n\n---------------\nSample Input:\n5\nC C G G B B\nSample Output:\nnone\n\n---------------\nSample Input:\n10\nA A C D D E D C C C\nSample Output:\nA A A A C D D E D C C C\n\n---------------\nSample Input:\n6\nE C D E D C D E\nSample Output:\nC D E G# A# B C# D# E\n\n-------------------\nSample Input:\n3\nE D F G\nSample Output:\nnone\n-------------------\nSample Input:\n4\nC D E G\nSample Output:\nA# C D# E\n\n------------------------\nSample Input:\n7\nE A A B A B C D\nSample Output:\nA# A# B A# C D# E\n------------------------\nSample Input:\n9\nA A G G D D C G\nSample Output:\nA A A G G D D C G C\n------------------------\nSample Input:\n10\nE D E D E D E E E\nSample Output:\nE D E D E D E E E C\n------------------------\nSample Input:\n12\nF G A B C D E G\nSample Output:\nF G A B C D E G A# B C# D# E\n------------------------\nSample Input:\n14\nF G A B C D E G B C\nSample Output:\nF G A B C D E G A# B C# D# E C\n------------------------\nSample Input:\n15\nC D E G A B C D E G A B\nSample Output:\nC D E G A B C D E G A# B C# D# E C D# F# A# B\n------------------------\nSample Input:\n21\nC C G G A B C D E G G G\nSample Output:\nC C G G A B C D E G G G A# B C# D# E C D# F# A# B\n------------------------\nSample Input:\n22\nC D E G A C D E G A\nSample Output:\nnone\n\n------------------------\nSample Input:\n5\nC C G G A B\nSample Output:\nnone\n\n--------------------\nSample Input:\n13\nC C C B C D B C\nSample Output:\nC C C B C D B C C#\n\n----------------------\nSample Input:\n7\nA A G G D D E\nSample Output:\nnone\n\n----------------------\nSample Input:\n9\nE D E D E D E D E\nSample Output:\nE D E D E D E D E C\n----------------------\nSample Input:\n10\nD G B D C B D C B G\nSample Output:\nD G B D C B D C B G A# B\n----------------------\nSample Input:\n14\nD G A B C D E G A B C\nSample Output:\nD G A B C D E G A B C C#\n----------------------\nSample Input:\n7\nE D E D E D E\nSample Output:\nnone\n\n--------------------\nSample Input:\n2\nA A\nSample Output:\nA A\n--------------------\nSample Input:\n3\nD G B\nSample Output:\nnone\n\n---------------------\nSample Input:\n6\nF D F\nSample Output:\nF D F G# A# B\n\n-------------------------\nSample Input:\n3\nF D F\nSample Output:\nF D F G# A# B\n-------------------------\nSample Input:\n3\nF D F\nSample Output:\nF D F G# A# B\n-------------------------\nSample Input:\n8\nC D E G A B C D E\nSample Output:\nC D E G A B C D E C\n-------------------------\nSample Input:\n12\nC D E G A B C D E G A B\nSample Output:\nC D E G A B C D E G A# B C# D# E\n--------------------------\nSample Input:\n13\nC D E G A B C D E G A B C\nSample Output:\nC D E G A B C D E G A# B C# D# E C D# F# A# B\n--------------------------\nSample Input:\n13\nG D E G A B C D E G A B C\nSample Output:\nG D E G A B C D E G A# B C# D# E C D# F# A# B C\n--------------------------\nSample Input:\n15\nE D E D E D E D E\nSample Output:\nE D E D E D E D E C\n--------------------------\nSample Input:\n16\nE D E D E D E D E C\nSample Output:\nE D E D E D E D E C C#\n--------------------------\nSample Input:\n7\nC C C B C D B C\nSample Output:\nC C C B C D B C C#\n--------------------------\nSample Input:\n7\nC C G G B B G\nSample Output:\nC C G G B B G G#\n--------------------------\nSample Input:\n10\nE D E D E D E D E\nSample Output:\nE D E D E D E D E C\n--------------------------\nSample Input:\n10\nC D E G A B C D E\nSample Output:\nC D E G A B C D E C\n--------------------------\nSample Input:\n10\nC D E G A C D E G\nSample Output:\nC D E G A C D E G A# B C# D# E\n--------------------------\nSample Input:\n12\nC D E G A B C D E G A B\nSample Output:\nC D E G A B C D E G A# B C# D# E C D# F# A# B\n--------------------------\nSample Input:\n12\nD G A B C D E G A B\nSample Output:\nD G A B C D E G A# B C# D# E C D# F# A# B C\n--------------------------\nSample Input:\n12\nC C C B C D"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected_output)\n\"\"\""
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"A# C D# F\"\nassert solution(\"6\") == \"C D E F G\"\nassert solution(\"2\") == \"C D\"\nassert solution(\"12\") == \"C D E F G A B\"\nassert solution(\"13\") == \"C D E F G A B C D\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C D F D C D F F F C D F F F C\") == \"A# C D# F D C D F F F C D F F F C\"\nassert solution(\"C D F D C D F F F C D F F F C D F F F C\") == \"A# C D# F D C D F F F C D F F F C D F F F C\"\nassert solution(\"C D F D C D F F F C D F F F C D F F F C D F F F C D F F F C\") == \"A# C D# F D C D F F F C D F F F C D F F F C D F F F C\"\nassert solution(\"C D F D C D F F F C D F F F C D F F F C D F F F C D F F F C\") == \"A# C D# F D C D F F F C D F F F C D F F F C D F F F C D F F F C\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"none\"\nassert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C D F D C D F F F C C D E F G A B C\") == \"A B C D# F G\"\n\n----"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\u2018dae ae ju traeligt va\u2019) == \u201cdae ae ju traeligt va\u201d\nassert solution(\u2018haer talar vi rikssvenska\u2019) == \u201chaer talar vi rikssvenska\u201d\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"v\u00e4rlden \u00e4r j\u00e4mt n\u00e4r vi g\u00e5r upp v\u00e4gen\") == \"v\u00e4rlden \u00e4r j\u00e4mt n\u00e4r vi g\u00e5r upp v\u00e4gen\"\nassert solution(\"\u00e4r ett enkelt ord som f\u00f6rsvinner.\") == \"\u00e4r ett enkelt ord som f\u00f6rsvinner.\"\nassert solution(\"b\u00e4rren \u00e4r en r\u00f6d b\u00e4r.\") == \"b\u00e4rren \u00e4r en r\u00f6d b\u00e4r.\"\n\nfrom typing import List"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\n\"\"\"\n\n\n\nimport re\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va rikssvenska \u00f6stg\u00f6tska\") == \"dae ae ju traeligt va\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"traeligt va\") == \"traeligt va\"\nassert solution(\"traeligt ca\") == \"traeligt ca\"\nassert solution(\"traeligt ca eu traeligt va\") == \"traeligt ca eu traeligt va\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae a"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"kiasjeyy fj\u00f6rtond kok fyrtug\") == \"kiasjeyy fj\u00f6rtond kok fyrtug\"\nassert solution(\"hau hau hau\") == \"hau hau hau\"\nassert solution(\"kafjeyy fj\u00f6rtond kok fyrtug\") == \"kafjeyy fj\u00f6rtond kok fyrtug\"\n\n-----Problem-----\nNocka, Ericson, \u00c4tr\u00e4skyn, Berntson, Malmhaug, Pauni, Rej\u00e4rvi, Suomalainen, Oinonen, T\u00f6rh\u00f6llin, Johannesson, Jansson, J\u00e4lten\u00e4inen, Johannesson, Albinin, Valby, Haglund, Aalto, Pihlaj\u00e4rvi, Hyv\u00e4rinen, Verst\u00e4nck, Mikkola, Heikinen, Mannerheimin, Lappelainen, Blomqvist, Haapasalo, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, S\u00e4vel, Hakala, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6nneleikka, T\u00f6ll\u00f6, Saarikki, Oksanen, Tapani, Vartiainen, Cukkonen, K\u00e4rkk\u00e4inen, Pulkkinen, J\u00e4rvel\u00e4, Isoj\u00e4rvi, Johannesson, anderasivu, S\u00e4vel, Hakala, K\u00e4rkk\u00e4inen, Pulkkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, S\u00e4vel, Hakala, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tullus, J\u00e4rvel\u00e4, J\u00e4rvenp\u00e4\u00e4, B\u00f6staks, T\u00f6ll\u00f6, Saarikki, Oksanen, Per\u00e4l\u00e4, Tarvainen, Heikkinen, anderasivu, Silm\u00e4, St\u00e5nga, Kokkonen, L\u00e4hte\u00e4n, Vainio, Tull"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ju traeligt va\") == \"haer talar vi rikssvenska\"\n\n\"\"\"\n\n\"\"\"\nsolution:\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va\" + \" \" + \"raeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va\" + \" \" + \"rikssvenska\") == \"haer talar vi rikssvenska\"\n\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\")!= 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\")!= 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\")!= 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\")!= 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('.#.#') == '#.#'\n\"\"\"\nimport numpy as np\n\nclass Array2D:\n    def __init__(self, matrix):\n        self.matrix = matrix\n        self.size = (len(matrix), len(matrix[0]))\n        self.shape = (self.size[0], self.size[1])\n    \n    def __str__(self):\n        return '\\n'.join([' '.join(['{0:1d}'.format(item) for item in row]) for row in self.matrix])\n    \n    def __getitem__(self, key):\n        row, col = key\n        return self.matrix[row][col]\n    \n    def __setitem__(self, key, value):\n        row, col = key\n        self.matrix[row][col] = value\n    \n    def rotate(self):\n        self.matrix = np.rot90(self.matrix)\n        \n    def flip_vertical(self):\n        self.matrix = np.flipud(self.matrix)\n    \n    def flip_horizontal(self):\n        self.matrix = np.fliplr(self.matrix)"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nassert solution(\"6 9\\n......#.#.\\n...#.#.#.#\\n#.##...#.#\\n.#.#....#\\n#....#...\\n..##.#.#.#\\n......##.#\\n.#...#...#\\n#...###...\\n.#.###.#.#\\n..........\") == \"......#.#.\\n...#.#.#.#\\n#.##...#.#\\n.#.#....#\\n#....#...\\n..##.#.#.#\\n......##.#\\n.#...#...#\\n#...###...\\n.#.###.#.#\\n..........\"\nassert solution(\"8 2\\n.#..#\\n#..#\\n###\\n.#.#\\n.##\\n..#\\n.##\\n#..#\\n#..#\") == \"......#..\\n#.##.#...\\n#.....###\\n......#.#\\n......##.\\n..#...#..\\n.##...#..\\n#....#...\\n#....#...\\n......##.\"\nassert solution(\"4 4\\n#.#\\n..\\n#.#\\n..\\n#.#\") == \"..\\n#..\\n#.#\\n#.#\\n.#.\\n..\\n#..\\n#.#\\n.#.\"\nassert solution(\"7 7\\n..##.\\n..#.#\\n......\\n.#..#\\n.#...#\\n.#.#.\\n#.#.##\\n#.#...\\n#.#.#\") == \"...#..#\\n..#..##\\n#.#..#..\\n#..#..#.\\n#.#..#.#\\n##.###..\\n#...#.##\\n.##.#.#.\\n#.#.##.#\\n##.###.#\\n#.##.###\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"....#\\n....#\\n#.....\\n......\\n##...#\") == \"E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".#.\\n..#\") == 'E..E'\n\"\"\"\n\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, grid: str) -> str:\n        pass\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('11') == '11'\nassert solution('101') == '101'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".##..##.####.####..#.####\") == \"###..####.####.#..#.###\"\nassert solution(\"####.#.#..#.#..##.##.###.##\") == \"##.####.##.#.#.#..##.##.###\"\nassert solution(\"##.#...#........#......#.#..\") == \"#.#...#........#...#...#..\"\nassert solution(\"#..##.###..##...#..#.#####..#\") == \".##.###.##..##...#..#.#####..\"\nassert solution(\"#..#.#.#.##.#..#.####.###..#\") == \"#..#.#.#.##.#..#.####.####.#..\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"1 8 2 4 10 3 25 14\") == \"1 10 3 8 4 2\"\nassert solution(\"9 5 6 10 3 8 7 2 4\") == \"9 8 2 7 4 6 10 3\"\nassert solution(\"9 5 6 10 3 8 7 2 4\") == \"9 8 2 7 4 6 10 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\nSolution 1\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '9 0 3'\n) == '4'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n\ne, f, c = [int(i) for i in stdin.split()]\nprint(e + f//c + (e + f%c > 0))\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('8 9 3') == '2'\nassert solution('8 0 3') == '0'\nassert solution('8 0 0') == '0'\nassert solution('8 2 3') == '1'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\nassert solution(\"1 0 1\") == \"1\"\n\nassert solution(\"9 0 0\") == \"0\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"0 0 1\") == \"1\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('0 0 0') == '0'\nassert solution('9 1 3') == '8'\nassert solution('4 2 3') == '3'\nassert solution('4 2 1') == '1'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1010') == '12'\nassert solution('11010') == '132'\n\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1010''') == '12'\nassert solution('10010') == '14'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010\") == 12\n\nassert solution(\"101010\") == 210\n\nassert solution(\"1110111101111111\") == 83236082\n\nassert solution(\"111111111111111111\") == 2147483647\n\nassert solution(\"\") == 0"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1010') == '12'\nassert solution
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"10101\") == \"49\"\nassert solution(\"1101110111010\") == \"71148\"\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == 12\n\"\"\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010') == '12'\n\nassert solution('10101010') == '140'\nassert solution('10101010') == '140'\nassert solution('101101') == '134'\nassert solution('101101010') == '136'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == '12'\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010') == '12'\nassert solution('1100') == '8'\nassert solution('1111') == '9'\nassert solution('10010010110') == '189'\n\"\"\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"100010\") == \"52\"\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\"\n\nR, S = map(int, stdin.readline().split())\n\ncount = 0\n\nfor i in range(R):\n    for j in range(S):\n        if stdin[i][j] == 'o':\n            count += 1\n            continue\n\nprint(count)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\n------Solution------\n\nfor line in stdin:\n    r = [0] * 100\n    for c in line:\n        r[c] += 1\n    print(sum([max(0, r[i]//2) for i in range(100)]))\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n..o\\no..') == 2"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n..o\\no..') == 2\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\n* 1st line: 2 integers of size 1 to 50\n* 2nd line: rows of size 1 to 50 (all of them)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 3\n.o\no..\"\"\") == \"2\"\nassert solution(\"\"\"3 3\n.o\no.o\n..o\"\"\") == \"0\"\n\"\"\"\n\nfrom itertools import combinations, permutations, chain\nfrom functools import reduce\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n..o\\no..\\n\") == 2\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".oo\") == 0\nassert solution(\".o.o\") == 1\nassert solution(\"..o.\") == 1\nassert solution(\"..oo\") == 2\n\nprint(solution(stdin))\n\nSample Input:\n2 4\noo.\n..o\nSample Output:\n0\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin_lines) == expected_stdout_lines"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution('5 3\\n1 2\\n3 2\\n1 3\\n1 2') == 'LADICA\\nSMECE\\nSMECE'\nassert solution('5 3\\n3 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nSMECE\\nSMECE'\n\n\"\"\"\n\nn, l = map(int, input().split())\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    if a < b:\n        print(\"LADICA\")\n    else:\n        print(\"SMECE\")\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n\"\"\") == \"\"\"\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n2 2\n2 3\n1 2\n1 3\n1 2\n\"\"\") == \"\"\"\nLADICA\nSMECE\nLADICA\nSMECE\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\nLADICA\nLADICA\nSMECE\nSMECE\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE'\nprint('Test pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\n-----Constraints-----\n1 <= N <= 300000\n1 <= L <= 300000\nL % 2 == 0\n1 <= A_ i, B_ i <= L\n\n-----\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\nfrom string import ascii_uppercase\nfrom utils import CommonUtils\n\nFILE_NAME: str = 'task_2.txt'\nROOMS_COUNT: int = int(input())\nROOMS: List[deque] = [deque() for _ in range(ROOMS_COUNT)]\nFULL: int = 0\n\nfor i in range(ROOMS_COUNT):\n    first, second = list(map(int, input().split()))\n    ROOMS[i].append((ascii_uppercase[first - 1], ascii_uppercase[second - 1]))\n\nfor room in ROOMS:\n    while room:\n        first, second = room.popleft(), room.pop()\n        if first[0]!= second[0]:\n            FULL += 1\n        elif first[1]!= second[1]:\n            FULL += 1\n\nprint(FULL // 2)"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"LADICA\"\nassert solution(\"1 3\") == \"LADICA\"\nassert solution(\"2 2\") == \"SMECE\"\nassert solution(\"1 1\") == \"SMECE\"\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 2\n1 3\n1 2\n1 3\n1 2''') == '''LADICA\nLADICA\nLADICA\nSMECE\nSMECE'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n0') == '1 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\nassert solution(\"2\\n1\") == \"2 1\"\nassert solution(\"4\\n0 1 1 1\") == \"3 2 1\"\nassert solution(\"2\\n0 1\") == \"1 2\"\nassert solution(\"5\\n2 1 4 3 4\") == \"4 3 2 5 1\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0\\n1') == '1 0'\nassert solution('2\\n1 1') == '1 2'\nassert solution('2\\n1 0') == '1 2'\nassert solution('3\\n2 1 1') == '1 3'\nassert solution('3\\n2 2 1') == '1 2 3'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(sample_input_lines)) == str(sample_output)\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1\") == \"1 2\"\n\"\"\"\n\nfrom typing import List, Tuple\n\nclass Solution:\n    \"\"\"O(N) / O(1)\"\"\"\n    def solution(self, n: int) -> str:\n        people = list(range(1, n))\n        people.insert(0, 0)\n\n        i = 0\n        while True:\n            i += 1\n            j = 0\n            while j < len(people):\n                people[j] = people[j + 1]\n                j += 1\n            people[len(people) - 1] = people[0]\n            if people == list(range(1, n)):\n                return''.join(map(str, people))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2\\n0') == '1 2'\nassert solution('3\\n1 2 0') == '1 2 3'\nassert solution('3\\n2 1 0') == '2 1 3'\nassert solution('3\\n0 2 1') == '2 3 1'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n0''') == '1 2'\nassert solution('''1\n1''') == '1'\nassert solution('''2\n1\n''') == '2 1'\nassert solution('''3\n1\n2\n''') == '2 1 3'\nassert solution('''5\n3\n2\n2\n0\n4\n''') == '3 4 1 2 5'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 1\\n\") == \"1 2\"\n\nsolution(\"4\\n0 2 2 2\\n\") == \"1 3 2\"\n\nsolution(\"10\\n2 3 3 4 3 5 3 1 1 1\\n\") == \"1 6 3 4 2 5 7 8 9 10\"\n\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 2 3\") == \"1 2 3 0\"\n\n'''\nfrom typing import List\n\nn = int(stdin.readline())\nline = [int(i) for i in stdin.readline().strip().split(' ')]"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n0') == '1 2'\nassert solution('3\\n0 1') == '2 1 3'\nassert solution('4\\n0 1 2 3') == '3 2 1 4'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n0 1\\n1 2\\n3 2\\n0 2\\n') == '1'\n\nassert solution('4 2 1\\n1 2\\n0 1\\n0 2\\n0 3\\n') == '2'\n\nassert solution('6 2 1\\n1 2\\n1 3\\n1 4\\n3 5\\n1 6\\n') == '2'\n\nassert solution('6 2 1\\n0 2\\n1 2\\n1 3\\n1 4\\n3 5\\n1 6\\n') == '3'\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\") == \"1\"\nassert solution(\"4 2 3\") == \"3\"\nassert solution(\"4 2 5\") == \"5\"\nassert solution(\"1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport itertools\nimport operator\nimport sys\nfrom collections import Counter\nfrom typing import List, Tuple\n\nimport numpy as np\n\nsys.stdin = open(\"input.txt\")\n\nN, H, L = list(map(int, input().split()))\nhorror_list = list(map(int, input().split()))\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == '1'\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 0\") == \"0\"\nassert solution(\"4 4 0\") == \"0\"\nassert solution(\"4 6 3\") == \"3\"\nassert solution(\"4 1 3\") == \"3\"\nassert solution(\"4 3 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 5\\n3 1 2\\n3 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"1\"\nassert solution(\"5 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"0\"\nassert solution(\"5 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"0\"\nassert solution(\"5 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"0\"\nassert solution(\"5 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"0\"\n\n\"\"\"\n\nimport math\n\nN, H, L = map(int, input().split(' '))\nhorror = list(map(int, input().split(' ')))\nS = []\n\nfor i in range(L):\n    a, b = map(int, input().split(' '))\n    S.append((a, b))\n    S.append((b, a))\n\nS = list(set(S))\n\nHI = dict()\n\nfor i in range(N):\n    HI[i] = float('inf')\n\nfor a, b in S:\n    if b in horror:\n        HI[a] = 0\n    elif HI[a] + 1 < HI[b]:\n        HI[a] = HI[b] + 1\n\nres = sorted(HI, key=lambda x: HI[x])\n\nprint(res[0])\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4 6\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\nassert solution(\"7 5 6\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '4'\n\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"0\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n\"\"\") == '1'\nassert solution(\"\"\"6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n\"\"\") == '0'\nassert solution(\"\"\"4 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n\"\"\") == '0'\nassert solution(\"\"\"6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n1 2\n2 4\n4 5\n3 5\n0 2\n0 2\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 3 4''') == '4 3 1'\n\nassert solution('''2\n3 2''') == 'impossible'\nassert solution('''1\n1''') == 'impossible'\n\nassert solution('''3\n1 3 4''') == '4 3 1'\nassert solution('''3\n3 4 1''') == 'impossible'"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2 3 1 5 4\n''') == '1 2 3 4 5'\n\nassert solution('''\n2\n5 4\n''') == 'impossible'\n\nassert solution('''\n4\n2 1 4 3\n''') == '4 1 2 3'\n\nassert solution('''\n4\n1 2 3 4\n''') == 'impossible'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == 'impossible'"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 3 4\n''') == '4 3 1'\n\nassert solution('''\n5\n3 2 4 1 5\n''') == 'impossible'\n\nassert solution('''\n4\n2 1 3 4\n''') == '2 1 4 3'\n\nassert solution('''\n3\n1 4 2\n''') == '1 2 4'\n\nassert solution('''\n2\n1 2\n''') == 'impossible'"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n5 1 3') == 'impossible'\nassert solution('5\\n1 2 3 4 5\\n3\\n5 1 3') == '4 3 1'\nassert solution('5\\n1 2 3 4 5\\n3\\n5 1 3') == 'impossible'\nassert solution('5\\n1 2 3 4 5\\n3\\n5 1 3') == '4 3 1'\nassert solution('5\\n1 2 3 4 5\\n3\\n5 1 3') == 'impossible'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 4\") == \"4 3 1\"\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"4\\n1 3 4\") == \"impossible\"\nassert solution(\"7\\n1 3 4 3 5 6 7\") == \"7 5 6 4 3 1 2\"\n\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 4\\n') == '4 3 1'\nassert solution('1 3 2\\n') == 'impossible'\nassert solution('1 1 1\\n') == 'impossible'\nassert solution('1 3 4\\n') == '4 3 1'\nassert solution('1 1 1\\n') == 'impossible'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"5\\n10 12 2 4 3\") == \"12 10 4 3 2\"\nassert solution(\"4\\n1 3 4 5\") == \"impossible\"\nassert solution(\"1\\n4\") == \"4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"2\\n2 3\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nn, p, k = map(int, stdin.readline().split())\nt = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 20 15') == '18.400'\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 20 15', '3 10') == '18.400'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nimport sys\nfrom math import floor"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\nassert solution(\"2 30 40\\n2 5\") == \"34.085\"\nassert solution(\"3 10 3\\n10 1 3\") == \"90.731\"\nassert solution(\"2 20 15\\n3 10\\n3 10\") == \"20.255\"\nassert solution(\"2 10 30\\n2 10\\n2 10\") == \"0.0\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 20 15') == '18.400'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\nassert solution(\"2 20 15\\n3 10\\n8 10\") == \"8.000\"\nassert solution(\"2 20 15\\n3 10\\n8 10\\n8 20\") == \"6.666\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nimport math\n\nn, p, k = [int(i) for i in stdin.split()]\nt = [int(i) for i in stdin.split()]\nt = sorted(t)\n\norig = 0\nfor i in range(n):\n    orig += math.ceil(k/t[i]) * t[i]\n\nprint(orig)\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == 5\n\n----\n\nN = int(stdin.readline())\n\nspies = []\nhouses = []\nfor _ in range(N):\n    line = stdin.readline().strip()\n    for i in range(len(line)):\n        if line[i] == 'S':\n            spies.append((i, _))\n        elif line[i] == 'H':\n            houses.append((i, _))\n\ndistances = [[0] * N for _ in range(N)]\n\nfor sx, sy in spies:\n    for hx, hy in houses:\n        distances[sy][sx] = min(distances[sy][sx], abs(sx - hx) + abs(sy - hy))\n        distances[hy][hx] = min(distances[hy][hx], abs(sx - hx) + abs(sy - hy))\n\nprint(max(map(max, distances)))\n\n----\n\n5\n....H\n.....\nS....\n....H\n.....\n\n5\n....H\n.....\nS....\n....H\n.....\n\n5\n....H\n.....\n....S\n....H\n.....\n\n5\n....H\n.....\nS....\nH....\n.....\n\n5\nS....\n....H\n.....\n....S\n....H\n.....\n\n5\nS....\n....H\n.....\n....S\n....H\n.....\n\n5\n...H\nH...S\n...S\n...H\nH...S\n.....\n\n5\n...H\nH...S\n...S\n...H\nH...S\n.....\n\n5\n...H\nH...S\n...S\n...H\nS....\n.....\n\n5\n...H\nH...S\n...S\n...H\nS....\n.....\n\n5\n...H\nH...S\n...S\n...H\nS....\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S\n.....\n\n5\n...S\nS...H\n...H\nH...S"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".H.H.H.S\") == 3\nassert solution(\".S..S.S.S\") == 3\nassert solution(\"...S....\") == 3\nassert solution(\"...H....\") == 1\nassert solution(\"...S.S....\") == 3\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == '5'\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\nassert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\nassert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\nassert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\nassert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".H.H..H......S......\") == 6\nassert solution(\".H.H..H......S.....\") == 6\nassert solution(\".H.H..H......S....S....\") == 5\nassert solution(\".H.H..H......S....S....H\") == 4\n\"\"\"\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\nassert solution(\"5 2 3\\n2 4\\n1 3 5\\n1 2\\n2 5\\n3 4\\n\") == \"1\"\nassert solution(\"5 2 3\\n2 4\\n1 3 5\\n1 2\\n2 5\\n3 4\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\n\u041f\u043e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u043c, \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\u043c, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0438\u0433\u043e\u043d, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432\u0441\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0432. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0432 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0412 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0440\u0430\u0432\u043d\u044b \u0435\u0441\u043b\u0438 \u0438\u0445 \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0430\u0442\u043d\u0430 \u0442\u0440\u0451\u043c \u0438 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0434\u043b\u0438\u043d\u044b \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0434\u043b\u0438\u043d \u0440\u0451\u0431\u0435\u0440, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0440\u0451\u0431\u0440\u0430\u043c \u0432 \u043d\u0451\u043c, \u0438 \u0434\u043b\u0438\u043d\u044b \u0440\u0451\u0431\u0435\u0440 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043e\u0442 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043a \u043b\u0435\u0432\u043e\u043c\u0443 \u0432\u0435\u0440\u0445\u043d\u0435\u043c\u0443. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0432:\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430: \u0432\u0441\u0435 \u0434\u0432\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0439. \u041f\u043e\u043b\u0438\u0433\u043e\u043d\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u043f\u043e\u043b\u0438\u0433\u043e\u043d\u043e\u0432.\n\n\u0420\u0438\u0441. \u041e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u0447\u0435\u0442\u044b\u0440\u044c\u043c\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438. \u0412 \u044d\u0442\u043e\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435 \u043d\u0430\u0448\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n\u0420\u0438\u0441. \u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0432 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043e\u0442 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043a \u043b\u0435\u0432\u043e\u043c\u0443 \u0432\u0435\u0440\u0445\u043d\u0435\u043c\u0443. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0432 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043e\u0442\u0440\u0435\u0437\u043a\u0430, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u043f\u0440\u0430\u0432\u043e\u0439 \u043d\u0438\u0436\u043d\u0435\u0439 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043e\u0439.\n\n\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u043e\u0439 \u0447\u0435\u0442\u044b\u0440\u0435\u0445\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430:\n\n\u0420\u0438\u0441. \u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u043e\u0439\n\n\u0412\u044b\u0432\u043e\u0434: \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u0442\u0440\u0435\u043c\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438 - \u044d\u0442\u043e \u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043e\u0441\u0442\u044c \u0432 \u0432\u044b\u0431\u043e\u0440\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435.\n\n\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u0442\u0440\u0435\u043c\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438 - \u044d\u0442\u043e \u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043e\u0441\u0442\u044c \u0432 \u0432\u044b\u0431\u043e\u0440\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435.\n\n\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u0442\u0440\u0435\u043c\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430\u043c\u0438 - \u044d\u0442\u043e \u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043e\u0441\u0442\u044c \u0432 \u0432\u044b\u0431\u043e\u0440\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\nassert solution('5 2 1\\n2 4\\n1 3 5') == '0'\nassert solution('5 3 2\\n3 4\\n1 5 2') == '0'\n'''\nimport math"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 5\") == \"0\"\nassert solution(\"2 4 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\\n1 2 3 4\\n3 5\") == 0\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n'''\n\nimport sys\nimport collections"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\\n\") == \"0\"\n\n------CODE------\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 3\n2 4\n1 3 5''') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3\\n1 3\\n2 4 5') == 0\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().split()))\n\nb = list(map(int, sys.stdin.readline().split()))\n\nc = list(map(int, sys.stdin.readline().split()))\n\nb = sorted(set(b))\n\nc = sorted(set(c))\n\nfor i in range(len(b)):\n    if b[i] - 1 > a[0] or c[i] - 1 > a[0]:\n        print(i)\n        break\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\nassert solution(\"2 6\") == \"0.33333333\"\nassert solution(\"100 100\") == \"0.11111111\"\nassert solution(\"12 12\") == \"0.11111111\"\nassert solution(\"9 90\") == \"0.11111111\"\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == '0.0'\n\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == '0.000000'\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0 1\\n0 1') == '0.000000'\nassert solution('2 1\\n1 1') == '0.500000'\nassert solution('2 5\\n2 3') == '0.666667'\nassert solution('6 10\\n4 2') == '0.416667'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '0.0'\nassert solution('1 2\\n') == '0.5'\nassert solution('1 10\\n') == '0.1'\nassert solution('2 100\\n') == '0.2'\nassert solution('1 100\\n') == '0.01'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '0.000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\nassert solution(\"2 3\") == \"0.142857143\"\nassert solution(\"4 4\") == \"0.50000000\"\nassert solution(\"6 9\") == \"0.444444444\"\nassert solution(\"11 15\") == \"0.777777778\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('5 7\\n') == '0.142857143'\nassert solution('7 8\\n') == '0.928571429'\nassert solution('5 7\\n') == '0.142857143'\nassert solution('7 8\\n') == '0.928571429'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\nassert solution(\"2 5\") == \"0.100\"\nassert solution(\"20 4\") == \"0.08333\"\nassert solution(\"100 10\") == \"0.09090909090909091\"\nassert solution(\"1 1\") == \"0.000000000\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100''') == 2\nassert solution('''5\n100 101 102 103 488\n100 200 300 101 102\n101 102 103 488 100\n101 100 200 300 102\n101 101 200 488 100''') == 1\nassert solution('''11\n100 101 102 103 488\n100 200 300 101 102\n101 102 103 488 100\n101 100 200 300 102\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 300 102\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100\n101 101 200 300 102\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100''') == 0\nassert solution('''10\n100 101 102 103 488\n101 100 200 300 103\n101 101 200 300 102\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100\n101 101 200 300 102\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100''') == 0\nassert solution('''9\n100 101 102 103 488\n101 100 200 300 103\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100\n101 101 200 300 103\n101 101 200 488 100\n101 101 200 300 103''') == 0\n'''\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 101 102 103 488\") == 2\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n\") == \"2\"\n'''\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == 2\n\n-----Explanation-----\nThe first frosh makes the following combinations:\n\n100, 101, 102, 103, 488\n100, 101, 102, 103, 488\n100, 101, 102, 103, 488\n100, 200, 300, 101, 102\n103, 102, 101, 488, 100\n\nThese combinations have popularity 2, 3, 3, 2, and 2 respectively.\n\nThe second frosh makes the following combinations:\n\n100, 200, 300, 101, 102\n100, 200, 300, 101, 102\n\nThese combinations have popularity 2 and 3, respectively.\n\nSo, the total number of students taking the most popular combination of courses is 2 + 3 = 5.\n\n\"\"\"\n\n\"\"\"\nimport collections\n\nassert solution('100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == 5\nassert solution('100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n500 1000 9800') == 3\nassert solution('100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n500 1000 9800\\n400 600 700 800') == 2\nassert solution('100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n500 1000 9800\\n400 600 700 800\\n600 700 800 700') == 1\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 101 102 103 488\") == 2\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"4\\n1 2 3 4\\n2 3 4 1\\n4 1 3 2\\n3 1 4 2\\n3 1 4 2\") == \"2\"\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2\n100\n101\n101\n102\n102\n\"\"\"\n) == \"\"\"\n2\n\"\"\"\n)\nassert solution(\n\"\"\"\n2\n100\n100\n101\n101\n\"\"\"\n) == \"\"\"\n0\n\"\"\"\n)\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 101 102 103 488\") == \"2\"\nassert solution(\"100 200 300 101 102\") == \"3\"\nassert solution(\"103 102 101 488 100\") == \"3\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 101 102 103 488\") == 2\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1730') == '1729'\nassert solution('4000') == '3990'\nassert solution('1870') == '1930'\nassert solution('1794') == '1793'\nassert solution('1799') == '1798'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1234\") == \"None\"\n\"\"\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"1629\") == \"1629\"\nassert solution(\"1160\") == \"1160\"\nassert solution(\"723\") == \"723\"\nassert solution(\"1730\") == \"1729\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'\nassert solution('17') == 'None'\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == None\nassert solution('1730') == '1729'\nassert solution('400') == '403'\nassert solution('300') == '301'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1730') == 1729\nassert solution('0') == None\nassert solution('1') == None\n\nassert solution('') == ''\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1730') == '1729'\nassert solution('1627') == '1729'\nassert solution('1621') == '1621'\nassert solution('1316') == '1316'\nassert solution('16') == '16'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1730') == '1729'\nassert solution('1732') is None\nassert solution('240000000') == '16018022'\n\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1730') == '1729'\nassert solution('400000') == 'none'\nassert solution('1651') == 'none'\nassert solution('100001') == 'none'\nassert solution('1') == 'none'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('65536') == '16'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('65536') == '16'\nassert solution('101010') == '4'\nassert solution('100010') == '10'\nassert solution('111111') == '11'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"65536\") == \"16\"\n\n------Hint----\nFind all possible values of $k$ such that the sum of the values is equal to $X$.\n\"\"\"\n\nfrom typing import List, Tuple, Iterator\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(65536) == 16\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65536') == 16\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('65536') == 16\n'''"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65536') == 16\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('65536') == '16'\nprint(solution('65536'))"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == 2\nassert solution('3\\n....\\n....\\n...K') == -1\nassert solution('3\\n....\\n....\\nK') == 0\nassert solution('1\\n....\\n....\\nK') == 0\n\n----\n\"\"\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''....\n....\n....\n...K''') == '2'\n\nassert solution('''....\n....\n....\n...K\n..#..\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n....\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"4\\n....\\n....\\n....\\nK...\") == \"0\"\nassert solution(\"4\\n#....\\n....\\n....\\n#K...\") == \"-1\"\nassert solution(\"4\\n....\\n....\\n....\\n..#K\") == \"-1\"\nassert solution(\"4\\n#....\\n....\\n....\\n#..K\") == \"-1\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == 2\n\"\"\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\n....\n....\n....\n...K') == '2'\nassert solution('4\n....\n....\n....\n...K') == '-1'\n\n-----Notes-----\n\n\"\"\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('.....') == '0'\nassert solution('....') == '1'\nassert solution('...K') == '-1'\nassert solution('K...') == '-1'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n'''"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"3\\n..#\\n#..\\n..K\") == \"1\"\nassert solution(\"3\\n##\\n#K\\n\") == \"0\"\nassert solution(\"3\\n#K\\n#K\\n\") == \"0\"\nassert solution(\"3\\n#K\\n..K\\n\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nmatrix = [None]*n\n\nfor i in range(n):\n    matrix[i] = list(sys.stdin.readline().strip())\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('....\\n....\\n....\\n...K') == '2'\nassert solution('....\\n....\\n....\\nK...') == '-1'\nassert solution('...K\\n....\\n....\\n....') == '-1'\nassert solution('....\\n....\\n....\\nK....') == '4'\n\"\"\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == '2'\nassert solution(\"....\\n....\\n....\\nK..\") == '-1'\nassert solution(\"....\\n....\\n....\\nK...\\n.##\") == '3'\nassert solution(\"....\\n....\\n....\\nK...\\n#.#\") == '-1'\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\nprint('OK')\n\nCase #1\n400 2\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400\n400"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\"\"\"\nimport sys"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == 'too late'\nassert solution('5 0\\n1\\n2\\n3\\n4\\n5') == '1'\nassert solution('5 3\\n1\\n2\\n3\\n4\\n5') == 'too late'\nassert solution('5 3\\n1\\n2\\n3\\n4\\n5') == '1'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\n------Hints------\nHow might you use the array of available rooms?\nHow might you determine if there are available rooms?\n\n------Solution------\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\nSample Input:\n100 10\n42\n3\n2\n99\n1\nSample Output:\ntoo late\n\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"\n\nimport sys\n\nr, n = map(int, sys.stdin.readline().split())\n\nnumbers = [int(sys.stdin.readline().strip()) for _ in range(n)]"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"HUGOASGXFDKMJEUXKVYPTBUZMIS\"\nassert solution(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"QJEZWXNBMKMNKOQJQPSZVYYDLX\"\nassert solution(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"QJEZWXNBMKMNKOQJQPSZVYYDLX\"\nassert solution(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"QJEZWXNBMKMNKOQJQPSZVYYDLX\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"JNKYUMSRIGLYXSHBHBEBIBXUBSC\"\n\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"SSWQHWWKLZYEXUBSMUNPR\"\n\n-----------------\n\nimport string"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('playfair example') == 'BMNXDUZIYHMKLVPBJMBXVUXAZDQKDEZOVEGMRWYW'\nassert solution('hide the gold in the tree stump') == 'VMESMCLKXNWHRITZFQVJGVVKWNQEIEZ'\nassert solution('you must change all fifty dollars') == 'TKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV'\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nTest Cases\n==========\nInput:\nhide the gold in the tree stump\nOutput:\nVMESMCLKXNWHRITZFQVJGVVKWNQEIEZ\n\nInput:\ntwo birds, two stones\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlets meet at eight o'clock\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlearn the facts of mathematics\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ngrow your brain\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nfind the key to success\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ngo through the process\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlets meet at eight o'clock\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlearn the facts of mathematics\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ngrow your brain\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nfind the key to success\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlets meet at eight o'clock\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlearn the facts of mathematics\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ngrow your brain\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nfind the key to success\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlets meet at eight o'clock\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlearn the facts of mathematics\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ngrow your brain\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nfind the key to success\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\ndo not argue with the data\nOutput:\nTKDMLMRUYWOLGKXCXKYSTNGHAIWPQJGVV\n\nInput:\nlets meet at eight o"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'A'\nassert solution('a b') == 'A B'\nassert solution('a b c d e f') == 'A B C D E F'\nassert solution('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"EMHQMYWPIYZRSXKYYNCRBRKOCQV\"\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"SJVJKJHRIJZFTVBLNWNIGXISNML\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"JNFQWKBLHDPWMPXUUTYVBHTSVVDXZQ\"\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('./fixtures/input/input_1.txt')) == 'The gopher cannot escape.'\nassert solution(open('./fixtures/input/input_2.txt')) == 'The gopher can escape through the hole at (-4.0, -4.0).'\nassert solution(open('./fixtures/input/input_3.txt')) == 'The gopher can escape through the hole at (-4.0, -4.0).'\nassert solution(open('./fixtures/input/input_4.txt')) == 'The gopher can escape through the hole at (-4.0, -4.0).'\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        gopher_x, gopher_y = [float(num) for num in input.strip().split(' ')]\n        dog_x, dog_y = [float(num) for num in input.readline().strip().split(' ')]\n\n        gopher_hole_x = []\n        gopher_hole_y = []\n        for line in input.readlines():\n            x, y = [float(num) for num in line.strip().split(' ')]\n            gopher_hole_x.append(x)\n            gopher_hole_y.append(y)\n\n        def find_hole_at(x, y):\n            return (x, y) if Counter(\n                [\n                    (x - gopher_x, y - gopher_y),\n                    (x + gopher_x, y - gopher_y),\n                    (x - gopher_x, y + gopher_y),\n                    (x + gopher_x, y + gopher_y)\n                ]\n            )['('] == 1 else (None, None)\n\n        for gopher_hole_x_, gopher_hole_y_ in zip(gopher_hole_x, gopher_hole_y):\n            if find_hole_at(gopher_hole_x_, gopher_hole_y_)!= (None, None):\n                return 'The gopher can escape through the hole at (%s, %s).' % find_hole_at(gopher_hole_x_, gopher_hole_y_)\n        return 'The gopher cannot escape.'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == \"The gopher cannot escape.\"\n\nassert solution(\"1.0 1.0 2.0 2.0\\n1.5 2.0\") == \"The gopher can escape through the hole at (1.5, 2.0).\"\n\nassert solution(\"1.0 1.0 2.0 2.0\\n2.0 2.0\") == \"The gopher can escape through the hole at (2.0, 2.0).\"\n\n\"\"\"\n\n\nimport math\nimport re"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == 'The gopher cannot escape.'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([\"1.500 1.500\", \"1.500 1.500\"]) == \"The gopher cannot escape.\"\nassert solution([\"1.500 1.500\", \"2.000 2.000\", \"1.500 1.500\"]) == \"The gopher can escape through the hole at (2.000, 2.000).\"\nassert solution([\"2.000 2.000\", \"1.500 1.500\", \"1.500 1.500\"]) == \"The gopher can escape through the hole at (1.500, 1.500).\"\nassert solution([\"1.500 1.500\", \"1.500 1.500\", \"1.500 1.500\", \"1.500 1.500\", \"1.500 1.500\"]) == \"The gopher can escape through the hole at (1.500, 1.500).\"\nassert solution([\"2.000 2.000\", \"1.500 1.500\", \"2.000 2.000\", \"1.500 1.500\", \"1.500 1.500\", \"2.000 2.000\", \"1.500 1.500\"]) == \"The gopher can escape through the hole at (1.500, 1.500).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n') == 'The gopher cannot escape.'\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500') == 'The gopher cannot escape.'\n\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1.0 2.0 3.0 4.0\n1.5 1.5\n''') == 'The gopher cannot escape.'\n\nassert solution('''1.0 1.0 2.0 2.0\n1.0 1.0\n''') == 'The gopher can escape through the hole at (1.0,1.0).'\n\nassert solution('''1.0 2.0 3.0 4.0\n1.0 1.0\n1.0 2.0\n2.0 1.0\n2.0 2.0\n''') == 'The gopher can escape through the hole at (1.0,2.0).'\n\nassert solution('''1.0 2.0 3.0 4.0\n1.0 1.0\n1.0 2.0\n2.0 1.0\n2.0 2.0\n''') == 'The gopher can escape through the hole at (1.0,2.0).'\n'''"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.0 1.0\\n1.5 1.5\\n\") == \"The gopher can escape through the hole at (1.0, 1.0).\"\n\n-----Note-----\n- If a solution does not exist, output \"The gopher cannot escape.\".\n\n- You may assume all test cases are valid.\n- If the gopher and dog reach the same hole at the same time, the gopher escapes successfully.\n\n\"\"\"\nfrom typing import List, Tuple, Dict\nfrom math import sqrt, pow\n\n\nclass Point:\n    def __init__(self, x: float, y: float):\n        self.x: float = x\n        self.y: float = y\n\n    def distance(self, point: 'Point') -> float:\n        return sqrt(pow(self.x - point.x, 2) + pow(self.y - point.y, 2))\n\n    def __str__(self) -> str:\n        return f\"({self.x},{self.y})\"\n\n    def __repr__(self) -> str:\n        return f\"Point({self.x},{self.y})\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'The gopher cannot escape.'\nassert solution('1.0 1.0 2.0 2.0') == 'The gopher can escape through the hole at (0.0, 1.0).'\nassert solution('1.0 1.0 2.0 2.0\\n1.5 1.5') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('1.0 1.0 2.0 2.0\\n1.0 1.0\\n1.5 1.5') == 'The gopher can escape through the hole at (0.0, 1.0).'\nassert solution('1.0 1.0 2.0 2.0\\n1.0 1.0\\n1.0 1.0\\n1.5 1.5') == 'The gopher can escape through the hole at (0.0, 1.0).'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"0.000 1.000 0.000 1.000\\n0.500 1.500\") == \"The gopher can escape through the hole at (0.500, 0.500).\"\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n3 3\\n3\\n') == 'Y'\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 4, 3) == 'Y'\nassert solution(3, 4, 1) == 'N'\nassert solution(3, 4, 10) == 'N'\nassert solution(3, 4, 5) == 'N'\nassert solution(3, 4, 6) == 'Y'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 -3\\n3 3\\n3\") == \"Y\"\nassert solution(\"8 6 1\\n8 6\\n1\") == \"N\"\nassert solution(\"5 -5 0\\n5 5\\n0\") == \"Y\"\nassert solution(\"0 -2\\n0 2\\n0\") == \"N\"\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3, 4, 3) == 'Y'\nassert solution(3, 3, 3) == 'Y'\nassert solution(1, 1, 2) == 'N'\nassert solution(2, 1, 2) == 'N'\nassert solution(2, 1, 1) == 'Y'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('1 0\\n5 5\\n0') == 'N'\nassert solution('0 5\\n5 0\\n0') == 'N'\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"0 2\\n4 2\\n0\") == \"N\"\nassert solution(\"0 2\\n3 2\\n0\") == \"Y\"\n\nSample Input:\n0 0\n3 3\n1\nSample Output:\nN\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'N'\nassert solution('abcdef') == 'Y'\nassert solution('abcd') == 'Y'\nassert solution('a1b2c3d4e5') == 'N'\nassert solution('a10b12c13d14e15') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n3 3\\n3\\n') == 'Y'\nassert solution('2 2\\n0 2\\n1\\n') == 'N'\nassert solution('2 2\\n4 5\\n5\\n') == 'N'\n\n------Hints------\nhttps://en.wikipedia.org/wiki/City_of_three_coordinates\nhttps://www.geeksforgeeks.org/solution-city-of-three-coordinates/\n\"\"\"\n\na, b = [int(i) for i in input().split()]\nc, d = [int(i) for i in input().split()]\nt = int(input())"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\\n') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\nassert solution('5 7\\n...V...\\n.V##.\\n.V##.\\n...V...\\n..#..V\\n') == '...V...\\n..VVV..\\n.V#VV.\\n.V#VV.\\n...V...\\n..#..V\\n'\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 7\\n.V....\\n#.#...\\n....#.\\n#.#V.#\\n#.#.V.\") == '5 7\\n.V....\\n#.#V.#\\n#.V#V\\n#.#.#'\n\nassert solution(\"5 7\\n.V....\\n#.#...\\n....#.\\n#.#V.#\\n#.#.#\") == '5 7\\n.V....\\n#.#V.#\\n#.#.#\\n#.#.#'\n\nassert solution(\"5 7\\n...#.#\\n#..#..\\n.#.#..\\n#.#.#.\\n#.#...\\n\") == '5 7\\n...#.#\\n#..#..\\n.#.#..\\n#.V.#\\n#.#.#'\n\nassert solution(\"5 7\\n#..#.#\\n#.#.#.\\n#.#.#.\\n#.#.#.\\n#..#.#\\n\") == '5 7\\n#.#.#.\\n#.#.#.\\n#.#.#.\\n#.#.#.\\n#..#.#'\n\nassert solution(\"5 7\\n#..#.#\\n#.#.#.\\n#.#.#.\\n#.#.#.\\n#.#.#.\\n\") == '5 7\\n#.#.#.\\n#.#.#.\\n#.#.#.\\n#.#.#.\\n#..#.#'\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport pprint"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".V.V#VV.VV#VVV.VV#VVVV.\") == \"...V...\\n...V...\\n..VVV..\\n.V#VV.V\\n.V#VV.V\\n.V#VV.V\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\nV.....\\n.......\\n.......\\n#......\\n..###..\") == \"..VVV..\\n.V###V.\\n.V#V#V.\\n.V#V#V.\\n.V#V#V.\"\nassert solution(\"5 7\\nV#.#.#\\n#..##.\\n...#.#\\n.......\\n....#..\") == \"...V...\\n...V...\\n...V...\\n...#..#\\n...#..#\"\nassert solution(\"5 7\\n#....V\\n#..#.#\\n#...##\\n#.#..#\\n.#.##.\") == \"...V...\\n...V...\\n..#V#V\\n.##V#V\\n.##V#V.\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7\\n.VV.VV.VV.VV\\n.V#V#V#V#VV\\n.VV.VV.V#VV\\n.VV.V#V#.VV\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\\n.V#V#V.\"\n\"\"\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..'\n) == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".##...##.#####.######.#.####\") == '###.###.######.#.#######'\nassert solution(\"..##...#....#...#.#.##..#...#.#..##..#.#..#.##.#..#...#..#.##.#\") == \"..#.#####...#.##..#.##.##..#.##..#.##.##.##..#.##.##.\"\nassert solution(\"##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##\") == \"##.##.#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.\"\nassert solution(\".#..##.###...#######..##.#..#.#.##..#..#...######.###.#.#.#.###.###.#.##\") == \"...###.#####..##.##..#.#.##.##.##.#.#####..#.##.##.\"\nassert solution(\"#.#...#.#.#.##.#...#.###...#.##...#.##..##.#.##..###.##.####.##..##.##.#..##.##.#..##.#.##.#.##.#.###.###.##.##.#.###..#.##.##.#.##.#.#.#..##.##..##..#\") == \"###.##.#####.##..##.##.##.##.##.##.###.#####..#.#.##.##.##.###.#####.#.#.####.#.#.##.#.##.###.##.##.##.#.#.#.#.##.####.##..#.##.##.##.\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"\"\"\n...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.\n\"\"\".strip()"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '101'\nassert solution('1') == '1'\nassert solution('101010') == '101010'\nassert solution('10') == '10'\nassert solution('11') == '11'\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '11'\nassert solution('1') == '1'\nassert solution('101') == '101'\nassert solution('1001') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(123) == 321\nassert solution(8) == 8"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"10\") == \"1\"\nassert solution(\"11\") == \"1111\"\nassert solution(\"100\") == \"11\"\nassert solution(\"999\") == \"11111\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"11\"\n\n-----\nSample Input:\n1\nSample Output:\n1\nassert solution(\"1\") == \"1\"\n\n-----\nSample Input:\n101010\nSample Output:\n101010\nassert solution(\"101010\") == \"101010\"\n\n-----\nSample Input:\n123\nSample Output:\n321\nassert solution(\"123\") == \"321\"\n\n----\nSample Input:\n12\nSample Output:\n21\nassert solution(\"12\") == \"21\"\n\n----\nSample Input:\n10\nSample Output:\n101\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"2\") == \"10\"\nassert solution(\"10\") == \"1010\"\nassert solution(\"100\") == \"10101\"\nassert solution(\"1000\") == \"110101\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '11'\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '11'\nassert solution('1010') == '1011'\nassert solution('1001010') == '10011010'\nassert solution('100101101') == '100111010'"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '11'\nassert solution('2') == '10'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('10111') == '10110'\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\n\" +\n                \"pInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npinKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"0\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npinKpinkPinK\\nPInkrose\\nlazerlemon\") == \"I must watch Star Wars with my daughter\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\n\"\n\"pink\\n\"\n\"tequilaSunrise\\n\"\n\"mExicanPInK\\n\"\n\"Coquelicot\\n\"\n\"turqRose\\n\"\n\"roSee\\n\"\n\"JETblack\\n\"\n\"pink\\n\"\n\"babypink\\n\"\n\"pInKpinkPinK\\n\"\n\"PInkrose\\n\"\n\"lazerLemon\") == \"9\"\nassert solution(\"12\\n\"\n\"pink\\n\"\n\"tequilaSunrise\\n\"\n\"mExicanPInK\\n\"\n\"Coquelicot\\n\"\n\"turqRose\\n\"\n\"roSee\\n\"\n\"JETblack\\n\"\n\"pink\\n\"\n\"babypink\\n\"\n\"pInKpinkPinK\\n\"\n\"PInkrose\\n\"\n\"lazerLemon\") == \"9\"\nassert solution(\"12\\n\"\n\"pink\\n\"\n\"tequilaSunrise\\n\"\n\"mExicanPInK\\n\"\n\"Coquelicot\\n\"\n\"turqRose\\n\"\n\"roSee\\n\"\n\"JETblack\\n\"\n\"pink\\n\"\n\"babypink\\n\"\n\"pInKpinkPinK\\n\"\n\"PInkrose\\n\"\n\"lazerLemon\") == \"9\"\nassert solution(\"12\\n\"\n\"pink\\n\"\n\"tequilaSunrise\\n\"\n\"mExicanPInK\\n\"\n\"Coquelicot\\n\"\n\"turqRose\\n\"\n\"roSee\\n\"\n\"JETblack\\n\"\n\"pink\\n\"\n\"babypink\\n\"\n\"pInKpinkPinK\\n\"\n\"PInkrose\\n\"\n\"lazerLemon\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''12\npink\ntequilaSunrose\nmExicanPInK\nCoquelicot\nturqrose\nroSee\nJETblack\npink\nbabypink\npInKpinkPinK\nPInkrose\nlazerlemon''') == '9'\nassert solution('''12\npink\ntequilaSunrose\nmExicanPInK\nCoquelicot\nturqrose\nroSee\nJETblack\npink\nbabypink\npInKpinkPinK\nPInkrose\nlazerlemon''') == 'I must watch Star Wars with my daughter'\nassert solution('''12\npink\ntequilaSunrose\nmExicanPInK\nCoquelicot\nturqrose\nroSee\nJETblack\npink\nbabypink\npInKpinkPinK\nPInkrose\nlazerlemon''') == '9'\n\nimport sys\nsys.stdin = open('input.txt')"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected_value"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\n'\n'pink\\n'\n'tequilaSunrose\\n'\n'mExicanPInK\\n'\n'Coquelicot\\n'\n'turqrose\\n'\n'roSee\\n'\n'JETblack\\n'\n'pink\\n'\n'babypink\\n'\n'pInKpinkPinK\\n'\n'PInkrose\\n'\n'lazerlemon') == '9'\n\n\"\"\"\n\nimport re\nimport sys\nimport json\n\nn = int(sys.stdin.readline())\ncount = 0\n\nfor i in range(n):\n    color = sys.stdin.readline()\n    color = color.lower()\n    if 'pink' in color:\n        count += 1\n    elif 'rose' in color:\n        count += 1\n    else:\n        count += 0"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\") == '9'\nassert solution(\"10\\nbrown\\nPInkrose\\nlazerlemon\\nblue\\nwhite\\nblue\\nbrown\\nblue\\npurple\\npink\\nwhite\") == '0'\nassert solution(\"10\\npurple\\nblue\\nbrown\\nblue\\nblue\\nwhite\\nblue\\nblue\\npurple\\npink\\nwhite\") == '8'\n\n-----Problem-----\nN small boxes with different colored buttons are stacked one on top of the other.\n\nThore will come up with a button combination, but there are only two colors that he will like.\n\nYour task is to help Thore find the number of training sessions he can attend.\n\n-----Solution-----\nSince there are only 2 colors available, we can use binary search to find the answer.\n\nWe can check the number of occurrences of each button in the boxes. There can be 3 possible cases.\n\n1. There are only 1 or 2 of that button in a given box. In this case, Thore will always be able to attend all boxes with that button, so the number of sessions he can attend is equal to the number of boxes with the same button.\n\n2. There are 3 or more of that button in a given box. In this case, there are 2 possibilities for Thore:\n\nHe can attend all boxes with that button, but he won't be able to attend the boxes with different buttons.\n\nHe can attend all boxes with different buttons, but he will not be able to attend the boxes with the same button.\n\nTo find the number of sessions Thore can attend, we can add up all the boxes with the same button, and all the boxes with different buttons, and then subtract 1.\n\nSince there are only 2 colors, we can use bitmasks to represent the button combination. For example, if there are 4 boxes and 3 buttons, we can represent it as:\n\n1000\n\n111\n\n110\n\n101\n\n100\n\n110\n\n110\n\n110\n\n111\n\nWe can then add up all the boxes with the same button and all the boxes with different buttons using bitmasks. For example, to add up boxes with the same button, we can sum up all the boxes with a mask of 0101 (1 + 2 + 4). To add up boxes with different buttons, we can sum up all the boxes with a mask of 1010 (1 + 2 + 3). After subtracting 1, we get 1101.\n\nWe can go through all possible masks and add them up to see how many sessions Thore can attend.\n\nThe time complexity of this solution is O(2^n). Since there are only 2 buttons and we will go through at most 32 masks, the time complexity is O(2^n).\n\nThe space complexity of this solution is O(n). Since there are n boxes, we need O(n) space to store the masks."
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\\npink\\nteaquilSunroSE\\nmExiCANpIck\\nturqrose\\nrOse\\njEtblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"2 4 5\") == \"2 4 5\"\nassert solution(\"6 5 4\") == \"6 5 4\"\n\nassert solution(\"A B C\") == \"A B C\"\nassert solution(\"B C A\") == \"B C A\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 5\") == \"1 3 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\nassert solution(\"3 5 1\") == \"3 1 5\"\n\nassert solution(\"5 1 3\") == \"1 5 3\"\n\nassert solution(\"2 1 3\") == \"1 2 3\"\n\nassert solution(\"1 3 2\") == \"1 2 3\"\n\nprint(solution(input()))\n\na, b, c = map(int, input().split())\nprint(a, b, c)\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 3') == '1 3 5'\nprint(solution('1 5 3'))\n\n'''\n\nprint(*sorted(map(int, input().split())), sep=' ')"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('1 2 3\\nABC') == '1 2 3'\nassert solution('1 5 3\\nBCA') == '1 3 5'\nassert solution('1 5 3\\nCBA') == '1 3 5'\nassert solution('1 5 3\\nBAC') == '1 3 5'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\n\"\"\"\n\nimport sys\n\na, b, c = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('2 1 3') == '1 2 3'\nassert solution('3 1 2') == '1 2 3'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nprint(solution(\"1 5 3\"))\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('3 5 1') == '3 1 5'\nassert solution('5 3 1') == '1 3 5'\nassert solution('3 1 5') == '1 3 5'\nassert solution('5 3 1') == '1 3 5'\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nprint(solution(\"1 5 3\"))"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == '8.0'\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == '8.0'\n\nassert solution(\"buy 100 10000\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == '105.0'\n\nassert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == '8.0'\n\nassert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == '8.0'\n\nassert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\") == '8.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == \"8.0\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4') == '8.00000000'\n\"\"\"\n\nimport re\n\nn = int(input())\n\nwhile n!= 0:\n    n -= 1\n    line = input().split(' ')\n\n    if'split' in line:\n        splits = int(line[1])\n        line = input().split(' ')\n    elif'merge' in line:\n        merges = int(line[1])\n        line = input().split(' ')\n    elif line[0] == 'buy':\n        line = input().split(' ')\n    elif line[0] =='sell':\n        line = input().split(' ')\n    elif line[0] == 'die':\n        break\n    else:\n        pass\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(text) == answer\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"buy 1 15\\n\"\n                \"split 3\\n\"\n                \"sell 1 5\\n\"\n                \"die 4\\n\") == '8.0'\n\n\"\"\"\n\nfrom collections import namedtuple\n\nEvent = namedtuple(\"Event\", \"action amount\")\n\n\nclass Solution:\n    def __init__(self, data: str):\n        events = []\n        for line in data.split(\"\\n\"):\n            if line:\n                events.append(self.parse(line))\n        self.events = sorted(events)\n\n    def parse(self, line: str) -> Event:\n        action, amount = line.split()\n        return Event(action, int(amount))\n\n    def parse_data(self):\n        return self.events\n\n    def solve(self) -> str:\n        profit = 0\n        for event in self.events:\n            if event.action == \"buy\":\n                profit += event.amount\n            elif event.action == \"sell\":\n                profit -= event.amount\n            elif event.action == \"split\":\n                profit += event.amount / 2\n            elif event.action == \"merge\":\n                profit += event.amount * 2\n            else:\n                profit += event.amount * 0.3\n        return f\"{profit:.2f}\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\n'''\nSample Input 2:\nbuy 1 15\nsplit 3\nbuy 2 10\nsplit 2\nbuy 3 25\nmerge 3\nsell 1 5\ndie 4\n'''\nassert solution('''\nbuy 1 15\nsplit 3\nbuy 2 10\nsplit 2\nbuy 3 25\nmerge 3\nsell 1 5\ndie 4\n''') == '73.8'\n\nSample Input 3:\nbuy 1 5\nsell 1 2\nsell 1 1\ndie 3\nbuy 1 1\nbuy 1 1\nbuy 2 2\nsell 1 1\ndie 2\nbuy 1 5\nbuy 1 1\nsell 1 1\ndie 1\n'''\nassert solution('''\nbuy 1 5\nsell 1 2\nsell 1 1\ndie 3\nbuy 1 1\nbuy 1 1\nbuy 2 2\nsell 1 1\ndie 2\nbuy 1 5\nbuy 1 1\nsell 1 1\ndie 1\n''') == '75.5'\n\nSample Input 4:\nbuy 1 5\nsplit 3\nbuy 1 1\nbuy 2 2\nsplit 2\nbuy 3 4\nsell 1 2\nsell 1 1\nbuy 1 5\nsell 1 1\ndie 1\n'''\nassert solution('''\nbuy 1 5\nsplit 3\nbuy 1 1\nbuy 2 2\nsplit 2\nbuy 3 4\nsell 1 2\nsell 1 1\nbuy 1 5\nsell 1 1\ndie 1\n''') == '61.5'\n'''\nSample Input 5:\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n'''\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '0.0'\n'''\nSample Input 6:\nbuy 1 5\nsplit 3\nbuy 1 1\nbuy 2 2\nsplit 2\nbuy 3 4\nsell 1 2\nsell 1 1\nbuy 1 5\nsell 1 1\ndie 1\n'''\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '8.0'\n\nassert solution('''\nbuy 3 10\nsell 2 12\nsell 5 6\ndie 2\nbuy 2 3\nbuy 1 16\nsplit 3\ndie 3\nbuy 2 5\ndie 4\nsell 1 6\nbuy 4 8\nbuy 5 7\ndie 1\nbuy 3 7\nbuy 2 6\nbuy 1 15\nsell 1 5\n''') == '83.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '15.0'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 2 3\nbuy 1 16\nsplit 3\nsell 1 5\ndie 4\nbuy 2 5\ndie 4\nsell 1 6\nbuy 4 8\nbuy 5 7\ndie 1\nbuy 3 7\nbuy 2 6\nbuy 1 15\nsell 1 5\n''') == '98.5'\n\nassert solution('''\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\n''') == '15.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"buy 1 15\\\\n\"\n\"split 3\\\\n\"\n\"sell 1 5\\\\n\"\n\"die 4\\\\n\") == \"8.0\"\n\"\"\"\n\nimport re\nimport math\n\nfrom typing import List\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.00000000\"\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('808') == '8'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('808') == '8'\nassert solution('1234') == '3'\nassert solution('1345') == '5'\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"808\"\"\"\n        output = \"\"\"8\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1234\"\"\"\n        output = \"\"\"3\"\"\"\n        self."
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('808') == '8'\nassert solution('1101101111') == '1'\nassert solution('9') == '9'\nassert solution('100') == '0'\nassert solution('101') == '1'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"9\") == \"9\"\nassert solution(\"19\") == \"9\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"988\") == \"8\"\n\"\"\"\n\nx = int(stdin)\nprint((x%10)**3)\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"612\") == \"6\"\nassert solution(\"10\") == \"1\"\nassert solution(\"19\") == \"9\"\nassert solution(\"909\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('808') == '8'\nassert solution('1') == '1'\nassert solution('89') == '8'\nassert solution('27') == '7'\nassert solution('1024') == '4'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"10000\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('808') == '8'\nassert solution('808') == '8'\nassert solution('808') == '8'\nassert solution('808') == '8'\n\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('808') == '8'\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\nassert solution('4 5\\nCCCCC\\nCCCCW\\nCCCCC\\nCCCCC') == 1\nassert solution('4 5\\nCCCCC\\nCCCCL\\nCCCCC\\nCCCCC') == 1\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\nassert solution(\"4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW\") == 1\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('LWLWLLWLW') == '2'\n\"\"\"\n\nfrom copy import deepcopy"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\n\"\"\"\n\nimport sys\n\nimport pytest"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == '0'\nassert solution('4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW') == '1'\nassert solution('4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW') == '1'\nassert solution('4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW') == '1'\nassert solution('4 5\\nWWWWW\\nWWWWW\\nWWWWW\\nWWWWW') == '1'\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\nW\\nW\\nC\\nL\\n\") == 1\n\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nr, c = map(int, stdin.readline().split())\nmat = [stdin.readline().strip() for _ in range(r)]"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == '60'\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == '60'\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == '60'\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == '60'\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\nassert solution('''3 C\n9S\nJH\nQH\nKS\nAS\n6C\n6S\n5C\n5S\n4S\n3S\n2S\nAD\nJH\nQS\n9D\n8D\n7S\n6C\n6S\n5D\n5S\n4H\n3H\n2H\nAD\nJH\nQS\n9D\n8D\n7S\n6C\n6S\n5D\n5S\n4S\n3S\n2S\n''') == '0'\nassert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\nassert solution('''3 C\n9S\nJH\nQH\nKS\nAS\n6C\n6S\n5C\n5S\n4S\n3S\n2S\nAD\nJH\nQS\n9D\n8D\n7S\n6C\n6S\n5D\n5S\n4S\n3S\n2S\n''') == '0'\nassert solution('''3 C\n9S\nJH\nQH\nKS\nAS\n6C\n6S\n5C\n5S\n4S\n3S\n2S\nAD\nJH\nQS\n9D\n8D\n7S\n6C\n6S\n5D\n5S\n4S\n3S\n2S\n''') == '0'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\nassert solution('''2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH''') == '60'\n\nassert solution('''2 H\n8S\n8C\nKS\nAS\n7S\nKC\n3C\nAD\nAC''') == '130'\nassert solution('''2 H\n8S\n8C\nKS\nAS\n7S\nKC\n3C\nAD\nAC''') == '130'\n\nassert solution('''2 D\n8S\n8C\nKS\nAS\n7S\nKC\n3C\nAD\nAC''') == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2S TH 9C KS QS JS TD AD JH\") == \"60\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\nassert solution('abcd') == 'abcd'"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\n\"\"\"\n\nN, B = [i for i in stdin.split(\"\\n\")][0].split()\n\nA, K, Q, J, T, 9, 8, 7 = list(map(chr, range(65, 73)))\nS, H, D, C = list(map(chr, range(73, 79)))\n\nprint(sum([11 if c.upper() == B.upper() else\n        4 if c.upper() == B.upper() and c.upper() not in [\"S\", \"H\", \"D\", \"C\"] else\n        3 if c.upper() not in [A, K, Q, J, T, 9, 8, 7] else 20 if c == \"T\" else\n        2 if c.upper() == B.upper() and c.upper() not in [\"S\", \"H\", \"D\", \"C\"] and c not in [A, K, Q, J, T, 9, 8, 7] else 0\n        for c in [i for i in stdin.split(\"\\n\")][1:]]))"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4S\") == 24\nassert solution(\"2C\") == 12\nassert solution(\"4H\") == 28\nassert solution(\"2D\") == 20\nassert solution(\"2S\") == 30\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\n-----Restriction-----\nThe score of the game can\u2019t be negative.\n\n-------------------------\n'''"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('k i h o u') == 'k i h o u'\nassert solution('k i h o u e r f') == 'k i h o u e r f'\nassert solution('thississississississthis isis isis isis thisssss this issss this') =='s s s s s s t t h i s i s i s i s s t h i s i s i s i s s t h i s i s i s s t h i s i s i s i s s t h i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s s t h i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i s s t h i s i s i s i s i s i"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Case:\nassert solution(\"sooooonnnnnnnnnnnsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\n-----Constraints-----\n1 <= length(s) <= 1000\n1 <= length(t) <= 1000\ns and t only contain letters and spaces.\ns!= t\n\n\"\"\"\nimport string"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aaa') == 'a'\nassert solution('aaaa') == 'a'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('this is very annoying') =='se'\n\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\nSample Input:\nat thy and sa and on tha\nathi itss vaery onth ta\nSample Output:\nat\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('asdafadsfadsfadsfadsfadsfa sdfasd') =='sdfasd'\nassert solution('fadsfadfsadfadfadsfadfadsfa sdfasd') =='sdfasd'\nassert solution('fadsfadfsadfadfadsfadfadsfa sdfasd fasdf') =='sdfasd'\n\nprint(solution(stdin))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"examples/in/2.txt\", 'r').read()) == \"3\"\nassert solution(open(\"examples/in/1.txt\", 'r').read()) == \"5\"\nassert solution(open(\"examples/in/0.txt\", 'r').read()) == \"5\"\n\"\"\"\n\nS, C, K = [int(c) for c in input().split()]\nD = [int(c) for c in input().split()]\n\nn = len(D)\nDP = [[0 for _ in range(C + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, C + 1):\n        max_d = K if i == 1 else min(K, j)\n        for k in range(max_d + 1):\n            if k == 0:\n                DP[i][j] = max(DP[i][j], D[i - 1] + DP[i - 1][j - 1])\n            elif k == max_d:\n                DP[i][j] = max(DP[i][j], D[i - 1] + DP[i - 1][j - 1] + k ** 2)\n            else:\n                DP[i][j] = max(DP[i][j], D[i - 1] + DP[i - 1][j - 1] + k ** 2 + k * (k - 1) // 2)\n\nprint(DP[-1][-1])\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n\"\"\"\n\nS, C, K = [int(i) for i in stdin.readline().split()]\nnums = [int(i) for i in stdin.readline().split()]\n\ncount = 0\nfor i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n        if abs(nums[i] - nums[j]) <= K:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\nassert solution('5 3 1\\n0 0 1 1 2') == '0'\nassert solution('5 3 1\\n0 1 1 2') == '1'\n\n-----Constraints-----\n* 1 <= S, C, K <= 10^5\n* There are no negative integers in the input.\n* Each integer in the input is between 0 and 10^9\n\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3 0\n0 0 1 1 2''') == 3\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1'\nassert solution('0 0 1 1 2') == '1'\nassert solution('0 0 0 1 1 2') == '2'\nassert solution('0 0 0 1 1 2 2 3 2 3') == '3'\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\n\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"3628800\"\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2\\n1') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == \"6\"\n\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"6\"\n\n-----Solution-----\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    N = int(sys.stdin.readline())\n    print(pow(N, N - 1, 10))\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n2\\n') == '6'\n\"\"\"\nfrom typing import List\nfrom functools import reduce\n\nT = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    res = reduce(lambda x, y: x * y, range(1, n + 1))\n    print(res % 10)\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4\") == \"3\\n2\\n6\"\nassert solution(\"6\\n7\") == \"6\\n1\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '4 2'\nassert solution('5\\n1 2 3 4 5') == '10 3'\nassert solution('1\\n1') == '2 0'\nassert solution('1\\n1\\n1') == '3 0'\nassert solution('1\\n1\\n1\\n1') == '4 0'\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n3 1 2') == '4 2'\n\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"4 2\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '4 2'\nassert solution('2 1 1') == '1 1'\nassert solution('5 3 2') == '16 3'\nassert solution('6 1 1') == '5 2'\nassert solution('7 2 2') == '14 3'\n\n----Problem-----\n\n(Greed is Good)\n\nGiven a positive integer n, find the minimum number of operations required to convert it to 1.\n\nYou can perform the following 3 operations:\n\n1. Subtract 1 from it.\n2. If it is even, divide by 2.\n3. If it is odd, multiply by 3 and add 1.\n\nTime: O(log n)\nSpace: O(1)\n\n----Solution-----\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3''') == '4 2'\nassert solution('''4\n1 1 2 1''') == '3 3'\nassert solution('''5\n1 1 2 2 3''') == '5 2'\n\n-----------------------\nApproach:\n'''\n\nimport math\nimport functools\n\n@functools.lru_cache(maxsize=None)\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\") == \"4 2\"\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\nassert solution(\"4 1 2 3\") == \"5 4\"\n\nassert solution(\"4 1 2 3 0\") == \"5 4\"\n\nassert solution(\"0 1 2 3 0\") == \"5 4\"\n\nassert solution(\"0 1 2 3 1\") == \"7 6\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\nassert solution(\"3 4 3\") == \"10 4\"\n\nassert solution(\"1 0\") == \"0 1\"\n\nassert solution(\"0 1\") == \"0 1\"\n\nassert solution(\"3 5 5\") == \"13 5\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\") == 2\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nb, k, g = [int(i) for i in input().split()]\n\ni = 0\nwhile i < k:\n    g -= 1\n    i += 1\n    if g == 0:\n        break\n\ni -= 1\n\nprint(i)\n\n\"\"\"\nSolution 2\n\"\"\"\n\nfrom collections import Counter\n\nb, k, g = [int(i) for i in input().split()]\n\nb = Counter([b])\n\nans = 0\n\nwhile k > 0:\n    k -= g\n    ans += 1\n    b -= Counter([b[1]])\n\nprint(ans)\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5, 2, 1) == 2\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 1') == '2'\n\n-------\n\nSample Input:\n10 2 3\nSample Output:\n3\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1') == '2'\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1') == '2'\n\nSample Input:\n4 2 3\nSample Output:\n4\n\nSolution:\nfrom typing import List\n\nb, k, g = map(int, stdin.readline().split())\n\nreturn min(g - 1, k) if b > 1 else (g - 1)\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"4 2 1\") == \"1\"\nassert solution(\"10 5 7\") == \"7\"\nassert solution(\"20000 100 1\") == \"1\"\nassert solution(\"20000 100 100\") == \"20000\"\n\"\"\"\n\nb, k, g = map(int, input().split())"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5) == 36\nassert solution(7) == 288\n\nprint(solution(5))\nprint(solution(7))\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5) == 36\nassert solution(7) == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('5') == '11'\nassert solution('7') == '100'\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '36'\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '36'\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '36'\n\n-----Problem-----\nGiven a positive integer, n, compute the nth value of the hailstone sequence (as defined in the description).\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == 36\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"5\\n5 7 3 2 8\") == \"2 3 4 1 5\"\nassert solution(\"6\\n8 8 1 7 4 9 3\") == \"3 4 2 1 6 7 8\"\nassert solution(\"10\\n8 4 8 9 5 5 3 3 6 1\") == \"3 4 2 1 8 6 7 5 9\"\n\nimport math\nimport itertools"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\n-----Constraints-----\n1 <= n <= 30\n1 <= s_ i <= 100\n\"\"\"\nfrom collections import deque\n\nnum_rooms = int(input())\n\nstudents = [int(i) for i in input().split()]\n\nq = deque(students)\n\nstudents = []\nwhile q:\n    students.append(q.popleft())\n\nsol = []\n\nwhile students:\n    sol.append(students.pop(0))\n    if not q:\n        break\n    sol.append(q.popleft())\n\nprint(\" \".join(map(str, sol)))\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\n\"\"\"\n\nimport random"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\\n2 3 3 1\") == \"impossible\"\nassert solution(\"4\\n1 1 1 1\") == \"impossible\"\nassert solution(\"4\\n1 1 1 1\\n1 1 1 1\") == \"impossible\"\nassert solution(\"4\\n1 2 3 4\") == \"impossible\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n\nassert solution('2\\n2 1') == 'impossible'\nassert solution('3\\n1 2 2') == 'impossible'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n1 2 3 4\") == \"impossible\"\n\"\"\"\n\nnum_rooms = int(stdin.readline())\nstudent_in_room = [int(i) for i in stdin.readline().split(' ')]\n\nuniform_room_size = len(set(student_in_room))\nroom_sizes = [sum(student_in_room[:uniform_room_size])] + [sum(student_in_room[uniform_room_size:])]"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"5\\n2 2 3 1 1\") == \"1 2 3 4 5\"\nassert solution(\"6\\n2 1 1 1 1 1\") == \"1 2 3 4 5 6\"\n\"\"\"\n\nimport sys\nfrom collections import deque\nimport itertools\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 3 1\") == '2 3 4 1'\nassert solution(\"4\\n2 3 3 1\") == '2 3 4 1'\nassert solution(\"3\\n2 3 3 1\") == 'impossible'\nassert solution(\"4\\n3 3 3 1\") == 'impossible'\nassert solution(\"5\\n3 3 3 2 1\") == 'impossible'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nright_oar\\nleft_oar\\nright_oar\\nhull\\nleft_oar\") == \"1\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\nprint('Test passed')\n\n----------------------\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '5'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\n\"\"\"\n\nimport string\nimport sys"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\nassert solution('''1 1\na''') == '1'"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n5 7\\n7 5\\n5 8\") == \"8 5\"\nassert solution(\"5 5\\n5 7\\n7 5\\n6 8\") == \"6 8\"\nassert solution(\"5 5\\n5 7\\n7 5\\n6 8\\n1 1\") == \"1 1\"\nassert solution(\"5 5\\n5 7\\n7 5\\n6 8\\n1 1\\n2 1\") == \"2 1\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n7 2\\n6 1\\n\") == \"7 2\"\nassert solution(\"4 5\\n1 1\\n3 3\\n\") == \"3 3\"\nassert solution(\"4 3\\n8 2\\n3 6\\n\") == \"3 3\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n5 7\\n7 5\") == \"7 7\"\n\n-------\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 7 7\") == \"7 7\"\nassert solution(\"5 5 7 7 5 7 7\") == \"7 7\"\nassert solution(\"5 5 5 7 7 7 7\") == \"7 7\"\nassert solution(\"5 5 5 5 7 7 7 7\") == \"7 7\"\nassert solution(\"5 5 5 5 5 7 7 7 7\") == \"7 7\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\n4 5\\n5 5\\n5 6') == '6 6'\nprint(solution('2 2\\n1 3\\n3 1'))"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"5 5\\n7 7\\n7 5\") == \"5 5\"\nassert solution(\"7 5\\n5 5\\n7 7\\n7 5\") == \"7 7\"\nassert solution(\"7 7\\n5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\") == \"3 4\"\nassert solution(\"1 2\\n1 2\\n3 4\") == \"1 2\"\nassert solution(\"1 2\\n2 3\\n3 2\") == \"1 2\"\nassert solution(\"1 2\\n2 3\\n3 1\") == \"1 2\"\nassert solution(\"1 1\\n2 1\\n3 3\") == \"3 2\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5, 5, 7, 7) == (7, 7)"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n12 31\\n12 32\\n12 33\\n12 34\\n12 35\\n12 36\\n12 37\\n12 38\\n12 39\\n12 40\\n12 41\\n12 42\\n12 43\\n12 44\\n12 45\\n12 46\\n12 47\\n12 48\\n12 49\\n12 50\\n12 51\\n12 52\\n12 53\\n12 54\\n12 55\\n12 56\\n12 57\\n12 58\\n12 59\\n12 60\\n') == '1.0416666666666666'\n\nassert solution('5\\n12 31\\n12 32\\n12 33\\n12 34\\n12 35\\n12 36\\n12 37\\n12 38\\n12 39\\n12 40\\n12 41\\n12 42\\n12 43\\n12 44\\n12 45\\n12 46\\n12 47\\n12 48\\n12 49\\n12 50\\n12 51\\n12 52\\n12 53\\n12 54\\n12 55\\n12 56\\n12 57\\n12 58\\n12 59\\n12 60\\n') =='measurement error'\n\n'''\nThe S.L. display has 60 rows and 36 columns. The display shows the number of minutes the minutes number will be shown on the next row after this one. So, if we ignore the row above, then the display shows:\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n18 19 20 21 22 23 24 25 26 27 28 29 30 31\n19 20 21 22 23 24 25 26 27 28 29 30 31\n20 21 22 23 24 25 26 27 28 29 30 31\n21 22 23 24 25 26 27 28 29 30 31\n22 23 24 25 26 27 28 29 30 31\n23 24 25 26 27 28 29 30 31\n24 25 26 27 28 29 30 31\n25 26 27 28 29 30 31\n26 27 28 29 30 31\n27 28 29 30 31\n28 29 30 31\n29 30 31\n30 31\n31\n\nAnd the wait time for the first one of them is 0:0:0\n\nIf the minute number is the next row to the one shown above, the wait time is 1:0:0\n\nIf the minute number is the next two rows below, the wait time is 2:0:0\n\nAnd so on.\n\nThe average wait time is the sum of the wait times over the displayed minutes divided by the number of displayed minutes:\n\n(0 + 1 + 2 +... + 59 + 60) / 60 = 0.0416666666666666\n\nThe answer should be rounded to 7 decimal places.\n\nYou may assume that the input is valid.\n\n-------\nThe first line contains an integer $N \\le 1000$ \u2013 the number of observations.\nThe following $N$ lines contain two positive integers $M \\le 60$ and $S \\le 3600$ \u2013 the number of minutes displayed, and the number of seconds Johan had to wait for his train.\n-------\nOutput\nIt should contain a single real number \u2013 the average length of an S.L.\u00a0minute, measured in real minutes.\n\nThe answer should be rounded to 7 decimal places.\n\n-------\nSample Input\n3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\nSample Output\n1.0\n1.0\n0.3333333333333333\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stub) == output"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 61') == '1.016666667'\nassert solution('2 51') == '1.016666667'\nassert solution('2 53') == '1.016666667'\nassert solution('3 42') == '1.016666667'\nassert solution('4 41') == '1.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n1\n1 61\n\"\"\") == \"measurement error\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1\n61''') == '1.016666667'\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n61') == '1.016666667'\n\"\"\"\n\nimport sys\nimport os\nimport time\nimport math\nimport timeit\nimport typing\nfrom functools import reduce\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(expected_result)\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 61') == 1.016666667\nprint(solution('1 61'))\n\n----\nSample Input:\n1\n1 1\nSample Output:\nmeasurement error\nassert solution('1 1') == measurement error\nprint(solution('1 1'))\n\n----\nSample Input:\n3\n3 0\n2 4\n1 3\nSample Output:\n3.0\n2.0\n1.0\nassert solution('3 0') == 3.0\nassert solution('2 4') == 2.0\nassert solution('1 3') == 1.0\nprint(solution('3 0'))\nprint(solution('2 4'))\nprint(solution('1 3'))\n\n----\nSample Input:\n5\n4 23\n23 45\n23 56\n2 3\n2 10\n2 5\nSample Output:\n4.0\n9.0\n9.0\n3.0\n2.0\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1 61\") == \"measurement error\"\nassert solution(\"2\\n15 20\") == \"1.25\"\nassert solution(\"3\\n100 1 2\") == \"2.5\"\nassert solution(\"4\\n1 10 20 30\") == \"1.5\"\nassert solution(\"5\\n100 100 200 300\") == \"2.0\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n61') == '1.016666667'\nassert solution('2\\n91\\n34\\n35') == '1.016666667'\nassert solution('3\\n33\\n36\\n22') =='measurement error'\n'''"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"YMRKWYC\") == \"HUNK\"\nassert solution(\"KKYVMMY\") == \"WMDN\"\nassert solution(\"HNWWKXG\") == \"NOLZKJ\"\nassert solution(\"KXFVZWK\") == \"ZKVZVH\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"VZTRGCV\") == \"LOKI\"\nassert solution(\"EEMPRXQ\") == \"CALGARY\"\nassert solution(\"ECBJJK\") == \"LOKI\"\n\nprint(\"All tests passed.\")\n\n-----Solution-----"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('BARGALO') == 'BARGALO'\n\nprint(solution('CPMCRYY'))\nprint(solution('BARGALO'))\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"YRAGLAC\") == \"CALGARY\"\n\"\"\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\n\"\"\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('CPMSVYY') == 'CALGARY'\nassert solution('CPMCRYY') == 'CALGARY'\nassert solution('CPMSVYY') == 'CALGARY'\n\"\"\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"XKATLRW\") == \"JUICQNEL\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"YMZADKZ\") == \"FOZIFDG\"\nassert solution(\"QHONA\") == \"SCHIZOPY\"\nassert solution(\"FDPGTVP\") == \"MCILMOU\"\nassert solution(\"MZJATJ\") == \"YOZLGNK\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CSQSXTR\") == \"CALGARY\"\nassert solution(\"CALGARY\") == \"CALGARY\"\nassert solution(\"CALGARYYY\") == \"CALGARYYY\"\nassert solution(\"CPMCRYY\") == \"CALGARYYY\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CPMCRYY\", \"ALBERTA\") == \"CALGARY\"\n\nSample Input:\nCALGARY\nALBERTA\nSample Output:\nCPMCRYY\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AB\") == \"3\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"2\"\nassert solution(\"BC\") == \"1\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABCD\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ACB\") == \"2\"\nassert solution(\"CBA\") == \"1\"\n\n-----Problem-----\nBorko likes to think that the game of Kuba is a more useful invention than the real game. He therefore wrote a program, which implements the rules of the game (and tries to do so in such a way that the implementation is the smallest possible). The program is implemented in a function, which takes as input the number of moves Borko made (encoded by the string) and returns the index of the cup Borko\u2019s ball ends up under.\n\nThe rules are the following:\n\nBorko starts with a cup on the left and a ball in the middle.\nHe swaps the positions of two cups, if there are no cups under the left cup (if Borko has no balls under him).\nHe removes one ball from the left cup, if there is a ball in the left cup.\nHe adds one ball to the left cup, if there is no ball in the left cup.\nHe removes one ball from the middle cup, if there is a ball in the middle cup.\nHe adds one ball to the middle cup, if there is no ball in the middle cup.\nHe puts the ball back under the middle cup, if Borko has no balls under him.\nIn the end, Borko always has one ball in the middle cup and one ball in the left cup."
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\") == \"3\"\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AB') == '3'\nassert solution('AC') == '1'\nassert solution('BC') == '2'\nassert solution('BA') == '1'\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC') == '3'\nassert solution('AAB') == '1'\nassert solution('CAB') == '2'\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AB\") == 3\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"2\"\nassert solution(\"ABCBA\") == \"1\"\n\"\"\"\n\n\"\"\"\nJealous of Mirko\u2019s position as head of the village, Borko and Mirko fought with each other, their rivals, after Mirko\u2019s leadership was intercepted by a Borko magician.\n\nMirko was the leader of the village, since his position as a head of the village was particularly valuable to Borko, so Mirko was set to head the village, and Borko was jealous of Mirko\u2019s superiority over his rivals. After Mirko got the position, he wanted to demonstrate his inferiority to Borko\u2019s rivals.\n\nBorko and Mirko were both masters of the magic, so Borko and Mirko could temporarily surrender the right to leadership by using the Borko magic trick. The Borko magician himself was not too happy about the situation, and he was tempted to use the trick for the rest of his life, so he decided to give Mirko an arbitrary amount of Borko\u2019s power in exchange for Mirko\u2019s right to head the village.\n\nBorko and Mirko were sitting on a bench when they were being controlled by a magician who knew both of them. Mirko was a young girl, and Borko was a man of old.\n\nBorko was sitting next to Mirko\u2019s father, who was also sitting next to Mirko, and he was trying to explain to Mirko that Borko\u2019s magic could be used to conquer Mirko\u2019s right to head the village.\n\nMirko\u2019s father was the head of the village, Mirko\u2019s mother was the head of the village, Borko\u2019s brother was the head of the village and Borko\u2019s sister was the head of the village, but Mirko\u2019s father and Mirko\u2019s mother were not allowed to know about the existence of any other head of the village, so they did not know who was the head of the village.\n\nMirko\u2019s mother was very proud of Borko\u2019s behavior, so she decided to use Borko\u2019s magic trick to show Mirko that her father, brother and sister all agreed that Borko\u2019s trick could be used to conquer Mirko\u2019s right to head the village.\n\nThere are only two people who are not allowed to know who is the head of the village, so Mirko told his mother that he agreed with her.\n\nThe magician who controls Borko and Mirko is very interested in Mirko\u2019s plan, so he managed to learn of Borko\u2019s plan in the few minutes before the trick ended, so Borko and Mirko could not agree on the trick.\n\nMirko wondered whether Borko\u2019s trick could be used to convince the people to rule the village for him. It was possible, since Mirko had learned of Borko\u2019s plan to use the trick to get his right to head the village.\n\nThe trick ended when Borko and Mirko were sitting on a bench, and Borko told his mother that he wanted to use Borko\u2019s magic trick to convince Mirko to agree with his plan.\n\nMirko was very sad that Borko did not trust him, so he asked his mother whether he could use the trick to convince her.\n\nThe magician who controls Borko and Mirko told his mother that he could use Borko\u2019s magic trick to convince her, but Borko and Mirko could not agree on the trick.\n\nMirko then tried to convince his mother that Borko could use the trick to convince him too, but Borko did not trust him, so he told Mirko that Borko\u2019s trick could not be used to convince Mirko.\n\nFinally, Mirko decided to give up using the magic trick and use a truthful story instead to convince his mother to agree with his plan.\n\nThe magician who controls Borko and Mirko then told his mother that Borko could not use Borko\u2019s magic trick, because Mirko told his mother that Borko\u2019s magic trick could not be used to convince him.\n\nMirko then tried to convince his mother that Borko could use the magic trick to convince him too, but Borko did not trust him, so Mirko told him that Borko\u2019s magic trick could not be used to convince him either.\n\nMirko then gave up on using the magic trick and tried to use a truthful story instead to convince his mother to agree with his plan.\n\nThe magician who controls Borko and Mirko then told his mother that Borko could not use Borko\u2019s magic trick, because Mirko told his mother that Borko\u2019s magic trick could not be used to convince him.\n\nMirko then tried to convince his mother that Borko could use the magic trick to convince him too, but Borko did not trust him, so Mirko told him that Borko\u2019s magic trick could not be used to convince him either.\n\nMirko then gave up on using the magic trick and tried to use a truthful story instead to convince his mother to agree with his plan.\n\nThe magician who controls Borko and Mirko then told his mother that Borko could use Borko\u2019s magic trick, because Mirko told his mother that Borko\u2019s magic trick could be used to convince him.\n\nMirko then told his mother that Borko could use the magic trick to convince him too, because Mirko told his mother that Borko\u2019s magic trick could be used to convince him.\n\nFinally, Mirko then used the magic trick to convince his mother to agree with his plan, because Mirko told his mother that Borko\u2019s magic trick could be used to convince him.\n\nFinally, Mirko used the magic trick to convince his mother to agree with his plan, because Borko and Mirko both said that Borko\u2019s magic trick could be used to convince them both.\n\nThe magician who controls Borko and Mirko then told his mother that Borko could use Borko\u2019s magic trick, because Mirko told his mother that Borko\u2019s magic trick could be used to convince him.\n\nMirko then told his mother that Borko could use the magic trick to convince him too, because Mirko told his mother that Borko\u2019s magic trick could be used to convince him.\n\nMirko then used the magic trick to convince his mother to agree with his plan, because Mirko told his mother that Borko\u2019s magic trick could be used to convince him.\n\nFinally, Mirko used the magic trick to convince his mother to agree with his plan, because Borko and Mirko both said that Borko\u2019s magic trick could be used to convince them both.\n\nFinally, Mirko used the magic trick to convince his mother to agree with his plan, because Borko and Mirko both said that Borko\u2019s magic trick could be used to convince them both.\n\nThe magician who controls Borko and Mirko then told his mother that Borko could use Borko\u2019s magic trick, because Mirko told her that Borko\u2019s magic trick could be used to convince him.\n\nMirko then told her mother that Borko could use the magic trick to convince him too, because Mirko told her that Borko\u2019s magic trick could be used to convince him.\n\nMirko then used the magic trick to convince her to agree with his plan, because Mirko told her that Borko\u2019s magic trick could be used to convince him.\n\nFinally, Mirko used the magic trick to convince her to"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n-----Notes-----\nFor the first test case, Borko swapped only once. In the second test case, he swapped three times.\n'''"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"3\"\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 5 4\") == \"5\"\nassert solution(\"1 3 3 4\") == \"5\"\n\"\"\"\n\nimport sys\nimport math\n\nlines = []\n\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n\nA, B, C, D = lines\n\nnums = [int(x) for x in lines]\n\nx = (B**2-4*A*C)**0.5\ny = (-A*D-A*B*x) / C"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == 3\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 4 3\") == \"6\"\nassert solution(\"4 3 2 1\") == \"1\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('5 1 4 3') == '6'\nassert solution('7 1 4 2 3') == '4'\nassert solution('9 9 8 8 8') == '9'\nassert solution('9 9 8 9 8') == '9'\n\nfrom collections import Counter"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 2 3 4''') == '3'\nassert solution(''''1 2 3 4''') == '3'\n\"\"\"\n\nfrom typing import List, Tuple\n\nnumbers: List[int] = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('3 1 2 4') == '2'\nassert solution('2 1 2 4') == '3'\nassert solution('3 1 3 4') == '0'\nassert solution('3 1 3 5') == '0'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3 1\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"2 2 1 2\") == \"1\"\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n\nmax_area = (B - C) * D if D > C else (C - B) * D\nmax_area = (max_area - (C - B)) * (D - C) if D > C else (max_area - (B - C)) * (D - B)\nmax_area = (max_area - (D - C)) * (C - D) if D > C else (max_area - (C - D)) * (B - C)\nmax_area = (max_area - (D - B)) * (C - D) if D > B else (max_area - (B - D)) * (B - C)\nmax_area = (max_area - (A - D)) * (D - C) if D > C else (max_area - (C - A)) * (B - C)\nmax_area = (max_area - (A - B)) * (A - D) if D > B else (max_area - (B - A)) * (B - C)\n\nprint(max_area)\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == 3\n\n-----Solution-----\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"1 2 3 4\"\n) == \"3\"\n\"\"\"\n\nimport sys\nimport itertools\nimport math\n\nsys.stdin = open('input.txt', 'r')\nread = lambda: sys.stdin.readline().rstrip()\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103 27\") == \"4\"\nassert solution(\"55 8\") == \"3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"999 999\") == \"10\"\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"103 27\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('103 27') == '4'\nassert solution('1 3') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103 27\") == \"4\"\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('103 27') == 4\n\"\"\"\n\na, b = [int(i) for i in stdin.split()]\n\nprint(1 if b == a else 2 if a % 2 == b % 2 else 3)\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103 27') == 4\n\"\"\"\n\na, b = stdin.split()\na = int(a)\nb = int(b)"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"103 27\") == 4\n\"\"\"\n\na, b = stdin.split()\na, b = int(a), int(b)\n\ncount = 0\nwhile a!= b:\n    if a % 2 == 0:\n        a //= 2\n    else:\n        a += 1\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"103 27\") == 4\nassert solution(\"1 0\") == -1\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103 27') == '4'\n\nsolution = lambda stdin: '4'\n\n-----Notes-----\nhttps://codingcompetitions.withgoogle.com/kickstart/round/000000000043597f/000000000082cc15\n\"\"\"\n\nfrom math import floor, log2"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"103 27\") == 4\n\"\"\"\n\na, b = map(int, stdin.readline().split())"
    }
]