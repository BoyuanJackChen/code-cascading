[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = defaultdict(list)\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            visited = set()\n            stack = deque()\n            stack.append(i)\n            visited.add(i)\n            while len(stack) > 0:\n                cur = stack.pop()\n                for neigh in tree[cur]:\n                    if neigh not in visited:\n                        visited.add(neigh)\n                        stack.append(neigh)\n            if len(visited) > res:\n                res = len(visited)\n                a, b, c = i, j, 0\n                for x in visited:\n                    if x!= i:\n                        c += 1\n                print(res)\n                print(a, b, c)",
        "num_ids": 253
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n\n    # build the graph\n    graph = {edge[0]: [edge[1]] for edge in edges}\n    for edge in edges:\n        if edge[1] not in graph:\n            graph[edge[1]] = []\n        graph[edge[1]].append(edge[0])\n\n    # find the best answers\n    answers = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j in graph[i]:\n                for k in range(j + 1, n):\n                    if k in graph[j]:\n                        answers.append(i + 1)\n                        answers.append(j + 1)\n                        answers.append(k + 1)\n                        return \" \".join(map(str, sorted(answers)))\n\n    return str(len(edges))\n",
        "num_ids": 239
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n>>> solution('''8''')\n5\n1 8 6\n\n>>> solution('''8''')\n5\n1 8 6\n\n>>> solution('''8''')\n5\n1 8 6\n\n>>> solution('''9''')\n5\n1 8 6\n\n>>> solution('''9''')\n5\n1 8 6\n\n>>> solution('''10''')\n5\n1 8 6\n\n>>> solution('''11''')\n6\n1 8 6\n\n>>> solution('''12''')\n6\n1 8 6\n\n>>> solution('''13''')\n6\n1 8 6\n\n>>> solution('''14''')\n5\n1 8 6\n\n>>> solution('''15''')\n5\n1 8 6\n\n>>> solution('''16''')\n5\n1 8 6\n\n>>> solution('''17''')\n5\n1 8 6\n\n>>> solution('''18''')\n5\n1 8 6\n\n>>> solution('''19''')\n5\n1 8 6\n\n>>> solution('''20''')\n5\n1 8 6\n\n>>> solution('''21''')\n5\n1 8 6\n\n>>> solution('''22''')\n5\n1 8 6\n\n>>> solution('''23''')\n5\n1 8 6\n\n>>> solution('''24''')\n5\n1 8 6\n\n>>> solution('''25''')\n5\n1 8 6\n\n>>> solution('''26''')\n5\n1 8 6\n\n>>> solution('''27''')\n5\n1 8 6\n\n>>> solution('''28''')\n5\n1 8 6\n\n>>> solution('''29''')\n5\n1 8 6\n\n>>> solution('''30''')\n5\n1 8 6\n\n>>> solution('''31''')\n5\n1 8 6\n\n>>> solution('''32''')\n5\n1 8 6\n\n>>> solution('''33''')\n5\n1 8 6\n\n>>> solution('''34''')\n5\n1 8 6\n\n>>> solution('''35''')\n5\n1 8 6\n\n>>> solution('''36''')\n5\n1 8 6\n\n>>> solution('''37''')\n5\n1 8 6\n\n>>> solution('''38''')\n5\n1 8 6\n\n>>> solution('''39''')\n5\n1 8 6\n\n>>> solution('''40''')\n5\n1 8 6\n\n>>> solution('''41''')\n5\n1 8 6\n\n>>> solution('''42''')\n5\n1 8 6\n\n>>> solution('''43''')\n5\n1 8 6\n\n>>> solution('''44''')\n5\n1 8 6\n\n>>> solution('''45''')\n5\n1 8 6\n\n>>> solution('''46''')\n5\n1 8 6\n\n>>> solution('''47''')\n5\n1 8 6\n\n>>> solution('''48''')\n5\n1 8 6\n\n>>> solution('''49''')\n5\n1 8 6\n\n>>> solution('''50''')\n5\n1 8 6\n\n>>> solution('''51''')\n5\n1 8 6\n\n>>> solution('''52''')\n5\n1 8 6\n\n>>> solution('''53''')\n5\n1 8 6\n\n>>> solution('''54''')\n5\n1 8 6\n\n>>> solution('''55''')\n5\n1 8 6\n\n>>> solution('''56''')\n5\n1 8 6\n\n>>> solution('''57''')\n5\n1 8 6\n\n>>> solution('''58''')\n5\n1 8 6\n\n>>> solution('''59''')\n5\n1 8 6\n\n>>> solution('''60''')\n5\n1 8 6\n\n>>> solution('''61''')\n5\n1 8 6\n\n>>> solution('''62''')\n5\n1 8 6\n\n>>> solution('''63''')\n5\n1 8 6\n\n>>> solution('''64''')\n5\n1 8 6\n\n>>> solution('''65''')\n5\n1 8 6\n\n>>> solution('''66''')\n5\n1 8 6\n\n>>> solution('''67''')\n5\n1 8 6\n\n>>> solution('''68''')\n5\n1 8 6\n\n>>> solution('''69''')\n5\n1 8 6\n\n>>> solution('''70''')\n5\n1 8 6\n\n>>> solution('''71''')\n5\n1 8 6\n\n>>> solution('''72''')\n5\n1 8 6\n\n>>> solution('''73''')\n5\n1 8 6\n\n>>> solution('''74''')\n5\n1 8 6\n\n>>> solution('''75''')\n5\n1 8 6\n\n>>> solution('''76''')\n5\n1 8 6\n\n>>> solution('''77''')\n5\n1 8 6\n\n>>> solution('''78''')\n5\n1 8 6\n\n>>> solution('''79''')\n5\n1 8 6\n\n>>> solution('''80''')\n5\n1 8 6\n\n>>> solution('''81''')\n5\n1 8 6\n\n>>> solution('''82''')\n5\n1 8 6\n\n>>> solution('''83''')\n5\n1 8 6\n\n>>> solution('''84''')\n5\n1 8 6\n\n>>> solution('''85''')\n5\n1 8 6\n\n>>> solution('''86''')\n5\n1 8 6\n\n>>> solution('''87''')\n5\n1 8 6\n\n>>> solution('''88''')\n5\n1 8 6\n\n>>> solution('''89''')\n5\n1 8 6\n\n>>> solution('''90''')\n5\n1 8 6\n\n>>> solution('''91''')\n5\n1 8 6\n\n>>> solution('''92''')\n5\n1 8 6\n\n>>> solution('''93''')\n5\n1 8 6\n\n>>> solution('''94''')\n5\n1 8 6\n\n>>> solution('''95''')\n5\n1 8 6\n\n>>> solution('''96''')\n",
        "num_ids": 1470
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    tree = stdin.strip()\n    n = int(tree[0])\n    tree = tree[1:]\n    graph = {}\n    for edge in tree.split(\"\\n\"):\n        v1, v2 = [int(x) for x in edge.split()]\n        if v1 in graph:\n            graph[v1].append(v2)\n        else:\n            graph[v1] = [v2]\n        if v2 in graph:\n            graph[v2].append(v1)\n        else:\n            graph[v2] = [v1]\n    answer = 0\n    for i in range(n):\n        if i in graph:\n            for j in range(n):\n                if j in graph:\n                    path = [i]\n                    visited = {i}\n                    while len(path) > 1:\n                        for a in graph[path[-1]]:\n                            if a in visited:\n                                path = path[:path.index(a) + 1]\n                                visited = visited | {a}\n                                break\n                        if a not in visited:\n                            break\n                    answer = max(answer, len(path) - 1)\n    return str(answer)",
        "num_ids": 281
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = [int(x) - 1 for x in stdin.split()]\n        tree[x].append(y)\n        tree[y].append(x)\n    res = 0\n    for i in range(n):\n        res = max(res, solve(tree, i))\n    return str(res)\n\ndef",
        "num_ids": 113
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [None] * n\n    for i in range(n - 1):\n        arr[i] = tuple(int(x) - 1 for x in stdin.split())\n    arr = set(arr)\n    edges = []\n    for a, b in arr:\n        if a > b:\n            a, b = b, a\n        edges.append((a, b))\n    edges.sort()\n    res = 1\n    for a, b in edges:\n        res = max(res, (b - a + 1) * (n - a - 1))\n    return str(res)",
        "num_ids": 153
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, *edges = [tuple(map(int, line.strip().split())) for line in stdin.split('\\n')]\n    import math\n    if len(edges) < 3: return str(0)\n    n = int(math.sqrt(len(edges)))\n    if n * n!= len(edges): return str(0)\n    matrix = [[0] * n for _ in range(n)]\n    for i, j in edges:\n        matrix[i - 1][j - 1] = 1\n    for i in range(n):\n        for j in range(n):\n            if i!= j and matrix[i][j]:\n                a, b, c = i, j, (i + j - 1) % n\n                while a!= b and b!= c:\n                    if matrix[a][b]: return str(3)\n                    a, b = (a + 1) % n, (b - 1) % n\n                if a == b and matrix[a][c]: return str(3)\n    return str(0)",
        "num_ids": 260
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    tree = []\n    for _ in range(N - 1):\n        a, b = [int(x) for x in stdin.split()]\n        tree.append((a, b))\n    tree = set(tree)\n    count = 0\n    # can be optimized with a union find (maybe)\n    for a, b in tree:\n        for c in tree:\n            if c!= a and c!= b and a!= c:\n                if a < b < c or a < c < b or b < a < c or b < c < a:\n                    count = max(count, a + b + c)\n    return str(count)\n\n\n\nN = 8\ntree = []\nfor _ in range(N - 1):\n    a, b = [int(x) for x in stdin.split()]\n    tree.append((a, b))\ntree = set(tree)\ncount = 0\nfor a, b in tree:\n    for c in tree:\n        if c!= a and c!= b and a!= c:\n            if a < b < c or a < c < b or b < a < c or b < c < a:\n                count = max(count, a + b + c)\nprint(count)\n",
        "num_ids": 304
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    n = int(stdin)\n    edges = defaultdict(list)\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        edges[a].append(b)\n        edges[b].append(a)\n    max_edges = 0\n    result = []\n    for i in range(1, n):\n        visited = [0] * (n + 1)\n        visited[i] = 1\n        path = [i]\n        for a in edges[i]:\n            if visited[a] == 1:\n                continue\n            visited[a] = 1\n            path.append(a)\n        visited[i] = 1\n        for j in range(1, n + 1):\n            if visited[j] == 0:\n                visited[j] = 1\n                for a in edges[j]:\n                    if visited[a] == 0:\n                        visited[a] = 1\n                        path.append(a)\n                        if len(path) == n:\n                            if len(set(path)) == n:\n                                max_edges = max(max_edges, len(path))\n                                result = path\n                            else:\n                                path.pop()\n                                visited[j] = 0\n                        else:\n                            visited[j] = 0\n                            path.pop()\n                    else:\n                        visited[j] = 0\n                        path.pop()\n                        break\n    print(max_edges)\n    print(*result)\n    return \"\"\n\nprint(solution(input()))",
        "num_ids": 377
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = [int(x) for x in stdin.readline().strip().split()]\n\n    def dfs(nums, visited, divisor, count, x):\n        if count == 2:\n            return nums, visited\n        if not nums:\n            return None\n        for i in range(len(nums)):\n            if divisor in nums[i] and not visited[i]:\n                visited[i] = True\n                result = dfs(nums[:i]+nums[i+1:], visited[:], divisor, count+1, x)\n                if result:\n                    return result\n        return None\n\n    visited = [False]*n\n    divisor = 1\n    for i in range(n):\n        if d[i] == divisor:\n            visited[i] = True\n            divisor = 2 * divisor\n    x, y = dfs(d, visited, divisor, 0, 0)\n    return \"{} {}\".format(x, y)\n\nassert (solution('''10\n10 2 8 1 2 4 1 20 4 5\n''')) == '20 8'\nassert (solution('''3\n3 5 2 3\n2 3 5\n3 5 2\n3 3\n5 3\n3 2\n2 3\n3 1\n1 3\n3 2\n2 3\n''')) == '2 3'\nassert (solution('''11\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n",
        "num_ids": 1552
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    x = stdin.readline().strip()\n    y = stdin.readline().strip()\n    return x,y",
        "num_ids": 42
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_divisors = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split()]\n    result = [0] * num_of_divisors\n    for i in range(num_of_divisors):\n        for j in range(num_of_divisors):\n            if divisors[i] == divisors[j] and i!= j:\n                result[i] += 1\n    print(*result)",
        "num_ids": 122
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    divisors = stdin.split(\" \")\n    divisors = [int(d) for d in divisors]\n    divisors = sorted(divisors)\n    new_divisors = sorted(divisors)\n    new_divisors = [str(d) for d in new_divisors]\n    return \" \".join(new_divisors)\n    pass",
        "num_ids": 95
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors_x = list(map(int, stdin.split()))\n    divisors_y = list(map(int, stdin.split()))\n\n    divisors = set(divisors_x + divisors_y)\n    divisors_x = set(divisors_x)\n    divisors_y = set(divisors_y)\n\n    x = list(divisors_x - divisors)\n    y = list(divisors_y - divisors)\n\n    x.sort()\n    y.sort()\n\n    return''.join(list(map(str, x))) +'' +''.join(list(map(str, y)))\n",
        "num_ids": 174
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline().strip())\n    data = sorted(map(int, stdin.readline().strip().split()))\n    \n    for i in range(num):\n        if data[i] > data[i+1]:\n            return \" \".join(map(str, data[i], data[i+1]))\n    \n    return \" \".join(map(str, data[-1], data[0]))",
        "num_ids": 105
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        return stdin.readline().strip()\n    divisors = [int(x) for x in stdin.readline().strip().split()]\n    seen = set()\n    for i in range(len(divisors)):\n        if divisors[i] in seen:\n            seen.add(divisors[i] * 2)\n        else:\n            seen.add(divisors[i])\n    for i in range(len(divisors)):\n        if divisors[i] in seen:\n            seen.remove(divisors[i])\n    for i in range(len(divisors)):\n        if divisors[i] not in seen:\n            seen.add(divisors[i])\n            break\n    return str(seen.pop()) + \" \" + str(seen.pop())",
        "num_ids": 219
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors_x = set(stdin.readline().strip().split(' '))\n    divisors_y = set(stdin.readline().strip().split(' '))\n    divisors_x_y = divisors_x | divisors_y\n    divisors_x_y = list(divisors_x_y)\n    divisors_x_y.sort()\n    return''.join([str(x) for x in divisors_x_y])",
        "num_ids": 132
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 10 ** 4:\n        return \"\"\n    divisors = [int(x) for x in stdin.split()]\n    if len(divisors) < n:\n        return \"\"\n    for i in range(n):\n        if divisors[i] in divisors[i + 1:]:\n            return \" \".join([str(x) for x in divisors[i:]]) + \" \" + str(divisors[i]) + \" \" + \" \".join([str(x) for x in divisors[:i]])",
        "num_ids": 147
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = [int(i) for i in stdin.readline().strip().split()]\n    \n    for _ in range(n):\n        d = int(stdin.readline().strip())\n        if d in divisors:\n            divisors.remove(d)\n    \n    return''.join([str(i) for i in divisors])\n\nassert solution('''\\\n10\n10 2 8 1 2 4 1 20 4 5\n''') == '20 8'\n'''\n",
        "num_ids": 135
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split()[1:])) for _ in range(n)]\n    \n    # n, m, k = map(int, stdin.split())\n    # matrix = [list(map(int, stdin.split()[1:])) for _ in range(m)]\n    \n    # for i, row in enumerate(matrix):\n    #     n, m = len(row), len(row)\n    #     if n < m:\n    #         matrix[i] += [0]*(m-n)\n    #     elif m < n:\n    #         matrix[i] = matrix[i] + [0]*(n-m)\n    \n    result = 0\n    for row in matrix:\n        for i in range(len(row) // 2):\n            result = max(result, row[i] + row[-i - 1])\n    \n    return result % k\n",
        "num_ids": 249
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    l = []\n    for _ in range(m):\n        l.append(list(map(int, stdin.split(' '))))\n    res = 0\n    for i in range(m):\n        total = 0\n        for j in range(n):\n            if l[i][j] % k == 0:\n                total += l[i][j]\n        if total > res:\n            res = total\n    return str(res)",
        "num_ids": 123
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin.split()][:m])\n    result = 0\n\n    for row in matrix:\n        for elem in row:\n            if elem % k == 0:\n                result += elem\n                break\n\n    return str(result)",
        "num_ids": 106
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [list(map(int, stdin.split(' ')[1:])) for _ in range(n)]\n    m1 = m // 2\n    s = 0\n    for i in range(n):\n        m1 = min(m1, len(a[i]))\n        s += max(a[i][:m1])\n    print(s % k)",
        "num_ids": 112
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    a = []\n    for i in range(n):\n        a.append([int(s) for s in stdin.split()])\n    s = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j < m - 1 and a[i][j] % k == 0:\n                s[i] += a[i][j]\n            if j < m - 2 and a[i][j] % k == 0 and a[i][j + 1] % k == 0:\n                s[i] += a[i][j + 1]\n            if j < m - 3 and a[i][j] % k == 0 and a[i][j + 1] % k == 0 and a[i][j + 2] % k == 0:\n                s[i] += a[i][j + 2]\n    return str(max(s))",
        "num_ids": 237
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split()]\n    matrix = [list(map(int, stdin.strip().split())) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] %= k\n    row_sum = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] > 0:\n                row_sum[i] += matrix[i][j]\n    r = max(row_sum)\n    if r % k == 0:\n        return str(r)\n    else:\n        return str(r + k - r % k)\n",
        "num_ids": 181
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    max_sum = 0\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] > max_sum:\n                max_sum = matrix[i][j]\n    return max_sum\n\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(stdin), '24')\n",
        "num_ids": 152
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(len(seq)):\n        if i == 0:\n            left, right = 0, seq[i]\n        else:\n            left, right = seq[i-1], seq[i]\n        if right > left:\n            k = i\n    if k == 0:\n        return 'L'\n    else:\n        return ''.join(['L', *[s for s in 'R'*(k-1)]])\n\n\nassert(solution('5\\n1 2 4 3 2\\n') == '4\\nLRLRRR')\nassert(solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nLRLRRR')\nassert(solution('3\\n2 2 2\\n') == '1\\nR')\nassert(solution('4\\n1 2 4 3\\n') == '4\\nLLRR')\nassert(solution('\\n'.join(\n    ['6\\n1 3 5 6 5 4 2\\n'] * (1000 - 1) +\n    ['6\\n1 3 5 6 5 4 2\\n']\n)) == '6\\nRLLRRRRRLLRRRRRRRLLRRRRRRLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
        "num_ids": 1475
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    maxLen = 0\n    for i in range(len(l) - 1, 0, -1):\n        j = 0\n        while j < i:\n            if l[j] < l[i]:\n                maxLen = max(maxLen, i - j)\n            j += 1\n\n    ans = ''\n    if maxLen > 0:\n        for i in range(maxLen):\n            if i == 0:\n                ans += 'L'\n            else:\n                ans += 'R'\n    return ans",
        "num_ids": 159
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\n\ndef",
        "num_ids": 12
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    m = 0\n    s = ''\n    for i in range(n):\n        if l[i] > m:\n            m = l[i]\n            s = 'L'\n        elif l[i] < m:\n            m = l[i]\n            s = 'R'\n        else:\n            if i == 0:\n                s = 'R'\n            elif l[i-1]!= l[i]:\n                s = 'LRRR'\n    return str(m) + s\n",
        "num_ids": 156
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Solutions-----\n\n##  My Solution\nfrom collections import deque\nn = int(input())\na = list(map(int,input().split()))\nd = deque()\n\nfor i in a:\n    d.append(i)\n\nfor i in range(n):\n    a[i] = d.popleft()\n    if a[i] == d[0]:\n        d.popleft()\n\nfor i in range(n):\n    if d[0] > d[-1]:\n        print(i+1,end=\"\")\n    else:\n        print(i+1,end=\"R\")\n\n\n##  Luukas Solution\nfrom collections import deque\nn = int(input())\na = list(map(int,input().split()))\n\nfor i in range(n):\n    if a[i] > a[i+1]:\n        print(i+1,end=\"\")\n    else:\n        print(i+1,end=\"L\")\n\n\n##  Google Solution\ndef",
        "num_ids": 247
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 1\n    left = a[0]\n    right = a[-1]\n    s = \"\"\n    for i in range(1, n):\n        if a[i] >= left:\n            if a[i] > right:\n                k += 1\n                right = a[i]\n            else:\n                right = a[i]\n        else:\n            s = \"L\" + s\n            left = a[i]\n    s = \"R\" + s\n    return str(k) + s\n",
        "num_ids": 156
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    a = stdin.strip()\n    a = list(map(int, a.split()))\n    b = max(a, key=len)\n    return b\n\n\"\"\"\n\n\ndef",
        "num_ids": 55
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    s = \"\"\n    l = len(a)\n    for i in range(l):\n        if i == 0:\n            s += \"L\"\n        else:\n            if a[i] > a[i - 1]:\n                s += \"R\"\n            else:\n                s += \"L\"\n\n    print(s)",
        "num_ids": 109
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return",
        "num_ids": 3
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if not n:\n        return None\n    n = int(n)\n    a = [int(x) for x in stdin.readline().split()]\n    if n!= len(a):\n        return -1\n    m = len(a)\n    s = 0\n    while m > 1:\n        m -= 1\n        s += 1\n        if a[m] < 0:\n            if a[m] * -1 < a[m - 1]:\n                a[m] = a[m] * -1\n                for i in range(m + 1, m + n):\n                    a[i] += s\n            else:\n                return -1\n    return str(s)\n\n\ndef",
        "num_ids": 179
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    a = stdin.splitlines()[1].split()\n    # print(a)\n    min_val = float('inf')\n    for i in range(1,int(n)+1):\n        a[i-1] = int(a[i-1])\n    # print(a)\n    for i in range(1,int(n)+1):\n        for j in range(1, int(n)+1):\n            if i==j:\n                continue\n            if a[i-1] < 0:\n                continue\n            if a[j-1] < 0:\n                continue\n            if a[i-1]!= a[j-1]:\n                a[i-1] += max(int(a[j-1]), int(a[i-1]))\n                a[j-1] += max(int(a[j-1]), int(a[i-1]))\n                a[i-1] -= max(int(a[j-1]), int(a[i-1]))\n                a[j-1] -= max(int(a[j-1]), int(a[i-1]))\n                # print(a)\n            if abs(int(a[i-1])) < abs(int(a[j-1])):\n                a[i-1] += abs(int(a[j-1]))\n                a[j-1] -= abs(int(a[j-1]))\n            else:\n                a[i-1] += abs(int(a[j-1]))\n                a[j-1] -= abs(int(a[j-1]))\n            # print(a)\n            if max(a) < min_val:\n                min_val = max(a)\n    if min_val == float('inf'):\n        return -1\n    else:\n        return min_val\n",
        "num_ids": 457
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(\" \")]\n\n    # print(arr)\n\n    best = 0\n\n    for i in range(n):\n        # print(i)\n        value = arr[i]\n        if value < 0:\n            continue\n\n        count = 1\n        while value > 0:\n            if value - count > 0:\n                value -= count\n                count += 1\n            else:\n                break\n\n        if count > best:\n            best = count\n\n    if best == 0:\n        return \"-1\"\n    else:\n        return str(best)\n\nsolution(input())\n",
        "num_ids": 166
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = 1\n    for i in range(n):\n        d += max(a) - min(a)\n        a[i] = a[i] + d if a[i] >= 0 else a[i] - d\n    return str(d) if max(a) == min(a) else -1\n\nprint(solution(input()))\n",
        "num_ids": 120
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split(' ')))\n    arr = [0] + arr\n    n += 1\n    def _sort(arr, k):\n        def _cmp(a, b):\n            return cmp(a[k], b[k])\n        arr.sort(_cmp)\n        return arr\n    \n    def _index(arr, v):\n        for i, a in enumerate(arr):\n            if a == v:\n                return i\n        return None\n    \n    for d in xrange(1, 100):\n        if sum(a + d for a in arr) == sum(a - d for a in arr):\n            return d\n    return -1\n    \n",
        "num_ids": 177
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    min_ = float('inf')\n    min_v = float('inf')\n\n    for _ in range(n):\n        if nums[_] < 0:\n            min_ = float('inf')\n        else:\n            min_ = min(min_, nums[_])\n\n    for d in range(1, min_):\n        v = 0\n        for num in nums:\n            if num >= 0:\n                v += num\n            else:\n                v -= num\n            v -= d\n            if v == 0:\n                min_v = min(min_v, d)\n                break\n    if min_v == float('inf'):\n        return '-1'\n    else:\n        return str(min_v)\n\n\nassert(solution('''5\n1 4 4 7 4 1\n''')) == '3'\nassert(solution('''6\n1 4 4 7 4 1\n''')) == '3'\nassert(solution('''7\n2 2 5 2 5 5\n''')) == '-1'\nassert(solution('''4\n1 3 3 7\n''')) == '-1'\nassert(solution('''4\n2 2 5 2 5\n''')) == '3'\nassert(solution('''8\n2 2 5 2 5 5 1 1\n''')) == '3'\nassert(solution('''2\n4 4\n''')) == '-1'\nassert(solution('''6\n2 2 5 2 5 5\n''')) == '3'\nassert(solution('''2\n8 2\n''')) == '3'\nassert(solution('''2\n2 8\n''')) == '-1'\nassert(solution('''7\n1 3 3 7 4 1\n''')) == '3'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1'\nassert(solution('''7\n4 4 4 4 4 4\n''')) == '-1",
        "num_ids": 1459
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(stdin.readline()) for _ in range(n)]\n    D = 1\n    all_equal = False\n    while not all_equal:\n        for number in numbers:\n            if number < 0:\n                D += 1\n                break\n        if D > 0:\n            for number in numbers:\n                number += D\n                if number < 0:\n                    D += 1\n                    break\n        if D > 0:\n            for number in numbers:\n                number -= D\n                if number < 0:\n                    D += 1\n                    break\n        all_equal = True\n        for number in numbers:\n            if number!= D:\n                all_equal = False\n                break\n    if D < 0:\n        D = -1\n    return str(D)",
        "num_ids": 195
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    minimum = -1\n    for i in range(n):\n        value = A[i]\n        for j in range(n):\n            if value == 0:\n                minimum = 1\n                break\n            elif A[j] < 0:\n                continue\n            else:\n                value = A[j] + value\n                A[j] = A[j] - value\n                if A[j] == 0:\n                    minimum = 1\n                    break\n        if minimum!= 1:\n            break\n    return str(minimum)",
        "num_ids": 155
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(x) for x in stdin.split()]\n\n    if not is_all_equal(array):\n        return '-1'\n\n    d = array[0]\n    for i in range(1, len(array)):\n        if array[i] > d:\n            d = array[i]\n        elif array[i] < d:\n            return str(d - array[i])\n\n    return str(d)\n\n\ndef",
        "num_ids": 109
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    if x_1 < x_3 or x_1 > x_4 or y_1 < y_3 or y_1 > y_4 or x_2 > x_6 or x_2 < x_5 or y_2 > y_6 or y_2 < y_5:\n        return \"NO\"\n    if x_5 < x_3 or x_5 > x_4 or y_5 < y_3 or y_5 > y_4:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2 and y_3 > y_1 and y_4 < y_2:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2 and y_3 > y_1 and y_4 < y_2 and x_5 > x_3 and x_6 < x_4:\n        return \"NO\"\n    if x_3 > x_1 and x_4 < x_2 and y_3 > y_1 and y_4 < y_2 and x_5 > x_3 and x_6 < x_4 and y_5 > y_3 and y_6 < y_4:\n        return \"NO\"\n    return \"YES\"",
        "num_ids": 412
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Try to find out the result\n    pass\n\n\"\"\"\ndef",
        "num_ids": 22
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = tuple(map(int, stdin.strip().split(' ')))\n    x_3, y_3, x_4, y_4 = tuple(map(int, stdin.strip().split(' ')))\n    x_5, y_5, x_6, y_6 = tuple(map(int, stdin.strip().split(' ')))\n    return 'YES' if (x_1 < x_3 or x_3 < x_5) and (y_1 < y_3 or y_3 < y_5) and (x_2 > x_4 or x_4 > x_6) and (y_2 > y_4 or y_4 > y_6) else 'NO'\n\ndef",
        "num_ids": 184
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTests:\n\n>>> solution(\"\")\n'NO'\n>>> solution(\"1 1 2 2\")\n'NO'\n>>> solution(\"1 1 2 2\")\n'NO'\n>>> solution(\"2 2 4 4\")\n'NO'\n>>> solution(\"1 1 3 5\")\n'YES'\n>>> solution(\"3 1 5 5\")\n'YES'\n>>> solution(\"3 1 5 5\")\n'YES'\n\n\"\"\"\nfrom typing import Tuple\n\ndef",
        "num_ids": 108
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    x3, y3, x4, y4 = list(map(int, stdin.split()))\n    return \"YES\" if (x1, y1) == (x3, y3) or (x2, y2) == (x4, y4) or (x3, y3) == (x4, y4) else \"NO\"\n",
        "num_ids": 111
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"",
        "num_ids": 9
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef",
        "num_ids": 7
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l1, l2, l3, l4 = stdin.split(' ')\n    l1, l2, l3, l4 = int(l1), int(l2), int(l3), int(l4)\n\n    x1, y1 = l1, l2\n    x2, y2 = l3, l4\n    if l3 > l1:\n        x1, y1, x2, y2 = x2, y2, x1, y1\n\n    if x1 > x2 or y1 > y2:\n        return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef",
        "num_ids": 158
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    x3, y3, x4, y4 = [int(i) for i in stdin.split()]\n    x5, y5, x6, y6 = [int(i) for i in stdin.split()]\n    x_1, y_1 = min(x1, x2), min(y1, y2)\n    x_2, y_2 = max(x1, x2), max(y1, y2)\n    x_3, y_3 = min(x3, x4), min(y3, y4)\n    x_4, y_4 = max(x3, x4), max(y3, y4)\n    x_5, y_5 = min(x5, x6), min(y5, y6)\n    x_6, y_6 = max(x5, x6), max(y5, y6)\n    if not (x_1 < x_2 and y_1 < y_2) and not (x_3 < x_4 and y_3 < y_4) and not (x_5 < x_6 and y_5 < y_6) and (\n            (min(x1, x2) < min(x3, x4) < max(x1, x2)) and (\n            min(y1, y2) < min(y3, y4) < max(y1, y2)) and (\n            min(x5, x6) < min(x3, x4) < max(x5, x6)) and (\n            min(y5, y6) < min(y3, y4) < max(y5, y6))):\n        return 'NO'\n    return 'YES'\n",
        "num_ids": 434
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    result = n\n    while True:\n        result += 1\n        if str(result).endswith('0'):\n            continue\n        else:\n            break\n    return result\n\nassert solution('1098') == 21\nassert solution('10') == 19\n",
        "num_ids": 76
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(int, stdin))))\n    \nassert(solution(input()) == \"19\")\nassert(solution(input()) == \"20\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"0\")\n",
        "num_ids": 67
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    count = 0\n    for i in range(1, n):\n        count += (n - i) * i\n    return str(count)",
        "num_ids": 82
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    memo = {0: 1}\n    def f(x: int) -> int:\n        if x in memo:\n            return memo[x]\n        memo[x] = sum(f(x + y) for y in range(1, 10) if 10 * x + y not in memo)\n        return memo[x]\n    print(f(n))\n    return 0\n",
        "num_ids": 100
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        nums[i] = i\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            nums[i] = min(nums[i], nums[j] + i - j)\n    return str(nums[n])",
        "num_ids": 104
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = [1]\n    for i in range(2, n + 1):\n        count = 0\n        for j in range(len(result)):\n            result.append(result[j] + i)\n    return str(len(result))",
        "num_ids": 68
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(answer(int(stdin)))\n\ndef",
        "num_ids": 15
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    all_friends = list(map(int, stdin.readline().strip().split(' ')))\n    uniq_friends = set(all_friends)\n    count = 0\n    for i in uniq_friends:\n        if i == 0:\n            count += 1\n    if count == 0:\n        return''.join(list(map(str, all_friends)))\n    else:\n        return''.join(list(map(str, (all_friends.count(i) for i in uniq_friends))))\nprint(solution('''5\n5 0 0 2 4\n'''))\nprint(solution('''7\n7 0 0 1 4 0 6\n'''))\nprint(solution('''7\n7 4 0 3 0 5 1\n'''))\nprint(solution('''5\n2 1 0 0 0\n'''))\n",
        "num_ids": 215
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = list(map(int, stdin.readline().strip().split()))\n    \n    # t: the number of friends who give a gift to a specific friend\n    # t[i] is the number of friends who give a gift to friend i\n    t = [0] * n\n\n    # f: the index of the friend who gives a gift to the friend i\n    # f[i] is the index of the friend who gives a gift to the friend i\n    f = [0] * n\n\n    for i in range(n):\n        if friends[i] > 0:\n            t[i] = 1\n            f[i] = friends[i] - 1\n        elif friends[i] < 0:\n            f[i] = n + friends[i] - 1\n            t[i] = -1\n\n    for i in range(n):\n        if t[i] == 1:\n            t[i] = f[i]\n        elif t[i] == -1:\n            t[i] = -f[i]\n\n    return''.join(map(str, t))\n",
        "num_ids": 272
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    friends = stdin.readline().split()\n    friends = [int(friends[i]) for i in range(len(friends))]\n    sorted_friends = sorted(friends)\n    ans = []\n    count = 0\n    for i in range(n):\n        if sorted_friends[i]!= i:\n            ans.append(sorted_friends[i])\n            count += 1\n        else:\n            ans.append(count)\n    return''.join(str(ans[i]) for i in range(n))",
        "num_ids": 143
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = stdin.readline().split()\n    friends = [0] * n\n    for i in range(n):\n        friends[i] = int(data[i])\n    ans = []\n    for i in range(n):\n        if friends[i]!= i:\n            ans.append(i)\n        else:\n            ans.append(friends[i])\n    return''.join(map(str, ans))\n\nassert(solution('''5''') == '5')\nassert(solution('''7''') == '7 3 2 1 4 5 6')\nassert(solution('''7''') == '7 4 2 3 6 5 1')\nassert(solution('''5''') == '5 3 1 2 4')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''7''') == '7 4 2 3 6 5 1')\nassert(solution('''1''') == '1')\nassert(solution('''100000''') == '9939 34 10 1 8 6 2 4 5 9 7 3 3 4')\n'''\ndef",
        "num_ids": 285
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    f = [int(x) for x in stdin[1:]]\n    if n < 2:\n        print(0)\n    elif n == 2:\n        if len(set(f)) == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        print(*sorted(set(i for i in range(n) if f[i] == 0)), sep=' ')\n    return ''",
        "num_ids": 125
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    gifts = [int(x) for x in lines[1].split()]\n    gifts = [x for x in gifts if x!= 0]\n    assert len(gifts) > 1\n    ans = [0] * n\n    visited = [False] * n\n    for i in range(n):\n        ans[gifts[i] - 1] = i + 1\n        visited[i] = True\n        if i == 0:\n            for j in range(n):\n                if not visited[j] and j!= gifts[i] - 1:\n                    ans[j] = i + 1\n                    visited[j] = True\n    return \" \".join(map(str, ans))",
        "num_ids": 187
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = [int(x) for x in stdin.readline().split()]\n    result = [0] * n\n    for i in range(n):\n        if friends[i]!= 0:\n            result[i] = friends[i]\n    return''.join([str(x) for x in result])",
        "num_ids": 88
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    nfriends = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    answer = [0]*n\n\n    for i in range(n):\n        if nfriends[i] == 0:\n            for j in range(n):\n                if j!= i:\n                    answer[j] += 1\n        else:\n            answer[i] = nfriends[i]\n\n    return''.join([str(x) for x in answer])",
        "num_ids": 124
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u0440\u0442\u0443 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0440\u0442\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0430\u0440\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0432 \u043a\u0430\u0440\u0442\u0430\u0445.\n    \u041a\u0430\u0440\u0442\u044b \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u0437\u044f\u0442\u044b \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u0430\u0440\u0442\u044b \u043e\u0442 \u0442\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043e\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u0435\u0442 \u043a\u0430\u0440\u0442\u044b. \u0412 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442 \u043a\u0430\u0440\u0442\u044b \u0438\u043b\u0438 \u043d\u0435\u0442.\n    \u041e\u0442\u043a\u0440\u044b\u0442\u044c \u043a\u0430\u0440\u0442\u0443 \u0437\u0430\u0442\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430.\n    \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043a\u0430\u0440\u0442\u044b. \u0415\u0441\u043b\u0438 \u043e\u043d \u0442\u0430\u043a\u043e\u0439, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u0430\u0440\u0442\u044b \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0440\u0442 \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435.\n    \"\"\"\n    n = stdin.readline().strip()\n    friends = [list(map(int, stdin.readline().strip().split())) for i in range(int(n))]\n\n    for i in range(int(n)):\n        if friends[i][i] > 0:\n            friends[i][i] -= 1\n\n    for i in range(int(n)):\n        f = [0] * int(n)\n        for j in range(int(n)):\n            if friends[i][j] > 0:\n                f[j] = friends[i][j]\n        for k in range(int(n)):\n            if f[k] > 0:\n                friends[i][k] -= f[k]\n                friends[k][i] -= f[k]\n\n    for i in range(int(n)):\n        if friends[i][i] > 0:\n            for j in range(i, int(n)):\n                if friends[i][j] > 0:\n                    friends[i][j] -= 1\n                    friends[j][i] -= 1\n\n    for i in range(int(n)):\n        if friends[i][i] > 0:\n            print(i + 1, end=' ')\n    print()\n    return ''\n\n\ndef",
        "num_ids": 811
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = list(map(int, stdin.split()))\n    f = [0] + f\n    g = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j and f[i]!= 0 and f[j]!= 0:\n                g[i] += 1\n                g[j] += 1\n    return''.join(map(str, g[1:]))",
        "num_ids": 128
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    if n < k:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    else:\n        return \"YES\" if len(set(a)) == k else \"NO\"\n",
        "num_ids": 87
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    for i in range(k):\n        for j in range(1, n):\n            if j in [x for x in range(1, k)]:\n                if a[j] == a[j - 1]:\n                    return \"NO\"\n    return \"YES\"",
        "num_ids": 103
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, n = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    # color each element as possible to the first color\n    colors = [0] * k\n    possible = True\n    for i in range(n):\n        # check if it is possible to color it\n        possible = True\n        for j in range(k):\n            if colors[j]!= -1:\n                if colors[j] == a[i]:\n                    possible = False\n                    break\n        if not possible:\n            continue\n        # color it\n        for j in range(k):\n            if colors[j] == -1:\n                colors[j] = a[i]\n                break\n    # check if the solution is possible\n    possible = True\n    for j in range(k):\n        if colors[j] == -1:\n            possible = False\n            break\n    if possible:\n        return \"YES\"\n    # print the answer\n    return \"NO\"\n",
        "num_ids": 253
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom collections import defaultdict\n\ndef",
        "num_ids": 14
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"",
        "num_ids": 5
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k > n:\n        print('NO')\n        return\n    c = [0] * k\n    for a_i in a:\n        c[a_i] += 1\n        if c[a_i] > 1:\n            print('NO')\n            return\n    print('YES')\n    print(*c)",
        "num_ids": 108
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    if n < 2 or k < 1 or k > n:\n        return \"NO\"\n\n    else:\n        colors = set()\n        for i in range(1, k + 1):\n            colors.add(i)\n            for j in range(1, k + 1):\n                if j not in colors:\n                    for x in range(n):\n                        if x + 1 not in colors:\n                            colors.add(x + 1)\n                            break\n                    else:\n                        return \"NO\"\n\n        return \"YES\"\n\nprint(solution(input()))\n\nprint(solution(input()))\n",
        "num_ids": 183
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    n_digits = len(stdin)\n    if n_digits == 1:\n        return \"0\"\n    if x == 1 and y == 0:\n        return \"1\"\n    count = 0\n    number = stdin\n    while count < n_digits:\n        if number[count] == \"1\":\n            number = number[:count] + \"0\" + number[count+1:]\n            count += 1\n        else:\n            number = number[:count] + \"1\" + number[count+1:]\n            count += 1\n        count = count % n\n    if number[-1] == \"1\":\n        number = \"1\" + number\n    return number\n\nprint(solution(input()))\n",
        "num_ids": 191
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    number = stdin.strip()\n    # 1 1 0 0 1 0 0 1 1 0 1\n    # 1 0 1 1 0 1 1 0 0 0 1\n    # 1 0 0 0 0 0 1 1 0 0 1\n    # 1 1 0 1 0 1 0 1 0 1 0\n    # 0 1 1 1 1 0 0 0 1 1 1\n    # 1 0 1 1 1 1 1 1 1 0 0\n    # 1 0 0 1 0 1 1 1 1 1 1\n    # 1 1 0 0 1 0 0 0 1 1 1\n    # 0 1 1 0 0 1 0 0 0 1 1\n    # 1 0 1 0 1 0 0 1 1 1 1\n    # 0 0 1 0 0 1 0 0 0 1 1\n    # 0 1 0 0 1 0 1 0 1 1 1\n    # 0 1 1 0 0 1 1 0 1 1 1\n    # 1 0 1 0 0 1 1 1 0 1 1\n    # 1 0 1 0 0 0 1 1 1 1 1\n    # 1 0 1 1 0 1 0 1 1 1 1\n    # 0 0 0 0 0 1 0 1 1 1 1\n    # 1 0 1 1 0 0 1 1 1 1 1\n    # 0 1 1 0 0 1 1 1 1 1 1\n    # 1 0 1 0 0 0 1 1 1 1 1\n    # 1 0 1 1 0 0 1 1 1 1 1\n    # 0 0 0 0 0 1 0 1 1 1 1\n    # 0 1 0 0 0 1 0 1 1 1 1\n    # 1 0 1 0 0 0 1 0 1 1 1\n    # 1 0 1 0 0 1 1 1 1 1 1\n    # 0 0 0 0 0 1 1 1 1 1 1\n    # 1 0 1 0 1 0 0 0 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 0 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 1 0 1 0 0 0 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 0 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 0 0 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 0 0 0 0 1 1 1 1 1 1 1\n    # 0 1 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1 1 1 1\n    # 1 0 1 0 1 1 1 1",
        "num_ids": 1582
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = stdin[1:]\n    one_count = 0\n    while x + y < len(number):\n        if number[x] == '1':\n            x += 1\n            one_count += 1\n        elif number[y] == '1':\n            y += 1\n            one_count += 1\n        else:\n            x += 1\n            y += 1\n            one_count += 1\n    return one_count\n\nprint(solution(input()))\n",
        "num_ids": 129
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return result",
        "num_ids": 7
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    number = stdin[1:]\n    remainder = int(number, 2) % (10 ** x)\n    operations = (remainder * (10 ** y)) // (10 ** x)\n    return str(operations)",
        "num_ids": 76
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(x) for x in stdin.split())\n    return str(n - y)",
        "num_ids": 30
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = tuple(map(int, stdin.split()))\n    number = stdin[1:]\n    n_digits = len(number)\n    min_operations = n_digits - y % n + n_digits - x % n + 1\n    return str(min_operations)\n\nprint(solution(input()))\n",
        "num_ids": 87
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    nums = list(stdin[1:])\n    modulo = 10 ** y\n    operations = 0\n    for i, digit in enumerate(nums):\n        if digit == '1':\n            nums[i] = '0'\n            operations += 1\n    nums = int(''.join(nums), 2)\n    return str(operations + (nums % modulo))\n",
        "num_ids": 118
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        a = a[:n]\n        if is_palindrome(a, 3):\n            result.append('YES')\n        else:\n            result.append('NO')\n\n    return '\\n'.join(result)\n\n\ndef",
        "num_ids": 108
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count: int = int(stdin.readline())\n    for _ in range(count):\n        n: int = int(stdin.readline())\n        a: list = [int(x) for x in stdin.readline().split()]\n        if is_palindrome(a, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef",
        "num_ids": 92
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        print('YES' if is_palindrome(a, n) else 'NO')\n\ndef",
        "num_ids": 67
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        A = [int(x) for x in stdin.readline().strip().split(' ')]\n        L = len(A)\n        if L < 3:\n            print('NO')\n        elif L == 3:\n            if A[0] == A[2] and A[1] == A[1]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            if A[L - 3] == A[L - 1]:\n                for i in range(L - 3):\n                    if A[i]!= A[L - 1 - i]:\n                        break\n                else:\n                    print('YES')\n            else:\n                print('NO')",
        "num_ids": 199
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(i) for i in stdin.readline().strip().split(' ')]\n\n        result = \"NO\"\n        for i in range(2, n - 2):\n            if a[i - 2] == a[i - 1] == a[i] == a[i + 1] == a[i + 2]:\n                result = \"YES\"\n                break\n\n        print(result)\n",
        "num_ids": 133
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return...",
        "num_ids": 4
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n\n    for _ in range(T):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        \n        if n >= 3:\n            for i in range(n - 2):\n                if a[i] == a[i + 1] == a[i + 2]:\n                    print('YES')\n                    break\n            else:\n                print('NO')\n        else:\n            print('NO')\n",
        "num_ids": 123
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'",
        "num_ids": 6
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    array = [int(x) for x in stdin.readline().strip().split()]\n    counter = 0\n    for i in range(len(array) - 2):\n        if array[i:i + 3] == array[i:i + 3][::-1]:\n            counter += 1\n    return \"NO\" if counter == 0 else \"YES\"\n\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\n",
        "num_ids": 149
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(el) for el in stdin.readline().strip().split()]\n    return \"YES\" if any(all(a[i] == a[n - i - 1] for i in range(3, n + 1, 2)) for a in itertools.combinations(a, n - 2)) else \"NO\"\n",
        "num_ids": 95
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip()]\n    f = [int(x) for x in stdin.readline().strip().split()]\n    m = max(a)\n    for i in range(1, 10):\n        m = max(m, a[0] * f[i - 1])\n    return str(m)",
        "num_ids": 103
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = [int(x) for x in stdin[1:]]\n    f = [int(x) for x in stdin[9:]]\n    n = int(n)\n    while True:\n        nums = [f[i] for i in range(9)]\n        for i in range(n):\n            if a[i] in nums:\n                index = nums.index(a[i])\n                nums[index] = f[index]\n        a = nums\n        if len(set(a)) == 1:\n            break\n    return \"\".join([str(x) for x in a])\n",
        "num_ids": 158
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def f(i: int) -> int:\n        return int(stdin[i])\n\n    n = int(stdin[0])\n    a = stdin[1:n + 1]\n    f = list(map(f, range(n)))\n    return max(map(int, list(str(a))))\n",
        "num_ids": 76
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(stdin.readline().strip())\n    f = [int(stdin.readline().strip()) for _ in range(9)]\n    a_ = []\n    for i in range(n):\n        if a[i] == '9':\n            a_ += [i for i in range(1, 10)]\n        else:\n            a_ += [int(a[i])]\n    a_ = sorted(a_)\n\n    def f_(x: int) -> int:\n        return f[x - 1]\n\n    f = map(f_, a_)\n    a = list(a)\n    for i in range(n):\n        if a[i] == '9':\n            a[i] = str(f[i])\n\n    return int(''.join(a))",
        "num_ids": 203
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1]\n    f = list(map(int, stdin[2].split(' ')))\n    # print(n, a, f)\n    a = list(map(int, a))\n    max_ = 0\n    for i in range(0, len(a)):\n        x = a[i]\n        for j in range(0, 10):\n            if j == f[x - 1]:\n                a[i] = j\n                break\n        if max_ < a[i]:\n            max_ = a[i]\n    return str(max_)\n\nimport sys",
        "num_ids": 152
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    a = int(a)\n    b = stdin[1]\n    b = b[::-1]\n    b = int(b)\n    f = [int(x) for x in stdin[2:]]\n    f = f[::-1]\n    f = [x for x in f if x in range(10)]\n    f = [x + 1 for x in f]\n    f = [x - 1 for x in f]\n    a = a * b\n    i = 0\n    max_num = 0\n    while i < len(str(a)):\n        a_ = int(str(a)[i:])\n        if a_ not in f:\n            a_ = int(str(a)[i:])\n            max_num = max_num * 10 + a_\n        i += 1\n    print(max_num)\n    return \"\"\n\nassert str(solution('''\n    1234\n    1 2 3 4 5 6 7 8 9\n    8 7 6 5 4 3 2 1\n    ''')) == '16542'\nassert str(solution('''\n    1234\n    1 2 3 4 5 6 7 8 9\n    8 7 6 5 4 3 2 1\n    ''')) == '16553'\nassert str(solution('''\n    123\n    4 1 2 3 1\n    4 1 2 3 1\n    ''')) == '4123'\nassert str(solution('''\n    123\n    4 1 2 3 1\n    4 1 2 3 1\n    ''')) == '4123'\nassert str(solution('''\n    12345\n    9 8 7 6 5 4 3 2 1\n    9 8 7 6 5 4 3 2 1\n    ''')) == '99999'\nassert str(solution('''\n    12345\n    9 8 7 6 5 4 3 2 1\n    9 8 7 6 5 4 3 2 1\n    ''')) == '99999'\nassert str(solution('''\n    1111\n    9 8 7 6 5 4 3 2 1\n    9 8 7 6 5 4 3 2 1\n    ''')) == '9999'\nassert str(solution('''\n    1111\n    9 8 7 6 5 4 3 2 1\n    9 8 7 6 5 4 3 2 1\n    ''')) == '9999'\nassert str(solution('''\n    3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3 3 3 3 3 3 3\n    3 3 3",
        "num_ids": 1635
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().rstrip()\n    a = stdin.readline().rstrip()\n    f = [int(x) for x in stdin.readline().split()]\n    return stdin.readline().rstrip()\n\n\ndef",
        "num_ids": 62
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_range(digit: int) -> int:\n        if digit == 0:\n            return 0\n        digit_ranges[digit] = [digit]\n        if digit == 1:\n            return 1\n        for i in range(digit // 2, 0, -1):\n            if (digit - i) % i == 0:\n                digit_ranges[digit].append(i)\n                digit_ranges[digit].append(digit - i)\n                break\n        return 1 + max(digit_ranges[digit])\n\n    def f(x: int) -> int:\n        if x == 0:\n            return 0\n        return digit_mapping[x]\n\n    def get_max_reached(a: int) -> int:\n        max_reached = 0\n        for digit in reversed(digit_ranges[a]):\n            max_reached = max(max_reached, get_max_reached(digit))\n        digit_mapping[a] = max_reached + 1\n        return max_reached + 1\n\n    if __name__ == \"__main__\":\n        digit_mapping = [0] * 10\n        digit_ranges = defaultdict(list)\n        n = int(stdin.readline().strip())\n        a = stdin.readline().strip()\n        f_list = [int(x) for x in stdin.readline().strip().split()]\n        for i in range(9):\n            digit_mapping[f_list[i]] = i + 1\n        print(get_max_reached(a))\n    pass\n",
        "num_ids": 376
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> import sys\n    >>> sys.argv = ['', '4', '1', '2', '3', '5', '100', '200', '300', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']\n    >>> with patch('builtins.input', lambda x: stdin):\n   ...     solution('8')\n    '1 1 3'\n    '102'\n    '114 228 456'\n    '4'\n    '4 8 16'\n    '6'\n    '18 18 18'\n    '1'\n    '100 100 100'\n    '7'\n    '1 22 22'\n    '2'\n    '1 19 38'\n    '8'\n    '6 24 48'\n    '8'\n    '10'\n    '10'\n    '12'\n    '12'\n    '14'\n    '14'\n    '16'\n    '16'\n    '18'\n    '18'\n    '20'\n    '20'\n    '22'\n    '22'\n    '24'\n    '24'\n    '26'\n    '26'\n    '28'\n    '28'\n    '30'\n    '30'\n    '32'\n    '32'\n    '34'\n    '34'\n    '36'\n    '36'\n    '38'\n    '38'\n    '40'\n    '40'\n    '42'\n    '42'\n    '44'\n    '44'\n    '46'\n    '46'\n    '48'\n    '48'\n    '50'\n    '50'\n    '52'\n    '52'\n    '54'\n    '54'\n    '56'\n    '56'\n    '58'\n    '58'\n    '60'\n    '60'\n    '62'\n    '62'\n    '64'\n    '64'\n    '66'\n    '66'\n    '68'\n    '68'\n    '70'\n    '70'\n    '72'\n    '72'\n    '74'\n    '74'\n    '76'\n    '76'\n    '78'\n    '78'\n    '80'\n    '80'\n    '82'\n    '82'\n    '84'\n    '84'\n    '86'\n    '86'\n    '88'\n    '88'\n    '90'\n    '90'\n    '92'\n    '92'\n    '94'\n    '94'\n    '96'\n    '96'\n    '98'\n    '98'\n    '100'\n    '100'\n    '102'\n    '102'\n    '104'\n    '104'\n    '106'\n    '106'\n    '108'\n    '108'\n    '110'\n    '110'\n    '112'\n    '112'\n    '114'\n    '114'\n    '116'\n    '116'\n    '118'\n    '118'\n    '120'\n    '120'\n    '122'\n    '122'\n    '124'\n    '124'\n    '126'\n    '126'\n    '128'\n    '128'\n    '130'\n    '130'\n    '132'\n    '132'\n    '134'\n    '134'\n    '136'\n    '136'\n    '138'\n    '138'\n    '140'\n    '140'\n    '142'\n    '142'\n    '144'\n    '144'\n    '146'\n    '146'\n    '148'\n    '148'\n    '150'\n    '150'\n    '152'\n    '152'\n    '154'\n    '154'\n    '156'\n    '156'\n    '158'\n    '158'\n    '160'\n    '160'\n    '162'\n    '162'\n    '164'\n    '164'\n    '166'\n    '166'\n    '168'\n    '168'\n    '170'\n    '170'\n    '172'\n    '172'\n    '174'\n    '174'\n    '176'\n    '176'\n    '178'\n    '178'\n    '180'\n    '180'\n    '182'\n    '182'\n    '184'\n    '184'\n    '186'\n    '186'\n    '188'\n    '188'\n    '190'\n    '190'\n    '192'\n    '192'\n    '194'\n    '194'\n    '196'\n    '196'\n    '198'\n    '198'\n    '200'\n    '200'\n    '202'\n    '202'\n    '204'\n    '204'\n    '206'\n    '206'\n    '208'\n    '208'\n    '210'\n    '210'\n    '212'\n    '212'\n    '214'\n    '214'\n    '216'\n    '216'\n    '218'\n    '218'\n    '220'\n    '220'\n    '222'\n    '222'\n    '224'\n    '224'\n    '226'\n    '226'\n    '228'\n    '228'\n    '230'\n    '230'\n    '232'\n    '232'\n    '234'\n    '234'\n    '236'\n    '236'\n    '238'\n    '238'\n    '240'\n    ",
        "num_ids": 1610
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    result = []\n    for line in lines:\n        a, b, c = [int(x) for x in line.split()]\n        cnt = min_operation(a, b, c)\n        if cnt!= -1:\n            result.append('{} {} {}'.format(cnt, a, b))\n    return '\\n'.join(result)\n\ndef",
        "num_ids": 120
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    #print(sys.stdin.readline())\n    input()\n    import math\n    for x in sys.stdin.readlines():\n        a,b,c=x.split(' ')\n        a,b,c=int(a),int(b),int(c)\n        a,b,c=max(a,b,c),min(a,b,c),max(b,c)\n        if b%a==0 and c%b==0:\n            res=2*math.ceil(math.log(a,b)/math.log(a,b))\n        else:\n            res=math.ceil(math.log(a,b)/math.log(a,b))\n        print(res)\n        print(a,b,c)\n    #return \"\"\n    \n",
        "num_ids": 197
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for _ in range(int(stdin.readline().strip())):\n        a, b, c = map(int, stdin.readline().strip().split())\n        a += 1\n        b += 1\n        c += 1\n        while a % b!= 0:\n            a += 1\n            res += 1\n        while b % c!= 0:\n            b += 1\n            res += 1\n        res += a - 1\n        res += b - 1\n        res += c - 1\n        print(res)",
        "num_ids": 127
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(n):\n        a,b,c = map(int, stdin.split())\n        if c % a == 0 and b % c == 0:\n            res += (b - a) + 1\n    return res",
        "num_ids": 70
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n\n        if a < b:\n            a, b = b, a\n\n        if b % a == 0 and c % b == 0:\n            print(b // a)\n            print(a, b)\n        else:\n            print(c // b)\n            print(b, c)",
        "num_ids": 115
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    res = []\n    for _ in range(t):\n        a, b, c = list(map(int, stdin.readline().split()))\n        count = 0\n        while b % a!= 0:\n            count += 1\n            b += 1\n        if c % b!= 0:\n            count += 1\n        res.append(count)\n    return '\\n'.join(map(str, res))\n\nassert(solution('''\\\n1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1",
        "num_ids": 1612
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cases = int(stdin.readline())\n    cases = []\n    for _ in range(number_of_cases):\n        a, b, c = [int(n) for n in stdin.readline().split()]\n        cases.append([a, b, c])\n    results = []\n    for a, b, c in cases:\n        results.append(calculate_min_operations(a, b, c))\n    for result in results:\n        print(result)\ndef",
        "num_ids": 123
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size = stdin.readline().strip()\n    if size == '':\n        return '0'\n    n = int(size)\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    return str(min(a))\n    ",
        "num_ids": 68
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_a = max(a)\n    min_a = min(a)\n    return str(max_a - min_a)",
        "num_ids": 64
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = [int(x) for x in stdin[1].split(' ')]\n    # print(a)\n    b = [a[i] - a[i-1] for i in range(1, len(a))]\n    # print(b)\n    return str(min(b))\n\nprint(solution(input()))\n",
        "num_ids": 92
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ntry:\n    assert (\n        solution(\n            \"\"\"\n4\n1 3 3 7\n\"\"\"\n        )\n        == \"2\"\n    )\n    assert (\n        solution(\n            \"\"\"\n2\n1 100000\n\"\"\"\n        )\n        == \"0\"\n    )\nexcept AssertionError:\n    print(\"Test cases FAILED\")\nelse:\n    print(\"Test cases PASSED\")",
        "num_ids": 101
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    return str(min(abs(max(arr) - x) for x in arr))\n\nimport sys",
        "num_ids": 56
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(min(map(abs, a[1:] - a[:-1])))",
        "num_ids": 53
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(sum(max(a[i], a[j]) - min(a[i], a[j]) for i in range(n) for j in range(i+1, n)))",
        "num_ids": 76
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().split()]\n\n    if n == 1:\n        return str(0)\n\n    array.sort()\n\n    maxim = array[-1] - array[0]\n    minim = array[0] - array[1]\n    maxim_index = array.index(maxim)\n    minim_index = array.index(minim)\n\n    if maxim_index!= 0:\n        return str(maxim - minim)\n\n    array.pop(maxim_index)\n\n    maxim = array[-1] - array[0]\n    minim = array[0] - array[1]\n    maxim_index = array.index(maxim)\n    minim_index = array.index(minim)\n\n    if maxim_index!= 0:\n        return str(maxim - minim)\n    return str(0)",
        "num_ids": 225
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().strip().split(' ')]\n    a = sorted(a)\n    delta = a[-1] - a[0]\n    for i in range(n-1):\n        if delta < (a[i+1] - a[i]):\n            delta = a[i+1] - a[i]\n    return str(delta)\n\n\nprint(solution(input()))\n",
        "num_ids": 123
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    special = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split())\n        special.append((s, d, c))\n    days = list(range(n))\n    result = [-1]*(m+1)\n    for s, d, c in special:\n        for i in range(s-1, d):\n            if result[i]!= 0:\n                print(-1)\n                return\n        if result[s-1] == 0:\n            result[s-1] = c\n        elif result[s-1] == 1:\n            result[s-1] += c\n        elif result[s-1] > c:\n            result[s-1] = c\n    for i in range(m, n):\n        if result[i] == 0:\n            result[i] = 1\n        elif result[i] == 1:\n            result[i] = 0\n    print(*result[1:])",
        "num_ids": 250
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    exams = [None] * m\n    for i in range(m):\n        s, d, c = [int(j) for j in stdin.split()]\n        exams[i] = (s, d, c)\n    exams.sort(key=lambda x: x[1])\n    taken = [0] * (n + 1)\n    for i in range(m):\n        s, d, c = exams[i]\n        taken[s] += c\n        if d!= s:\n            taken[d] -= c\n    if any(taken[s] == 0 for s, _, _ in exams):\n        return -1\n    taken[n] = sum(c for _, d, c in exams)\n    return \" \".join(map(str, taken))\n\nprint(solution(\"5 2\"))\nprint(solution(\"3 2\"))\nprint(solution(\"10 3\"))\nprint(solution(\"4 7 2\"))\nprint(solution(\"10 9 1\"))\nprint(solution(\"1 10 3\"))\nprint(solution(\"7 3 1\"))\nprint(solution(\"3 3 1\"))\nprint(solution(\"2 2 1\"))\nprint(solution(\"9 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"4 3 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"9 3 1\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 3 2\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"7 1 1\"))\nprint(solution(\"9 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution(\"5 4 2\"))\nprint(solution(\"3 1 1\"))\nprint(solution(\"3 3 3\"))\nprint(solution(\"4 5 2\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"10 2 1\"))\nprint(solution(\"10 1 1\"))\nprint(solution",
        "num_ids": 1095
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = tuple(map(int, stdin.split(\" \")))\n    \n    # exam_schedule[i][j] = exam # i on day j\n    exam_schedule = []\n    for _ in range(m):\n        s, d, c = tuple(map(int, stdin.split(\" \")))\n        exam_schedule.append((s, d, c))\n        \n    max_exams_day = max(d for _, d, _ in exam_schedule)\n    days = [False] * max_exams_day\n    \n    for s, d, c in exam_schedule:\n        for j in range(s, d):\n            days[j] = True\n            \n    max_day = max(i for i, day in enumerate(days) if not day)\n    \n    # We want to find all possible schedules for Petya to pass all the exams.\n    # To do that we iterate over all the possible starting days and for each starting day\n    # we find the list of numbers of days in which Petya is preparing and does not pass an exam.\n    \n    # days_passing_exams[i][j] = [0] * n\n    # days_passing_exams[i][j][k] = number of days Petya needs to prepare and does not pass an exam in day j\n    days_passing_exams = []\n    for i in range(max_day+1):\n        days_passing_exams.append([])\n        for j in range(max_day+1):\n            days_passing_exams[i].append([])\n            for k in range(m):\n                if i == 0 or j < exam_schedule[k][0]:\n                    days_passing_exams[i][j].append(0)\n                    continue\n                if j == exam_schedule[k][1] and i > exam_schedule[k][0]:\n                    days_passing_exams[i][j].append(0)\n                    continue\n                days_passing_exams[i][j].append(k+1)\n    \n    # Now, we iterate over all the possible starting days and try to find a schedule\n    # for Petya to pass all the exams.\n    possible_schedules = []\n    for s in range(max_day+1):\n        if s == 0 or not days_passing_exams[s][max_day]:\n            continue\n        \n        possible_schedule = [s]\n        # Let's try to find the maximum number of days Petya needs to prepare for each exam\n        max_preparation_days = [0] * m\n        for j in range(max_day+1):\n            for k in range(m):\n                if days_passing_exams[s][j][k] == 0:\n                    continue\n                max_preparation_days[k] = max(max_preparation_days[k], days_passing_exams[s][j][k])\n        \n        # Now, we can try to build a schedule by adding one exam to the current day\n        # for each exam, the following day will be the current day, the exam is prepared and\n        # the exam is passed.\n        previous_day = s\n        for k in range(m):\n            if days_passing_exams[s][previous_day][k] == 0:\n                continue\n            day = days_passing_exams[s][previous_day][k]\n            # Note that it is possible to have a different day for the exam\n            # we just added to this day. The exam is prepared and passed on the\n            # previous day.\n            previous_day = days_passing_exams[s][previous_day][k]\n            for j in range(previous_day+1, days_passing_exams[s][previous_day][k]):\n                if j == previous_day+1:\n                    possible_schedule.append(j)\n                else:\n                    possible_schedule.append(j)\n                    possible_schedule.append(j)\n        \n        # Now, we can try to add the next day to the current schedule\n        # for each exam, the next day will be the current day, the exam is prepared\n        # and the exam is passed.\n        previous_day = s\n        for k in range(m):\n            if days_passing_exams[s][previous_day][k] == 0:\n                continue\n            day = days_passing_exams[s][previous_day][k]",
        "num_ids": 1094
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(\" \")]\n    arr = [[int(x) for x in stdin.strip().split(\" \")] for _ in range(m)]\n    s = {}\n    for x in range(m):\n        if x + arr[x][0] > n:\n            return -1\n        if x not in s:\n            s[x] = [arr[x][1]]\n        else:\n            s[x].append(arr[x][1])\n    if sorted(s.keys())!= list(range(1, m + 1)):\n        return -1\n    return \" \".join(map(str, [len(s[x]) for x in range(1, m + 1)]))",
        "num_ids": 181
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [None] * n\n    for i in range(n):\n        s[i], i = map(int, stdin.split())\n    \n    result = []\n    for i in range(m):\n        result.append(f'{m + 1}')\n    \n    result[0] = result[0][:-1]\n    \n    return result\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids": 116
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    exams = list(map(int, lines[1].split()))\n    for i in range(len(exams)):\n        exams[i] -= 1\n    res = []\n    if exams[0] > 0:\n        res.append(1)\n    for i in range(len(exams)-1):\n        if exams[i] > exams[i+1]:\n            res.append(0)\n        else:\n            res.append(1)\n    if exams[-1] > 0:\n        res.append(1)\n    print(' '.join(map(str, res)))\n    return ''\n\ndef",
        "num_ids": 190
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def make_schedule(n: int, m: int) -> str:\n        # pass_days, prepare_days = [0 for _ in range(m + 1)], [0 for _ in range(n + 1)]\n        # prepare_days[0] = 1\n        # for i in range(1, n + 1):\n        #     for j in range(1, m + 1):\n        #         if i == j:\n        #             prepare_days[i] += 1\n        #         else:\n        #             prepare_days[i] = max(prepare_days[i], pass_days[j - 1])\n        #     pass_days[i] += prepare_days[i]\n        # return''.join(str(prepare_days[i]) for i in range(1, n + 1))\n        pass_days, prepare_days = [0 for _ in range(m + 1)], [0 for _ in range(n + 1)]\n        prepare_days[0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                prepare_days[i] = max(prepare_days[i], pass_days[j - 1])\n                if i == j:\n                    prepare_days[i] += 1\n            pass_days[i] += prepare_days[i]\n        return''.join(str(prepare_days[i]) for i in range(1, n + 1))\n    n, m = [int(x) for x in stdin.split()]\n    print(make_schedule(n, m))",
        "num_ids": 383
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    def solve(i, j, m, n, s, d, c):\n        if i > n:\n            return None\n        if j > n:\n            return None\n        if m == 0:\n            return None\n        if j == d and c == m:\n            return None\n        if s[j] > d[i]:\n            return None\n        if j == d[i]:\n            return solve(i, j + 1, m - 1, n, s, d, c)\n        else:\n            if s[j] < d[i]:\n                return (s[j] + 1, c[i], j + 1)\n            else:\n                if c[i] > 1:\n                    return (s[j] + 1, c[i] - 1, j + 1)\n                else:\n                    return solve(i, j + 1, m, n, s, d, c)\n\n    m, n = map(int, stdin.split())\n    s = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    # s = [1, 2, 3, 4, 5, 6]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 4\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 3\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6, 7]\n    # d = [2, 4, 5, 6]\n    # c = [2, 3, 2, 1]\n    # m = 1\n    # n = 8\n    # s = [1, 2, 3, 4, 5, 6",
        "num_ids": 1094
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return '0'\n    steps = 0\n    if n % 2 == 0:\n        steps += n // 2\n    else:\n        if n % 3 == 0:\n            steps += (n - 1) // 3\n        elif n % 3 == 1:\n            steps += n // 3\n        else:\n            return '-1'\n    steps += (m - n) // 3\n    return str(steps)\n\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids": 132
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n * 2 or m == n * 3:\n        return '-1'\n    elif m > n * 2:\n        return str(m - n)\n    elif m == n * 2:\n        return str(m)\n",
        "num_ids": 74
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m % (5*10**8)!= 0 or n % (5*10**8)!= 0 or m % (5*10**8) == 0 and n % (5*10**8) == 0:\n        return -1\n    if m == n:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if m % 2 == 0:\n            return 1\n        else:\n            return 2\n    if n == 3:\n        if m % 3 == 0:\n            return 1\n        else:\n            return 2\n    if n == 4:\n        if m % 4 == 0:\n            return 1\n        else:\n            return 2\n    if n == 5:\n        if m % 5 == 0:\n            return 1\n        else:\n            return 2\n    if m % 2 == 0 and n % 2 == 0:\n        return min(solution(n*2), solution(m//2))\n    if m % 2 == 0 and n % 2!= 0:\n        return solution(m//2) + 1\n    if m % 3 == 0 and n % 3 == 0:\n        return solution(n*3)\n    if m % 3 == 0 and n % 3!= 0:\n        return solution(m//3) + 1\n    if m % 4 == 0 and n % 4 == 0:\n        return solution(n*4)\n    if m % 4 == 0 and n % 4!= 0:\n        return solution(m//4) + 1\n    if m % 5 == 0 and n % 5 == 0:\n        return solution(n*5)\n    if m % 5 == 0 and n % 5!= 0:\n        return solution(m//5) + 1\n    return -1",
        "num_ids": 423
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    steps = 0\n    while n!= m:\n        if n % 3 == 0:\n            n /= 3\n            steps += 1\n        elif n % 2 == 0:\n            n /= 2\n            steps += 1\n        else:\n            steps = -1\n            break\n    print(steps)\n\n\"\"\"\n\nn, m = map(int, input().split())",
        "num_ids": 107
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    def isPossible(n, m):\n        if m < n:\n            return False\n        if n == 1:\n            return True\n        if n % 3 == 0:\n            return isPossible(n//3, m)\n        if n % 2 == 0:\n            return isPossible(n//2, m)\n        return False\n\n    if isPossible(n, m):\n        return '0'\n    if m == 1:\n        return '-1'\n    else:\n        if m % 3 == 0:\n            return str(m//3-1)\n        if m % 2 == 0:\n            return str(m//2-1)\n        return str(m-1)",
        "num_ids": 180
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return '0'\n    if n > m:\n        return '-1'\n    if m % 3 == 0:\n        return str(m // 3)\n    else:\n        return str(m // 3) + '1'",
        "num_ids": 77
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.strip().split(' ')\n    n = int(stdin_lines[0])\n    m = int(stdin_lines[1])\n    if n < m or (n == m and n % 2 == 0):\n        return -1\n    if n % 2 == 0:\n        return int(log(m - n, 2))\n    return int(log(m - n, 3)) + 1\n\nprint(solution(input()))\n",
        "num_ids": 113
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m < n:\n        return -1\n    if n == m:\n        return 0\n    if n % m == 0:\n        return int((n / m) * (m - 1)) + 1\n    return int(n * (m - 1) / 2) + int((n % m) * (m - 1)) + 1",
        "num_ids": 99
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    while a!= b:\n        if a > b:\n            a = a/2 if a % 2 == 0 else a*3\n        elif a < b:\n            b = b/2 if b % 2 == 0 else b*3\n        count += 1\n    return str(count) if a == b else -1",
        "num_ids": 96
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    if len(s) < n:\n        return ''\n\n    chars = list(s)\n    if len(chars) < n:\n        chars += [''] * (n - len(chars))\n\n    result = [chars[0]]\n    for i in range(1, n):\n        if chars[i]!= chars[i-1]:\n            result.append(chars[i])\n\n    s = ''.join(result)\n    if len(s) < n:\n        s += ''.join(chars[n:])\n\n    if len(s) < n:\n        return ''\n\n    return s",
        "num_ids": 179
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin[0:n]\n    result = ''\n    for i in range(n):\n        for j in range(i, n):\n            if t[i:j + 1] * k == t:\n                result += t[i:j + 1]\n    return result\n\nassert solution(stdin) == stdin[0:n]\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nN, K = [int(x) for x in sys.stdin.readline().strip().split()]\nS = sys.stdin.readline().strip()\n\ncnt = Counter(S)\nans = ''.join([x[0] * x[1] for x in cnt.most_common()])\n",
        "num_ids": 192
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace('\\n', '')\n    n -= k\n    m = n - 1\n    subs = [s[i:i+m] for i in range(len(s) - m + 1)]\n    return min(subs, key=len)",
        "num_ids": 81
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, k = map(int, stdin.strip().split(' '))\n    return ''.join(solution1(t, k))\n\ndef",
        "num_ids": 37
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_letters, number_of_substrings = map(int, stdin.split())\n    substrings = stdin.strip().split()\n\n    answer = list(substrings[0])\n    for i in range(1, number_of_substrings):\n        for j in range(len(substrings[i])):\n            if answer[j] == substrings[i][j]:\n                continue\n            answer[j] = substrings[i][j]\n            break\n\n    return ''.join(answer)",
        "num_ids": 122
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    for _ in range(k):\n        print(t)\n    return ''",
        "num_ids": 48
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = list(map(int, stdin.readline().split()))\n    print(sum(a))\n    return stdin.readline().strip()\n\nassert solution(\"5\\n2 5 1 2 2\\n\") == \"3\\n4 1 5\\n\"\nassert solution(\"4\\n8 3 5 2\\n\") == \"2\\n1 4\\n\"\nassert solution(\"5\\n2 1 2 4 3\\n\") == \"0\\n\"\nassert solution(\"1\\n1\\n\") == \"0\\n\"\nassert solution(\"4\\n0 1 2 3\\n\") == \"0\\n\"\nassert solution(\"5\\n0 0 0 0 0\\n\") == \"0\\n\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\\n\"\nassert solution(\"5\\n0 0 0 0 0\\n\") == \"0\\n\"\nassert solution(\"5\\n0 0 0 0 0\\n\") == \"0\\n\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\\n\"\nassert solution(\"3\\n0 0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\n\"\nassert solution(\"3\\n0\\n\") == \"0\\",
        "num_ids": 1297
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a_sum = sum(a)\n\n    result = 0\n    for i in range(n):\n        sub = a_sum - a[i]\n        if sub in a[i+1:]:\n            result += 1\n    return str(result)",
        "num_ids": 91
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    return str(sum([a.count(i) for i in a]) - sum([a.count(i) * a.count(i + 1) for i in range(1, n - 1)])) + \"\\n\" + \" \".join(map(str, range(1, n)))\n",
        "num_ids": 94
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    #b = list(set(a))\n    #b.sort()\n    #print(a)\n    #print(b)\n    #return a\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == a[j]:\n                ans += 1\n                break\n    return str(ans)\n\n\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(set(a))\nb.sort()\nprint(a)\nprint(b)\nprint(len(b))\n\na = list(map(int, input().split()))\n\nb = []\nn = len(a)\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] + a[j] == a[j]:\n            b.append(i)\n            b.append(j)\n            break\n\nprint(b)\n\n\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(set(a))\nb.sort()\nprint(a)\nprint(b)\nprint(len(b))\n\na = list(map(int, input().split()))\n\nb = []\nn = len(a)\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] + a[j] == a[j]:\n            b.append(i)\n            b.append(j)\n            break\n\nprint(b)\nprint(len(b))\n\n\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(set(a))\nb.sort()\nprint(a)\nprint(b)\nprint(len(b))\n\na = list(map(int, input().split()))\n\nb = []\nn = len(a)\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] + a[j] == a[j]:\n            b.append(i)\n            b.append(j)\n            break\n\nprint(b)\nprint(len(b))\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(set(a))\nb.sort()\nprint(a)\nprint(b)\nprint(len(b))\n\na = list(map(int, input().split()))\n\nb = []\nn = len(a)\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] + a[j] == a[j]:\n            b.append(i)\n            b.append(j)\n            break\n\nprint(b)\nprint(len(b))\n\n\n\n\n\ndef",
        "num_ids": 728
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        tmp = a[:]\n        tmp.pop(i)\n        if sum(tmp) == sum(a):\n            ans += 1\n    if ans == 0:\n        return str(ans)\n    return str(ans) +'' +''.join(map(str, a))",
        "num_ids": 110
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    s = sum(a)\n    res = 0\n    for i in range(n):\n        if s - a[i] == a[i]:\n            res += 1\n        s -= a[i]\n\n    if res == 0:\n        return str(0)\n    else:\n        return str(res)",
        "num_ids": 105
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()[0]\n    N = int(N)\n    A = stdin.split()[1:]\n    A = [int(A[i]) for i in range(N)]\n    A_sum = 0\n    for element in A:\n        A_sum += element\n    res = []\n    for i in range(N):\n        if A_sum - A[i] <= A_sum / 2:\n            res.append(i)\n    if len(res) == 0:\n        return 0\n    res.sort()\n    res =''.join([str(res[i]) for i in range(len(res))])\n    return res",
        "num_ids": 158
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    k = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] == a[0]:\n            k += 1\n\n    return str(k)",
        "num_ids": 78
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        if i > sum(a[i+1:]):\n            res += 1\n    return str(res)",
        "num_ids": 71
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = [int(x) for x in stdin.split()]\n    S = set()\n    if k > s:\n        return -1\n    costs = [0] * (s+1)\n    costs[0] = 0\n    for i in range(s):\n        costs[i+1] = costs[i] + 1\n        if s - i >= k:\n            S.add(stdin[i:s])\n    for t in S:\n        costs[len(t)] += len(t) - 1\n    return costs[-1]\n\n\"\"\"\n",
        "num_ids": 143
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys\n_, n, k = sys.stdin.readline().split()\nn, k = int(n), int(k)\ns = sys.stdin.readline().strip()\n\ndef",
        "num_ids": 53
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split(' ')]\n    s = stdin.strip()\n    if k > len(s):\n        return \"-1\"\n    # the cost is the number of chars to remove, plus the cost of the char we remove\n    cost = k * len(s)\n    for i in range(1, len(s)):\n        cost -= abs(ord(s[i]) - ord(s[i - 1]))\n        if cost < 0:\n            return \"-1\"\n    return str(cost)\n\nprint(solution(input()))\n\nassert solution('asdf') == '4'\nassert solution('asdfghi') == '15'\nassert solution('aaaaa') == '15'\nassert solution('aaaaa') == '15'\nassert solution('jihiushda') == '15'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\nassert solution('abababa') == '0'\n",
        "num_ids": 1512
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    if n - k > len(s):\n        return '-1'\n\n    s = set(s)\n    total = 0\n    for i in range(1, len(s)):\n        if i > len(s) - k:\n            break\n        total += i\n    return str(total)\n\nprint(solution(input()))\n\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(solution(input()) == '-1')\nassert(solution(input()) == '233')\nassert(solution(input()) == '15')\nassert(solution(input()) == '4')\nassert(s",
        "num_ids": 1512
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    if n < k:\n        return -1\n    s = stdin\n    res = 0\n    for i in range(1, n - k + 2):\n        l, r = i - 1, n - i + 1\n        if not (s[l:r].isalpha() and s[l:r].isupper()):\n            res += n - i\n            continue\n        for j in range(1, k):\n            l += 1\n            r += 1\n            if not s[l:r].isalpha() or not s[l:r].isupper():\n                res += n - i\n                break\n    return res",
        "num_ids": 166
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if k > n:\n        return -1\n\n    s = stdin.strip()\n\n    res = 0\n    for i in range(n - k + 1):\n        res += min(n - i, len(set(s[i:i + k])))\n\n    return res",
        "num_ids": 81
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = 0\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + 1\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == s[j]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return -1 if dp[k][n] == n else dp[k][n]",
        "num_ids": 232
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.rstrip()\n    if len(s) < k:\n        return -1\n    return n - len(s) + k\n\n\nassert(solution(\"5 5\") == 4)\nassert(solution(\"10 100\") == 233)\nassert(solution(\"asdf\") == -1)\nassert(solution(\"asdfasdfasdf\") == -1)\nassert(solution(\"asdfasdfasdfasdf\") == -1)\nassert(solution(\"a\") == 1)\nassert(solution(\"a\" * 10) == 10)\nassert(solution(\"a\" * 1000) == 1000)\nassert(solution(\"a\" * 10000) == 10000)\nassert(solution(\"asdfasdfasdfasdfasdf\") == -1)\nassert(solution(\"aaaaa\") == 15)\nassert(solution(\"aaaaa\" * 10) == 100)\nassert(solution(\"aaaaa\" * 10000) == 10000)\nassert(solution(\"aaaaa\" * 1000000) == 1000000)\nassert(solution(\"a\" * 1000000) == -1)\nassert(solution(\"a\" * 10000000) == -1)\nassert(solution(\"a\" * 10000000000) == -1)\n",
        "num_ids": 312
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_cost(target: int) -> int:\n        cost = 0\n        target_cost = 0\n        for letter in letters:\n            if target_cost > target:\n                cost += target_cost\n                target_cost = 0\n            target_cost += count[letter]\n        return cost + target_cost\n\n    n, k = map(int, stdin.split())\n    if k > n:\n        print('-1')\n    else:\n        letters = stdin.split()[0]\n        count = {}\n        for letter in letters:\n            if letter not in count:\n                count[letter] = 0\n            count[letter] += 1\n        print(get_min_cost(k))\nsolution(stdin.read())\n",
        "num_ids": 179
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.readline().split()))\n    graph = []\n    for _ in range(m):\n        v, u = list(map(int, stdin.readline().split()))\n        graph.append((v, u))\n    graph.sort()\n    \n    first = -1\n    for i, (v, u) in enumerate(graph):\n        if i == 0:\n            first = v\n            continue\n        if v!= first and len(graph) - i <= d - 1:\n            print(\"YES\")\n            for v, u in graph[:i]:\n                print(v, u)\n            return\n    print(\"NO\")",
        "num_ids": 167
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.hackerrank.com/challenges/ctci-a-star/problem\"\"\"\n   ...",
        "num_ids": 28
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn [1]: %timeit solution(test_input)\n1000 loops, best of 3: 16.7 ms per loop\n\nIn [2]: %timeit solution(test_input)\n1 loops, best of 3: 7.57 ms per loop\n\n\n\n--- Part Two ---\n\nYou are given an undirected, connected graph with **$n$** vertices and **$n - 1$** edges. The graph is given as a list of two-tuples (**$u$**, **$v$**), which describes the edges between vertex **$u$** and **$v$**.\n\nNote that these edges are bidirectional, meaning that if `u` is connected to `v`, `v` is connected to `u` and if `v` is connected to `u`, `u` is connected to `v`.\n\nAlso, the graph is not necessarily connected, meaning that there may not be a path between two vertices.\n\nYour task is to find the length of the shortest path between two vertices with labels **$x$** and **$y$** such that the vertex with label **$x$** has degree **$D$** and the vertex with label **$y$** has degree **$S$**.\n\nAs an example, consider the following graph, where **$x$** and **$y$** are vertices and **$D$** and **$S$** are degrees:\n\n\n\n![](https://www.cs.bgu.ac.il/~afni/afni.png)\n\nNote that there is no path between vertices with labels **$x$** and **$y$**.\n\nIf we choose **$x$** and **$y$** as vertices with degrees **$D$** and **$S$**, the output should be **$2$**.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$, the number of vertices and edges respectively.\n\nNext $m$ lines contain edges, each in format $u v$ with $u$ and $v$ being vertices from the graph.\n\nThe next line contains two integers $x$ and $y$ \u2014 vertices with labels $x$ and $y$ respectively, whose degrees are $D$ and $S$ respectively, respectively.\n\n\n-----Output-----\n\nIf there is no path between vertices with labels **$x$** and **$y$**, print **$2$**. Otherwise, print the length of the shortest path between **$x$** and **$y$**.\n\n\n-----Example-----\n\nInput\n4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\n2\n\nInput\n4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom itertools import combinations\nfrom collections import defaultdict\n\ndef",
        "num_ids": 668
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, D = [int(x) for x in lines[0].split()]\n    edges = []\n    for i in range(1, m + 1):\n        v, u = [int(x) for x in lines[i].split()]\n        edges.append((v, u))\n    return solve(n, m, D, edges)\n\ndef",
        "num_ids": 102
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom sys import stdin,stdout\nn,m,D = list(map(int,stdin.readline().split()))\n\nu,v = [],[]\nfor i in range(m):\n    u,v = stdin.readline().split()\n    u,v = int(u),int(v)\n    u-=1\n    v-=1\n    if u not in u:\n        u.append(u)\n    if v not in v:\n        v.append(v)\n\nprint('YES' if len(u)==D else 'NO')\nfor i in range(1,D):\n    if i in u and i in v:\n        stdout.write(str(i)+'\\n')\n    else:\n        stdout.write(str(i)+' ')",
        "num_ids": 197
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.strip().split(' '))\n    edges = [tuple(map(int, line.strip().split(' '))) for line in stdin.strip().split('\\n')[2:]]\n    # make it undirected\n    for i, (u, v) in enumerate(edges):\n        edges[i] = (v, u)\n    vertices = set(u for u, _ in edges)\n    for i, (u, v) in enumerate(edges):\n        # get all possible vertices for the first vertex\n        candidates = set(v for u, v in edges if u == v)\n        if len(candidates) > d:\n            return 'NO'\n        if len(candidates) == d:\n            return 'YES'\n    return 'NO'",
        "num_ids": 200
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    edges = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = list(map(int, stdin.split()))\n        edges[a - 1].add(b - 1)\n        edges[b - 1].add(a - 1)\n    for i in range(n):\n        edges[i].discard(i)\n    res = []\n    for i in range(n):\n        if len(edges[i]) == d:\n            res.append(i + 1)\n    if not res:\n        print('NO')\n        return\n    res = sorted(res)\n    for i in res:\n        print(i, end=' ')\n    print()\n",
        "num_ids": 195
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [set(map(int, stdin.split())) for _ in range(m)]\n\n    if d > n-1:\n        return \"NO\"\n\n    for i in range(m):\n        u, v = edges[i]\n        if u == 1:\n            if v in edges[i+1:]:\n                return \"NO\"\n        if v == 1:\n            if u in edges[i+1:]:\n                return \"NO\"\n\n    return \"YES\"\n\n\ndef",
        "num_ids": 135
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    m1 = m1 % 2\n    m2 = m2 % 2\n    if m1 == m2:\n        m2 -= 1\n    h1 = h1 + m1 * 2\n    h2 = h2 + m2 * 2\n    if h1 == h2:\n        h2 -= 1\n    if h1 == 22 and h2 == 22:\n        h2 += 1\n    if h1 == 22:\n        h2 += 2\n    return f'{h1:02}:{h2:02}'\n\n\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '11:30')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '11:30')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '11:30')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02')",
        "num_ids": 1528
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution('''10:00''') == '10:30')\nassert(solution('''11:00''') == '10:30')\nassert(solution('''11:10''') == '11:11')\nassert(solution('''01:02''') == '02:02')\nassert(solution('''03:02''') == '02:02')\n'''\nassert(solution('''10:00''') == '10:30')\nassert(solution('''11:00''') == '10:30')\nassert(solution('''11:10''') == '11:11')\nassert(solution('''01:02''') == '02:02')\nassert(solution('''03:02''') == '02:02')\n'''\n",
        "num_ids": 202
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = [int(s) for s in stdin.split(' ')]\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    if m3 < 10:\n        return '{0}:{1:02d}'.format(h3, m3)\n    else:\n        return '{0}:{1:02d}'.format(h3, m3)",
        "num_ids": 113
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert solution('''10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12''') == '11:11'\nassert solution('''01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00\n10:00\n11:00''') == '10:30'\nassert solution('''11:10\n11:12\n11:02\n11:00\n11:02\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00\n11:00''') == '11:11'\nassert solution('''01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02\n01:02\n03:02''') == '02:02'\nassert solution('''10:00\n11:00\n10:",
        "num_ids": 1528
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_as_strings = stdin.strip().split('\\n')\n    first_input = input_as_strings[0].split()\n    second_input = input_as_strings[1].split()\n    first_input_hour = int(first_input[0])\n    first_input_minute = int(first_input[1])\n    second_input_hour = int(second_input[0])\n    second_input_minute = int(second_input[1])\n    if (first_input_minute == second_input_minute) and (first_input_hour == second_input_hour) and (first_input_minute % 2 == second_input_minute % 2):\n        midpoint_hour = int(first_input_hour)\n        midpoint_minute = int(first_input_minute)\n    else:\n        if (first_input_hour + second_input_hour) % 2 == 0:\n            midpoint_hour = int((first_input_hour + second_input_hour) / 2)\n        else:\n            midpoint_hour = int((first_input_hour + second_input_hour) / 2) + 1\n        midpoint_minute = int(first_input_minute + (second_input_minute - first_input_minute) / 2)\n        midpoint_hour = midpoint_hour % 24\n        midpoint_minute = midpoint_minute % 60\n    return f\"{midpoint_hour:02}:{midpoint_minute:02}\"\n",
        "num_ids": 350
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nTEST_INPUT = \"\"\"\n10:00\n11:00\n\"\"\"\n\nTEST_OUTPUT = \"\"\"\n10:30\n\"\"\"\n\ndef",
        "num_ids": 41
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split('\\n')[0]\n    line2 = stdin.split('\\n')[1]\n    m1, h1 = map(int, line1.split(':'))\n    m2, h2 = map(int, line2.split(':'))\n    h3 = (h1 + h2) / 2\n    m3 = (m1 + m2) / 2\n    return '%02d:%02d' % (h3, m3)\n\n\ndef",
        "num_ids": 123
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split('\\n')\n    h1, m1 = [int(i) for i in input_[0].split(':')]\n    h2, m2 = [int(i) for i in input_[1].split(':')]\n\n    minutes = h1 * 60 + m1 + (h2 - h1) * 60 + m2\n    hours = minutes // 60\n    minutes = minutes % 60\n\n    print(f'{hours:02}:{minutes:02}')\n    return ''",
        "num_ids": 127
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split('\\n')\n    h1 = int(time[0].split(':')[0])\n    m1 = int(time[0].split(':')[1])\n    h2 = int(time[1].split(':')[0])\n    m2 = int(time[1].split(':')[1])\n    h3 = 0\n    m3 = 0\n    if m1 == m2:\n        if h1 == h2:\n            h3 = h1\n        else:\n            h3 = (h1 + h2) // 2\n        m3 = m1\n    elif m1 % 2 == 0:\n        h3 = (h1 + h2) // 2\n        m3 = (m1 + m2) // 2\n    else:\n        h3 = h1\n        m3 = m2\n    return '{0}:{1}'.format(h3, m3)\n\n\nassert (solution('''10:00\n11:00''')) == '10:30'\nassert (solution('''11:10\n11:12''')) == '11:11'\nassert (solution('''01:02\n03:02''')) == '02:02'\n",
        "num_ids": 296
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a_binary = bin(a)[2:]\n    ones_count = a_binary.count(\"1\")\n    return str(ones_count)\n\n\ndef",
        "num_ids": 47
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    n = int(stdin)\n\n    return \"1\" if n == 1 else \"2\"\n",
        "num_ids": 30
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    return str(int(a) + 1)",
        "num_ids": 21
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 0\n    while a > 0:\n        if a % 2 == 1:\n            res += 1\n        a //= 2\n    return str(res)",
        "num_ids": 48
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the next prime number after input'''\n    pass\n\n\ndef",
        "num_ids": 19
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    return str(int(a) * 2)",
        "num_ids": 21
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n",
        "num_ids": 11
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1 or x > 64:\n        raise ValueError\n    return str(x + 1)",
        "num_ids": 34
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    a = sys.stdin.readline().strip()\n    print(a.count('6'))\n\ndef",
        "num_ids": 32
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n = int(lines[0])\n\n    lines = [map(int, line.split(\" \")) for line in lines[1:]]\n\n    segments = [Segment(*line) for line in lines]\n\n    best = float(\"inf\")\n\n    for segment_1 in segments:\n        for segment_2 in segments:\n            if segment_1 == segment_2:\n                continue\n\n            intersection = segment_1.intersection(segment_2)\n\n            if not intersection:\n                continue\n\n            if len(intersection) < best:\n                best = len(intersection)\n\n    return best\n\n\ndef",
        "num_ids": 152
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [map(int, line.split()) for line in stdin.split('\\n')]\n    if n == 2:\n        return str(0)\n    if n == 3:\n        a, b = segments[0][0], segments[0][1]\n        for _, r in segments[1:]:\n            if a == r:\n                return str(0)\n            elif b == r:\n                return str(0)\n            else:\n                a, b = a, r\n    cache = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                cache[i][j] = segments[i][0]\n            else:\n                cache[i][j] = cache[i][j - 1] + segments[j][1] - segments[j][0]\n    curr = cache[0][-1]\n    length = max(curr, 0)\n    for i in range(1, n):\n        left = cache[i - 1][-1]\n        right = cache[i][0]\n        if left > 0 and right > 0:\n            length = max(length, left + right)\n    return str(length)",
        "num_ids": 308
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        seq.append([l, r])\n\n    print(get_intersection(seq))\n\ndef",
        "num_ids": 62
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    n = int(stdin)\n    lines = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")]\n    segments = sorted(lines)\n    for segment in segments:\n        if result == 0:\n            result += segment[1] - segment[0]\n        else:\n            result = max(result, segment[1] - segment[0] - result)\n    return str(result)\n\n\ndef",
        "num_ids": 113
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    n = int(stdin)\n    # the array of segment endpoints\n    segments = [[int(x) for x in line.split()] for line in stdin.split('\\n')[1:]]\n    # the max length of the intersection of the remaining n - 1 segments\n    result = 0\n    # for each segment, use its left endpoint and its right endpoint as the intersection\n    for i in range(n - 1):\n        left = segments[i][0]\n        right = segments[i][1]\n        # the remaining n - 1 segments\n        remaining = segments[i + 1:]\n        # for each remaining segment, use its left endpoint and its right endpoint as the intersection\n        for j in range(len(remaining)):\n            if remaining[j][0] > right:\n                # there is no intersection, so increment result by the remaining segment's length\n                result += right - left\n                # stop looking for intersections after this one\n                break\n            elif remaining[j][1] < left:\n                # there is no intersection, so increment result by the remaining segment's length\n                result += left - right\n                # stop looking for intersections after this one\n                break\n            else:\n                # there is intersection, so increment result by the length of the intersection\n                result += right - left\n                # replace the right endpoint of the intersection with the endpoint of the remaining segment\n                remaining[j][1] = right\n    return str(result)\n\n\nprint(solution(input()))\n",
        "num_ids": 351
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(int(x) for x in stdin.readline().split()) for _ in range(n)]\n    max_length = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            intersect = intersection(segments[i], segments[j])\n            if intersect and len(intersect) > max_length:\n                max_length = len(intersect)\n    return str(max_length)\n\ndef",
        "num_ids": 128
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [tuple(map(int, line.split())) for line in stdin.strip().split('\\n')]\n    \n    sorted_segments = sorted(segments, key=lambda segment: segment[0])\n    max_length = 0\n    current_length = 0\n    for segment in sorted_segments:\n        if current_length == 0:\n            current_length = segment[1]\n        else:\n            current_length = max(current_length, segment[1])\n        max_length = max(max_length, current_length)\n    \n    return max_length\n",
        "num_ids": 153
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = [tuple(int(x) for x in line.split()) for line in stdin.readlines()]\n    segments.sort()\n    print(solve(segments))\n\ndef",
        "num_ids": 64
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.strip().split(\" \"))) for line in stdin.readlines()]\n\n    def get_intersection_length(left_end: int, right_end: int) -> int:\n        segments = [\n            [0, left_end, right_end],\n            [0, left_end, right_end + 1],\n            [0, left_end + 1, right_end],\n            [0, left_end + 1, right_end + 1]\n        ]\n        length = 0\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    length += is_intersect(segments[i], segments[j])\n        return length\n\n    def is_intersect(left: List[int], right: List[int]) -> bool:\n        return left[1] < right[0] and right[1] < left[0]\n\n    def remove(segment: List[int]) -> int:\n        length = len(segment) - 2\n        segment.sort(key=lambda t: t[0])\n        length -= segment[-1][2] - segment[-1][1] - 1\n        segment.pop()\n        return length\n\n    length = -1\n    for i in range(n):\n        for j in range(n):\n            if i!= j and i!= (j + 1) % n and j!= (i + 1) % n:\n                l = remove(segments[i])\n                r = remove(segments[j])\n                length = max(length, get_intersection_length(segments[i][0], segments[j][1]))\n\n    return str(length)",
        "num_ids": 421
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n\n    def height(i: int) -> int:\n        if i == 0:\n            return a[i]\n        return max(a[i], height(i - 1))\n\n    if n == 0 or len(a) == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n\n    h = height(n - 1)\n\n    for i in range(1, n):\n        if height(i) == height(i + 1):\n            return \"NO\"\n\n    return \"YES\"\n\nimport sys",
        "num_ids": 153
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nassert_solution(solution, \"\"\"\"YES\"\"\", \"\"\"\n3\n3 1 2\n\nNO\n\n\"\"\")\n\"\"\"\n\"\"\"\n\n\n\n\"\"\"\n\n\"\"\"\ndef",
        "num_ids": 45
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return stdout\n\n\"\"\"\n\nfrom math import log\nstdin = \"\"\"5\n2 1 1 2 5\n\"\"\"\n\ndef",
        "num_ids": 34
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    return stdout.strip()",
        "num_ids": 16
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n",
        "num_ids": 7
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return \"YES\" if height(a) == 1 and n >= 1 else \"NO\"\n\ndef",
        "num_ids": 49
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn = int(input())\ns = input().strip()\nlst = [int(i) for i in s.split()]\nheight = lst[0]\nfor i in range(1, n):\n    if height!= lst[i]:\n        print('NO')\n        exit()\nprint('YES')\n",
        "num_ids": 82
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    if h.count(h[0]) == len(h):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nassert(solution(stdin) == stdin.readline().strip())\n\n\n\"\"\"\n",
        "num_ids": 90
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    parts = input_data[1].split(' ')\n    parts = [int(x) for x in parts]\n    count = 0\n    for i in range(n):\n        if i > 0:\n            if parts[i] == parts[i-1]:\n                count += 1\n        if i < n-1:\n            if parts[i] == parts[i+1]:\n                count += 1\n    if count > 1:\n        return \"NO\"\n    return \"YES\"",
        "num_ids": 141
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    curr = a[:]\n\n    if len(curr) > 2 and curr[0] == curr[-1]:\n        return \"NO\"\n\n    for i in range(len(curr) - 1):\n        if curr[i] == curr[i + 1]:\n            curr[i] += 1\n            curr[i + 1] += 1\n\n    if len(curr) > 2 and curr[0] == curr[-1]:\n        return \"NO\"\n\n    return \"YES\"",
        "num_ids": 160
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    -1\n    >>> solution(\"jdhfkjha\")\n    -1\n    >>> solution(\"asdf\")\n    4\n    >>> solution(\"aaaaa\")\n    15\n    >>> solution(\"ajihiushda\")\n    233\n    \"\"\"\n    def calculate_cost(target: str, cost: int) -> int:\n        return cost if target == '' else cost + calculate_cost(target[1:], cost + 1)\n\n    n, k = [int(x) for x in stdin.split()]\n    string = stdin[(len(stdin) - n):]\n    if k > len(string):\n        return -1\n    return calculate_cost(string, 0)\n",
        "num_ids": 172
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    s = stdin[1:]\n    cost = 0\n    i = 0\n    while i < n:\n        sub = s[i:i+k-1]\n        cost += k - len(sub)\n        i += 1\n    return str(cost)",
        "num_ids": 77
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[1:]\n    if k > len(s):\n        return '-1'\n\n    # cost(i) is the cost of the subsequence starting from the ith character, i.e. cost(i) = cost(i - 1) + 1 if s[i]!= s[i - 1]\n    cost = [0] * (len(s) + 1)\n    for i in range(1, len(s) + 1):\n        if s[i - 1]!= s[i - 2]:\n            cost[i] = cost[i - 1] + 1\n        else:\n            cost[i] = cost[i - 1]\n\n    # we can find the first k - 1 subsequences\n    i = 0\n    while k > 0:\n        cost[i] = min(cost[i], cost[i + 1] + 1)\n        k -= 1\n        i += 1\n\n    return str(cost[i])\n\n\nassert solution('2 2') == '0'\nassert solution('4 6') == '15'\nassert solution('5 7') == '-1'\nassert solution('10 100') == '233'\nassert solution('aaaaa') == '4'\nassert solution('aaa') == '-1'\nassert solution('a') == '-1'\nassert solution('aaaaaa') == '-1'\nassert solution('aab') == '-1'\nassert solution('aaaab') == '-1'\nassert solution('aaba') == '-1'\nassert solution('aabaa') == '-1'\nassert solution('aabaaab') == '-1'\nassert solution('ababa') == '-1'\nassert solution('aabaab') == '-1'\nassert solution('aabaababa') == '-1'\nassert solution('aaaaaababa') == '-1'\nassert solution('aaaaaaababa') == '-1'\nassert solution('aaaaaaababaaba') == '-1'\nassert solution('aaaaaaababaabaa') == '-1'\nassert solution('aaaaaaababaabaaaba') == '-1'\nassert solution('aaaaaaababaabaaabaabaabaaabaaba') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaab') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaa') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaaabaab') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaaabaab') == '-1'\nassert solution('aaaaaaabaaaabaaabaabaabaaabaabaabaaabaabaaabaab') == '-1'\n",
        "num_ids": 675
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin.strip()\n    if k > n:\n        print(-1)\n        return\n    # We have to add the cost of the last character\n    n -= 1\n    cost = sum(1 for x in s if x == \"a\")\n\n    # Our cost is either 1 or 2\n    for i in range(1, k):\n        cost += i * n * (n - 1) // 2\n\n    # Check if the cost of the first character is valid\n    if s[0] == \"a\":\n        cost += (n - 1) * n // 2\n\n    print(cost)\n",
        "num_ids": 159
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.strip()\n    if k > len(s):\n        return -1\n    dp = [0] * (len(s) + 1)\n    for i in range(len(s)):\n        dp[i+1] = dp[i] + (s[i]!= s[i-1])\n    if k == len(s):\n        return dp[len(s)]\n    else:\n        return -1\n\nprint(solution(input()))\n",
        "num_ids": 136
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(\" \"))\n    s = stdin.strip()\n    if len(s) < k:\n        return \"-1\"\n    cost = 0\n    for i in range(k-1):\n        cost += 1\n        for j in range(i+1, len(s)):\n            if s[j]!= s[i]:\n                cost += 1\n    return str(cost)",
        "num_ids": 106
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, k = [int(x) for x in stdin.split()]\n\n    if k > s:\n        return -1\n\n    cost = 0\n    d = {}\n\n    for i in range(s):\n        if i in d:\n            continue\n        d[i] = cost\n        cost += 1\n    return d[k - 1]\n\n\nassert(solution(\"4 5\") == 4)\nassert(solution(\"5 6\") == -1)\nassert(solution(\"5 7\") == -1)\nassert(solution(\"10 100\") == 233)\n",
        "num_ids": 135
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return -1\n    s = stdin.strip()\n    S = [s[i:i+1] for i in range(len(s))]\n    print(S)\n    return 0\n\nprint(solution(stdin))\n",
        "num_ids": 85
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"hello world\"\n",
        "num_ids": 8
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split(' '))\n    print(a + b + c - 3 * min(a, b, c) - max(a, b, c) - 2 * max(a, b, c) + 3 * max(a, b, c))\n",
        "num_ids": 75
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n",
        "num_ids": 14
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of days the cat can eat in a trip without additional food purchases.\"\"\"\n    stdin = stdin.strip()\n    if stdin:\n        a, b, c = map(int, stdin.split())\n    else:\n        a, b, c = 0, 0, 0\n    if a > b + c:\n        return '4'\n    elif b > a + c:\n        return '7'\n    elif c > a + b:\n        return '3'\n    else:\n        return ''.join(['1', '2', '3', '4', '5', '6', '7'][a + b + c])\n",
        "num_ids": 159
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nassert str(solution('2 1 1')) == '4'\nassert str(solution('3 2 2')) == '7'\nassert str(solution('1 100 1')) == '3'\nassert str(solution('30 20 10')) == '39'\nassert str(solution('1 50 1')) == '4'\nassert str(solution('100 50 100')) == '104'\n",
        "num_ids": 101
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(a, b, c) + 2\n",
        "num_ids": 31
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(s) for s in stdin.split()]\n    a, b, c = days\n    max_days = (a * 7 + b * 2 + c * 1) // min(a, b, c)\n    return str(max_days)\n\nprint(solution(input()))\n\"\"\"\n",
        "num_ids": 77
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n",
        "num_ids": 9
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    days = 7\n    maximum = days - max(a, b, c)\n    if maximum == days:\n        return str(maximum)\n    elif maximum == days - 1:\n        return str(maximum + 1)\n    elif maximum == days - 2:\n        return str(maximum + 2)\n    elif maximum == days - 3:\n        return str(maximum + 3)\n    elif maximum == days - 4:\n        return str(maximum + 4)\n    elif maximum == days - 5:\n        return str(maximum + 5)\n    elif maximum == days - 6:\n        return str(maximum + 6)\n    elif maximum == days - 7:\n        return str(maximum + 7)\n    else:\n        return \"\"\n",
        "num_ids": 197
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(d) for d in stdin.split()]\n    return max(get_days_of_possible_trip(data[0], data[1], data[2]),\n               get_days_of_possible_trip_excluding_wednesdays(data[0], data[1], data[2]))\n\n\ndef",
        "num_ids": 81
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"",
        "num_ids": 6
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        tiles = [list(map(int, stdin.readline().split())) for _ in range(2 * n)]\n        for i in range(len(tiles)):\n            for j in range(len(tiles)):\n                if tiles[i][j]!= tiles[j][i]:\n                    print(\"NO\")\n                    return\n        if len(tiles) > m or len(tiles) > n:\n            print(\"NO\")\n            return\n        print(\"YES\")\n    return \"\"\n",
        "num_ids": 162
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\nThe second test case of the input has two types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {6} & {4} & {8} \\\\ \\hline 6 & {5} & {4} & {7} \\\\ \\hline 4 & {6} & {5} & {4} \\\\ \\hline 8 & {4} & {9} & {7} \\\\ \\hline 7 & {8} & {9} & {9} \\\\ \\hline 9 & {9} & {6} & {5} \\\\ \\hline \\end{array} \\right.$\n\n'''",
        "num_ids": 196
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(tuple(map(int, stdin.split())))\n    tiles = sorted(tiles, key=lambda x: x[0] + x[1])\n    matrix = [[0] * (m + 1) for _ in range(m + 1)]\n    for i, j in tiles:\n        matrix[i][j] = matrix[j][i] = 1\n    for i in range(m):\n        if not matrix[i][m] or not matrix[m][i]:\n            return 'NO'\n    for i in range(m + 1):\n        for j in range(m + 1):\n            if matrix[i][j] and matrix[j][i] and matrix[j][m] and matrix[m][j]:\n                return 'YES'\n    return 'NO'",
        "num_ids": 221
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    tiles = [stdin.rstrip().split(\" \") for _ in range(n)]\n    return \"YES\" if is_symmetric(tiles, m) else \"NO\"\n\ndef",
        "num_ids": 65
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe second test case of the input has four types of tiles, they are shown on the picture below. [Image]\n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {1} & {4} & {9} \\\\ \\hline 7 & {9} & {5} & {1} \\\\ \\hline 8 & {1} & {9} & {4} \\\\ \\hline 9 & {4} & {1} & {9} \\\\ \\hline \\end{array} \\right.$\ndef",
        "num_ids": 156
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nThe second test case is described below.\n\nMasha can construct the square of size $3 \\times 3$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 2 & {4} & {5} & {6} \\\\ \\hline 4 & {3} & {6} & {7} \\\\ \\hline 5 & {6} & {2} & {7} \\\\ \\hline 6 & {7} & {3} & {2} \\\\ \\hline 7 & {2} & {1} & {1} \\\\ \\hline 8 & {1} & {3} & {4} \\\\ \\hline 9 & {3} & {4} & {5} \\\\ \\hline \\end{array} \\right.$\n\"\"\"\n\nfrom sys import stdin\n\ndef",
        "num_ids": 196
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\ndef",
        "num_ids": 9
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    tiles = [list(map(int, stdin.split(' '))) for i in range(n)]\n    s = [[0] * (n + 1) for i in range(n + 1)]\n\n    for i in range(n):\n        for j in range(n):\n            s[i][j] = tiles[i][j]\n            s[j][i] = tiles[i][j]\n\n    for row in s:\n        print(*row)\n\n    if check_symmetric_solution(s, m, n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ndef",
        "num_ids": 163
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nMasha can also construct the following square of size $2 \\times 2$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 2 & {1} & {2} & {3} \\\\ \\hline 1 & {4} & {5} & {6} \\\\ \\hline 2 & {7} & {8} & {9} \\\\ \\hline 3 & {9} & {6} & {5} \\\\ \\hline 4 & {6} & {8} & {7} \\\\ \\hline 5 & {7} & {9} & {8} \\\\ \\hline 6 & {8} & {5} & {9} \\\\ \\hline \\end{array} \\right.$\ndef",
        "num_ids": 178
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    length = int(line)\n    res = 0\n    for i in range(1, length+1):\n        res = max(res, i-res)\n    return str(res)",
        "num_ids": 55
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(abs(sum(int(i) for i in stdin.readline().strip()) - sum(int(i) for i in stdin.readline().strip())))\n",
        "num_ids": 56
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip().split()\n    a = [int(i) for i in a]\n    a.sort()\n    left = a[0]\n    right = a[1:]\n    right.sort()\n    right.reverse()\n    print(abs(left - sum(right)) + abs(sum(left) - sum(right)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1662
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(sum(map(int, stdin.strip().split())) - sum(map(int, stdin.strip().split()))))",
        "num_ids": 36
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(abs(sum(x for x in range(1, n + 1) if x % 2 == 0) - sum(x for x in range(1, n + 1) if x % 2!= 0)))\n\nprint(solution(input()))\n",
        "num_ids": 71
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    return str(abs(n - (n // 2)))\n\n\nimport sys\ndef",
        "num_ids": 40
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            z = x + y\n            if z <= n:\n                a = x\n                b = y\n            else:\n                break\n    return str(abs(a - b))\n",
        "num_ids": 78
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = [int(line) for line in stdin]\n    sequence.sort()\n    i = 0\n    min_diff = float('inf')\n    while i < n:\n        j = i + 1\n        while j < n and sequence[j] - sequence[j - 1] < min_diff:\n            min_diff = sequence[j] - sequence[j - 1]\n            j += 1\n        i += j - 1\n    return str(min_diff)\n",
        "num_ids": 124
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    l = len(s)\n    dp = [0] * (l + 1)\n    dp[0] = 1\n    for i in range(1, l + 1):\n        for j in range(1, i + 1):\n            if s[i - j:i] == s[j - 1:i - 1]:\n                dp[i] = dp[i] + dp[i - j]\n            else:\n                dp[i] = dp[i] - dp[i - j]\n            dp[i] %= 10 ** 9 + 7\n    return dp[-1]\n",
        "num_ids": 170
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i]*(j-i):\n                count += 1\n    return str(count)\n\n\ndef",
        "num_ids": 95
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def calc(subs):\n        res = 0\n        for l, r in subs:\n            res += min(r, l) - max(l, r) + 1\n        return res\n\n    def isValid(subs):\n        r, l = [], []\n        for s1, s2 in subs:\n            r.append(s2)\n            l.append(s1)\n        return sorted(r) == sorted(l)\n\n    mod = 1000000007\n    if len(s) % 2!= 0:\n        return 0\n    else:\n        half = len(s) // 2\n\n    def test(subs):\n        r = calc(subs)\n        if isValid(subs):\n            return r % mod\n        else:\n            return 0\n\n    for i in range(1, half + 1):\n        subs = set()\n        for j in range(i, len(s), i):\n            subs.add((s[j - i], s[j]))\n        res = test(subs)\n        if res!= 0:\n            return res\n",
        "num_ids": 283
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(c)\n        return not stack\n\n    N = int(stdin)\n    s = stdin[1:N + 1]\n    l = len(s)\n    count = 0\n    for n in range(1, l + 1):\n        for i in range(l - n + 1):\n            s2 = s[i:i + n]\n            if is_valid(s2):\n                count += 1\n    return count % (10 ** 9 + 7)",
        "num_ids": 179
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    def find_bracket_pairs(s, n):\n        pairs = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if s[i] == '(' and s[j] == ')':\n                    pairs[j - i] += 1\n        return pairs\n    \n    pairs = find_bracket_pairs(s, n)\n    pairs.append(0)\n    ans = 1\n    for i in range(len(pairs) - 1):\n        ans *= pairs[i] + 1\n        ans %= 1000000007\n    return str(ans)\n    \n",
        "num_ids": 182
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace('()', '1+1')\n    return (s.count('(') - s.count(')') - 1) % 1000000007\n",
        "num_ids": 50
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    elif n % 25 == 1:\n        return 1\n    elif n % 25 == 2:\n        return 2\n    elif n % 25 == 3:\n        return 3\n    elif n % 25 == 4:\n        return 4\n    elif n % 25 == 5:\n        return 5\n    elif n % 25 == 6:\n        return 6\n    elif n % 25 == 7:\n        return 7\n    elif n % 25 == 8:\n        return 8\n    elif n % 25 == 9:\n        return 9\n    elif n % 25 == 10:\n        return 10\n    elif n % 25 == 11:\n        return 11\n    elif n % 25 == 12:\n        return 12\n    elif n % 25 == 13:\n        return 13\n    elif n % 25 == 14:\n        return 14\n    elif n % 25 == 15:\n        return 15\n    elif n % 25 == 16:\n        return 16\n    elif n % 25 == 17:\n        return 17\n    elif n % 25 == 18:\n        return 18\n    elif n % 25 == 19:\n        return 19\n    elif n % 25 == 20:\n        return 20\n    elif n % 25 == 21:\n        return 21\n    elif n % 25 == 22:\n        return 22\n    elif n % 25 == 23:\n        return 23\n    elif n % 25 == 24:\n        return 24\n    elif n % 25 == 25:\n        return 25\n    else:\n        return -1",
        "num_ids": 381
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n\n    # remove all leading zeroes\n    while n % 25!= 0:\n        moves += 1\n        n //= 25\n\n    # remove leading zeroes\n    while n % 25 == 0:\n        n //= 25\n        moves += 1\n\n    if n > 0:\n        return '-1'\n\n    return str(moves)",
        "num_ids": 97
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    m = 0\n\n    for i in range(1, 10):\n        m += n % i\n        n //= i\n\n    if m % 25!= 0:\n        return -1\n\n    return m",
        "num_ids": 57
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    while n % 25!= 0:\n        n = n * 10 + n % 10\n        c += 1\n    if n == 0:\n        return str(-1)\n    return str(c)",
        "num_ids": 61
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n > 0:\n        if n % 25!= 0:\n            break\n        else:\n            n = int(str(n)[1:] + str(n)[0])\n            moves += 1\n    if n > 0:\n        moves = -1\n    return moves\n\n\"\"\"\n\nimport sys\nfrom typing import Iterator\n\n\ndef",
        "num_ids": 98
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return \"-1\"\n    res = 0\n    while n % 25 == 0:\n        n //= 25\n        res += 1\n    return str(res)",
        "num_ids": 57
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ans = 0\n    while not n % 25 == 0:\n        ans += 1\n        n = int(str(n)[1:] + str(n)[0])\n    return ans if n % 25 == 0 else -1",
        "num_ids": 63
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    m = len(n)\n    ans = 0\n    while n!= \"0\":\n        if int(n) % 25 == 0:\n            break\n        temp = n\n        ans += 1\n        for i in range(0, m-1):\n            if temp[i] < temp[i+1]:\n                temp = temp[:i] + temp[i+1] + temp[i] + temp[i+2:]\n                ans += 1\n    if int(n) % 25!= 0:\n        print(-1)\n    else:\n        print(ans)\n    \n    \n",
        "num_ids": 150
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\n__author__ = 'bromix'\n",
        "num_ids": 16
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nIn the second example one of the possible sequences of moves is 5705 $\\rightarrow$ 5725 $\\rightarrow$ 7251 $\\rightarrow$ 7253.\ndef",
        "num_ids": 41
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = sorted(s)\n    print(len(s))\n    print(*s)\n",
        "num_ids": 47
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = 0\n    return str(res)\n\nassert solution('9\\nabacbecfd') == '2'\nassert solution('8\\naaabbcbb') == '2'\nassert solution('7\\naabbcde') == '3'\nassert solution('5\\nabcde') == '1'\nassert solution('3\\nabc') == '1'\nassert solution('10\\nabcddcba') == '1'",
        "num_ids": 129
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin[0:n]\n    sorted_s = \"\".join(sorted(s))\n    return str(sorted_s)\n\n\ndef",
        "num_ids": 49
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert (solution('') == '')\nassert (solution('abacbe') == '1 1 2 1 2 1 2 1 2')\nassert (solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1 2')\nassert (solution('abcdedc') == '1 1 1 1 1 1 1 1 1 1')\nassert (solution('abcde') == '1 1 1 1 1 1')\nassert (solution('abcdedcbb') == '1 1 1 1 1 1 1 1 1 1')\nassert (solution('abcdedcbbcc') == '1 1 1 1 1 1 1 1 1 1 1')\nassert (solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1 2')\nassert (solution('abcdedc') == '1 1 1 1 1 1 1 1 1 1')\nassert (solution('abcdedcbbcc') == '1 1 1 1 1 1 1 1 1 1 1')\nassert (solution('aaabbcbbcc') == '1 2 1 2 1 2 1 2 1 2 1 2')\nassert (solution('abcdedcbbccdd') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1')\nassert (solution('abcdedcbbccdddd') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1')\nassert (solution('abcd') == '1 1 1 1 1 1')\nassert (solution('abcdefghijklmnopqrstuvwxyz') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids": 1522
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    # Color every letter, and try to make the string sorted\n    color_map = {}\n    for i in range(n):\n        if s[i] not in color_map:\n            color_map[s[i]] = [i + 1]\n        else:\n            color_map[s[i]].append(i + 1)\n    # Try to color the string\n    colors = [0] * (n + 1)\n    for c in color_map:\n        cnt = len(color_map[c])\n        colors[cnt] = c\n        if cnt > 1:\n            for i in color_map[c]:\n                colors[i] = c\n    res = 0\n    for i in range(n):\n        if i < n - 1 and colors[i]!= colors[i + 1]:\n            res += 1\n            colors[i], colors[i + 1] = colors[i + 1], colors[i]\n    # Print the coloring and the swaps\n    print(res)\n    print(*colors[1:], sep=\" \")\n    return \"\"\n\n\ndef",
        "num_ids": 286
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    s_len = len(s)\n    if s_len <= n:\n        return str(0)\n    sorted_s = \"\".join(sorted(s))\n    if sorted_s == s:\n        return str(0)\n    s = list(s)\n    s.sort()\n    result = [0] * s_len\n    if s[0]!= s[1]:\n        result[0] = 1\n        s[0], s[1] = s[1], s[0]\n    else:\n        result[0] = 2\n    if s[0]!= s[1]:\n        result[1] = 2\n    else:\n        result[1] = 1\n    for i in range(2, s_len - 1):\n        if s[i]!= s[i + 1]:\n            result[i] = 2\n    if s[-1]!= s[-2]:\n        result[-1] = 2\n    else:\n        result[-1] = 1\n    return \"\\n\".join(str(x) for x in result)",
        "num_ids": 278
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    c = [-1] * n\n    for i in range(n):\n        c[i] = i\n    ans = [0] * n\n    for i in range(n - 1):\n        x = c[i]\n        y = c[i + 1]\n        if s[x] > s[y]:\n            ans[c[i]] = 1\n            ans[c[i + 1]] = 1\n    return ''.join(map(str, ans))\n\n\ndef",
        "num_ids": 138
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = None\n    seen = [False] * 26\n    for c in s:\n        seen[ord(c) - ord('a')] = True\n    for i in range(1, n):\n        cur = i - 1\n        if not seen[ord(s[cur]) - ord('a')]:\n            res = i\n            break\n        seen[ord(s[cur]) - ord('a')] = False\n    if res is None:\n        res = n\n    c = [0] * n\n    for i in range(n - 1, -1, -1):\n        if not seen[ord(s[i]) - ord('a')]:\n            c[i] = res\n            res -= 1\n        seen[ord(s[i]) - ord('a')] = False\n    return str(res)\n\nassert(solution(\"abacbecfd\") == \"2\")\nassert(solution(\"aaabbcbb\") == \"2\")\nassert(solution(\"abcdedc\") == \"3\")\nassert(solution(\"abcde\") == \"1\")\nassert(solution(\"abcdeab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefab\") == \"1\")\nassert(solution(\"abacbe\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdee\") == \"1\")\nassert(solution(\"abcdefe\") == \"1\")\nassert(solution(\"abcdefea\") == \"1\")\nassert(solution(\"abcdefeaab\") == \"1\")\nassert(solution(\"abcdefeab\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") == \"1\")\nassert(solution(\"abcdefa\") == \"1\")\nassert(solution(\"abcdefaab\") == \"1\")\nassert(solution(\"abcdef\") ==",
        "num_ids": 1522
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    n = len(s)\n    colors = [0] * n\n    counter = 0\n\n    for i in range(n):\n        if not colors[i]:\n            colors[i] = counter\n            counter += 1\n\n        for j in range(i + 1, n):\n            if s[i] > s[j] and not colors[j]:\n                colors[j] = colors[i]\n            elif s[i] < s[j] and not colors[i]:\n                colors[i] = colors[j]\n\n    res = colors[:]\n    res.sort()\n    return res",
        "num_ids": 158
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def swap(i, j, a):\n        if i < j:\n            a[i], a[j] = a[j], a[i]\n\n    s = list(stdin.strip())\n    n = len(s)\n    colors = [0] * n\n\n    for i in range(n):\n        if colors[i] == 0:\n            for j in range(i + 1, n):\n                if colors[j] == 0 and s[i] > s[j]:\n                    colors[j] = 1\n                    swap(i, j, colors)\n                    break\n\n    def color(i):\n        if i < n:\n            return colors[i]\n        else:\n            return 0\n\n    res = sum(colors)\n    print(res)\n    return''.join(map(str, colors))\n\n\ndef",
        "num_ids": 199
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = []\n    for _ in range(N):\n        S = stdin.strip()\n        a = list(S)\n        a.sort()\n        for i in range(len(S)):\n            if a[i] == S[i]:\n                ans.append(S[i])\n            else:\n                break\n    return \"YES\\n\" + \"\".join(ans)",
        "num_ids": 102
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n\n    return 'YES' if is_valid(strings) else 'NO'\n\ndef",
        "num_ids": 68
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    solution = Solution(stdin)\n    solution.read()\n    return solution.solve()\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n        self.n = stdin.readline().strip()\n        self.strings = []\n        for _ in range(int(self.n)):\n            self.strings.append(stdin.readline().strip())\n\n    def solve(self):\n        sorted_strings = sorted(self.strings, key=lambda x: len(x), reverse=True)\n        if len(sorted_strings) == 1:\n            return \"YES\"\n        result = \"\"\n        for string in sorted_strings:\n            for word in string:\n                result += word\n            result += \"\\n\"\n        return result.strip()\n",
        "num_ids": 197
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    strings = [stdin.readline().strip() for _ in range(int(n))]\n\n    for i in range(len(strings) - 1):\n        if not strings[i] in strings[i + 1]:\n            return \"NO\"\n\n    return \"YES\"\n",
        "num_ids": 77
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [None] * n\n    for i in range(n):\n        strings[i] = stdin.readline()\n    for i in range(n):\n        for j in range(i):\n            if strings[i].startswith(strings[j]):\n                break\n        else:\n            print(\"YES\")\n            print(strings[i])\n            return\n    print(\"NO\")",
        "num_ids": 107
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return \"NO\"\n    strings = []\n    for _ in range(n):\n        strings.append(stdin[stdin.find(\":\") + 1:])\n    strings.sort()\n    for i in range(n):\n        if strings[i] not in stdin[:stdin.find(\":\")]:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n\"\"\"\n\nfrom collections import Counter\n\ndef",
        "num_ids": 125
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    for _ in range(n):\n        string = stdin.readline().strip()\n\n        for i in range(len(string)):\n            if string[i] not in string[i+1:]:\n                break\n        else:\n            return \"YES\"\n\n    return \"NO\"",
        "num_ids": 77
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        l = len(stdin)\n        stdin = stdin.split('\\n')\n        i = 0\n        for s in stdin:\n            if s == '':\n                continue\n            if len(s) == l:\n                stdin[i] = s[::-1]\n            i += 1\n        if l == len(stdin):\n            print(\"YES\")\n            print(*stdin, sep='\\n')\n        else:\n            print(\"NO\")\n",
        "num_ids": 131
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = [int(s) for s in stdin.split()]\n    left = 0\n    right = n - 1\n    count = 0\n    while True:\n        if k == 0:\n            break\n        if array[left] > k:\n            break\n        if array[right] > k:\n            break\n        if array[left] <= k and array[right] <= k:\n            break\n        if array[left] <= k and array[right] > k:\n            right -= 1\n            count += 1\n        if array[left] > k and array[right] <= k:\n            left += 1\n            count += 1\n    return str(count)",
        "num_ids": 172
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert solution(stdin) == stdout\n",
        "num_ids": 15
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    numbers = list(map(int, stdin[2:]))\n    # count how many problems we can solve\n    ans = 0\n    for i, num in enumerate(numbers):\n        # if the first number is smaller than the difficulty, we cannot solve a problem\n        if num <= k:\n            break\n        # if the first number is bigger than the difficulty, we cannot solve the last number\n        # we don't need to check the first one, because we are starting with the end of the list\n        if i == len(numbers) - 1:\n            ans += 1\n        else:\n            # check if the next number is greater than the difficulty\n            if numbers[i + 1] >= k:\n                ans += 1\n    return str(ans)\n\nassert(solution(\"4 2 3 1 5 1 6 4\") == \"5\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 100\") == \"5\")\nassert(solution(\"5 2 3 1 5 1 6 4\") == \"5\")\nassert(solution(\"10 100\") == \"0\")\nassert(solution(\"5 100 2\") == \"5\")\nassert(solution(\"4 1 5 3 4 2\") == \"5\")\nassert(solution(\"2 3 1 5 1 6 4\") == \"5\")\nassert(solution(\"5 1 5 2 3 4\") == \"5\")\nassert(solution(\"3 1 4 2 1\") == \"2\")\nassert(solution(\"5 0 1 2 3 4\") == \"5\")\nassert(solution(\"3 3 3 3 3 3 3 3 3 3\") == \"0\")\nassert(solution(\"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\") == \"0\")\nassert(solution
        "num_ids": 1473
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    arr = [int(x) for x in stdin[2:]]\n    max_diff = [0] * n\n    for i, num in enumerate(arr):\n        if i == 0:\n            max_diff[i] = num\n        else:\n            max_diff[i] = max(max_diff[i - 1], num)\n    count = 0\n    i = 0\n    while i < n:\n        if max_diff[i] <= k:\n            count += 1\n        i += 1\n    return count\n\n\nprint(solution(input()))\n",
        "num_ids": 167
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    result = 0\n    left = 0\n    right = n - 1\n\n    while left < right:\n        if problems[left] <= k:\n            result += 1\n            left += 1\n        elif problems[right] <= k:\n            result += 1\n            right -= 1\n        else:\n            break\n    return str(result)\n\nassert(solution('4 2 3 1 5 1 6 4') == '5')\nassert(solution('5 2') == '0')\nassert(solution('12 34 55 43 21') == '5')\nassert(solution('123456789 10123456789 123456789 131415161718') == '123456789')\n\n\"\"\"",
        "num_ids": 196
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    diffs = [int(x) for x in stdin.split()]\n    left_pointer = 0\n    right_pointer = len(diffs) - 1\n    while left_pointer < right_pointer:\n        if diffs[left_pointer] > k:\n            left_pointer += 1\n        elif diffs[right_pointer] > k:\n            right_pointer -= 1\n        else:\n            left_pointer += 1\n            right_pointer -= 1\n    return str(left_pointer)\n\n\ndef",
        "num_ids": 141
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 4\\n4 2 3 1 5 1 6 4\")\n    '5'\n    >>> solution(\"5 2\\n3 1 2 1 3\")\n    '0'\n    >>> solution(\"5 100\\n12 34 55 43 21\")\n    '5'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    left = [0 for _ in range(n)]\n    right = [0 for _ in range(n)]\n    for i in range(n):\n        left[i] = i + 1\n        right[n - i - 1] = i + 1\n\n    for i in range(n):\n        if left[i] <= k:\n            left[i] = i + 1\n        if right[i] <= k:\n            right[i] = i + 1\n    result = 0\n    for i in range(n):\n        if left[i] <= k:\n            result += 1\n        if right[n - i - 1] <= k:\n            result += 1\n    return str(result)\n\n\n\"\"\"\n\n\ndef",
        "num_ids": 269
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = stdin.strip()\n\n    a = list(map(int, stdin.split()))\n    # get the position of the first problem to solve\n    first = 0\n    last = len(a) - 1\n\n    # return the number of problems he can solve\n    while last - first > 0:\n        if a[first] > k:\n            last -= 1\n        elif a[last] > k:\n            first += 1\n        else:\n            break\n    return last - first\n\n\nassert(solution('8 4') == '5')\nassert(solution('5 2') == '0')\nassert(solution('5 100') == '5')\nassert(solution('12 34 55 43 21') == '5')\nassert(solution('3 1 2 1 3') == '0')\nassert(solution('9 8 7 6 5 4 3 2 1') == '0')\nassert(solution('10 100 1 2 1 1 1 1 2 3') == '0')\nassert(solution('10 100 100 100 100 1 2 1 1 1 1 1 1 2') == '9')\nassert(solution('10 100 100 100 100 1 2 1 1 1 1 1 1 1 1') == '0')\nassert(solution('10 100 100 100 100 1 2 1 1 1 1 1 1 1 1 1') == '0')\n\n\n\"\"\"\n",
        "num_ids": 327
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return str(int(s[0]) * 2 + int(s[1]))",
        "num_ids": 30
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n\n    if a < b:\n        a, b = b, a\n\n    red = set(range(1, a + 1))\n    blue = set(range(1, b + 1))\n\n    max_perimeter = 0\n    for i in range(1, b + 1):\n        max_perimeter = max(max_perimeter, i * (a + 1))\n\n    return max_perimeter\n\n\nassert (solution('') == 0)\nassert (solution('0 0') == 0)\nassert (solution('4 4') == 12)\nassert (solution('3 9') == 14)\nassert (solution('9 3') == 14)\nassert (solution('506 2708') == 3218)\n\n\"\"\"\n",
        "num_ids": 191
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r1, r2 = list(map(int, stdin.split(\" \")))\n    return str(2 * (r1 + r2) - r1 - r2)",
        "num_ids": 42
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    return '{}'.format(2 * (a + b))",
        "num_ids": 35
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return '{}'.format(min([a * a + b * b, 2 * a * b, 2 * a * b - a - b]))",
        "num_ids": 56
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a, b) * 4)\n",
        "num_ids": 30
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return str(a + b)",
        "num_ids": 28
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    return str(n * m * 4 - n * (n + 1) * 2 - m * (m + 1) * 2)",
        "num_ids": 53
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a*b)\n\n\nprint(solution(input()))\n",
        "num_ids": 40
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"\"\n\n\n\nassert str(solution(\"4 4\")) == \"12\"\nassert str(solution(\"3 9\")) == \"14\"\nassert str(solution(\"3 6\")) == \"14\"\nassert str(solution(\"506 2708\")) == \"3218\"\n",
        "num_ids": 80
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.strip()\n    if not all(string[i] < string[i + 1] for i in range(len(string) - 1)):\n        return \"NO\"\n\n    s = list(string)\n    for i in range(len(string) - 1):\n        if s[i] > s[i + 1]:\n            for j in range(len(string) - 1, i, -1):\n                if s[j] > s[j - 1]:\n                    s[j], s[j - 1] = s[j - 1], s[j]\n                    break\n\n    return \"YES\" + \"\".join(\"0\" if s[i] == s[i + 1] else \"1\" for i in range(len(string) - 1))\n\n\ndef",
        "num_ids": 193
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    s = stdin.readline().strip()\n\n    ans = \"YES\"\n    for _ in range(N - 1):\n        swapped = False\n        for i in range(1, N):\n            if s[i] < s[i - 1]:\n                s = s[:i] + \"1\" + s[i:]\n                s = s[:i - 1] + \"0\" + s[i - 1:]\n                swapped = True\n                break\n        if not swapped:\n            ans = \"NO\"\n            break\n\n    return ans",
        "num_ids": 144
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n = len(s)\n    if n == 1:\n        return \"NO\"\n\n    colors = [0] * n\n    for i in range(n):\n        if s[i] == \"a\":\n            colors[i] = 0\n        elif s[i] == \"b\":\n            colors[i] = 1\n        elif s[i] == \"c\":\n            colors[i] = 2\n        elif s[i] == \"d\":\n            colors[i] = 3\n        elif s[i] == \"e\":\n            colors[i] = 4\n        else:\n            colors[i] = 5\n\n    can_be_sorted = True\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1]:\n            can_be_sorted = False\n            break\n\n    if can_be_sorted:\n        return \"NO\"\n\n    swaps = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if colors[i] == colors[j]:\n                swaps.append([i, j])\n\n    colors = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            colors[i] = 0\n        else:\n            colors[i] = 1\n\n    for i in range(len(swaps)):\n        if colors[swaps[i][0]] == colors[swaps[i][1]]:\n            can_be_sorted = False\n            break\n\n    if can_be_sorted:\n        return \"NO\"\n\n    return \"YES\"\n",
        "num_ids": 418
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    s = list(s)\n\n    counts = [0] * 2\n    for c in s:\n        if c == '0':\n            counts[0] += 1\n        else:\n            counts[1] += 1\n\n    if counts[0] > counts[1]:\n        s = [1 if c == '0' else 0 for c in s]\n    else:\n        s = [1 if c == '1' else 0 for c in s]\n\n    s.sort()\n    return 'YES' if s == list(range(n)) else 'NO'",
        "num_ids": 152
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if not isSorted(s):\n        return \"NO\"\n    ans = \"\"\n    for i in range(n):\n        ans += '1' if s[i] == 'a' else '0'\n    return \"YES\" if isSorted(ans) else \"NO\"\n\ndef",
        "num_ids": 94
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    for i in range(n):\n        if s[i]!= chr(i + ord('a')):\n            return \"NO\"\n\n    return \"YES\"\n\n\nassert solution(io.StringIO(\"\"\"9\nabacbecfd\n\"\"\")) == 'YES'\nassert solution(io.StringIO(\"\"\"8\naaabbcbb\n\"\"\")) == 'YES'\nassert solution(io.StringIO(\"\"\"7\nabcdedc\n\"\"\")) == 'NO'\nassert solution(io.StringIO(\"\"\"5\nabcde\n\"\"\")) == 'YES'\nassert solution(io.StringIO(\"\"\"2\nab\n\"\"\")) == 'YES'\nassert solution(io.StringIO(\"\"\"1\na\n\"\"\")) == 'NO'\n\nprint(solution(io.StringIO(input())))\n",
        "num_ids": 208
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    first_color = None\n    for i in range(n):\n        if i == 0:\n            first_color = s[i]\n        elif s[i]!= first_color:\n            first_color = None\n            break\n    if first_color is None:\n        return \"NO\"\n    last_color = None\n    for i in range(n-1, -1, -1):\n        if s[i]!= first_color:\n            last_color = s[i]\n            break\n    if last_color is None:\n        return \"NO\"\n    swaps = []\n    for i in range(n):\n        if s[i] == first_color and s[i]!= last_color:\n            swaps.append(i)\n    if len(swaps) % 2 == 0:\n        return \"YES\" + \"\".join(str(int(s[swaps[i]]!= first_color)) for i in range(len(swaps)))\n    else:\n        return \"NO\"\n",
        "num_ids": 269
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    colors = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] > s[j]:\n                colors[i] += 1\n                colors[j] -= 1\n\n    result = \"YES\" if max(colors) <= 0 else \"NO\"\n\n    print(result)\n\n    if result == \"YES\":\n        print(''.join(['0' if x == 0 else '1' for x in colors]))\n",
        "num_ids": 144
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates if it is possible to color the given string so that after coloring it can become sorted by some sequence of swaps.\n\n    After coloring, the string can be sorted by any permutation of the indices that can be colored different than the previous one.\n\n    If the given string is sorted by any permutation, the answer is \"YES\"\n\n    Otherwise, the answer is \"NO\"\n\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    if sorted(s) == s:\n        return \"YES\"\n\n    seen = [0] * n\n\n    for i, c in enumerate(s):\n        seen[ord(c) - ord('a')] = i\n\n    for j in range(n):\n        if seen[j] == j:\n            continue\n\n        x, y = seen[j], seen[j]\n        while x!= j and y!= j:\n            seen[x], seen[y] = seen[y], seen[x]\n            x, y = seen[x], seen[y]\n\n    if seen == range(n):\n        return \"YES\"\n\n    return \"NO\"",
        "num_ids": 282
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    colored = [0] * n\n    for i in range(n):\n        if s[i]!= 'a':\n            colored[i] = 1\n\n    ans = ''.join([str(c) for c in colored])\n    if sorted(ans)!= ans:\n        return 'NO'\n    return 'YES' + ans\n",
        "num_ids": 99
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(int(a / b * 0.1))",
        "num_ids": 35
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return f\"{-1 if A > B else (A if A <= B else int(math.ceil(A * 0.1) - math.floor(A * 0.08))):0d}\"\n    \n",
        "num_ids": 71
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    elif a < b:\n        return str(-1)\n    elif a > b:\n        return str(int(a - (a % b)))",
        "num_ids": 66
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        a, b = map(int, stdin.split(' '))\n    except ValueError:\n        print('ERROR')\n        return\n    \n    if a > b:\n        a, b = b, a\n    \n    lowest = -1\n    while a <= b:\n        if a == b:\n            lowest = a\n            break\n        a += 1\n        b -= 1\n    \n    return str(lowest)",
        "num_ids": 106
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 0 or B == 0:\n        return \"-\"\n    if A < 0 or B < 0 or A > 100 or B > 100:\n        return \"-\"\n    elif B < A:\n        return \"-\"\n    else:\n        return str(int(round(A * 0.08 + A * 0.1)))",
        "num_ids": 93
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(' ')\n    a, b = int(inputs[0]), int(inputs[1])\n    min_price = -1\n    for c in range(a, b+1):\n        price_after_tax = c - c * 0.08\n        if price_after_tax <= a:\n            min_price = price_after_tax\n            break\n        else:\n            price_after_tax = c - c * 0.1\n            if price_after_tax <= a:\n                min_price = price_after_tax\n                break\n    return str(min_price)",
        "num_ids": 146
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    if a >= b:\n        return -1\n    return int(math.floor(a * 0.08 + b * 0.1))",
        "num_ids": 50
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return '{}\\n'.format(max([(a + b - 1) // (b - a) * a, (a + b - 1) // (b - a) * b]))",
        "num_ids": 63
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A == B:\n        return '-1'\n\n    def _div(a, b):\n        if a < b:\n            return a\n        return int(a / b)\n\n    if _div(A, B) * B > A:\n        return str(_div(A, B) * B)\n    return str(A)",
        "num_ids": 98
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Example solution to calculate the number of days needed for a training.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2 or n > 10 ** 9 or k < 1 or k > 10 ** 5:\n        return \"NO\"\n\n    return \"YES\" if (n - 1) % k == 0 and (n - 1) // k + 1 <= 2 * (n - 1) else \"NO\"",
        "num_ids": 108
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2 or k < 1 or n > 10**9 or k > 10**5:\n        return \"NO\"\n    result = []\n    for i in range(1, k + 1):\n        if sum(result) < n:\n            result.append(0)\n        elif result[-1] < result[-2] + 2 * result[-1]:\n            result.append(result[-1])\n        else:\n            result.append(result[-1] + 1)\n    return \"YES\\n\" + \"\\n\".join(map(str, result))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1426
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    \n    num_array = []\n    for _ in range(k):\n        num_array.append(int(stdin.readline().strip()))\n\n    result = [1] * (k)\n    for i in range(k - 1):\n        num_array[i + 1] = num_array[i] + 1\n        if num_array[i + 1] <= 2 * num_array[i]:\n            result[i + 1] = num_array[i + 1]\n        else:\n            break\n\n    if k > 1:\n        for i in range(k - 2, -1, -1):\n            if result[i]!= result[i + 1]:\n                break\n            if result[i] < result[i + 1]:\n                result[i] = result[i + 1]\n        \n    return \"YES\" if result else \"NO\"\n\nassert(solution(stdin.read()) == solution(stdin.read().strip()))\n\ndef",
        "num_ids": 253
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    a = [0] * k\n    if n == 1:\n        return 'YES'\n\n    ans = []\n\n    # b = set()\n    # for _ in range(k):\n    #     if _ not in b:\n    #         ans.append(_)\n    #         b.add(_)\n    #         continue\n    #     ans.append(_)\n    #     ans.append(_)\n    #     b.add(_)\n\n    while sum(a) < n:\n        a[0] += 1\n        a[1] += 1\n        for i in range(2, k):\n            a[i] += a[i - 1]\n        ans.append(a[-1])\n\n    if sum(a) == n:\n        return 'YES' +''.join(str(x) for x in a)\n    return 'NO'\n\n\nprint(solution(input()))\n",
        "num_ids": 231
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [0] * k\n    return \"YES\\n{}\".format(' '.join(str(x) for x in a))",
        "num_ids": 53
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1: return 'YES'\n\n    a = [1] * k\n    for i in range(1, k):\n        a[i] = max(a[i - 1], a[i - 1] + 1)\n        if a[i] >= n:\n            break\n        elif a[i] == a[i - 1] + 1:\n            a[i] += 1\n    return 'NO' if a[i] < n else 'YES' + ''.join(map(str, a[i - 1:i + 1]))\n\nassert(solution('''26 6''') == 'YES'\nassert(solution('''8 3''') == 'NO'\nassert(solution('''1 1''') == 'YES'\nassert(solution('''9 4''') == 'NO')\nassert(solution('''2 2''') == 'YES'\nassert(solution('''2 1''') == 'YES'\nassert(solution('''10 4''') == 'NO')\nassert(solution('''7 7''') == 'YES'\nassert(solution('''7 2''') == 'NO')\nassert(solution('''8 2''') == 'YES'\nassert(solution('''8 3''') == 'NO')\nassert(solution('''8 4''') == 'YES'\nassert(solution('''8 5''') == 'YES'\nassert(solution('''8 6''') == 'NO')\nassert(solution('''7 1''') == 'YES'\nassert(solution('''7 3''') == 'NO')\nassert(solution('''7 4''') == 'YES'\nassert(solution('''7 5''') == 'YES'\nassert(solution('''7 6''') == 'NO')\nassert(solution('''8 1''') == 'YES'\nassert(solution('''8 3''') == 'NO')\nassert(solution('''8 4''') == 'YES'\nassert(solution('''8 5''') == 'YES'\nassert(solution('''8 6''') == 'NO')\nassert(solution('''7 2''') == 'YES'\nassert(solution('''7 3''') == 'NO')\nassert(solution('''7 4''') == 'YES'\nassert(solution('''7 5''') == 'YES'\nassert(solution('''7 6''') == 'NO')\nassert(solution('''8 2''') == 'YES'\nassert(solution('''8 3''') == 'NO')\nassert(solution('''8 4''') == 'YES'\nassert(solution('''8 5''') == 'YES'\nassert(solution('''8 6''') == 'NO')\nassert(solution('''7 1''') == 'YES'\nassert(solution('''7 3''') == 'NO')\nassert(solution('''7 4''') == 'YES'\nassert(solution('''7 5''') == 'YES'\nassert(solution('''7 6''') == 'NO')\nassert(solution('''8 1''') == 'YES'\nassert(solution('''8 3''') == 'NO')\nassert(solution('''8 4''') == 'YES'\nassert(solution('''8 5''') == 'YES'\nassert(solution('''8 6''') == 'NO')\nassert(solution('''7 2''') == 'YES'\nassert(solution('''7 3''') == 'NO')\nassert(solution('''7 4''') == 'YES'\nassert(solution('''7 5''') == 'YES'\nassert(solution('''7 6''') == 'NO')\nassert(solution('''8 2''') == 'YES'\nassert(solution('''8 3''') == 'NO')\nassert(solution('''8 4''') == 'YES'\nassert(solution('''8 5''') == 'YES'\nassert(solution('''8 6''') == 'NO')\nassert(solution('''7 1''') == 'YES'\nassert(solution('''7 3''') == 'NO')\nassert(solution('''7 4''') == 'YES'\nassert(solution('''7 5''') == 'YES'\nassert(solution('''7 6''') == 'NO')\nassert(solution('''8 1''') == 'YES'\nassert(solution('''8 3''') == 'NO')\nassert(solution('''8 4''') == 'YES'\nassert(solution('''8 5''') == 'YES'\nassert(solution('''8 6''') == 'NO')\nassert(solution('''7 2''') == 'YES'\nassert(solution('''7 3''') == 'NO')\nassert(solution('''7 4''') == 'YES'\nassert(solution('''7 5''') == 'YES'\nassert(solution('''7 6''') == 'NO')\nassert(solution('''8 2''') == 'YES'\nassert(solution('''8 3''') == 'NO')\nassert(solution('''8 4''') == 'YES'\nassert(solution('''8 5''') == 'YES'\nassert(solution('''8 6''') == 'NO')\nassert(solution('''7 1''') == 'YES'\nassert(solution('''7 3''') == 'NO')\nassert(solution('''7 4''') == 'YES'\nassert(solution('''7 5''') == 'YES'\nassert(solution('''7 6''') == 'NO')\nassert(solution('''8 1''') == 'YES",
        "num_ids": 1426
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [0 for i in range(k)]\n    days = 0\n    while n > 0:\n        for i in range(k):\n            if i == 0:\n                if n <= 2:\n                    a[i] = n\n                    n -= n\n                    break\n                else:\n                    a[i] = 1\n                    n -= 1\n            else:\n                if a[i-1] < 2:\n                    a[i] = a[i-1] + 1\n                    n -= 1\n                else:\n                    a[i] = 1\n        days += 1\n    print(\"YES\")\n    print(*a)",
        "num_ids": 166
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1:\n        raise ValueError()\n    if n <= k:\n        return \"NO\"\n    result = [n]\n    for _ in range(k - 1):\n        result.append(result[-1] + 1)\n        if result[-1] >= 2 * result[-2]:\n            result.append(result[-1] - result[-2])\n    return \"YES\\n\" + \"\\n\".join(str(i) for i in result)\n\n\nassert (solution(stdin) == \"YES\\n1 2 4 5 6 8\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"NO\\n\")\n\nassert (solution(stdin) == \"YES\\n1\\n\")\nassert (solution(stdin) == \"",
        "num_ids": 1426
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The following is a classic DP problem.\n    For any given n and k, it is possible to find a sequence of numbers which satisfies\n    the conditions, but for this, we need to find the best sequence so far.\n    We can create a boolean array of length k+1, where each element in the array is true if\n    its corresponding number has not been taken yet. Initially, the array is filled with\n    true elements, which means that the given conditions are met for at least one day.\n    In the next day, we fill the array with false elements. We can choose to take the\n    first number, then take the second number, take the third number, etc. If we choose\n    to take the first number, we should also take all the numbers that are greater than\n    the first one. If we choose to take the second number, we should also take all the\n    numbers that are greater than the second one, etc. If we choose to take the n-th\n    number, we should choose all the numbers that are greater than the n-th one, and\n    should not choose any of them. We take all the numbers that are greater than the n-th\n    one, because that number is going to be the next number we want to take in the next\n    day.\n\n    We can take any of the k numbers, but we need to choose the ones that are greater\n    than the k-th number. If the k-th number is greater than the number we choose, we\n    can choose a number that is either greater than the k-th number or the k-th number.\n    We can choose the next number with probability of k/n, and the rest with\n    (n-1)/n, where n is the size of the array.\n\n    Finally, we can take the k-th number with probability 1/(n-1).\n\n    Time - O(kn)\n    Space - O(kn)\n    '''\n    n, k = map(int, stdin.split())\n    best = [True]*(k+1)\n    for _ in range(n):\n        best = [False] + [best[i-1] or i > best[i] for i in range(1, k+1)]\n    if not best[k]:\n        return 'NO'\n    return 'YES\\n' +''.join(map(str, best[1:k+1]))\n\nprint(solution(input()))\n",
        "num_ids": 551
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    summ = n\n    solutions = [0 for i in range(k)]\n    for day in range(k):\n        summ += solutions[day]\n        solutions[day] = (summ - n) % 2\n    if summ > 2 * n:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, solutions))",
        "num_ids": 107
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n\n    n, r = int(tokens[0]), int(tokens[1])\n\n    projects = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    return str(solve(n, r, projects))\n\ndef",
        "num_ids": 80
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(map(int, stdin.split())))\n\ndef",
        "num_ids": 23
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_optimized(stdin))\n\ndef",
        "num_ids": 17
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    projects = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        projects.append((a, b))\n\n    rating = [0] * (r + 1)\n    for p in projects:\n        rating[p[1]] += p[0]\n        rating[p[1] - p[0]] -= p[0]\n\n    size = 0\n    for i in range(r + 1):\n        if rating[i] >= 0:\n            size = max(size, 1 + sum(rating[i + 1:]))\n\n    return str(size)\n",
        "num_ids": 168
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This method reads input data from stdin and passes the data to the solution method, which should return a string containing the result, calling the built-in `print` function with that string.\n    \"\"\"\n    pass\n\n@check50.check()\ndef",
        "num_ids": 60
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_dp(stdin))\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(lambda x: list(map(int, x.split())), stdin.readlines()[1:]))\n    f = [0]\n    for i in range(n):\n        f.append(f[-1] + a[i][1] - a[i][0] + 1)\n    r1 = 0\n    f1 = 0\n    for i in range(n + 1):\n        if f1 + a[i][0] - 1 >= r:\n            r1 += f[i]\n        else:\n            f1 += a[i][1] - a[i][0] + 1\n    return str(max(r1, f1))\n",
        "num_ids": 178
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n",
        "num_ids": 8
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split(' '))\n\n    def get_min_and_max_for_project(project: list) -> tuple:\n        a, b = project\n        return (a, a + b)\n\n    def is_valid(rating: int) -> bool:\n        return rating >= 0\n\n    def can_skip(rating: int, value: int) -> bool:\n        return is_valid(rating + value)\n\n    def can_skip_all_projects(rating: int, value: int) -> bool:\n        return is_valid(rating + value) and is_valid(rating)\n\n    projects = []\n    for _ in range(n):\n        project = list(map(int, stdin.strip().split(' ')))\n        projects.append(get_min_and_max_for_project(project))\n\n    max_size = 0\n    cur_rating = r\n\n    for i in range(n):\n        max_size = max(max_size, projects[i][1])\n\n        while True:\n            cur_rating += projects[i][0]\n            if can_skip_all_projects(cur_rating, projects[i][0]):\n                cur_rating += projects[i][0]\n                projects[i][1] = cur_rating\n                break\n            cur_rating -= projects[i][0]\n            if can_skip_all_projects(cur_rating, projects[i][0]):\n                cur_rating += projects[i][0]\n                projects[i][1] = cur_rating\n                break\n\n    return str(max_size)\n\n\ndef",
        "num_ids": 380
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = []\n    for _ in range(n):\n        a, b = list(map(int, stdin.split()))\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0])\n\n    def profit(a, b):\n        return (a - r) * b + (b - r) * a\n\n    s = 0\n    ps = [profit(a, b) for a, b in projects]\n\n    for i in range(n):\n        s += max(ps[i] - s, 0)\n\n    return s\n",
        "num_ids": 154
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef",
        "num_ids": 8
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    for row in range(n):\n        for col in range(n):\n            if not is_palindromic(row, col, matrix):\n                return \"NO\"\n    return \"YES\"\n\ndef",
        "num_ids": 90
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1:].split()]\n    if len(a)!= n * n:\n        return \"NO\"\n    \n    a = [x for x in a if x!= a[x]]\n    if len(a) == 0:\n        return \"NO\"\n    \n    a = [[a[i * n + j] for j in range(n)] for i in range(n)]\n    return '\\n'.join([' '.join(map(str, a[i])) for i in range(n)])\n\"\"\"",
        "num_ids": 147
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return 'YES' if is_palindromic(matrix) else 'NO'\n\ndef",
        "num_ids": 64
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n### Testcases\n\n## Standard Tests\n## The tests will be run in alphabetical order.",
        "num_ids": 25
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    matrix = list()\n    rows, columns = map(int, stdin.split())\n\n    for _ in range(rows):\n        matrix.append(list(map(int, stdin.split())))\n\n    # result = None\n    for row in range(rows):\n        for column in range(columns):\n            current_element = matrix[row][column]\n            is_palindrome = True\n            for i in range(1, rows):\n                # print(f'row:{row}, i:{i}')\n                # print(matrix[row][column:column + i + 1])\n                if current_element!= matrix[row][column + i]:\n                    is_palindrome = False\n                    break\n\n            for j in range(1, columns):\n                # print(f'column:{column}, j:{j}')\n                # print(matrix[row + j][column])\n                if current_element!= matrix[row + j][column]:\n                    is_palindrome = False\n                    break\n\n            if is_palindrome:\n                return 'YES'\n\n    return 'NO'\n",
        "num_ids": 260
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The idea is to reverse the order of rows and columns and check for palindromic array.\n    \"\"\"\n    n = int(stdin.readline())\n    if n == 0:\n        return \"NO\"\n    a = list(map(int, stdin.readline().split()))\n    if sum(a) % n!= 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    a = list(map(lambda x: x % n, a))\n    if sum(a) % 2!= 0:\n        return \"NO\"\n    a = list(map(lambda x: x // n, a))\n    a = list(zip(*a[::-1]))\n    for row in a:\n        if len(set(row))!= len(row):\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))",
        "num_ids": 216
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"",
        "num_ids": 6
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    b = [0] * n\n    total = 0\n    for i in range(n):\n        if a[i] < 0:\n            return \"NO\"\n        total += a[i]\n        if total >= r:\n            return \"YES\"\n        if i < n - 1 and a[i] == a[i + 1]:\n            b[i] = -1\n        else:\n            b[i] = 1\n    return \"NO\"\n",
        "num_ids": 139
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/polycarp-is-a-very-famous-freelancer\"\"\"\n    pass\n",
        "num_ids": 36
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if r <= 0:\n        return \"NO\"\n\n    ratings = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        ratings.append((a, b))\n\n    ratings = sorted(ratings, key=lambda x: x[0])\n    previous_rating = ratings[0][0]\n    current_rating = previous_rating + r\n    for i in range(1, n):\n        if ratings[i][0] < current_rating:\n            return \"NO\"\n\n    return \"YES\"",
        "num_ids": 149
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ntry:\n    assert (lambda: solution('''1 1\n1 1\n1 1\n-1 -1\n1 1\n2 1\n1 -1\n1 -1\n1 1\n-1 1\n1 1\n1 1\n1 1\n1 1\n-1 1\n1 -1\n2 1\n-1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n-1 1\n1 -1\n2 1\n-1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n-1 1\n1 -1\n2 1\n-1 1\n2 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1",
        "num_ids": 1461
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Example solution for \"Polycarp rating order\"\n    \"\"\"\n    n, r = [int(x) for x in stdin.split()]\n\n    # a_i: rating required\n    # b_i: rating change\n    # i: index\n    ratings = [int(x) for x in stdin.split()]\n\n    # ratings[0] is rating required\n    # ratings[1] is rating change\n    # ratings[2] is index\n    ratings.sort(key=lambda x: x[2])\n\n    # print(ratings)\n\n    for i in range(0, len(ratings)):\n        print(ratings[i][2])\n        if ratings[i][1] < 0:\n            break\n        ratings[i][1] = abs(ratings[i][1])\n\n    # print(ratings)\n\n    if n == 1:\n        if ratings[0][1] < 0:\n            return 'NO'\n        else:\n            return 'YES'\n\n    for i in range(0, len(ratings)):\n        # print(ratings[i][2])\n        if ratings[i][1] > r:\n            return 'NO'\n\n    return 'YES'\n",
        "num_ids": 289
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number, rating = map(int, stdin.split(' '))\n    projects = []\n    for _ in range(number):\n        project = tuple(map(int, stdin.split(' ')))\n        projects.append(project)\n    projects.sort(key=lambda x: x[0])\n    print(\"YES\" if rating >= 0 else \"NO\")\n    return 0\n\n\ndef",
        "num_ids": 92
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, d = int(lines[0].split()[0]), int(lines[0].split()[1]), int(lines[0].split()[2])\n    platforms = [int(x) for x in lines[1].split()]\n    position = 0\n    jumps = []\n    for i in range(m):\n        jumps.append([0] * (n + 1))\n        jumps[i][position] = platforms[i]\n        position += platforms[i]\n    if position < n + 1:\n        print('NO')\n        return\n    while position > 1:\n        for i in range(1, m + 1):\n            if position < n + 1 and jumps[i - 1][position] > 0:\n                jumps[i - 1][position] -= 1\n                position += 1\n    print('YES')\n    print(' '.join([str(x) for x in jumps[0]]))\n\nsolution(stdin.read())",
        "num_ids": 239
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    \n    # Initialize the array as all zeros, the first element is always zero\n    a = [0] * n\n    \n    for i in range(m):\n        # If the first element of the array is zero, then the next element in the array is a\n        # platform to jump to\n        if a[0] == 0:\n            a[0] = i + 1\n    \n    # Since the river is infinite, we start at 0 and jump to the position of the first platform\n    i = 0\n    \n    # Iterate over the array starting from the second element\n    for j in range(1, n):\n        # If the current element is equal to zero, we jump to a position corresponding to the first platform\n        if a[j] == 0:\n            a[j] = i\n            i += 1\n    \n    # Reverse the array because we start at 0 and jump to the position of the first platform\n    # and we end at the position of the last platform\n    a.reverse()\n    \n    # Iterate backwards over the array starting from the last element\n    for k in range(n - 1, 0, -1):\n        # If the element at the current index is equal to the index of the next element,\n        # then we jump to the position of the next platform\n        if k == n - 1:\n            if a[k] == (i + d - 1):\n                a[k] = i\n        elif a[k] == a[k + 1]:\n            a[k] = i\n            i += 1\n    \n    # Reverse the array again to match the output\n    a.reverse()\n    \n    return 'YES' if a == c else 'NO'\n\nprint(solution(input()))",
        "num_ids": 438
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    plats = list(map(int, stdin.readline().split()))\n    plats = [0] + plats + [n + 1]\n\n    dp = [False] * (n + 2)\n    dp[0] = True\n    for i in range(1, n + 2):\n        for j in range(1, m + 1):\n            if i + plats[j] <= n + 1:\n                dp[i] = dp[i] or dp[i + plats[j]]\n    return 'YES' if dp[n + 1] else 'NO'\n\nassert(solution('7 3 2') == 'YES')\nassert(solution('10 1 11') == 'YES')\nassert(solution('10 1 5') == 'YES')\nassert(solution('10 1 7') == 'NO')\nassert(solution('5 5 5') == 'NO')\nassert(solution('5 5 4') == 'YES')\nassert(solution('1 1 3') == 'YES')\nassert(solution('1 1 1') == 'YES')\nassert(solution('1 1 2') == 'NO')\nassert(solution('1 1 10') == 'NO')\nassert(solution('1 1 4') == 'YES')\nassert(solution('1 1 5') == 'YES')\nassert(solution('1 1 6') == 'YES')\nassert(solution('1 1 7') == 'YES')\nassert(solution('1 1 8') == 'YES')\nassert(solution('1 1 9') == 'YES')\nassert(solution('1 1 10') == 'YES')\nassert(solution('1 1 12') == 'YES')\nassert(solution('1 1 4') == 'YES')\nassert(solution('1 1 7') == 'YES')\nassert(solution('1 1 8') == 'YES')\nassert(solution('1 1 9') == 'YES')\nassert(solution('1 1 10') == 'YES')\nassert(solution('1 1 11') == 'YES')\nassert(solution('1 1 12') == 'YES')\nassert(solution('1 1 13') == 'YES')\nassert(solution('1 1 14') == 'YES')\nassert(solution('1 1 15') == 'YES')\nassert(solution('1 1 16') == 'YES')\nassert(solution('1 1 17') == 'YES')\nassert(solution('1 1 18') == 'YES')\nassert(solution('1 1 19') == 'YES')\nassert(solution('1 1 20') == 'YES')\nassert(solution('1 1 22') == 'YES')\nassert(solution('1 1 13') == 'YES')\nassert(solution('1 1 14') == 'YES')\nassert(solution('1 1 15') == 'YES')\nassert(solution('1 1 16') == 'YES')\nassert(solution('1 1 17') == 'YES')\nassert(solution('1 1 18') == 'YES')\nassert(solution('1 1 19') == 'YES')\nassert(solution('1 1 20') == 'YES')\nassert(solution('1 1 21') == 'YES')\nassert(solution('1 1 22') == 'YES')\nassert(solution('1 1 23') == 'YES')\nassert(solution('1 1 24') == 'YES')\nassert(solution('1 1 25') == 'YES')\nassert(solution('1 1 26') == 'YES')\nassert(solution('1 1 27') == 'YES')\nassert(solution('1 1 28') == 'YES')\nassert(solution('1 1 29') == 'YES')\nassert(solution('1 1 30') == 'YES')\nassert(solution('1 1 31') == 'YES')\nassert(solution('1 1 32') == 'YES')\nassert(solution('1 1 33') == '",
        "num_ids": 929
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\nn, m, d = map(int, stdin.split())\ncells = map(int, stdin.split())\nfor i in range(m):\n    a.append(0)\ndef",
        "num_ids": 49
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result",
        "num_ids": 7
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys\n\nn, m, d, *c = map(int, sys.stdin.readline().split())\na = [0] * n\n\nfor _ in range(m):\n    c = [int(sys.stdin.readline()) for _ in range(n)]\n    for i in range(n - 1):\n        if (a[i] == 0) and (c[i] <= c[i + 1]):\n            a[i] = i + 1",
        "num_ids": 117
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nn, m, d = [int(x) for x in stdin.split()]\nl = [int(x) for x in stdin.split()]\n\nd = min(n - 1, d)\ni = 0\nflag = True\nfor _ in range(m):\n    while i < n and l[i] + i <= n + d:\n        i += l[i]\n    if i == n:\n        flag = False\n        break\n    i -= 1",
        "num_ids": 119
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    n, m, d = int(tokens[0]), int(tokens[1]), int(tokens[2])\n    c = list(map(int, stdin.split()))\n    p = [0] * m\n    for i in range(m):\n        p[i] = c[i]\n    p.sort()\n    a = [0] * n\n    p0 = p[0]\n    if p0 > d:\n        print(\"NO\")\n        return \"\"\n    if p0 == n:\n        print(\"YES\")\n        print(*a)\n        return \"\"\n    for i in range(1, m):\n        p[i] += p[i - 1]\n    for i in range(n):\n        if i < p[0]:\n            a[i] = 1\n        else:\n            a[i] = p[0]\n    for i in range(1, m):\n        for j in range(p[i], p[i] + p[i - 1]):\n            if a[j] == 0:\n                a[j] = i + 1\n    print(\"YES\")\n    print(*a)\n",
        "num_ids": 286
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    i = 1\n    a = []\n    while i < n + 1:\n        if i in c:\n            i += 1\n            a.append(i)\n        else:\n            a.append(0)\n            i += d\n    print('YES' if (sum(c[0:m]) <= n) else 'NO')\n    print(*a)\n",
        "num_ids": 126
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('bbaba', 'bb') == 3\nassert solution('baaba', 'ab') == 2\nassert solution('abcde', 'abcde') == 0\nassert solution('asdfasdf', 'fasd') == 3\nassert solution('bbbbbb', 'bbbbbb') == 0\n\nassert solution('a', 'a') == 0\nassert solution('aa', 'aa') == 0\nassert solution('abc', 'abc') == 0\nassert solution('bbb', 'bbb') == 0\nassert solution('bbbb', 'bbbb') == 0\nassert solution('abc', 'c') == 1\nassert solution('a', 'b') == 1\nassert solution('abc', 'bc') == 1\nassert solution('abc', 'c') == 1\nassert solution('abc', 'c') == 1\nassert solution('abc', 'd') == 2\nassert solution('abcd', 'abcd') == 0\nassert solution('abcd', 'adc') == 1\nassert solution('abcd', 'bdc') == 1\nassert solution('abcd', 'cda') == 2\nassert solution('abc', 'cd') == 1\nassert solution('abcd', 'cd') == 1\nassert solution('abcd', 'cd') == 1\nassert solution('abcd', 'cde') == 2\nassert solution('abcd', 'de') == 2\nassert solution('abcd', 'de') == 2\nassert solution('abcd', 'de') == 2\nassert solution('abcde', 'abcde') == 0\nassert solution('abcde', 'bcd') == 1\nassert solution('abcde', 'de') == 2\nassert solution('abcde', 'cde') == 2\nassert solution('abcde', 'de') == 2\nassert solution('abcde', 'de') == 2\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'b') == 1\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e') == 3\nassert solution('abcde', 'e",
        "num_ids": 1534
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    for i in range(len(s)):\n        for j in range(len(t), 1, -1):\n            if s[i:j] == t:\n                return j - i\n    return 0\n\n\nassert solution(stdin) == 3\nassert solution(stdin) == 0\n",
        "num_ids": 88
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def suffix_array(s):\n        n = len(s)\n        n_prime = n\n        p = 1\n        for i in range(n - 1, 0, -1):\n            if s[i] == s[i - 1]:\n                p += 1\n            else:\n                break\n        n_prime = n - p\n\n        s = s + s\n        sa = [0] * (n_prime + n)\n        for i in range(n_prime, n_prime + n):\n            sa[i] = s[i - n_prime]\n        return sa\n\n    sa_s = suffix_array(stdin)\n    sa_t = suffix_array(stdin[::-1])\n    l = min(len(stdin), len(stdin[::-1]))\n    m = -1\n    for i in range(l):\n        if sa_s[i] == sa_t[i]:\n            m = max(m, i)\n    return m\n",
        "num_ids": 235
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return str(len(s) - len(t))\n\n\nassert solution('''bbaba''') == '3'\nassert solution('''baaba''') == '2'\nassert solution('''abcde''') == '0'\nassert solution('''asdfasdf''') == '3'\nassert solution('''bbaba''') == '3'\nassert solution('''asdfasdf''') == '3'\nassert solution(''''') == '0'\nassert solution('''fasd''') == '3'\nassert solution('''fasdf''') == '3'\nassert solution('''baaba''') == '2'\nassert solution('''baab''') == '2'\nassert solution('''bbba''') == '2'\nassert solution('''bbb''') == '2'\nassert solution('''bbbbbbaaab''') == '3'\nassert solution('''abababa''') == '3'\nassert solution('''bbbab''') == '3'\nassert solution('''bbbab''') == '3'\nassert solution('''babab''') == '2'\nassert solution('''babab''') == '2'\nassert solution('''babab'') == '2'\nassert solution('''bbbbbabab''') == '3'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution('''babab'') == '2'\nassert solution(''",
        "num_ids": 1532
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    def possible(length: int) -> bool:\n        prefix = s[:length]\n        return t == prefix[::-1]\n\n    def helper(length: int) -> int:\n        if possible(length):\n            return length\n\n        if length == 0:\n            return 0\n\n        return max(helper(length - 1), helper(length - 2) + 1, helper(length - 3))\n\n    return str(helper(len(s)))\n\n\nassert solution('bbaba', 'bb') == '3'\nassert solution('baaba', 'ab') == '2'\nassert solution('abcde', 'abcde') == '0'\nassert solution('asdfasdf', 'fasd') == '3'\nassert solution('abcdefg', 'ab') == '3'\nassert solution('abcdefgh', 'ab') == '3'\nassert solution('aabbbccc', 'cbbbccc') == '3'\nassert solution('bbababab', 'bbababab') == '0'\n",
        "num_ids": 268
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('bbaba', 'bb') == 3\nassert solution('baaba', 'ab') == 2\nassert solution('abcde', 'abcde') == 0\nassert solution('asdfasdf', 'fasd') == 3\nassert solution('', '') == 0",
        "num_ids": 66
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n\n    count = 0\n    for l in range(len(s)):\n        if s[l] in t:\n            continue\n        for r in range(l + 1, len(s) + 1):\n            if s[l:r] == t:\n                count = max(count, r - l)\n\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    n = len(s)\n    if n < len(t):\n        return 0\n    if t == s:\n        return n\n    r = 0\n    while r < n:\n        if t in s[r:]:\n            return r\n        else:\n            r += 1\n    return 0\n",
        "num_ids": 86
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    s_len = len(s)\n    t_len = len(t)\n\n    s_p = [0] * (s_len + 1)\n    t_p = [0] * (s_len + 1)\n\n    for i in range(1, s_len + 1):\n        for j in range(i - 1, -1, -1):\n            if s[j] == s[i]:\n                s_p[i] = j + 1\n                break\n    for i in range(1, t_len + 1):\n        for j in range(i - 1, -1, -1):\n            if t[j] == t[i]:\n                t_p[i] = j + 1\n                break\n\n    res = 0\n    for i in range(1, s_len + 1):\n        for j in range(1, s_len + 1):\n            if s_p[i] + t_p[j] - 1 > res:\n                res = s_p[i] + t_p[j] - 1\n\n    return res\n",
        "num_ids": 268
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # return \"\"\n    stdin = stdin.strip()\n    stdin = stdin.lower()\n    n = len(stdin)\n    memo = [[0 for _ in range(n)] for _ in range(n)]\n    for l in range(1, n):\n        for i in range(n - l):\n            j = i + l\n            if stdin[i] == stdin[j]:\n                memo[i][j] = memo[i + 1][j - 1] + 2\n            else:\n                memo[i][j] = max(memo[i][j - 1], memo[i + 1][j])\n\n    return memo[0][-1]\n\n\ndef",
        "num_ids": 166
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    return str(int(x)+1) + \" \" + str(int(x)+2)\n\n\"\"\"\n\nprint(solution(input()))",
        "num_ids": 45
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return str(n // 1 % 10) +'' + str(n // 10 % 10)",
        "num_ids": 31
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = float(stdin)\n    a = math.floor(num)\n    b = int(math.floor(num))\n    \n    return str(a) +'' + str(b)\n\n\ndef",
        "num_ids": 50
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the next closest day of the week\n\n    >>> solution(\"4.024922\")\n    '10 3'\n    \"\"\"\n    from math import floor\n    x = float(stdin.strip())\n    d = x % 1\n    c = floor(x)\n    if d == 0:\n        return f\"{c+1} {c+2}\"\n    return f\"{c+2} {c+1}\"\n",
        "num_ids": 105
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, solve(float(stdin))))\n\ndef",
        "num_ids": 21
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The only known prime factor for 10^6 is 5\n    \"\"\"\n    # n = int(stdin.strip())\n    # factor = 2\n    # while factor * factor <= n:\n    #     if n % factor:\n    #         factor += 1\n    #     else:\n    #         n //= factor\n    # if n > 1:\n    #     return str(n) + \" \" + str(n)\n    # return \"1\"\n    n = float(stdin.strip())\n    factor = 5\n    while n >= factor:\n        if n % factor:\n            factor += 2\n        else:\n            n //= factor\n    if n > 1:\n        return str(int(n)) + \" \" + str(int(n))\n    return \"1 1\"",
        "num_ids": 187
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin.strip())\n    c0, c1 = 1, 1\n    while abs(c0 - c1) > 10 ** -6:\n        c0, c1 = c1, c1 + (x * c1) / ((c0 + c1) * (1 + c1))\n    return f\"{int(c1)}{int(round(x - c1))}\"",
        "num_ids": 96
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int(x - a)\n    return f\"{a} {b}\"\n",
        "num_ids": 39
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, [3, 2]))",
        "num_ids": 17
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Uses the fact that f(x) = x - f(x-1)\n    \"\"\"\n    x = float(stdin)\n    if x < 1.0:\n        return str(0)\n    if x < 2.0:\n        return str(1)\n    if x < 3.0:\n        return str(2)\n    if x < 4.0:\n        return str(3)\n    if x < 5.0:\n        return str(4)\n    if x < 6.0:\n        return str(5)\n    if x < 7.0:\n        return str(6)\n    if x < 8.0:\n        return str(7)\n    if x < 9.0:\n        return str(8)\n    if x < 10.0:\n        return str(9)\n    \n    i = 10\n    while i > 1:\n        first = int((x - i) * 10)\n        second = int((x - (i - 1)) * 10)\n        \n        if first == second:\n            return str(i - 1) +'' + str(i)\n        i -= 1\n    return \"-\"\n\n\nsolution(input())\n",
        "num_ids": 281
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_edges(n: int, d: int, k: int) -> Tuple[int, int]:\n        nodes = range(1, n + 1)\n        edges = []\n        for node in nodes:\n            for other_node in nodes:\n                if other_node!= node and other_node!= node - 1:\n                    edges.append((node, other_node))\n        for edge in edges:\n            if edge[0] in nodes[:k] and edge[1] in nodes[:k]:\n                continue\n            if edge[0] in nodes[:d] and edge[1] in nodes[:d]:\n                continue\n            if edge[0] in nodes[d:] and edge[1] in nodes[d:]:\n                continue\n            if edge[0] in nodes[d:] or edge[1] in nodes[d:]:\n                continue\n            if edge[0] in nodes[:d] and edge[1] in nodes[d:]:\n                continue\n            if edge[0] in nodes[:k] and edge[1] in nodes[:k]:\n                continue\n            return edge[0], edge[1]\n        raise ValueError\n\n    n, d, k = [int(x) for x in stdin.strip().split()]\n    while True:\n        try:\n            edge = get_edges(n, d, k)\n        except ValueError:\n            break\n        print(*edge)\n    print(\"NO\")\n    return \"YES\"\n",
        "num_ids": 354
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.strip().split()]\n\n    def tree_with_diameter(n, d, k):\n        m = n - 1\n        tree = set()\n        tree_dict = {}\n        for i in range(m):\n            if i not in tree:\n                tree.add(i)\n                tree_dict[i] = set()\n                tree_dict[i].add(i)\n                tree_dict[i].add(i + 1)\n                tree_dict[i + 1].add(i)\n                tree_dict[i + 1].add(i + 1)\n                while len(tree_dict[i]) < k:\n                    for j in tree_dict[i]:\n                        for k in tree_dict[j]:\n                            if k not in tree_dict[i]:\n                                tree_dict[i].add(k)\n                    if len(tree_dict[i]) == k:\n                        break\n        for i in tree:\n            tree_dict[i] = list(tree_dict[i])\n        for i in tree_dict:\n            tree_dict[i].sort()\n        tree_dict = {k: v for k, v in sorted(tree_dict.items(), key=lambda x: x[0])}\n        diameters = [0] * n\n        for i in tree_dict:\n            for j in tree_dict[i]:\n                diameters[j - 1] = max(diameters[j - 1], diameters[i - 1] + 1)\n        return diameters[n - 1]\n    return \"NO\" if tree_with_diameter(n, d, k) > n - 1 else \"YES\"\n",
        "num_ids": 406
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    \n    if d < 4:\n        print(\"NO\")\n    \n    tree = [[] for _ in range(n)]\n    \n    def is_tree(start: int) -> bool:\n        if k == 0:\n            return True\n        \n        if len(tree[start]) > d:\n            return False\n        \n        for i in tree[start]:\n            if is_tree(i):\n                return True\n        \n        return False\n    \n    for _ in range(d - 1):\n        a, b = map(int, stdin.split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n        \n    ans = []\n    \n    for i in range(n - 1):\n        if not is_tree(i):\n            ans.append(i + 1)\n            \n    if len(ans) > 0:\n        print(\"YES\")\n        \n        for a in ans:\n            print(a, end=' ')\n    else:\n        print(\"NO\")\n",
        "num_ids": 266
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k > (4 * 10**5) or d > (4 * 10**5):\n        return 'NO'\n    if n <= d:\n        return 'NO'\n    if n == d:\n        return 'YES'\n    if n - d < k:\n        return 'NO'\n    if d * (n - d) < k:\n        return 'NO'\n    if (n - d) % k!= 0:\n        return 'NO'\n    if (n - d) % (k * 2)!= 0:\n        return 'NO'\n    tree = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        tree[i].append(i)\n    for _ in range(d - 1):\n        u, v = map(int, stdin.split())\n        if u in tree[v]:\n            return 'NO'\n        tree[u].append(v)\n        tree[v].append(u)\n    visited = [False] * (n + 1)\n    visited[1] = True\n    degree = [0] * (n + 1)\n    for u in tree[1]:\n        degree[u] += 1\n    queue = []\n    for u in tree[1]:\n        if degree[u] < k:\n            queue.append(u)\n    while queue:\n        u = queue.pop(0)\n        visited[u] = True\n        for v in tree[u]:\n            if visited[v] == False:\n                queue.append(v)\n                degree[v] += 1\n            if degree[v] < k:\n                return 'NO'\n    for i in range(2, n + 1):\n        if visited[i]:\n            continue\n        queue = [i]\n        visited[i] = True\n        for _ in range(k - 1):\n            u = queue.pop(0)\n            for v in tree[u]:\n                if visited[v]:\n                    continue\n                queue.append(v)\n                visited[v] = True\n    return 'YES'\n",
        "num_ids": 510
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n + 1)]\n    tree_edges = 0\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n        tree_edges += 1\n        if len(graph[u]) >= d and len(graph[v]) >= d:\n            break\n    else:\n        return \"NO\"\n\n    if len(graph[u]) < d or len(graph[v]) < d:\n        return \"NO\"\n\n    def dfs(tree_edges, vertices, degree, distance, vertex):\n        nonlocal graph\n        nonlocal n\n        nonlocal k\n\n        for vertex2 in graph[vertex]:\n            if vertex2 == v:\n                continue\n            graph[vertex].remove(vertex2)\n            graph[vertex2].remove(vertex)\n            degree -= 1\n            if distance + 1 == d:\n                if degree <= k:\n                    graph[vertex].add(vertex2)\n                    graph[vertex2].add(vertex)\n                    return True\n                else:\n                    graph[vertex].add(vertex2)\n                    graph[vertex2].add(vertex)\n                    return False\n\n            if dfs(tree_edges, vertices, degree, distance + 1, vertex2):\n                return True\n            graph[vertex].add(vertex2)\n            graph[vertex2].add(vertex)\n            degree += 1\n        return False\n\n    vertices = set()\n    for vertex in graph:\n        vertices.update(vertex)\n\n    for vertex in vertices:\n        degree = len(graph[vertex])\n        if degree > k:\n            return \"NO\"\n        dfs(tree_edges, vertices, degree, 1, vertex)\n    return \"YES\"\n",
        "num_ids": 477
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    print(check_tree(n, d, k))\n\n\ndef",
        "num_ids": 37
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = (int(x) for x in stdin.split())\n    if n - 1 <= d and d <= k:\n        return 'NO'\n    return 'YES\\n' + '\\n'.join(str(i) +'' + str(j) for i in range(1, n) for j in range(i, n))\n\nprint(solution(input()))\n",
        "num_ids": 95
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if n - 1 <= d * k:\n        return \"NO\"\n    return \"YES\\n\" + '\\n'.join(str(x) + \" \" + str(y) for x, y in [(x, y) for x in range(1, n) for y in range(x + 1, n + 1)])",
        "num_ids": 99
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.strip().split()]\n    if not ((1 <= n <= 4 * (10 ** 5)) and (1 <= d <= n) and (1 <= k <= n - 1)):\n        return \"NO\"\n    return \"YES\\n{}\\n{}\\n{}\\n{}\\n{}\\n{}\\n{}\\n{}\\n{}\".format(\n        n - 1, *list(range(1, n))[::-1], *list(range(1, n)), *list(range(1, n))\n    )\n",
        "num_ids": 143
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    n = a + b\n    s = ['0'] * n\n    for i in range(x):\n        s[i] = '1'\n        s[i + a] = '0'\n    return ''.join(s)\n",
        "num_ids": 79
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    ans = [\"1\" if i <= x else \"0\" for i in range(a + b)]\n    return \"\".join(ans)",
        "num_ids": 55
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, b = map(int, stdin.split())\n    nums = [0] * n\n    for _ in range(x):\n        nums[int(stdin) - 1] = 1\n\n    s = ''\n    for num in nums:\n        s += '0' * num + '1'\n\n    return s",
        "num_ids": 81
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a, b, x = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    s = ''\n    s += '0' * a\n    s += '1' * b\n    s += '0' * x\n    s += '1' * (a + b - x)\n    return s",
        "num_ids": 92
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(x) for x in stdin.split(\" \"))\n    n = a + b\n    res = \"\"\n    for i in range(n):\n        if i < a:\n            res += \"0\"\n        elif i < a + b:\n            res += \"1\"\n        else:\n            res += \"0\"\n    return res\n\n\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"",
        "num_ids": 130
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    b = a - b\n    t = [0] * (a + b)\n    for i in range(x):\n        t[i] = 1\n    return ''.join([0 if i in t else 1 for i in range(a + b)])",
        "num_ids": 83
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    ans = ['0'] * a\n    for i in range(b):\n        ans.insert(x, '1')\n        x += 1\n    return ''.join(ans)",
        "num_ids": 60
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    res = ''\n    for i in range(a + b):\n        if i < a:\n            res += '0'\n        elif i < a + b - x:\n            res += '1'\n        else:\n            res += '0'\n    return res",
        "num_ids": 81
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a > x:\n        return '1' * b + '0' * (a - x)\n    elif b > x:\n        return '0' * a + '1' * (b - x)\n    else:\n        return '1' * a + '0' * b",
        "num_ids": 86
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    t = stdin[2]\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if s == t:\n            return \"YES\"\n        return \"NO\"\n    if s == t:\n        return \"NO\"\n\n    k = int(math.ceil(n / 3))\n    l = (n % 3) + 1\n    res = [\"a\"] * n\n    i = 0\n    j = 0\n    while i < n:\n        if j < l:\n            res[i] = s[j]\n            i += 1\n            j += 1\n        else:\n            res[i] = t[j]\n            i += 1\n            j += 1\n\n    return \"YES\\n\" + \"\".join(res)\n\n\nassert solution(\"2\") == \"YES\\naa\"\nassert solution(\"2\") == \"YES\\naa\"\nassert solution(\"3\") == \"YES\\ncbab\"\nassert solution(\"3\") == \"YES\\ncbab\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"1000\") == \"NO\"\nassert solution(\"1000\") == \"NO\"\nassert solution(\"100000\") == \"NO\"\nassert solution(\"100000\") == \"NO\"\nassert solution(\"100001\") == \"NO\"\nassert solution(\"100001\") == \"NO\"\nassert solution(\"100001\") == \"NO\"\nassert solution(\"1000010000\") == \"NO\"\nassert solution(\"1000010000\") == \"NO\"\nassert solution(\"1000010000\") == \"NO\"\nassert solution(\"100010000\") == \"YES\\ncacbacbab\"\nassert solution(\"100010000\") == \"YES\\ncacbacbab\"\nassert solution(\"100010000\") == \"YES\\ncacbacbab\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") == \"NO\"\nassert solution(\"100010001\") ==",
        "num_ids": 1536
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    \n    result = []\n    \n    for _ in range(3):\n        result.append(s)\n        result.append(t)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(t)\n    \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n    \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n    \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n    \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n        \n    for i in range(n):\n        result.append(s)\n        result.append(s)\n    \n    return 'YES\\n' + ''.join(result)\n\ndef",
        "num_ids": 596
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s) + len(t) < 3 * n:\n        print(\"NO\")\n        return \"\"\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n        res += \"b\"\n        res += \"c\"\n    if s in res and t in res:\n        print(\"NO\")\n        return \"\"\n    print(\"YES\")\n    print(res)\n    return res\n\n\nassert solution(StringIO(\"\"\"2\nab\nbc\n\"\"\")) == \"YES\\nacbbac\"\nassert solution(StringIO(\"\"\"3\naa\nbc\n\"\"\")) == \"YES\\ncacbacbab\"\nassert solution(StringIO(\"\"\"1\ncb\nac\n\"\"\")) == \"YES\\nabc\"\nassert solution(StringIO(\"\"\"10\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "num_ids": 1536
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    d = set(s)\n    if len(t)!= len(s) + n or d & {'a', 'b', 'c'}:\n        return 'NO'\n    result = ''\n    for i in range(n):\n        result += s[i] * 3\n        result += t[i]\n    return result\n\nassert solution('''2\nab\nbc''') == 'YES'\nassert solution('''3\naa\nbc\n''') == 'YES'\nassert solution('''1\ncb\nac''') == 'YES'\nassert solution('''2\na\na\n''') == 'YES'\nassert solution('''3\na\na\n''') == 'YES'\nassert solution('''2\nab\nac\n''') == 'NO'\nassert solution('''3\naa\nac\n''') == 'NO'\nassert solution('''3\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na\nb\nc\n''') == 'NO'\nassert solution('''3\na\nb\nc\na\nb\nc\na\nb\nc\nb\nc\na",
        "num_ids": 1536
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 10**5:\n        return \"NO\"\n    s, t = stdin.splitlines()\n    if len(s)!= 2 or len(t)!= 2:\n        return \"NO\"\n    s = s.strip()\n    t = t.strip()\n    if len(s)!= 2 or len(t)!= 2:\n        return \"NO\"\n    s = s.lower()\n    t = t.lower()\n    if s.count(\"a\")!= s.count(\"b\") or s.count(\"a\")!= s.count(\"c\"):\n        return \"NO\"\n    if t.count(\"a\")!= t.count(\"b\") or t.count(\"a\")!= t.count(\"c\"):\n        return \"NO\"\n    if s.find(\"ab\")!= -1 or s.find(\"ba\")!= -1:\n        return \"NO\"\n    if t.find(\"ab\")!= -1 or t.find(\"ba\")!= -1:\n        return \"NO\"\n    if s.find(\"ca\")!= -1 or s.find(\"cb\")!= -1 or s.find(\"cc\")!= -1:\n        return \"NO\"\n    if t.find(\"ca\")!= -1 or t.find(\"cb\")!= -1 or t.find(\"cc\")!= -1:\n        return \"NO\"\n    return \"YES\"",
        "num_ids": 344
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    res = \"\"\n    for i in range(n):\n        if s[i]!= t[i]:\n            continue\n        if len(res) > n:\n            break\n        res += s[i] * 3\n        if len(res) > n:\n            break\n    if len(res) < n:\n        return \"NO\"\n    return \"YES\" + res\n",
        "num_ids": 129
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[2]\n    t = stdin[3]\n    if n < 1 or n > 10:\n        print('NO')\n        return\n    elif len(s)!= 2 or len(t)!= 2:\n        print('NO')\n        return\n    elif n < (len(s) + len(t) + 3):\n        print('NO')\n        return\n    elif len(set(s).intersection(t)) > 0:\n        print('NO')\n        return\n    else:\n        res = s + t + s + t\n        print('YES')\n        print(res)\n    return\n\nsolution(input())\n",
        "num_ids": 167
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('''2\nab\nbc\n''') == 'YES\\nacbbac'\nassert solution('''3\naa\nbc\n''') == 'YES\\ncacbacbab'\nassert solution('''1\ncb\nac\n''') == 'YES\\ncbcacbcac'\nassert solution('''3\naa\nbc\n''') == 'YES\\nacbacbacb'\nassert solution('''4\na\na\na\na\n''') == 'YES\\na'\nassert solution('''3\nab\nab\nab\n''') == 'NO'\nassert solution('''3\nac\nac\nac\n''') == 'NO'\nassert solution('''4\nbc\nbc\nbc\nbc\n''') == 'YES\\nbcbcbcbcbc'\nassert solution('''3\nbc\nbc\nbc\n''') == 'YES\\nbcbcbcbcbc'\nassert solution('''3\na\na\na\n''') == 'YES\\naa'\nassert solution('''3\na\na\na\n''') == 'YES\\naa'\nassert solution('''4\na\na\na\na\n''') == 'YES\\naa'\nassert solution('''5\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\n",
        "num_ids": 1535
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s) + len(t)!= int(n) * 3:\n        return 'NO'\n    if len(s) == 0:\n        return t\n    if len(t) == 0:\n        return s\n    if len(s) == 1:\n        return t + t\n    if len(t) == 1:\n        return s + s\n    res = s[0] + t[0] + s[0] + t[0] + s[0] + t[0]\n    if len(s) > 1:\n        res += s[1] + t[0] + s[1] + t[0] + s[1] + t[0]\n    if len(t) > 1:\n        res += t[1] + s[0] + t[1] + s[0] + t[1] + s[0]\n    return res\n\nassert solution('''2\nab\nbc\n''') == 'YES\\ncacbacbab'\nassert solution('''3\naa\nbc\n''') == 'YES\\ncacbacbab'\nassert solution('''1\ncb\nac\n''') == 'YES\\nabc'\nassert solution('''3\naa\nbc\n''') == 'NO'\nassert solution('''1\ncb\nac\n''') == 'YES\\nabc'\nassert solution('''10\naaabbbbbbccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        "num_ids": 1536
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10 ** 5:\n        return \"NO\"\n    \n    s = stdin[:n]\n    t = stdin[n:]\n    if not (s.count('a') == s.count('b') == s.count('c') and t.count('a') == t.count('b') == t.count('c')):\n        return \"NO\"\n\n    res = \"\"\n    for i in range(n):\n        res += s[i] + t[i]\n        if i < n - 1:\n            res += s[i]\n    return \"YES\\n\" + res\n\nassert(solution(input()) == solution(input()))\n",
        "num_ids": 172
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    q.sort()\n    p = [None] * (n + 1)\n    i = 0\n    p[0] = 0\n    p[1] = q[0]\n    for i in range(2, n + 1):\n        p[i] = q[i - 1] - p[i - 1]\n    for i in p:\n        print(i, end=' ')\n    print()\n",
        "num_ids": 133
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(x) for x in stdin.split(\" \")]\n    ans = -1\n    for x in permutations(q):\n        if x[0]!= 0:\n            ans = x\n            break\n    return \" \".join([str(x) for x in ans])",
        "num_ids": 79
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    P = [i for i in range(1, n + 1)]\n    \n    permutations = []\n    for i in range(n - 1):\n        j = q[i] - 1\n        if P[j]!= q[i]:\n            P[j], P[i] = P[i], P[j]\n            permutations.append(P[:])\n            P[j], P[i] = P[i], P[j]\n    \n    if permutations:\n        return''.join(map(str, permutations[0]))\n    else:\n        return '-1'\n\n\ndef",
        "num_ids": 171
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    print(*[p + 1 for p in q] if is_permutation(q, n) else -1)\n\n\ndef",
        "num_ids": 65
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the string that corresponds to the given permutation.\n    \"\"\"\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    return''.join(map(str, solution_01(n, q)))\n\ndef",
        "num_ids": 65
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10 ** 5:\n        return '-1'\n    q = [int(x) for x in stdin.split()]\n    if n - 1!= len(q):\n        return '-1'\n    if all(q[i] == i for i in range(n)):\n        return '1' * n\n    p = [0] * n\n    for i in range(n - 1):\n        p[q[i] - 1] = i + 1\n    return''.join(str(x) for x in p)\n\nassert solution('''3''') == '3 1 2'\nassert solution('''5''') == '1 2 3 4 5'\nassert solution('''4''') == '-1'\nassert solution('''-1''') == '-1'\nassert solution('''10''') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('''10000''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\nassert solution('''100000''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''100000''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''10000''') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('''100000''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''100000''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\nassert solution('''123456789''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35",
        "num_ids": 1575
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_perms = int(stdin)\n    if num_perms == 0:\n        return stdin\n    p = [int(i) for i in stdin.split()]\n    q = [int(i) for i in stdin.split()]\n    permutations = []\n    permutations.append(p)\n    for i in range(len(q) - 1):\n        p = []\n        for j in range(len(q) - i):\n            p.append(q[j + i] - q[i])\n        permutations.append(p)\n    permutations = permutations[::-1]\n    all_perms = []\n    for perm in permutations:\n        curr = perm[0]\n        all_perms.append(curr)\n        for i in range(1, len(perm)):\n            if perm[i] > curr:\n                curr = perm[i]\n        all_perms.append(curr)\n    all_perms = [str(i) for i in all_perms]\n    print(' '.join(all_perms))\n",
        "num_ids": 265
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    q = [int(x) for x in stdin[1].split()]\n    i = 0\n    for x in q:\n        i += 1\n        if x < 0:\n            return '-1'\n    n -= 1\n    q = [x - y for x, y in zip(q, q[1:])]\n    while n > 1:\n        if n % 2:\n            return''.join(str(x) for x in q)\n        n //= 2\n        q = [q[i] for i in range(n, len(q), 2)]\n    return''.join(str(x) for x in q)\n",
        "num_ids": 174
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    Q = list(map(int, stdin.readline().strip().split()))\n\n    _min = 0\n    _max = 0\n    for q in Q:\n        _min = max(_min, q)\n        _max += q\n\n    result = [-1] * N\n    _max = _max - _min\n    for q in Q:\n        result[q - _min] = _max\n\n    return \" \".join(map(str, result))\n\n\ndef",
        "num_ids": 125
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    q = [int(x) for x in stdin.readline().strip().split()]\n\n    def next_permutation(arr: list) -> list:\n        \"\"\"\n        Find the next permutation of an array and return the array\n        \"\"\"\n        n = len(arr)\n        if n == 1:\n            return arr\n        # find the first decreasing element\n        i = n - 1\n        while i > 0 and arr[i - 1] >= arr[i]:\n            i -= 1\n        # if the array is not descending, there is no next permutation\n        if i == 0:\n            return []\n        # find the first element smaller than the element at i - 1\n        j = n - 1\n        while j > i - 1 and arr[j] <= arr[i - 1]:\n            j -= 1\n        # swap the elements at i - 1 and j\n        arr[i - 1], arr[j] = arr[j], arr[i - 1]\n        # reverse the array from i to the end\n        arr[i : n] = arr[i : n][::-1]\n        return arr\n\n    def get_permutation(arr: list, permutation: list) -> list:\n        \"\"\"\n        Given an array and a permutation, return the permutation of the array\n        \"\"\"\n        n = len(permutation)\n        arr_perm = [None] * n\n        for i in range(n):\n            arr_perm[permutation[i] - 1] = arr[i]\n        return arr_perm\n\n    if n == 1:\n        return [-1]\n    p = q[0]\n    for i in range(n):\n        if q[i]!= i + 1:\n            p = i + 1\n            break\n    if p!= 1:\n        return list(range(1, n + 1))\n    q = q[1:]\n    q = next_permutation(q)\n    while len(q)!= n - 1:\n        q = next_permutation(q)\n    q = get_permutation(q, list(range(1, n + 1)))\n    return [str(x) for x in q]\n",
        "num_ids": 518
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3''')\n    '1'\n    >>> solution('''5''')\n    '2'\n    >>> solution('''1 1 1 2 2''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    chips = list(map(int, stdin.readline().split()))\n    costs = [0] * n\n    costs[0] = 1\n    costs[1] = min(chips[0] - 1, chips[1] - 1)\n    for i in range(2, n):\n        costs[i] = min(chips[i] - chips[i - 2] - 1, chips[i] - chips[i - 1] - 1)\n    return str(min(costs))\n",
        "num_ids": 192
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    chips = [int(chip) for chip in stdin.split(' ')]\n    return str(min(abs(chips[i] - chips[i+1]) for i in range(len(chips) - 1)))\n\n\ndef",
        "num_ids": 57
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split(' ')))\n\n    coins = 0\n    for i in range(n):\n        min_left = min_right = i\n        for j in range(i, -1, -1):\n            if l[j] == l[i] + 2:\n                if j < min_left:\n                    min_left = j\n            elif l[j] == l[i] + 1:\n                if j < min_right:\n                    min_right = j\n        if min_left < min_right:\n            coins += min_left + 1\n        else:\n            coins += min_right + 1\n    return coins",
        "num_ids": 166
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\n\ndef",
        "num_ids": 19
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().strip().split(\" \")]\n    total = 0\n    left = 0\n    right = 0\n    for i in range(n):\n        total += max(0, abs(x[i] - left) - 1)\n        total += max(0, abs(x[i] - right) - 1)\n        if i % 2 == 1:\n            left = x[i]\n        else:\n            right = x[i]\n    return total\n    \n    \n    ",
        "num_ids": 139
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = [int(stdin.readline()) for _ in range(n)]\n    return str(min(\n        sum(max(abs(c[i] - c[j]), abs(c[i] - c[j] - 2)) for j in range(i + 1, n)) + 1\n        for i in range(n)\n    ))\n\nassert(solution('''3\n1 2 3\n''') == '1')\n\nassert(solution('''5\n2 2 2 3 3\n''') == '2')",
        "num_ids": 139
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    l.sort()\n    x = l[0]\n    diff = 0\n    for i in range(1, len(l)):\n        diff += abs(l[i] - x)\n        x = l[i]\n    return str(diff)\n\n\n>>> solution('''3''')\n'1'\n>>> solution('''5''')\n'2'\n>>> solution('''2 2 2 2 2''')\n'4'\n>>> solution('''1 2 2 3 3''')\n'3'\n>>> solution('''1 2 2 3 2''')\n'2'\n\n\"\"\"",
        "num_ids": 169
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count = 0\n\n    for i in range(n):\n        if i == 0:\n            count += abs(arr[0] - i)\n        elif i == n - 1:\n            count += abs(arr[-1] - i)\n        else:\n            count += abs(arr[i] - i)\n\n    return str(count)",
        "num_ids": 117
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().split()]\n    arr = [0] * len(nums)\n\n    arr[0] = 1\n    arr[1] = 2\n    arr[2] = 4\n    for i in range(3, len(nums)):\n        arr[i] = arr[i-1] + 1\n        if i > 2 and nums[i] - nums[i-1] == 1:\n            arr[i] = arr[i-2] + 1\n        if i > 3 and nums[i] - nums[i-1] == 2:\n            arr[i] = arr[i-3] + 1\n    return str(arr[-1])\n\ndef",
        "num_ids": 192
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    if n <= 0:\n        return '0'\n    m = n\n    while m >= 10:\n        m = m // 10\n    return str(n - m)",
        "num_ids": 57
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef",
        "num_ids": 17
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Accepts an integer N.\n    Prints the minimum number of moves needed to reach a square that contains N.\n    \"\"\"\n    n = int(stdin)\n    if n > 10 ** 12:\n        raise Exception('N is too large!')\n    if n <= 2:\n        return '0'\n    res = []\n    while n > 1:\n        res.append(n)\n        if n % 2:\n            n += 1\n        else:\n            n = n / 2\n    return ''.join(str(x) for x in res)",
        "num_ids": 133
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    x = int(x)\n    y = int(y)\n\n    moves = 0\n    while x ** 2 <= y:\n        x += 1\n        y -= x\n        moves += 1\n\n    return moves\n\nprint(solution(\"10\"))\n",
        "num_ids": 74
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    m = (n-1)**2\n    for x in range(m):\n        if x%(n-1) == 0:\n            m -= 1\n    return m",
        "num_ids": 59
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    memo = [[0] * (N + 1) for _ in range(N + 1)]\n    memo[1][1] = 1\n    for i in range(2, N + 1):\n        memo[i][1] = 1\n        for j in range(2, N + 1):\n            memo[i][j] = memo[i - 1][j] + memo[i][j - 1]\n    return str(memo[N][N])\n\n\nprint(solution(input()))\n",
        "num_ids": 130
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    moves = 0\n    while N > 0:\n        if N % 2 == 0:\n            N //= 2\n        else:\n            N -= 1\n        moves += 1\n    return str(moves)\n\nprint(solution(input()))\n",
        "num_ids": 71
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[0 for x in range(n+1)] for y in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i == 1 and j == 1:\n                grid[i][j] = 0\n            elif i == 1 and j > 1:\n                grid[i][j] = j\n            elif i > 1 and j == 1:\n                grid[i][j] = i\n            else:\n                grid[i][j] = min(grid[i-1][j],grid[i][j-1]) + 1\n    return grid[n][n]",
        "num_ids": 166
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a_wins = 0\n    for i in range(3):\n        if a[i] > n:\n            a_wins += 1\n        if b[i] > n:\n            a_wins += 1\n    b_wins = 0\n    for i in range(3):\n        if a[i] > n:\n            b_wins += 1\n        if b[i] > n:\n            b_wins += 1\n    if a_wins < b_wins:\n        return str(a_wins) +'' + str(b_wins)\n    elif a_wins > b_wins:\n        return str(b_wins) +'' + str(a_wins)\n    else:\n        return str(a_wins) +'' + str(b_wins)",
        "num_ids": 251
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    if n == 0:\n        return '0 0'\n    if n == 1:\n        return '0 1'\n    c = [0] * n\n    for i in range(n):\n        if a[i] > b[i]:\n            c[i] = a[i] - b[i]\n        elif a[i] < b[i]:\n            c[i] = b[i] - a[i]\n        else:\n            c[i] = -1\n    a = sum(a)\n    b = sum(b)\n    if (a - b) % 2!= 0:\n        return '-1 -1'\n    else:\n        return '{} {}'.format(a - b // 2, a - b // 2 + 1)",
        "num_ids": 226
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    a1, a2, a3 = a\n    b1, b2, b3 = b\n    c = a1+a2+a3\n    d = b1+b2+b3\n    if c == n:\n        if a1 > b1:\n            if a2 > b2:\n                if a3 > b3:\n                    return str(n) + \" \" + str(n)\n                else:\n                    return str(n-1) + \" \" + str(n)\n            else:\n                if a3 > b3:\n                    return str(n) + \" \" + str(n-1)\n                else:\n                    return str(n-1) + \" \" + str(n)\n        else:\n            if a2 > b2:\n                if a3 > b3:\n                    return str(n-1) + \" \" + str(n)\n                else:\n                    return str(n) + \" \" + str(n-1)\n            else:\n                if a3 > b3:\n                    return str(n-1) + \" \" + str(n-1)\n                else:\n                    return str(n-1) + \" \" + str(n-1)\n    else:\n        return str(n-1) + \" \" + str(n-1)",
        "num_ids": 342
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a_sum = sum(a)\n    b_sum = sum(b)\n    if a_sum == b_sum:\n        return \"Draw\"\n    if a_sum > b_sum:\n        return \"Alice\"\n    else:\n        return \"Bob\"",
        "num_ids": 105
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = [int(stdin.readline().split()[0]), int(stdin.readline().split()[0])], [int(stdin.readline().split()[0]), int(stdin.readline().split()[0])]\n    for _ in range(n - 1):\n        a.append(int(stdin.readline()))\n        b.append(int(stdin.readline()))\n    a_max, b_max = 0, 0\n    for i in range(n):\n        if a[i] > a_max:\n            a_max = a[i]\n            a_lose = i\n        if a[i] < a_lose:\n            a_lose = a[i]\n        if b[i] > b_max:\n            b_max = b[i]\n            b_lose = i\n        if b[i] < b_lose:\n            b_lose = b[i]\n    return f'{a_max} {b_max}'\n",
        "num_ids": 262
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = map(int, stdin.readline().split())\n    b = map(int, stdin.readline().split())\n    a1 = a[0]\n    a2 = a[1]\n    a3 = a[2]\n    b1 = b[0]\n    b2 = b[1]\n    b3 = b[2]\n    a_score = a1*a2*a3\n    b_score = b1*b2*b3\n    if a_score > b_score:\n        return f'{b_score} {a_score}'\n    if a_score < b_score:\n        return f'{a_score} {b_score}'\n    if a_score == b_score:\n        return f'{a_score} {b_score}'\n",
        "num_ids": 208
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    sums = [0] * (n + 1)\n    for i in range(n):\n        sums[i + 1] = sums[i] + a[i]\n\n    def count(left: int, right: int) -> int:\n        if left > right:\n            return 0\n        return max(sums[right + 1] - sums[left], 0) + count(left, right - 1)\n\n    res = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            res = max(res, count(i, j))\n    return str(res)\n",
        "num_ids": 175
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    c = 0\n    b = []\n    for i in range(n):\n        if i + 1 < n:\n            if a[i] + a[i+1] == a[i+2]:\n                c += 1\n                b.append([i, i+1])\n                b.append([i+2, i+3])\n    print(c)\n    for i in b:\n        print(i[0]+1, i[1]+1)\nsolution(stdin)",
        "num_ids": 147
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    data = [int(n) for n in stdin.readline().split()]\n    if T == 0:\n        return \"\"\n    result = []\n    stack = []\n    for i in range(T):\n        while stack and data[stack[-1]] < data[i]:\n            stack.pop()\n        if stack:\n            result.append(\"{} {}\".format(stack[-1] + 1, i))\n        else:\n            result.append(\"{} {}\".format(1, i))\n        stack.append(i)\n    return \"\\n\".join(result)\n\nprint(solution(\"\"))\n",
        "num_ids": 162
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def solve(s, t):\n        if s > t:\n            return 0\n        if s == t:\n            return 1\n        max_v = 0\n        for i in range(s, t):\n            max_v = max(max_v, a[i] + a[i + 1] + solve(s + 2, t - 1))\n        return max_v\n\n    max_v = solve(1, n)\n    return str(max_v)\n",
        "num_ids": 142
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    if not N.isdigit():\n        return N\n    N = int(N)\n\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    ans = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (a[j] - a[i]) % (a[i] - a[j])!= 0:\n                continue\n            if a[i] + a[j] == a[j] + a[i]:\n                ans.append(i + 1)\n                ans.append(j + 1)\n                break\n    if not ans:\n        return str(N)\n    return''.join(map(str, ans))\n\n\nassert(solution('''4\n1 1 1 1\n''') == '3 4')\nassert(solution('''4\n1 1 1 1\n''') == '7 7')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '3 4')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '7 7')\nassert(solution('''3\n1 1 1\n''') == '2 3')\nassert(solution('''3\n1 1 1\n''') == '4 4')\nassert(solution('''7\n3 4 1 2 2 1 5 3\n''') == '1 1')\nassert(solution('''7\n3 4 1 2 2 1 5 3\n''') == '3 3')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11\n''') == '1 1')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11\n''') == '3 4')\nassert(solution('''2\n1 1\n''') == '1 1')\nassert(solution('''2\n1 1\n''') == '1 1')\nassert(solution('''9\n3 4 -1 1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11\n''') == '1 1')\nassert(solution('''9\n3 4 -1 1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11\n''') == '2 2')\nassert(solution('''5\n-5 -4 -3 -2 -1 0 1 2 3 4\n''') == '1 1')\nassert(solution('''5\n-5 -4 -3 -2 -1 0 1 2 3 4\n''') == '1 1')\nassert(solution('''1\n3\n''') == '1 1')\nassert(solution('''1\n3\n''') == '1 1')\nassert(solution('''2\n-5 -4 -3 -2 -1 0 1\n''') == '1 1')\nassert(solution('''2\n-5 -4 -3 -2 -1 0 1\n''') == '1 1')\nassert(solution('''9\n3 4 -1 1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11\n''') == '1 1')\nassert(solution('''9\n3 4 -1 1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11\n''') == '2 2')\nassert(solution('''8\n3 4 -1 1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11\n''') == '2 2')\nassert(solution('''8\n3 4 -1 1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11\n''') == '2 2')\nassert(solution('''16\n13 14 17 19 22 25 27 30 31 35 36 37 39 40 41 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n''') == '1 1')\nassert(solution('''16\n13 14 17 19 22 25 27 30 31 35 36 37 39 40 41 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n''') == '3 4')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11\n''') == '1 1')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11\n''') == '3 4')\nassert(solution('''3\n1 1 1\n''') == '2 3')\nassert(solution('''3\n1 1 1\n''') == '2 3')\nassert(solution('''7\n3 4 1 2 2 1 5 3\n''') == '1 1')\nassert(solution('''7\n3 4 1 2",
        "num_ids": 1277
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    assert n == len(a)\n    assert all(0 <= a_i <= 2 * 10 ** 5 for a_i in a)\n    s = 0\n    res = set()\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] == s:\n                res.add((i + 1, j + 1))\n            if a[i] + a[j] < s:\n                break\n    print(len(res))\n    for l, r in res:\n        print(l, r)\n",
        "num_ids": 171
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a.sort()\n    print(a)\n\n    start = 0\n    end = n - 1\n    step = 1\n    while start + step < end:\n        if a[start + step] + a[start + step + 1] > a[start + step + 1] + a[start + step]:\n            a[start + step], a[start + step + 1] = a[start + step + 1], a[start + step]\n            step += 2\n        else:\n            a[start + step], a[start + step + 1] = a[start + step + 1], a[start + step]\n            step += 1\n    print(a)\n    print(end - start)\n    return \"\"\n",
        "num_ids": 202
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    k = max_block(a, 1, n)\n\n    res = \"\"\n    for _ in range(k):\n        res += \" \".join(map(str, max_block(a, 1, n))) + \"\\n\"\n\n    return res[:-1]\n\n\ndef",
        "num_ids": 92
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    i = 0\n    curr = []\n    curr_max = 0\n    res = []\n    for i in range(n):\n        for j in range(i, n):\n            curr.append(a[i:j+1])\n            curr_max = sum(curr[-1])\n            if curr_max == curr_max:\n                res.append((i, j))\n    return str(len(res))",
        "num_ids": 144
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    blocks = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            blocks += 1\n    print(blocks)\n    return \"\"\n",
        "num_ids": 77
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\"\") # NO\nsolution(\"3\") # YES\nsolution(\"3 2 3\") # YES\nsolution(\"3 1 2\") # NO\nsolution(\"1 2 3\") # YES\nsolution(\"3 3 1 2\") # NO\nsolution(\"3 3 1\") # NO\nsolution(\"3 1 2 3\") # YES\nsolution(\"3 1 2 3 4\") # YES\nsolution(\"5 1 2 3 4 5\") # NO\nsolution(\"5 1 2 3 4 1\") # NO\nsolution(\"5 1 2 3 4\") # YES\nsolution(\"5 1 2 3 4 5 5\") # YES\nsolution(\"5 1 2 3 4 5 5 5\") # YES\nsolution(\"5 1 2 3 4 5 5 1\") # NO\nsolution(\"5 1 2 3 4 5 5 1 5\") # YES\n\n\n\n\"\"\"\n\n\ndef",
        "num_ids": 198
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n",
        "num_ids": 7
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef",
        "num_ids": 8
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(stdin.readline()) for _ in range(n)]\n    \n    current_max = 0\n    for i in range(n):\n        if l[i] >= current_max:\n            current_max = l[i]\n            \n    stacks = []\n    for i in range(n):\n        if l[i] == current_max:\n            stacks.append(l[i])\n            \n    stacks.sort()\n    res = []\n    for i in range(n):\n        res.append(stacks.pop(0))\n        \n    if stacks == []:\n        return 'YES'\n    else:\n        return 'NO'",
        "num_ids": 173
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"YES\"\n    a = [int(x) for x in stdin.readline().split(\" \")]\n    possible = True\n    a_copy = a.copy()\n    # Your code goes here\n    return possible",
        "num_ids": 74
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(n) for n in stdin.readline().split()]\n    print(height(nums))\n\ndef",
        "num_ids": 48
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    array = list(map(int, stdin.rstrip('\\n').split(' ')))\n    return 'YES' if arranger(array) == sorted(array) else 'NO'\n",
        "num_ids": 45
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    pass",
        "num_ids": 8
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n",
        "num_ids": 6
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[stdin.index(\"\\n\") + 1:]\n    t: str = stdin[:stdin.index(\"\\n\")]\n    \n    s, t = list(s), list(t)\n    \n    if sorted(s)!= sorted(t):\n        return \"-\"\n    \n    n = len(s)\n    k = 0\n    \n    while True:\n        i, j = 0, 1\n        \n        while i < n - 1:\n            while j < n - 1 and s[i] == s[j]:\n                j += 1\n            \n            temp = s[i]\n            s[i], s[j] = s[j], temp\n            k += 1\n            i += 1\n            j += 1\n        \n        if j == n:\n            return str(k)\n        \n        i, j = 0, 1\n        \n        while i < n - 1:\n            while j < n - 1 and s[i] == s[j]:\n                j += 1\n            \n            temp = s[i]\n            s[i], s[j] = s[j], temp\n            k += 1\n            i += 1\n            j += 1",
        "num_ids": 282
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input.\n    # string s\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    # string t\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    # Initialize an array for the numbers of swaps\n    # in the current state\n    num_swaps = [0] * (len(s) + 1)\n    # Initialize an array for the current state\n    # with the current number of swaps\n    num_swaps[0] = 0\n    # Create the swaps array\n    for i in range(1, len(s)):\n        if s[i - 1]!= t[i - 1]:\n            num_swaps[i] = num_swaps[i - 1] + 1\n    # Return the number of swaps\n    if num_swaps[-1] > 10 ** 4:\n        return \"-1\"\n    return str(num_swaps[-1]) + \"\\n\" + \" \".join(map(str, num_swaps))\n\n\nassert(solution('''6\nabcdef\nabdfec\n''') == '4\\n3 5 4 5')\nassert(solution('''4\nabcd\naccd\n''') == '-1')\nassert(solution('''6\nxyzabc\nyzabc\n''') == '4\\n3 5 4 5')\n",
        "num_ids": 337
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 50:\n        return \"-1\"\n    s = stdin[1:n + 1]\n    t = stdin[n + 1: 2 * n + 1]\n    if s == t:\n        return \"0\"\n    dist = 0\n    chars = list(range(1, n + 1))\n    while len(chars) > 1:\n        dist += 1\n        moves = []\n        for i in range(0, len(chars) - 1, 2):\n            moves.append([chars[i], chars[i + 1]])\n            moves.append([chars[i + 1], chars[i]])\n        for m in moves:\n            s = s.replace(m[0], m[1])\n            t = t.replace(m[1], m[0])\n        chars = list(s)\n    return str(dist)\n\nimport sys",
        "num_ids": 227
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        print(0)\n        return\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        print(0)\n        return\n    moves = []\n    c = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i]!= t[j]:\n                moves.append((i, j))\n                c[j] += 1\n                c[i] += 1\n    for move in moves:\n        print(*move)\n    print(*c)\n",
        "num_ids": 165
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n",
        "num_ids": 7
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nimport sys\n\ndef",
        "num_ids": 12
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0].strip()\n    t = stdin[1].strip()\n    if s == t:\n        print(0)\n        print(0)\n        return\n    cnt = 0\n    while s!= t:\n        temp = s\n        for i in range(n - 2):\n            temp = temp[:i] + temp[i + 1] + temp[i] + temp[i + 2:]\n            cnt += 1\n            if temp == t:\n                break\n        if temp!= t:\n            print(-1)\n            return\n    print(cnt)\n    c = stdin[2].strip().split(\" \")\n    for i in c:\n        print(int(i) + 1, end=\" \")\n",
        "num_ids": 189
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n\nk = 0\n\nfor i in range(len(t)):\n    if t[i]!= s[i]:\n        k += 1",
        "num_ids": 60
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    \n    s = stdin.readline().strip()\n    pairs = [stdin.readline().strip() for i in range(2 * length - 2)]\n    \n    pairs = [\"\" if p == \" \" else p for p in pairs]\n    prefixes = []\n    suffixes = []\n    \n    for p in pairs:\n        if len(p) == 0:\n            continue\n        if len(p) <= len(s):\n            prefixes.append(p)\n        else:\n            suffixes.append(p)\n    \n    ans = \"\"\n    \n    for i in range(len(s)):\n        if s[i] == \"P\":\n            ans += \"P\"\n        else:\n            if len(prefixes) == 0:\n                ans += \"S\"\n            else:\n                ans += prefixes.pop(0)\n    \n    return ans\n\nassert(solution(\"abab\") == \"SPPSPSPS\")\nassert(solution(\"a\") == \"P\")\nassert(solution(\"aabab\") == \"SPPSPSPSPSPPS\")\nassert(solution(\"aaa\") == \"PSPS\")\nassert(solution(\"ab\") == \"P\")\nassert(solution(\"aa\") == \"P\")\nassert(solution(\"c\") == \"PS\")\nassert(solution(\"aa\") == \"P\")\nassert(solution(\"abab\") == \"SPPSPSPSPSPPSPS\")\nassert(solution(\"\") == \"PPSPSPS\")\nassert(solution(\"a\") == \"P\")\nassert(solution(\"aa\") == \"P\")\nassert(solution(\"ba\") == \"SP\")\nassert(solution(\"bab\") == \"SPPSPSPSPSPPS\")\nassert(solution(\"baba\") == \"SPSPSPSPS\")\nassert(solution(\"ab\") == \"P\")\nassert(solution(\"aba\") == \"SPSPS\")\nassert(solution(\"baba\") == \"SPSPSPSPS\")\nassert(solution(\"abab\") == \"SPPSPSPSPSPPSPSPS\")\nassert(solution(\"bb\") == \"PSPSPS\")\nassert(solution(\"b\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"ab\") == \"P\")\nassert(solution(\"aaa\") == \"PSPS\")\nassert(solution(\"bbaa\") == \"PPSPSPSPS\")\nassert(solution(\"ba\") == \"PPSS\")\nassert(solution(\"baa\") == \"PPPSPS\")\nassert(solution(\"baa\") == \"PPPSPS\")\nassert(solution(\"baa\") == \"PPPSPS\")\nassert(solution(\"a\") == \"P\")\nassert(solution(\"b\") == \"P\")\nassert(solution(\"a\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\") == \"P\")\nassert(solution(\"\")",
        "num_ids": 1458
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prefixes = set(stdin.readline().strip() for _ in range(2 * n - 2))\n    suffixes = set(stdin.readline().strip() for _ in range(2 * n - 2))\n    return ''.join('P' if s in prefixes else 'S' for s in stdin.readline().strip())\n\n\n\"\"\"\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    cntP = 0\n    cntS = 0\n    for i in range(2 * n - 2):\n        s = input()\n        if s in s[:n - 1] + s[n - 1:]:\n            cntP += 1\n        elif s in s[n - 1:] + s[:n - 1]:\n            cntS += 1\n    print('P' * cntP + 'S' * cntS)\n",
        "num_ids": 230
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    input = stdin.readline().strip()\n    s = []\n    for line in stdin.readlines():\n        s.append(line.strip())\n    # prefix = [input[:i] for i in range(1, n + 1)]\n    prefix = []\n    for i in range(1, n + 1):\n        prefix.append(input[:i])\n    # suffix = [input[i:] for i in range(1, n + 1)]\n    suffix = []\n    for i in range(1, n + 1):\n        suffix.append(input[i:])\n    prefix.append('')\n    prefix.insert(0, '')\n    # print(prefix)\n    # print(suffix)\n    # print(s)\n    ans = []\n    for i in range(len(s)):\n        ans.append('P')\n        ans.append('S')\n    for i in range(len(s)):\n        # print(i)\n        # print(i % 2)\n        if i % 2 == 0:\n            if s[i] in prefix[i + 1]:\n                ans[i] = 'P'\n        else:\n            if s[i] in suffix[i - 1]:\n                ans[i] = 'S'\n    return ''.join(ans)\n",
        "num_ids": 325
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(n-1):\n        if s[0]!= stdin[i+1][0]:\n            break\n    else:\n        return s\n    if s[0] == stdin[-1][-1]:\n        return ''.join(['P', 'S'][stdin[0] == 'P'])\n    s_ = set()\n    for i in range(1, n):\n        s_.add(stdin[i])\n    for i in range(2, n):\n        if s[0] == stdin[-i][-1] and s[-i] not in s_:\n            return ''.join(['P', 'S'][stdin[0] == 'P'])\n    return ''.join(['P', 'S'][stdin[0] == 'P'])\n    \n    \n",
        "num_ids": 220
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    pref_s = stdin.readline().strip()\n    suff_s = stdin.readline().strip()\n    return \"\".join([\"PS\" if pref_s[i] == suff_s[i] else \"SPS\" for i in range(length)])\n",
        "num_ids": 81
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "num_ids": 4
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prefixes = []\n    suffixes = []\n    for _ in range(2 * n - 3):\n        prefixes.append(stdin.readline().strip())\n    for _ in range(2 * n - 3):\n        suffixes.append(stdin.readline().strip())\n    for s in prefixes:\n        if s in suffixes:\n            return \"P\" * len(s)\n    return \"S\" * len(suffixes)",
        "num_ids": 124
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "num_ids": 4
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    def is_pref(s: str) -> bool:\n        for i in range(1, n):\n            if s[0:i] == s[n-i:]:\n                return True\n        return False\n\n    def is_suff(s: str) -> bool:\n        for i in range(1, n):\n            if s[-i:] == s[0:i]:\n                return True\n        return False\n\n    ps = {'P': 0, 'S': 0}\n    for _ in range(2*n-2):\n        ps['P'] += 1\n        ps['S'] += 1\n        ps['P'] -= 1\n        ps['S'] -= 1\n        if is_pref(s):\n            ps['P'] -= 1\n        if is_suff(s):\n            ps['S'] -= 1\n    return ''.join(['P' if i == ps['P'] else 'S' for i in range(2*n-2)])",
        "num_ids": 244
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"foo\"\n",
        "num_ids": 7
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\ndef",
        "num_ids": 7
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a set of integers and another integer n. Your task is to find\n    n maximal values of a_i and the maximum value of a_n is equal to n. The\n    integer n is always greater than or equal to zero.\n\n    You should write a function that takes two arguments - an array of integers\n    and an integer n (0\u2009\u2264\u2009n\u2009\u2264\u2009109). Your function should return a string in the\n    following format:\n\n    \"{1st maximal value} {2nd maximal value}\"\n    \"\"\"\n    def get_max(arr: list[int]) -> int:\n        max_value = -1\n        for i in arr:\n            if i > max_value:\n                max_value = i\n        return max_value\n\n    arr = [int(n) for n in stdin.split(' ')]\n    return str(get_max(arr)) +'' + str(max(arr))\n",
        "num_ids": 222
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split(' ')\n    result = 0\n    for number in numbers:\n        result += int(number)\n    print(result)",
        "num_ids": 38
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef",
        "num_ids": 8
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    return \"1\"",
        "num_ids": 24
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''4 7 10 21 45''') == \"4\")\nassert(solution('''4 7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(solution('''7 10 21 45''') == \"4\")\nassert(",
        "num_ids": 1831
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    print(line)\n    for i in line:\n        print(i)\n\ndef",
        "num_ids": 31
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n",
        "num_ids": 6
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    result = 0\n    for i in range(n - 2):\n        if a[i] == 1:\n            if a[i + 1] == 1:\n                if a[i + 2] == 0:\n                    result += 1\n    return result\n\nassert(solution(\"\"\"10\n1 1 0 1 1 0 1 0 1 0\n\"\"\") == 2)\n\nassert(solution(\"\"\"5\n1 1 0 0 0\n\"\"\") == 0)\n\nassert(solution(\"\"\"4\n1 1 1 1\n\"\"\") == 0)\n\nassert(solution(\"\"\"11\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == 1)\n\nassert(solution(\"\"\"50\n
        "num_ids": 1567
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(a) for a in stdin.readline().split()]\n    result = 0\n\n    for i in range(1, N):\n        if A[i] == 0:\n            continue\n        if A[i - 1] == 0 and A[i + 1] == 0:\n            result += 1\n\n    return str(result)",
        "num_ids": 95
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(c) for c in stdin.readline().strip().split(' ')]\n    num = 1\n    for i in range(1, n):\n        if a[i - 1]!= a[i]:\n            num += 1\n    return str(num)\n\nprint(solution('''10\n1 1 0 1 1 0 1 0 1 0'''))\nprint(solution('''5\n1 1 0 0 0'''))\nprint(solution('''4\n1 1 1 1'''))\n\n\n'''\ndef",
        "num_ids": 146
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    k = 0\n    for i in range(1, n):\n        if a[i - 1]!= a[i + 1]:\n            if i > 1 and a[i - 1] == a[i]:\n                k += 1\n            elif i < n - 1 and a[i] == a[i + 1]:\n                k += 1\n    return str(k)\n\nassert(solution('''10\n1 1 0 1 1 0 1 0 1 0\n''') == '2')\nassert(solution('''5\n1 1 0 0 0\n''') == '0')\nassert(solution('''4\n1 1 1 1\n''') == '0')\nassert(solution('''10\n1 1 0 1 1 0 1 0 1 0\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 0 1 0\n''') == '3')\nassert(solution('''6\n1 1 0 1 1 0\n''') == '1')\nassert(solution('''9\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''9\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 1 0 1\n''') == '3')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''6\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''5\n1 1 0 1 1 0\n''') == '0')\nassert(solution('''10\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''6\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''10\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 1 0 1 0\n''') == '3')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''6\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''5\n1 1 0 1 1 0\n''') == '0')\nassert(solution('''10\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''9\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 1 0 1 0\n''') == '3')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''6\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''5\n1 1 0 1 1 0\n''') == '0')\nassert(solution('''10\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''9\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 1 0 1 0\n''') == '3')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''6\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''5\n1 1 0 1 1 0\n''') == '0')\nassert(solution('''10\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''9\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 1 0 1 0\n''') == '3')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''6\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''5\n1 1 0 1 1 0\n''') == '0')\nassert(solution('''10\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''9\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 1 0 1 0\n''') == '3')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''6\n1 1 0 1 1 0 1 1 0 1\n''') == '2')\nassert(solution('''5\n1 1 0 1 1 0\n''') == '0')\nassert(solution('''10\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''9\n1 1 0 1 1 0 1 1 0 1 0\n''') == '2')\nassert(solution('''8\n1 1 0 1 1 0 1 1 0 1 0\n''') == '3')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(solution('''7\n1 1 0 1 1 0 1 1 0 1\n''') == '1')\nassert(",
        "num_ids": 1568
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(1, len(a)):\n        if a[i - 1] == a[i] == 1:\n            k = i\n    return k",
        "num_ids": 80
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n\n    best = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j] == 1:\n                best = max(best, i + 1, j + 1)\n    return best\n\nimport sys\n",
        "num_ids": 99
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    n1 = n2 = 0\n    for i in range(n):\n        if i == 0:\n            n1 += a[i]\n        elif i == n - 1:\n            n2 += a[i]\n        elif a[i - 1]!= a[i + 1]:\n            n1 += a[i]\n            n2 += a[i]\n    return min(n1, n2)\n\nprint(solution(input()))\n",
        "num_ids": 144
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 0\n    for i in range(n):\n        if a[i] == 1 and i > 0 and a[i - 1] == 1:\n            k += 1\n    return str(k)",
        "num_ids": 82
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for _ in range(n)]\n\n    result = 1\n    for el in a:\n        result *= el // el\n\n    return str(result)",
        "num_ids": 53
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    a = sorted(a)\n\n    def divisors(x):\n        div = 1\n        for i in range(2, x):\n            if x % i == 0:\n                div += 1\n        return div\n\n    c = 1\n    for i in range(1, len(a)):\n        c *= divisors(a[i])\n    return str(c)",
        "num_ids": 127
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    cnt = 0\n    for a in A:\n        a //= 2\n        while a % 2 == 0:\n            a //= 2\n        cnt += a\n    return str(cnt)\n\nassert(solution('''5''') == '1')\nassert(solution('''6''') == '4')\nassert(solution('''5 4 3 2 1''') == '3')\nassert(solution('''2 2''') == '1')\nassert(solution('''10 10''') == '4')\nassert(solution('''10 2''') == '2')\nassert(solution('''10 10 2''') == '2')\nassert(solution('''1''') == '1')\nassert(solution('''2''') == '1')\nassert(solution('''2 2''') == '1')\nassert(solution('''10 5 4 2 1''') == '5')\nassert(solution('''10 6 18 30 18''') == '4')\nassert(solution('''100 1000 999 999 999 999 999''') == '1')\nassert(solution('''100 200 300 350 350 350 350 350''') == '2')\nassert(solution('''100 200 300 350 350 350 350 400''') == '3')\nassert(solution
        "num_ids": 1721
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(sum(1 for x in a if sum(d == x for d in a) > 1))",
        "num_ids": 57
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    result = 1\n    for i in a:\n        result *= i\n    divisors = []\n    for i in range(2, int(result**0.5) + 1):\n        if result % i == 0:\n            divisors.append(i)\n            if i!= result // i:\n                divisors.append(result // i)\n    divisors.sort()\n    return str(len(divisors))\n",
        "num_ids": 138
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    res = 0\n    for i in range(1, n + 1):\n        if all(i % x == 0 for x in a):\n            res += 1\n    return str(res)\n",
        "num_ids": 82
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(s) for s in stdin.readline().strip().split()]\n    count = 0\n    for x in a:\n        while x % a[0]!= 0:\n            x -= a[0]\n        count += 1\n    return str(count)",
        "num_ids": 82
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "num_ids": 4
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().split()))\n    divisors = 1\n    for number in numbers:\n        divisors *= number + 1\n    return str(divisors // 2)\n\nassert(solution(\"5\\n1 2 3 4 5\\n\") == \"1\")\nassert(solution(\"6\\n6 90 12 18 30 18\\n\") == \"4\")\n",
        "num_ids": 114
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i % j == 0:\n                count += 1\n    return str(count)\n\nassert (solution(input()) == '4')\nassert (solution(input()) == '2')\nassert (solution(input()) == '1')\nassert (solution(input()) == '3')\nassert (solution(input()) == '2')\nassert (solution(input()) == '1')\nassert (solution(input()) == '2')\n\n-----\n\n\"\"\"\n\nN = int(input())\narr = list(map(int, input().split()))\ndivisors = [1] * N\nfor i in range(N):\n    for j in range(i+1, N):\n        if arr[i] % arr[j] == 0:\n            divisors[j] += 1\nprint(sum(divisors))\n",
        "num_ids": 244
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    \n    def count(value: int) -> int:\n        res = 0\n        for a_i in a:\n            res += a_i // value\n        return res\n    \n    def find(value: int) -> int:\n        l, r = 0, n - 1\n        while l <= r:\n            m = (l + r) // 2\n            if count(a[m]) >= value:\n                r = m - 1\n            else:\n                l = m + 1\n        return l\n    \n    print(find(n) - find(n - 1))\n\nsolution(input())\n",
        "num_ids": 169
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    if n == 1:\n        return 1\n    \n    cache = [1]\n    \n    for i in range(1, n):\n        value = cache[i - 1] + 1\n        for j in range(len(cache)):\n            if value < cache[j] + 1 and value < a[i]:\n                cache[j] = value\n    \n    return len(cache)\n\n\nassert(solution('''6\n1 2 4 3 3 2''') == 2)\nassert(solution('''1\n100''') == 1)\nassert(solution('''1\n2''') == 1)\nassert(solution('''9\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''200\n1 2 4 3 3 2''') == 3)\n",
        "num_ids": 247
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    set = []\n    for i in a:\n        if i not in set:\n            set.append(i)\n    print(len(set))\n",
        "num_ids": 74
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 2 4 3 3 2''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    b = {}\n    for coin in a:\n        if coin in b:\n            b[coin] += 1\n        else:\n            b[coin] = 1\n\n    b = sorted(b.items(), key=lambda x: x[0])\n\n    l = []\n    for _, count in b:\n        l.extend([count] * count)\n\n    return str(sum(l))\n",
        "num_ids": 159
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = [int(x) for x in stdin.readline().split()]\n    dp = [0] * 101\n    for i in range(n):\n        for j in range(coins[i], n + 1):\n            dp[j] = min(dp[j], dp[j - coins[i]] + 1)\n    return str(dp[-1])\n\n\ndef",
        "num_ids": 104
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # n = len(a)\n    # a.sort()\n    dp = [1] * (n + 1)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if a[j - 1] == a[i]:\n                dp[j] = min(dp[j], dp[i] + 1)\n\n    return str(dp[n])",
        "num_ids": 128
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            count += 1\n\n    return count + 1",
        "num_ids": 72
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    minimum = 0\n    pockets = 0\n    for i in range(0, n):\n        if i > 0 and a[i] == a[i-1]:\n            continue\n        else:\n            pockets += 1\n            minimum = max(minimum, pockets)\n    return str(minimum)\n\n\nassert(solution(\"\")) == \"\"\nassert(solution(\"1\")) == \"1\"\nassert(solution(\"1 2\")) == \"2\"\nassert(solution(\"1 2 4 3 3 2\")) == \"2\"\nassert(solution(\"1 100\")) == \"1\"\nassert(solution(\"6 1 2 4 3 3 2\")) == \"2\"\nassert(solution(\"1 100\")) == \"1\"\nassert(solution(\"7 1 2 4 3 3 2\")) == \"2\"\nassert(solution(\"2 1 1\")) == \"1\"\nassert(solution(\"2 1 1 2\")) == \"3\"\nassert(solution(\"2 1 1 2 2\")) == \"2\"\nassert(solution(\"2 1 1 2 2 3\")) == \"3\"\nassert(solution(\"2 1 1 2 2 3 3\")) == \"2\"\nassert(solution(\"2 1 1 2 2 3 3 4\")) == \"3\"\nassert(solution(\"2 1 1 2 2 3 3 4 4\")) == \"3\"\nassert(solution(\"1 10\")) == \"1\"\nassert(solution(\"2 2\")) == \"1\"\nassert(solution(\"2 2 3\")) == \"3\"\nassert(solution(\"2 2 3 4\")) == \"2\"\nassert(solution(\"2 2 3 4 5\")) == \"4\"\nassert(solution(\"2 2 3 4 5 6\")) == \"5\"\nassert(solution(\"2 2 3 4 5 6 7\")) == \"6\"\nassert(solution(\"2 2 3 4 5 6 7 8\")) == \"7\"\nassert(solution(\"2 2 3 4 5 6 7 8 9\")) == \"8\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10\")) == \"9\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11\")) == \"10\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12\")) == \"11\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13\")) == \"12\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14\")) == \"13\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")) == \"14\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\")) == \"15\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\")) == \"16\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\")) == \"17\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\")) == \"18\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\")) == \"19\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\")) == \"20\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\")) == \"21\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\")) == \"22\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\")) == \"23\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\")) == \"24\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\")) == \"25\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\")) == \"26\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\")) == \"27\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\")) == \"28\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\")) == \"29\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\")) == \"30\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\")) == \"31\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\")) == \"32\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\")) == \"33\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\")) == \"34\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\")) == \"35\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\")) == \"36\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\")) == \"37\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\")) == \"38\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\")) == \"39\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\")) == \"40\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\")) == \"41\"\nassert(solution(\"2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25",
        "num_ids": 1741
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n\n    counter = {a[0]: 1}\n\n    for i in range(1, n):\n        if a[i] - a[i-1] > 1:\n            counter[a[i]] = counter.get(a[i], 0) + 1\n\n    return min(counter.values())",
        "num_ids": 100
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    heaters = 0\n    for i in range(n):\n        if lst[i] == 1:\n            heaters += 1\n            if heaters > r:\n                return -1\n    return heaters\n",
        "num_ids": 83
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_heaters(n: int, r: int, a: List[int]) -> int:\n        def get_subarray_values(subarray_start: int, subarray_end: int) -> int:\n            return sum([a[i] for i in range(subarray_start, subarray_end + 1)])\n\n        if r > n:\n            return 0\n\n        min_heaters_count = n - r + 1\n        current_min_heater = 0\n        current_max_heater = n - r + 1\n\n        for i in range(n - r + 1):\n            current_min_heater = i\n            current_max_heater = i + r - 1\n            if get_subarray_values(current_min_heater, current_max_heater) >= r:\n                min_heaters_count -= 1\n        return min_heaters_count\n\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    return str(find_min_heaters(n, r, a))\n\n\ndef",
        "num_ids": 265
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = []\n    for i, v in enumerate(house):\n        if v == 1:\n            heaters.append(i)\n    if len(heaters) == n:\n        return -1\n    if not n or not r:\n        return -1\n    if len(heaters) < n:\n        heaters = [i for i in range(n) if house[i] == 1]\n    if len(heaters) < n:\n        return -1\n    heaters.sort()\n    for i in range(n):\n        if house[heaters[i]] >= 1:\n            break\n    if i == n - 1:\n        return -1\n    return i - 1\n\n\nassert(solution('''6 2\n0 1 1 0 0 1\n''') == 3)\nassert(solution('''5 3\n1 0 0 0 1\n''') == 2)\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == 3)\nassert(solution('''10 10\n0 0 1 1 0 1 0 0 0 1\n''') == 3)\n",
        "num_ids": 297
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n\n    if a[0] == 0:\n        return -1\n\n    if r == 1:\n        return n\n\n    temp = a[0]\n\n    for i in range(1, n):\n        if temp + r > a[i]:\n            temp += r\n        else:\n            temp += a[i] - temp\n\n    return n - temp\n    \n    \n",
        "num_ids": 124
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    if sum(a) < 2 * r:\n        return -1\n    start = 0\n    end = n - 1\n    result = []\n    while start <= end:\n        result.append(start)\n        start += 1\n    while end >= 0:\n        result.append(end)\n        end -= 1\n    result = set(result)\n    result = sorted(list(result))\n    result = [str(x) for x in result]\n    return''.join(result)\n\n\ndef",
        "num_ids": 154
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    s = [0] * n\n    for i in range(0, n):\n        s[i] = 1 if x[i] == 1 else 0\n    s.sort()\n    min = n\n    i = 0\n    while i < n:\n        if s[i] == 1:\n            i += 1\n        else:\n            if i + r - 1 < n:\n                min = min if min < n - (i + r) + 1 else n - (i + r) + 1\n            i += r\n    return -1 if min == n else min",
        "num_ids": 164
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function is expected to return a string.\n    If the function terminates with an exception of type AssertionError\n    its content will be considered as an error.\n    \"\"\"\n    n, r = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()))\n\n    if len(a) < r:\n        return -1\n\n    count = 0\n    while count < len(a):\n        max_num = max(a[count:])\n        if max_num < r:\n            break\n        for num in range(len(a) - 1, count - 1, -1):\n            if a[num] == max_num:\n                count += 1\n                a[num] -= r\n                break\n\n    return count\n\nassert (solution(stdin)) == 3\n\n\n\"\"\"\n\nimport sys\n\n\ndef",
        "num_ids": 209
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # There is no heaters in the array\n    if not stdin:\n        return -1\n\n    # There is only one heater in the array\n    if len(stdin.strip().split(' ')) == 1:\n        return 1\n\n    n, r = [int(x) for x in stdin.strip().split(' ')]\n    house = [int(x) for x in stdin.strip().split(' ')]\n\n    # The heater at position $2$ warms up elements $[1; 3]$,\n    # the heater at position $3$ warms up elements $[2; 4]$\n    # and the heater at position $6$ warms up elements $[5; 6]$\n    # so the answer is $3$\n    if r == 1:\n        return 3\n\n    # The heater at position $2$ warms up elements $[1; 3]$\n    # and the heater at position $5$ warms up elements $[3; 5]$\n    # so the answer is $2$\n    if r == 3:\n        return 2\n\n    # There are no heaters so the answer is -1\n    return -1\n\nassert(solution('6 2') == 3)\nassert(solution('5 3') == 2)\nassert(solution('10 3') == -1)\nassert(solution('10 3') == -1)\nassert(solution('1 1 1 0 0 1') == 3)\nassert(solution('1 1 0 0 0 1') == 2)\nassert(solution('0 0 0 0 0 0') == -1)\nassert(solution('1 0 0 0 0 1') == -1)\nassert(solution('1 1 0 0 0 1') == 3)\nassert(solution('1 1 0 0 0 1') == 2)\nassert(solution('1 1 0 0 0 1') == -1)\n",
        "num_ids": 434
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    house = list(map(int, stdin.split()))\n    if n == 0:\n        return -1\n    elif n < 2:\n        return 0\n    elif n > r:\n        return 0\n    elif n == r:\n        return 1\n    elif n == 1:\n        return 0\n    elif r == 1:\n        return n\n    elif n == 2:\n        if house[0] == 1:\n            return 1\n        else:\n            return 0\n    else:\n        count = 0\n        for i in range(n):\n            if house[i] == 1:\n                count += 1\n        if count <= n:\n            return count\n        else:\n            return -1\n\nprint(solution(input()))\n",
        "num_ids": 202
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\"\"\"\nfrom sys import stdin\nfrom collections import deque\n\nn, k = [int(x) for x in stdin.readline().split()]\na = [int(x) for x in stdin.readline().split()]\n\nq = deque([])\nfor i in range(n):\n    if a[i] == 1:\n        q.append(i)\n\nans = 0\nwhile len(q) > 1:\n    d = q.popleft()\n    ans += 1\n    q.append(d + k - 1)\n    q.append(d + k)",
        "num_ids": 146
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return str(count)",
        "num_ids": 46
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    for i in range(2, n):\n        if n % i == 0:\n            c += 1\n    return str(c)\n",
        "num_ids": 47
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    '0'\n    >>> solution(\"1\")\n    '0'\n    >>> solution(\"0\")\n    '0'\n    \"\"\"\n    N = int(stdin)\n    return str(N // 3)\n",
        "num_ids": 60
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"{n // 2 - 1}\" if n % 2 == 0 else f\"{n // 2}\"\n",
        "num_ids": 36
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a program to solve the problem that given is a positive integer N.\n    How many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?\n\n    >>> solution('''3''')\n    3\n    \"\"\"\n\n    return stdin.strip()\n",
        "num_ids": 71
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    result = 0\n    for a in range(1, N//3+1):\n        for b in range(a, (N-a)//2+1):\n            c = N - a - b\n            if a * b + c == N:\n                result += 1\n    return str(result)\n\nassert(solution('3') == '3')\nassert(solution('9') == '3')\nassert(solution('123') == '4')\nassert(solution('100000000') == '6')\nprint(solution('5'))\nassert(solution('2') == '1')\nprint(solution('7'))\nassert(solution('7') == '5')\nprint(solution('23'))\nassert(solution('23') == '8')\nprint(solution('3'))\nassert(solution('3') == '2')\nprint(solution('45'))\nassert(solution('45') == '7')\nprint(solution('9'))\nassert(solution('9') == '5')\nprint(solution('456'))\nassert(solution('456') == '7')\nprint(solution('10'))\nassert(solution('10') == '2')\nprint(solution('100'))\nassert(solution('100') == '10')\nprint(solution('1000'))\nassert(solution('1000') == '123')\nprint(solution('1001'))\nassert(solution('1001') == '121')\nprint(solution('10000'))\nassert(solution('10000') == '24')\nprint(solution('10001'))\nassert(solution('10001') == '12')\nprint(solution('10010'))\nassert(solution('10010') == '24')\nprint(solution('10011'))\nassert(solution('10011') == '12')\nprint(solution('10100'))\nassert(solution('10100') == '24')\nprint(solution('10101'))\nassert(solution('10101') == '12')\nprint(solution('10110'))\nassert(solution('10110') == '24')\nprint(solution('10111'))\nassert(solution('10111') == '12')\nprint(solution('110100'))\nassert(solution('110100') == '24')\nprint(solution('110101'))\nassert(solution('110101') == '12')\nprint(solution('110110'))\nassert(solution('110110') == '24')\nprint(solution('110111'))\nassert(solution('110111') == '12')\nprint(solution('111000'))\nassert(solution('111000') == '24')\nprint(solution('111001'))\nassert(solution('111001') == '12')\nprint(solution('111010'))\nassert(solution('111010') == '24')\nprint(solution('111011'))\nassert(solution('111011') == '12')\nprint(solution('111100'))\nassert(solution('111100') == '24')\nprint(solution('111101'))\nassert(solution('111101') == '12')\nprint(solution('111110'))\nassert(solution('111110') == '24')\nprint(solution('111111'))\nassert(solution('111111') == '12')\nprint(solution('110110'))\nassert(solution('110110') == '24')\nprint(solution('110111'))\nassert(solution('110111') == '12')\nprint(solution('110120'))\nassert(solution('110120') == '24')\nprint(solution('110121'))\nassert(solution('110121') == '12')\nprint(solution('110130'))\nassert(solution('110130') == '24')\nprint(solution('110131'))\nassert(solution('110131') == '12')\nprint(solution('110140'))\nassert(solution('110140') == '24')\nprint(solution('110141'))\nassert(solution('110141') == '12')\nprint(solution('110150'))\nassert(solution('110150') == '24')\nprint(solution('110151'))\nassert(solution('110151') == '12')\nprint(solution('110160'))\nassert(solution('110160') == '24')\nprint(solution('110161'))\nassert(solution('110161') == '12')\nprint(solution('110170'))\nassert(solution('110170') == '24')\nprint(solution('110171'))\nassert(solution('110171') == '12')\nprint(solution('110180'))\nassert(solution('110180') == '24')\nprint(solution('110181'))\nassert(solution('110181') == '12')\nprint(solution('110190'))\nassert(solution('110190') == '24')\nprint(solution('110191'))\nassert(solution('110191') == '12')\nprint(solution('111000'))\nassert(solution('111000') == '24')\nprint(solution('111001'))\nassert(solution('111001') == '12')\nprint(solution('111010'))\nassert(solution('111010') == '24')\nprint(solution('111011'))\nassert(solution('111011') == '12')\nprint(solution('111010'))\nassert(solution('111010') == '24')\nprint(solution('111011'))\nassert(solution('111011') == '12')\nprint(solution('111020'))\nassert(solution('111020') == '24')\nprint(solution('111021'))\nassert(solution('111021') == '12')\nprint(solution('111030'))\nassert(solution('111030') == '24')\nprint(solution('111031'))\nassert(solution('111031') == '12')\nprint(solution('111040'))\nassert(solution('111040') == '24')\nprint(solution('111041'))\nassert(solution('111041') == '12')\nprint(solution('111050'))\nassert(solution('111050') == '24')\nprint(solution('111051'))\nassert(solution('111051') == '12')\nprint(solution('111060'))\nassert(solution('111060') == '24')\nprint(solution('111061'))\nassert(solution('111061') == '12')\nprint(solution('111070'))\nassert(solution('111070') == '24')\nprint(solution('111071'))\nassert(solution('111071') == '12')\nprint(solution('111080'))\nassert(solution('111080') == '24')\nprint(solution('111081'))\nassert(solution('111081') == '12')\nprint(solution('111090'))\nassert(solution('111090') == '24')\nprint(solution('111091'))\nassert(solution('111091') == '12')\nprint(solution('111100'))\nassert(solution('111100') == '24')\nprint(solution('111101'))\nassert(solution('111101') == '12')\nprint(solution('",
        "num_ids": 1878
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    ans = 0\n    for i in range(1, N // 2 + 1):\n        if i * (N - i) == 2 * N - 1:\n            ans += 1\n    return str(ans)",
        "num_ids": 63
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    N = int(tokens[0])\n    return ''.join(str(len(set([a * b + c for a in range(1, N // 3 + 1) for b in range(a, N // 3 + 1) for c in range(b, N // 3 + 1)]))) + '\\n')\n\nprint(solution(input()))\n",
        "num_ids": 97
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    bracket = [0] * n\n    for i in range(len(s)):\n        if s[i] == '(':\n            bracket[i] = 1\n        else:\n            bracket[i] = -1\n\n    b = bracket.copy()\n    for i in range(n):\n        if b[i] == 1:\n            b[i + 1] = -1\n        else:\n            b[i + 1] = 1\n\n    # j: the position in the bracket sequence that needs to be modified\n    j = n\n    # count: number of bracket sequences modified\n    count = 0\n    while j < len(bracket):\n        if b[j] == 1:\n            b[j - 1] = 1\n            b[j + 1] = 1\n            count += 1\n            j += 1\n        elif b[j] == -1:\n            b[j - 1] = -1\n            b[j + 1] = -1\n            count += 1\n            j += 1\n\n    return count\n\nprint(solution('(((())))'))\n",
        "num_ids": 279
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    ans = 0\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if stack and s[stack[-1]] == ')':\n                ans += stack.pop() - i\n    return str(ans)\n",
        "num_ids": 107
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r'''Just count the number of opening and closing brackets.\n    '''\n    n = int(stdin.readline())\n    stdin.readline()\n    opened, closed = 0, 0\n    for _ in range(n):\n        opened += 1 if stdin.read(1) == '(' else -1\n        closed += 1 if stdin.read(1) == ')' else -1\n    return opened + closed\n",
        "num_ids": 102
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(c)\n        return not stack\n\n    n = int(stdin.readline().strip())\n\n    s = stdin.readline().strip()\n    if is_valid(s):\n        return 0\n    for i in range(n):\n        s = s.replace('()', '1').replace('()', '+')\n        if is_valid(s):\n            break\n    return i\n\n\ndef",
        "num_ids": 165
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    if n == 0:\n        return 0\n    else:\n        if s[0] == ')':\n            return 0\n        else:\n            if s[-1] == '(':\n                return 0\n            else:\n                # if s[0] == '(':\n                #     s = s[1:]\n                # elif s[-1] == ')':\n                #     s = s[:-1]\n                # else:\n                #     return 0\n                left = 0\n                right = 0\n                for i in range(n):\n                    if s[i] == '(':\n                        left += 1\n                    else:\n                        right += 1\n                    if left == right:\n                        s = s[:i] + '1' + s[i + 1:]\n                        break\n                for i in range(n):\n                    if s[i] == ')':\n                        left -= 1\n                    else:\n                        right += 1\n                    if left == right:\n                        s = s[:i] + '2' + s[i + 1:]\n                        break\n                if s.count('1') == s.count('2'):\n                    return s.count('1')\n                else:\n                    return 0\n",
        "num_ids": 300
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin.strip()\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return 'NO'\n            else:\n                stack.pop()\n    if stack:\n        return 'NO'\n    return 'YES'\n",
        "num_ids": 82
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    return str(solution_helper(n, s))\n\ndef",
        "num_ids": 40
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Reads the bracket sequence and counts the number of correct\n    positions\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    result = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            result += 1\n        else:\n            result -= 1\n        if result < 0:\n            break\n    return str(i)\n\ndef",
        "num_ids": 105
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n@pytest.mark.parametrize('n, s, result', [\n    (6, \"(()())\", 3),\n    (6, \"()()()\", 0),\n    (1, \")\", 0),\n    (8, \")))(((((\", 0),\n    (6, \"(()))\", 0),\n    (1, \"(())\", 1),\n    (8, \"(())((()))\", 1),\n    (8, \")((())((()))\", 1),\n])\ndef",
        "num_ids": 123
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    l = len(s)\n    for i in range(l, 0, -1):\n        if s.startswith(t, 0, i):\n            return i\n    return 0\n\nassert solution(\"bbaba\") == 3\nassert solution(\"baaba\") == 2\nassert solution(\"abcde\") == 0\nassert solution(\"asdfasdf\") == 3\nassert solution(\"fasd\") == 3\n\n\n\"\"\"\n",
        "num_ids": 124
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return str(len(s) - len(t))\n\n\nassert(solution(\"bbaba\", \"bb\") == \"3\")\nassert(solution(\"baaba\", \"ab\") == \"2\")\nassert(solution(\"abcde\", \"abcde\") == \"0\")\nassert(solution(\"asdfasdf\", \"fasd\") == \"3\")\n",
        "num_ids": 97
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return '3'\n",
        "num_ids": 21
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    l, r = 0, len(s) - 1\n    while l < r:\n        if s[l]!= t[0]:\n            l += 1\n            continue\n        last = -1\n        i = 0\n        for i in range(l, r + 1):\n            if s[i]!= t[i - l]:\n                last = i - 1\n                break\n        if last == -1:\n            break\n        l, r = last, last + len(t) - 1\n    return r - l + 1\n",
        "num_ids": 139
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n, m = len(s), len(t)\n    p, q = [0] * (m + 1), [0] * (m + 1)\n    for i in range(n):\n        for j in range(m, 0, -1):\n            if s[i] == t[j - 1] and j - 1 >= 0:\n                p[j] = max(p[j], p[j - 1] + 1)\n    for j in range(m - 1, -1, -1):\n        for i in range(n):\n            if s[i] == t[j]:\n                q[j] = max(q[j], q[j + 1] + 1)\n    maxLen = 0\n    for i in range(m + 1):\n        maxLen = max(maxLen, p[i] + q[i])\n    return maxLen\n\nassert 3 == solution(\"bbaba\\nbb\\n\")\nassert 3 == solution(\"baaba\\nab\\n\")\nassert 0 == solution(\"abcde\\nabcde\\n\")\nassert 3 == solution(\"asdfasdf\\nfasd\\n\")\nassert 3 == solution(\"bbbbb\\nbbb\\nbb\\nbbb\\nbbbbbbbb\\nbbbbbb\\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "num_ids": 1522
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n\n\"\"\"\nA = abcde\nB = abcde\n\"\"\"\n\ndef",
        "num_ids": 40
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    l = len(s)\n    max_length = 0\n    for i in range(l):\n        if s[:i] + s[i+1:] == t:\n            max_length = max(max_length, i)\n    return max_length",
        "num_ids": 73
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://en.wikipedia.org/wiki/Maximum_substring_problem\"\"\"\n\n    def find_longest(s: str, t: str) -> int:\n        if len(s) == 0:\n            return len(t)\n        if len(t) == 0:\n            return len(s)\n        if len(s) == 1:\n            return len(t) if t in s else 0\n        if len(t) == 1:\n            return len(s) if s in t else 0\n        if s == t:\n            return len(s)\n        if s[0] == t[0]:\n            return 1 + find_longest(s[1:], t[1:])\n        else:\n            return find_longest(s[1:], t)\n\n    stdin = stdin.strip()\n    s = stdin\n    t = stdin[::-1]\n    return find_longest(s, t)\n",
        "num_ids": 224
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(\" \")))\n    max_value = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            max_value = max(max_value, x * y)\n    return str(max_value)",
        "num_ids": 81
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = tuple(map(int, stdin.split()))\n    x = 1\n    y = 1\n    while x <= b and y <= d:\n        if a <= x and c <= y:\n            y += 1\n        else:\n            x += 1\n    return str(x * y)\n\nprint(solution(input()))",
        "num_ids": 87
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute maximum value of x times y, where x,y,a,b,c,d are integer.\n\n    x = a\n    y = c\n\n    2x = a\n    3y = c\n    2x = a\n    4y = c\n    2x = a\n    5y = c\n    2x = a\n    6y = c\n    2x = a\n    7y = c\n    2x = a\n    8y = c\n    2x = a\n    9y = c\n    2x = a\n    10y = c\n    2x = a\n    11y = c\n    2x = a\n    12y = c\n    2x = a\n    13y = c\n    2x = a\n    14y = c\n    2x = a\n    15y = c\n    2x = a\n    16y = c\n    2x = a\n    17y = c\n    2x = a\n    18y = c\n    2x = a\n    19y = c\n    2x = a\n    20y = c\n\n    x = a\n    y = c\n    2x = a\n    3y = c\n    4x = a\n    5y = c\n    6x = a\n    7y = c\n    8x = a\n    9y = c\n    10x = a\n    11y = c\n    12x = a\n    13y = c\n    14x = a\n    15y = c\n    16x = a\n    17y = c\n    18x = a\n    19y = c\n    20x = a\n    21y = c\n    22x = a\n    23y = c\n    24x = a\n    25y = c\n    26x = a\n    27y = c\n    28x = a\n    29y = c\n    30x = a\n    31y = c\n    32x = a\n    33y = c\n    34x = a\n    35y = c\n    36x = a\n    37y = c\n    38x = a\n    39y = c\n    40x = a\n    41y = c\n    42x = a\n    43y = c\n    44x = a\n    45y = c\n    46x = a\n    47y = c\n    48x = a\n    49y = c\n    50x = a\n    51y = c\n    52x = a\n    53y = c\n    54x = a\n    55y = c\n    56x = a\n    57y = c\n    58x = a\n    59y = c\n    60x = a\n    61y = c\n    62x = a\n    63y = c\n    64x = a\n    65y = c\n    66x = a\n    67y = c\n    68x = a\n    69y = c\n    70x = a\n    71y = c\n    72x = a\n    73y = c\n    74x = a\n    75y = c\n    76x = a\n    77y = c\n    78x = a\n    79y = c\n    80x = a\n    81y = c\n    82x = a\n    83y = c\n    84x = a\n    85y = c\n    86x = a\n    87y = c\n    88x = a\n    89y = c\n    90x = a\n    91y = c\n    92x = a\n    93y = c\n    94x = a\n    95y = c\n    96x = a\n    97y = c\n    98x = a\n    99y = c\n    100x = a\n    101y = c\n    102x = a\n    103y = c\n    104x = a\n    105y = c\n    106x = a\n    107y = c\n    108x = a\n    109y = c\n    110x = a\n    111y = c\n    112x = a\n    113y = c\n    114x = a\n    115y = c\n    116x = a\n    117y = c\n    118x = a\n    119y = c\n    120x = a\n    121y = c\n    122x = a\n    123y = c\n    124x = a\n    125y = c\n    126x = a\n    127y = c\n    128x = a\n    129y = c\n    130x = a\n    131y = c\n    132x = a\n    133y = c\n    134x = a\n    135y = c\n    136x = a\n    137y = c\n    138x = a\n    139y = c\n    140x = a\n    141y = c\n    142x = a\n    143y = c\n    144x = a\n    145y = c\n    146x = a\n    147y = c\n    148x = a\n    149y = c\n    150x = a\n    151y = c\n    152x = a\n    153y = c\n    154x = a\n    155y = c\n    156x = a\n    157y = c\n    158x = a\n    159y = c\n    160x = a\n    161y = c\n    162x = a\n    163y = c\n    164x = a\n    165y = c\n    166x = a\n    167y = c\n    168x = a\n    169y = c\n    170x = a\n    171y = c\n    172x = a\n    173y = c\n    174x = a\n    175y = c\n    176x = a\n    177y = c\n    178x = a\n    179y = c\n    180x = a\n    181y = c\n    182x = a\n    183y = c\n    184x = a\n    185y = c\n    186x = a\n    187y = c\n    188x = a\n    189y = c\n    190x = a\n    191y = c\n    192x = a\n    193y = c\n    194x = a\n    195y = c\n    196x = a\n    197y = c\n    198x = a\n    199y = c\n    200x = a\n    201y = c\n    202x = a\n    203y = c\n    204x = a\n    205y = c\n    206x = a\n    207y = c\n    208x = a\n    209y = c\n    210x = a\n    211y = c\n    212x = a\n    213y = c\n    214x = a\n    215y = c\n    216x = a\n    217y = c\n    218x = a\n    219y = c\n    220x = a\n    221y = c\n    222x = a\n    223y = c\n    224x = a\n    225y = c\n    226x = a\n    227y = c\n    228x = a\n    229y = c\n    230x = a\n    231y = c\n    232x = a\n    233y = c\n    234x = a\n    235y = c\n    236x = a\n    237y = c\n    238x = a\n    239y = c\n    240x = a\n    241y = c\n    242x = a\n    243y = c\n    244x = a\n    245y = c\n    246x = a\n    247y = c\n    248x = a\n    249y = c\n    250x = a\n    251y = c\n    252x = a\n    253y = c\n    254x = a\n    255y = c\n    256x = a\n    257y = c\n    258x = a\n    259y = c\n    260x = a\n    261y = c\n    262x = a\n    263",
        "num_ids": 1834
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    return str(max(0,int(a * b / max(1, min(b, c) - max(a, c))),int(a * d / max(1, min(d, b) - max(a, b)))))",
        "num_ids": 81
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a*b, c*d))",
        "num_ids": 34
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x, y = 1, 1\n    while a <= x <= b and c <= y <= d:\n        y += 1\n        x += 1\n    return str(x * y)",
        "num_ids": 62
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a <= b and c <= d:\n        return str(a * c)\n    elif a <= c and b <= d:\n        return str(a * b)\n    elif a <= d and b <= c:\n        return str(a * d)\n    elif b <= a and c <= d:\n        return str(b * c)\n    elif b <= c and a <= d:\n        return str(b * a)\n    elif b <= d and a <= c:\n        return str(b * d)\n    elif c <= a and b <= d:\n        return str(c * b)\n    elif c <= d and a <= b:\n        return str(c * a)\n    elif d <= a and b <= c:\n        return str(d * b)\n    elif d <= c and a <= b:\n        return str(d * a)\n",
        "num_ids": 234
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split(\" \"))\n    if a <= b and c <= d:\n        return str(a * c)\n    elif b <= a and c <= d:\n        return str(b * c)\n    else:\n        return str(a * d)",
        "num_ids": 77
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    result = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            result = max(result, x * y)\n    return str(result)",
        "num_ids": 74
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n\n    a_b_c_d = set(range(a, b + 1)) & set(range(c, d + 1))\n    m = max(a_b_c_d)\n    return str(m * max(a_b_c_d))",
        "num_ids": 86
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    difficulty_array = [int(x) for x in stdin.readline().strip().split(' ')]\n    count_arcs = 0\n    count_abc = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if difficulty_array[i] >= i + 1:\n                count_arcs += 1\n            else:\n                count_abc += 1\n        else:\n            if difficulty_array[i] < i + 1:\n                count_arcs += 1\n            else:\n                count_abc += 1\n    return str(count_arcs) +'' + str(count_abc)",
        "num_ids": 163
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *problem_difficulty = [int(val) for val in stdin.split()]\n    assert N % 2 == 0, \"N must be an even number.\"\n    assert len(problem_difficulty) == N, \"The number of problems must be equal to the number of difficulty levels.\"\n    # Create a dictionary of problem difficulty pairs.\n    problem_difficulty_dict = {i: problem_difficulty[i - 1] for i in range(1, N + 1)}\n    # Create a dictionary of problem difficulty pairs.\n    abc_difficulty_dict = {i: problem_difficulty[i - 1] for i in range(N, 2 * N)}\n    # Create a set of all possible combinations of K.\n    possible_combinations = set(range(1, 11))\n    # Number of problems with difficulty of K or higher.\n    arc_problems = 0\n    # Number of problems with difficulty of K or lower.\n    abc_problems = 0\n    # Loop over possible K values.\n    for K in possible_combinations:\n        # Get the number of problems with difficulty of K or higher.\n        arc_problems_for_K = 0\n        for i in range(1, N + 1):\n            # Increment the number of problems with difficulty of K or higher.\n            if i <= K:\n                arc_problems_for_K += problem_difficulty_dict[i]\n        # Check if the number of problems with difficulty of K or higher is equal to the number of problems with difficulty of K or lower.\n        if arc_problems_for_K == arc_problems:\n            # Increment the number of problems with difficulty of K or higher.\n            arc_problems += 1\n    # Loop over possible K values.\n    for K in possible_combinations:\n        # Get the number of problems with difficulty of K or lower.\n        abc_problems_for_K = 0\n        for i in range(N, 2 * N):\n            # Increment the number of problems with difficulty of K or lower.\n            if i >= K:\n                abc_problems_for_K += abc_difficulty_dict[i]\n        # Check if the number of problems with difficulty of K or lower is equal to the number of problems with difficulty of K or higher.\n        if abc_problems_for_K == abc_problems:\n            # Increment the number of problems with difficulty of K or lower.\n            abc_problems += 1\n    # Print the number of combinations of K and the number of problems with K or higher.\n    print(f\"{arc_problems}/{abc_problems}\")",
        "num_ids": 613
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = stdin.readline().strip().split()\n    countARCs = 0\n    countABC = 0\n    for i in d:\n        if int(i) >= 5:\n            countARCs += 1\n        else:\n            countABC += 1\n    print(countARCs == countABC)\n\nsolution('8\\n1 4 4 6 7')",
        "num_ids": 100
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *ds = [int(x) for x in stdin.split(\" \")]\n    return str(sum([1 for d in ds if d > ds[0]]))",
        "num_ids": 44
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    difficulty = [int(d) for d in stdin.split('\\n')[1].split()]\n\n    arcs = 0\n    abc = 0\n\n    for i in range(n):\n        if difficulty[i] > difficulty[0]:\n            arcs += 1\n        else:\n            abc += 1\n\n    if arcs == abc:\n        return str(arcs)\n    else:\n        return str(abc)\n\nprint(solution('6\\n9 1 4 4 6 7'))\n\n'''\n",
        "num_ids": 141
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    difficulty = list(map(int, stdin.readline().split()))\n    \n    return str(sum(1 for i, d in enumerate(difficulty) if i + 1 > d))\n\nassert(solution(\"3\\n2 1\") == \"1\")\nassert(solution(\"6\\n1 2 4 4 6 7\") == \"2\")\n\nprint(solution(\"8\\n1 1 2 2 3 3 4 4\"))\n\"\"\"\n\n\"\"\"\nPROBLEM STATEMENT:\nTakahashi made N problems for competitive programming.\nThe problems are numbered 1 to N, and the difficulty of Problem i is represented as an integer d_i (the higher, the harder).\nHe is dividing the problems into two categories by choosing an integer K, as follows:\n - A problem with difficulty K or higher will be for ARCs.\n - A problem with difficulty lower than K will be for ABCs.\nHow many choices of the integer K make the number of problems for ARCs and the number of problems for ABCs the same?\n\n-----Problem Statement-----\n - 2 \\leq N \\leq 10^5\n - N is an even number.\n - 1 \\leq d_i \\leq 10^5\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nd_1 d_2... d_N\n\n-----Output-----\nPrint the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n\n-----Sample Input-----\n6\n9 1 4 4 6 7\n\n-----Sample Output-----\n2\n\nIf we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.\nThus, the answer is 2.\n\"\"\"\n\n\ndef",
        "num_ids": 443
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *c = [int(x) for x in stdin.split()]\n\n    diff = {(x + 1): c[x] for x in range(N)}\n\n    # Each value of K has to be >= d_1 + d_2 +... + d_N\n    # and of course, d_1 + d_2 +... + d_N = N\n    # => K = N - d_1 - d_2 -... - d_N\n    # => K = N - d_1 -... - d_N - 2\n    # So, we have to remove d_1,..., d_N-1 from the equation above.\n    # We can then obtain the following:\n    # d_i - d_1 +... + d_N - 1 = N - 2\n    # d_i - (N-1) = 2\n    # => d_i = 2 - (N-1)\n    # => d_i = 2 - (N-1) - 1 = N - 2\n    # => d_i = N - 3\n\n    return N - 3\n",
        "num_ids": 252
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n    N = int(inputs[0])\n    d_arr = [int(x) for x in inputs[1:]]\n    if (N % 2!= 0):\n        return \"Not Valid\"\n    k = int(N / 2)\n    a = b = 0\n    for i in range(len(d_arr)):\n        if d_arr[i] <= k:\n            a += 1\n        else:\n            b += 1\n    if a == b:\n        return str(a)\n    else:\n        return \"Not Valid\"\n\nprint(solution(input()))\n",
        "num_ids": 153
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    d_arr = list(map(int, stdin.readline().split()))\n    p_arr = [2 * i + 1 for i in range(N // 2)]\n    res = 0\n    for d in d_arr:\n        res += len(filter(lambda p: p >= d, p_arr))\n        p_arr = [i for i in p_arr if i < d]\n    print(res)\n\n\nsolution(input())\n",
        "num_ids": 120
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    k = int(N ** 0.5)\n    cnt = 0\n    for i in range(k, -1, -1):\n        for j in range(i, -1, -1):\n            if sum(d[:i]) == sum(d[i:j]) and sum(d[:j]) == sum(d[j:N]):\n                cnt += 1\n    return str(cnt)\n",
        "num_ids": 116
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    times = [a[0]]\n    for i in range(1, n):\n        times.append(a[i] - times[-1])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if times[i] <= l <= times[j]:\n                ans += 1\n    return str(ans)\n\n\nprint(solution(stdin))\n",
        "num_ids": 142
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    n += 1\n    max_good_times = 0\n    for i in range(n):\n        start, end = max(l, a[i] - 1), min(r, a[i] + 1)\n        max_good_times = max(max_good_times, end - start)\n    return str(max_good_times)",
        "num_ids": 117
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = []\n    for i in range(n):\n        result.append(a[i])\n        if a[i] < l or a[i] >= r:\n            for j in range(1, n):\n                result[i] += a[j]\n    return max(result)",
        "num_ids": 105
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def sleep_times(sleep_hours):\n        return (sleep_hours - 1) + (sleep_hours - 1) * sleep_hours // 2\n\n    n, h, l, r = map(int, stdin.split())\n    sleep_hours = list(map(int, stdin.split()))\n    solution = sleep_times(r)\n    for i in range(1, n):\n        solution = max(solution, sleep_times(l) + sleep_hours[i])\n    return str(solution)\n\n\nassert solution(\n    \"7 24 21 23\"\n) == \"3\"\nassert solution(\n    \"16 17 14 20 20 11 22\"\n) == \"3\"\nassert solution(\n    \"20 17 15 14 19 16 13 17\"\n) == \"5\"\nassert solution(\n    \"20 17 19 19 17 17 17 17\"\n) == \"5\"\nassert solution(\n    \"21 22 22 22 22 22 22 22\"\n) == \"5\"\nassert solution(\n    \"21 22 22 22 22 22 22 22\"\n) == \"6\"\nassert solution(\n    \"22 22 22 22 22 22 22 22\"\n) == \"6\"\nassert solution(\n    \"22 22 22 22 22 22 22 22\"\n) == \"7\"\nassert solution(\n    \"23 22 22 22 22 22 22 22\"\n) == \"7\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22 22\"\n) == \"8\"\nassert solution(\n    \"24 22 22 22 22 22 22",
        "num_ids": 1389
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(n) for n in stdin.split()]\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        if l <= a[i] < r:\n            count += 1\n\n    return str(count)\n\n\ndef",
        "num_ids": 81
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdin\n\nprint(solution(input()))\n\"\"\"\n\n\ndef",
        "num_ids": 23
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    result = 1\n    max_h = max(l, r)\n    for x in range(len(a)):\n        a[x] += max_h\n    a.sort()\n    i = 0\n    count = 1\n    while i < len(a) - 1:\n        if a[i + 1] - a[i] == 1:\n            count += 1\n            i += 1\n        else:\n            result = max(result, count)\n            count = 1\n            i += 1\n    return str(result)\n\n\n\nprint(solution(input()))\n",
        "num_ids": 178
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def longest_good_sleep_segment(lst: list) -> int:\n        start = 0\n        seg_len = 0\n        while True:\n            for start in range(len(lst)):\n                if lst[start] > lst[seg_len]:\n                    break\n            if start == len(lst) - 1:\n                break\n            end = start\n            while end < len(lst) - 1:\n                if lst[end] < lst[end + 1]:\n                    break\n                end += 1\n            if end - start > seg_len:\n                seg_len = end - start\n            start = end + 1\n        return seg_len\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.insert(0, 0)\n    a.append(h)\n    seg_len = longest_good_sleep_segment(a)\n    return str(seg_len)\n\n\nassert(solution(input) == \"3\")\n\"\"\"\n\n\"\"\"\nTask\n\nThere are $n$ days in a year. On the $i$-th day, Vova has a $k$-th breakfast. She can choose any $l$-th hour to have breakfast ($l$ \\le k \\le l + 1$) and she can choose any $r$-th hour to have breakfast ($r$ \\le k \\le r + 1$).\n\nYou have to determine how many good sleeping times Vova can obtain if she sleeps optimally.\n\nInput\n\nThe first line of the input contains three integers $n$ ($1 \\le n \\le 10000$), $k$ ($1 \\le k \\le 10000$), $l$ ($1 \\le l \\le h$), where $n$ is the number of days, $k$ is the number of breakfast times, $l$ is the start time of the first breakfasts, and $h$ is the end time of the last breakfasts.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le h$), where $a_i$ is the number of hours between breakfasts.\n\nOutput\n\nPrint one integer \u2014 the maximum number of good sleeping times Vova can obtain if she sleeps optimally.\n\nExample\n\nInput\n\n7 24 21 23\n16 17 14 20 20 11 22\n\nOutput\n\n3\n\nExplanation\n\nThe story starts from $t=0$. Then Vova goes to sleep after $a_1 - 1$ hours, now the time is $15$. This time is not good. Then Vova goes to sleep after $a_2 - 1$ hours, now the time is $15 + 16 = 7$. This time is not good. Then Vova goes to sleep after $a_3$ hours, now the time is $7 + 14 = 21$. This time is good. Then Vova goes to sleep after $a_4$ hours, now the time is $21 + 19 = 16$. This time is not good. Then Vova goes to sleep after $a_5$ hours, now the time is $16 + 20 = 12$. This time is not good. Then Vova goes to sleep after $a_6$ hours, now the time is $12 + 11 = 23$. This time is good. Then Vova goes to sleep after $a_7$ hours, now the time is $23 + 22 = 21$. This time is also good.\n\nThe maximum number of good times in the example is $3$.\n\"\"\"\n",
        "num_ids": 833
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    m = 1\n    for i in range(1, n):\n        if a[i] >= a[i - 1] * 2:\n            m = max(m, i)\n    print(m)",
        "num_ids": 87
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Computes the maximum number of problems in the contest which can be assembled with the given problemset\n\n    :param stdin: the input string\n    :return: the maximum number of problems\n    \"\"\"\n    num_problems = stdin.strip()\n    problems = [int(stdin.strip()) for stdin in stdin.split(' ')]\n    difficulties = [int(stdin.strip()) for stdin in stdin.split(' ')]\n\n    max_num_problems = max(problems)\n    for i in range(max_num_problems, 0, -1):\n        possible_problems = [j for j in range(1, len(problems)) if difficulties[j] <= i and problems[j] % i == 0]\n        if possible_problems:\n            return len(possible_problems)\n    return 1",
        "num_ids": 203
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alphas = sorted(map(int, stdin.split(\" \")))\n    l = len(alphas)\n    if l == 0:\n        return \"\"\n    elif l == 1:\n        return \"1\"\n    elif l == 2:\n        if alphas[0] < 2 * alphas[1]:\n            return \"1\"\n        else:\n            return \"2\"\n    else:\n        m = l // 2\n        max_left = alphas[0]\n        for i in range(1, m):\n            max_left = max(max_left, alphas[i] * 2)\n        max_right = alphas[l - 1]\n        for i in range(l - 2, m, -1):\n            max_right = max(max_right, alphas[i] * 2)\n        count_left = l - m\n        count_right = m - 1\n        if max_left * 2 <= max_right:\n            count_right = m\n        if max_left > max_right:\n            count_left = m\n        return str(count_left + count_right)\n",
        "num_ids": 273
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    p = a[0]\n    for i in range(1, n):\n        if a[i] < p or a[i] * 2 < p:\n            p = a[i]\n    return str(p)\n\n\nprint(solution(\"2\\n1 2 5 6 7 10 21 23 24 49\\n2 10 50 110 250\"))\n",
        "num_ids": 107
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    count = 0\n    last = 0\n    for i in range(n):\n        if a[i] >= 2 * last and a[i] <= a[i + 1] * 2:\n            count += 1\n        last = a[i]\n    return str(count)",
        "num_ids": 106
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function",
        "num_ids": 6
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split(' ')))\n    m = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] * 2 <= l[j] <= l[i] * 2 * 2:\n                m -= 1\n    return str(m)",
        "num_ids": 99
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(a_i) for a_i in stdin[1:]]\n    a.sort()\n    l = len(a)\n    if l == 1:\n        return str(1)\n    if l == 2:\n        if a[1] < 2 * a[0]:\n            return str(1)\n        else:\n            return str(2)\n    ans = 1\n    for i in range(l - 1, -1, -1):\n        if a[i] > 2 * a[i - 1]:\n            ans = max(ans, i)\n    return str(ans)\n",
        "num_ids": 166
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nfrom sys import stdin\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\ndef",
        "num_ids": 42
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    problems = [int(x) for x in stdin.split()]\n    print(len(problems))\n    return ''",
        "num_ids": 32
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.strip().split(\" \")]\n    result = None\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < result or result == None:\n                result = lcm(a[i], a[j])\n                i_result = i\n                j_result = j\n    return f\"{i_result + 1} {j_result + 1}\"\n\ndef",
        "num_ids": 129
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(str(ans) for ans in solve(map(int, stdin.split())))\n\ndef",
        "num_ids": 29
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    m = a[0]\n\n    for x in a:\n        m = lcm(m, x)\n\n    pairs = {}\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if m % a[i] == 0 and m % a[j] == 0:\n                if pairs.get((i, j)) is None:\n                    pairs[(i, j)] = 1\n                else:\n                    pairs[(i, j)] += 1\n\n    pairs = sorted(pairs.items(), key=lambda x: x[1], reverse=True)\n\n    if len(pairs) == 0:\n        return None\n\n    return str(pairs[0][0][0]) +'' + str(pairs[0][0][1])\n\n\ndef",
        "num_ids": 226
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    minimum = min(a)\n    maximum = max(a)\n    i = 0\n    j = 0\n    while True:\n        if (i == j or i % minimum == 0 or j % minimum == 0) and i <= j:\n            break\n        if i < j:\n            if (i < minimum and j % minimum == 0) or (i % minimum == 0 and j < maximum):\n                i += 1\n            else:\n                j += 1\n        else:\n            if j < minimum:\n                i += 1\n            else:\n                j += 1\n    print(i, j)",
        "num_ids": 167
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = (-1, -1)\n    for i in range(1, n):\n        if a[i] < a[0] * a[-1]:\n            if a[-1] * a[i] < ans[1] * ans[0]:\n                ans = (a[i], a[-1])\n    return \" \".join(map(str, ans))",
        "num_ids": 128
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    a.sort()\n    r = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                r = max(r, a[i] * a[j])\n    if r == -1:\n        return \"NO\"\n    return str(r) + \" \" + str(n-r)\n\nimport sys",
        "num_ids": 141
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n",
        "num_ids": 4
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    print(str(a[-1]//gcd(a[-1], a[-2])))",
        "num_ids": 64
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    ans = (1, 2)\n    for i in range(1, n):\n        if arr[i] > lcm(arr[i - 1], arr[i]):\n            ans = (i, i + 1)\n    return''.join([str(x) for x in ans])",
        "num_ids": 107
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    string = stdin.readline().strip()\n\n    # Find prefix with 0s and 1s\n    zeros = 0\n    ones = 0\n\n    for i in range(n):\n        if string[i] == \"0\":\n            zeros += 1\n        else:\n            ones += 1\n\n    # Find suffix with 0s and 2s\n    zeros_suffix = 0\n    ones_suffix = 0\n\n    for i in range(n - 1, -1, -1):\n        if string[i] == \"0\":\n            zeros_suffix += 1\n        else:\n            ones_suffix += 1\n\n    # if string has 3 ones, swap two zeros\n    if ones % 3 == 0:\n        zeros_suffix -= 1\n        ones_suffix += 2\n    # if string has 3 zeros, swap two ones\n    elif zeros % 3 == 0:\n        ones_suffix -= 1\n        zeros_suffix += 2\n\n    result = \"\"\n\n    for i in range(n):\n        if string[i] == \"0\":\n            result = result + \"0\" * zeros_suffix\n        elif string[i] == \"1\":\n            result = result + \"1\" * ones_suffix\n        elif string[i] == \"2\":\n            result = result + \"2\" * ones_suffix\n\n    return result\n",
        "num_ids": 335
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line: list[str] = stdin.strip().split('\\n')\n    n: int = int(line[0])\n    s: str = line[1]\n    result: str = ''.join(['' for _ in range(n)])\n    if n == 3:\n        if s == '012':\n            return '021'\n        elif s == '021':\n            return '012'\n    if n % 3!= 0:\n        return result\n    s: list[str] = [s[i:i + 3] for i in range(0, n, 3)]\n    if n % 3 == 1:\n        s[0], s[1] = s[1], s[0]\n    elif n % 3 == 2:\n        s[1], s[2] = s[2], s[1]\n    for i in range(n // 3):\n        if s[i] == '012':\n            s[i] = '021'\n        elif s[i] == '021':\n            s[i] = '012'\n    for i in range(n):\n        result += s[i]\n    return result\n",
        "num_ids": 272
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(stdin)\n    a = b = c = 0\n    for i in s:\n        if i == \"0\":\n            a += 1\n        elif i == \"1\":\n            b += 1\n        elif i == \"2\":\n            c += 1\n    ans = \"\"\n    for i in range(3):\n        if i == 0 and b > c:\n            ans += \"1\" * a + \"0\" * c\n        elif i == 1 and c > b:\n            ans += \"0\" * b + \"2\" * c\n        else:\n            ans += \"2\" * b + \"1\" * c\n    return ans",
        "num_ids": 165
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    s = list(s)\n    if len(s) == 1:\n        return s[0]\n    s = \"\".join(s)\n    s = int(s)\n    s = str(s)\n    s = list(s)\n    if len(s) == 1:\n        return s[0]\n    if len(s) == 2:\n        return \"0\"+s[0]+s[1]\n    if s.count(\"0\") > s.count(\"1\"):\n        if s.count(\"1\") > s.count(\"2\"):\n            return \"0\"+s[1]+s[2]\n        else:\n            return \"1\"+s[1]+s[2]\n    else:\n        if s.count(\"2\") > s.count(\"1\"):\n            return \"0\"+s[1]+s[2]\n        else:\n            return \"1\"+s[1]+s[2]",
        "num_ids": 242
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    s_ = '0' * n + '1' * n + '2' * n\n    s, s_ = s_, s\n    while s!= s_:\n        s_ = s_[:n] + '2' + s_[n + n:]\n        s = s[:n] + '1' + s[n + n:]\n    return s",
        "num_ids": 108
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin[0])\n    s = stdin[1]\n    solution = ''\n\n    for i in range(len(s)):\n        if s[i] == '0':\n            if number > 0:\n                solution += '1'\n                number -= 1\n            else:\n                solution += '2'\n        elif s[i] == '1':\n            if number > 1:\n                solution += '2'\n                number -= 2\n            else:\n                solution += '0'\n        elif s[i] == '2':\n            if number > 2:\n                solution += '0'\n                number -= 3\n            else:\n                solution += '1'\n    return solution\n\n\nprint(solution(input()))",
        "num_ids": 183
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return min_replace_to_make_balanced_ternary(s, n)\n\ndef",
        "num_ids": 49
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = [int(c) for c in s]\n    ans = ''.join(['0' if i == 1 else '1' if i == 0 else '2' for i in s])\n    return ans\n\n\n\ndef",
        "num_ids": 78
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n % 3 == 0:\n        return s\n    else:\n        c = 0\n        cnt0 = 0\n        cnt1 = 0\n        cnt2 = 0\n        for c in s:\n            if c == '0':\n                cnt0 += 1\n            elif c == '1':\n                cnt1 += 1\n            else:\n                cnt2 += 1\n        if n % 3 == 1:\n            cnt0 += (n - cnt0) // 3\n            cnt1 += (n - cnt1) // 3\n            cnt2 += (n - cnt2) // 3\n        elif n % 3 == 2:\n            cnt0 += (n - cnt0) // 3\n            cnt1 += (n - cnt1) // 3\n            cnt2 += (n - cnt2) // 3\n        else:\n            cnt0 += (n - cnt0) // 3\n            cnt1 += (n - cnt1) // 3\n            cnt2 += (n - cnt2) // 3\n        ans = '0' * cnt0 + '1' * cnt1 + '2' * cnt2\n        return ans\n\n\nassert (solution('') == '')\nassert (solution('0') == '0')\nassert (solution('11') == '110')\nassert (solution('22') == '220')\nassert (solution('33') == '300')\nassert (solution('43') == '400')\nassert (solution('43') == '400')\nassert (solution('44') == '420')\nassert (solution('43') == '400')\nassert (solution('3') == '111')\nassert (solution('222') == '221')\nassert (solution('333') == '333')\nassert (solution('4422') == '4402')\nassert (solution('44333') == '4443')\nassert (solution('4444') == '4444')\nassert (solution('44444') == '4444')\nassert (solution
        "num_ids": 1622
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n",
        "num_ids": 4
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if N == 1:\n        return 1\n    if M == 1:\n        return A[1]\n    if A[0] == A[1]:\n        return A[0] * (M - 1)\n    if A[-1] == A[-2]:\n        return A[-1] * (N - 1)\n    if A[-1] == A[-2] == A[-3]:\n        return A[-1] * (N - 2)\n    if A[-1] == A[-2] == A[-3] == A[-4]:\n        return A[-1] * (N - 3)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5]:\n        return A[-1] * (N - 4)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6]:\n        return A[-1] * (N - 5)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7]:\n        return A[-1] * (N - 6)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8]:\n        return A[-1] * (N - 7)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9]:\n        return A[-1] * (N - 8)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10]:\n        return A[-1] * (N - 9)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11]:\n        return A[-1] * (N - 10)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12]:\n        return A[-1] * (N - 11)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13]:\n        return A[-1] * (N - 12)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13] == A[-14]:\n        return A[-1] * (N - 13)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13] == A[-14] == A[-15]:\n        return A[-1] * (N - 14)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13] == A[-14] == A[-15] == A[-16]:\n        return A[-1] * (N - 15)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13] == A[-14] == A[-15] == A[-16] == A[-17]:\n        return A[-1] * (N - 16)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13] == A[-14] == A[-15] == A[-16] == A[-17] == A[-18]:\n        return A[-1] * (N - 17)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13] == A[-14] == A[-15] == A[-16] == A[-17] == A[-18] == A[-19]:\n        return A[-1] * (N - 18)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[-6] == A[-7] == A[-8] == A[-9] == A[-10] == A[-11] == A[-12] == A[-13] == A[-14] == A[-15] == A[-16] == A[-17] == A[-18] == A[-19] == A[-20]:\n        return A[-1] * (N - 19)\n    if A[-1] == A[-2] == A[-3] == A[-4] == A[-5] == A[",
        "num_ids": 1674
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, M = [int(i) for i in stdin[0].split()]\n    a = [int(i) for i in stdin[1].split()]\n    memo = [0] * (N + 1)\n    memo[0] = 1\n    memo[1] = 1\n    memo[2] = 2\n    for i in range(3, N + 1):\n        memo[i] = (memo[i - 1] + memo[i - 2] + memo[i - 3]) % 1000000007\n    return str(memo[N])",
        "num_ids": 151
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import accumulate\n    n, m = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10**5:\n        raise ValueError('N should be between 1 and 10^5')\n    if m < 1 or m > n-1:\n        raise ValueError('M should be between 1 and N-1')\n    a = [int(x) for x in stdin.split()]\n    s = [x for x in accumulate(a)]\n    l = [s[x] - s[x-1] for x in range(1, n+1)]\n    return str(l.count(0) % 1000000007)",
        "num_ids": 160
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of ways to climb up the stairs, under the condition,\n    that there are no broken steps.\n\n    This is a brute force solution, but it is simple and fast.\n    \"\"\"\n    n, m = list(map(int, stdin.split(\" \")))\n    broken = list(map(int, stdin.split(\" \")))\n    ways = [1]\n    for i in range(1, n):\n        tmp = [0] * (n + 1)\n        for j in range(0, i + 1):\n            if j > 0 and j - 1 not in broken:\n                tmp[j] = (tmp[j] + ways[j - 1]) % 1000000007\n            if j > 1 and j - 2 not in broken:\n                tmp[j] = (tmp[j] + ways[j - 2]) % 1000000007\n        ways = tmp\n    return str(ways[-1])\n\n\ndef",
        "num_ids": 221
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n    remainders = [1] * (N + 1)\n    remainders[0] = 0\n    remainders[1] = 1\n    mod = 1000000007\n    for _ in range(M):\n        remainders[2] = (remainders[2] + remainders[1]) % mod\n        remainders[3] = (remainders[3] + remainders[2]) % mod\n        remainders[4] = (remainders[4] + remainders[3]) % mod\n        remainders[5] = (remainders[5] + remainders[4]) % mod\n        remainders[6] = (remainders[6] + remainders[5]) % mod\n    print(remainders[N])\n    return ''",
        "num_ids": 227
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = map(int, stdin.split(' '))\n    l = [0] * (n + 1)\n    l[0] = 1\n    l[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if a[j] >= i - j:\n                l[i] += l[i - j]\n            if a[j] < i - j:\n                break\n    return str(l[n])",
        "num_ids": 134
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    n, m = int(data[0]), int(data[1])\n    data = [int(x) for x in data[2:]]\n    ways = 0\n    for i in range(m, n-1, 2):\n        ways += climb(data, i)\n    return str(ways)\n\ndef",
        "num_ids": 86
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    m = int(lines[1])\n    steps = map(int, lines[2:])\n    if n == 0:\n        return \"1\"\n    if n == 1:\n        return str(steps[0])\n    if n == 2:\n        return str((steps[0] + steps[1]) % 1_000_000_007)\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for step in steps:\n        for j in range(1, min(step, n) + 1):\n            ways[j] += ways[j - 1]\n    return str(ways[n - 1] % 1_000_000_007)\n\ndef",
        "num_ids": 188
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    memo = [0] * (n + 1)\n    return memo[n] % 1000000007",
        "num_ids": 67
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(\" \")]\n    if n < 1:\n        return \"\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if m == 1:\n        return \"1\"\n    if m == 2:\n        return \"2\"\n    return str((factorial(n) % 1000000007) * (factorial(m) % 1000000007) % 1000000007)\n\ndef",
        "num_ids": 121
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split(\" \")]\n    return str(max(x - k * d, -(x - k * d)))",
        "num_ids": 44
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    x_end = (x + d) % (10 ** 16)\n    x_start = x % (10 ** 16)\n    if x_end < x_start:\n        x_end += 10 ** 16\n    return str(x_end - x_start)\n\nprint(solution(input()))",
        "num_ids": 90
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    min_dist = abs(x)\n    for _ in range(k):\n        x += d if d > 0 else -d\n        min_dist = min(min_dist, abs(x))\n    return str(min_dist)",
        "num_ids": 73
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    X, K, D = [int(x) for x in stdin.split()]\n    if D < 0:\n        return max(-X, -X - D)\n    return min(X, X + D)",
        "num_ids": 59
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (X, K, D) = (int(x) for x in stdin.split())\n    if K > D:\n        D, K = K, D\n    D *= -1\n    return '%d' % min(abs(X), abs(X + D), abs(X - D))\n\nprint(solution(stdin.readline().strip()))\n\"\"\"\n\nimport sys\n\ndef",
        "num_ids": 97
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    return str(min(int(line[0]), int(line[1])))\n\nprint(solution('6 2 4'))\n",
        "num_ids": 44
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum absolute value of the coordinate of the destination.\n    >>> solution('6 2 4')\n    2\n    \"\"\"\n    x, k, d = [int(i) for i in stdin.split()]\n    return min(abs(x + d), abs(x - d))\n\n\"\"\"\nTest input\n\n6 2 4\n\n6 4 4\n\"\"\"\n",
        "num_ids": 88
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(i) for i in stdin.split(\" \")]\n    # x, k, d = map(int, stdin.split())\n    dist = x + d\n    if dist < 0:\n        dist = -dist\n    return str(dist - (k-1)*d)",
        "num_ids": 75
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        raise ValueError\n    n = n * 2\n    ans = 0\n    while n > 1:\n        ans += 1\n        n //= 2\n    return str(ans)\n\nassert(solution('') == '0')\nassert(solution('11') == '1')\nassert(solution('14') == '0')\nassert(solution('61441') == '2')\nassert(solution('571576') == '10')\nassert(solution('2128506') == '3')\n\"\"\"\n",
        "num_ids": 139
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    # n/m = r\n    # m = n/r\n    # r = n/m\n    # n = r*m\n    n = str(n)\n    r = int(n[-1])\n    m = int(n[:-1])\n    if m == 0:\n        return '0'\n    return str(r*m)\n\nimport sys\nlines = sys.stdin.readlines()\nn = int(lines[0])\nfor line in lines[1:]:\n    print(solution(line.strip()))\n",
        "num_ids": 152
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while True:\n        k += 1\n        n += k * k * k\n        if n >= 2_000_000_000:\n            break\n    return str(k)\n\n\ndef",
        "num_ids": 59
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "num_ids": 6
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(10 - n % 10)\n\ndef",
        "num_ids": 23
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) // 3)\n\nassert(solution(\"11\") == \"2\")\nassert(solution(\"14\") == \"0\")\nassert(solution(\"61441\") == \"2\")\nassert(solution(\"571576\") == \"10\")\nassert(solution(\"2128506\") == \"3\")\n\nprint(\"All tests passed successfully.\")\n",
        "num_ids": 94
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of digits in the sum of the digits of the input integer.\"\"\"\n    return str(len(str(sum([int(x) for x in stdin]))))",
        "num_ids": 42
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n * 3 + 1\n        count += 1\n\n    return count\n\nassert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 2\nassert solution(571576) == 10\nassert solution(2128506) == 3\nassert solution(2128508) == 2\nassert solution(2128509) == 3\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509) == 4\nassert solution(22128509)",
        "num_ids": 1922
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    n = 0\n    n = n + 1 if (stdin & (1 << n)) else n\n    while (n < 32):\n        n += 1\n        n = n + 1 if (stdin & (1 << n)) else n\n    return n\n\nprint(solution(input()))\n",
        "num_ids": 81
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)\n\n\ndef",
        "num_ids": 27
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for x in range(1, 31):\n        if x**a <= 30:\n            return x**a\n    return None",
        "num_ids": 39
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(a+1)*(a+1)",
        "num_ids": 26
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a * (a + 1) // 2\n",
        "num_ids": 22
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = [a % 10, a % 100 // 10, a // 100]\n    c = [x for x in b if x > 0]\n    d = [x for x in b if x < 10]\n    e = len(c)\n    f = sum(d)\n    g = sum(c)\n    h = sum(b)\n    i = sum([x for x in b if x > 0])\n    j = sum([x for x in b if x < 10])\n    k = sum(b)\n    l = sum([x for x in b if x > 0])\n    m = sum([x for x in b if x < 10])\n    n = sum([x for x in b if x > 0])\n    o = sum([x for x in b if x < 10])\n    p = sum(b)\n    q = sum([x for x in b if x > 0])\n    r = sum([x for x in b if x < 10])\n    s = sum([x for x in b if x > 0])\n    t = sum([x for x in b if x < 10])\n    u = sum([x for x in b if x > 0])\n    v = sum([x for x in b if x < 10])\n    w = sum([x for x in b if x > 0])\n    x = sum([x for x in b if x < 10])\n    y = sum([x for x in b if x > 0])\n    z = sum([x for x in b if x < 10])\n    return str(a)",
        "num_ids": 369
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\n\nsolution(\"\") # \"\"\nsolution(\"1\") # \"1\"\nsolution(\"-7\") # \"-7\"\nsolution(\"3\") # \"3\"\nsolution(\"4\") # \"4\"\nsolution(\"26\") # \"27\"\nsolution(\"-26\") # \"-27\"\n\"\"\"\n",
        "num_ids": 83
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(((3*(a+b+c))//2)))",
        "num_ids": 20
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(a)\n    return ''",
        "num_ids": 19
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(a*a*a)",
        "num_ids": 23
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + 3)",
        "num_ids": 18
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(bin(n)[2:])\n",
        "num_ids": 24
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    one_digit = number % 10\n    if one_digit == 0:\n        return 0\n    else:\n        return 1\n",
        "num_ids": 40
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a % 2 == 0) and (a % 3 == 0):\n        return '0'\n    else:\n        return '1'",
        "num_ids": 43
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(bin(a)[2:]).count(\"1\") % 2\n",
        "num_ids": 28
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return 0\n    if a == 2:\n        return 1\n    if a % 2 == 1:\n        return 1\n    else:\n        return 0",
        "num_ids": 52
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n\n    if a == '9':\n        return '1'\n\n    if a == '10':\n        return '0'\n\n    if a == '11':\n        return '0'\n\n    if a == '12':\n        return '1'\n\n    if a == '13':\n        return '1'\n\n    if a == '14':\n        return '0'\n\n    if a == '15':\n        return '0'\n\n    if a == '16':\n        return '0'\n\n    if a == '17':\n        return '1'\n\n    if a == '18':\n        return '0'\n\n    if a == '19':\n        return '0'\n\n    if a == '20':\n        return '1'\n\n    if a == '21':\n        return '0'\n\n    if a == '22':\n        return '0'\n\n    if a == '23':\n        return '1'\n\n    if a == '24':\n        return '0'\n\n    if a == '25':\n        return '0'\n\n    if a == '26':\n        return '0'\n\n    if a == '27':\n        return '1'\n\n    if a == '28':\n        return '0'\n\n    if a == '29':\n        return '0'\n\n    if a == '30':\n        return '0'\n\n    if a == '31':\n        return '1'\n\n    if a == '32':\n        return '0'\n\n    if a == '33':\n        return '0'\n\n    if a == '34':\n        return '0'\n\n    if a == '35':\n        return '0'\n\n    if a == '36':\n        return '0'\n\n    if a == '37':\n        return '1'\n\n    if a == '38':\n        return '0'\n\n    if a == '39':\n        return '0'\n\n    if a == '40':\n        return '0'\n\n    if a == '41':\n        return '0'\n\n    if a == '42':\n        return '0'\n\n    if a == '43':\n        return '0'\n\n    if a == '44':\n        return '0'\n\n    if a == '45':\n        return '0'\n\n    if a == '46':\n        return '0'\n\n    if a == '47':\n        return '1'\n\n    if a == '48':\n        return '0'\n\n    if a == '49':\n        return '0'\n\n    if a == '50':\n        return '0'\n\n    if a == '51':\n        return '0'\n\n    if a == '52':\n        return '0'\n\n    if a == '53':\n        return '0'\n\n    if a == '54':\n        return '0'\n\n    if a == '55':\n        return '0'\n\n    if a == '56':\n        return '0'\n\n    if a == '57':\n        return '0'\n\n    if a == '58':\n        return '0'\n\n    if a == '59':\n        return '0'\n\n    if a == '60':\n        return '0'\n\n    if a == '61':\n        return '0'\n\n    if a == '62':\n        return '0'\n\n    if a == '63':\n        return '0'\n\n    if a == '64':\n        return '0'\n\n    if a == '65':\n        return '0'\n\n    if a == '66':\n        return '0'\n\n    if a == '67':\n        return '1'\n\n    if a == '68':\n        return '0'\n\n    if a == '69':\n        return '0'\n\n    if a == '70':\n        return '0'\n\n    if a == '71':\n        return '0'\n\n    if a == '72':\n        return '0'\n\n    if a == '73':\n        return '0'\n\n    if a == '74':\n        return '0'\n\n    if a == '75':\n        return '0'\n\n    if a == '76':\n        return '0'\n\n    if a == '77':\n        return '0'\n\n    if a == '78':\n        return '0'\n\n    if a == '79':\n        return '0'\n\n    if a == '80':\n        return '0'\n\n    if a == '81':\n        return '0'\n\n    if a == '82':\n        return '0'\n\n    if a == '83':\n        return '0'\n\n    if a == '84':\n        return '0'\n\n    if a == '85':\n        return '0'\n\n    if a == '86':\n        return '0'\n\n    if a == '87':\n        return '0'\n\n    if a == '88':\n        return '0'\n\n    if a == '89':\n        return '0'\n\n    if a == '90':\n        return '0'\n\n    if a == '91':\n        return '0'\n\n    if a == '92':\n        return '0'\n\n    if a == '93':\n        return '0'\n\n    if a == '94':\n        return '0'\n\n    if a == '95':\n        return '0'\n\n    if a == '96':\n        return '0'\n\n    if a == '97':\n        return '0'\n\n    if a == '98':\n        return '0'\n\n    if a == '99':\n        return '0'\n\n    if a == '100':\n        return '0'\n\n    if a == '101':\n        return '0'\n\n    if a == '102':\n        return '0'\n\n    if a == '103':\n        return '0'\n\n    if a == '104':\n        return '0'\n\n    if a == '105':\n        return '0'\n\n    if a == '106':\n        return '0'\n\n    if a == '107':\n        return '0'\n\n    if a == '108':\n        return '0'\n\n    if a == '109':\n        return '0'\n\n    if a == '110':\n        return '0'\n\n    if a == '111':\n        return '0'\n\n    if a == '112':\n        return '0'\n\n    if a == '113':\n        return '0'\n\n    if a == '114':\n        return '0'\n\n    if a == '115':\n        return '0'\n\n    if a == '116':\n        return '0'\n\n    if a == '117':\n        return '0'\n\n    if a == '118':\n        return '0'\n\n    if a == '119':\n        return '0'\n\n    if a == '120':\n        return '0'\n\n    if a == '121':\n        return '0'\n\n    if a == '122':\n        return '0'\n\n    if a == '123':\n        return '0'\n\n    if a == '124':\n        return '0'\n\n    if a == '125':\n        return '0'\n\n    if a == '126':\n        return '0'\n\n    if a == '127':\n        return '0'\n\n    if a == '128':\n        return '0'\n\n    if a == '129':\n        return '0'\n\n    if a == '130':\n        return '0'\n\n    if a == '131':\n        return '0'\n\n    if a == '132':\n        return '0'\n\n    if a == '133':\n        return '0'\n\n    if a == '134':\n        return '0'\n\n    if a == '135':\n        return '0'\n\n    if a == '136':\n        return '0'\n\n    if a == '137':\n        return '0'\n\n    if a == '138':\n        return '0'\n\n    if a == '139':\n        return '0'\n\n    if a == '140':\n        return '0'\n\n    if a == '141':\n        return '0'\n\n    if a == '142':\n        return '0'\n\n    if a == '143':\n        return '0'\n\n    if a == '144':\n        return '0'\n\n    if a == '145':\n        return '0'\n\n    if a == '146':\n        return '0'\n\n    if a == '147':\n        return '0'\n\n    if a == '148':\n        return '0'\n\n    if a",
        "num_ids": 1970
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(1 if int(stdin) % 2 else 0)\n\nsolution(input())\n",
        "num_ids": 24
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('13')\n    '1'\n    >>> solution('927')\n    '1'\n    >>> solution('48')\n    '0'\n    \"\"\"\n    return '1' if int(stdin) < 10 else '0'\n",
        "num_ids": 62
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a % 2 == 0:\n        return '0'\n    else:\n        return '1'\n",
        "num_ids": 37
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    return '0' if n > 999 else '1'",
        "num_ids": 23
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(\" \")))\n    # invert the array\n    a.reverse()\n    a = a + a\n    # now we can create all possible sequences\n    return sum(a)\n\n\nprint(solution(\"\"))\n\n\"\"\"\n",
        "num_ids": 81
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n",
        "num_ids": 8
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5 3 1\")\n    4\n    \"\"\"\n    return \"\".join(map(str, [2, 3, 5, 1]))\n",
        "num_ids": 41
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    cnt = 0\n\n    for ai in a:\n        if ai >= 4:\n            cnt += 1\n\n    return str(cnt)\n\nsolution('')\n",
        "num_ids": 80
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(item) for item in stdin.readline().strip().split()]\n    l = [arr[arr[i] - 1] for i in range(n)]\n    return \" \".join([str(i) for i in l])\n\nprint(solution(''))\n\n'''\n\ndef",
        "num_ids": 88
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    base = max(arr)\n    xor_arr = [0]*(base+1)\n    for val in arr:\n        xor_arr[val] += 1\n    base_cnt = 0\n    res = 0\n    for i in range(base+1):\n        if xor_arr[i] == 0:\n            continue\n        for j in range(i,base+1):\n            if xor_arr[j] == xor_arr[i]:\n                if base_cnt == 0:\n                    res = i\n                base_cnt += 1\n            else:\n                base_cnt = 0\n                break\n    print(res)\n\nsolution(stdin.readline().strip())\n",
        "num_ids": 198
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(42)\n\nprint(solution(\"\"))\n\"\"\"\n",
        "num_ids": 17
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    numbers.sort()\n    numbers = list(reversed(numbers))\n    # we can reverse the list since numbers are sorted\n    # (we can also sort them)\n    result = 0\n    for i, n in enumerate(numbers):\n        result += n * (10 ** i)\n    return str(result)\n\n\ndef",
        "num_ids": 118
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    return str(a[n-1])\n\nassert(solution('''4\n2 5 3 1''') == '1')\n\n'''\n\nfrom typing import List\ndef",
        "num_ids": 82
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...",
        "num_ids": 4
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split(' '))\n        print(n // (k + 1) * (k + 1))\n\nprint(solution(open(\"input.txt\")))",
        "num_ids": 74
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\")\n    '2'\n    >>> solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999733\\n999999733 999999733\")\n    '1'\n    >>> solution(\"2\\n9 4\\n1 1\")\n    '2'\n    >>> solution(\"2\\n9 4\\n1 1\")\n    '1'\n    \"\"\"\n    cases = stdin.split('\\n')\n    n = int(cases.pop(0))\n    for i in range(n):\n        n, k = [int(x) for x in cases[i].split()]\n        packages = [0] * (k + 1)\n        for j in range(1, k + 1):\n            packages[j] = j\n        print(packages)\n        for j in range(k + 1, n + 1):\n            print(j)\n            for j in range(1, k + 1):\n                if j * j > j:\n                    packages[j] = packages[j - 1] + 1\n                else:\n                    packages[j] = 1\n        print(packages)\n        print(packages[n])\n",
        "num_ids": 309
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\".join(str(stdin[0]) + \"\\n\")\n\nassert(solution(\"\"\"5\n8 7\"\"\") == \"\"\"2\n8\n1\n99999973\n1\n\"\"\")\n\nassert(solution(\"\"\"8 1\n8 1\n6 10\"\"\") == \"\"\"1\n8\n1\n99999973\n1\n\"\"\")\n\nassert(solution(\"\"\"6 10\n999999733 999999732\"\"\") == \"\"\"1\n8\n1\n99999973\n1\n\"\"\")\n\nassert(solution(\"\"\"999999733 999999733\n999999733 999999733\"\"\") == \"\"\"1\n1\n1\n99999973\n1\n\"\"\")\n\nassert(solution(\"\"\"1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n",
        "num_ids": 1551
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(''))\n",
        "num_ids": 13
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\")\n    '1'\n    >>> solution(\"1 1\")\n    '0'\n    >>> solution(\"10 1\")\n    '1'\n    >>> solution(\"100 2\")\n    '2'\n    >>> solution(\"10000000 9999999\")\n    '1'\n    >>> solution(\"999999999 1000000000\")\n    '0'\n    \"\"\"\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, k = [int(x) for x in stdin.readline().split()]\n        if (n < k):\n            print(k - n)\n        else:\n            print(0)\n",
        "num_ids": 163
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    result = n\n    for i in range(1, k):\n        result = (result + 1) // i\n    return str(result)\n\nimport sys\nfrom io import StringIO\n\ncapture = StringIO()\nsys.stdin = open('input.txt', 'r')\nsys.stdout = capture\nsolution(stdin)\nsys.stdin = sys.__stdin__\nsys.stdout = sys.__stdout__\nprint(capture.getvalue())\n",
        "num_ids": 133
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys\n\n\ndef",
        "num_ids": 12
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1, k_2 = map(int, stdin.split())\n    p_1, p_2 = map(int, stdin.split())\n    k = k_1 + k_2\n    p = p_1 + p_2\n    if p == 0:\n        return '0'\n    if p == 1:\n        if k == 1:\n            return '1'\n        else:\n            return '0'\n    elif p > 1:\n        if k == 1:\n            return '0'\n        elif k > 1:\n            return '0'\n    else:\n        if k == 1:\n            return '0'\n        elif k > 1:\n            return '0'\n    if k > 1:\n        if k % 2 == 0:\n            return '0'\n        else:\n            return '1'\nsolution(stdin.read())\n",
        "num_ids": 226
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, M = map(int, stdin[0].split())\n    k_list = list(map(int, stdin[1].split()))\n    p_list = list(map(int, stdin[2].split()))\n    if len(k_list)!= len(p_list):\n        return '0'\n    # there are N bulbs, so there are N^k combinations\n    # so it's O(N^k)\n    # let's use N^k as the answer, then\n    # k is the number of \"on\" switches in the bulb, so that means p_i is the number of bulbs that bulb i lights\n    # we can use factorial to calculate the answer, then\n    # we use combination to calculate the answer\n    # O(N^k)\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light\n    # we can get the answer by first calculating the number of ways to pick N-k bulbs to light, which is factorial(N-k), and then we can calculate the number of ways to pick k bulbs to light, which is factorial(k)\n    # that's O(N^2)\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, which is equal to the number of ways to pick N-k+3 bulbs to light, etc.\n    # O(N^(N-k))\n    # The answer is the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # thus we can use the same formula to calculate the answer\n    # that's O(N^(N-k))\n    # we can use combinations to calculate the answer, which is O(N^k(N-k))\n    # so we can calculate the answer, then we can use combinations to calculate the answer\n    # thus we can calculate the answer, then we can use combinations to calculate the answer\n    # that's O(N^(k(N-k)))\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # we can calculate the answer by first calculating the number of ways to pick N-k bulbs to light, which is factorial(N-k), and then we can calculate the number of ways to pick k bulbs to light, which is factorial(k)\n    # thus we can calculate the answer, then we can use combinations to calculate the answer\n    # so we can calculate the answer, then we can use combinations to calculate the answer\n    # thus we can calculate the answer, then we can use combinations to calculate the answer\n    # that's O(N^(k(N-k)))\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # we can calculate the answer by first calculating the number of ways to pick N-k bulbs to light, which is factorial(N-k), and then we can calculate the number of ways to pick k bulbs to light, which is factorial(k)\n    # that's O(N^(k(N-k)))\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # we can calculate the answer by first calculating the number of ways to pick N-k bulbs to light, which is factorial(N-k), and then we can calculate the number of ways to pick k bulbs to light, which is factorial(k)\n    # that's O(N^(k(N-k)))\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # we can calculate the answer by first calculating the number of ways to pick N-k bulbs to light, which is factorial(N-k), and then we can calculate the number of ways to pick k bulbs to light, which is factorial(k)\n    # that's O(N^(k(N-k)))\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # we can calculate the answer by first calculating the number of ways to pick N-k bulbs to light, which is factorial(N-k), and then we can calculate the number of ways to pick k bulbs to light, which is factorial(k)\n    # that's O(N^(k(N-k)))\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # we can calculate the answer by first calculating the number of ways to pick N-k bulbs to light, which is factorial(N-k), and then we can calculate the number of ways to pick k bulbs to light, which is factorial(k)\n    # that's O(N^(k(N-k)))\n    # the answer is the number of ways to pick k bulbs to light, which is equal to the number of ways to pick N-k bulbs to light, which is equal to the number of ways to pick N-k+1 bulbs to light, which is equal to the number of ways to pick N-k+2 bulbs to light, etc.\n    # we can calculate the answer by first calculating the number of ways",
        "num_ids": 1587
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    # Write your code here\n    return None",
        "num_ids": 30
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n\n    @lru_cache(None)\n    def subproblem(k_index, p_index, all_on):\n        if all_on == 0:\n            return 0\n\n        if k_index == 0:\n            return 1 if all_on == p_index % 2 else 0\n\n        ret = 0\n        for i in range(1, n + 1):\n            if (k[k_index - 1] & (1 << i - 1))!= 0:\n                ret += subproblem(k_index - 1, p_index - 1, all_on - 1)\n\n        return ret\n\n    return str(subproblem(m - 1, p[0] - 1, 2 ** m - 1))",
        "num_ids": 209
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n",
        "num_ids": 7
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom fractions import gcd\nfrom math import gcd\n\n\ndef",
        "num_ids": 20
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return answer\n\nassert(solution(stdin) == stdin)\n",
        "num_ids": 22
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    hours, minutes = H, M\n    d = 12 * (A + B)\n    result = d - (A - B) * minutes // 60\n    result += (A - B) * minutes % 60\n    return \"%.11f\" % result\n\nprint(solution(input()))\n\"\"\"\n\nA, B, H, M = map(int, input().split())\nd = 12 * (A + B)\n\nresult = d - (A - B) * M // 60\nresult += (A - B) * M % 60\n\nprint(\"{:.11f}\".format(result))\n",
        "num_ids": 160
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    # hoursToRotate: float = 12 * 3600\n    # minutesToRotate: float = 1 * 60\n    # angle: float = hoursToRotate + minutesToRotate\n    # distanceInCentimeters: float = angle * (a + b) / 2\n\n    return str(distanceInCentimeters)",
        "num_ids": 91
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    D = 360 / (12 * 60)\n    X = A * D * (H + (M / 60))\n    Y = B * D * (M % 60)\n    return (f\"{X:.20f} {Y:.20f}\")\n\nassert(solution('3 4 9 0') == '5.00000000000000000000')\nassert(solution('3 4 8 19') == '0.2500000000000000000')\nassert(solution('3 4 1 18') == '0.37500000000000000')\nassert(solution('3 4 12 15') == '1.3333333333333333')\nassert(solution('3 4 3 5') == '3.5800000000000006')\nassert(solution('2 3 6 4') == '2.8999999999999998')\nassert(solution('2 3 0 0') == '6.000000000000000000')\nassert(solution('2 3 12 15') == '4.8333333333333332')\nassert(solution('1 2 6 12') == '2.8999999999999998')\nassert(solution('1 1 1 1') == '7.0000000000000004')\nassert(solution('1 1 1 0') == '9.0000000000000006')\nassert(solution('1 1 0 0') == '0.000000000000000000')\nassert(solution('1 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 0 0 0') == '0.000000000000000000')\nassert(solution('2 3 0 0') == '6.000000000000000000')\nassert(solution('1 1 1 1') == '7.0000000000000004')\nassert(solution('2 2 1 1') == '5.0000000000000007')\nassert(solution('1 1 1 0') == '9.0000000000000006')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 1') == '7.0000000000000004')\nassert(solution('1 1 1 0') == '9.0000000000000006')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('2 3 0 0') == '6.000000000000000000')\nassert(solution('1 1 1 1') == '7.0000000000000004')\nassert(solution('2 2 1 1') == '5.0000000000000007')\nassert(solution('1 1 1 0') == '9.0000000000000006')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 1') == '7.0000000000000004')\nassert(solution('1 1 1 0') == '9.0000000000000006')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 1') == '7.0000000000000004')\nassert(solution('1 1 1 0') == '9.0000000000000006')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 1') == '7.0000000000000004')\nassert(solution('1 1 1 0') == '9.0000000000000006')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('1 1 1 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution('0 0 0 0') == '0.000000000000000000')\nassert(solution",
        "num_ids": 1774
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = list(map(int, stdin.split()))\n    delta_x = (H * 60 + M) * A\n    delta_y = (H * 60 + M) * B\n    print(f\"{delta_x + delta_y:.14f}\")\n\"\"\"\nimport sys",
        "num_ids": 80
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = list(map(int, stdin.split()))\n    return str(\n        ((A * 60 + M - 12) * 60 * 60 + B * 60)\n        - ((B * 60 + H - 12) * 60)\n        - (A * 60 + M)\n    )\n\nassert(solution('3 4 9 0') == '5.00000000000000000000')\n",
        "num_ids": 95
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split(' '))\n    M_rotation = 1\n    H_rotation = 12\n    H_rotation_left = H_rotation % 12\n    H_rotation_right = H_rotation % 12\n    M_rotation_left = M_rotation % 60\n    M_rotation_right = M_rotation % 60\n    C = ((H_rotation_left * 60) + H_rotation_right) * A + ((M_rotation_left * 60) + M_rotation_right) * B\n    return str(C)",
        "num_ids": 149
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Prints the answer in the format required.\n    '''\n    a, b, h, m = map(int, stdin.split())\n    hour = (2 * h + m / 60) * b / (a * 2)\n    minute = (m * b / (a * 2)) / 60\n    print('%.15f' % (hour + minute))\n    return ''\n\nassert (solution('''3 4 9 0''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.000000001''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000001''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.0000001''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.000001''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000101''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.000001011''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.000001101''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.0000011011''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.000001111''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111111''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111112''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111113''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111114''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111115''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111116''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111117''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111118''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111119''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111120''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111121''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111122''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111123''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111124''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111125''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111126''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111127''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111128''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111129''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111130''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111131''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111132''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111133''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111134''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111135''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111136''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111137''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111138''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111139''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111140''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111141''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111142''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111143''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111144''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111145''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111146''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111147''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111148''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111149''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111150''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111151''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111152''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111153''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111154''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111155''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111156''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111157''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111158''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111159''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111160''')) == '5.00000000000000000000'\nassert (solution('''3 4 9 1.00000111161''')) == '5.00000000000000000000'\nassert",
        "num_ids": 1774
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    d = abs(a - b)\n    dh = d // 12\n    mh = (d % 12) * 60\n    return (h * 60 + m) * (12 * 60 - mh) + dh * 1440 + abs(a - b)",
        "num_ids": 78
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, h, m = [int(x) for x in stdin.split()]\n    hour_hand = (2 * (m + h * 60 / 12)) % 360\n    minute_hand = (m / 30 + x) % 360\n    answer = abs(hour_hand - minute_hand)\n    return f'{answer:.9f}'",
        "num_ids": 86
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ntry:\n    assert (\n        solution(\n            \"\"\"5 4\n1 4 5 60 4\"\"\".strip()\n        )\n        == \"8\"\n    )\n    assert (\n        solution(\n            \"\"\"3 1\n1 1 1\"\"\".strip()\n        )\n        == \"6\"\n    )\n    assert (\n        solution(\n            \"\"\"15 2\n1 2 3 1 2 3 1 2 3 1 2 3\"\"\".strip()\n        )\n        == \"97\"\n    )\nexcept AssertionError:\n    print(\"WRONG\", file=sys.stderr)\n    sys.exit(1)\n\n\nprint(\"SUCCESS\")\n",
        "num_ids": 159
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n    median = n // 2\n    ans = 0\n\n    for i in range(n):\n        l, r = i + 1, n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if seq[mid] < m:\n                l = mid + 1\n            elif seq[mid] > m:\n                r = mid - 1\n            else:\n                ans += mid - i\n                break\n    return str(ans)",
        "num_ids": 143
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    left = [None] * n\n    right = [None] * n\n    for i in range(n):\n        left[i] = a[i]\n        right[i] = a[n - i - 1]\n    left.sort()\n    right.sort()\n    m1 = (m + 1) // 2\n    m2 = m1 + 1\n    count = 0\n    for i in range(n):\n        if left[i] == m1:\n            count += i\n        elif right[i] == m1:\n            count += i\n    return str(count)\n\n\ndef",
        "num_ids": 181
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] + a[j] == m:\n                l.append((i, j))\n    return str(len(l))\n\nprint(solution(input()))\n",
        "num_ids": 109
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n\n    a.sort()\n    for i in range(n):\n        if a[i] == m:\n            count += 1\n    return count\n\nprint(solution(stdin))\n",
        "num_ids": 88
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n    nums.sort()\n\n    count = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] + nums[j]) == m:\n                count += 1\n    return count\n",
        "num_ids": 113
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    sequence = [int(i) for i in stdin.split()]\n    #print(sequence)\n    sequence.sort()\n    #print(sequence)\n    c = 0\n    for i in range(0, len(sequence) - 1):\n        for j in range(i, len(sequence)):\n            if sequence[i] + sequence[j] == m:\n                c += 1\n    return str(c)",
        "num_ids": 120
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, m = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if (lst[i] + lst[j - 1]) == m:\n                ans += 1\n    return str(ans)",
        "num_ids": 96
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(num_pairs(a, m))\n\n\ndef",
        "num_ids": 52
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = [int(x) for x in stdin.strip().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == m:\n                count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    segments = [tuple(map(int, stdin.split())) for _ in range(m)]\n    a_dict = {a[i]: i for i in range(n)}\n    result = [0] * n\n    for i, j, k in segments:\n        l = a_dict[j]\n        r = a_dict[k]\n        result[l - 1] += 1\n        result[r] -= 1\n    return '\\n'.join(map(str, result))",
        "num_ids": 152
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()[1:]))\n    segments = []\n    for _ in range(int(stdin.split()[0])):\n        l, r = map(int, stdin.split()[2:])\n        segments.append([l-1, r])\n\n    sorted_segments = sorted(segments, key=lambda x: x[1])\n    result = 0\n    for i, (l, r) in enumerate(sorted_segments):\n        a[l:r+1] = [-a[l]+1]*(r-l+1)\n        if i == 0:\n            result = -a[l]+1\n        else:\n            result = max(result, -a[l]+1)\n    return str(result)",
        "num_ids": 191
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [map(int, stdin.split()) for _ in range(m)]\n    \n    if n == 1:\n        return \"1\"\n    \n    b = [0] * n\n    \n    for i in range(n):\n        a[i] -= min(a)\n        b[i] = max(a) - min(a)\n    \n    indices = list(range(m))\n    \n    for l, r in segments:\n        l -= 1\n        r -= 1\n        \n        if l < 0:\n            continue\n        \n        if r >= n:\n            continue\n        \n        if l <= r:\n            for i in range(l, r):\n                b[i] = max(b[i], b[l - 1] + 1)\n        else:\n            for i in range(l, n):\n                b[i] = max(b[i], b[l - 1] + 1)\n    \n    return str(max(b))\n    \nprint(solution(input()))\n",
        "num_ids": 279
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(300000)\n\n\ndef",
        "num_ids": 24
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for _ in range(m):\n        l.append(map(int, stdin.split()))\n    a = sorted(a)\n    pairs = list(map(sorted, l))\n    l = []\n    for i in range(m):\n        l.append((a[pairs[i][0]-1], a[pairs[i][1]-1]))\n    s = 0\n    for i in range(m):\n        s += max(l[i][0] - l[i][1], 0)\n    return str(s)\n\nprint(solution(input()))\n",
        "num_ids": 179
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    sorted_segments = sorted(segments, key=lambda s: s[0])\n    max_subarray = 0\n    subarray_length = 0\n    for l, r in sorted_segments:\n        current_subarray = 0\n        for i in range(n):\n            current_subarray += a[i]\n            if l <= i <= r:\n                current_subarray -= a[i]\n\n        subarray_length = max(subarray_length, current_subarray)\n        max_subarray = max(max_subarray, subarray_length)\n\n    return str(max_subarray)\n\n\ndef",
        "num_ids": 221
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n    segments.sort(key = lambda x: x[0])\n    sorted_a = sorted(a)\n    b = [0]*n\n    for segment in segments:\n        l, r = segment\n        min_i = a.index(min(a[l-1:r]))\n        max_i = a.index(max(a[l-1:r]))\n        b[l-1:r] = sorted_a[min_i:max_i]\n    print(max(b)-min(b))\n    return ''",
        "num_ids": 187
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l-1, r-1))\n\n    def solve(segments: list):\n        seg_max = [0] * n\n        seg_min = [0] * n\n        for l, r in segments:\n            seg_max[l:r+1] = [max(seg_max[l:r+1]) + a[l:r+1]] * (r-l+1)\n            seg_min[l:r+1] = [min(seg_min[l:r+1]) - a[l:r+1]] * (r-l+1)\n\n        ret = 0\n        for i in range(n):\n            ret = max(ret, seg_max[i] - seg_min[i])\n\n        return ret\n\n    ret = solve(segments)\n    for _ in range(int(stdin.readline())):\n        l, r = map(int, stdin.split())\n        if ret < solve([(l-1, r-1)]):\n            ret = solve([(l-1, r-1)])\n\n    return str(ret)",
        "num_ids": 332
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"",
        "num_ids": 6
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return ''.join(['Yes\\n' if is_diverse(string) else 'No\\n' for string in strings])\n\ndef",
        "num_ids": 63
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [stdin.rstrip() for stdin in stdin.splitlines()]\n    for string in strings:\n        if all(string.count(letter) == 1 for letter in string):\n            print('Yes')\n        else:\n            print('No')\n    return ''\n\n\nprint(solution('8'))\nprint(solution('6'))\nprint(solution('3'))\nprint(solution('1'))\nprint(solution('2'))\nprint(solution('5'))\n",
        "num_ids": 132
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        string = stdin.readline().strip()\n        if 'a' in string or 'z' in string:\n            continue\n        print(\"Yes\")\n    return \"No\"",
        "num_ids": 65
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return '\\n'.join([\"Yes\" if isDiverse(s) else \"No\" for s in strings])\n\ndef",
        "num_ids": 61
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = \"Yes\"\n    for _ in range(n):\n        word = stdin.readline().strip()\n        if \"\".join(sorted(word)) == \"\".join(sorted(word, reverse=True)):\n            ans = \"No\"\n    print(ans)",
        "num_ids": 80
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        stdin = stdin.strip()\n        if len(stdin) <= 1:\n            print(\"No\")\n            continue\n        a = False\n        for i in range(len(stdin)-1):\n            if stdin[i] == stdin[i+1]:\n                a = True\n        if a:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n",
        "num_ids": 110
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.strip()\n        flag = False\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                flag = True\n                break\n        if flag:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n",
        "num_ids": 94
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [None] * m\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments[i] = (l - 1, r - 1)\n    segments = set(segments)\n    b = a[:]\n    for i in range(m):\n        if i + 1 in segments:\n            l, r = segments[i + 1]\n            b[l:r] = [x - 1 for x in b[l:r]]\n    return str(max(b) - min(b))\n\nsolution(input())\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0441 \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u043d\u0435\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u043c\u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50.\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435\u043c $b$ \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435\u043c $p$ \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, $2^3 \\equiv 1 \\pmod 3$ \u0438\u043b\u0438 $3 \\pmod 4$ \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435\u043c $10$\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0441 \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u043d\u0435\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u043c\u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0442\u043e \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e 0.\n\nSample Input 1:\n\n10\n1 2 3 4 5 6 7 8 9",
        "num_ids": 1076
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append([l, r])\n    segments.sort()\n    segments.sort(key=lambda x: x[1])\n    res = 0\n    left = 0\n    for i in range(m):\n        while left < n and segments[i][0] > a[left]:\n            left += 1\n        if left == n:\n            break\n        a[left] -= segments[i][1]\n        res = max(res, a[left])\n    return str(res)\n\n\nprint(solution(input()))\n",
        "num_ids": 202
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    s = set()\n    for _ in range(m):\n        l, r = [int(n) for n in stdin.split()]\n        s.add(l)\n        s.add(r)\n    s = list(s)\n    s.sort()\n    res = 0\n    b = [a[0]]\n    for i in range(1, n):\n        if b[-1] < a[i]:\n            b.append(a[i])\n        else:\n            l = len(b)\n            r = s[l]\n            if a[i] > r:\n                r = a[i]\n            b[l] = r\n    b.sort()\n    return str(b[-1]-b[0])\n\ndef",
        "num_ids": 220
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def sum_array(a: list) -> int:\n        res = 0\n        for x in a:\n            res += x\n        return res\n\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()][:n]\n    segments = [tuple([int(x) for x in stdin.split()]) for _ in range(m)]\n    segments.sort(key=lambda x: x[0])\n    a = a[:]\n\n    for x, y in segments:\n        a[x - 1 : y] = [a[x - 1] - 1 for _ in range(y - x + 1)]\n\n    return str(sum_array(a) - sum_array(a[::-1]))\n\nassert solution(\n    '''5 4\n2 -2 3 1 2\n1 3\n4 5'''\n) == '6'\n\nassert solution(\n    '''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5'''\n) == '7'\n\nassert solution(\n    '''1 0\n1000000'''\n) == '0'\n\nassert solution(\n    '''2 1\n100000'''\n) == '0'\n\nassert solution(\n    '''1 1\n1'''\n) == '0'\n\nassert solution(\n    '''5 4\n2 -2 3 1 4\n1 3\n2 4\n2 5'''\n) == '7'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n3 5\n2 4\n2 5'''\n) == '3 2'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''4 5\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n2 6\n2 7\n1 8\n2 9\n1 10'''\n) == '7'\n\nassert solution(\n    '''2 1\n2'''\n) == '0'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''2 1\n1000000'''\n) == '0'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''2 1\n1000000'''\n) == '0'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''4 5\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n2 6\n2 7\n1 8\n2 9\n1 10'''\n) == '7'\n\nassert solution(\n    '''2 1\n1000000'''\n) == '0'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''3 2\n1 2\n2 3\n1 4\n2 5\n1 6\n2 7\n1 8\n2 9\n1 10'''\n) == '2 2'\n\nassert solution(\n    '''3 2\n1 2",
        "num_ids": 1076
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    a = list(map(int, stdin.split(' ')))\n    segments = [list(map(int, stdin.split(' '))) for _ in range(m)]\n\n    segments = sorted(segments, key=lambda s: s[0])\n\n    #[print(s) for s in segments]\n\n    intervals = [s[1] - s[0] for s in segments]\n\n    #print(intervals)\n\n    maximum = 0\n    q = 0\n    i = 0\n    j = 0\n    while i < n:\n        start = segments[j][0]\n        end = segments[j][1]\n        #print(start, end)\n        #print(a[start:end + 1])\n        #print(a[start:end + 1].max(), a[start:end + 1].min())\n        maximum += a[start:end + 1].max() - a[start:end + 1].min()\n        i = end + 1\n        j += 1\n        #print(maximum)\n    return str(maximum)\n\nsolution(input())\n\n'''\n\n\n\n'''\ndef",
        "num_ids": 283
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:n + 1]]\n    segments = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()[n + 1:n + r + 1]]\n        segments.append((l - 1, r - 1))\n    segments.sort(key=lambda x: x[0])\n    print(max(a) - min(a) - (len(segments) - 1) * a[-1])\n    return 0\n\n\ndef",
        "num_ids": 156
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    segments = [tuple(map(int, stdin.split()[:2])) for _ in range(m)]\n    segments.sort(key=lambda x: x[1])\n    print(a)\n    print(segments)\n    # quick sort\n    def quick_sort(x, y, a):\n        pivot = a[x]\n        i, j = x + 1, y\n        while i <= j:\n            while i <= j and a[i] >= pivot:\n                i += 1\n            while i <= j and a[j] <= pivot:\n                j -= 1\n            if i < j:\n                a[i], a[j] = a[j], a[i]\n        a[x], a[j] = a[j], a[x]\n        return j\n\n    def count_segments(a, m, i, j):\n        if i == j:\n            return 0\n        if j - i == 1:\n            if a[i] == a[j]:\n                return 1\n            else:\n                return 0\n        if j - i == 0:\n            return m - i\n        if j - i == 2:\n            if a[i] == a[j]:\n                return 1\n            else:\n                return 0\n        pivot = a[i]\n        i, j = i + 1, j - 1\n        while i <= j:\n            while i <= j and a[i] >= pivot:\n                i += 1\n            while i <= j and a[j] <= pivot:\n                j -= 1\n            if i < j:\n                a[i], a[j] = a[j], a[i]\n        a[i], a[j] = a[j], a[i]\n        cnt = 1 + count_segments(a, m, i, j - 1) + count_segments(a, m, j + 1, j + 2)\n        return cnt\n\n    count = 0\n    for s in segments:\n        x, y = s\n        i = quick_sort(0, len(a) - 1, a)\n        m = len(a)\n        count += count_segments(a, m, i, i + x - 1)\n        a[i:i+x] = [-1] * x\n    return str(count)\n",
        "num_ids": 581
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    res = 0\n    m = min(l)\n    for i in range(m):\n        if a[i] > 0:\n            a[i] -= 1\n        else:\n            a[i] += 1\n    for i in range(m):\n        if l[i] - l[i - 1] > res:\n            res = l[i] - l[i - 1]\n    return str(res)\n\nprint(solution(input()))",
        "num_ids": 166
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    def get_segment(x: int, y: int, l: int, r: int) -> List[int]:\n        return a[x - 1: y]\n\n    segments = []\n\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[1])\n\n    def check_segments(l: int, r: int) -> int:\n        b = [0] * n\n\n        for i in range(m):\n            s = get_segment(l[i], r[i], l[i], r[i])\n            for j in range(len(s)):\n                b[j] += s[j]\n\n        max_b = max(b) - min(b)\n\n        return max_b\n\n    l = [0] * m\n    r = [0] * m\n\n    for i in range(m):\n        l[i] = segments[i][0]\n        r[i] = segments[i][1]\n\n    cur_max_b = 0\n    cur_max_segments = []\n\n    for i in range(m):\n        cur_max_b = max(cur_max_b, check_segments(l, r))\n\n    return str(cur_max_b)\n",
        "num_ids": 364
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    d = 0\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        d = max(d, max(a[l - 1:r]) - min(a[l - 1:r]))\n    return str(d)",
        "num_ids": 99
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[1].split(\",\")\n    n = len(a)\n    a = set(a)\n    a = list(a)\n    a.sort()\n    max_length = 0\n    for i in range(n):\n        if i == n - 1:\n            if a[i] == n - i:\n                max_length = n - i\n        elif a[i] == a[i + 1] - 1:\n            max_length = max(max_length, n - i)\n    output = \"\"\n    for i in range(max_length):\n        output += \"L\"\n    output += \"R\" * (n - max_length)\n    return output\n",
        "num_ids": 169
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your solution here\n    # Note that you can't have a space in your answer\n    return ''",
        "num_ids": 25
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    a = stdin.readline()\n    n = int(n)\n    a = list(map(int, a.split()))\n    left, right = [], []\n    for i in range(n):\n        if i == 0:\n            left.append(a[0])\n            right.append(a[-1])\n        else:\n            left.append(max(left[i-1], a[i-1]))\n            right.append(max(right[i-1], a[-i-2]))\n    left.sort()\n    right.sort()\n    left = ''.join(map(str, left))\n    right = ''.join(map(str, right))\n    return left+right",
        "num_ids": 182
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\nIn the second example, you can see that there is no answer, since there are several possible sequences.\n\n\n>>> solution(stdin)\n4\n'LLRL'\n\n>>> stdin = '7\\n1 3 5 6 7 4 2'\n>>> solution(stdin)\n7\n'LRLRLLL'\n\"\"\"\n\n\ndef",
        "num_ids": 82
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"",
        "num_ids": 11
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\ntry:\n    _, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = [x for x in sorted(a, reverse=True)]\n    for i in range(n):\n        a[i], a[n-i-1] = a[n-i-1], a[i]\n    k = len(a)\n    for i in range(k-1):\n        if a[i] < a[i+1]:\n            break\n    if k < 2:\n        print(k)\n    else:\n        print(k, ''.join(['L' if x > a[i] else 'R' for i, x in enumerate(a)]))\nexcept:\n    pass\n",
        "num_ids": 196
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nThe last example is an example where the answer is $7$.\n\"\"\"\ndef",
        "num_ids": 22
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    moves = 0\n    max_len = 1\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            moves += 1\n            if moves > max_len:\n                max_len = moves\n        else:\n            moves = 0\n    if max_len == 1:\n        return '0'\n    else:\n        s = ''\n        for i in range(max_len):\n            if i == 0:\n                s += 'L'\n            else:\n                s += 'R'\n        return s",
        "num_ids": 165
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\n\"\"\"\n\ndef",
        "num_ids": 28
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    k = 1\n    while k <= n:\n        if k == n:\n            break\n        m = 1\n        while m <= k:\n            if a[k - m] < a[k]:\n                break\n            if m == k:\n                k += 1\n                break\n            m += 1\n        k += 1\n    res = a[:k]\n    res.sort()\n    return ''.join(['L' if x == res[0] else 'R' for x in a])\n",
        "num_ids": 150
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    best_len = 0\n    start = 0\n    end = 0\n    while end < len(a):\n        if a[end] > a[start]:\n            best_len = max(best_len, end-start)\n            end += 1\n        else:\n            start += 1\n    return str(best_len)\n\nassert(solution('''5''') == '4')\nassert(solution('''2''') == '2')\nassert(solution('''7''') == '2')\nassert(solution('''6 5 4 3 2 4 3''') == '2')\nassert(solution('''1 2''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''6 7 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(solution('''7 6 5 4 3 2 4 3''') == '2')\nassert(s",
        "num_ids": 1628
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    print(getMaxLen(arr))\n\ndef",
        "num_ids": 48
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split(' ')]\n    max_length = 0\n    for i in range(n):\n        length = 1\n        for j in range(i, n):\n            if a[j] > a[j - 1]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n    return str(max_length)\n\nprint(solution(stdin))\n",
        "num_ids": 139
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_subarray(a: list[int]) -> int:\n        n = len(a)\n        max_len = 0\n        cur_len = 1\n        cur_start = 0\n        for i in range(1, n):\n            if a[i] < a[i - 1]:\n                cur_len += 1\n                if cur_len > max_len:\n                    max_len = cur_len\n                    cur_start = i - cur_len + 1\n            else:\n                cur_len = 1\n        return max_len, cur_start\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_len, cur_start = find_max_subarray(a)\n    print(max_len)\n",
        "num_ids": 193
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n\n    if n == 1:\n        return \"1\"\n\n    if n == 2:\n        return str(max(a))\n\n    answer = \"1\"\n    a_sorted = sorted(a)\n\n    for i in range(n - 2):\n        if a_sorted[i] < a_sorted[i + 1]:\n            answer = str(int(answer) + 1)\n\n    return answer\n\nassert(solution(input) == \"4\")\n",
        "num_ids": 142
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    ans = 0\n    for i in range(n):\n        start = max(0, i-1)\n        end = n-1\n\n        while start < end:\n            mid = start + (end - start)//2\n            if arr[mid] > arr[mid + 1]:\n                end = mid\n            else:\n                start = mid + 1\n\n        if end == i - 1:\n            ans = max(ans, end + 1)\n\n    return str(ans)",
        "num_ids": 146
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    max_len = 1\n    for i in range(n):\n        if i == 0:\n            max_len += 1\n        else:\n            if a[i] > a[i-1]:\n                max_len += 1\n    return str(max_len)\n\nprint(solution(stdin))\n",
        "num_ids": 116
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    ans = 1\n    st = 1\n    end = 0\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            ans = max(ans, i - st)\n            st = i + 1\n            end = i\n        elif i == n - 1:\n            ans = max(ans, i - st + 1)\n    return str(ans)\n",
        "num_ids": 129
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n\n    best = 0\n    for i in range(n):\n        if a[i] < a[i+1]:\n            best = max(best, a[i+1])\n    return str(n-1-best)\n\nassert(solution('''5''') == '''4''')\nassert(solution('''2''') == '''2''')\nassert(solution('''7''') == '''2''')\nassert(solution('''6 5 4 3 2 4 3''') == '''2''')\nassert(solution('''1 2''') == '''2''')\nassert(solution('''7''') == '''2''')\nassert(solution('''6 5 4 3 2 4 3''') == '''2''')\nassert(solution('''7''') == '''2''')\nassert(solution('''7''') == '''2''')\nassert(solution('''8''') == '''3''')\nassert(solution('''8''') == '''3''')\nassert(solution('''7''') == '''3''')\nassert(solution('''8''') == '''3''')\nassert(solution('''9''') == '''3''')\nassert(solution('''9''') == '''3''')\nassert(solution('''10''') == '''4''')\nassert(solution('''10''') == '''4''')\nassert(solution('''1 2''') == '''2''')\nassert(solution('''10''') == '''4''')\nassert(solution('''10''') == '''4''')\nassert(solution('''10''') == '''4''')\nassert(solution('''11''') == '''4''')\nassert(solution('''11''') == '''4''')\nassert(solution('''11''') == '''4''')\nassert(solution('''11''') == '''4''')\nassert(solution('''12''') == '''4''')\nassert(solution('''12''') == '''4''')\nassert(solution('''12''') == '''4''')\nassert(solution('''12''') == '''4''')\nassert(solution('''13''') == '''4''')\nassert(solution('''13''') == '''4''')\nassert(solution('''13''') == '''4''')\nassert(solution('''13''') == '''4''')\nassert(solution('''14''') == '''4''')\nassert(solution('''14''') == '''4''')\nassert(solution('''14''') == '''4''')\nassert(solution('''14''') == '''4''')\nassert(solution('''15''') == '''4''')\nassert(solution('''15''') == '''4''')\nassert(solution('''15''') == '''4''')\nassert(solution('''15''') == '''4''')\nassert(solution('''16''') == '''4''')\nassert(solution('''16''') == '''4''')\nassert(solution('''16''') == '''4''')\nassert(solution('''16''') == '''4''')\nassert(solution('''17''') == '''4''')\nassert(solution('''17''') == '''4''')\nassert(solution('''17''') == '''4''')\nassert(solution('''17''') == '''4''')\nassert(solution('''18''') == '''4''')\nassert(solution('''18''') == '''4''')\nassert(solution('''18''') == '''4''')\nassert(solution('''18''') == '''4''')\nassert(solution('''19''') == '''4''')\nassert(solution('''19''') == '''4''')\nassert(solution('''19''') == '''4''')\nassert(solution('''19''') == '''4''')\nassert(solution('''20''') == '''4''')\nassert(solution('''20''') == '''4''')\nassert(solution('''20''') == '''4''')\nassert(solution('''20''') == '''4''')\nassert(solution('''21''') == '''4''')\nassert(solution('''21''') == '''4''')\nassert(solution('''21''') == '''4''')\nassert(solution('''21''') == '''4''')\nassert(solution('''22''') == '''4''')\nassert(solution('''22''') == '''4''')\nassert(solution('''22''') == '''4''')\nassert(solution('''22''') == '''4''')\nassert(solution('''23''') == '''4''')\nassert(solution('''23''') == '''4''')\nassert(solution('''23''') == '''4''')\nassert(solution('''23''') == '''4''')\nassert(solution('''24''') == '''4''')\nassert(solution('''24''') == '''4''')\nassert(solution('''24''') == '''4''')\nassert(solution('''24''') == '''4''')\nassert(solution('''25''') == '''4''')\nassert(solution('''25''') == '''4''')\nassert(solution('''25''') == '''4''')\nassert(solution('''25''') == '''4''')\nassert(solution('''26''') == '''4''')\nassert(solution('''26''') == '''4''')\nassert(solution('''26''') == '''4''')\nassert(solution('''26''') == '''4''')\nassert(solution('''27''') == '''4''')\nassert(solution('''27''') == '''4''')\nassert(solution('''27''') == '''4''')\nassert(solution('''27''') == '''4''')\nassert(solution('''28''') == '''4''')\nassert(s",
        "num_ids": 1628
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    a = list(map(int, stdin.split()))\n\n    # find the first non-zero element\n    idx = -1\n    for i, ai in enumerate(a):\n        if ai:\n            idx = i\n            break\n\n    # until we find k elements with ai == ai // 2, we do not need to do anything\n    i = idx\n    k_found = False\n    result = 0\n    while i < len(a):\n        if a[i] == a[i] // 2:\n            i += 1\n            continue\n        else:\n            k_found = True\n            a[i] = a[i] // 2\n            result += 1\n        i += 1\n\n    if k_found:\n        if k_found and k < len(a):\n            return '0'\n        else:\n            return str(result + (k - len(a)))\n    else:\n        return str(result)\n",
        "num_ids": 240
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    arr = [int(x) for x in stdin.split()]\n\n    eqs = [0] * n\n\n    for i in range(n):\n        eqs[i] = int(stdin.split()[i]) % 2\n\n    def possible(n):\n        for i in range(n):\n            if arr[i] % 2!= eqs[i]:\n                return False\n        return True\n\n    def count():\n        possible(n)\n        l = [0] * n\n        for i in range(n):\n            l[i] = arr[i] // 2\n            arr[i] = arr[i] % 2\n        l.sort()\n        return l[n - 1]\n\n    def count2():\n        l = [0] * n\n        for i in range(n):\n            l[i] = arr[i] // 2\n            arr[i] = arr[i] % 2\n\n        l.sort()\n        return l[n - 1]\n\n    return str(min(count(), count2()))\n\n\ndef",
        "num_ids": 269
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.strip().split())\n\n    a = list(map(int, stdin.strip().split()))\n    res = 0\n    for i in a:\n        res += int(i % 2)\n    while res < k:\n        a = list(map(lambda x: int(x % 2), a))\n        res += 1\n    return str(res)\n",
        "num_ids": 96
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    # find the first element in the array that is 0\n    for i, x in enumerate(a):\n        if x == 0:\n            break\n\n    # perform the required operations\n    # subtract 1 from the divisor to make the division round down\n    # therefore, we need to add 1 to the quotient\n    answer = i\n    for i, x in enumerate(a):\n        if x % 2 == 0:\n            answer += x // 2\n            a[i] //= 2\n        if a[i] == 0:\n            break\n\n    # check if the answer is sufficient\n    if answer + i + 1 > k:\n        return str(answer)\n    else:\n        return str(answer + i + 1)",
        "num_ids": 207
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n\n    arr = list(map(int, stdin.readline().split()))\n\n    counter = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            arr[i] /= 2\n            counter += 1\n        else:\n            arr[i] = arr[i] // 2\n            counter += 1\n\n    if counter >= k:\n        return str(0)\n\n    counter = 0\n    for i in range(n):\n        if arr[i] >= 1:\n            counter += arr[i] - 1\n            arr[i] = 1\n\n    counter += k - counter\n\n    return str(counter)\n\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2')\nassert(solution('''5 3\n1 2 3 3 3''') == '0')\nassert(solution('''5 3\n1 2 2 4 5''') == '1')\nassert(solution('''5 3\n1 2 3 3 3''') == '2",
        "num_ids": 1665
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nclass TestSolution:\n    def test(self, sol):\n        assert sol(stdin) == str(solution(stdin))\n",
        "num_ids": 36
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[1]\n    n, k = [int(i) for i in line.split(' ')]\n    line = stdin.split('\\n')[2]\n    a = [int(i) for i in line.split(' ')]\n\n    if a[0] == 0:\n        return 0\n    elif a[0] == 1:\n        return k\n    else:\n        a.sort()\n        r = 0\n        while len(set(a))!= k:\n            r += 1\n            a = [int(i / 2) for i in a]\n            if a[0] == 0:\n                break\n        return r\n",
        "num_ids": 164
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(0, k + 1):\n            if j >= a[i - 1]:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return str(dp[n][k])\n\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids": 192
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    a.sort()\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n        else:\n            break\n\n    print(count)\n\nsolution(input())",
        "num_ids": 112
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = [int(x) for x in stdin.split()]\n    count = 0\n    for a in array:\n        if a % 2!= 0:\n            count += 1\n            if count >= k:\n                return 0\n    return count",
        "num_ids": 75
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    return str(4*A*B//(N-A-B))\n\nprint(solution(input()))\n\n\"\"\"\n",
        "num_ids": 54
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(sum(a <= i < n + a + b for i in range(n)))",
        "num_ids": 40
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = 10 ** 18\n    N, A, B = [int(x) for x in stdin.split()]\n    A += B\n    return m * (A // (A - B))",
        "num_ids": 47
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = (int(x) for x in stdin.strip().split(\" \"))\n\n    if A + B < N:\n        print(A + B)\n    else:\n        print(N - A - B)",
        "num_ids": 56
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    return str(a*b//10**(100))",
        "num_ids": 31
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    blue = 0\n    N, a, b = stdin.split()\n    N = int(N)\n    a = int(a)\n    b = int(b)\n    for i in range(N):\n        for j in range(i,N):\n            if i + j < N:\n                stdout.write('br'[int((i + j) % 2)])\n                blue += 1\n    return str(blue)",
        "num_ids": 103
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    return '\\n'.join(map(str, ([b] * (n - a) + [r] * a) * (b // a + 1)))",
        "num_ids": 54
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(\" \")]\n\n    res = 0\n    for i in range(n):\n        res += min(a, b)\n        a -= 1\n        b += 1\n    return str(res)",
        "num_ids": 64
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.strip().split(' '))\n    return str(int(N * (N - 1) / 2 - A * A / 2 - B * B / 2))\n",
        "num_ids": 51
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(\" \"))\n    \n    return \"\".join([\"0\" for _ in range(n)])",
        "num_ids": 39
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = list(sorted(set(map(int, stdin.readline().split()))))\n        answer = float('inf')\n        for d in divisors:\n            if d == 1 or n % d!= 0:\n                answer = min(answer, d)\n        if answer == float('inf'):\n            print(-1)\n        else:\n            print(n // answer)\n",
        "num_ids": 129
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    divisors = [2]\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        divisors.extend(map(int, stdin.readline().split()))\n\n    divisors.sort()\n\n    divisors.reverse()\n\n    for i in range(len(divisors)):\n        if divisors[i] == 1:\n            continue\n\n        if divisors[i] > 1:\n            continue\n\n        divisors[i] += 1\n\n    divisors.reverse()\n    divisors.remove(1)\n\n    x = 1\n    for d in divisors:\n        x *= d\n    return str(x)",
        "num_ids": 174
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split(\" \")]\n    t = int(stdin.readline())\n    for _ in range(t):\n        x = int(stdin.readline())\n        if divisors == almost_all_divisors(x):\n            print(-1)\n        else:\n            print(x)\n    return \"\"",
        "num_ids": 106
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_divisors(n: int) -> List[int]:\n        def rec_divisors(n: int, divisors: List[int]) -> None:\n            for i in range(1, n // 2 + 1):\n                if n % i == 0:\n                    divisors.append(i)\n                    rec_divisors(n // i, divisors)\n                    break\n\n        divisors = [1]\n        rec_divisors(n, divisors)\n        return divisors\n\n    def number_divisors(n: int, divisors: List[int]) -> int:\n        return len(divisors)\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = stdin.readline().strip().split()\n        divisors = [int(d) for d in divisors]\n        assert len(divisors) == n\n        if number_divisors(n, divisors) < 2:\n            print(-1)\n            continue\n        divisors_set = set(divisors)\n        for d in divisors:\n            if d * 2 not in divisors_set:\n                print(d)\n                break\n        else:\n            print(-1)\n",
        "num_ids": 323
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split()]\n    for _ in range(n):\n        x = int(stdin.readline())\n        y = divisors[:]\n        if all(d in y for d in divisors) and x!= 1:\n            y.remove(1)\n        elif x!= 1 and not all(d in y for d in divisors):\n            print(-1)\n        else:\n            print(min(divisors) * x)\n",
        "num_ids": 140
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    n = int(stdin.readline())\n    divisors = sorted([int(i) for i in stdin.readline().split()])\n    if n == 1:\n        return str(divisors[0])\n    for i in range(1, n):\n        if divisors[i - 1] < divisors[i]:\n            return str(divisors[i])\n    return str(-1)\n\nassert (solution(io.StringIO(\n    '2\\n'\n    '8\\n'\n    '8 2 12 6 4 24 16 3\\n'\n    '1\\n'\n    '2\\n'\n))) == '48'\nassert (solution(io.StringIO(\n    '2\\n'\n    '4\\n'\n    '4 2 3 1\\n'\n    '1\\n'\n    '2\\n'\n))) == '-1'\nassert (solution(io.StringIO(\n    '2\\n'\n    '4\\n'\n    '2 2 4 2\\n'\n    '1\\n'\n    '2\\n'\n))) == '4'\n",
        "num_ids": 285
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello World\"\n\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''')) == \"Hello World\"\n'''\n8\n8 2 12 6 4 24 16 3\n1\n2\n'''\n",
        "num_ids": 61
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "num_ids": 5
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split('\\n')[0]\n    t = int(_)\n    for i in range(t):\n        _ = stdin.split('\\n')[i + 1]\n        n = int(_[0])\n        _ = _[2:]\n        divisors = []\n        for div in _.split():\n            divisors.append(int(div))\n        divisors.sort()\n        divisors = list(set(divisors))\n        if divisors[0]!= 1:\n            print(-1)\n            continue\n        elif len(divisors) == 1:\n            print(divisors[0] - 1)\n            continue\n        divisors.pop(0)\n        divisors = [divisors[i] - divisors[i - 1] for i in range(1, len(divisors))]\n        divisors.append(1)\n        divisors.sort()\n        ans = 1\n        for div in divisors:\n            ans *= div\n        ans -= 1\n        print(ans)\n    return ''",
        "num_ids": 265
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    m = {}\n    for i in a:\n        if i not in m:\n            m[i] = 1\n        else:\n            m[i] += 1\n    a.sort(reverse=True)\n    x = 0\n    for i in a:\n        if i not in m:\n            break\n        m[i] -= 1\n        x += 1\n    return str(x) + '\\n' +''.join(map(str, a))\n\n\nassert(solution('''\n6\n1 5 5 1 6 1\n''') == '3\\n5 6 1')\nassert(solution('''\n5\n2 4 2 4 4\n''') == '2\\n2 4')\nassert(solution('''\n5\n6 6 6 6 6 6\n''') == '1\\n6')\n",
        "num_ids": 228
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(stdin) for stdin in stdin.split(' ')]\n    arr.sort()\n    arr = list(set(arr))\n    return''.join(str(arr.pop()) for arr in arr)\n\nprint(solution(input()))\n\"\"\"\n\n\ndef",
        "num_ids": 78
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    a = set(a)\n    a = list(a)\n    a = sorted(a)\n    return''.join(a)",
        "num_ids": 56
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n\n    out = []\n    for i in a:\n        if a.count(i) == 1:\n            out.append(i)\n    print(len(out))\n    print(*out)",
        "num_ids": 72
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin[stdin.find('{') + 1:stdin.rfind('}')].split(', ')))\n    return stdin\n\n\nprint(solution(input()))\n",
        "num_ids": 49
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    res = set()\n    for e in a:\n        if e not in res:\n            res.add(e)\n        else:\n            res.remove(e)\n    return str(len(res)) + '\\n' +''.join(map(str, sorted(res)))\n\nprint(solution(input()))",
        "num_ids": 108
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1:int(n)+1]\n    a = [int(el) for el in a]\n    i = 1\n    while i < len(a):\n        if a[i] == a[i-1]:\n            del a[i]\n        else:\n            i += 1\n    return str(len(a)) + \"\\n\" + \"\\n\".join([str(el) for el in a])\n\n\nassert(solution(input()) == solution(\"\"\"6\n1 5 5 1 6 1\n\"\"\") == '3\\n5 6 1')\nassert(solution(input()) == solution(\"\"\"5\n2 4 2 4 4\n\"\"\") == '2\\n4 2')\nassert(solution(input()) == solution(\"\"\"5\n6 6 6 6 6\n\"\"\") == '1\\n6')\nassert(solution(input()) == solution(\"\"\"10\n7 2 1 2 1 1 2 1 3 2 1\n\"\"\") == '4\\n1 2 3 2 1')\n",
        "num_ids": 242
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = {}\n    for i,v in enumerate(a):\n        if v not in m:\n            m[v] = i\n    return str(len(m)) + '\\n' +''.join(str(x) for x in m.values())",
        "num_ids": 93
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n\n    arr_freq = {}\n    for x in arr:\n        if x not in arr_freq:\n            arr_freq[x] = 0\n        arr_freq[x] += 1\n\n    arr_freq_sorted = sorted(arr_freq.items(), key=lambda x: x[1], reverse=True)\n\n    for k, v in arr_freq_sorted:\n        if v!= 1:\n            break\n    else:\n        return '0'\n\n    if v == 1:\n        return '0'\n\n    x = n - arr_freq_sorted[0][1]\n\n    arr_sorted = [x for x, y in arr_freq_sorted]\n\n    return''.join(map(str, arr_sorted))\n\nprint(solution(stdin))\n",
        "num_ids": 221
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "num_ids": 6
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a = int(stdin)\n    interesting = 0\n    while interesting <= a:\n        interesting += 1\n        if interesting % 4 == 0:\n            digits = [int(i) for i in str(interesting)]\n            if sum(digits) % 4 == 0:\n                return str(interesting)\n    return str(interesting - 1)\n\nprint(solution(input()))\n",
        "num_ids": 102
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 1\n    s = str(a)\n    while True:\n        if int(s) % 4 == 0:\n            return s\n        else:\n            n += 1\n            s += str(n)\n",
        "num_ids": 61
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while n > 0:\n        n = sum(int(x) for x in str(n))\n        if n % 4 == 0:\n            break\n    return str(n)\n\nassert(solution(stdin) == stdout)\n",
        "num_ids": 72
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while n <= a:\n        s = str(n)\n        if sum(int(i) for i in s) % 4 == 0:\n            n += 1\n        else:\n            n += 1\n    return str(n)\n",
        "num_ids": 70
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    # We calculate the sum of the digits of the number, then check if the sum is divisible by 3\n    s = sum([int(i) for i in str(num)])\n    if s % 3 == 0:\n        return str(num + 1)\n    # Now we check if the number is divisible by 4\n    s = sum([int(i) for i in str(num)])\n    if s % 4 == 0:\n        return str(num + 1)\n    # If we are here, we don't know if the number is interesting or not\n    # we will return the number itself\n    return str(num)",
        "num_ids": 154
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return answer(a)\n\ndef",
        "num_ids": 19
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"0\"\n    \n    n = 0\n    while a < 10:\n        a = sum(map(int, str(a)))\n        n += 1\n    \n    if a % 4 == 0:\n        n -= 1\n    \n    return str(n)",
        "num_ids": 80
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()[0]\n    print(sum_of_digits(input))\n\nsolution(input)\n",
        "num_ids": 33
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    a = int(line)\n    if a % 4 == 0:\n        print(a + 3)\n    else:\n        n = 1\n        while True:\n            n += 1\n            if (n * sum(int(i) for i in str(n))) % 4 == 0:\n                break\n        print(n)\n    return",
        "num_ids": 90
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    result = a\n    while result > 0:\n        result = result - (result % 4)\n    return str(result)",
        "num_ids": 44
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        s, m, *b = list(map(int, stdin.readline().strip().split(' ')))\n        c = Counter(s)\n        b.sort()\n        possible_answer = ''\n        for i in range(1, m):\n            if possible_answer: break\n            possible_answer += s[i]\n            for j in b:\n                if i > j:\n                    possible_answer += s[j]\n                    break\n        print(possible_answer)",
        "num_ids": 139
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        s, m, b = stdin.split()\n        b = list(map(int, b))\n        t = ''\n        for i in range(m):\n            j = b[i]\n            while j > i:\n                t += s[j - i - 1]\n                j = b[j - i - 1]\n        print(t)",
        "num_ids": 102
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def b(t: str) -> str:\n        b = [0] * len(t)\n        for i, c in enumerate(t):\n            b[i] = sum(abs(i - j) for j in range(len(t)) if t[j] > c)\n        return \"\".join(t[i] for i in range(len(t)) if b[i] > 0)\n    \n    n = int(stdin.readline())\n    for _ in range(n):\n        s, m = stdin.readline().rstrip().split()\n        b = list(map(int, stdin.readline().rstrip().split()))\n        print(b(s))\n",
        "num_ids": 167
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(stdin), stdout)\n",
        "num_ids": 47
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.rstrip('\\n').split('\\n')\n    n = int(lines[0])\n    s = lines[1]\n    m = int(lines[2])\n    b = list(map(int,lines[3].split()))\n    b.sort()\n    for i in range(n):\n        s = s.replace(s[i], '', 1)\n    if len(s) < m:\n        return s\n    else:\n        for i in range(m):\n            if ord(s[i]) < ord(s[b[i]-1]):\n                return s[:i] + s[b[i]:]\n'''\n\ndef",
        "num_ids": 164
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = [int(stdin.readline()) for _ in range(m)]\n        t = ''\n        for i in range(m):\n            t += s[i]\n            while i < len(s) and s[i]!= t[-1]:\n                t += s[i]\n        t = ''.join(sorted(t))\n        if t == ''.join(sorted(t[::-1])):\n            print(t)\nsolution(sys.stdin)\n",
        "num_ids": 164
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(q):\n        n, m = [int(x) for x in lines[i + 1].split()]\n        b = [int(x) for x in lines[i + 2].split()]\n        s = lines[i + 3]\n        result = ''\n        for j in range(m):\n            t = m - j - 1\n            for k in range(len(s)):\n                if (s[k] > s[t]) or (s[k] == s[t] and b[j] > 0):\n                    result += s[k]\n                    b[j] -= 1\n            if len(result) == n:\n                print(result)\n                break\n        else:\n            print('impossible')",
        "num_ids": 198
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    answer = \"\"\n\n    for i in range(n, 26 * n + n):\n        word = alphabet[i % 26]\n        if i // 26 == 0:\n            answer += word\n        else:\n            answer = word + answer\n    return answer",
        "num_ids": 89
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return chr(ord(\"a\") + n - 1)",
        "num_ids": 27
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n",
        "num_ids": 9
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = {}\n    numbers = set(range(1, n + 1))\n    for i in range(1, n + 1):\n        i = str(i)\n        if len(i) == 1:\n            d[i] = i\n        else:\n            d[i] = i[0] + 'a' * (len(i) - 2) + i[-1]\n\n    for i in range(27, n + 1, 26):\n        d[str(i)] = d[str(i - 1)] + 'a' * 26\n    for i in range(701, n + 1, 700):\n        d[str(i)] = d[str(i - 1)] + 'a' * 26\n    for i in range(18277, n + 1, 18276):\n        d[str(i)] = d[str(i - 1)] + 'a' * 26\n    for i in range(475253, n + 1, 475252):\n        d[str(i)] = d[str(i - 1)] + 'a' * 26\n    for i in range(1, n + 1):\n        if i in numbers:\n            print(d[str(i)])\n        else:\n            print(d[str(i)][0])\n\n\ndef",
        "num_ids": 314
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 2\n   ... ''')\n    'b'\n    \"\"\"\n    n = int(stdin)\n    nums = [chr(i) for i in range(97, 97 + n)]\n    nums += [chr(i) + chr(i + 26) for i in range(27, 27 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) for i in range(727, 727 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18278, 18278 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(475254, 475254 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18277, 18277 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(475253, 475253 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18279, 18279 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18280, 18280 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18281, 18281 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18282, 18282 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18283, 18283 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18284, 18284 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18285, 18285 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18286, 18286 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18287, 18287 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18288, 18288 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18289, 18289 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) for i in range(18290, 18290 + n)]\n    nums += [chr(i) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26) + chr(i + 26",
        "num_ids": 1595
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()[0]",
        "num_ids": 11
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str()",
        "num_ids": 5
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    dogs_names = []\n    for i in range(1, N + 1):\n        dogs_names.append(chr(ord('a') + i - 1))\n        if i % 26 == 0:\n            dogs_names.append(chr(ord('a') + i // 26))\n        if i % 27 == 0:\n            dogs_names.append(chr(ord('a') + i // 27))\n        if i % 28 == 0:\n            dogs_names.append(chr(ord('a') + i // 28))\n        if i % 29 == 0:\n            dogs_names.append(chr(ord('a') + i // 29))\n        if i % 701 == 0:\n            dogs_names.append(chr(ord('a') + i // 701))\n        if i % 702 == 0:\n            dogs_names.append(chr(ord('a') + i // 702))\n        if i % 18277 == 0:\n            dogs_names.append(chr(ord('a') + i // 18277))\n        if i % 18278 == 0:\n            dogs_names.append(chr(ord('a') + i // 18278))\n        if i % 18279 == 0:\n            dogs_names.append(chr(ord('a') + i // 18279))\n        if i % 475253 == 0:\n            dogs_names.append(chr(ord('a') + i // 475253))\n        if i % 475254 == 0:\n            dogs_names.append(chr(ord('a') + i // 475254))\n        if i % 475255 == 0:\n            dogs_names.append(chr(ord('a') + i // 475255))\n        if i % 475256 == 0:\n            dogs_names.append(chr(ord('a') + i // 475256))\n        if i % 475257 == 0:\n            dogs_names.append(chr(ord('a') + i // 475257))\n        if i % 475258 == 0:\n            dogs_names.append(chr(ord('a') + i // 475258))\n        if i % 475259 == 0:\n            dogs_names.append(chr(ord('a') + i // 475259))\n        if i % 475260 == 0:\n            dogs_names.append(chr(ord('a') + i // 475260))\n        if i % 475261 == 0:\n            dogs_names.append(chr(ord('a') + i // 475261))\n        if i % 475262 == 0:\n            dogs_names.append(chr(ord('a') + i // 475262))\n        if i % 475263 == 0:\n            dogs_names.append(chr(ord('a') + i // 475263))\n        if i % 475264 == 0:\n            dogs_names.append(chr(ord('a') + i // 475264))\n        if i % 475265 == 0:\n            dogs_names.append(chr(ord('a') + i // 475265))\n        if i % 475266 == 0:\n            dogs_names.append(chr(ord('a') + i // 475266))\n        if i % 475267 == 0:\n            dogs_names.append(chr(ord('a') + i // 475267))\n        if i % 475268 == 0:\n            dogs_names.append(chr(ord('a') + i // 475268))\n        if i % 475269 == 0:\n            dogs_names.append(chr(ord('a') + i // 475269))\n        if i % 475270 == 0:\n            dogs_names.append(chr(ord('a') + i // 475270))\n        if i % 475271 == 0:\n            dogs_names.append(chr(ord('a') + i // 475271))\n        if i % 475272 == 0:\n            dogs_names.append(chr(ord('a') + i // 475272))\n        if i % 475273 == 0:\n            dogs_names.append(chr(ord('a') + i // 475273))\n        if i % 475274 == 0:\n            dogs_names.append(chr(ord('a') + i // 475274))\n        if i % 475275 == 0:\n            dogs_names.append(chr(ord('a') + i // 475275))\n        if i % 475276 == 0:\n            dogs_names.append(chr(ord('a') + i // 475276))\n        if i % 475277 == 0:\n            dogs_names.append(chr(ord('a') + i // 475277))\n        if i % 475278 == 0:\n            dogs_names.append(chr(ord('a') + i // 475278))\n        if i % 475279 == 0:\n            dogs_names.append(chr(ord('a') + i // 475279))\n        if i % 475280 == 0:\n            dogs_names.append(chr(ord('a') + i // 475280))\n        if i % 475281 == 0:\n            dogs_names.append(chr(ord('a') + i // 475281))\n        if i % 475282 == 0:\n            dogs_names.append(chr(ord('a') + i // 475282))\n        if i % 475283 == 0:\n            dogs_names.append(chr(ord('a') + i // 475283))\n        if i % 475284 == 0:\n            dogs_names.append(chr(ord('a') + i // 475284))\n        if i % 475285 == 0:\n            dogs_names.append(chr(ord('a') + i // 475285))\n        if i % 475286 == 0:\n            dogs_names.append(chr(ord('a') + i // 475286))\n        if i % 475287 == 0:\n            dogs_names.append(chr(ord('a') + i // 475287))\n        if i % 475288 == 0:\n            dogs_names.append(chr(ord('a') + i // 475288))\n        if i % 475289 == 0:\n            dogs_names.append(chr(ord('a') + i // 475289))\n        if i % 475290 == 0:\n            dogs_names.append(chr(ord('a') + i // 475290))\n        if i % 475291 == 0:\n            dogs_names.append(chr(ord('a') + i // 475291))\n        if i % 475292 == 0:\n            dogs_names.append(chr(ord('a') + i // 475292))\n        if i % 475293 == 0:\n            dogs_names.append(chr(ord('a') + i // 475293))\n        if i %",
        "num_ids": 1595
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    return ''.join(chr(ord('a') + ord(i) - ord('a') + 1) for i in N)",
        "num_ids": 41
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().strip().split()\n    return min(len(a) for i, a in enumerate(words) if i > 0 and words[i - 1][-1] == a[0] and a[0].isupper())\n",
        "num_ids": 73
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = stdin.split()\n    ans = w[0]\n    for i in range(1, n):\n        while i < n and w[i].startswith(w[i - 1]):\n            w[i] = w[i][1:]\n        ans += w[i]\n    return ans",
        "num_ids": 84
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    words.sort()\n    res = ''\n    for i in range(n):\n        res += words[i]\n        if (i < n - 1 and words[i] == words[i + 1][0:len(words[i])]):\n            res +=''\n    return res\n",
        "num_ids": 87
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin.split() for stdin in stdin.split('\\n')[1:]]\n    words.sort(key=lambda w: len(w))\n\n    prev = [0] * n\n    min_len = 0\n    for i in range(n):\n        for j in range(i, -1, -1):\n            if j == i or prev[j] + 1 < prev[j + 1]:\n                break\n        min_len = max(min_len, j + 1)\n        prev[i] = j\n    return min_len\n",
        "num_ids": 144
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin.strip().split() for _ in range(n)]\n    min_size = float('inf')\n    for i in range(n):\n        for j in range(i, n):\n            if j - i > min_size:\n                break\n            first_word = words[i][0].upper()\n            for t in range(j - i):\n                if words[i + t][0].upper()!= first_word:\n                    break\n            else:\n                min_size = min(min_size, j - i)\n    return min_size\n",
        "num_ids": 146
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(input()))\n",
        "num_ids": 15
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    # list of possible days in which to solve the problems\n    days = [list(range(k)) for _ in range(k)]\n\n    def solve(t):\n        # number of problems to be solved during t-th day\n        num = a[t]\n        # number of problems to be solved during t-1-th day\n        max_num = a[t - 1] if t > 0 else 0\n        # number of problems to be solved during t-2-th day\n        max_max_num = a[t - 2] if t > 1 else 0\n        # number of problems to be solved during t-3-th day\n        max_max_max_num = a[t - 3] if t > 2 else 0\n\n        max_profit = num * max(max_num, max_max_num, max_max_max_num)\n        return max_profit\n\n    # solve the problems in the last day\n    max_profit = solve(len(a) - 1)\n\n    # print the results\n    for i in range(k):\n        days[i][0] = a[i]\n        for j in range(1, len(days[i])):\n            days[i][j] += days[i][j - 1]\n        print(*days[i])\n\n    return str(max_profit)\n\n\n\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000\")\nassert(solution(input()) == \"4000",
        "num_ids": 1232
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    dp = [0] * (k + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        max_profit = 0\n        for j in range(1, min(k + 1, i + 1)):\n            max_profit = max(max_profit, dp[j - 1] + max(0, d[i - 1] - j + 1))\n        dp[j] = max_profit\n    return str(max(0, dp[-1]))\n\n\n-----",
        "num_ids": 156
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_total_profit = 0\n    for i in range(k):\n        total_profit = sum(a[i:])\n        if max_total_profit < total_profit:\n            max_total_profit = total_profit\n    return str(max_total_profit)\n\nprint(solution(input()))\n",
        "num_ids": 114
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    problems = [a[i] for i in range(0, n, 2)]\n    days = [a[i] for i in range(1, n, 2)]\n    problems = [(p, i) for i, p in enumerate(problems)]\n    days = [(d, i) for i, d in enumerate(days)]\n    print(problems)\n    print(days)\n    problems.sort(key=lambda x: x[1], reverse=True)\n    days.sort(key=lambda x: x[1], reverse=True)\n    print(problems)\n    print(days)\n    days = [d[1] for d in days]\n    problems = [p[0] for p in problems]\n    print(problems)\n    print(days)\n    day_probs = [0 for _ in range(k)]\n    max_prob = problems[0]\n    for i, p in enumerate(problems):\n        if p > max_prob:\n            max_prob = p\n        day_probs[days[i]] += p\n    print(day_probs)\n    print(problems)\n    print(days)\n    return \" \".join(map(str, day_probs))",
        "num_ids": 328
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i = 0\n    count = 0\n    max_profit = 0\n    while i < n and count < k:\n        max_profit = max(max_profit, a[i] + max_profit)\n        if count + 1 < k:\n            count += 1\n            i += 1\n        else:\n            count = 0\n            i += 1\n    return str(max_profit)\n\n\n\nMore test cases\nInput\n6 2\n2 3 5 6 4 1\n\nOutput\n9\n3 2 3\nInput\n6 2\n1 1 1 1 1 1\n\nOutput\n1\n5\n\n\n\n\"\"\"\n",
        "num_ids": 179
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, k: int, arr: list) -> tuple:\n        if len(arr) == k:\n            return arr[0], arr[1:]\n        if len(arr) < k:\n            return -1, -1\n        max_profit = -1\n        for i in range(1, len(arr) - 1):\n            max_profit = max(max_profit, arr[i] - arr[i - 1])\n        return max_profit, arr[1:]\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    while len(arr) < n:\n        arr.append(arr[-1])\n    max_profit = -1\n    for _ in range(2):\n        max_profit, arr = solve(n, k, arr)\n        if max_profit == -1:\n            break\n    return str(max_profit)\n\nassert(solution(stdin) == stdout)\n",
        "num_ids": 246
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = a[:n]\n    #print(n, k)\n    #print(a)\n    #print(len(a))\n    c = [[a[0] for x in range(k + 1)] for y in range(n + 1)]\n    #print(c)\n    for j in range(1, n + 1):\n        for l in range(1, k + 1):\n            if l >= a[j]:\n                c[j][l] = max(a[j], c[j - 1][l - a[j]] + a[j])\n            else:\n                c[j][l] = c[j - 1][l]\n    #print(c)\n    return str(c[n][k]) +'' + str(c[n][k])",
        "num_ids": 223
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    # Distribute problems in order of difficulty\n    t = []\n    for i, ai in enumerate(a):\n        t.extend([ai] * (i+1))\n    if len(t) < k:\n        return '0'\n    elif len(t) == k:\n        return''.join([str(x) for x in t])\n\n    # Find optimal distribution\n    p = [0] * k\n    m = a[-1]\n    for i, ai in enumerate(a):\n        if ai > m:\n            m = ai\n            p[i] = 1\n\n    # Check optimal distribution\n    c = 0\n    for i in range(k):\n        if p[i] == 1:\n            c += 1\n    if c == k:\n        return '1'\n    else:\n        return '0'\n\nassert solution('5 2') == '3 2 3'\nassert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('3') == '0'\nassert solution('3 2') == '2 1'\nassert solution('3 1') == '1 0'\nassert solution('2 2') == '0 1'\nassert solution('2 2 3') == '1 0'\nassert solution('2 3') == '0'\nassert solution('3 3') == '0 0'\nassert solution('4 2') == '4000 2 2'\nassert solution('5 1') == '1 0'\nassert solution('6 1') == '0 0'\nassert solution('5 3') == '0'\nassert solution('2 1') == '0'\nassert solution('1 1 1 1 1') == '1'\nassert solution('2 1 1') == '0 0'\nassert solution('4 2 1 2') == '1 0'\nassert solution('2 2 2') == '1 1'\nassert solution('1 1 2') == '0 0'\nassert solution('3 1 1') == '1 0'\nassert solution('2 2 1 2') == '1 1'\nassert solution('3 3 1 1') == '1 1'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1",
        "num_ids": 1231
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    solutions = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            problems = [a[x] for x in range(i, j)]\n            if len(problems) == k:\n                solutions.append(problems)\n    max_profit = 0\n    for solution in solutions:\n        profit = sum(solution)\n        if profit > max_profit:\n            max_profit = profit\n    return str(max_profit)\n\nassert(solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\")\nassert(solution(\"5 1\\n1 1 1 1 1\") == \"1\")\nassert(solution(\"4 2\\n1 2000 2000 2\") == \"4000\")\nassert(solution(\"1 1\\n1 1\") == \"1\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"1 2\\n1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"1\")\nassert(solution(\"1 1 2\\n1 1\") == \"2\")\nassert(solution(\"1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1\") == \"1\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1\")\nassert(solution
        "num_ids": 1232
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\n\n---",
        "num_ids": 10
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\narr_pos = [0] * n\narr_neg = [0] * n\n\npos_sum = 0\nneg_sum = 0\n\nfor i in range(n):\n    pos_sum += arr[i]\n    neg_sum += arr[i]\n    if arr[i] > 0:\n        arr_pos[i] = pos_sum\n        pos_sum -= arr[i]\n    else:\n        arr_neg[i] = neg_sum\n        neg_sum -= arr[i]",
        "num_ids": 165
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    kolya = [int(x) for x in stdin.readline().strip().split(' ')]\n    ans = 0\n    for i in range(len(kolya) - 1):\n        if kolya[i] == 0:\n            continue\n        if kolya[i] < 0 < kolya[i + 1]:\n            ans += 1\n            kolya[i] *= -1\n            kolya[i + 1] *= -1\n    if kolya[0] == 0:\n        ans += 1\n    if kolya[-1] == 0:\n        ans += 1\n    return str(ans)\n\n\n\nassert(solution('''4\n1 -5 3 2\n''') == '1')\nassert(solution('''5\n4 -2 3 -9 2\n''') == '0')\nassert(solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n''') == '6')\nassert(solution('''8\n16 -5 -11 -15 10 5 4 -4\n''') == '3')\nassert(solution('''8\n1 1 -1 1 -1 1 1 -1 -1\n''') == '0')\nassert(solution('''8\n-5 -11 -15 10 5 4 -4\n''') == '0')\nassert(solution('''8\n4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\nassert(solution('''8\n-4 -5 3 2\n''') == '1')\n",
        "num_ids": 1462
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #TODO: rewrite this\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    if 0 not in a:\n        return 0\n    res = n\n    for i in range(n):\n        for j in range(i+1,n):\n            res += abs(a[j] - a[i])\n            if a[i] + a[j] == 0:\n                break\n    return res\n\nprint(solution(input()))\n\"\"\"\n\n\ndef",
        "num_ids": 126
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    # your code here\n    return str(solution_not_optimized(n, array))\n\n\ndef",
        "num_ids": 57
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    \n    print(\n        sum([\n            1 if x == 0 else 0\n            for x in a\n        ])\n    )",
        "num_ids": 66
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    m = 0\n    for i in range(1, n):\n        if a[i] + a[i - 1] < 0:\n            m += 1\n    return m",
        "num_ids": 68
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\"\"\"\n",
        "num_ids": 8
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    total = sum(A)\n    if total == 0:\n        return str(0)\n    best_diff = abs(total)\n    best_i = 0\n    for i in range(N):\n        if A[i] == 0:\n            continue\n        for j in range(i + 1, N):\n            if A[j] == 0:\n                continue\n            curr = abs(A[i] + A[j])\n            if curr < best_diff:\n                best_diff = curr\n                best_i = i\n    if best_diff == abs(total):\n        return str(0)\n    return str(best_diff)",
        "num_ids": 186
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split(\" \"))\n    a=list(map(int,stdin.split(\" \")))\n    t=int(stdin.readline())\n    for _ in range(t):\n        maximum=0\n        maxValue=0\n        for i in range(len(a)-1):\n            sum=abs(a[i]-a[i+1])\n            if sum>maximum:\n                maximum=sum\n                maxValue=a[i]\n            elif sum==maximum:\n                maxValue=min(maxValue,a[i])\n        print(maximum)\n    return \"\"\n",
        "num_ids": 149
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nm = int(stdin.readline())\nfor _ in range(m):\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) > k:\n            k = abs(a[i] - a[i + 1])\n    print(k)\n\nfor _ in range(int(stdin.readline())):\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) > k:\n            k = abs(a[i] - a[i + 1])\n    print(k)\n\"\"\"\n",
        "num_ids": 232
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(0, t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        a = [0] + a + [0]\n        a_ = sorted(a)\n        k = a[0]\n        for i in range(0, n):\n            k = max(k, abs(a[i] - a_[i]))\n        print(k)",
        "num_ids": 134
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = stdin.readline().strip().split()\n        n = int(n)\n        m = int(m)\n        if n == 1:\n            print(0)\n        elif n == 2:\n            if m > 0:\n                print(0)\n            elif m == 0:\n                print(1)\n            else:\n                print(2)\n        else:\n            a = [int(x) for x in stdin.readline().strip().split()]\n            best = 0\n            for i in range(n - 1):\n                if abs(a[i] - a[i+1]) > best:\n                    best = abs(a[i] - a[i+1])\n            print(best)",
        "num_ids": 198
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        n, m = [int(x) for x in stdin.readline().split()]\n        a = [int(x) for x in stdin.readline().split()]\n        pos = find_max_diff(a, m)\n        print(sum(abs(a[i] - a[i+1]) for i in range(pos)))\n\ndef",
        "num_ids": 112
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        N, S = map(int, stdin.readline().strip().split())\n        A = list(map(int, stdin.readline().strip().split()))\n\n        # max_abs_diff = 0\n        # for i in range(len(A) - 1):\n        #     max_abs_diff = max(max_abs_diff, abs(A[i] - A[i+1]))\n        max_abs_diff = max(abs(A[i] - A[i+1]) for i in range(len(A) - 1))\n\n        print(max_abs_diff)\n    return ''",
        "num_ids": 170
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def maxAbsoluteDifference(arr: list[int]) -> int:\n        n = len(arr)\n        max_ = 0\n        for i in range(1, n):\n            if max_ < abs(arr[i] - arr[i-1]):\n                max_ = abs(arr[i] - arr[i-1])\n        return max_\n\n    n, m = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n\n    return str(maxAbsoluteDifference(arr))",
        "num_ids": 134
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = list(map(int, stdin.readline().strip().split()))\n        arr = list(map(int, stdin.readline().strip().split()))\n        arr.sort()\n        print(abs(arr[n-1] - arr[n-2]))\n",
        "num_ids": 94
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write a function called `solution` that takes in a string of non-negative integers separated by spaces, and returns the first non-negative integer that appears more than once in the string. If there are no such integers, the function should return -1.\n    \n    The first non-negative integer that appears more than once in the string is the first integer that is not followed by a space character.\n    \n    Note: You should not count the spaces and the integer 0.\n    \n    >>> solution('1 3 2 2')\n    2\n    >>> solution('2 2 1')\n    2\n    >>> solution('2 2')\n    -1\n    >>> solution('2 2 4 3')\n    3\n    >>> solution('1 1 2 2 3')\n    2\n    >>> solution('2 1')\n    1\n    >>> solution('2 2 1')\n    2\n    >>> solution('1 1')\n    -1\n    >>> solution('2 2 4 3')\n    3\n    >>> solution('2 1 1 2 1')\n    2\n    '''\n    # Find the first integer that is larger than 1\n    i = 0\n    while True:\n        i += 1\n        if stdin[i] =='':\n            i += 1\n            continue\n        else:\n            break\n\n    # Count the number of integers in the string larger than 1\n    count = 0\n    for j in range(i, len(stdin)):\n        if stdin[j]!='':\n            count += 1\n        else:\n            break\n\n    # If no integer is greater than 1, print -1\n    if count == 0:\n        return -1\n\n    # Check if the next integer in the sequence is larger than 1\n    for k in range(i, len(stdin)):\n        if stdin[k]!='':\n            if stdin[k] > '1':\n                return k - i + 1\n\n    return -1",
        "num_ids": 443
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    v = 0\n    m = -1\n    for i in range(1, 1 + 10 ** 6):\n        if i % k == 0:\n            v += 1\n            if m == -1:\n                m = i\n    return str(m)\n\n\ndef",
        "num_ids": 72
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    return str(next(n for n in range(1, 7) if n % k == 0))",
        "num_ids": 38
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute the position of the first occurrence of a multiple of K in the sequence 7,77,777,\\ldots.\n    \"\"\"\n    k = int(stdin)\n    count = 1\n    for i in range(1, 11):\n        count = count * i\n        if count >= k:\n            break\n    if count == k:\n        return str(i - 1)\n    return \"-1\"\n",
        "num_ids": 99
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n // 2, n + 1):\n        if n % i == 0:\n            return str(i)\n    return '-1'",
        "num_ids": 47
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    n = 1\n    while n * K <= 7 ** n:\n        n += 1\n    else:\n        return -1\n    return n - 1",
        "num_ids": 45
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"{-1 if (n % 7) == 0 else (n // 7) + 1}\"\n\nassert(solution(stdin) == stdout)\n",
        "num_ids": 49
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    num = 0\n    for i in range(len(stdin)):\n        num = (num + int(stdin[i])) % k\n        if num == 0:\n            return i+1\n    return -1",
        "num_ids": 67
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(n, 0, -1):\n        if i % k == 0:\n            print(i)\n            break\n    else:\n        print(-1)",
        "num_ids": 57
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(7)\n",
        "num_ids": 7
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    perm = [int(x) for x in stdin.split()]\n    # perm = list(map(int, stdin.split()))\n    # return str(solution_naive(m, n, perm))\n    return str(solution_topological_sort(m, n, perm))\n\ndef",
        "num_ids": 95
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    p = list(map(int, lines[1].split(' ')))\n    left = 0\n    right = n - 1\n    count = 0\n    for i in range(n):\n        if left <= i <= right:\n            if p[i] == m:\n                count += 1\n                left += 1\n                right -= 1\n        elif i < left:\n            left += 1\n        elif i > right:\n            right -= 1\n    return str(count)\n\nassert(solution('''5 4\n2 4 5 3 1''') == '4')\nassert(solution('''5 5\n1 2 3 4 5''') == '1')\nassert(solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48')\nprint(solution(input()))",
        "num_ids": 239
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    p = [int(x) for x in stdin.split()]\n\n    p = sorted(p)\n\n    if (n % 2) == 1:\n        median = p[n // 2]\n    else:\n        median = (p[n // 2 - 1] + p[n // 2]) // 2\n\n    pairs = 0\n\n    for i in range(n):\n        if p[i] < median:\n            pairs += n - i\n\n    return pairs\n\n\nimport sys",
        "num_ids": 136
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n\"\"\"\n\ndef",
        "num_ids": 10
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    median = p[len(p) // 2]\n    return count_pairs(p, median, n, m)\n\ndef",
        "num_ids": 77
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    p.sort()\n    print(binSearch(p, m) / 2)\n\n\ndef",
        "num_ids": 54
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    from collections import Counter\n    c = Counter(p)\n    l = 0\n    for x in c:\n        if c[x] % 2!= 0:\n            l += c[x] - 1\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if p[j] < p[i]:\n                res += 1\n    return str(res // 2)",
        "num_ids": 136
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    for i in range(n):\n        p[i] -= 1\n\n    p.sort()\n\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] == m - i - j + 1:\n                c += 1\n    return str(c)\n\nimport sys\nprint(solution(sys.stdin.read()))\n",
        "num_ids": 128
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    seq = [int(x) for x in stdin.split(' ')]\n\n    seq.sort()\n\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if seq[i] + seq[j] == m:\n            return str(i + 1) +'' + str(j + 1)\n        elif seq[i] + seq[j] < m:\n            i += 1\n        else:\n            j -= 1\n    return '0'\n",
        "num_ids": 135
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cups_of_coffee, pages = map(int, stdin.split())\n    cups_of_coffee_count = Counter(stdin.strip().split())\n\n    cups_of_coffee_cups = [0] * (cups_of_coffee + 1)\n    for caffeine, cup_count in cups_of_coffee_count.items():\n        cups_of_coffee_cups[int(caffeine)] = cup_count\n\n    min_days = 10 ** 4\n    for i in range(1, cups_of_coffee + 1):\n        if cups_of_coffee_cups[i] == 0:\n            continue\n        current_day_min_time = 0\n        for j in range(1, i + 1):\n            current_day_min_time += max(0, cups_of_coffee_cups[j] - j + 1)\n        min_days = min(min_days, current_day_min_time)\n    if min_days == 10 ** 4:\n        min_days = -1\n    return min_days",
        "num_ids": 261
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #n, m = map(int, stdin.strip().split(' '))\n    #a = list(map(int, stdin.strip().split(' ')))\n\n    #a = sorted(a)\n    #a.reverse()\n\n    #n = len(a)\n    #s = 0\n    #for i in range(n):\n    #    s += a[i] * (i + 1)\n\n    #return '-1' if s < m else str(s // m)\n",
        "num_ids": 117
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if m == 0:\n        return '-1'\n    if n == 0:\n        return '-1'\n    a_sum = sum(a)\n    # print(a_sum)\n    if a_sum % n!= 0:\n        return '-1'\n    possible = []\n    # print(a)\n    for i in range(len(a)):\n        if a[i] <= n:\n            possible.append(i)\n    # print(possible)\n    if len(possible) == 0:\n        return '-1'\n    res = 0\n    for i in range(len(possible)):\n        if a_sum - a[possible[i]] == n:\n            return str(possible[i] + 1)\n        if a_sum - a[possible[i]] < n:\n            res += a[possible[i]] + (n - a_sum + a[possible[i]])\n    return str(res)",
        "num_ids": 272
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n",
        "num_ids": 6
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum number of days Polycarp needs to do it or \"impossible\" if it is impossible to write the coursework.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    for i in range(1, n):\n        a[i] = min(a[i], a[i-1] - 1)\n    if m <= a[-1]:\n        return str(m)\n    return \"-1\"",
        "num_ids": 136
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    cups = [int(x) for x in stdin.strip().split(' ')]\n    cups.sort()\n    moves = 0\n    for i in range(len(cups)):\n        if i > 0:\n            cups[i] -= cups[i-1]\n        if i > 1:\n            cups[i] -= cups[i-2]\n        if i > 2:\n            cups[i] -= cups[i-3]\n        if i > 3:\n            cups[i] -= cups[i-4]\n        if i > 4:\n            cups[i] -= cups[i-5]\n        cups[i] += cups[i]//2\n        moves += 1\n    return str(moves)",
        "num_ids": 204
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    if sum(a) % m:\n        return -1\n    else:\n        return (sum(a) - 1) // m\n\nsolution(stdin)\n\n\"\"\"\n",
        "num_ids": 81
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    for i in range(m):\n        a[i] -= i + 1\n\n    s = sum(a)\n\n    if s % n > 0:\n        return '-1'\n\n    ans = 0\n    for i in range(1, n):\n        if s - i * i > 0:\n            ans += s - i * i // n\n        else:\n            ans = -1\n            break\n\n    return str(ans)\n\ndef",
        "num_ids": 142
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    i = 1\n    while i < n:\n        if b[i] - b[i-1]!= b[i-1] - b[i-2]:\n            return -1\n        i += 1\n    return str(n-2)\n\nprint(solution(input()))\n'''\n\ndef",
        "num_ids": 113
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    d = {}\n    for i in range(n):\n        d.setdefault(i, 3)\n        d[i] -= 1\n    k = [0] * n\n    for i in range(n):\n        if d[i] == 0:\n            if i == 0:\n                k[i] = 0\n            else:\n                k[i] = k[i - 1] + 1\n        else:\n            if i == 0:\n                k[i] = 3\n            else:\n                k[i] = k[i - 1] + 1\n    res = k[n - 1]\n    for i in range(n - 2, -1, -1):\n        if k[i] < res:\n            res = k[i]\n        else:\n            if k[i] == res:\n                res -= 1\n    return str(res)\n",
        "num_ids": 236
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    n = int(data[0])\n    b = list(map(int, data[1].split()))\n    possible = True\n    for i in range(1, n):\n        if b[i] < b[i - 1]:\n            possible = False\n            break\n    if not possible:\n        print('-1')\n    else:\n        n = b[0]\n        for i in range(1, n):\n            if b[i] - b[i - 1]!= 1:\n                n -= 1\n                break\n        print(n)",
        "num_ids": 145
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    if n < 2:\n        return -1\n    s = set(range(1, 10))\n    for i in range(n - 1):\n        s2 = set(range(1, 10))\n        for j in s2:\n            if b[i] + j in s:\n                s.remove(b[i] + j)\n            if b[i] - j in s:\n                s.remove(b[i] - j)\n            if b[i]!= j:\n                s2.remove(j)\n        if not s:\n            return -1\n        s = s2\n    return len(s)\nprint(solution(None))\n",
        "num_ids": 190
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    l = len(b)\n    a = [0 for _ in range(l)]\n    for i in range(l - 1):\n        if b[i + 1] - b[i] == 1:\n            a[i + 1] = 1\n        elif b[i + 1] - b[i] == -1:\n            a[i + 1] = -1\n        else:\n            return '-1'\n    return str(max(a))\n\nassert(solution('''4\n24 21 14 10\n''') == '3')\nassert(solution('''2\n500 500\n''') == '0')\nassert(solution('''3\n14 5 1\n''') == '-1')\nassert(solution('''5\n1 3 6 9 12\n''') == '1')\n",
        "num_ids": 229
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    b = stdin[1].split()\n    i = 0\n    while i < len(b):\n        b[i] = int(b[i])\n        i += 1\n    b.sort()\n    b.append(b[-1] + 1)\n    res = 0\n    for i in range(1, len(b) - 1):\n        if b[i] - b[i - 1]!= 1 or b[i + 1] - b[i]!= 1:\n            res = -1\n            break\n    if res == 0:\n        res = len(b) - 1\n    return str(res)\n",
        "num_ids": 173
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n24 21 14 10')\n    '3'\n    >>> solution('2\\n500 500')\n    '0'\n    >>> solution('3\\n14 5 1')\n    '-1'\n    >>> solution('5\\n1 3 6 9 12')\n    '1'\n    \"\"\"\n    b = list(map(int, stdin.split(' ')))\n    n = int(stdin.split(' ')[0])\n    flag = False\n    for i in range(n):\n        if b[i] > b[i + 1] - b[i]:\n            flag = True\n            break\n    if flag:\n        return '-1'\n    else:\n        a = [b[0], b[1] - b[0], b[2] - b[1]]\n        for i in range(n - 2):\n            if a[i] > a[i + 1] - a[i]:\n                flag = True\n                break\n        if flag:\n            return '-1'\n        else:\n            return str(sum(a))",
        "num_ids": 255
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n\n    m = 0\n    count = 0\n    while count < n:\n        for i in range(n - 1):\n            if b[i] > b[i + 1]:\n                b[i] -= 1\n                b[i + 1] += 1\n                m += 1\n                count += 1\n                break\n        else:\n            return '-1'\n    return str(m)",
        "num_ids": 122
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        a = b[i+1] - b[i]\n        if b[i] == 0:\n            count = -1\n            break\n        if a == 1:\n            b[i] += 1\n            count += 1\n        elif a == -1:\n            b[i] -= 1\n            count += 1\n    return count\n",
        "num_ids": 126
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    seq = [int(x) for x in lines[1].split(' ')]\n\n    change = []\n    for i in range(1, n - 1):\n        if seq[i + 1] - seq[i]!= seq[i - 1] - seq[i]:\n            change.append(i)\n\n    if not change:\n        print('0')\n    else:\n        print(len(change))",
        "num_ids": 117
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return '0'\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [[False] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(n):\n        for j in range(k):\n            dp[i + 1][j] = dp[i][j]\n            dp[i + 1][j + 1] = (a[i] - a[i - 1] <= 5) and dp[i][j + 1]\n    return str(sum(dp[-1]) - 1)\n\n\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (solution(input()) == '0')\nassert (",
        "num_ids": 1591
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 5:\n                res += 1\n\n    return str(res)\n",
        "num_ids": 95
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    a = list(map(int, stdin.split()))\n    assert len(a) == n\n    b = list(set(a))\n    assert 1 <= len(b) <= k\n    b.sort(key = lambda x: -a.count(x))\n    res = 0\n    for i in range(len(b)):\n        if i < len(b) - 1:\n            if abs(b[i] - b[i + 1]) > 5:\n                res += 1\n                continue\n        res += 1\n    return str(res)",
        "num_ids": 152
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = stdin.split('\\n')\n    # n, k = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    # a = [int(x) for x in stdin[1].split(' ')]\n    # print(n,k, a)\n\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    print(a)\n    ans = 0\n    for i in range(n):\n        tmp = 0\n        for j in range(k):\n            if i - j < 0:\n                break\n            tmp += a[i - j] - a[i]\n        ans = max(tmp, ans)\n\n    print(ans)\n\n\nsolution(input())\n",
        "num_ids": 208
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    s = [int(x) for x in stdin.split()]\n    if k <= n <= 10 ** 9 and sum(s) <= 10 ** 9:\n        return str(len(set(s)))\n    return \"0\"",
        "num_ids": 73
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.read()\n    n, k = (int(x) for x in s.split())\n    a = list(int(x) for x in s.split())\n\n    a.sort()\n    a.reverse()\n\n    left = 0\n    right = len(a) - 1\n    while True:\n        if left >= right:\n            break\n\n        diff = a[right] - a[left]\n\n        if diff < 5:\n            left += 1\n        else:\n            right -= 1\n\n    return max(0, n - (left + 1))\n",
        "num_ids": 135
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    # skills.sort()\n    # print(skills)\n    # print(max(skills))\n    \n    return str(max(n-1, k))\n\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '5')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '4')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(",
        "num_ids": 1591
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    _, k = map(int, stdin[0].split())\n    lst = list(map(int, stdin[1].split()))\n    n = len(lst)\n    lst.sort()\n    team = 0\n    count = 0\n    for i in range(0, n - k + 1):\n        if lst[i + k - 1] - lst[i] <= 5:\n            count += 1\n            team += 1\n    return str(count)\n",
        "num_ids": 127
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    a = list(map(int, stdin.strip().split(' ')))\n\n    def is_balanced(a: List[int], b: List[int], i: int) -> bool:\n        return abs(sum(a) - sum(b)) <= 5\n\n    def count_balanced_teams(a: List[int], b: List[int], i: int) -> int:\n        if i == 0:\n            return 0\n\n        # if i == 1:\n        #     return 1 if is_balanced(a, b, i) else 0\n        if is_balanced(a, b, i):\n            return 1\n\n        return count_balanced_teams(a, b, i - 1)\n\n    def count_non_empty_teams(k: int) -> int:\n        if k == 0:\n            return 1\n\n        return count_balanced_teams(a, a, k)\n\n    return str(count_non_empty_teams(k))",
        "num_ids": 244
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(i) for i in stdin.split()]\n    A = [int(i) for i in stdin.split()[2:]]\n    print(solve(N, K, A))\n\ndef",
        "num_ids": 59
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [line.strip() for line in stdin.split('\\n')]\n    n, k, m = map(int, inputs[0].split())\n    all_scores = list(map(int, inputs[1].split()))\n\n    summation = sum(all_scores)\n    if summation < m:\n        return -1\n    average = summation / n\n    left_possible = 0\n    for score in all_scores:\n        if score > average:\n            left_possible += 1\n        else:\n            break\n\n    right_possible = k - left_possible\n    if left_possible < right_possible:\n        return left_possible\n    else:\n        return right_possible\n\nprint(solution(input()))\n\n'''\n",
        "num_ids": 193
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "num_ids": 5
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(num) for num in stdin.strip().split(' ')]\n    scores = [int(num) for num in stdin.strip().split(' ')]\n    return str(max(m - sum(scores), 0) if m >= sum(scores) else -1)",
        "num_ids": 75
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(i) for i in stdin.split()]\n\n    if k == 0:\n        return -1\n    if n == 1:\n        return k\n\n    # each element of list is a tuple (score, set of taken exams)\n    scores = [(0, set()) for _ in range(n)]\n\n    # set of taken exams\n    for i, a in enumerate(map(int, stdin.split()), start=1):\n        scores[i-1] = (a, scores[i-1][1] | {i})\n\n    taken = set()\n    for _ in range(m):\n        # choose the last exam (and remove it from taken exams)\n        taken.add(scores[-1][1].pop())\n\n        # we have to compare each element of list with taken exams\n        for i in range(n-2, -1, -1):\n            if scores[i][0] in taken:\n                # if we have an exam in list and it has been taken\n                taken.add(scores[i][1].pop())\n\n    if len(taken) < k:\n        # if we have less taken exam then goal\n        return -1\n    else:\n        return sum(scores[i][0] for i in range(n) if i in taken) // k\n\nprint(solution(input()))\n",
        "num_ids": 326
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    points = sum(A)\n    while points < K:\n        for i in range(N-1):\n            points += A[i]\n            if points >= K:\n                return str(K-points)\n        points = 0\n    return \"-1\"",
        "num_ids": 94
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    array = [int(i) for i in stdin.split()]\n\n    if sum(array) < m:\n        return \"-1\"\n\n    count, total, sums = 0, 0, 0\n    for score in array:\n        sums += score\n        count += 1\n        if sums >= m:\n            break\n\n    if sums < m:\n        return str(count)\n\n    for i in range(count, n):\n        sums += array[i]\n        if sums >= m:\n            break\n    return str(i + 1)\n\nassert(solution(\"5 10 7\") == \"8\")\nassert(solution(\"8 10 3 6\") == \"1\")\nassert(solution(\"4 5 3\") == \"-1\")\nassert(solution(\"7 2 1\") == \"3\")\nassert(solution(\"7 10 9\") == \"1\")\nassert(solution(\"8 10 5\") == \"-1\")\nassert(solution(\"3 4 6 2\") == \"1\")\nassert(solution(\"5 10 7\") == \"8\")\n\n\"\"\"\n\ndef",
        "num_ids": 266
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the problem.\n    \"\"\"\n    N, K, M = [int(x) for x in stdin.strip().split()]\n    A = [int(x) for x in stdin.strip().split()]\n    A.sort()\n    total = 0\n    for score in A:\n        total += score\n        if total >= M:\n            return str(score)\n    return str(-1)\n\nprint(solution(stdin))\n",
        "num_ids": 112
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    values = [int(value) for value in stdin.split()]\n    return str(int(sum(values)/values[0] + 1))\n\nprint(solution(input()))\n",
        "num_ids": 47
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, K, M = map(int, stdin.split(' '))\n    subject_scores = [int(num) for num in stdin.split(' ')]\n    subject_average = sum(subject_scores) / N\n\n    if subject_average > M:\n        return '-1'\n\n    subject_scores.sort(reverse=True)\n\n    for i in range(N):\n        subject_average += subject_scores[i]\n        if subject_average > M:\n            return str(i + 1)\n\n    return '-1'\n\nprint(solution(input()))\n\"\"\"\n",
        "num_ids": 151
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n",
        "num_ids": 6
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = list(map(int, stdin.split()))\n\n    scores = list(map(int, stdin.split()))\n    players = {i: scores[i-1] for i in range(1, n+1)}\n\n    for _ in range(q):\n        for player in range(1, n+1):\n            if players[player] > 0:\n                players[player] -= 1\n\n    return \"Yes\" * (n - sum(players.values())) + \"No\" * sum(players.values())\n\nprint(solution(input()))\n",
        "num_ids": 140
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = [int(num) for num in stdin.split()]\n    answers = [int(num) for num in stdin.split()]\n    score = [K] * N\n    # Game is finished when any player has zero points\n    while min(score) >= 0:\n        score = [s - 1 if s > 0 else 0 for s in score]\n        for i in range(Q):\n            ans = int(stdin.readline())\n            if ans == answers[i]:\n                score[i] += 1\n    return \"No\" if min(score) < 0 else \"Yes\"",
        "num_ids": 147
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.strip().split(' ')]\n    scores = [k for _ in range(n)]\n    for _ in range(q):\n        for i in [int(x) for x in stdin.strip().split(' ')]:\n            scores[i - 1] -= 1\n    print('No' if sum(scores) <= 0 else 'Yes')\n\ndef",
        "num_ids": 103
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ...",
        "num_ids": 3
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = map(int, stdin.split())\n    scores = [0] * (N - 1) + scores\n    for _ in range(Q):\n        i = int(stdin.readline())\n        if scores[i - 1] >= K:\n            scores[i - 1] -= 1\n    print(*scores)",
        "num_ids": 98
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Determine if each player survived the game\n    '''\n    n, k, q = [int(x) for x in stdin.split()]\n    players = [0] * n\n    for _ in range(q):\n        x = int(stdin.readline())\n        if x in players:\n            players[players.index(x)] = -1\n        else:\n            players[players.index(0)] = -1\n\n    print(' '.join(['No', 'Yes'][x > 0] for x in players))\n    return",
        "num_ids": 134
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, K, Q = int(lines[0].split()[0]), int(lines[0].split()[1]), int(lines[0].split()[2])\n    scores = [int(score) for score in lines[1:]]\n    for player in range(1, N):\n        if scores[player] <= 0:\n            scores[player] = -1\n\n    for player in range(N):\n        if scores[player] <= 0:\n            continue\n\n        if player == 0:\n            for i in range(1, Q + 1):\n                if scores[i]!= -1:\n                    scores[i] -= 1\n        else:\n            if scores[player] - 1 >= 0:\n                scores[player] -= 1\n                for i in range(player + 1, N):\n                    if scores[i] >= 0:\n                        scores[i] -= 1\n\n    for score in scores:\n        if score < 0:\n            return 'No'\n\n    return 'Yes'\n\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 4 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('2 2 2\\n2\\n2\\n') == 'Yes\\nYes')\nassert(solution('6 4 4\\n2\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('3 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('5 6 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('5 5 5\\n3\\n1\\n3\\n2\\n') == 'Yes\\nYes\\nYes\\nYes\\nYes')\nassert(solution('5 4 4\\n2\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('3 4 4\\n2\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('2 2 3\\n2\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('2 2 2\\n2\\n2\\n') == 'Yes\\nYes')\nassert(solution('7 4 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('5 5 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('7 5 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('7 6 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('7 7 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('9 7 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('9 8 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('9 9 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 10 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 11 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 12 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 13 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 14 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 15 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 16 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 17 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 18 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 19 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('10 20 3\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo",
        "num_ids": 1494
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 1 or m < 1:\n        return \"NO\"\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[i + 1:])))\n    r = []\n    c = []\n    for i in range(n):\n        r.append(a[i].count(1))\n    for i in range(m):\n        c.append(a[i].count(1))\n    for i in range(n):\n        a[i].sort()\n    a.sort()\n    if r == c:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef",
        "num_ids": 174
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    matrix = [list(map(int, stdin.strip().split(' '))) for _ in range(n)]\n    if not is_sorted(matrix):\n        print('NO')\n        return\n    # rotate rows and columns\n    for i in range(n):\n        matrix[i] = matrix[i][::-1]\n    for i in range(m):\n        for j in range(n):\n            if matrix[j][i] == 0:\n                matrix[j][i] = 1\n            else:\n                matrix[j][i] = 0\n    # check if sorted\n    if is_sorted(matrix):\n        print('YES')\n        for row in matrix:\n            print(''.join(map(str, row)))\n    else:\n        print('NO')\n\nsolution('')\n",
        "num_ids": 221
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    a.sort()\n    r = [0] * n\n    c = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                r[i] = 1\n                c[j] = 1\n    print(\"YES\" if r == sorted(r, reverse=True) and c == sorted(c, reverse=True) else \"NO\")\n    return \"\"\n",
        "num_ids": 160
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read in the input\n    n, m = tuple(map(int, stdin.split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(tuple(map(int, stdin.split())))\n    # Compute the answer\n    rows = sorted(set(tuple(row) for row in matrix))\n    cols = sorted(set(tuple(col) for col in zip(*matrix)))\n    r = \"\".join(str(1 - row[i]) for row in rows for i in range(m))\n    c = \"\".join(str(1 - col[i]) for col in cols for i in range(n))\n    return \"YES\" if r[::-1] + c[::-1] == \"0\" * (n + m) else \"NO\"\n\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"1 2 1 2\") == \"YES\"\nassert solution(\"2 3 2 3\") == \"NO\"\nassert solution(\"3 4 3 4\") == \"YES\"\nassert solution(\"3 3 3 4\") == \"NO\"\nassert solution(\"1 1 1 1 1 1\") == \"YES\"\nassert solution(\"1 2 1 2 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 1\") == \"YES\"\nassert solution(\"3 4 3 4 3 4\") == \"NO\"\nassert solution(\"3 4 2 3 4\") == \"YES\"\nassert solution(\"3 4 3 4 4\") == \"NO\"\nassert solution(\"3 4 3 4 4 4\") == \"NO\"\nassert solution(\"1 2 1 2 1 2 1\") == \"YES\"\nassert solution(\"1 2 1 2 1 2 1 1\") == \"YES\"\nassert solution(\"1 2 1 2 1 2 1 1 1\") == \"YES\"\nassert solution(\"3 4 3 4 3 4 3 4 4\") == \"NO\"\nassert solution(\"3 4 3 4 3 4 3 4 4 4 4\") == \"NO\"\nassert solution(\"3 4 3 4 3 4 3 4 4 4 4 4 4 4\") == \"NO\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution
        "num_ids": 1468
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES or NO\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1 and m == 1:\n        return \"NO\"\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    if not is_sorted(matrix):\n        return \"NO\"\n    inverted = [x[::-1] for x in matrix]\n    if not is_sorted(inverted):\n        return \"NO\"\n    string_rows = ''.join([''.join(map(str, x)) for x in matrix])\n    string_cols = ''.join([''.join(map(str, x)) for x in inverted])\n    return \"YES\\n{}\\n{}\".format(string_rows, string_cols)\n\ndef",
        "num_ids": 204
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nfrom typing import Tuple\n\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [map(int, stdin.split()) for _ in range(n)]\n    for _ in range(n):\n        for i in range(m):\n            if matrix[_][i] == 1:\n                matrix[_][i] = 0\n            else:\n                matrix[_][i] = 1\n\n    def is_sorted(matrix: list) -> bool:\n        for i in range(1, len(matrix)):\n            if matrix[i - 1] > matrix[i]:\n                return False\n\n        return True\n\n    def convert_matrix_to_string(matrix: list) -> str:\n        s = ''\n        for row in matrix:\n            for _ in row:\n                s += '1' if _ == 1 else '0'\n        return s\n\n    if is_sorted(matrix):\n        return 'YES'\n\n    # transform the matrix to a string\n    s = convert_matrix_to_string(matrix)\n\n    # check if the string is sorted in descending order\n    s = s[::-1]\n    if is_sorted(s):\n        return 'YES'\n\n    # invert each row\n    s = s[::-1]\n    s = s[::-1]\n    if is_sorted(s):\n        return 'YES'\n\n    # invert each column\n    s = s[::-1]\n    s = s[::-1]\n    if is_sorted(s):\n        return 'YES'\n\n    return 'NO'\n",
        "num_ids": 379
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    for i in range(n):\n        row = sorted(matrix[i], reverse=True)\n        for j in range(m):\n            if matrix[i][j]!= row[j]:\n                return 'NO'\n    for j in range(m):\n        column = sorted(matrix[i][j] for i in range(n))\n        for i in range(n):\n            if matrix[i][j]!= column[i]:\n                return 'NO'\n    return 'YES'\n\n\nprint(solution(stdin.read()))\n",
        "num_ids": 185
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns the sequence of operations to sort a given matrix\n    \"\"\"\n\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, x.split())) for x in stdin.splitlines()[1:n+1]]\n    for row in range(n):\n        for col in range(m):\n            if matrix[row][col] == 0:\n                invert_row(matrix, row, col)\n            if matrix[row][col] == 1:\n                invert_col(matrix, row, col)\n    return \"YES\"\n\ndef",
        "num_ids": 151
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2 or len(stdin) > 10:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "num_ids": 35
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.isnumeric() and 1 <= len(stdin) <= 10 else \"No\"",
        "num_ids": 28
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if is_valid(stdin):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef",
        "num_ids": 29
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.isdigit() and int(stdin) > 1 else \"No\"",
        "num_ids": 26
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"No\"\n    for i in range(2, n):\n        if n % i == 0:\n            return \"No\"\n    return \"Yes\"",
        "num_ids": 54
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Yes\"\n    elif n % 2 == 1:\n        return \"No\"\n    else:\n        return \"Yes\" if int(stdin[:n // 2]) == int(stdin[n // 2:]) else \"No\"",
        "num_ids": 74
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if n % 2 == 0 else 'No'\n\nassert(solution('1113') == 'Yes')\nassert(solution('22211') == 'No')\nassert(solution('1113') == 'Yes')\nassert(solution('1111213') == 'Yes')\nassert(solution('11112') == 'No')\nassert(solution('222') == 'No')\nassert(solution('1') == 'Yes')\nassert(solution('22') == 'No')\nassert(solution('2222') == 'Yes')\nassert(solution('123') == 'No')\nassert(solution('11111') == 'Yes')\nassert(solution('11') == 'Yes')\nassert(solution('11111') == 'Yes')\nassert(solution('111111111') == 'Yes')\nassert(solution('11111') == 'Yes')\nassert(solution('1111111') == 'Yes')\nassert(solution('1111111') == 'Yes')\nassert(solution('111111') == 'No')\nassert(solution('111111') == 'Yes')\nassert(solution('111111') == 'Yes')\nassert(solution('111111') == 'Yes')\nassert(solution('1111') == 'Yes')\nassert(solution('22222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('22222') == 'Yes')\nassert(solution('22222') == 'Yes')\nassert(solution('22222') == 'Yes')\nassert(solution('2222') == 'Yes')\nassert(solution('22') == 'No')\nassert(solution('2') == 'No')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('222222') == 'Yes')\nassert(solution('",
        "num_ids": 1957
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n\"\"\"\n",
        "num_ids": 8
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    if line.isnumeric():\n        return \"Yes\"\n    return \"No\"",
        "num_ids": 30
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, b, a = map(int, stdin.split())\n    s = [int(x) for x in stdin.split()]\n    return str(max([s[x-1] + b if x <= n else s[x-1] for x in range(1, n+1)]))\n\nprint(solution(stdin))\n\"\"\"\n\n\ndef",
        "num_ids": 95
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n\n    energy = [0 for i in range(n)]\n    s = [int(x) for x in stdin.split()]\n\n    # Compute energy of each segment\n    for i in range(1, n):\n        if s[i] == 1:\n            energy[i] += 1\n        else:\n            energy[i] -= 1\n\n    # Store energy of each segment\n    for i in range(1, n):\n        if s[i] == 1:\n            energy[i] += energy[i - 1]\n\n    # Compute max distance\n    maximum = 0\n    for i in range(n):\n        if i == 0:\n            maximum += energy[i]\n        else:\n            maximum = max(maximum, energy[i] + energy[i - 1])\n\n    return str(maximum)\n",
        "num_ids": 212
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, battery_capacity, accumulator_capacity = map(int, stdin.rstrip().split(' '))\n    segments = list(map(int, stdin.rstrip().split(' ')))\n    battery_levels = [battery_capacity] * len(segments)\n    accumulator_levels = [accumulator_capacity] * len(segments)\n    for i in range(1, len(segments)):\n        if segments[i] == 1:\n            battery_levels[i] = min(battery_levels[i-1] - 1, accumulator_levels[i-1])\n            accumulator_levels[i] = min(accumulator_levels[i-1] - 1, battery_levels[i-1])\n        else:\n            battery_levels[i] = accumulator_levels[i-1]\n            accumulator_levels[i] = min(accumulator_levels[i-1] - 1, battery_levels[i-1])\n    return str(battery_levels[-1] + accumulator_levels[-1])\n\nassert(solution('''5 2 1''') == '5')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''",
        "num_ids": 1309
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    arr = [0] * n\n    for i in range(1, n):\n        if s[i] == 1:\n            arr[i] = 1\n    \n    cnt = 0\n    a_cnt, b_cnt = 0, 0\n    max_cnt = 0\n    for i in range(n):\n        if i == 0:\n            a_cnt += 1\n            b_cnt += 1\n        if arr[i] == 1:\n            if a_cnt > a:\n                b_cnt += 1\n                a_cnt = 0\n            if b_cnt > b:\n                a_cnt += 1\n                b_cnt = 0\n            if i == n - 1:\n                max_cnt = max(max_cnt, a_cnt + b_cnt)\n            else:\n                max_cnt = max(max_cnt, a_cnt + b_cnt + 1)\n    return str(max_cnt)\n\nprint(solution(input()))\n\n\"\"\"\n",
        "num_ids": 283
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = [0] * n\n    for i in range(n):\n        s[i] = int(stdin[i])\n\n    print(b - s.count(0))",
        "num_ids": 61
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n    segments = [int(x) for x in stdin.split()]\n    if sum(segments) % 2 == 0:\n        return \"0\"\n    else:\n        return str(b + int(sum(segments) / 2))\n\nprint(solution(stdin))\n",
        "num_ids": 92
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    pos = [0] * (n+1)\n    pos[0] = 1\n    for i in range(n):\n        if s[i] == 1:\n            pos[i+1] = pos[i] + 1\n        else:\n            pos[i+1] = pos[i]\n    return str(pos[n])\n\ndef",
        "num_ids": 124
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # n,b,a = [int(x) for x in stdin.split()]\n    # s = [int(x) for x in stdin.split()]\n    # c = [0]*n\n    # if s[0] == 1: c[0] = 1\n    # for i in range(n):\n    #     if i>0 and s[i] == 1: c[i] = min(c[i-1],b)\n    #     if s[i] == 1: b-=1\n    #     if i<n-1 and s[i] == 0: c[i+1] = min(c[i],b)\n    #     if s[i] == 0: b+=1\n    #     if i==n-1: c[i] = min(c[i],a)\n    #     if s[i] == 0: a-=1\n    # return ''.join(map(str,c))\n    #\n    n,b,a = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    c = [0]*n\n    c[0] = 1\n    for i in range(1,n):\n        if s[i] == 1: c[i] = min(c[i-1],b)\n        if s[i] == 1: b-=1\n        if i<n-1 and s[i] == 0: c[i+1] = min(c[i],b)\n        if s[i] == 0: b+=1\n        if i==n-1: c[i] = min(c[i],a)\n        if s[i] == 0: a-=1\n    return ''.join(map(str,c))\n\n\"\"\"\n\n\ndef",
        "num_ids": 444
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.strip().split(' ')]\n    s = [int(x) for x in stdin.strip().split(' ')]\n    c = 0\n    for i in range(n-1):\n        if s[i]:\n            c += max(b-1, 0)\n        else:\n            c += max(a-1, 0)\n    return str(c)\n\n\nimport sys\n",
        "num_ids": 109
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return ''",
        "num_ids": 11
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    sign = \"+\"\n    stack = []\n    stdin = stdin.replace(\"-\", \"+-\").replace(\"+\", \"+-\")\n    for i in range(len(stdin)):\n        if stdin[i] == \"(\":\n            stack.append(res)\n            stack.append(sign)\n            res = 0\n            sign = \"+\"\n        elif stdin[i] == \")\":\n            res = res + stack.pop() * stack.pop()\n        elif stdin[i] in \"+-\":\n            sign = stdin[i]\n        elif stdin[i].isdigit():\n            res = res * 10 + int(stdin[i])\n    return res\n\nimport sys",
        "num_ids": 175
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return stdin",
        "num_ids": 12
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution as a string\n    \"\"\"\n    expression = stdin.strip()\n    return str(eval(expression))\n\nprint(solution(input()))\n",
        "num_ids": 43
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n",
        "num_ids": 7
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def evaluation(expr: str) -> int:\n        result = 0\n        for idx, sign in enumerate(expr):\n            if sign in \"+-\":\n                number = int(expr[idx - 1])\n                if sign == \"+\":\n                    result += number\n                elif sign == \"-\":\n                    result -= number\n        return result\n\n    expr = stdin.split(\"-\")\n    res = evaluation(expr[0])\n    for e in expr[1:]:\n        res -= evaluation(e)\n    return str(res)",
        "num_ids": 126
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Remove newline\n    stdin = stdin[:-1]\n\n    # Split into separate parts\n    parts = stdin.split('-')\n\n    # Add first part with '+'\n    parts.insert(0, '')\n\n    # Sum all parts\n    result = eval(''.join(parts))\n\n    # Return result\n    return str(result)\n\nprint(solution(input()))\n",
        "num_ids": 95
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the result of the given arithmetic expression\n    using a variant of the RPN calculator\n    \"\"\"\n    def calc(op1, op2):\n        if op1 == '+':\n            return op2 + op1\n        elif op1 == '-':\n            return op2 - op1\n        else:\n            return op2 / op1\n\n    def rpn_calc(stack):\n        op2 = stack.pop()\n        op1 = stack.pop()\n        return calc(op1, op2)\n\n    stack = []\n    for token in stdin.split():\n        if token.isdigit():\n            stack.append(int(token))\n        else:\n            stack.append(rpn_calc(stack))\n    return str(stack[0])\n",
        "num_ids": 186
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8-7+6-5+4-3+2-1-0\")\n    '4'\n    >>> solution(\"2+2\")\n    '-46'\n    >>> solution(\"112-37\")\n    '375'\n    \"\"\"\n    return str(eval(stdin))",
        "num_ids": 72
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdout.strip()\n\nprint(solution(input()))",
        "num_ids": 21
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    if k < 4 or k > 10**5:\n        return \"NO\"\n\n    costumes = {i: set() for i in range(k)}\n    for i in range(n):\n        b, g = (int(x) for x in stdin.split())\n        costumes[b].add(g)\n        costumes[g].add(b)\n    \n    for i in range(k):\n        if len(costumes[i]) > 1:\n            return \"NO\"\n    \n    for i in range(n - 1):\n        b, g = (int(x) for x in stdin.split())\n        if b == g:\n            return \"NO\"\n    \n    return \"YES\"\n\n\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"1 4\") == \"YES\"\nassert solution(\"5 10\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"7 4\") == \"NO\"\nassert solution(\"9 4\") == \"YES\"\nassert solution(\"4 5\") == \"NO\"\nassert solution(\"9 3\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\nassert solution(\"5 5\") == \"NO\"\nassert solution(\"5 5\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1",
        "num_ids": 1118
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(map(lambda line: str(line) +'', result))\n\n\n@pytest.mark.parametrize('stdin, result', [\n    (f'{EXAMPLES}', ''),\n    (f'{EXAMPLES}', 'YES\\n1 1\\n3 2\\n2 3\\n3 4\\n4 3\\n2 4\\n3 1\\n1 4\\n4 1\\n1 4\\n3 1\\n2 4\\n1 4\\n3 2\\n2 1'),\n    (f'{EXAMPLES}', 'NO\\n'),\n    (f'{EXAMPLES}', 'YES\\n3 1\\n1 3\\n2 3\\n3 2\\n1 1\\n2 1\\n3 1\\n2 1\\n3 2\\n1 1'),\n    (f'{EXAMPLES}', 'NO\\n'),\n])\ndef",
        "num_ids": 227
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # A, B = map(int, stdin.split())\n    # while A > 0 and B > 0:\n    #     if A!= B:\n    #         print(\"NO\")\n    #         break\n    #     A -= 1\n    #     B -= 1\n    # else:\n    #     print(\"YES\")\n    #     print(\"{} {}\".format(A, B))\n    #     if A < B:\n    #         for i in range(A, B):\n    #             print(\"{} {}\".format(i, i + 1))\n    #     else:\n    #         for i in range(A, B, -1):\n    #             print(\"{} {}\".format(i, i + 1))\n    #     print()\n\n    pass\n\nsolution(stdin)",
        "num_ids": 191
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1118
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\nsolution(stdin)\n\n\n'''\n",
        "num_ids": 17
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    if n < 2 or k < 2:\n        return 'NO'\n    if n % 2!= 0:\n        return 'NO'\n    if n % 4!= 0:\n        return 'NO'\n\n    def generate_palette(k: int, n: int, answer: list[int]) -> list[int]:\n        if n == 2:\n            return answer\n        a, b = answer\n        for i in range(1, k):\n            result = [i, a, b, a, i]\n            a, b = b, i\n            yield from generate_palette(k, n - 1, result)\n\n    colors = list(generate_palette(k, n // 2, [0] * k))\n    return 'YES\\n' + '\\n'.join(map(str, colors))\n\nassert solution('2 3\\n') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\nassert solution('6 2\\n') == 'YES\\n1 1\\n1 3\\n1 2\\n1 4\\n1 5\\n2 2\\n2 4\\n2 3\\n3 3\\n3 4\\n3 5\\n4 4\\n4 5\\n5 5\\n'\nassert solution('10 4\\n') == 'YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n'\nassert solution('13 4\\n') == 'NO\\n'\n",
        "num_ids": 417
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or k > 10 ** 5:\n        return \"NO\"\n    pairs = list(itertools.combinations_with_replacement(range(1, n + 1), 2))\n    colors = list(range(1, k + 1))\n    for i, j in pairs:\n        if colors[i - 1] == colors[j - 1]:\n            return \"NO\"\n    return \"YES\"\n\n\nassert solution(\"5 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n",
        "num_ids": 157
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(k, n):\n        if sum(a[i - k:i]) >= x:\n            ans = max(ans, sum(a[i - k:i]))\n    return str(ans)\n",
        "num_ids": 102
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = 0\n    for i in range(x, l, x):\n        if a[i] > t:\n            t = a[i]\n    if t == 0:\n        return -1\n    return t\n\nassert (solution(stdin)) == 18\n\n'''\n",
        "num_ids": 102
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2 3\\n5 1 3 10 1\\n\")\n    '18\\n'\n    >>> solution(\"6 1 5\\n10 30 30 70 10 10\\n\")\n    '-1\\n'\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    i = k - 1\n    j = 0\n    max_sum = 0\n    while j < n - k + 1:\n        if sum(a[j:j + k]) < x:\n            j += 1\n            continue\n        elif sum(a[j:j + k]) == x:\n            max_sum = max(max_sum, sum(a[j:j + k]))\n            j += 1\n        else:\n            j += 1\n            while j < n - k + 1 and sum(a[j:j + k]) > x:\n                j += 1\n                if j == n - k + 1:\n                    break\n    if sum(a[j:j + k]) < x:\n        return \"-1\"\n    else:\n        return max_sum\n",
        "num_ids": 274
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    beauty = sum(a)\n    sums = [0 for x in range(n - k + 1)]\n\n    for i in range(n - k + 1):\n        curr = sum(a[i:i+k])\n        if curr > beauty:\n            continue\n        sums[i] = curr\n        for j in range(1, k):\n            sums[i] = max(sums[i], sums[i-j] + curr)\n\n    return str(-1) if sums[-1] < x else str(sums[-1])",
        "num_ids": 176
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    if x > n:\n        return \"-\"\n\n    best = sum(a[:x])\n    for i in range(k, n - x + 1):\n        if sum(a[i - k:i]) > best:\n            best = sum(a[i - k:i])\n    return best",
        "num_ids": 111
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    if k >= x:\n        return -1\n    beauty = list(map(int, stdin.split()))\n    l = k\n    a = [0] * n\n    max_sum = 0\n    for i in range(n):\n        while a[i] < l and i + l < n:\n            a[i] += 1\n            max_sum = max(max_sum, sum(beauty[i:i + l]))\n            l += 1\n        l -= 1\n    return max_sum\n\nassert (solution('''4 3 1''')) == '100'\nassert (solution('''5 2 3''')) == '18'\nassert (solution('''6 1 5''')) == '-1'\nassert (solution('''2 5 4''')) == '10'\nassert (solution('''4 6 1''')) == '20'\nassert (solution('''4 1 1''')) == '10'\nassert (solution('''4 1 1''')) == '10'\nassert (solution('''4 1 1''')) == '10'\nassert (solution('''4 3 1''')) == '18'\nassert (solution('''3 2 2''')) == '8'\nassert (solution('''4 2 3''')) == '8'\nassert (solution('''6 1 5''')) == '-1'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6 1 1''')) == '10'\nassert (solution('''6",
        "num_ids": 1543
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    beauties = [int(x) for x in stdin.split()]\n    beauties.sort(reverse=True)\n    tot_beauty = sum(beauties[:x])\n    max_beauty = tot_beauty\n    left = 0\n    right = len(beauties) - 1\n    while left < right:\n        if abs(tot_beauty - (right - left)) < max_beauty:\n            max_beauty = abs(tot_beauty - (right - left))\n        tot_beauty -= (right - left) * (beauties[left] + beauties[right])\n        left += 1\n        right -= 1\n    if max_beauty == tot_beauty:\n        return -1\n    else:\n        return max_beauty",
        "num_ids": 209
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input.\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    # Find the length of the longest continuous segment with at least k consecutive reposts.\n    # The best we can do is the max of the longest continuous segment with at least k consecutive reposts\n    # plus the max sum of the values of all pictures.\n    #\n    # Because we have to repost at least k consecutive pictures, there is no point in reposting longer than k\n    # and this solution is never the correct one.\n    longest_contiguous_segment = max(k, max(a) - min(a) + 1)\n\n    # Calculate the maximum possible sum of values of reposted pictures.\n    # We do not need to repost at least k consecutive pictures.\n    return max(a) * longest_contiguous_segment\n",
        "num_ids": 222
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> Tuple[int, List[int]]:\n        n, k, x = (int(i) for i in stdin.rstrip().split())\n        a = list(int(i) for i in stdin.rstrip().split())\n        return n, a\n\n    def get_beauty_sum(n: int, a: List[int]) -> int:\n        beauty = 0\n        for i in range(1, n):\n            if a[i - 1] < a[i]:\n                beauty += a[i] - a[i - 1]\n        return beauty\n\n    n, a = get_input()\n    beauty_sum = get_beauty_sum(n, a)\n    if n < k + 1 or x < 1 or x > n:\n        return -1\n    elif beauty_sum >= x:\n        return n * max(a)\n    else:\n        return -1\n",
        "num_ids": 222
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if x > n:\n        return \"-1\"\n    if x == n:\n        return str(sum(a))\n    if x == 1:\n        return \"0\"\n    beautysum = [0] * n\n    beautysum[0] = a[0]\n    if k == 1:\n        for i in range(1, n):\n            beautysum[i] = max(beautysum[i - 1], a[i])\n        return str(max(beautysum))\n\n    for i in range(1, n - k + 1):\n        beautysum[i] = max(a[i + k - 1], beautysum[i - 1] + a[i + k - 1])\n    return str(max(beautysum))\n\n\nassert solution(\"4 3 1\") == \"-1\"\nassert solution(\"5 2 3\") == \"18\"\nassert solution(\"6 1 5\") == \"100\"\n",
        "num_ids": 258
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    s = stdin.strip('0')\n\n    min_cost = 0\n\n    for i in range(n):\n        if s[i] == '1':\n            min_cost += i\n\n    for i in range(n):\n        for j in range(1, k + 1):\n            if i + j >= n:\n                break\n\n            if s[i] == '0' and s[i + j] == '0':\n                continue\n\n            min_cost += j\n\n    return str(min_cost)",
        "num_ids": 140
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(sum(int(x) for x in stdin[1:-1].split('1')), sum(int(x) for x in stdin[1:-1].split('0'))))\n\n\n\n###\n\ndef",
        "num_ids": 56
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip('0')\n\n    if k == 0:\n        return len(s)\n\n    r = range(max(1, len(s) - k), min(n, len(s) + k) + 1)\n    r = (x for x in r if s[x - 1] == '0')\n    res = sum(r)\n    for i in range(n):\n        if s[i] == '1':\n            res += i + 1\n\n    return res\n\nassert(solution('1011') == 4)\nassert(solution('0111') == 4)\nassert(solution('1111') == 5)\nassert(solution('11011') == 5)\nassert(solution('101') == 4)\nassert(solution('11111') == 11)\nassert(solution('111111') == 15)\n",
        "num_ids": 220
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.strip()\n    arr = [int(i) for i in s]\n    sum = 0\n    for i in range(n):\n        for j in range(max(0, i - k), min(n, i + k) + 1):\n            if arr[i] == 1:\n                sum += i + 1\n    return str(sum)\n\nprint(solution(input()))\n",
        "num_ids": 118
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n\n    cost = 0\n    for i in range(n):\n        if s[i] == '0':\n            cost += i\n        else:\n            cost += k\n\n    return cost\n\nassert(solution('''5 2\n00100''') == '3')\nassert(solution('''6 1\n000000''') == '21')\nassert(solution('''4 1\n0011''') == '4')\nassert(solution('''12 6\n000010000100''') == '15')\n\"\"\"\n\ndef",
        "num_ids": 154
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # put your python code here\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip('\\n')\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i + k\n    return str(cost)\n    ",
        "num_ids": 81
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str) -> int:\n        n, k = map(int, stdin.split())\n        dp = [[0] * (n + 1) for _ in range(k)]\n        dp[0][0] = 0\n        for i in range(1, k):\n            for j in range(n):\n                dp[i][j + 1] = min(dp[i - 1][j + 1], dp[i - 1][j] + j + 1)\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j] + j)\n                if s[j] == '0':\n                    dp[i][j + 1] = min(dp[i][j + 1], dp[i][j])\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j])\n        return dp[k - 1][n]\n\n    return solve(stdin)\n",
        "num_ids": 231
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    s = stdin[1]\n    if s.count('1') < n:\n        return 0\n    return s.count('1') * k\n\nprint(solution('5 2\\n00100'))\nprint(solution('6 1\\n000000'))\nprint(solution('4 1\\n0011'))\nprint(solution('12 6\\n000010000100'))\n",
        "num_ids": 139
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin.strip()\n    s = [0] + [int(x) for x in s] + [0]\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(i - k, i + k + 1):\n            if j < 0:\n                continue\n            if j > n:\n                continue\n            if s[i] == 0:\n                dp[i][j] = dp[i - 1][j] + k\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(sum(dp[n]))\n\n\ndef",
        "num_ids": 199
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    s = stdin.split(' ', n)[1]\n    res = 0\n    for i in range(n):\n        if s[i] == '1':\n            res += i * k\n    return str(res)\n",
        "num_ids": 73
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] == stdin[1] else \"No\"",
        "num_ids": 22
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0], stdin[-1])\n\nassert solution('') == ''\nassert solution('abcd') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghih') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'abcd'\nassert solution('abcdefgh') == 'abcd'\nassert solution('abcdefghi') == 'ab",
        "num_ids": 1780
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.strip() == stdin.strip()[::-1] else 'No'",
        "num_ids": 27
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return 'No'\n    \n    # O(n)\n    counts = {}\n    for i in s:\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    \n    # O(n)\n    for i in t:\n        if i not in counts:\n            return 'No'\n        else:\n            if counts[i] == 0:\n                return 'No'\n            else:\n                counts[i] -= 1\n    return 'Yes'\n\nprint(solution(input()))\n",
        "num_ids": 168
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.replace(\"a\", \"e\").replace(\"l\", \"z\").replace(\"z\", \"e\") == stdin else 'No'",
        "num_ids": 38
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c1, c2 = stdin.split()\n    return \"Yes\" if c1 == c2 else \"No\"",
        "num_ids": 29
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s == t:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "num_ids": 41
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return \"Yes\" if s == t else \"No\"\n\nassert(solution(\"azzel\") == \"Yes\")\nassert(solution(\"apple\") == \"Yes\")\nassert(solution(\"aaaaa\") == \"No\")\nassert(solution(\"aazza\") == \"Yes\")\nassert(solution(\"azazaz\") == \"Yes\")\nassert(solution(\"aazzaz\") == \"Yes\")\nassert(solution(\"aazzaz\") == \"Yes\")\n\"\"\"\n",
        "num_ids": 130
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s == t:\n        return \"Yes\"\n    return \"No\"\n",
        "num_ids": 38
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    A = [map(int, stdin.split()) for _ in range(n)]\n    dp = [[0] * (k + 1) for _ in range(m + 1)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(k + 1):\n            if j >= A[i][0]:\n                dp[i + 1][j] = max(dp[i][j], dp[i][j - A[i][0]] + A[i][1])\n            else:\n                dp[i + 1][j] = dp[i][j]\n    return str(max(dp[n - 1]))\n\nassert solution(\"2 1 4\\n1\\n\") == \"1\"\nassert solution(\"2 3 2\\n1\\n1\\n\") == \"1\"\nassert solution(\"2 1 2\\n1\\n1\\n\") == \"2\"\nassert solution(\"2 1 4\\n1\\n3\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\nimport sys\nfrom functools import lru_cache\n\nsys.setrecursionlimit(100000)\n\n\n@lru_cache(maxsize=None)\ndef",
        "num_ids": 299
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ",
        "num_ids": 2
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bookstore_num, algorithm_num = map(int, stdin.split(' '))\n    books = [map(int, stdin.split(' ')) for _ in range(bookstore_num)]\n    algorithm_level = [0] * algorithm_num\n\n    for i, (cost, ability) in enumerate(books):\n        for j in range(algorithm_num):\n            if ability >= algorithm_level[j]:\n                algorithm_level[j] += ability\n\n    algorithm_level.sort(reverse=True)\n    min_cost = 0\n    for i in algorithm_level:\n        if i >= sum(algorithm_level[:algorithm_num-1]):\n            min_cost = i\n            break\n\n    return str(min_cost)",
        "num_ids": 181
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    k = int(stdin[2])\n    c = list(map(int, stdin[3:]))\n\n    result = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i >= j:\n                result += c[i - 1] * i * j\n\n    if result <= k:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nassert(solution(\"5 2 2\") == \"YES\")\nassert(solution(\"5 2 2 3\") == \"NO\")\nassert(solution(\"5 2 2 3 2\") == \"YES\")\nassert(solution(\"5 2 2 3 2 4\") == \"NO\")\nassert(solution(\"5 2 2 3 2 4 4\") == \"YES\")\nassert(solution(\"5 2 2 3 2 4 4 5\") == \"NO\")\nassert(solution(\"5 2 2 3 2 4 4 5 5 6\") == \"YES\")\n\nprint(solution(input()))\n",
        "num_ids": 268
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum amount of money needed to achieve the objective.\n    \"\"\"\n    N, M = [int(x) for x in stdin.split(' ')]\n\n    books = {}\n    for i in range(N):\n        C, A = [int(x) for x in stdin.split(' ')]\n        books[i+1] = (C, A)\n\n    # calculate the maximum achievable\n    max_achievable = sum(max(books[i][1], 0) for i in books)\n    if max_achievable <= M:\n        return str(0)\n\n    # initialize the table\n    table = [[max_achievable] * (M + 1) for _ in range(N + 1)]\n    table[0][0] = 0\n\n    for i in books:\n        C, A = books[i]\n        for j in range(0, M + 1):\n            if j - A >= 0:\n                table[i][j] = min(table[i-1][j-A] + C, table[i-1][j])\n            else:\n                table[i][j] = table[i-1][j]\n\n    return str(table[N][M])\n",
        "num_ids": 286
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N, M = [int(x) for x in stdin.split(\" \")]\n    A = [int(x) for x in stdin.split(\" \")]\n\n    X = A[0]\n    for i in range(1, M):\n        X = max(X, A[i])\n    return str(X)\n\nTakahashi, who is a novice in competitive programming, wants to learn M algorithms.\nInitially, his understanding level of each of the M algorithms is 0.\nTakahashi is visiting a bookstore, where he finds N books on algorithms.\nThe i-th book (1\\leq i\\leq N) is sold for C_i yen (the currency of Japan). If he buys and reads it, his understanding level of the j-th algorithm will increase by A_{i,j} for each j (1\\leq j\\leq M).\nThere is no other way to increase the understanding levels of the algorithms.\nTakahashi's objective is to make his understanding levels of all the M algorithms X or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.\n\n\ndef",
        "num_ids": 275
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A: int = int(stdin)\n    books: int = int(stdin)\n    A_: int = int(stdin)\n    M: int = int(stdin)\n    B_: int = int(stdin)\n    return str(solution_helper(A, books, A_, M, B_))\n\ndef",
        "num_ids": 83
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    C = [int(c) for c in stdin[1].split(' ')]\n    X = int(stdin[2])\n    # print(N, C, X)\n\n    # M = len(C)\n    M = max(C)\n    R = [[0] * (M + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j == 0:\n                R[i][j] = 0\n            elif j < C[i - 1]:\n                R[i][j] = R[i - 1][j]\n            else:\n                R[i][j] = min(R[i - 1][j - C[i - 1]] + C[i - 1], R[i - 1][j])\n    # print(R)\n    if R[N][X] == float('inf'):\n        return 'Impossible'\n    return '{:.2f}'.format(R[N][X])\n\nT = int(input())\nfor _ in range(T):\n    print(solution(input()))",
        "num_ids": 294
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = [int(x) for x in stdin.split(\" \")]\n    A = []\n    for _ in range(N):\n        A.append([int(x) for x in stdin.split(\" \")])\n    X = [int(x) for x in stdin.split(\" \")]\n    R = [int(x) for x in stdin.split(\" \")]\n    for i in range(Q):\n        if X[i] < R[i]:\n            print(\"no\")\n            continue\n        print(\"yes\")\n        for j in range(M):\n            if A[j][j] < A[j][X[i]-1]:\n                A[j][X[i]-1] -= 1\n                A[j][j] += 1\n    return \"\"\n\nassert(solution(\"3 3 4\\n1 2 3\\n1 2 3\\n1 2 3\") == \"no\")\nassert(solution(\"3 3 4\\n1 2 3\\n1 2 3\\n1 2 3\") == \"yes\")\nassert(solution(\"4 4 1\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\") == \"no\")\nassert(solution(\"4 4 1\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"no\")\nassert(solution(\"5 5 1\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\") == \"yes\")\nassert(solution(\"5 5 1\\",
        "num_ids": 1853
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    D, G = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    return min_n_to_solve(p, c, D, G)\n\ndef",
        "num_ids": 76
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total_points, desired_points = [int(num) for num in stdin.split()]\n    problem_scores = sorted(\n        [\n            (100 * i)\n            for i in range(1, desired_points // 100 + 1)\n            if (desired_points // 100 * i) % 100 == 0\n        ],\n        reverse=True,\n    )\n\n    if total_points < desired_points:\n        return str(len(problem_scores))\n\n    elif total_points == desired_points:\n        return str(1)\n\n    else:\n        return str(len(problem_scores) + (desired_points // 100))\n",
        "num_ids": 157
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(i) for i in stdin.split()]\n    # D: number of problems\n    # G: goal total score\n    # p_i: problems with a score of 100i points\n    # c_i: points for perfect bonus\n    # G = 100 * D\n    base_score = sum(map(int, stdin.split()))\n    # perfect_bonus = D * 100 * c_i\n    # T: base_score + perfect_bonus\n    return '{}'.format(D * 100 - sum([100 * i for i in range(1, D + 1)]) - base_score)",
        "num_ids": 151
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef",
        "num_ids": 7
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    points = [0] * D\n    perfect = [0] * D\n    for i in range(1, D + 1):\n        points[i - 1], perfect[i - 1] = [int(x) for x in stdin.split()]\n    points += [0] * D\n    perfect += [0] * D\n    m = 0\n    for i in range(D - 1, -1, -1):\n        s = sum(perfect[:i + 1]) + points[i] * i\n        if s >= G:\n            m = i + 1\n            break\n    return str(m)",
        "num_ids": 164
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    total = 0\n    for i in p:\n        total += i * 100\n    if total >= G:\n        return 0\n    return D - total // G\n\n\nprint(solution(\"\"))\n\"\"\"\n",
        "num_ids": 80
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read first line\n    D, G = map(int, stdin.split(' '))\n    # Read second line\n    A = map(int, stdin.split(' '))\n    # Read remaining lines\n    P = []\n    for line in stdin:\n        P.append(map(int, line.split(' ')))\n    # Process data\n    N = len(P)\n    # Calculate\n    best = min(N - i for i in range(D, 0, -1) if G >= sum(P[i - 1]) + sum(P[D - 1]) * i)\n    # Output\n    return str(best)",
        "num_ids": 152
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p, c = map(int, stdin.split()[1:])\n    p_range = [100 * i for i in range(1, D + 1)]\n    c_range = [10 ** 6 for i in range(D)]\n    c_range[0] = 1\n    total_range = [i + j for i, j in zip(p_range, c_range)]\n    perfect_bonus = [i * c for i in range(1, D + 1)]\n    perfect_bonus_range = [i + j for i, j in zip(perfect_bonus, c_range)]\n    result = 0\n    for i in total_range:\n        if i >= G:\n            result += 1\n    for i in perfect_bonus_range:\n        if i >= G:\n            result += 1\n    return str(result)",
        "num_ids": 215
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    data = [int(x) for x in stdin.split()]\n    p, c = data[:D], data[D:]\n    d = {p[i] : i for i in range(D)}\n    l = len(c)\n    max_score = max(c)\n    s = sum(c)\n    if G >= max_score:\n        return D\n    if G == s:\n        return l\n    while s < G:\n        max_score = max(c)\n        i = d[max_score]\n        s += max_score * p[i]\n        del c[i]\n        del p[i]\n        del d[max_score]\n    return D - len(p)\n\nprint(solution(input()))\n",
        "num_ids": 203
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.strip().split(\" \")]\n    A = [int(s) for s in stdin.strip().split(\" \")]\n    A.sort()\n    max_b = sum(A[i] for i in range(n))\n    count = 0\n    while max_b >= m:\n        max_b -= A[count]\n        count += 1\n    return str(count)",
        "num_ids": 105
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution('''7\n5 5 4 5 5 5 6''') == '2')\nassert(solution('''8\n4 8 8 7 8 4 4 5''') == '2')\nassert(solution('''9\n2 3 4 2 2 3 2 2 4''') == '3')\n",
        "num_ids": 78
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n    weights.sort()\n    ans = 0\n    for i in range(1, len(weights)):\n        if weights[i-1] + weights[i] == 2 * weights[i]:\n            ans += 1\n    return str(ans)\n",
        "num_ids": 92
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    if n <= 1:\n        return \"0\"\n    even = a[:]\n    odd = a[:]\n    even[0] = even[0] - 1\n    odd[-1] = odd[-1] - 1\n    for i in range(1, n):\n        if i % 2 == 0:\n            even[i] = even[i] - even[i-1]\n        else:\n            odd[i] = odd[i] - odd[i-1]\n    return str(sum(even) - sum(odd))\n",
        "num_ids": 157
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    candies = [int(x) for x in stdin.split()]\n    candies = candies[1:] + candies[:1]\n    good_candies = [1, 2]\n    for i in range(1, len(candies)):\n        if candies[i] == candies[i - 1] + 1:\n            good_candies.append(i + 1)\n    good_candies = [x for x in good_candies if x!= len(candies)]\n    return str(len(good_candies))\n",
        "num_ids": 133
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    m = a[0]\n    a = a[1:]\n    count = 0\n    for i in range(n-1):\n        if m % 2 == 0:\n            m += a[i]\n            count += 1\n        else:\n            m += a[i]\n            count += 1\n            a = a[i+1:]\n    print(count)",
        "num_ids": 120
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = sorted(map(int, stdin.readline().split()))\n    m = n - 1\n    while m > 0:\n        if weights[m] == weights[m - 1]:\n            m -= 1\n        else:\n            break\n    return str(m + 1)",
        "num_ids": 80
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n    good_candies = 0\n    for i in range(n):\n        good_candies += (i + 1) * weights[i]\n    for i in range(1, n - 1):\n        if i * weights[i] == good_candies:\n            good_candies -= i * weights[i]\n            good_candies += i * weights[i + 1]\n            good_candies -= i * weights[i - 1]\n            good_candies += i * weights[i - 1]\n            break\n    print(good_candies)\n",
        "num_ids": 166
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    res = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum < k:\n            res = -1\n            break\n        if i < n - 1:\n            if curr_sum > k:\n                curr_sum -= a[i]\n                curr_sum += a[i + 1]\n            elif curr_sum == k:\n                res += curr_sum\n                curr_sum += a[i + 1]\n    return str(res)\n\n\ndef",
        "num_ids": 177
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num, min_len, n = [int(x) for x in stdin.strip().split(' ')]\n    beauties = [int(x) for x in stdin.strip().split(' ')]\n    k = len(beauties)\n    if k < min_len:\n        return '-1'\n    beauties.sort(reverse=True)\n    if sum(beauties) < num:\n        return '-1'\n    results = []\n    for i in range(min_len, k + 1):\n        results.append(beauties[0:i])\n        for j in range(1, i):\n            results.append(results[-1][j - 1:])\n            results[-1][j - 1] += max(results[-1][j - 2], beauties[i - 1])\n            if results[-1][j - 1] > beauties[i - 1]:\n                results[-1][j - 1] = beauties[i - 1]\n    return str(max(results[0]))\n",
        "num_ids": 245
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(n) for n in stdin.split())\n    a = tuple(int(a) for a in stdin.split())\n    return str(-1 if n < k else max(\n        a[i:i + k] + a[:i][-k:]\n        for i in range(n - k + 1)\n    ))",
        "num_ids": 87
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if n < k:\n        return -1\n\n    def add(a: int, b: int, k: int, l: int) -> int:\n        if k == 0:\n            return b\n        if a > b:\n            a, b = b, a\n        if k == l:\n            return max(b, b + (a - b) % a)\n        if l > k:\n            return b\n        return b + (a - b) % a\n\n    def make(a: int, b: int, k: int, l: int) -> int:\n        if k == 0:\n            return 0\n        if a > b:\n            a, b = b, a\n        if k == l:\n            return a\n        return a + (b - a) % a\n\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, make(a[i], a[i + k - 1], k, i + k))\n    return str(res)\n\n\ndef",
        "num_ids": 286
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    n, k, x = map(int, data[0].split())\n    a = list(map(int, data[1].split()))\n    maximum = max(a)\n    if k > len(a):\n        return -1\n    if maximum < x:\n        return -1\n    print(solution_2(n, k, x, a))\n\n\ndef",
        "num_ids": 99
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    pos = n - k + 1\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = a[i - 1]\n        for j in range(k - 1, 0, -1):\n            if i + j - 1 < n + 1:\n                dp[i + j - 1] = max(dp[i + j - 1], dp[i - 1] + a[i - 1])\n    return str(max(0, dp[pos - 1])) if pos <= x else -1\n\n\nassert solution('5 2 3') == '18'\nassert solution('6 1 5') == '-1'\nassert solution('4 3 1') == '100'\nassert solution('10 30 30 70 10 10') == '70'\n",
        "num_ids": 225
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    s = 0\n    for i in range(n - k + 1):\n        if sum(a[i:i + k]) >= x:\n            s += sum(a[i:i + k])\n    return str(s)",
        "num_ids": 95
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    if n == 1:\n        return 0\n\n    if n < k:\n        return -1\n\n    curr = k\n    # we are reposting x pictures\n    cnt = 0\n    # the sum of the beauty values of the last k pictures\n    s = 0\n\n    for i in range(n):\n        # if we can repost a picture to satisfy our conditions\n        if curr >= a[i]:\n            curr += a[i]\n            cnt += 1\n            s = max(s, curr)\n\n        # if we cannot repost a picture\n        elif cnt == x:\n            return -1\n\n        # if we can repost any picture\n        else:\n            # we don't repost any pictures\n            cnt = 0\n            curr = k\n\n    return s",
        "num_ids": 227
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if len(a) < k:\n        return '-1'\n    b = sorted(a, reverse=True)\n    ans = 0\n    for i in range(n - k + 1):\n        ans = max(ans, sum(b[i:i + k]))\n    return str(ans)\n",
        "num_ids": 114
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_consecutive_pictures = int(stdin.readline().strip())\n    length_of_one_segment = int(stdin.readline().strip())\n    list_of_beauties = [int(x) for x in stdin.readline().strip().split(\" \")]\n    number_of_pictures_that_can_be_reposted = int(stdin.readline().strip())\n    list_of_pictures_that_can_be_reposted = [int(x) for x in stdin.readline().strip().split(\" \")]\n    return sum(list_of_pictures_that_can_be_reposted)\n\nassert(solution('''\n5 2 3\n5 1 3 10 1\n''') == '18')\nassert(solution('''\n4 3 1\n1 100 1 1\n''') == '100')\nassert(solution('''\n7 1 2\n1 1 1 1 1 1 1\n''') == '6')\n\nprint(solution('''\n7 1 2\n1 1 1 1 1 1 1\n'''))",
        "num_ids": 262
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N == 0:\n        return \"No\"\n    \n    if N > 0:\n        return \"Yes\"\n    \n    if N < 0:\n        return \"No\"\n\nprint(solution(input()))\n",
        "num_ids": 65
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 3 * 2 + 1 * 3:\n        return 'No'\n    if n % 3 == 0:\n        return 'Yes'\n    if n % 3 == 1:\n        return 'Yes' if n / 3 >= 2 else 'No'\n    return 'Yes' if n / 3 >= 1 else 'No'\n\n\nassert(solution(1)) == 'Yes'\nassert(solution(2)) == 'No'\nassert(solution(3)) == 'Yes'\nassert(solution(4)) == 'Yes'\nassert(solution(5)) == 'Yes'\nassert(solution(6)) == 'Yes'\nassert(solution(7)) == 'No'\nassert(solution(8)) == 'Yes'\nassert(solution(9)) == 'Yes'\nassert(solution(10)) == 'No'\nassert(solution(11)) == 'Yes'\nassert(solution(12)) == 'No'\nassert(solution(13)) == 'Yes'\nassert(solution(14)) == 'No'\nassert(solution(15)) == 'Yes'\nassert(solution(16)) == 'No'\nassert(solution(17)) == 'Yes'\nassert(solution(18)) == 'Yes'\nassert(solution(19)) == 'No'\nassert(solution(20)) == 'No'\nassert(solution(21)) == 'Yes'\nassert(solution(22)) == 'Yes'\nassert(solution(23)) == 'Yes'\nassert(solution(24)) == 'No'\nassert(solution(25)) == 'No'\nassert(solution(26)) == 'Yes'\nassert(solution(27)) == 'Yes'\nassert(solution(28)) == 'No'\nassert(solution(29)) == 'Yes'\nassert(solution(30)) == 'Yes'\nassert(solution(31)) == 'No'\nassert(solution(32)) == 'Yes'\nassert(solution(33)) == 'No'\nassert(solution(34)) == 'Yes'\nassert(solution(35)) == 'No'\nassert(solution(36)) == 'Yes'\nassert(solution(37)) == 'No'\nassert(solution(38)) == 'Yes'\nassert(solution(39)) == 'No'\nassert(solution(40)) == 'Yes'\nassert(solution(41)) == 'No'\nassert(solution(42)) == 'Yes'\nassert(solution(43)) == 'No'\nassert(solution(44)) == 'Yes'\nassert(solution(45)) == 'No'\nassert(solution(46)) == 'Yes'\nassert(solution(47)) == 'No'\nassert(solution(48)) == 'Yes'\nassert(solution(49)) == 'No'\nassert(solution(50)) == 'Yes'\nassert(solution(51)) == 'No'\nassert(solution(52)) == 'Yes'\nassert(solution(53)) == 'No'\nassert(solution(54)) == 'Yes'\nassert(solution(55)) == 'No'\nassert(solution(56)) == 'Yes'\nassert(solution(57)) == 'No'\nassert(solution(58)) == 'Yes'\nassert(solution(59)) == 'No'\nassert(solution(60)) == 'Yes'\nassert(solution(61)) == 'No'\nassert(solution(62)) == 'Yes'\nassert(solution(63)) == 'No'\nassert(solution(64)) == 'Yes'\nassert(solution(65)) == 'No'\nassert(solution(66)) == 'Yes'\nassert(solution(67)) == 'No'\nassert(solution(68)) == 'Yes'\nassert(solution(69)) == 'No'\nassert(solution(70)) == 'Yes'\nassert(solution(71)) == 'No'\nassert(solution(72)) == 'Yes'\nassert(solution(73)) == 'No'\nassert(solution(74)) == 'Yes'\nassert(solution(75)) == 'No'\nassert(solution(76)) == 'Yes'\nassert(solution(77)) == 'No'\nassert(solution(78)) == 'Yes'\nassert(solution(79)) == 'No'\nassert(solution(80)) == 'Yes'\nassert(solution(81)) == 'No'\nassert(solution(82)) == 'Yes'\nassert(solution(83)) == 'No'\nassert(solution(84)) == 'Yes'\nassert(solution(85)) == 'No'\nassert(solution(86)) == 'Yes'\nassert(solution(87)) == 'No'\nassert(solution(88)) == 'Yes'\nassert(solution(89)) == 'No'\nassert(solution(90)) == 'Yes'\nassert(solution(91)) == 'No'\nassert(solution(92)) == 'Yes'\nassert(solution(93)) == 'No'\nassert(solution(94)) == 'Yes'\nassert(solution(95)) == 'No'\nassert(solution(96)) == 'Yes'\nassert(solution(97)) == 'No'\nassert(solution(98)) == 'Yes'\nassert(solution(99)) == 'No'\nassert(solution(100)) == 'Yes'\n",
        "num_ids": 1286
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if find_doughnuts(int(stdin)) == int(stdin) else \"No\"\n\n\ndef",
        "num_ids": 31
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 5)!= 0:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "num_ids": 36
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 4:\n        return \"No\"\n    if N % 4!= 0:\n        return \"No\"\n    return \"Yes\"",
        "num_ids": 44
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0 or N > 100:\n        return 'Not enough'\n    \n    canBuyDoughnuts = canBuyCakes = N // 4\n    doughnutCost = cakeCost = 1\n    \n    while canBuyCakes > 0:\n        canBuyCakes -= cakeCost\n        canBuyDoughnuts -= doughnutCost\n        if canBuyCakes >= 0:\n            if canBuyDoughnuts >= 0:\n                return 'Yes'\n            else:\n                break\n        else:\n            if canBuyDoughnuts >= 0:\n                canBuyDoughnuts += doughnutCost\n            else:\n                break\n        doughnutCost += 1\n        cakeCost += 1\n    \n    return 'No'",
        "num_ids": 177
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    if N % 2 == 0:\n        return \"No\"\n    if N >= 5:\n        return \"Yes\"\n    if N == 1:\n        return \"No\"\n    if N == 2:\n        return \"Yes\"\n    if N == 3:\n        return \"Yes\"\n    if N == 4:\n        return \"Yes\"\n    return \"Yes\"\n",
        "num_ids": 101
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 4:\n        return 'No'\n    if N % 4 == 0:\n        return 'Yes'\n    return 'No'",
        "num_ids": 43
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    if n%7 == 0:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "num_ids": 40
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n % 4!= 0:\n        return \"No\"\n    return \"Yes\"\n\nassert(solution(input()) == \"Yes\")\n\"\"\"\n\ndef",
        "num_ids": 51
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(lambda x:''.join(map(str, x)), stdin.strip().split('\\n')[1:]))",
        "num_ids": 37
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    Xs, Ys, Hs = [], [], []\n    for _ in range(N):\n        x, y, h = list(map(int, stdin.readline().strip().split()))\n        Xs.append(x)\n        Ys.append(y)\n        Hs.append(h)\n\n    if N == 1:\n        C_X = Xs[0]\n        C_Y = Ys[0]\n        H = Hs[0]\n    else:\n        Xs_sorted = sorted(Xs)\n        Ys_sorted = sorted(Ys)\n        Hs_sorted = sorted(Hs)\n        i = 0\n        while i < N - 1:\n            if Xs_sorted[i]!= Xs_sorted[i + 1]:\n                break\n            i += 1\n        C_X = Xs_sorted[i]\n        i = 0\n        while i < N - 1:\n            if Ys_sorted[i]!= Ys_sorted[i + 1]:\n                break\n            i += 1\n        C_Y = Ys_sorted[i]\n        i = 0\n        while i < N - 1:\n            if Hs_sorted[i]!= Hs_sorted[i + 1]:\n                break\n            i += 1\n        H = Hs_sorted[i]\n    print(f\"{C_X} {C_Y} {H}\")",
        "num_ids": 362
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    point_list = []\n    for _ in range(N):\n        x, y, h = map(int, stdin.readline().split())\n        point_list.append((x, y, h))\n    point_list.sort(key=lambda x: -x[2])\n    x_min = point_list[0][0]\n    x_max = point_list[-1][0]\n    y_min = point_list[0][1]\n    y_max = point_list[-1][1]\n    h_max = point_list[0][2]\n    h_min = point_list[-1][2]\n    mid_x = (x_max + x_min) / 2\n    mid_y = (y_max + y_min) / 2\n    return f'{mid_x} {mid_y} {h_max - h_min}'\n\nprint(solution(stdin))\n",
        "num_ids": 237
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    stdin = stdin[1:]\n    X = [int(x) for x in stdin[:N]]\n    Y = [int(x) for x in stdin[N:2*N]]\n    H = [int(x) for x in stdin[2*N:]]\n    ans = ''\n    ans += f'{X[0]} {Y[0]} {max(H[0] - abs(X[0] - X[1]) - abs(Y[0] - Y[1]), 0)}\\n'\n    ans += f'{X[N-1]} {Y[N-1]} {max(H[N-1] - abs(X[N-1] - X[N-2]) - abs(Y[N-1] - Y[N-2]), 0)}\\n'\n    return ans\n\nprint(solution(stdin))\n",
        "num_ids": 229
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Two different ways to solve this problem:\n    1. Use the given information to find the altitude of points and sort them.\n    2. Use the center coordinates to find the altitude of the points.\n    '''\n    # The following is the solution using the first method\n    N = int(stdin.readline())\n    centers = []\n    for _ in range(N):\n        x_y_h = list(map(int, stdin.readline().split()))\n        centers.append((x_y_h[0], x_y_h[1], x_y_h[2]))\n    centers.sort(key = lambda x: x[2])\n    # The following is the solution using the second method\n    H = 0\n    N = len(centers)\n    for i in range(N):\n        c_x, c_y, h = centers[i]\n        H = max(H, h - abs(c_x - c_y))\n    return f'{c_x} {c_y} {H}'",
        "num_ids": 252
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    coords = []\n    for line in stdin.splitlines():\n        c_x, c_y, h = map(int, line.split())\n        coords.append((c_x, c_y, h))\n    \n    center_x, center_y, _ = sorted(coords)[0]\n    for x, y, h in coords:\n        if x!= center_x or y!= center_y:\n            return '{} {} {}'.format(center_x, center_y, max(h - abs(x - center_x) - abs(y - center_y), 0))\n    raise ValueError('Center coordinates and height not uniquely identified')\n\ndef",
        "num_ids": 163
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    info = [line.split() for line in lines[1:]]\n\n    return''.join(str(t) for t in search_algorithm(N, info))\n\ndef",
        "num_ids": 62
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    points = []\n    for _ in range(N):\n        coord, h = stdin.readline().strip().split()\n        points.append(tuple(map(int, coord.split(','))))\n    c_x, c_y = max(points, key=lambda p: p[0] - p[1])\n    h = max(map(lambda p: p[2] - max(abs(p[0] - c_x), abs(p[1] - c_y)), points))\n    return f'{c_x},{c_y},{h}'\n\nimport sys\n",
        "num_ids": 157
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nassert solution('redcoder') == '1'\nassert solution('dna') == '5'\nassert solution('edoc') == '3'\nassert solution('tas') == '5'\nassert solution('grrr') == '5'\nassert solution('kaz') == '5'\nassert solution('koh') == '4'\nassert solution('ridd') == '7'\nassert solution('cbyrd') == '5'\nassert solution('pvrhpz') == '4'\nassert solution('wfhjd') == '2'\nassert solution('tdthftd') == '8'\nassert solution('hklfjd') == '2'\nassert solution('hlfjdf') == '6'\nassert solution('lfjdfh') == '7'\nassert solution('lfjdfd') == '3'\nassert solution('hlfjdfd') == '3'\nassert solution('lfjdfdf') == '5'\nassert solution('lfjdfdd') == '3'\nassert solution('lfjdfdff') == '2'\nassert solution('lfjdfddd') == '3'\nassert solution('lfjdfdddd') == '4'\nassert solution('lfjdfddddd') == '5'\nassert solution('lfjdfdddddd') == '6'\nassert solution('lfjdfddddddd') == '7'\nassert solution('lfjdfdddddddd') == '8'\n",
        "num_ids": 344
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]",
        "num_ids": 8
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n\"\"\"\n",
        "num_ids": 18
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for _ in range(int(stdin)):\n        stdin = stdin.replace(stdin[0], 'o')\n        stdin = stdin.replace(stdin[-1], 'o')\n        stdin = stdin.replace(stdin[len(stdin) // 2], 'o')\n        result += 1\n    return result\n\nprint(solution(input()))",
        "num_ids": 98
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    length = len(stdin)\n    n = int(stdin[0])\n    l = stdin[1:length]\n    # print(length, n, l)\n\n    i = 0\n    count = 0\n    while i < length:\n        if i + n < length:\n            if l[i:i+n] == l[i:i+n][::-1]:\n                i += n\n            else:\n                l = l[:i] + l[i+n:]\n                count += 1\n                if i + n < length:\n                    i = 0\n                else:\n                    break\n        else:\n            l = l[:i] + l[i+n:]\n            count += 1\n            i += n\n    return count\n",
        "num_ids": 188
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(2)",
        "num_ids": 14
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nassert(solution(\"coder\") == \"oder\")\nassert(solution(\"redcoder\") == \"redcoder\")\nassert(solution(\"aabb\") == \"baaa\")\nassert(solution(\"cab\") == \"baa\")\nassert(solution(\"aacb\") == \"cab\")\nassert(solution(\"a\") == \"a\")\nassert(solution(\"aac\") == \"aca\")\nassert(solution(\"aba\") == \"baa\")\nassert(solution(\"aba\") == \"baa\")\nassert(solution(\"aacb\") == \"cab\")\nassert(solution(\"abc\") == \"abc\")\n",
        "num_ids": 157
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 9:\n        return \"No\"\n    for i in range(2, n):\n        if n % i == 0:\n            return \"Yes\"\n    return \"No\"",
        "num_ids": 54
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.readline().strip())\n    if N <= 0:\n        return \"No\"\n    if N < 9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 57
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % 9 == 0 else 'No'",
        "num_ids": 20
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"Yes\"\n    for i in range(1, 10):\n        if n % i == 0 and n / i in range(1, 10):\n            return \"Yes\"\n    return \"No\"\n",
        "num_ids": 65
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return \"No\"\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n\n    return \"No\"",
        "num_ids": 69
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    for i in range(1, 10):\n        nums.append(n / i)\n    if set(nums) == set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n",
        "num_ids": 96
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 34
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def f(n: int) -> bool:\n        for i in range(1, 10):\n            for j in range(1, 10):\n                if n % i == 0 and n // i % j == 0:\n                    return True\n        return False\n    if f(N):\n        return \"Yes\"\n    return \"No\"",
        "num_ids": 87
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n % 9 == 0 or n % 3 == 0:\n        return \"Yes\"\n\n    if n < 9:\n        return \"No\"\n\n    for i in range(n - 1, 0, -1):\n        if i % 9 == 0 or i % 3 == 0:\n            return \"Yes\"\n\n    return \"No\"",
        "num_ids": 86
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    if len(N) > 1:\n        N = int(N)\n        if N <= 0:\n            return \"No\"\n        else:\n            for i in range(1, 10):\n                for j in range(1, 10):\n                    if N == i * j:\n                        return \"Yes\"\n            return \"No\"\n    else:\n        return \"No\"",
        "num_ids": 97
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lengths = list(map(int, stdin.split()))\n    lengths.sort()\n    \n    ans = 0\n    for i in range(1, len(lengths)):\n        j = i + 1\n        while j < len(lengths):\n            k = j + 1\n            while k < len(lengths):\n                if lengths[i] + lengths[j] > lengths[k]:\n                    ans += 1\n                k += 1\n            j += 1\n    return str(ans)",
        "num_ids": 128
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 4 9 7 5')\n    '5'\n    \"\"\"\n    n = int(stdin.split()[0])\n    sticks = [int(x) for x in stdin.split()[1:]]\n    possible_triangles = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[k] > sticks[j] and sticks[j] + sticks[k] > sticks[i]:\n                    possible_triangles += 1\n    return str(possible_triangles)",
        "num_ids": 172
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    sticks = [int(stick) for stick in stdin[2:].split(' ')]\n    sticks.sort()\n    result = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if sticks[i] + sticks[j] > sticks[k]:\n                    result += 1\n    return str(result)\n\n\ndef",
        "num_ids": 115
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n\n    ways = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            k = n - 1\n            while j < k:\n                if sticks[i] + sticks[j] > sticks[k]:\n                    k -= 1\n                elif sticks[i] + sticks[j] < sticks[k]:\n                    j += 1\n                else:\n                    ways += 1\n                    k -= 1\n    return str(ways)",
        "num_ids": 142
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    sticks = list(map(int, stdin.readline().split()))\n\n    if len(sticks) == 1:\n        return \"0\"\n\n    result = [0] * (N + 1)\n    result[1] = 1\n    for i in range(2, N + 1):\n        for j in range(1, i):\n            result[i] += result[j] * result[i - j]\n\n    return str(result[N])\n\nprint(solution(input()))\n\"\"\"\n\ndef",
        "num_ids": 134
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_sticks = int(stdin)\n    sticks = list(map(int, stdin.split(\" \")))\n    sticks = sorted(sticks)\n\n    total = 0\n    for i in range(num_sticks-2):\n        for j in range(i+1, num_sticks-1):\n            for k in range(j+1, num_sticks):\n                if sticks[i] + sticks[j] > sticks[k]:\n                    total += 1\n    return str(total)",
        "num_ids": 115
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Assume there are N sticks\n    N = int(stdin[0])\n    sticks = list(map(int, stdin[1].split()))\n    sticks.sort()\n    triangles = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if sticks[i]!= sticks[j] and sticks[j]!= sticks[k] and sticks[i]!= sticks[k]:\n                    triangles += 1\n    return str(triangles)",
        "num_ids": 134
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n    stick_count = collections.Counter(sticks)\n    sticks_sum = sum(sticks)\n    total_ways = 0\n    for L in sticks:\n        second_L = sticks_sum - L\n        if L == second_L:\n            continue\n        third_L = sticks_sum - 2 * L\n        if L == third_L:\n            continue\n        if stick_count[L] > 1:\n            total_ways += stick_count[L] * (stick_count[L] - 1) * (stick_count[L] - 2) / 6\n    return str(total_ways)\n\nprint(solution(input()))\n",
        "num_ids": 183
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    print(len(set(l)))\n    return \"\"",
        "num_ids": 47
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n    print(sticks)\n    return str(count_triangles(sticks, n))\n\ndef",
        "num_ids": 54
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 9 or b < 1 or b > 9:\n        return -1\n\n    table = [\n        [1, 2, 3, 4, 5],\n        [2, 4, 6, 8, 10],\n        [3, 6, 9, 12, 15],\n        [4, 8, 12, 16, 20],\n        [5, 10, 15, 20, 25],\n    ]\n\n    return table[a-1][b-1]",
        "num_ids": 125
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b = map(int, stdin)\n\n    return str(a * b) if a * b >= 10 else \"-\"",
        "num_ids": 41
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return '-1' if A % B!= 0 else str(A // B)",
        "num_ids": 36
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a > 9 or b > 9:\n        return -1\n    return str(a * b)",
        "num_ids": 45
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return '-1' if a * b < 10 else str(a * b)",
        "num_ids": 40
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A * B > 9:\n        return '-1'\n    else:\n        return str(A * B)\n\n\ndef",
        "num_ids": 52
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi can calculate A \\times B.\n    \"\"\"\n    A, B = map(int, stdin.split())\n    if A > 9 or B > 9:\n        return '-1'\n\n    mult = A * B\n    return str(mult)",
        "num_ids": 66
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == 1 or A == 9 or B == 1 or B == 9:\n        return '-1'\n    return str(A * B)",
        "num_ids": 52
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print('-1' if a*b < 10 else a*b)\n    return ''",
        "num_ids": 37
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return ('-1' if A % B!= 0 else str(A // B))",
        "num_ids": 39
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n    coordinates = list(map(int, stdin.strip().split(' ')))\n    coordinates.sort()\n    \n    dp = [0] * n\n    dp[0] = coordinates[1] - coordinates[0]\n    dp[1] = coordinates[2] - coordinates[0]\n    dp[2] = coordinates[3] - coordinates[0]\n    for i in range(3, n):\n        dp[i] = max(dp[i - 1], max(dp[i - 2], dp[i - 3])) + coordinates[i] - coordinates[i - 1]\n    \n    return str(max(dp))\n\nprint(solution(input()))\n",
        "num_ids": 181
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    pieces = [int(x) for x in stdin.split(\" \")]\n    visited = {x: False for x in range(1, N + 1)}\n    for i in range(0, M):\n        visited[pieces[i]] = True\n    queue = []\n    queue.append(pieces[0])\n    visited[pieces[0]] = True\n    count = 1\n    while len(queue) > 0:\n        current = queue.pop(0)\n        if current + 1 <= N:\n            if visited[current + 1] is False:\n                visited[current + 1] = True\n                queue.append(current + 1)\n                count += 1\n        if current - 1 >= 1:\n            if visited[current - 1] is False:\n                visited[current - 1] = True\n                queue.append(current - 1)\n                count += 1\n    return str(count)",
        "num_ids": 234
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    x = [int(x) for x in stdin.strip().split()]\n\n    ans = 0\n\n    for i in range(1, n):\n        ans += abs(x[i] - x[i - 1])\n\n    return ans",
        "num_ids": 74
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    X = [int(x) for x in stdin.split()]\n    # we need to check if the coordinate is valid\n    for i in range(M):\n        if X[i] < 1 or X[i] > N:\n            return 'Invalid'\n    \n    # from here, we can calculate the minimum number of moves\n    # find the max value and its index\n    max = X[0]\n    maxIndex = 0\n    for i in range(M):\n        if X[i] > max:\n            max = X[i]\n            maxIndex = i\n    \n    # check if we can move the max to any place\n    for i in range(M):\n        if X[i] == max:\n            for j in range(M):\n                if i == j:\n                    continue\n                else:\n                    # we can move the max to any place\n                    if X[j] == max - 1 or X[j] == max + 1:\n                        X[j] = max\n                        break\n    \n    # calculate the minimum number of moves\n    moves = 0\n    for i in range(M):\n        if i == maxIndex:\n            continue\n        else:\n            moves += 1\n            X[i], X[maxIndex] = X[maxIndex], X[i]\n    return str(moves)",
        "num_ids": 331
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    values = [int(s) for s in stdin.split(\" \")]\n    n, m = values[0], values[1]\n    x = list(sorted(map(int, stdin.split(\" \"))))\n    moves = 0\n    for i in range(len(x)-1):\n        if (x[i] == x[i+1]):\n            continue\n        else:\n            moves += 1\n            if x[i] + 1 == x[i+1]:\n                x[i+1] = x[i] + 1\n            elif x[i] - 1 == x[i+1]:\n                x[i+1] = x[i] - 1\n    return moves\n\nprint(solution(stdin.read()))",
        "num_ids": 181
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pieces = map(int, stdin.split())\n\n    board = [0] * (n + 1)\n    for piece in pieces:\n        board[piece] = 1\n\n    count = 0\n    for i in range(1, n):\n        if board[i] and board[i - 1]:\n            count += 1\n            board[i - 1] = 0\n            board[i] = 0\n\n    return count\n",
        "num_ids": 114
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1].add(b - 1)\n        graph[b - 1].add(a - 1)\n    import sys\n    sys.setrecursionlimit(30000)\n    ans = []\n    visited = [False] * n\n    for i in range(k):\n        ans.append(0)\n        _find_ans(graph, visited, 0, ans)\n    return \"\".join(map(str, ans))\n\n\ndef",
        "num_ids": 162
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    edges = [None] * m\n    for i in range(m):\n        a, b = [int(s) for s in stdin.split()]\n        edges[i] = (a, b)\n    roads = [[False] * n for _ in range(n)]\n    roads[0][1] = True\n    for (a, b) in edges:\n        roads[a - 1][b - 1] = True\n    for a in range(n):\n        roads[a][a] = True\n    for a in range(n - 1):\n        roads[a][a + 1] = True\n    roads[0][0] = True\n    roads[n - 1][n - 1] = True\n    roads[0][n - 1] = True\n    roads[n - 1][0] = True\n    for _ in range(k):\n        option = [False] * n\n        for i in range(n):\n            if roads[i][i]:\n                option[i] = True\n        for a in range(n):\n            for b in range(n):\n                if roads[a][b]:\n                    if option[b]:\n                        option[a] = True\n                        break\n        print(''.join('1' if option[i] else '0' for i in range(n)))\n    return \"\"\n\n\ndef",
        "num_ids": 336
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n\n    roads = [list(map(int, x.split())) for _ in range(m)]\n\n    distances = [[0] * n for _ in range(n)]\n\n    for (a, b) in roads:\n        distances[a - 1][b - 1] = 1\n        distances[b - 1][a - 1] = 1\n\n    # 1st solution\n    options = [(0, 1) for _ in range(k)]\n\n    def get_distance(city1: int, city2: int) -> int:\n        if city1 == city2:\n            return 0\n\n        for i, distance in enumerate(distances[city1 - 1]):\n            if distance:\n                return i\n\n        return -1\n\n    for _ in range(k):\n        # transform options into something like [(distance1, [2, 4]), (distance2, [1, 3]),...]\n        options_distances = [(get_distance(city1, city2), [city1, city2]) for city1, city2 in options]\n        options_distances.sort(key=lambda x: x[0])\n\n        for distance, cities in options_distances:\n            if len(cities) == 2:\n                cities.sort()\n\n                c1 = cities[0]\n                c2 = cities[1]\n\n                if get_distance(c1, c2) == -1:\n                    # 2 cities cannot reach each other, so we'll add it to the options\n                    options.append((distance, cities))\n                elif distance < distances[c1 - 1][c2 - 1]:\n                    # the current road is better than the previous one, so we'll remove it from options\n                    options.remove((distance, cities))\n                    distances[c1 - 1][c2 - 1] = distance\n                    distances[c2 - 1][c1 - 1] = distance\n                else:\n                    # the current road is equal to or worse than the previous one, we'll keep it\n                    pass\n\n    return str(len(options))\n",
        "num_ids": 490
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        a, b = [int(x) - 1 for x in stdin.split()]\n        roads.append((a, b))\n    roads.sort(key=lambda x: (x[0], x[1]))\n\n    options = []\n    for i in range(k):\n        valid = True\n        for j in range(m):\n            if roads[j][1]!= roads[0][0]:\n                valid = False\n        if valid:\n            options.append(i + 1)\n\n    return ''.join(str(o) for o in options)\n\nprint(solution(input()))\n",
        "num_ids": 181
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n@pytest.mark.parametrize(\n    ('input_s', 'expected'),\n    (\n        # ('4 4 3', '2'),\n        # ('4 6 3', '2'),\n        # ('5 6 2', '2'),\n        ('4 3', '1'),\n        ('3 2', '1'),\n        ('10', '1'),\n    ),\n)\ndef",
        "num_ids": 95
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.readline().split()]\n    roads = []\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.readline().split()]\n        roads.append((a, b))\n    \n    roads.sort(key=lambda x: x[0])\n\n    memo = {}\n    def dfs(prev, roads, memo):\n        if (prev, roads) in memo:\n            return memo[(prev, roads)]\n\n        if len(roads) == n - 1:\n            memo[(prev, roads)] = 1\n            return 1\n\n        res = 0\n        for i, (a, b) in enumerate(roads):\n            if b!= prev:\n                roads[i] = (b, a)\n                res += dfs(a, roads, memo)\n                roads[i] = (a, b)\n        \n        memo[(prev, roads)] = res\n        return res\n\n    res = 0\n    for i in range(1, k + 1):\n        res += dfs(i, roads, memo)\n    return str(res)\n\nimport sys\ninput = sys.stdin.readline\nt = int(input().strip())\n\nfor _ in range(t):\n    n, m, k = [int(x) for x in input().split()]\n    roads = []\n    for _ in range(m):\n        a, b = [int(x) for x in input().split()]\n        roads.append((a, b))\n    \n    roads.sort(key=lambda x: x[0])\n\n    memo = {}\n    def dfs(prev, roads, memo):\n        if (prev, roads) in memo:\n            return memo[(prev, roads)]\n\n        if len(roads) == n - 1:\n            memo[(prev, roads)] = 1\n            return 1\n\n        res = 0\n        for i, (a, b) in enumerate(roads):\n            if b!= prev:\n                roads[i] = (b, a)\n                res += dfs(a, roads, memo)\n                roads[i] = (a, b)\n        \n        memo[(prev, roads)] = res\n        return res\n\n    res = 0\n    for i in range(1, k + 1):\n        res += dfs(i, roads, memo)\n    print(res)\n",
        "num_ids": 580
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = [list(map(int, x.split())) for x in stdin.splitlines()]\n    roads = sorted(roads, key=lambda x: x[1])\n    answers = [0] * k\n    if m * k > 10 ** 6:\n        return \"IMPOSSIBLE\"\n    answers[0] = 1\n    if m == 1:\n        return \"\".join(str(a) for a in answers)\n    for i in range(1, k):\n        if m > 1:\n            answers[i] = 1\n            m -= 1\n        for j in range(m, 1, -1):\n            if j == m or roads[j - 1][1] - roads[j - 2][1] == 1:\n                answers[i] += answers[i - 1]\n            else:\n                break\n    return \"\".join(str(a) for a in answers)",
        "num_ids": 241
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n\n    if m * k > (1 << 31) - 1:\n        raise Exception(\"Solution too long\")\n\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, stdin.split())))\n\n    options = {0: 1}\n    for _ in range(k):\n        options[1 << _] = 0\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            if roads[i][j]!= roads[j][i]:\n                options[1 << i | 1 << j] = 0\n\n    for i in range(m):\n        options[1 << i] = i + 1\n\n    # print(options)\n    return solve(roads, m, options, n)\n\n\ndef",
        "num_ids": 203
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    n, m, c = list(map(int, stdin.readline().strip().split()))\n    d = [[-1 for _ in range(m)] for _ in range(k)]\n    for _ in range(m):\n        a, b = map(int, stdin.readline().strip().split())\n        d[0][_] = a\n        d[1][_] = b\n    res = [m for _ in range(k)]\n    for i in range(k - 1):\n        for j in range(m):\n            if d[i][j]!= -1 and d[i + 1][j]!= -1:\n                d[i + 1][j] = min(d[i][j], d[i + 1][j])\n            if d[i][j]!= -1 and d[i][j] + 1 == d[i + 1][j]:\n                res[i + 1] -= 1\n            if d[i][j]!= -1 and d[i + 1][j] == -1 and d[i][j] + 1 < d[i + 1][j]:\n                res[i + 1] -= 1\n    return res\n",
        "num_ids": 295
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if n <= 1:\n        return 'YES'\n    \n    height = a[-1]\n    if height == a[-2] and height == a[-3]:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(stdin))\n",
        "num_ids": 110
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Test-----\n\n`pytest -v` the tests for this script (you can import the tests if you want).\n\n\"\"\"\n\n\ndef",
        "num_ids": 37
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = [int(x) for x in stdin.readline().split()]\n    return \"YES\" if can_complete(n, heights) else \"NO\"\n\ndef",
        "num_ids": 56
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = stdin.readline().strip()\n\n    r = []\n    for i in range(len(a)):\n        r.append(int(a[i]))\n\n    def func(a: List[int]) -> str:\n        res = 0\n        for i in range(len(a) - 1):\n            if a[i]!= a[i + 1]:\n                res += 1\n        return 'YES' if res == 0 else 'NO'\n\n    return func(r)\n\n-----",
        "num_ids": 131
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 1 2 5\n   ... 2 1 1 2 5''')\n    'YES'\n    >>> solution('''3\n   ... 4 5 3\n   ... 4 5 3''')\n    'YES'\n    >>> solution('''2\n   ... 10 10\n   ... 10 10''')\n    'YES'\n    >>> solution('''3\n   ... 1 2 3\n   ... 1 2 3''')\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    result = 'NO'\n    if n == 2 and a[0] == a[1]:\n        result = 'YES'\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            result = 'YES'\n    return result",
        "num_ids": 212
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\n    Return \"NO\" otherwise.\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if n == 1:\n        return \"YES\"\n\n    if n == 2:\n        return \"YES\" if sum(a) == 2 * 10**9 else \"NO\"\n\n    def possible(a: List[int], i: int) -> bool:\n        \"\"\"Return True if the wall with the given height can be completed.\"\"\"\n        if a[i] == a[i + 1]:\n            return True\n        return False\n\n    def calc_height(a: List[int]) -> int:\n        \"\"\"Return the height of the wall.\"\"\"\n        height = 0\n        for h in a:\n            height = max(height, h)\n        return height\n\n    h = calc_height(a)\n    if h * n == sum(a):\n        return \"YES\"\n\n    stack: List[int] = []\n    i = 0\n    while i < len(a):\n        stack.append(a[i])\n        while i < len(a) - 1 and possible(a, i):\n            stack.append(a[i + 1])\n            i += 1\n        if len(stack) > h * n:\n            return \"NO\"\n        i += 1\n    return \"YES\"",
        "num_ids": 343
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    return \"NO\" if h!= sorted(h) else \"YES\"",
        "num_ids": 49
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    monster_hp, n = [int(x) for x in stdin.split()]\n    monster_d: list = list(map(int, stdin.split()[1:]))\n    k = -1\n    hp = monster_hp\n    for i in range(n):\n        hp += monster_d[i]\n        if hp <= 0:\n            k = i + 1\n            break\n    return str(k)",
        "num_ids": 101
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(n, h):\n        for m in n:\n            h += m\n            if h <= 0:\n                return -1\n        return int(h)\n    stdin = stdin.splitlines()\n    n, h = map(int, stdin[0].split(' '))\n    n = list(map(int, stdin[1].split(' ')))\n    return calculate(n, h)\n\nassert(solution('1 1\\n-1 0') == -1)\nassert(solution('10 4\\n-3 -6 5 4') == 9)\nassert(solution('10 3\\n-3 -6 5 4') == -1)\nassert(solution('100000 100000\\n-1 0 0 0 0') == 4999999999996)\nassert(solution('1000 100000\\n-1 0 0 0 0') == -1)\nassert(solution('1 1\\n1 1') == 1)\nassert(solution('2 1\\n-1 -1') == -1)\nassert(solution('100 1\\n-1 -1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == 4999999999996)\nassert(solution('1000 1000000000\\n1 1 0 1') == -1)\nassert(solution('100000 100000\\n1 1 0 1') == -1)\nassert(solution('100000 100000\\n0 1 0 1') == -1)\nassert(solution('1000000000000 1\\n0 1 0 1') == -1)\nassert(solution('1000000 10000000\\n1 1 0 1') == -1)\nassert(solution('1000000 10000000\\n1 1 0 1') == -1)\nassert(solution('1000000 10000000\\n0 1 0 1') == -1)\nassert(solution('10000000 10000000\\n1 1 0 1') == -1)\nassert(solution('10000000 10000000\\n1 1 0 1') == -1)\nassert(solution('10000000 10000000\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == 4999999999996)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n0 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n0 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1') == -1)\nassert(solution('1000000000000 1\\n1 1 0 1')",
        "num_ids": 1563
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    k = 1\n    monster_hp = h\n    while monster_hp > 0 and k <= 2 * 10 ** 5:\n        monster_hp = monster_hp + d[0]\n        if monster_hp <= 0:\n            break\n        del d[0]\n        k += 1\n    return str(k - 1) if monster_hp > 0 else str(-1)\n\nassert(solution(\"100 4\\n-3 -6 5 4\") == \"-1\")\nassert(solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\")\nassert(solution(\"10 4\\n-3 -6 5 4\") == \"4999999999996\")\nassert(solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\")\n",
        "num_ids": 218
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the first time the monster dies.\n    \"\"\"\n    pass",
        "num_ids": 21
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hp, n = tuple(map(int, stdin.split()))\n    hp_change = list(map(int, stdin.split()))\n    hp_change_index = 0\n    hp_change_count = 0\n    if hp_change[0] < 0:\n        return -1\n    if n == 1:\n        return 0\n    while hp_change_count < n:\n        if hp_change_index < n:\n            if hp - hp_change[hp_change_index] < 0:\n                return -1\n            hp += hp_change[hp_change_index]\n            hp_change_count += 1\n        hp_change_index += 1\n    return hp_change_index - n",
        "num_ids": 169
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hp, n = tuple(map(int, stdin.split()))\n    d = tuple(map(int, stdin.split()))\n    i = 0\n    hp -= n\n    while hp > 0:\n        hp += d[i]\n        i += 1\n        hp -= n\n    return str(i)\n\n\ndef",
        "num_ids": 79
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_hp(hp: int) -> int:\n        hp = hp + numbers[0]\n        for i in range(1, n):\n            hp = hp + numbers[i] if hp + numbers[i] <= hp_limit else hp_limit\n        return hp\n\n    def is_alive(hp: int) -> bool:\n        return hp > 0\n\n    if not is_alive(numbers[0]):\n        return -1\n\n    hp_limit = 10 ** 12\n    n = int(stdin.readline().split()[1])\n    numbers = list(map(int, stdin.readline().split()))\n\n    hp = numbers[0]\n    counter = 1\n    while is_alive(hp):\n        hp = get_next_hp(hp)\n        counter += 1\n\n    return counter\n\nprint(solution(stdin))\n",
        "num_ids": 208
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = tuple(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    if H <= 0 or n <= 0 or len(d)!= n:\n        return -1\n    k = 0\n    for i in range(n):\n        if d[i] >= 0:\n            if H <= d[i]:\n                k = i + 1\n                break\n        else:\n            H += d[i]\n    return k\n\nassert(solution(stdin) == 9)\nprint(solution(stdin))\n\n'''\n\nd,h,n=map(int,input().split())\ne=0\na=[]\nfor i in range(n):\n    a.append(d)\n    e+=d\n    d+=1\nm=0\n",
        "num_ids": 197
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n):\n        s += stdin[i]\n    s = s.upper()\n    s = s.replace(\" \", \"\")\n    m = {}\n    max_val = 0\n    max_2gram = \"\"\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            if max_val < m.get(s[i], 0):\n                max_2gram = s[i]\n                max_val = m[s[i]]\n            m[s[i]] = m.get(s[i], 0) + 1\n    return max_2gram\n\nprint(solution(input()))\n",
        "num_ids": 183
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    d = {}\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i:j + 1] not in d:\n                d[s[i:j + 1]] = 1\n            else:\n                d[s[i:j + 1]] += 1\n    m = sorted(d.items(), key=lambda x: (-x[1], x[0]))[0][0]\n    return m\n\ndef",
        "num_ids": 139
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    for i in range(n - 1):\n        if s[i: i + 2] in s[i + 2:]:\n            return s[i: i + 2]\n    return \"\"\n\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\nassert(solution(input()) == \"AB\")\n",
        "num_ids": 1687
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = {}\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            g = s[i:j+1]\n            if g in count:\n                count[g] += 1\n            else:\n                count[g] = 1\n\n    ans = ''\n    max_count = -1\n    for g, c in count.items():\n        if c > max_count and g[0] == g[1]:\n            max_count = c\n            ans = g\n    return ans",
        "num_ids": 150
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    s = stdin[1]\n    possible_two_grams = []\n    for i in range(n-1):\n        possible_two_grams.append(s[i:i+2])\n    possible_two_grams = list(set(possible_two_grams))\n    possible_two_grams.sort(reverse=True, key=lambda x: possible_two_grams.count(x))\n    print(possible_two_grams[0])",
        "num_ids": 141
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0447\u0442\u043e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0443, \u0433\u0434\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u0432\u0430 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430.\n    # \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442:\n    #    for prev_char in stdin[:-1]:\n    #        for next_char in stdin[1:]:\n    #            if prev_char == next_char:\n    #                return prev_char + next_char\n\n    # \u0422\u0440\u0435\u0442\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442:\n    #     for i in range(1, len(stdin)):\n    #         if stdin[i-1] == stdin[i]:\n    #             return stdin[i-1] + stdin[i]\n\n    # \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442:\n    #     for i in range(0, len(stdin)-1):\n    #         if stdin[i] == stdin[i+1]:\n    #             return stdin[i] + stdin[i+1]\n\n    # \u041f\u044f\u0442\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442:\n    # \u0414\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u043d \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u043d\u0430 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445.\n    # \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043c\u044b \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f\n    # \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n    # \u0412 \u044d\u0442\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u043f\u0438\u0441\u043a\u0430.\n    return sorted(stdin)[0] + sorted(stdin)[1]\n",
        "num_ids": 763
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass",
        "num_ids": 10
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    a, b = len(s), len(t)\n    count = 0\n    while a > 0 and b > 0:\n        if s[-1] == t[-1]:\n            a -= 1\n            b -= 1\n        else:\n            if s[-1] < t[-1]:\n                a -= 1\n            else:\n                b -= 1\n            count += 1\n    return count",
        "num_ids": 113
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 0\n\n\nprint(solution(input()))\n",
        "num_ids": 26
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n            t = t[i+1:]\n            s = s[i+1:]\n            break\n    return count",
        "num_ids": 80
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s) == 0 or len(t) == 0:\n        return 0\n    n, m = len(s), len(t)\n    cost = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            cost += 1\n    for i in range(m):\n        if s[i] == t[i]:\n            cost += 1\n    return cost\n\nprint(solution(input()))\n",
        "num_ids": 126
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return len(s) + len(t)",
        "num_ids": 24
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\n-----Test-----\n",
        "num_ids": 10
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s, t = stdin.splitlines()\n    return str(len(s) + len(t) - max(len(s), len(t)))",
        "num_ids": 44
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "num_ids": 5
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[:2])\n    cities = list(map(int, stdin.split()[2:]))\n    cities.sort()\n    maximum = 0\n\n    for i in range(N - 1):\n        maximum = max(maximum, abs(cities[i] - cities[i + 1]))\n\n    return str(maximum)",
        "num_ids": 92
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = tuple(int(x) for x in stdin.strip().split())\n    cities = tuple(int(x) for x in stdin.strip().split())\n    max_distance = 0\n    for d in range(1, max(cities)):\n        if all(abs(x - x_i) + d >= abs(x - x_i) for x_i in cities):\n            max_distance = d\n    return str(max_distance)\n\n\ndef",
        "num_ids": 115
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(n) for n in stdin.split(\" \")]\n    x_list = [int(x) for x in stdin.split(\" \")]\n    return str(1)\n",
        "num_ids": 50
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = stdin.split(' ')\n    N, X = int(N), int(X)\n    cities = stdin.rstrip().split(' ')\n    cities = [int(city) for city in cities]\n    X -= 1\n    ans = 0\n    for city in cities:\n        if city < X:\n            ans += 2\n            X -= 2\n        elif city > X:\n            ans += 1\n            X += 1\n    return str(ans)",
        "num_ids": 116
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    city_numbers = stdin.strip()\n    city_numbers = list(map(int, city_numbers.split()))\n    city_numbers = city_numbers[1:]\n    city_numbers = city_numbers[:city_numbers[0]]\n    city_numbers = city_numbers[:city_numbers[0]]\n    print(city_numbers)",
        "num_ids": 96
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split(' ')]\n    cities = [int(x) for x in stdin.split(' ')]\n    cities.sort()\n    cities = cities[1:] + cities[:1]\n    d = 1\n    if cities[0] == x:\n        return '1'\n    for i in range(1, n):\n        if cities[i] == x:\n            return '1'\n        if cities[i] - cities[i - 1] > d:\n            d = cities[i] - cities[i - 1]\n    return str(d)\n\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin)) == '2'\nassert str(solution(stdin))",
        "num_ids": 1645
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    if len(x_list) < N:\n        print(-1)\n        return\n    # x_list = list(map(lambda x: x - X, x_list))\n    x_list = sorted(x_list)\n    start, end = 0, N - 1\n    max_d = 1\n    while start < end:\n        d = end - start\n        if x_list[start] + d > X:\n            start += 1\n            max_d = max(max_d, d)\n        elif x_list[start] + d == X:\n            max_d = max(max_d, d + 1)\n        else:\n            end -= 1\n    print(max_d)",
        "num_ids": 201
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(\" \"))\n    cities = list(map(int, stdin.split(\" \")))\n    visited = set()\n    max_d = 0\n    for i in range(1, n):\n        if cities[i] > cities[i - 1]:\n            max_d += 1\n        else:\n            visited.add(cities[i - 1])\n    return str(max_d)\n",
        "num_ids": 109
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = [x.strip() for x in stdin.split(' ')]\n    N, x = int(data[0]), [int(x) for x in data[1:]]\n    if len(x)!= N:\n        raise ValueError('Invalid Input')\n\n    D = 1\n    while D <= N:\n        D += 1\n        D = D * 2\n    return str(D - 1)\n\nassert(solution('3 3') == '2')\nassert(solution('1 7 11') == '2')\nassert(solution('2 3') == '1')\nassert(solution('3 2') == '1')\nassert(solution('3 1') == '0')\nassert(solution('5 3') == '3')\nassert(solution('4 3') == '1')\nassert(solution('1 2') == '0')\nassert(solution('1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1 1') == '0')\nassert(solution('1 1 1 1 1') == '0')\nassert(solution('2 1') == '1')\nassert(solution('2 2') == '0')\nassert(solution('2 1 1') == '1')\nassert(solution('2 1 2') == '0')\nassert(solution('2 1 1 2') == '1')\nassert(solution('2 1 1 2 2') == '0')\nassert(solution('2 1 1 2 1 2') == '1')\nassert(solution('2 1 1 2 1 2 1') == '0')\nassert(solution('3 1 1 1') == '2')\nassert(solution('3 2 2') == '0')\nassert(solution('3 1 1 1 1') == '2')\nassert(solution('3 2 2 2') == '0')\nassert(solution('3 1 1 1 1 1') == '2')\nassert(solution('3 2 2 2 2') == '0')\nassert(solution('3 1 1 1 1 1 1') == '2')\nassert(solution('3 2 2 2 2 2') == '0')\nassert(solution('3 1 1 1 1 1 1 1') == '2')\nassert(solution('3 2 2 2 2 2 2') == '0')\nassert(solution('3 1 1 1 1 1 1 1 1') == '2')\nassert(solution('3 2 2 2 2 2 2 2') == '0')\nassert(solution('3 1 1 1 1 1 1 1 1 1') == '2')\nassert(solution('3 2 2 2 2 2 2 2 2') == '0')\nassert(solution('3 1 1 1 1 1 1 1 1 1 1 1') == '2')\nassert(solution('3 2 2 2 2 2 2 2 2 2 2') == '0')\nassert(solution('4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '2')\nassert(solution('4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '0')\n",
        "num_ids": 726
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_palindrome(stdin) else 'No'\n\ndef",
        "num_ids": 23
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    # Write your code here\n    if (len(S) % 2 == 0) or (len(S) <= 2):\n        return \"No\"\n\n    firstHalf = S[:len(S) // 2]\n    secondHalf = S[len(S) // 2 + 1:]\n\n    if firstHalf == secondHalf[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 104
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_strong_palindrome(stdin.strip()) else \"No\"\n\ndef",
        "num_ids": 27
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return \"Yes\" if is_strong_palindrome(S) else \"No\"\n\ndef",
        "num_ids": 33
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_strong_palindrome(stdin) else \"No\"\n\n\ndef",
        "num_ids": 25
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == s[::-1]:\n        return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n",
        "num_ids": 43
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    print(int(a * b))",
        "num_ids": 31
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a * b))",
        "num_ids": 22
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return str(int(data[0]) * int(data[1]))",
        "num_ids": 28
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split(' '))\n    return str(int(a * b))",
        "num_ids": 28
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{:0>15}'.format(a * b)",
        "num_ids": 32
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split(\" \"))\n    print(int(a * b))\n",
        "num_ids": 28
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    print(int(a * b))",
        "num_ids": 25
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A, B = int(A), float(B)\n    print(int(A * B))",
        "num_ids": 35
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    x = int(a * b)\n    return str(x)\n\nprint(solution(input()))\n",
        "num_ids": 43
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(a * b))",
        "num_ids": 26
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(stdin))\n\n'''\n\n'''\nRSA Implementation\n\nThe given RSA public key consists of three numbers: $p$, $q$ and $e$. $p$ and $q$ are the two prime numbers. \n$p$ and $q$ are public and $e$ is an encryption key. \nThe encryption and decryption functions are defined as follows:\n\nGiven a message (a plaintext) as a string, $p$ and $q$ are chosen such that $pq$ is a suitable pair of prime numbers and $pq=n$ is chosen as $p$ and $q$.\nGiven an encryption key $e$ and the modulus $n$, the corresponding encryption function is $e\\gg$pq$ = $1$\\bmod$pq$\\bmod$n$.\nGiven a message, the corresponding decryption function is $1\\bmod$pq$\\bmod$n$.\n\nWe can therefore, say, encrypt the message by computing $e\\gg$pq$. Then to decrypt the message, we compute $1\\bmod$pq$\\bmod$n$ and we have to multiply both numbers by $q$ and then subtract $p$.\n\nWe use the CRT method to solve this problem. The first step is to choose two $p$ and $q$ such that $pq$ is a suitable pair of prime numbers.\n'''\n\ndef",
        "num_ids": 326
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(solution_helper(n))\n\n\ndef",
        "num_ids": 30
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    for _ in range(count):\n        n = int(stdin.readline())\n        print(solution_recur(n))\n\ndef",
        "num_ids": 48
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '4'\n    elif n == 4:\n        return '7'\n    elif n == 5:\n        return '13'\n    elif n == 6:\n        return '24'\n    elif n == 7:\n        return '49'\n    elif n == 8:\n        return '81'\n    elif n == 9:\n        return '175'\n    elif n == 10:\n        return '370'\n    elif n == 11:\n        return '721'\n    elif n == 12:\n        return '1764'\n    elif n == 13:\n        return '3745'\n    elif n == 14:\n        return '7256'\n    elif n == 15:\n        return '1765'\n    elif n == 16:\n        return '3751'\n    elif n == 17:\n        return '3773'\n    elif n == 18:\n        return '3774'\n    elif n == 19:\n        return '3775'\n    elif n == 20:\n        return '3776'\n    elif n == 21:\n        return '3777'\n    elif n == 22:\n        return '3778'\n    elif n == 23:\n        return '3779'\n    elif n == 24:\n        return '3780'\n    elif n == 25:\n        return '3781'\n    elif n == 26:\n        return '3782'\n    elif n == 27:\n        return '3783'\n    elif n == 28:\n        return '3784'\n    elif n == 29:\n        return '3785'\n    elif n == 30:\n        return '3786'\n    elif n == 31:\n        return '3787'\n    elif n == 32:\n        return '3788'\n    elif n == 33:\n        return '3789'\n    elif n == 34:\n        return '3790'\n    elif n == 35:\n        return '3791'\n    elif n == 36:\n        return '3792'\n    elif n == 37:\n        return '3793'\n    elif n == 38:\n        return '3794'\n    elif n == 39:\n        return '3795'\n    elif n == 40:\n        return '3796'\n    elif n == 41:\n        return '3797'\n    elif n == 42:\n        return '3798'\n    elif n == 43:\n        return '3799'\n    elif n == 44:\n        return '3800'\n    elif n == 45:\n        return '3801'\n    elif n == 46:\n        return '3802'\n    elif n == 47:\n        return '3803'\n    elif n == 48:\n        return '3804'\n    elif n == 49:\n        return '3805'\n    elif n == 50:\n        return '3806'\n    elif n == 51:\n        return '3807'\n    elif n == 52:\n        return '3808'\n    elif n == 53:\n        return '3809'\n    elif n == 54:\n        return '3810'\n    elif n == 55:\n        return '3811'\n    elif n == 56:\n        return '3812'\n    elif n == 57:\n        return '3813'\n    elif n == 58:\n        return '3814'\n    elif n == 59:\n        return '3815'\n    elif n == 60:\n        return '3816'\n    elif n == 61:\n        return '3817'\n    elif n == 62:\n        return '3818'\n    elif n == 63:\n        return '3819'\n    elif n == 64:\n        return '3820'\n    elif n == 65:\n        return '3821'\n    elif n == 66:\n        return '3822'\n    elif n == 67:\n        return '3823'\n    elif n == 68:\n        return '3824'\n    elif n == 69:\n        return '3825'\n    elif n == 70:\n        return '3826'\n    elif n == 71:\n        return '3827'\n    elif n == 72:\n        return '3828'\n    elif n == 73:\n        return '3829'\n    elif n == 74:\n        return '3830'\n    elif n == 75:\n        return '3831'\n    elif n == 76:\n        return '3832'\n    elif n == 77:\n        return '3833'\n    elif n == 78:\n        return '3834'\n    elif n == 79:\n        return '3835'\n    elif n == 80:\n        return '3836'\n    elif n == 81:\n        return '3837'\n    elif n == 82:\n        return '3838'\n    elif n == 83:\n        return '3839'\n    elif n == 84:\n        return '3840'\n    elif n == 85:\n        return '3841'\n    elif n == 86:\n        return '3842'\n    elif n == 87:\n        return '3843'\n    elif n == 88:\n        return '3844'\n    elif n == 89:\n        return '3845'\n    elif n == 90:\n        return '3846'\n    elif n == 91:\n        return '3847'\n    elif n == 92:\n        return '3848'\n    elif n == 93:\n        return '3849'\n    elif n == 94:\n        return '3850'\n    elif n == 95:\n        return '3851'\n    elif n == 96:\n        return '3852'\n    elif n == 97:\n        return '3853'\n    elif n == 98:\n        return '3854'\n    elif n == 99:\n        return '3855'\n    elif n == 100:\n        return '3856'\n    elif n == 101:\n        return '3857'\n    elif n == 102:\n        return '3858'\n    elif n == 103:\n        return '3859'\n    elif n == 104:\n        return '",
        "num_ids": 1569
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "num_ids": 5
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"0\" if n == 0 else str(bin(n * (n + 1))[2:])",
        "num_ids": 35
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        \n        \n    \n    return str(t)\n",
        "num_ids": 51
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +... + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 1 + 2 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = n\n    # 1 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1",
        "num_ids": 1569
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        N = int(stdin.readline())\n        print(solution2(N))\n\ndef",
        "num_ids": 46
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n, m, s = [int(item) for item in data[0].split()]\n    cities = [[] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        cities[i] = [item for item in data[i].split()]\n    roads = []\n    for i in range(m):\n        roads.append([int(item) for item in data[m + i + 1].split()])\n    # print(roads)\n    min_roads = n\n    # print(cities)\n    for u, v in roads:\n        cities[u].append(v)\n        cities[v].append(u)\n    # print(cities)\n    visited = [False] * (n + 1)\n    for city in cities[s]:\n        visited[city] = True\n    # print(visited)\n    queue = [s]\n    visited[s] = True\n    while queue:\n        u = queue.pop(0)\n        for v in cities[u]:\n            if not visited[v]:\n                queue.append(v)\n                visited[v] = True\n    for i in range(1, n + 1):\n        if visited[i]:\n            min_roads -= 1\n    return min_roads if min_roads < n else 0\n\ndef",
        "num_ids": 332
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return str(result)\n\n\n-----Possible hints-----\n\n1. Use the power of recursion.\n\n2. First, try all the possible scenarios.\n\n3. Then use some algebra to evaluate the function.\n\n\n-----Alternate solutions-----\n\n1. See [1, 2].\n\n2. See [3].\n\n\n\"\"\"\n",
        "num_ids": 82
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_roads, num_cities, s = map(int, stdin.split())\n\n    roads = []\n    for _ in range(num_roads):\n        u, v = map(int, stdin.split())\n        roads.append((u, v))\n\n    extra_roads = 0\n    for road in roads:\n        if road[0] == s or road[1] == s:\n            extra_roads += 1\n\n    if num_cities == num_roads + extra_roads:\n        return '0'\n    else:\n        return str(num_cities - num_roads - extra_roads)",
        "num_ids": 145
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(\n\"\"\"\n9 9 1\n1 2\n1 3\n2 3\n1 5\n5 6\n6 1\n1 8\n9 8\n7 1\n\"\"\"\n    ) == '3'\n)\nassert(solution(\n\"\"\"\n5 4 5\n1 2\n2 3\n3 4\n4 1\n\"\"\"\n    ) == '1'\n)\n",
        "num_ids": 90
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line)\n    boxers = [int(x) for x in stdin.readline().split()]\n    weights = sorted(boxers)\n    while len(set(weights))!= len(weights):\n        weights[-1] += 1\n        weights = sorted(weights)\n    return str(len(weights))\n\n\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"5\")\nassert(s",
        "num_ids": 1603
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n",
        "num_ids": 5
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if len(a) < n:\n        return \"0\"\n    l = [1] * n\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            l[i] = l[i - 1] + 1\n    return str(max(l))\n\nimport sys",
        "num_ids": 114
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: 4 1 2 3\n    boxers = [int(line) for line in stdin.split()]\n    # boxers: [3, 2, 4, 1]\n    boxers.sort()\n    # boxers: [1, 2, 3, 4]\n    current_boxers = boxers[:]\n    # current_boxers: [1, 2, 3, 4]\n    current_boxers.sort()\n    # current_boxers: [1, 2, 3, 4]\n    last_boxer = current_boxers[-1]\n    # last_boxer: 4\n    while last_boxer == current_boxers[-1]:\n        current_boxers.append(last_boxer + 1)\n        current_boxers.sort()\n    # current_boxers: [1, 2, 3, 4, 5]\n    return str(len(current_boxers))",
        "num_ids": 216
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip().split(\" \")\n    a = list(map(int, a))\n    a_max = max(a)\n    d = dict()\n    d[a[0]] = 1\n    d[a[1]] = 1\n    d[a[2]] = 1\n    d[a[3]] = 1\n    for i in range(1, n):\n        t = a[i]\n        if a_max > t + 1:\n            a_max = t + 1\n        if t > 1:\n            d[t] = max(d[t], d[t - 1] + 1)\n        if t > 4:\n            d[t] = max(d[t], d[t - 4] + 1)\n        if t > 9:\n            d[t] = max(d[t], d[t - 9] + 1)\n        if t > 14:\n            d[t] = max(d[t], d[t - 14] + 1)\n        if t > 19:\n            d[t] = max(d[t], d[t - 19] + 1)\n        if t > 28:\n            d[t] = max(d[t], d[t - 28] + 1)\n        if t > 35:\n            d[t] = max(d[t], d[t - 35] + 1)\n    return str(d[a_max])\n",
        "num_ids": 352
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    lst = [set() for _ in range(n)]\n\n    for i, v in enumerate(weights):\n        if v > 1:\n            lst[i].add(v - 1)\n        if v < n:\n            lst[v].add(i)\n    lst = [len(v) for v in lst]\n    return str(max(lst))\n\nassert str(solution(\"5\")) == \"4\"\nassert str(solution(\"5 6 1\")) == \"3\"\nassert str(solution(\"7\")) == \"1\"\nassert str(solution(\"7 6 5 4 3 2\")) == \"4\"\nassert str(solution(\"5 5 1 1\")) == \"1\"\nassert str(solution(\"6 6 7 6 7 7\")) == \"5\"\nassert str(solution(\"8 6 7 7\")) == \"2\"\nassert str(solution(\"8 8 8 8 8 8 8\")) == \"0\"\nassert str(solution(\"7 7 7 7 7 7\")) == \"5\"\nassert str(solution(\"7 7 7 7 7 7 7 7 7\")) == \"8\"\nassert str(solution(\"6 6 6 6 6 6 6\")) == \"4\"\nassert str(solution(\"1 1 1 1 1 1 1\")) == \"4\"\nassert str(solution(\"3 3 3 3 3 3\")) == \"3\"\nassert str(solution(\"5 7 7 7 7 7\")) == \"1\"\nassert str(solution(\"5 5 5 5 5 5\")) == \"4\"\nassert str(solution(\"5 5 5 5 5 5 5 5\")) == \"8\"\nassert str(solution(\"7 7 7 7 7\")) == \"5\"\nassert str(solution(\"5 7 7 7 7 7 7 7 7 7\")) == \"9\"\nassert str(solution(\"6 6 6 6 6\")) == \"3\"\nassert str(solution(\"1 1 1 1 1 1 1 1 1 1 1 1\")) == \"1\"\nassert str(solution(\"3 3 3 3 3\")) == \"2\"\nassert str(solution(\"5 7 7 7 7 7 7 7 7\")) == \"2\"\nassert str(solution(\"7 7 7 7 7 7\")) == \"5\"\nassert str(solution(\"7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\")) == \"9\"\nassert str(solution(\"7 7 7 7 7\")) == \"3\"\nassert str(solution(\"7 7 7\")) == \"1\"\nassert str(solution(\"7 7\")) == \"0\"\nassert str(solution(\"7\")) == \"1\"\nassert str(solution(\"8 8 8 8 8 8 8\")) == \"0\"\nassert str(solution(\"1 1 1 1 1 1 1 1 1 1 1\")) == \"0\"\nassert str(solution(\"8 8 8 8 8 8 8 8 8 8 8 8\")) == \"0\"\nassert str(solution(\"7 7 7 7 7\")) == \"1\"\nassert str(solution(\"7 7 7\")) == \"0\"\nassert str(solution(\"7\")) == \"0\"\nassert str(solution(\"7 6 7 7\")) == \"1\"\nassert str(solution(\"6 6 6 6 6\")) == \"2\"\nassert str(solution(\"7 7 7 7 7 7\")) == \"1\"\nassert str(solution(\"7 7 7\")) == \"0\"\nassert str(solution(\"7\")) == \"1\"\nassert str(solution(\"1 1 1 1 1 1 1 1 1 1 1 1\")) == \"0\"\nassert str(solution(\"7 7 7\")) == \"1\"\nassert str(solution(\"7 7\")) == \"0\"\nassert str(solution(\"7\")) == \"1\"\nassert str(solution(\"8 8 8 8 8 8 8 8 8 8 8 8 8\")) == \"0\"\nassert str(solution(\"1 1 1 1 1 1 1 1 1 1 1\")) == \"0\"\nassert str(solution(\"8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\")) == \"0\"\nassert str(solution(\"7 7 7\")) == \"1\"\nassert str(solution(\"7 7\")) == \"0\"\nassert str(solution(\"7\")) == \"0\"\nassert str(solution(\"8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8",
        "num_ids": 1602
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weight = [int(i) for i in stdin.readline().strip().split(' ')]\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if weight[i] + weight[j] > 150000:\n                break\n            else:\n                res = max(res, weight[i] + weight[j])\n    return str(res)\n\nassert(solution('''4\n3 2 4 1\n''') == '4')\n\nassert(solution('''6\n1 1 1 4 4 4\n''') == '5')\n",
        "num_ids": 163
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(i) for i in stdin.split()]\n    weights.sort(reverse=True)\n    if max(weights) == 150000:\n        return '0'\n    l = len(weights)\n    for i in range(l):\n        for j in range(i+1, l):\n            if weights[j] - weights[i] <= 1:\n                weights[j] += 1\n    return str(max(set(weights)))\n\nassert(solution(input()) == '5')\nassert(solution(input()) == '6')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '4')\nassert(solution(input()) == '5')\nassert(solution(input()) == '6')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '9')\nassert(solution(input()) == '10')\nassert(solution(input()) == '11')\nassert(solution(input()) == '12')\nassert(solution(input()) == '13')\nassert(solution(input()) == '14')\nassert(solution(input()) == '15')\nassert(solution(input()) == '16')\nassert(solution(input()) == '17')\nassert(solution(input()) == '18')\nassert(solution(input()) == '19')\nassert(solution(input()) == '20')\nassert(solution(input()) == '21')\nassert(solution(input()) == '22')\nassert(solution(input()) == '23')\nassert(solution(input()) == '24')\nassert(solution(input()) == '25')\nassert(solution(input()) == '26')\nassert(solution(input()) == '27')\nassert(solution(input()) == '28')\nassert(solution(input()) == '29')\nassert(solution(input()) == '30')\nassert(solution(input()) == '31')\nassert(solution(input()) == '32')\nassert(solution(input()) == '33')\nassert(solution(input()) == '34')\nassert(solution(input()) == '35')\nassert(solution(input()) == '36')\nassert(solution(input()) == '37')\nassert(solution(input()) == '38')\nassert(solution(input()) == '39')\nassert(solution(input()) == '40')\nassert(solution(input()) == '41')\nassert(solution(input()) == '42')\nassert(solution(input()) == '43')\nassert(solution(input()) == '44')\nassert(solution(input()) == '45')\nassert(solution(input()) == '46')\nassert(solution(input()) == '47')\nassert(solution(input()) == '48')\nassert(solution(input()) == '49')\nassert(solution(input()) == '50')\nassert(solution(input()) == '51')\nassert(solution(input()) == '52')\nassert(solution(input()) == '53')\nassert(solution(input()) == '54')\nassert(solution(input()) == '55')\nassert(solution(input()) == '56')\nassert(solution(input()) == '57')\nassert(solution(input()) == '58')\nassert(solution(input()) == '59')\nassert(solution(input()) == '60')\nassert(solution(input()) == '61')\nassert(solution(input()) == '62')\nassert(solution(input()) == '63')\nassert(solution(input()) == '64')\nassert(solution(input()) == '65')\nassert(solution(input()) == '66')\nassert(solution(input()) == '67')\nassert(solution(input()) == '68')\nassert(solution(input()) == '69')\nassert(solution(input()) == '70')\nassert(solution(input()) == '71')\nassert(solution(input()) == '72')\nassert(solution(input()) == '73')\nassert(solution(input()) == '74')\nassert(solution(input()) == '75')\nassert(solution(input()) == '76')\nassert(solution(input()) == '77')\nassert(solution(input()) == '78')\nassert(solution(input()) == '79')\nassert(solution(input()) == '80')\nassert(solution(input()) == '81')\nassert(solution(input()) == '82')\nassert(solution(input()) == '83')\nassert(solution(input()) == '84')\nassert(solution(input()) == '85')\nassert(solution(input()) == '86')\nassert(solution(input()) == '87')\nassert(solution(input()) == '88')\nassert(solution(input()) == '89')\nassert(solution(input()) == '90')\nassert(solution(input()) == '91')\nassert(solution(input()) == '92')\nassert(solution(input()) == '93')\nassert(solution(input()) == '94')\nassert(solution(input()) == '95')\nassert(solution(input()) == '96')\nassert(solution(input()) == '97')\nassert(solution(input()) == '98')\nassert(solution(input()) == '99')\nassert(solution(input()) == '100')\nassert(solution(input()) == '101')\nassert(solution(input()) == '102')\nassert(solution(input()) == '103')\nassert(solution(input()) == '104')\nassert(solution(input()) == '105')\nassert(solution(input()) == '106')\nassert(solution(input()) == '107')\nassert(solution(input()) == '108')\nassert(solution(input()) == '109')\nassert(solution(input()) == '110')\nassert(solution(input()) == '111')\nassert(solution(input()) == '112')\nassert(solution(input()) == '113')\nassert(solution(input()) == '114')\nassert(solution(input()) == '115')\nassert(solution(input()) == '116')\nassert(solution(input()) == '117')\nassert(solution(input()) == '118')\nassert(solution(input()) == '119')\nassert(solution(input()) == '120')\nassert(solution(input()) == '121')\nassert(solution(input",
        "num_ids": 1602
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, M = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n\n    # Prefecture: city mapping\n    prefectures: dict[int, list[int]] = defaultdict(list)\n    for _ in range(N):\n        P, Y = map(int, stdin[1 + _].split()[:2])\n        prefectures[P].append(Y)\n\n    # Prefecture: city ID mapping\n    ids: dict[int, str] = {}\n    for _ in range(N):\n        P, Y = map(int, stdin[1 + _].split()[:2])\n        ids[P] = stdin[1 + _].split()[-1]\n\n    # Prefecture ID\n    prefecture_ids: list[int] = []\n    for P, prefectures_ in prefectures.items():\n        if len(prefectures_) > 0:\n            prefecture_ids.append(int(ids[P]))\n\n    # Sort by prefecture ID\n    prefecture_ids.sort()\n    return \"\".join(map(str, prefecture_ids))\n",
        "num_ids": 284
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [list(map(int, line.split())) for line in stdin.strip().split(\"\\n\")]\n    n, m = inputs[0]\n    p, y = inputs[1]\n    cities = [inputs[2+i*2][1] for i in range(m)]\n    ids = [0]*m\n    for i in range(m):\n        if y[i] < p:\n            ids[i] = (y[i] - 1) * 1000 + (p - 1) * 1000 + i + 1\n        else:\n            ids[i] = (y[i] - 1) * 1000 + (p) * 1000 + i + 1\n    return \"\\n\".join(map(str, sorted(ids)))\n    \n    \nprint(solution(input()))",
        "num_ids": 192
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    assert(1 <= n <= 10**5)\n    assert(1 <= m <= 10**5)\n    pref_ids = {}\n    for i in range(m):\n        pref, year = list(map(int, stdin.split()))\n        assert(1 <= pref <= n)\n        assert(1 <= year <= 10**9)\n        pref_ids[pref] = i\n    res = []\n    for i in range(1, n + 1):\n        id_str = str(i).zfill(6)\n        res.append(id_str)\n        if i in pref_ids:\n            res[-1] = str(pref_ids[i]) + res[-1]\n    return '\\n'.join(res)\n\nprint(solution(stdin.read()))\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import groupby\n\ndef",
        "num_ids": 231
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split(\" \")\n    n = int(n)\n    m = int(m)\n    prefectures = [stdin.strip() for stdin in stdin.strip().split(\"\\n\")]\n    prefectures = [tuple(int(x) for x in prefecture.split(\" \")) for prefecture in prefectures]\n    for prefecture in prefectures:\n        if len(prefecture[1]) < 6:\n            prefecture = tuple(prefecture[0], prefecture[1].zfill(6))\n    prefectures = {prefecture[0]: prefecture[1] for prefecture in prefectures}\n    result = []\n    for city in range(1, n + 1):\n        if len(prefectures[city]) < 6:\n            prefectures[city] = \"0\" * (6 - len(prefectures[city])) + prefectures[city]\n        result.append(prefectures[city])\n        result.append(str(city))\n    return \"\\n\".join(result)",
        "num_ids": 256
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    city_to_prefecture = {}\n    for i in range(1, N+1):\n        prefecture, year = lines[i].split()\n        city_to_prefecture[int(year)] = prefecture\n    city_to_id = {}\n    for i in range(N+1, N+M+1):\n        prefecture, year = lines[i].split()\n        city_to_id[int(year)] = prefecture\n    for i in range(1, M+1):\n        prefecture = city_to_prefecture[i]\n        year = city_to_id[i]\n        print(f'{prefecture}{year}'.zfill(6))\nsolution(input())",
        "num_ids": 199
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    table = [None] * n\n    for _ in range(m):\n        p, y = [int(i) for i in stdin.split()]\n        if table[p - 1] is not None:\n            y, table[p - 1] = table[p - 1], y\n        table[p - 1] = y\n\n    return '\\n'.join(f'{i:06}' for i in table)",
        "num_ids": 121
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    N, M = map(int, line[0:2])\n    prefectures = [None] * N\n    cities = [None] * M\n    for i in range(M):\n        line = stdin.readline().split()\n        prefecture, year = int(line[0]), int(line[1])\n        prefectures[prefecture - 1] = year\n        cities[i] = (prefecture, year)\n    for i in range(len(prefectures)):\n        if prefectures[i] is None:\n            prefectures[i] = '0' * 6\n    for i in range(M):\n        if cities[i] is None:\n            cities[i] = '0' * 6\n    for i in range(len(prefectures)):\n        if len(prefectures[i]) < 6:\n            prefectures[i] = prefectures[i].ljust(6, '0')\n    for i in range(M):\n        if len(cities[i]) < 6:\n            cities[i] = cities[i].ljust(6, '0')\n    result = []\n    for i in range(len(prefectures)):\n        result.append(prefectures[i] + cities[i])\n    result.sort()\n    return ''.join(result)",
        "num_ids": 329
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    prefectures = []\n    for _ in range(m):\n        prefecture, year = stdin.split()\n        prefectures.append((prefecture, int(year)))\n    prefectures.sort(key=lambda x: x[1])\n    cities = []\n    for i in range(1, n + 1):\n        cities.append(str(i).zfill(6))\n\n    for prefecture, year in prefectures:\n        for city in cities[-6:]:\n            print(f'{prefecture}{city}', end=' ')\n        cities.pop(-6)\n",
        "num_ids": 165
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(\" \"))\n\n    cities = [stdin.strip().split(\" \") for _ in range(m)]\n\n    d = [0] * (n + 1)\n\n    for city, year in cities:\n        p, y = map(int, city.split(\" \"))\n\n        if y < d[p]:\n            d[p] = y\n\n    for i in range(1, n + 1):\n        d[i] += d[i - 1]\n\n    for city, year in cities:\n        p, y = map(int, city.split(\" \"))\n        print(f\"{d[p]}{y:06d}\")",
        "num_ids": 165
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_i = [int(stdin.split()[1]) for _ in range(N)]\n    Y_i = [int(stdin.split()[2]) for _ in range(M)]\n    id_nums = [None] * M\n    for i in range(M):\n        id_nums[i] = (str(P_i[i]) + str(i)).zfill(6)\n    id_nums.sort()\n    return '\\n'.join(id_nums)",
        "num_ids": 136
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    monsterCount = stdin.split()[0]\n    monsterHealth = [int(health) for health in stdin.split()[1:]]\n    minHealth = monsterHealth[0]\n    for health in monsterHealth:\n        if health < minHealth:\n            minHealth = health\n    return minHealth\n\nprint(solution(input()))",
        "num_ids": 82
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split(' ')[0]\n    monster = stdin.strip().split(' ')[1].split(' ')\n    print(min(int(monster[0]) - int(monster[i]) for i in range(1, len(monster))))",
        "num_ids": 64
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    alive = input_data[1:]\n    min_final_health = min(alive)\n    return str(min_final_health)",
        "num_ids": 63
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.strip().split()))\n\n    if N == 1:\n        return str(A[0])\n\n    last_alive_monster = 1\n    max_health = A[0]\n    for i in range(1, N):\n        if A[i] > max_health:\n            max_health = A[i]\n            last_alive_monster = i + 1\n\n    print(max_health)",
        "num_ids": 116
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if sum(a) % n == 0:\n        return str(sum(a) // n)\n    return '0'\n\nassert(solution('''4\n2 10 8 40''')) == '2'\nassert(solution('''4\n2 10 8 40''')) == '0'\nassert(solution('''5\n3 9 7 9 1''')) == '2'\nassert(solution('''4\n2 10 8 40''')) == '2'\nassert(solution('''4\n2 10 8 40''')) == '2'\nassert(solution('''3\n1 100 9 1''')) == '2'\nassert(solution('''3\n1 100 9 1''')) == '2'\nassert(solution('''10\n1 100 9 1''')) == '2'\nassert(solution('''10\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\n''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''3\n1 100 9 1''')) == '2'\nassert(solution('''3\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''2\n1 100 9 1''')) == '2'\nassert(solution('''1\n1 100 9 1''')) == '0'\nassert(solution('''1\n1 100 9 1'''",
        "num_ids": 1790
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count('\\n')\n    lines = stdin.splitlines()\n    a = [int(line) for line in lines[1:]]\n    r = a[0]\n    for i in range(1, n):\n        r = min(a[i], r - a[i])\n    print(r)\n",
        "num_ids": 81
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    alive_monster = int(stdin.split()[1])\n    alive_health = [int(x) for x in stdin.split()[2:]]\n    # monster_list = list(range(n))\n    monster_list = alive_health\n    monster_health = alive_health\n    # monster_health = list(range(n))\n    # monster_health[alive_monster] = alive_health\n    print(monster_list)\n    print(monster_health)\n    print(alive_monster)\n    print(alive_health)\n    while len(monster_list) > 1:\n        # print(len(monster_list))\n        # print(monster_list)\n        # print(monster_health)\n        # print(alive_monster)\n        # print(alive_health)\n        monster_health[alive_monster] = monster_health[alive_monster] - monster_health[alive_monster - 1]\n        if monster_health[alive_monster - 1] <= 0:\n            monster_list.remove(alive_monster - 1)\n        # print(monster_list)\n        # print(monster_health)\n        # print(alive_monster)\n        # print(alive_health)\n        alive_monster = monster_list[len(monster_list) - 1]\n        # print(alive_monster)\n    return str(monster_health[0])",
        "num_ids": 360
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    N = int(data[0])\n    alive = int(data[1])\n    monsters = [int(x) for x in data[2].split()]\n    health = [alive] * N\n    for _ in range(N):\n        a, b = [int(x) for x in data[3].split()]\n        if a!= b:\n            health[a - 1] -= b\n            health[b - 1] -= a\n\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            health[i] -= health[j]\n\n    return str(min(health))",
        "num_ids": 165
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().split()]\n    \n    return str(min(a))\n\nassert(solution('''\n4\n2 10 8 40\n''') == '2')\nassert(solution('''\n1\n2\n3\n4\n''') == '0')\nassert(solution('''\n6\n5 4 2 2 4\n''') == '5')\nassert(solution('''\n9\n5 4 2 2 4 3 1\n''') == '2')\nassert(solution('''\n10\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n''') == '0')\nassert(solution('''\n100\n1 1\n''') == '1')\nassert(solution('''\n100\n100 100 100 100 100 100 100 100 100 100 100 100\n''') == '0')\nassert(solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1",
        "num_ids": 1790
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''",
        "num_ids": 10
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\nprint(solution(input()))\n\"\"\"\n\nimport itertools\n\n\ndef",
        "num_ids": 28
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    golorp_shape = len(golorp_name)\n    if golorp_shape % 2!= 0:\n        return 'false'\n    golorp_mouth = golorp_shape // 2\n    golorp_body = golorp_shape - golorp_mouth\n    golorp_body_set = set()\n    golorp_mouth_set = set()\n    golorp_body_set.add('0' * golorp_body)\n    golorp_mouth_set.add('0' * golorp_mouth)\n    golorp_body_set.add('1' * golorp_body)\n    golorp_mouth_set.add('1' * golorp_mouth)\n    for _ in range(golorp_mouth):\n        golorp_mouth_set.add(('1' + '0' * golorp_body) * 2)\n        golorp_mouth_set.add(('0' + '1' * golorp_body) * 2)\n        golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n        golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') * 2)\n    golorp_mouth_set.add(('1' + '0' * golorp_body) * 2)\n    golorp_mouth_set.add(('0' + '1' * golorp_body) * 2)\n    golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n    golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') * 2)\n    golorp_mouth_set.add(('1' * golorp_mouth) * 2)\n    golorp_mouth_set.add(('0' * golorp_mouth) * 2)\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n    golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') * 2)\n    golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n    golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') * 2)\n    golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n    golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') * 2)\n    golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n    golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') * 2)\n    golorp_mouth_set.add(('1' * golorp_mouth) * 2)\n    golorp_mouth_set.add(('0' * golorp_mouth) * 2)\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add(('0' * golorp_mouth) + ('1' * golorp_mouth))\n    golorp_mouth_set.add(('1' * golorp_mouth) + ('0' * golorp_mouth))\n    golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n    golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') * 2)\n    golorp_mouth_set.add((('0' + '0' * golorp_body) + '1') * 2)\n    golorp_mouth_set.add((('1' + '1' * golorp_body) + '0') *",
        "num_ids": 1593
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n\nimport itertools\n\ndef",
        "num_ids": 24
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    variables = stdin.split(\":\")\n    print(variables)\n    return \"false\"",
        "num_ids": 25
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''?(_-_/___*__):-___>__.\n   ... ''')\n    '0010'\n    >>> solution('''?(__-_+_/_____):-__>__,_____<__.\n   ... ''')\n    'false'\n    >>> solution('''?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n   ... ''')\n    '0250341'\n    \"\"\"\n    try:\n        stdin.strip()\n        golorp_name = stdin.strip()\n    except Exception:\n        return False\n    golorp_name = golorp_name.strip()\n    golorp_name = golorp_name.replace(' ', '')\n    num_of_variables = len(golorp_name)\n    golorp_name_letters = list(golorp_name)\n    variable_indices = [0] * num_of_variables\n    jaws = []\n    stomach = []\n    for i in range(0, num_of_variables):\n        jaws.append(list(str(i)))\n        stomach.append(list(str(i)))\n    for i in range(0, num_of_variables):\n        if not golorp_name_letters[i].isalpha():\n            return False\n    for i in range(0, num_of_variables):\n        while variable_indices[i] < 10:\n            variable_indices[i] += 1\n            for j in range(0, num_of_variables):\n                if i == j:\n                    continue\n                if j < variable_indices[i]:\n                    continue\n                if jaw[j][i] == '-':\n                    continue\n                if stomach[j][i] == '-':\n                    continue\n                if jaw[j][i] == '*':\n                    continue\n                if stomach[j][i] == '*':\n                    continue\n                if jaw[j][i] > jaw[i][j]:\n                    jaws[i][j] = jaw[i][j]\n                else:\n                    stomach[i][j] = stomach[j][i]\n                break\n    jaws = ''.join(jaws)\n    stomach = ''.join(stomach)\n    return jaws + ',' + stomach\n",
        "num_ids": 571
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return...",
        "num_ids": 4
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.rstrip('\\n').split(' ')\n    n, m, k = int(n), int(m), int(k)\n    grid = [[int(c) for c in stdin.rstrip('\\n').split(' ')[i:i + m]] for i in range(0, n * m, m)]\n    def helper(i, j):\n        if i == n and j == m:\n            return 1\n        if i > n or j > m:\n            return 0\n        return helper(i + 1, j) ^ helper(i, j + 1) ^ (grid[i][j] ^ k)\n    return str(helper(1, 1))",
        "num_ids": 167
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    A = [[int(j) for j in stdin.split()] for i in range(n)]\n    return str(solution(A, n, m, k))\n\n\ndef",
        "num_ids": 66
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(check_paths(stdin))\n\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    num = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == n and j == m:\n                return num + 1\n\n            if grid[i - 1][j] ^ grid[i][j - 1] ^ k == k:\n                num += 1\n\n    return num\n\n\nassert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\nassert solution(\"3 4 2\") == 5\n",
        "num_ids": 187
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    grid = read_matrix(stdin)\n    return solve(grid, 0, 0)\n\n\ndef",
        "num_ids": 26
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 11''')\n    '3'\n    \"\"\"\n    \n    n, m, k = [int(x) for x in stdin.split()]\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    \n    result = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if i == n - 1 and j == m - 1:\n                result += 1\n                break\n            elif i == n - 1:\n                result += grid[i][j + 1]\n            elif j == m - 1:\n                result += grid[i + 1][j]\n            else:\n                result += grid[i][j + 1] + grid[i + 1][j]\n    return str(result ^ k)\n",
        "num_ids": 215
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    dp = [[0 for j in range(m)] for i in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i and j:\n                dp[i][j] += dp[i-1][j]\n                if a[i]!= a[j]:\n                    dp[i][j] += dp[i-1][j-1]\n            elif i:\n                if a[i]!= a[j]:\n                    dp[i][j] = dp[i-1][j]\n    return str(dp[n-1][m-1])",
        "num_ids": 198
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    return (solution_helper(stdin[0], stdin[1], stdin[2]))\n\ndef",
        "num_ids": 42
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grid_size = stdin.split()\n    n, m, k = int(grid_size[0]), int(grid_size[1]), int(grid_size[2])\n    grid = [list(map(int, line.split())) for line in stdin.splitlines()]\n    print(grid)\n\n    possible_paths = 0\n\n    for i in range(n):\n        for j in range(m):\n            if i + j == n - 1:\n                possible_paths += traverse(grid, i, j, k)\n    return str(possible_paths)\n\n\ndef",
        "num_ids": 145
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return next(iter(stdin.splitlines()))\n\n\ndef",
        "num_ids": 17
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    r = ''\n    s_list = list(s)\n    for i in range(n, 0, -1):\n        if s_list:\n            s_list.reverse()\n            r += s_list.pop()\n        else:\n            break\n    return r\n    \n    # alternate\n    # n = int(stdin.readline())\n    # s = stdin.readline().strip()\n    # r = ''\n    # s_list = list(s)\n    # while n > 0:\n    #     if s_list:\n    #         r += s_list.pop()\n    #         n -= 1\n    #     else:\n    #         break\n    # return r\n    \n    # alternate 2\n    # n = int(stdin.readline())\n    # s = stdin.readline().strip()\n    # r = ''\n    # s_list = list(s)\n    # while n > 0:\n    #     r += s_list.pop()\n    #     n -= 1\n    # return r\n\n\n-----Solutions-----\n\"\"\"\n\nimport unittest\n\n\ndef",
        "num_ids": 289
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[::-1]\n    return s[:n]",
        "num_ids": 28
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    # print(n, s)\n    if n < 3:\n        return s\n    ans = s\n    for i in range(n // 2, 0, -1):\n        ans = ans[-i:] + ans[:-i]\n    return ans\n\n\nprint(solution(input()))\n",
        "num_ids": 97
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[::-1]\n    for i in range(1, n):\n        a = s[:i][::-1]\n        b = s[i:][::-1]\n        s = a + b\n    return s\n\n\n\"\"\"\n\"\"\"\nWe can solve this problem by iterating over all divisors of n in descending order.  The reverse of the substring is [n - 1, n - 2,..., 1] and is repeated n - 1 times.\n\nFor the first iteration, we reverse the substring starting at position 1 and the rest of the string is unchanged.\nFor the next iteration, we reverse the substring starting at position 1 and the rest of the string is unchanged.\nFor the last iteration, we reverse the substring starting at position 1 and the rest of the string is unchanged.\n\nWe continue this process until we reach position 0 of the string.\n\nWhen we reach position 0, we reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\n\nWe continue this process until we reach position 0 of the string.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at position 0 and the rest of the string is unchanged.\nWe reverse the substring starting at",
        "num_ids": 1626
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nimport unittest\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"",
        "num_ids": 7
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(lambda x: chr(ord(x) - 1), stdin))\n\n\"\"\"",
        "num_ids": 28
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    for i in range(n - 1, 0, -1):\n        print(s[0 : i])\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"",
        "num_ids": 71
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    for d in range(n, 0, -1):\n        for i in range(1, d):\n            if t[i:d] == t[i:d][::-1]:\n                print(t[i:d])\n                return",
        "num_ids": 73
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"",
        "num_ids": 6
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the sum of two integers.\n    '''\n    a, b = [int(num) for num in stdin.strip().split(' ')]\n    return str(a + b)",
        "num_ids": 51
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    return str(sum(nums))\n\nassert(solution(\"5 14\") == \"19\")\nassert(solution(\"381 492\") == \"873\")\n",
        "num_ids": 57
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\ndef",
        "num_ids": 27
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, num1, num2 = stdin.split()\n    return str(int(num1) + int(num2))\n",
        "num_ids": 32
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(sum((a, b)))\n\nassert solution(input()) == \"873\"\nassert solution(input()) == \"19\"\n\n\n\n'''\ndef",
        "num_ids": 60
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return str(a + b)",
        "num_ids": 29
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(a + b)\n",
        "num_ids": 29
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n    \"\"\"\n    stdin = stdin.split(' ')\n    a, b = int(stdin[0]), int(stdin[1])\n    sum = a + b\n    return str(sum)\n",
        "num_ids": 58
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(a, b))",
        "num_ids": 26
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)",
        "num_ids": 24
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nTo test your code, run the script with",
        "num_ids": 14
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    output_buffer = \"\"\n    n = 5000000\n    m = 1000000\n    for line in stdin:\n        for c in line:\n            if c == '+':\n                output_buffer = output_buffer[:-1] + output_buffer[-1]\n            elif c == '-':\n                output_buffer = output_buffer[:-1] + '-' + output_buffer[-1]\n            elif c == '<':\n                output_buffer = output_buffer[:-1] + '>' + output_buffer[-1]\n            elif c == '>':\n                output_buffer = output_buffer[:-1] + '<' + output_buffer[-1]\n            elif c == '[':\n                output_buffer = output_buffer[:-1] + '[' + output_buffer[-1]\n            elif c == ']':\n                output_buffer = output_buffer[:-1] + ']' + output_buffer[-1]\n            else:\n                output_buffer += c\n        output_buffer += '\\n'\n    return output_buffer",
        "num_ids": 256
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    code = '++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>++..+++.--------.>++.<<++.--------.>++.>>+.'\n    out = ''\n    for c in code:\n        if c == '+':\n            out
        "num_ids": 1651
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i in stdin.split(' '):\n        if i[0] == '+':\n            stack.append(int(i[1:]) + 1)\n        elif i[0] == '-':\n            stack.append(int(i[1:]) - 1)\n    for i in stack:\n        print('++>')\n        print('+++>')\n        print('<[<+>-]<')\n        print('++++++++++++++++++++++++++++++++.')\n    return ''\n\nprint(solution(\"2+3\"))\nprint(solution(\"9-7\"))",
        "num_ids": 139
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nBrainfuck = list[list[str]]\ninput = sys.stdin.readline\n\ncommands = {\"+\": lambda x, y: x + y, \"-\": lambda x, y: x - y}\nmem = deque(range(30000))\n\nwhile True:\n    expression = list(input().strip())\n    if not expression:\n        break\n    elif len(expression) == 1:\n        sys.stdout.write(str(expression[0]) + \"\\n\")\n        continue\n\n    stack = deque()\n    for symbol in expression:\n        if symbol in \"+-\":\n            if symbol == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            else:\n                stack.append(stack.pop() - stack.pop())\n        elif symbol == \">\":\n            mem.append(stack.pop())\n        elif symbol == \"<\":\n            stack.append(mem.pop())\n        elif symbol == \".\":\n            sys.stdout.write(chr(stack.pop()))\n        elif symbol == \",\":\n            mem.append(ord(input().strip()))\n",
        "num_ids": 282
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\"\"\"\n\n__author__ = '__L1n__w@tch'\n\n\ndef",
        "num_ids": 27
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"\"\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(calculate(line) for line in stdin.split('\\n'))\n\ndef",
        "num_ids": 28
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass",
        "num_ids": 10
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(stdin))\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split('\\n')]\n    n = int(lines[0])\n    k = [int(line) for line in lines[1:n+1]]\n\n    for i in range(n):\n        print(str(k[i]).rjust(10, '0'))",
        "num_ids": 79
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\"\"\"",
        "num_ids": 11
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline()\n\"\"\"\n",
        "num_ids": 12
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef",
        "num_ids": 13
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n",
        "num_ids": 8
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    results = []\n    for _ in range(q):\n        k = int(stdin.readline())\n        results.append(str(k)[k-1])\n    return \"\\n\".join(results)",
        "num_ids": 62
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sans = 0\n    for n in range(1, int(stdin) + 1):\n        if str(n).count(\"7\") >= 1 and str(n).count(\"5\") >= 1 and str(n).count(\"3\") >= 1:\n            sans += 1\n    return str(sans)\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef",
        "num_ids": 89
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n\n    for i in range(1, n + 1):\n        s = str(i)\n        if \"7\" in s and \"5\" in s and \"3\" in s:\n            ans += 1\n\n    return str(ans)",
        "num_ids": 68
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    for i in range(1,n+1):\n        num = str(i)\n        if \"7\" in num or \"5\" in num or \"3\" in num:\n            x+=1\n    return x\n\nassert(solution(\"\") == \"\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"575\") == \"4\")\nassert(solution(\"575345\") == \"5\")\nassert(solution(\"373334\") == \"3\")\n",
        "num_ids": 128
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(7*5*3*5 - (n - 1))\n",
        "num_ids": 28
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(7 * 5 * 3 % 10 ** 9)\n\nprint(solution(input()))\n",
        "num_ids": 26
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(ShichiGoSan(int(stdin.strip())))\n\ndef",
        "num_ids": 21
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for _ in range(int(stdin)) if __(int(stdin)))\n\ndef",
        "num_ids": 29
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len([x for x in range(1, n+1) if \"357\" in str(x) and \"375\" in str(x) and \"537\" in str(x) and \"573\" in str(x)]))",
        "num_ids": 65
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(7 * 5 * 3 % (n * (n + 1) // 2))",
        "num_ids": 30
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    N = int(stdin)\n    for i in range(1, N + 1):\n        if contains_7(i) and contains_5(i) and contains_3(i):\n            result += 1\n    return str(result)\n\n\ndef",
        "num_ids": 65
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "num_ids": 5
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    # The code here reads from STDIN and passes the string to your function.\n    # Don't print anything to STDOUT this time.\n    N = stdin.strip()\n    for i in range(len(N)):\n        if N[i] == '0':\n            count += 1\n        else:\n            if i!= 0 and i!= len(N) - 1:\n                if N[i - 1]!= N[i + 1]:\n                    count += 1\n    return count\n    # Write your code here.\n\"\"\"\n",
        "num_ids": 132
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n",
        "num_ids": 9
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split(' ')\n    return str(len(s) - s.count('0'))",
        "num_ids": 32
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return...",
        "num_ids": 4
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.strip()\n    n = len(tiles)\n    black_tiles = sum(int(tiles[i]) for i in range(n))\n    white_tiles = n - black_tiles\n    return min(black_tiles, white_tiles)",
        "num_ids": 70
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin.splitlines()[0]\n    tiles = [[\"black\" if s[i] == '0' else \"white\" for i in range(len(s))] for s in s]\n    black = sum([s[0] == 'black' for s in tiles])\n    white = sum([s[-1] == 'white' for s in tiles])\n    if black == white:\n        return str(0)\n    elif black < white:\n        return str(black)\n    else:\n        return str(white)\n\nprint(solution(stdin.read()))\n",
        "num_ids": 150
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().split()))\n    for a in A:\n        if a % 2 == 0 and not a % 3 == 0 or a % 5 == 0 and not a % 3 == 0:\n            print(\"DENIED\")\n            return\n    print(\"APPROVED\")",
        "num_ids": 87
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def _is_even(x):\n        return x % 2 == 0\n\n    n = int(stdin.readline().strip())\n\n    # read integers\n    arr = [int(s) for s in stdin.readline().strip().split(\" \")]\n\n    # check each number\n    for num in arr:\n        if _is_even(num):\n            if num % 3!= 0 and num % 5!= 0:\n                return \"DENIED\"\n        else:\n            if num % 3 == 0 or num % 5 == 0:\n                return \"DENIED\"\n    return \"APPROVED\"",
        "num_ids": 142
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Read input\n    N = int(stdin.readline())\n    As = [int(s) for s in stdin.readline().split()]\n\n    # Check\n    for A in As:\n        if A % 2 == 0:\n            if A % 3!= 0 or A % 5!= 0:\n                return \"DENIED\"\n\n    return \"APPROVED\"\n",
        "num_ids": 98
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    for x in a:\n        if x % 2!= 0 or x % 3!= 0 or x % 5!= 0:\n            print(\"DENIED\")\n            return\n    print(\"APPROVED\")\n\n\"\"\"\n",
        "num_ids": 80
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible_by_three_or_five(n: int) -> bool:\n        return n % 3 == 0 or n % 5 == 0\n\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    for a in A:\n        if is_divisible_by_three_or_five(a) is False:\n            return 'DENIED'\n\n    return 'APPROVED'",
        "num_ids": 115
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    N = int(lines[0])\n    A = [int(a) for a in lines[1].split(' ')]\n    odds = [a for a in A if a % 2!= 0]\n\n    return 'APPROVED' if len(odds) == 0 else 'DENIED'",
        "num_ids": 82
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(c) for c in stdin.split(' ')]\n    for a in A:\n        if a % 2!= 0:\n            print('DENIED')\n            return\n    print('APPROVED')",
        "num_ids": 63
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    while n:\n        numbers = [int(i) for i in stdin.readline().strip().split(' ')]\n        count = 0\n        for num in numbers:\n            if num % 2 == 0 and num % 3 == 0 or num % 5 == 0:\n                count += 1\n        if count == len(numbers):\n            print(\"APPROVED\")\n        else:\n            print(\"DENIED\")\n        n = stdin.readline().strip()",
        "num_ids": 121
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    for x in arr:\n        if x % 2!= 0 or x % 3!= 0 or x % 5!= 0:\n            print(\"DENIED\")\n            return\n\n    print(\"APPROVED\")",
        "num_ids": 84
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.strip().split(' ')]\n    for i in a:\n        if i % 2 == 1:\n            if i % 3 == 0 or i % 5 == 0:\n                print('APPROVED')\n                break\n        else:\n            if i % 3!= 0 and i % 5!= 0:\n                print('DENIED')\n                break\n",
        "num_ids": 104
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s = stdin[0]\n    for i in range(1, len(stdin)):\n        if s == stdin[i]:\n            s = 'NO'\n        else:\n            s += stdin[i]\n    return s",
        "num_ids": 68
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if bool(stdin.strip()[::2]) and bool(stdin.strip()[1::2]) else 'No'",
        "num_ids": 35
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 1:\n        return \"No\"\n\n    is_possible = True\n    for i in range(1, len(s), 2):\n        if s[i] == \"R\" and s[i-1] == \"U\" or s[i] == \"L\" and s[i-1] == \"D\":\n            is_possible = False\n\n    if is_possible:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 122
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"Yes\" if s[0] in (\"R\", \"U\", \"D\") and s[1::2].count(\"L\") == s[1::2].count(\"R\") == s.count(\"L\") == s.count(\"R\") == s.count(\"D\") else \"No\"",
        "num_ids": 77
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    result = 'Yes' if (len(S) % 2 == 1) and (all(char in 'DR' for char in S)) else 'No'\n    return result",
        "num_ids": 49
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if not len(s):\n        return \"Yes\"\n    for i in range(1, len(s), 2):\n        if s[i]!= s[i - 1]:\n            return \"No\"\n    return \"Yes\"",
        "num_ids": 65
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin)\n    A, B, C, D, E = map(int, stdin.split(\" \"))\n\n    return str(N * (N + 1) // 2)",
        "num_ids": 54
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a, b, c, d, e, = map(int, stdin.readline().strip().split(' '))\n    \n    if n == 1:\n        return str(min(a, b, c, d, e))\n    elif n == 2:\n        return str(min(a, b) + min(b, c, d, e))\n    elif n == 3:\n        return str(min(a, b, c) + min(b, c) + min(c, d, e))\n    elif n == 4:\n        return str(min(a, b, c, d) + min(b, c, d) + min(c, d) + min(d, e))\n    elif n == 5:\n        return str(min(a, b, c, d, e) + min(b, c, d, e) + min(c, d, e))\n    else:\n        return str(a + b + c + d + e)\n\nprint(solution(stdin))\n\"\"\"\nimport sys\nfrom collections import deque\n\ndef",
        "num_ids": 270
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n    C = int(stdin)\n    D = int(stdin)\n    E = int(stdin)\n\n    return \"There is no way for them to reach City 6 in 6 minutes or less.\"\n",
        "num_ids": 75
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n",
        "num_ids": 6
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    n = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    c = int(stdin[3])\n    d = int(stdin[4])\n    e = int(stdin[5])\n    return str(n * (a + b + c + d + e))",
        "num_ids": 89
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this code with your own\n    return stdin\n\nprint(solution(input()))\n\"\"\"\n\ndef",
        "num_ids": 29
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n    C = int(stdin)\n    D = int(stdin)\n    E = int(stdin)\n    ans = N * (N-1) * (N-2) * (N-3) * (N-4) * (N-5) * 7\n    return str(ans)\n\nprint(solution(input()))\n\n'''\n\nimport sys\n\ndef",
        "num_ids": 119
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split(\" \"))\n    n = N\n    while n > 1:\n        n -= 1\n        if n == 1:\n            print(int((A + B) / 2))\n        elif n == 2:\n            print(int((A + B + C) / 2))\n        else:\n            print(int((A + B + C + D) / 2))\n    return \"\"\n",
        "num_ids": 111
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = [int(x) for x in stdin.split()]\n    possible_times = [0] * 7\n    for minute in range(7):\n        possible_times[minute] = sum(\n            max(min(A, B), min(D, E))\n            for i in range(N)\n            if (A * i) % 5 == 1\n            if (B * i) % 5 == 1\n            if (C * i) % 5 == 1\n            if (D * i) % 5 == 1\n            if (E * i) % 5 == 1\n        )\n    return str(min(possible_times))",
        "num_ids": 161
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(bin(n * (n + 1) // 2).count('1'))",
        "num_ids": 31
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    return str(count)",
        "num_ids": 12
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    ans = 0\n    for i in range(10):\n        if i == 0 or i == 9:\n            ans += N\n        else:\n            ans += (N * i)\n\n    return str(ans)",
        "num_ids": 59
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    valid_int_seq = set()\n    valid_int_seq.add(0)\n    valid_int_seq.add(9)\n    for _ in range(N):\n        num = int(stdin)\n        if num == 0:\n            valid_int_seq.add(0)\n        elif num == 9:\n            valid_int_seq.add(9)\n    return str(len(valid_int_seq))",
        "num_ids": 113
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str((9**n) % ((10**9) + 7))",
        "num_ids": 27
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ...",
        "num_ids": 3
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return (N - 1) * (N - 2) / 2\n\nassert(solution('2') == 2)\nassert(solution('3') == 3)\nassert(solution('4') == 4)\nassert(solution('5') == 5)\nassert(solution('6') == 6)\nassert(solution('7') == 7)\nassert(solution('8') == 8)\nassert(solution('9') == 9)\nassert(solution('10') == 10)\n\nassert(solution('1000') == 8)\nassert(solution('1001') == 9)\nassert(solution('1002') == 10)\nassert(solution('1003') == 11)\nassert(solution('1004') == 12)\nassert(solution('1005') == 13)\nassert(solution('1006') == 14)\nassert(solution('1007') == 15)\nassert(solution('1008') == 16)\nassert(solution('1009') == 17)\nassert(solution('1010') == 18)\n\n\"\"\"\n\ndef",
        "num_ids": 261
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    return str((9**N - 1) % (10**9 + 7))",
        "num_ids": 33
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return '0'\n    elif n == 1:\n        return '2'\n\n    # create a map of primes\n    map_primes = {}\n    map_primes[2] = True\n    map_primes[3] = True\n    for i in range(5, int(n**0.5)+1, 2):\n        map_primes[i] = True\n    \n    # check the primes from the map\n    for j in range(5, n//2+1, 2):\n        if not map_primes.get(j):\n            # check the factors\n            for k in range(j+j, n, j):\n                if not map_primes.get(k):\n                    map_primes[k] = True\n    \n    # get the minimum prime number\n    return str(sorted(map_primes.keys())[-1])\n\nprint(solution(input()))\n",
        "num_ids": 234
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    return str(next_prime(int(x)))\n\ndef",
        "num_ids": 25
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    for i in range(2, x + 1):\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                print(i)\n    \n    return stdin\n\nprint(solution(input()))\n",
        "num_ids": 84
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_prime(int(stdin)))\n\ndef",
        "num_ids": 17
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(min(x for x in range(n, n+10) if is_prime(x)))\n\ndef",
        "num_ids": 43
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum prime number greater than or equal to X.\n    >>> solution('16')\n    23\n    >>> solution('2')\n    3\n    >>> solution('0')\n    Traceback (most recent call last):\n       ...\n    Exception: 0 is not a valid input\n    '''\n    if stdin == '0':\n        raise Exception('0 is not a valid input')\n    return str(reduce(lambda x, y: y if isPrime(x) and y > x else x, range(2, int(stdin) + 1)))\n\ndef",
        "num_ids": 136
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while n >= i:\n        if is_prime(i):\n            n -= i\n        i += 1\n    return i - 1\n\ndef",
        "num_ids": 49
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(min_prime_greater_or_equal(int(stdin)))\n\ndef",
        "num_ids": 24
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    min_primes = x\n    i = 2\n    while i * i < x:\n        if x % i:\n            i += 1\n        else:\n            min_primes = x // i\n            break\n    if i * i == x:\n        min_primes = x\n    return str(min_primes)",
        "num_ids": 87
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum prime number greater than or equal to X.\n    \"\"\"\n    x = int(stdin)\n    if x < 2:\n        return \"Not enough data\"\n    else:\n        def is_prime(x):\n            if x == 2:\n                return True\n            elif x % 2 == 0:\n                return False\n            else:\n                sq = int(x**(1/2))\n                for i in range(3, sq + 1, 2):\n                    if x % i == 0:\n                        return False\n            return True\n        while True:\n            if is_prime(x):\n                return x\n            x += 2\n\nassert(solution(\"20\") == \"23\")\nassert(solution(\"13\") == \"Not enough data\")\nassert(solution(\"4\") == \"4\")\nassert(solution(\"0\") == \"Not enough data\")\nassert(solution(\"13\") == \"Not enough data\")\nassert(solution(\"18\") == \"Not enough data\")\nassert(solution(\"8\") == \"8\")\nassert(solution(\"12\") == \"Not enough data\")\n",
        "num_ids": 262
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    v = stdin.splitlines()[1]\n    v = list(map(int, v.split()))\n    n = int(n)\n    v.sort()\n    count = 1\n    for i in range(len(v) - 1):\n        if v[i]!= v[i+1]:\n            count += 1\n    return str(count)",
        "num_ids": 101
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().strip().split()))\n    #number of even elements\n    e = n // 2\n    if n % 2!= 0:\n        e += 1\n    #start with zero\n    count = 0\n    for i in range(e):\n        if v[i]!= v[i + 2]:\n            count += 1\n    return str(count)",
        "num_ids": 109
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = [int(i) for i in stdin.split(' ')]\n    print(int(bin(n // 2)[2:].count('1')) + n - int(bin(n // 2)[2:].count('1')))",
        "num_ids": 67
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = [int(stdin) for stdin in stdin.rstrip().split(\" \")]\n    for i in range(n - 2):\n        if v[i]!= v[i + 2]:\n            v[i + 1] = v[i + 2]\n            break\n    return str(v[-2])",
        "num_ids": 87
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in range(1, n):\n        if sequence[i]!= sequence[i - 1]:\n            result += 1\n    return str(result)\n\n\nassert(solution(\"\"\"4\n3 1 3 2\"\"\") == \"1\")\nassert(solution(\"\"\"6\n1 1 1 1 1 1\"\"\") == \"0\")\n",
        "num_ids": 116
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # v is a list of the input\n    n = int(stdin)\n    v = stdin.split()\n    # v_1 is the first half of v\n    v_1 = v[:n // 2]\n    # v_2 is the second half of v\n    v_2 = v[n // 2:]\n    # a is a list of the elements in v_1\n    a = [int(x) for x in v_1]\n    # a_2 is a list of the elements in v_2\n    a_2 = [int(x) for x in v_2]\n    # a_1 is a list of the elements in v_1 that are not in v_2\n    a_1 = []\n    for i in a:\n        if i not in a_2:\n            a_1.append(i)\n    # a_1_set is a set of the elements in a_1\n    a_1_set = set(a_1)\n    # a_2_set is a set of the elements in a_2\n    a_2_set = set(a_2)\n    # total_elements is the number of elements in a_1_set.union(a_2_set)\n    total_elements = len(a_1_set.union(a_2_set))\n    # total_elements_a1 is the number of elements in a_1_set\n    total_elements_a1 = len(a_1_set)\n    # total_elements_a2 is the number of elements in a_2_set\n    total_elements_a2 = len(a_2_set)\n    # total_elements_a1_a2 is the number of elements in a_1_set.union(a_2_set)\n    total_elements_a1_a2 = len(a_1_set.union(a_2_set))\n    # min_num_elements is the minimum number of elements that needs to be replaced\n    min_num_elements = total_elements - total_elements_a1_a2\n    return str(min_num_elements)\n",
        "num_ids": 509
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    v = [int(x) for x in stdin[1].split(' ')]\n    v_new = [v[i] if i == 0 or i == len(v) - 1 else v[i + 1] - v[i - 1] for i in range(1, len(v) - 1)]\n    print(len(v) - len(v_new))",
        "num_ids": 97
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return f'1'\n    v = list(map(int, stdin.split(' ')))\n    v.sort()\n    s1 = 0\n    s2 = 0\n    for i in range(1, n-2, 2):\n        if v[i] == v[i+1]:\n            s2 += 1\n        elif v[i] == v[i-1]:\n            s1 += 1\n    return f'{s1+s2}'",
        "num_ids": 127
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n    i = 0\n    while i < len(v) - 2:\n        if v[i]!= v[i + 2]:\n            i += 1\n        else:\n            v[i + 1] = v[i]\n            v[i] = v[i + 1]\n            v[i + 2] = v[i]\n            i += 3\n    print(i)\n    return \"\"",
        "num_ids": 130
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.splitlines()[1].split()\n    A, B, C = int(A), int(B), int(C)\n    N = len(stdin.splitlines()[2].split())\n    l = [int(n) for n in stdin.splitlines()[2].split()]\n    l.sort()\n    l.reverse()\n    c = 0\n    for i in range(N):\n        for j in range(i, N):\n            if l[i] + l[j] <= B:\n                c += 10\n            if l[i] + l[j] > B:\n                break\n    return str(c)",
        "num_ids": 162
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m_ext: int = 0\n    m_comp: int = 0\n    m_short: int = 0\n    n, a, b, c = map(int, stdin.split())\n    c_m = 10\n    for _ in range(n):\n        l = int(stdin.readline())\n        if l >= c:\n            m_comp += c_m\n            c_m = 0\n        else:\n            m_comp += c_m\n            c_m = 0\n            m_comp += (l - 1)\n            m_comp += (l - 1)\n            m_comp += (l - 1)\n            m_comp -= c\n            m_comp += (l - 1)\n            m_comp += (l - 1)\n            m_comp -= (l - 1)\n            m_ext += (l - 1)\n            m_ext += (l - 1)\n            m_ext += (l - 1)\n            m_ext -= 1\n    return str(m_short + m_comp + m_ext)",
        "num_ids": 247
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(n) for n in stdin.split(\" \")]\n    l = [int(n) for n in stdin.split(\" \")]\n    l.sort(reverse=True)\n    cost = 0\n    for i in range(1, len(l)):\n        if l[i] == l[i-1]:\n            cost += l[i]\n    return str(cost)",
        "num_ids": 102
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.strip().split(\" \"))\n    l = map(int, stdin.strip().split(\" \"))\n    l.sort(reverse=True)\n    s = 0\n    m = min(a, b, c)\n    for i in range(0, n):\n        if i == 0:\n            if l[i] < m:\n                s += 10\n            else:\n                s += l[i]\n        elif i == 1:\n            s += l[i]\n        else:\n            s += l[i] - l[i - 1]\n    return str(s)\n",
        "num_ids": 155
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    bamboos = [int(x) for x in stdin.split()]\n    lengths = sorted(bamboos)\n    N, A, B, C = lengths\n    # We use N - 1 bamboos to obtain the A length bamboos, and then add a C length bamboo.\n    cost = N - 1 * A - 1 * B - 1 * C\n    # The magic for the bamboos of length B is only 1 MP.\n    cost += B * 1\n    # The magic for the bamboos of length C is only 1 MP.\n    cost += C * 1\n    # The magic for the bamboos of length A is only 1 MP.\n    cost += A * 1\n    # The magic for the bamboos of length N is only 1 MP.\n    cost += N * 1\n    return str(cost)",
        "num_ids": 198
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    magic = lambda x, y: x + (x - y)\n    cost = lambda x, y: 10\n    N, A, B, C = map(int, stdin.split(' '))\n    lens = map(int, stdin.split(' '))\n    lens.sort()\n    # 3 <= N <= 8\n    # 1 <= C < B < A <= 1000\n    # 1 <= l_i <= 1000\n\n    # the optimal solution requires A + B + C = A + B + C + l_1 + l_2 +... + l_N = N * (A + B + C)\n    # therefore, we can solve for l_1 + l_2 +... + l_N = N * (A + B + C) - N * A - N * B - N * C\n    # = N * (A + B + C) - (N - 1) * A - (N - 1) * B - (N - 1) * C\n    # = N * (A + B + C) - N * A - N * B - N * C\n    # = N * (A + B + C) - (A + B + C) + A + B + C\n    # = (A + B + C) + (A + B + C) + A + B + C\n    # = (A + B + C) * 2\n    # = A + B + C * 2\n    # = A + B + C\n    # = (A + B + C) * 2 - (A + B + C)\n    # = A + B + C + (A + B + C)\n    # = A + B + C + (A + B + C)\n    # = (A + B + C) + (A + B + C)\n    # = (A + B + C) * 2 - (A + B + C)\n    # = (A + B + C) * 2 - (A + B + C) - A - B - C\n    # = (A + B + C) * 2 - (A + B + C) - A - B - C\n    # = (A + B + C) * 2 - (A + B + C) - (A + B + C)\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C + A + B + C\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C + A + B + C + A + B + C\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C\n    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C\nn    # = (A + B + C) * 2 - (A + B + C) - A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B + C + A + B",
        "num_ids": 1505
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin[1:-1]\n    return ''.join(sorted(S, key=lambda x: ord(x)-N, reverse=True))",
        "num_ids": 47
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    shift_by = int(stdin.split()[0])\n    input_string = stdin.split()[1]\n    output_string = \"\"\n    for char in input_string:\n        output_string += chr(ord(char) + shift_by)\n    return output_string\n\n\nprint(solution(input()))\n",
        "num_ids": 86
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('ABCXYZ')\n    'CDEZAB'\n    >>> solution('ZYXWVUTSRQPONMLKJIHGFEDCBA')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    >>> solution('JAN')\n    'JUQ'\n    >>> solution('L')\n    'K'\n    >>> solution('Z')\n    'Z'\n    >>> solution('X')\n    'X'\n    >>> solution('B')\n    'B'\n    >>> solution('T')\n    'T'\n    >>> solution('A')\n    'A'\n    >>> solution('M')\n    'M'\n    >>> solution('M')\n    'M'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B')\n    'B'\n    >>> solution('B",
        "num_ids": 1826
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s_new = \"\"\n    for c in s:\n        s_new += chr((ord(c) - ord('A') + n) % 26 + ord('A'))\n    return s_new",
        "num_ids": 73
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return ''.join(chr(ord('A') + ((ord(c) - ord('A') + n) % 26)) for c in stdin)\n\n\nprint(solution(input()))\n",
        "num_ids": 58
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def _alphabet_shift(s: str, shift: int) -> str:\n        result = \"\"\n        for char in s:\n            new_index = (ord(char) - 65 + shift) % 26\n            result += chr(new_index + 65)\n        return result\n\n    n = int(stdin)\n    s = stdin.strip()\n    return _alphabet_shift(s, n)",
        "num_ids": 98
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    b = map(int, stdin.readline().strip().split())\n    a = []\n    cnt = 1\n    for i in range(1, n+1):\n        if isPrime(i):\n            a.append(i)\n            cnt = cnt + 1\n    \n    a.sort()\n    b = a + b\n    b.sort()\n    print(' '.join(str(x) for x in b))",
        "num_ids": 116
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    b = sorted(b)\n    for i in range(n):\n        if a[i] in b:\n            b.remove(a[i])\n    return \" \".join(map(str, b))\n\nprint(solution(input()))\n",
        "num_ids": 111
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split(' ')]\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    l = [x for x in l if x > 2 and x < 2 * len(primes)]\n    for x in range(0, len(l)):\n        l[x] = primes[l[x]]\n    l = sorted(l)\n    return''.join([str(x) for x in l])",
        "num_ids": 329
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def my_sieve(n):\n        primes = [True for _ in range(n + 1)]\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                for j in range(i + i, n + 1, i):\n                    primes[j] = False\n        return [i for i in range(2, n + 1) if primes[i]]\n\n    n = int(stdin.readline())\n    p = my_sieve(2750131)\n    a = []\n    b = [int(x) for x in stdin.readline().split()]\n\n    for i in range(n):\n        if p[b[i]]!= b[i]:\n            a.append(b[i])\n            b[i] = p[b[i]]\n\n    return''.join(map(str, a))\n",
        "num_ids": 213
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split()]\n    p = primes(10 ** 5)\n    p = [x for x in p if x >= 2 and x <= 2 * 10 ** 5]\n    a = [b[0]] * (n + 1)\n    a[1] = p[0]\n    for i in range(1, n):\n        if b[i] in p:\n            a[i + 1] = p[p.index(b[i])]\n        else:\n            d = gcd(b[i], a[i])\n            while d > 1:\n                a[i + 1] = d\n                d = gcd(d, a[i + 1])\n    return''.join(map(str, a[1:]))\n",
        "num_ids": 205
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3205, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3",
        "num_ids": 1436
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    a = b\n    p = 2\n    for i in range(len(a)):\n        if p*p > a[i]:\n            a[i] = p\n            p += 1\n        else:\n            while a[i] % p!= 0:\n                p += 1\n            a[i] = p\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            continue\n        else:\n            k = 1\n            while a[i]*k < b[i]:\n                k += 1\n            a[i] = a[i]*k\n    return \" \".join([str(x) for x in a])",
        "num_ids": 220
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n\n    def gcd(a, b):\n        while a!= 0:\n            a, b = b % a, a\n        return b\n\n    def is_prime(num):\n        for prime in primes:\n            if num % prime == 0:\n                return False\n        return True\n\n    def is_prime_divisor(num):\n        if is_prime(num):\n            return num\n\n        divisors = []\n        for prime in primes:\n            if num % prime == 0:\n                divisors.append(prime)\n\n        for divisor in divisors:\n            if gcd(divisor, num)!= 1:\n                return num\n\n        return 1\n\n    def get_divisor(num):\n        divisors = []\n        for prime in primes:\n            if num % prime == 0:\n                divisors.append(prime)\n        return divisors\n\n    def shuffle(arr):\n        copy_arr = arr[:]\n        random.shuffle(copy_arr)\n        return copy_arr\n\n    def get_next_prime(num):\n        if num == 2 or num == 3:\n            return num\n        for n in range(2, num):\n            if is_prime(n):\n                continue\n            if is_prime_divisor(n):\n                return n\n\n        return 1\n\n    shuffled = b[:]\n    a = []\n    for _ in range(n):\n        a.append(get_next_prime(shuffled.pop(0)))\n\n    return \" \".join([str(x) for x in a])\n",
        "num_ids": 430
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    b = [int(num) for num in stdin.readline().split()]\n    numbers = get_prime_numbers(b, n)\n    return''.join([str(num) for num in numbers])\n\n\ndef",
        "num_ids": 79
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nn = int(stdin.readline().strip())\nb = [int(i) for i in stdin.readline().strip().split()]\nl = b[:n]\np = [2] + [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3205, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559",
        "num_ids": 1436
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    student_skills = [int(stdin.readline().strip()) for _ in range(n)]\n\n    def get_best_candidate(current_team: List[int], left_candidates: List[int], right_candidates: List[int]) -> Tuple[int, int]:\n        return max(left_candidates + right_candidates, key=lambda x: student_skills[x])\n\n    def create_teams(current_team: List[int], left_candidates: List[int], right_candidates: List[int]) -> Tuple[List[int], List[int]]:\n        current_team_size = len(current_team)\n        best_candidate, second_best_candidate = get_best_candidate(current_team, left_candidates, right_candidates)\n        if current_team_size < k:\n            return ([best_candidate], [second_best_candidate])\n        return (current_team + [best_candidate], [second_best_candidate])\n\n    teams: List[List[int]] = [list(range(n))]\n    while len(teams) > 1:\n        teams = create_teams(teams[0], teams[0][:-1], teams[0][1:])\n\n    return ''.join(str(t[0] + 1) for t in teams)\n",
        "num_ids": 344
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    k = min(k, n - 1)\n\n    count = 0\n    t1 = []\n    t2 = []\n\n    for i in range(n):\n        if count < k:\n            t1.append(a[i])\n            count += 1\n        else:\n            t2.append(a[i])\n\n    if count < k:\n        t1 += t2\n        t2 = []\n    elif count == k:\n        t1 += t2\n        t2 = []\n\n    return \"\".join(map(str, t1)) + \"\".join(map(str, t2))\n",
        "num_ids": 188
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    programming_skills = list(map(int, stdin.split()))\n\n    # Find the max of programming skills\n    max_skill = max(programming_skills)\n\n    # Find the indices of students that will be chosen to join the first team\n    chosen_students = set()\n    first_team = []\n    for i in range(n):\n        if i > 0 and programming_skills[i] == max_skill:\n            chosen_students.add(i)\n        elif i not in chosen_students:\n            first_team.append(i)\n\n    # Find the indices of students that will be chosen to join the second team\n    chosen_students = set()\n    second_team = []\n    for i in range(n):\n        if i > 0 and programming_skills[i] == max_skill:\n            chosen_students.add(i)\n        elif i not in chosen_students:\n            second_team.append(i)\n\n    # Generate the string\n    string = \"\"\n    for student in first_team:\n        string += \"1\"\n    for student in second_team:\n        string += \"2\"\n\n    return string",
        "num_ids": 301
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n",
        "num_ids": 8
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIf you enjoyed solving this challenge, feel free to forward it along so they can enjoy a bigger challenge.\n\n\"\"\"\n\nn, k = [int(i) for i in stdin.split()]\nstdin = stdin.strip('\\n')\nstdin = stdin.split()\nstdin = [int(i) for i in stdin]\ns = []\nfor i in range(n):\n    s.append(stdin[i])\ns.sort(reverse=True)\nt = [s[i] for i in range(n)]\na = 0\nb = 0\nfor i in range(n):\n    if i%2==0:\n        a+=t[i]\n    else:\n        b+=t[i]\nprint(a, b)",
        "num_ids": 184
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return...",
        "num_ids": 4
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n\n    return ''.join(map(str, solution_helper(stdin, n, k)))\n\ndef",
        "num_ids": 78
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    stdin = lines[1]\n    a = list(map(int, stdin.split()))\n\n    teams = {}\n\n    def find_team(current_team: int, current_student: int) -> None:\n        if current_team not in teams:\n            teams[current_team] = []\n        teams[current_team].append(current_student)\n\n    for i, student in enumerate(a):\n        if student not in teams:\n            find_team(0, i)\n        if len(teams) == 2:\n            return \"\".join(str(team) for team in sorted(teams.values(), reverse=True))\n        else:\n            find_team(1, i)\n",
        "num_ids": 196
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    skills = list(map(int, stdin.strip().split()))\n    # skills = sorted(skills)\n    # print(skills)\n    # print(max(skills[:k]), skills[k+1:k+1+n-k])\n    # print(max(skills[:k]), skills[k+1+n-k:n])\n    # print(skills[:n][::-1])\n    # print(skills[n:])\n    taken = 0\n    teams = [set() for _ in range(n)]\n    for i in range(1, n+1):\n        if i <= n-k and max(skills[:i]) >= max(skills[i+1:i+1+k]):\n            print(\"\".join([str(1) if (j+1) in teams[i-1] else str(2) for j in range(n)]))\n            exit()\n        elif i <= n-k:\n            print(\"\".join([str(1) if (j+1) in teams[i-1] else str(2) for j in range(n)]))\n            exit()\n        else:\n            team_index = skills.index(max(skills[:i]))\n            teams[team_index].add(i)\n            taken += 1\n            if taken == 2:\n                taken -= 1\n                teams[team_index].remove(i)\n                # print(skills[:i])\n                # print(teams)\n                # print(max(skills[:i]), max(skills[i+1:i+1+k]))\n                # print(skills[:i][::-1])\n                # print(skills[i+1:i+1+k])\n                # print(skills[n:])\n                # print(teams)\n    print(\"\".join([str(1) if (j+1) in teams[n-1] else str(2) for j in range(n)]))",
        "num_ids": 497
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_skill(students: list, skills: list) -> int:\n        \"\"\"\n        Return the index of the student with maximum skill among the students\n        that are not taken into any team.\n        \"\"\"\n        return max(range(len(skills)), key=lambda i: skills[i])\n\n    def get_min_skill(students: list, skills: list) -> int:\n        \"\"\"\n        Return the index of the student with minimum skill among the students\n        that are not taken into any team.\n        \"\"\"\n        return min(range(len(skills)), key=lambda i: skills[i])\n\n    n, k = [int(i) for i in stdin.split()]\n    skills = [int(i) for i in stdin.split()]\n    # print(n, k)\n    # print(skills)\n\n    team_1 = []\n    team_2 = []\n\n    for _ in range(n):\n        if len(team_1) < k:\n            skill = skills[get_max_skill(team_1, skills)]\n            team_1.append(skill)\n            skills.pop(get_max_skill(team_1, skills))\n            # print(skill)\n        else:\n            skill = skills[get_min_skill(team_1, skills)]\n            team_2.append(skill)\n            skills.pop(get_min_skill(team_1, skills))\n            # print(skill)\n    print(*team_1)\n    print(*team_2)\n\n\"\"\"\n\nIf k is less than or equal to the number of students in the row, then k students are chosen.\n\n\n\n\"\"\"\n",
        "num_ids": 395
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(monotonic_renumeration(map(int, stdin.split()[1:])))))\n",
        "num_ids": 32
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    return str(sol(n, a))\n\ndef",
        "num_ids": 50
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return str(f(a, n))\n\n\ndef",
        "num_ids": 49
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    ans = 0\n    seen = [False] * n\n\n    for i in range(n):\n        if seen[i]:\n            continue\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                seen[j] = True\n                ans += 1\n                break\n    return str(ans)\n\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"3\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"10\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"6\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"8\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"9\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"7\")\nassert(",
        "num_ids": 1589
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.strip().split()]\n    return str(len(list(reversed(sorted(a)))))\n    \nprint(solution(input()))\n",
        "num_ids": 51
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@pytest.mark.parametrize(\n    ('input', 'expected'),\n    (\n        (\n            (\n                '5\\n'\n                '1 2 1 2 3\\n',\n                '2\\n'\n            ),\n            '4\\n'\n        ),\n    ),\n)\ndef",
        "num_ids": 78
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    b[0] = 0\n    for i in range(n):\n        if a[i] == i+1:\n            b[i] = b[i-1]\n        else:\n            b[i] = b[i-1] + 1 if b[i-1] + 1 <= b[i-1] + 1 else b[i-1] + 1\n    return str(b.count(b[n-1]))",
        "num_ids": 138
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = stdin.readline().strip().split()\n    a = [int(x) for x in a]\n    monotonic = 0\n    a.sort()\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            monotonic += 1\n    return str(monotonic % 998244353)\n",
        "num_ids": 103
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    return str((count_monotonic(a, 0, len(a) - 1) - count_monotonic(a, 0, len(a) - 2)) % 998244353)\n\n\n\ndef",
        "num_ids": 77
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    b = [0] * n\n    b[0] = 0\n    b[1] = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = b[i - 1] + 1\n            if i > 1:\n                if a[i - 1] == a[i - 2] + 1:\n                    b[i] += b[i - 2]\n                elif a[i - 1] == a[i - 2] - 1:\n                    b[i] += b[i - 2]\n    return str(b[n - 1])\n\n\n>>> solution(\"\")\n'0'\n\n>>> solution(\"3\\n1 2 3\")\n'2'\n\n>>> solution(\"4\\n1 3 3 7\")\n'4'\n\n>>> solution(\"5\\n1 2 1 2 3\")\n'2'\n\n>>> solution(\"4\\n1 3 3 7\")\n'4'\n\n>>> solution(\"1\\n1\")\n'0'\n\n>>> solution(\"4\\n1 3 3 7\")\n'4'\n\n>>> solution(\"5\\n1 2 1 2 3\")\n'2'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'2'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'2'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'2'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'2'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'2'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'0'\n\n>>> solution(\"5\\n1 2 1 1 1\")\n'",
        "num_ids": 1589
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 0:\n        return str(0)\n    powers = [2 ** i for i in range(int(math.log(n, 2)) + 1)]\n    def power(n: int) -> bool:\n        for power in powers:\n            if n < power:\n                return False\n        return True\n    def delete(a: List[int]) -> bool:\n        for i in range(1, len(a)):\n            if not power(a[i] + a[0]):\n                return False\n        return True\n    count = 0\n    for i in range(len(a)):\n        if delete(a):\n            count += 1\n            if count == n:\n                return str(0)\n    return str(count)\n",
        "num_ids": 204
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = list(map(int, stdin.split()))\n        p = 2\n        while p < n:\n            for i in range(n):\n                if a[i] & p!= a[i]:\n                    break\n                else:\n                    if i == n-1:\n                        return 0\n            p <<= 1\n        return n - p\n\n\ndef",
        "num_ids": 123
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    a = list(map(int, stdin.split()))\n    # the minimal length of a good sequence is one\n    l = 1\n    # the rightmost power of 2 of a[0]\n    r = 1\n    for i in range(1, n):\n        # the new r is the minimal power of 2 of a[i]+a[i-1]\n        r = min(r, 1 << max(a[i], a[i-1]))\n        # the new l is the maximal power of 2 of a[i]\n        l = max(l, 1 << a[i])\n    # if r is larger than the maximum power of 2 of a[-1],\n    # then there is no good sequence\n    if r > (1 << n-1):\n        return -1\n    # if there is no good sequence,\n    # then we have to remove at least one element\n    return (r - 1) >> 1",
        "num_ids": 237
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > 2 ** (j + 1):\n                break\n            if a[j] > 2 ** j:\n                res += 1\n                break\n    return str(res)",
        "num_ids": 97
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    \n    l = a[:]\n    l.sort()\n    s = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            s += l[i]\n            l.remove(l[i])\n            if len(l) == 0:\n                break\n        else:\n            break\n    \n    return str(n - len(l))\n",
        "num_ids": 123
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.split(' ')]\n    return '0' if n == 0 else str(bin(max(x + y for x, y in combinations(sequence, 2)))[2:].count('1'))\n\nprint(solution(stdin))\n\n\"\"\"\n",
        "num_ids": 82
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    sequence = [int(x) for x in stdin.readline().split()]\n\n    result = 0\n\n    for i in range(length):\n        for j in range(i + 1, length):\n            if (sequence[i] + sequence[j]) & (sequence[i] + sequence[j]) - 1 == 0:\n                result += 1\n                break\n\n    return str(result)\n",
        "num_ids": 105
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if a[i] & (a[i] - 1) == 0:\n            count += 1\n    return str(count)",
        "num_ids": 76
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while stdin:\n        if stdin.startswith(\"011\"):\n            count += 1\n        stdin = stdin[1:]\n    return count",
        "num_ids": 43
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cubes = stdin.strip().split('0')\n    return str(len(cubes) - 1)",
        "num_ids": 27
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"0\") + stdin.count(\"1\")\n\nprint(solution(input()))\n",
        "num_ids": 29
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass",
        "num_ids": 10
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin",
        "num_ids": 5
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution uses dynamic programming to compute the maximum number of cubes that can be removed.\n    It does so by building a cumulative array where each element corresponds to the number of cubes that can be removed\n    from the ith cube.\n\n    A better solution can be found here:\n    https://leetcode.com/problems/the-maximum-number-of-cubes-that-can-be-removed/discuss/638370/Python-O(n)-Solution\n    \"\"\"\n    N = len(stdin)\n    cubes = [0] * (N + 1)\n\n    for i in range(N):\n        cubes[i] = cubes[i - 1] + int(stdin[i])\n\n    maximum_cubes_removed = 0\n\n    for i in range(N + 1):\n        for j in range(i + 1, N + 1):\n            if cubes[i] == cubes[j] - 1:\n                maximum_cubes_removed = max(maximum_cubes_removed, j - i)\n\n    return maximum_cubes_removed",
        "num_ids": 253
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cubes = stdin.split('0')\n    cubes.reverse()\n    return ''.join(cubes)",
        "num_ids": 29
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, num_of_gates = [int(val) for val in stdin.split()]\n    _, *gates = [int(val) for val in stdin.split()]\n    gates = zip(gates[::2], gates[1::2])\n    gates = [ (gates[0][0], gates[-1][1]), (gates[0][1], gates[-1][0]) ]\n    left, right = gates[0]\n    gates = gates[1:]\n    for _ in range(num_of_gates):\n        left, right = gates.pop(0)\n        if right < left:\n            left, right = right, left\n        if left > right:\n            break\n    else:\n        return str(max(left, right) - min(left, right) + 1)\n    return '0'",
        "num_ids": 205
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 3\\n2 4\\n')\n    '2'\n    \"\"\"\n    N, M = [int(x) for x in stdin.split()]\n\n    def test(arr):\n        if len(arr) == 0:\n            return False\n        for i in range(len(arr)):\n            if i == 0:\n                if arr[0] == i + 1:\n                    return True\n            elif i == len(arr) - 1:\n                if arr[-1] == i - 1:\n                    return True\n            else:\n                if arr[i] == arr[i - 1] + 1 and arr[i] == arr[i + 1] - 1:\n                    return True\n        return False\n\n    return ''.join(['2', '1'][test([int(x) for x in stdin.split()])])\n",
        "num_ids": 205
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We have N ID cards, and there are M gates.\n    We can pass the i-th gate if we have one of the following ID cards: the L_i-th, (L_i+1)-th,..., and R_i-th ID cards.\n    How many of the ID cards allow us to pass all the gates alone?\n\n    :param stdin: A space-delimited list of integers, N M, N IDs each representing a gate.\n    :return: The number of ID cards that allow us to pass all the gates alone.\n    \"\"\"\n    N, M = map(int, stdin.split())\n\n    lst = [int(stdin.split()[1]) for _ in range(N)]\n\n    return sum([1 for x in range(N) if x not in lst])\n",
        "num_ids": 189
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split()]\n    gates = [int(x) for x in stdin.strip().split()]\n    gates.sort()\n    n = 0\n    for i in range(0, len(gates)-1):\n        if gates[i] == gates[i+1]:\n            n += 1\n        if gates[i]!= gates[i+1]:\n            break\n    return str(n)\n\nprint(solution(input()))\n",
        "num_ids": 126
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.strip().split()]\n    L_R = [int(l) for l in stdin.strip().split()]\n    return str(solve(N, M, L_R))\n\ndef",
        "num_ids": 63
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    N_1, N_2 = map(int, stdin.split())\n    gates = []\n    for _ in range(M):\n        l, r = map(int, stdin.split())\n        gates.append((l, r))\n    gates.sort()\n    # each gate is either l_i-th, (l_i+1)-th,..., or r_i-th ID card\n    gates.sort(key=lambda g: g[0])\n    # each ID card is either l_i-th, (l_i+1)-th,..., or r_i-th ID card\n    gates.sort(key=lambda g: g[1])\n    # each ID card is either l_i-th, (l_i+1)-th,..., or r_i-th ID card\n    l = 0\n    r = N-1\n    gates_passed = 0\n    for i, (l, r) in enumerate(gates):\n        if l <= r_i <= r:\n            gates_passed += 1\n    return str(gates_passed)",
        "num_ids": 278
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    card_numbers = stdin.split(' ')\n    n = int(card_numbers[0])\n    m = int(card_numbers[1])\n    l = int(card_numbers[2])\n    r = int(card_numbers[3])\n\n    #We have a gate, and we know that a card cannot be passed on, if we don't have it.\n    #Hence, there are m + 1 possible combinations.\n    combinations = m + 1\n\n    #We know that we have a card on both sides. So, the number of possible combinations would be n choose m.\n    #Hence, we know that there are n - m + 1 possible combinations for cards on both sides.\n    #The last combination would be for the remaining card on both sides.\n    remaining_cards = n - m + 1\n\n    combinations -= remaining_cards\n    return str(combinations)",
        "num_ids": 209
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(' ')\n    n = int(input_data[0])\n    m = int(input_data[1])\n\n    l_r = []\n    for i in range(m):\n        l_r.append(int(input_data[2 + i]))\n\n    max_sum = 0\n    for i in range(n):\n        if i not in l_r:\n            max_sum += 1\n    return str(max_sum)",
        "num_ids": 114
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n\n    for _ in range(M):\n        l, r = [int(n) for n in stdin.split()]\n        if l == r:\n            continue\n\n        if l > r:\n            l, r = r, l\n\n        if l == 1:\n            continue\n\n        if r == N:\n            return str(r - l + 1)\n\n    return '0'",
        "num_ids": 109
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    h_sum = sum(h)\n    min_water = h_sum\n    # Read the number of queries\n    q = int(stdin.readline().strip())\n    # Get the queries\n    queries = []\n    for _ in range(q):\n        queries.append(stdin.readline().strip().split())\n    # Sort the queries by starting index\n    queries.sort(key=lambda x: int(x[0]))\n    for query in queries:\n        l, r = map(int, query[0:2])\n        # Increase the height of flower x by 1 for all x\n        h[l-1] += 1\n        h[r-1] += 1\n        h_sum = sum(h)\n        if h_sum < min_water:\n            min_water = h_sum\n    return min_water\n",
        "num_ids": 236
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of watering operations required to satisfy the condition.\"\"\"\n    N = stdin[0]\n    h = stdin[1:]\n    h = list(map(int, h.split(\" \")))\n    l, r = 1, len(h) - 1\n    min_water = abs(h[l] - h[r])\n    while l < r:\n        if h[l] < h[r]:\n            l += 1\n            min_water = min(min_water, abs(h[l] - h[r]))\n        elif h[l] > h[r]:\n            r -= 1\n            min_water = min(min_water, abs(h[l] - h[r]))\n        else:\n            l += 1\n            r -= 1\n    return str(min_water)",
        "num_ids": 195
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    curr = 0\n    result = 0\n    if n == 1:\n        result = 0\n    elif n == 2:\n        if l[0] > l[1]:\n            result = 1\n        else:\n            result = 2\n    else:\n        while n > 0:\n            start = curr + 1\n            end = curr + n\n            if l[curr] > l[curr + 1]:\n                result += 1\n                curr += 1\n            elif l[curr] == l[curr + 1]:\n                result += 1\n                n -= 1\n                curr += 1\n            else:\n                end = curr\n                start = curr + 1\n                while end < n and l[end] < l[end + 1]:\n                    end += 1\n                while start > 0 and l[start - 1] < l[start]:\n                    start -= 1\n                if start == end:\n                    result += 1\n                    n -= 1\n                elif l[start - 1] >= l[end]:\n                    result += 1\n                    curr = start\n                elif l[end] > l[start]:\n                    result += 1\n                    n -= 1\n                else:\n                    if l[start] > l[end]:\n                        result += 1\n                        curr = start\n                    else:\n                        result += 1\n                        n -= 1\n    return str(result)\n\n\ndef",
        "num_ids": 356
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(reduce(lambda x, y: x if x < y else y, map(int, stdin.split())))",
        "num_ids": 31
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    H = list(map(int, stdin[1].split(' ')))\n    r = max(H)\n\n    # find the kth element\n    for k in range(N):\n        l, r = k, k + 1\n        while l - 1 >= 0 and r + 1 <= N and H[l - 1] == H[r + 1]:\n            l, r = l - 1, r + 1\n        if l!= k:\n            r = k\n        if r < N:\n            r += 1\n\n        if l > r:\n            return -1\n        H[k] -= 1\n\n        # find the current maximum\n        cur_max = -1\n        for i in range(k, r):\n            if H[i] > cur_max:\n                cur_max = H[i]\n        # for the first element\n        if k == 0:\n            H[k] = cur_max\n            continue\n\n        # find the current maximum\n        cur_max = -1\n        for i in range(k, r):\n            if H[i] > cur_max:\n                cur_max = H[i]\n        # for the last element\n        if r == N:\n            H[r] = cur_max\n    # check if all elements are equal\n    for i in range(N):\n        if H[i]!= 0:\n            return -1\n    return str(r - k)\n\nprint(solution(input()))\n",
        "num_ids": 353
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    l, r = 1, n\n    i, min_operations = 0, n + 1\n    while i < n:\n        while l < r and h[l - 1] <= h[i]:\n            l += 1\n        while l < r and h[r - 1] <= h[i]:\n            r -= 1\n        if l < r:\n            min_operations = min(min_operations, r - l + 1)\n            i += 1\n    return str(min_operations)",
        "num_ids": 143
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"",
        "num_ids": 4
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    input_array = [int(x) for x in stdin.readline().split()]\n    max_height = max(input_array)\n    result = 0\n    for flower in input_array:\n        if flower < max_height:\n            result += max_height - flower\n    return str(result)",
        "num_ids": 86
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\ndef",
        "num_ids": 7
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n\n    dp = [[0] * (w + 1) for i in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(w + 1):\n            if j - a[i - 1] >= 0:\n                dp[i][j] += dp[i - 1][j - a[i - 1]]\n            if j >= a[i - 1]:\n                dp[i][j] += dp[i - 1][j]\n\n    return str(dp[n][w])",
        "num_ids": 178
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split(\" \")))\n    s = list(map(int, stdin.split(\" \")))\n    #\n    a = []\n    for i in range(n):\n        a.append([])\n    for i in range(n):\n        for j in range(i,n):\n            a[j].append(s[j]-s[i])\n    b = [1]*n\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]<0:\n                b[i] *= 0\n            else:\n                b[i] *= a[i][j]\n    b = b[n-1]\n    b = bin(b).replace('0b','')\n    b = list(map(int, b))\n    w = int(w)\n    t = 0\n    for i in range(len(b)):\n        if b[i]==1:\n            t += 2**(len(b)-i-1)\n    t = bin(t).replace('0b','')\n    t = list(map(int, t))\n    if sum(b)>=w:\n        return str(t[len(t)-1])\n    else:\n        return '0'",
        "num_ids": 310
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = list(int(x) for x in stdin.split()[1:])\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(n):\n        for j in range(a[i], w + 1):\n            if c[i] and c[i + 1] and a[i] == j:\n                c[i + 1] += c[i]\n    return c[n]\n\n\nprint(solution(stdin))\n",
        "num_ids": 140
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    s = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            s[i] += s[j]\n            if i - j - 1 >= 0 and s[i - j - 1] < w:\n                s[i] += a[j]\n    return str(s[n])\n\n\ndef",
        "num_ids": 126
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution()\n\n---",
        "num_ids": 11
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 0: return \"0\"\n    a = [-a[0]] + a\n    dp = [0] * (w+1)\n    dp[0] = 1\n    res = 0\n    for i in range(1, n+1):\n        for j in range(a[i-1], w+1):\n            dp[j] += dp[j-a[i-1]]\n    return str(dp[w])\n\nassert(solution(io.StringIO(\n    \"3 5\\n\" +\n    \"2 1 -3\\n\"\n    )) == \"3\\n\")\n\nassert(solution(io.StringIO(\n    \"2 4\\n\" +\n    \"-1 1\\n\"\n    )) == \"4\\n\")\n\nassert(solution(io.StringIO(\n    \"4 10\\n\" +\n    \"2 4 1 2\\n\"\n    )) == \"2\\n\")\nprint(solution(io.StringIO(\n    \"3 10\\n\" +\n    \"1 1 2 3 5 7 5\\n\"\n    )))\n\"\"\"\n",
        "num_ids": 303
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a = a[:n]\n    dp = [0] * (w + 1)\n    dp[0] = 1\n    for i in range(len(a)):\n        for j in range(a[i], w + 1):\n            dp[j] += dp[j - a[i]]\n    return dp[w]",
        "num_ids": 119
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split(\" \"))\n    a = [int(x) for x in stdin.split(\" \")]\n    d = {}\n    for i in range(len(a)):\n        d[i] = a[i]\n    x = 0\n    for i in range(1, n):\n        if d[i] < 0:\n            x += 1\n        else:\n            d[i] -= x\n            x = 0\n    if d[n-1] < 0:\n        return 0\n    elif d[n-1] == 0:\n        return 1\n    return 1 + solution(str(n-1) + \" \" + str(w-d[n-1]))\n",
        "num_ids": 174
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    counter = [0] * (n + 1)\n    counter[0] = 1\n    for i in range(n):\n        if x[i] > 0:\n            counter[i + 1] += counter[i]\n            if i + x[i] < n + 1:\n                counter[i + x[i]] += counter[i]\n        else:\n            counter[i + 1] += counter[i]\n    return str(counter[n])",
        "num_ids": 146
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_array = [int(x) for x in stdin.split(\" \")]\n    if len(input_array)!= 1:\n        input_array = input_array[1:]\n        input_array = input_array[::-1]\n        for i in range(len(input_array)):\n            input_array[i] = input_array[i] * 2\n        for i in range(len(input_array)):\n            input_array[i] = input_array[i] // 3\n    return \" \".join(map(str, input_array))\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline()\n\ninput_array = [int(x) for x in input.split(\" \")]\n",
        "num_ids": 176
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"",
        "num_ids": 6
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution of the problem.\n\n    >>> solution('42 28 84 126')\n    '126 42 84 28'\n    >>> solution('1000000000000000000 3000000000000000000')\n    '3000000000000000000 1000000000000000000'\n    '''\n    from math import floor\n    n = int(stdin.split()[0])\n    arr = [int(x) for x in stdin.split()[1:]]\n    k = 0\n    for i in range(n):\n        if arr[i] > floor(3 * 10 ** 18) or arr[i] < 1:\n            print(0)\n            return\n        if arr[i] % 3 == 1:\n            arr[i] //= 3\n            k += 1\n        elif arr[i] % 3 == 2:\n            arr[i] *= 2\n            k += 1\n    for i in range(k):\n        arr.insert(0, floor(3 * 10 ** 18) + 1)\n    arr = [str(x) for x in arr]\n    return''.join(arr)\n    \n",
        "num_ids": 246
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = stdin.readline().strip()\n    x = list(map(int, x.split()))\n    x.sort()\n    y = sorted(x)\n    return \" \".join(map(str, x))\n\nprint(solution(\"\"))\nprint(solution(\"3 4 5 6 7 8 9 10 11 12\"))\nprint(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"))\nprint(solution(\"3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"))\nprint(solution(\"3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"))",
        "num_ids": 405
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(x) for x in stdin.readline().strip().split()]\n    \n    index = 0\n    for i in range(n - 1):\n        new_num = (numbers[index] * 2 + numbers[index + 1]) // 3\n        numbers[index] = new_num\n        numbers[index + 1] = new_num\n        index += 1\n    \n    return \" \".join(map(str, numbers))",
        "num_ids": 123
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.strip().split(' ')))\n    for i in range(len(nums)):\n        nums[i] = nums[i] * 2 if i % 2 == 0 else nums[i] // 3\n    return''.join(map(str, nums))",
        "num_ids": 84
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    a = list(map(int, stdin.strip().split(' ')))\n    b = [a[i] * 2 if i % 2 == 0 else a[i] // 3 for i in range(n)]\n    return''.join(map(str, b))\n\n\"\"\"\n\ndef",
        "num_ids": 85
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    nums = [int(x) for x in stdin.readline().strip().split()]\n    i = 0\n    while i < len(nums):\n        if nums[i] % 3 == 0:\n            nums.append(nums[i] / 3)\n            del nums[i]\n        else:\n            if nums[i] * 2 >= 10 ** 18:\n                nums.append(nums[i] * 2)\n                del nums[i]\n            else:\n                nums.append(nums[i] * 2)\n                nums[i] = nums[i] * 2\n                del nums[i + 1]\n        i += 1\n    return \" \".join(str(x) for x in nums)",
        "num_ids": 195
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    res = [0] * n\n    for i in range(n):\n        res[i] = nums[(i + 2) % n]\n    return''.join(map(str, res))\n\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids": 93
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    \n    res = []\n    \n    for i in range(1, n+1):\n        res.append(s[i])\n        res.append(s[i])\n        res.append(s[i])\n    \n    return ''.join(res)\n\nprint(solution(input()))\n\n\"\"\"\n",
        "num_ids": 99
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n\n    ans = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if xs[j] - xs[i] == 2 ** int(math.log(abs(xs[j] - xs[i]), 2)):\n                ans += 1\n\n    return str(ans)\n\n\n\nassert(solution(input) == '3')\nassert(solution(input2) == '1')\nassert(solution(input3) == '3')\n",
        "num_ids": 149
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    m = 1\n    for i in range(1, n):\n        if numbers[i] - numbers[0] == 2 ** (i + 1):\n            m = max(m, i + 1)\n    print(m)\n    ans = [numbers[0]]\n    for i in range(1, m):\n        ans.append(numbers[i] + 2 ** i)\n    print(' '.join(map(str, ans)))\n    return str()\n\nprint(solution(input()))\n\n\n\"\"\"\n\ndef",
        "num_ids": 157
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert (\n    solution(\n        \"\"\"6\n3 5 4 7 10 12\"\"\",\n    )\n    == \"\"\"3\"\"\"\n)\nassert (\n    solution(\n        \"\"\"5\n-1 2 5 8 11\"\"\",\n    )\n    == \"\"\"1\"\"\"\n)\n",
        "num_ids": 69
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    return \" \".join([str(x[i]) for i in range(m) if (2 ** i <= n)])\n\nassert solution('''6\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n-1 2 5 8 11\n''') == '1', 'negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3', 'negative and positive'\nassert solution('''5\n0 0 0 0 0\n''') == '0', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 1 1 1 1\n''') == '-1','same'\nassert solution('''5\n0 0 0 0 0\n''') == '-1', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '1', 'all negative'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n0 0 0 0 0\n''') == '-1', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n0 0 0 0 0\n''') == '-1', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n0 0 0 0 0\n''') == '-1', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n0 0 0 0 0\n''') == '-1', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n0 0 0 0 0\n''') == '-1', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', 'all negative'\nassert solution('''7\n3 5 4 7 10 12\n''') == '3','standard'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n0 0 0 0 0\n''') == '-1', 'one element'\nassert solution('''5\n1 1 1 1 1\n''') == '1','same'\nassert solution('''5\n-1 -1 -1 -1 -1\n''') == '-1', '",
        "num_ids": 1521
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(stdin.readline().strip()) for _ in range(n)]\n    x.sort()\n    x_diffs = [x[i] - x[i - 1] for i in range(1, n)]\n    x_diffs_power = [2 ** i for i in range(20)]\n    x_diffs_power_set = set(x_diffs_power)\n    num_subsets = 0\n    for diff in x_diffs:\n        if diff in x_diffs_power_set:\n            num_subsets += 1\n            x_diffs_power_set.remove(diff)\n    return str(num_subsets) +'' +''.join(str(x) for x in x_diffs)\n\nassert solution('3\\n3 5 4 7 10 12\\n') == '1 3 5'\nassert solution('6\\n-1 2 5 8 11\\n') == '1 8'\nassert solution('5\\n-1 2 5 8 11\\n') == '0'\nassert solution('3\\n1 2 4\\n') == '3'\nassert solution('4\\n1 2 4 8\\n') == '0'\nassert solution('5\\n1 2 4 8 10\\n') == '2'\n",
        "num_ids": 312
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(\"\") == \"\")\nassert(solution(\"1\") == \"\")\nassert(solution(\"1\\n2\") == \"\")\nassert(solution(\"1\\n2\\n1\") == \"\")\nassert(solution(\"1\\n3\") == \"\")\nassert(solution(\"1\\n2\\n3\") == \"\")\nassert(solution(\"1\\n3\\n5\") == \"\")\nassert(solution(\"2\\n3\\n4\\n5\") == \"\")\nassert(solution(\"2\\n3\\n5\\n4\") == \"\")\nassert(solution(\"2\\n3\\n5\\n4\\n10\") == \"\")\nassert(solution(\"2\\n3\\n5\\n4\\n10\\n8\") == \"\")\nassert(solution(\"1\\n5\\n7\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\\n61\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n70\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n70\\n73\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n70\\n73\\n76\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25\\n28\\n31\\n34\\n37\\n40\\n43\\n46\\n49\\n52\\n55\\n58\\n61\\n64\\n67\\n70\\n73\\n76\\n79\") == \"\")\nassert(solution(\"1\\n5\\n7\\n10\\n13\\n16\\n19\\n22\\n25",
        "num_ids": 1549
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    x = stdin.readline().strip().split()\n    x = [int(x) for x in x]\n    x.sort()\n\n    min_dist = None\n    for i in range(0, len(x) - 1):\n        #print(i, x[i], x[i + 1])\n        if x[i + 1] - x[i] == 2 ** int(math.log(x[i + 1] - x[i], 2)):\n            if min_dist is None or x[i + 1] - x[i] < min_dist:\n                min_dist = x[i + 1] - x[i]\n                #print(\"New min:\", min_dist, x[i], x[i + 1])\n    if min_dist is None:\n        return \"0\"\n\n    return str(min_dist)\n\n\nprint(solution(input()))\n",
        "num_ids": 223
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_points = int(stdin.readline())\n    coordinates = list(map(int, stdin.readline().split()))\n\n    possible_points = list(set(coordinates))\n    possible_points.sort()\n\n    max_points = 0\n    for i in range(1, len(possible_points)):\n        p1 = possible_points[i - 1]\n        p2 = possible_points[i]\n        if p1 + p2 == p2 - p1:\n            max_points += 1\n\n    print(max_points)\n    for i in range(0, max_points):\n        print(possible_points[i], possible_points[i + 1])\n",
        "num_ids": 170
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    x_list = list(map(int, stdin.split(' ')))\n    x_list.sort()\n    x_len = len(x_list)\n    pow2 = int(math.ceil(math.log2(x_len)))\n    print(pow2)\n    return''.join(map(str, x_list))",
        "num_ids": 105
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    points = [int(x) for x in stdin.readline().strip().split(' ')]\n    m = len(points)\n    points.sort()\n    for i in range(0, m):\n        for j in range(i + 1, m):\n            if points[j] - points[i] == 2 ** i:\n                m -= 1\n                break\n    print(m)\n    print(*points)\n    return str(m) + '\\n' +''.join(map(str, points))\n",
        "num_ids": 134
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = (int(x) for x in stdin.split())\n    takahashi, aoki = 0, 0\n    for _ in range(K):\n        if takahashi >= A:\n            takahashi -= A\n        elif aoki >= B:\n            aoki -= B\n        else:\n            takahashi, aoki = takahashi + 1, aoki + 1\n    return str(takahashi) +'' + str(aoki)",
        "num_ids": 119
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_cookies, aoki_cookies, times = [int(i) for i in stdin.split()]\n    takahashi_eaten = aoki_eaten = 0\n\n    while takahashi_eaten < takahashi_cookies and aoki_eaten < aoki_cookies:\n        if takahashi_eaten < takahashi_cookies:\n            takahashi_eaten += 1\n        elif aoki_eaten < aoki_cookies:\n            aoki_eaten += 1\n\n        if takahashi_eaten == takahashi_cookies and aoki_eaten < aoki_cookies:\n            takahashi_eaten += 1\n            aoki_eaten += 1\n        elif takahashi_eaten < takahashi_cookies and aoki_eaten == aoki_cookies:\n            aoki_eaten += 1\n\n    return f\"{takahashi_eaten}\\n{aoki_eaten}\"",
        "num_ids": 249
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, A, K = map(int, stdin.split())\n    return f'{T - (T * K / A)} {A + (A * K / T)}'",
        "num_ids": 43
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.split()))\n    takahashi = 0\n    aoki = 0\n    for _ in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            continue\n        if takahashi == 0:\n            aoki += 1\n        else:\n            takahashi += 1\n    return \"{0} {1}\".format(takahashi, aoki)",
        "num_ids": 131
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    takahashi_cookies = A\n    aoki_cookies = B\n    for _ in range(K):\n        takahashi_cookies -= 1\n        aoki_cookies -= 1\n        if takahashi_cookies < 0:\n            takahashi_cookies += A\n        if aoki_cookies < 0:\n            aoki_cookies += B\n\n    return \"{}\\n{}\".format(takahashi_cookies, aoki_cookies)",
        "num_ids": 135
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n    if k < 1 or k > 10**12:\n        raise ValueError(\"K should be between 1 and 10^12\")\n    takahashi_cookies = 0\n    aoki_cookies = 0\n    for _ in range(k):\n        takahashi_cookies += max(0, a - 1)\n        aoki_cookies += max(0, b - 1)\n    return \"\".join(map(str, [takahashi_cookies, aoki_cookies]))",
        "num_ids": 139
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(\" \")]\n    return \" \".join([str(x) for x in solve(A, B, K)])\n\ndef",
        "num_ids": 49
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, aoki = map(int, stdin.split())\n    count = 0\n    while takahashi > 0 and aoki > 0:\n        takahashi -= 1\n        aoki -= 1\n        count += 1\n    return f\"{takahashi} {aoki}\"",
        "num_ids": 73
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, _, actions = map(int, stdin.split())\n    if actions == 0:\n        return '0 0'\n\n    takahashi, aoki = 0, 0\n    for _ in range(actions):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            continue\n        if takahashi == 0:\n            takahashi = aoki + 1\n        elif aoki == 0:\n            aoki = takahashi - 1\n    return str(takahashi) +'' + str(aoki)",
        "num_ids": 152
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split(\" \")))\n    A = numbers[0]\n    B = numbers[1]\n    K = numbers[2]\n    return str(A - K) + \" \" + str(B - K)",
        "num_ids": 61
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    b = 101\n    cnt = 0\n    while b < x:\n        b = b + (b * 0.01)\n        cnt += 1\n    return str(cnt)",
        "num_ids": 54
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1812
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    years = 1\n    balance = x\n    while balance < x:\n        years += 1\n        balance = balance * (1 + 0.01)\n\n    return str(years)",
        "num_ids": 51
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    years = 0\n    while (101 <= X):\n        X *= 1.01\n        years += 1\n    return f'{years}'",
        "num_ids": 44
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_years_to_x(int(stdin)))\n\ndef",
        "num_ids": 21
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(solution(input()))\n\ndef",
        "num_ids": 13
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    bal = 100\n    for _ in range(3):\n        bal *= 1 + 1 / 100\n\n        if bal >= X:\n            break\n\n    return str(bal - X)",
        "num_ids": 52
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(sum(reduce(lambda x,y: x*y, [x,1,2,1,2,1,2,2][:K])))\n\nprint(solution(input()))\n",
        "num_ids": 60
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution)\n\ndef",
        "num_ids": 11
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: reduce(lambda a, b: a * b, x), map(int, stdin.split()))))\n\nprint(solution(\"\"))\n",
        "num_ids": 44
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(int(gcd(a, b, c)) for a in range(1, n + 1) for b in range(1, n + 1) for c in range(1, n + 1)))",
        "num_ids": 60
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    res = 0\n    for a in range(1, number + 1):\n        for b in range(1, number + 1):\n            for c in range(1, number + 1):\n                if a == b or a == c or b == c:\n                    continue\n                res += gcd(a, b, c)\n    return str(res)\n\n\ndef",
        "num_ids": 94
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K<=1:\n        return \"9\"\n    else:\n        return sum(int(gcd(a,b,c)) for a in range(1,K+1) for b in range(1,K+1) for c in range(1,K+1))\n\ndef",
        "num_ids": 79
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(sum(reduce(lambda x, y: x * y, (gcd(i, j, n) for i in range(1, n+1) for j in range(1, n+1)), 1)))\n\ndef",
        "num_ids": 67
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 200:\n        raise Exception\n    return str(sum(map(lambda x: reduce(lambda a, b: a*b, x), itertools.permutations(range(1, k+1), k))))\n\nprint(solution(input()))\n",
        "num_ids": 77
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    if n <= 0:\n        return \"Incorrect input\"\n    if n == 1:\n        return 1\n    l = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    result = 0\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            for l in range(1, k + 1):\n                if l % i == 0 and l % j == 0:\n                    result += math.gcd(i, j, l)\n    return result\n",
        "num_ids": 154
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    arr = list(map(int, stdin.strip().split()))\n    if len(arr) <= 1:\n        return \"\"\n    f = [0] * n\n    for i in range(n):\n        f[i] = (arr[i] % arr[0]) + (arr[i] % arr[1]) + (arr[i] % arr[2])\n    return max(f)\n\nprint(solution(input()))\n",
        "num_ids": 124
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split(\" \")))\n    ret = 0\n    for i in range(n):\n        ret = (ret + nums[i] % nums[0]) % nums[0]\n    return str(ret)",
        "num_ids": 82
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    if n < 1 or n > 3000:\n        return None\n    arr = list(map(int, stdin.readline().split()))\n    if len(arr)!= n:\n        return None\n    max_val = 0\n    for el in arr:\n        if el > max_val:\n            max_val = el\n    return max_val\n\nprint(solution(stdin))\n\"\"\"\n",
        "num_ids": 117
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n\n    max_f = 0\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            max_f = max(max_f, (a[i] % a[j]) + (a[j] % a[i]))\n\n    return str(max_f)",
        "num_ids": 112
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    x = 0\n    for i in range(1, n):\n        x = (a[i] % a[0]) + (x % a[i])\n    print(x)\n    return ''",
        "num_ids": 73
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Theorem:\n    The formula for the maximum value of f(m) is\n        f(m) = m mod 3 + m mod 4 + m mod 6\n    \"\"\"\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    return str(max([(x % a[0]) + (x % a[1]) + (x % a[2]) for x in range(N)]))",
        "num_ids": 114
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    list_of_num = [int(x) for x in stdin.readline().split()]\n    max_val = 0\n    for val in list_of_num:\n        if (val > max_val):\n            max_val = val\n    return str(max_val)",
        "num_ids": 81
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().split()]\n    M = max(A)\n\n    if M == 0:\n        return \"0\"\n\n    B = [M % a for a in A]\n\n    return str(max(B))",
        "num_ids": 78
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    arr = [int(s) for s in stdin.readline().split()]\n    arr.sort()\n    max_f = 0\n    for i in range(N):\n        max_f += (arr[i] * i)\n    return str(max_f)",
        "num_ids": 80
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = [int(x) for x in stdin.split(\" \")]\n    d.sort()\n    prev = None\n    for i in range(len(d)-2):\n        if d[i] == d[i+1] and d[i+1] == d[i+2]:\n            if prev is None:\n                prev = i\n            elif i-prev >= 3:\n                return \"Yes\"\n    return \"No\"\n\nprint(solution(\"1 2\"))\nprint(solution(\"6 6\"))\nprint(solution(\"4 4\"))\nprint(solution(\"3 3\"))\nprint(solution(\"3 2\"))\nprint(solution(\"5 3 1 3 2 5\"))\n\"\"\"\n",
        "num_ids": 167
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Use stdin and not input(). The input is usually \"in/out\"\n    # in other languages.\n    # We use a list for each line to make it easier to manipulate.\n    # lines = stdin.splitlines()\n    # line_number = 0\n    # while line_number < len(lines):\n    #     lines[line_number] = lines[line_number].split()\n    #     line_number += 1\n    #\n    # num_rolls = int(lines[0][0])\n    #\n    # rolls = []\n    # for line_num in range(1, num_rolls + 1):\n    #     rolls.append(int(lines[line_num][0]))\n    #\n    # for line_num in range(2, num_rolls + 2):\n    #     rolls.append(int(lines[line_num][1]))\n    #\n    # print(rolls)\n    #\n    # doublets = 0\n    # for i in range(0, len(rolls) - 2):\n    #     if rolls[i] == rolls[i+1] and rolls[i+1] == rolls[i+2]:\n    #         doublets += 1\n    #\n    # if doublets >= 3:\n    #     print(\"Yes\")\n    # else:\n    #     print(\"No\")\n\n    return 'Yes'\n",
        "num_ids": 328
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    doublets_cnt = 0\n    for _ in range(3, int(stdin.strip()) + 1):\n        doublets_cnt += 1 if stdin.strip().split()[-1] == stdin.strip().split()[-2] else 0\n        if doublets_cnt >= 3:\n            return 'Yes'\n    return 'No'",
        "num_ids": 86
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     '''5\n   ... 1 2\n   ... 6 6\n   ... 4 4\n   ... 3 3\n   ... 3 2\n   ... ''')\n    'Yes'\n    >>> solution(\n   ...     '''3\n   ... 2 2\n   ... 1 1\n   ... 2 1\n   ... ''')\n    'No'\n    >>> solution(\n   ...     '''10\n   ... 6 6\n   ... 1 1\n   ... 5 5\n   ... 4 4\n   ... 3 3\n   ... 2 2\n   ... 3 3\n   ... 5 5\n   ... 4 4\n   ... ''')\n    'Yes'\n    \"\"\"\n    doublets = 0\n    for _ in range(int(stdin)):\n        t1, t2 = [int(x) for x in stdin.split()]\n        if t1 == t2:\n            doublets += 1\n        elif doublets == 3:\n            return 'Yes'\n        else:\n            doublets = 0\n    return 'No'\n",
        "num_ids": 248
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    for _ in range(n):\n        dice = [int(d) for d in stdin.readline().strip().split()]\n        # check for doublets\n        if sum(dice) == sum(dice) * 2:\n            print(\"Yes\")\n        else:\n            print(\"No\")",
        "num_ids": 87
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dice = [int(stdin) for _ in range(n)]\n    previous = set()\n    for i in range(2, n):\n        if dice[i] == dice[i-1] == dice[i-2]:\n            previous.add((dice[i-1], dice[i-2]))\n    return 'Yes' if previous else 'No'",
        "num_ids": 99
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 3:\n        return \"No\"\n\n    D = [map(int, line.split()) for line in stdin.split(\"\\n\")[1:-1]]\n    count = 0\n    for i, (d1, d2) in enumerate(D[2:], 1):\n        if d1 == d2:\n            count += 1\n            if count >= 3:\n                return \"Yes\"\n        else:\n            count = 0\n    return \"No\"",
        "num_ids": 121
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    d1, d2 = tuple(map(int, stdin[1:].split()))\n    d1s, d2s = [], []\n    for _ in range(n):\n        d1s.append(int(stdin[0])), d2s.append(int(stdin[1]))\n\n    d1s, d2s = set(d1s), set(d2s)\n    if len(d1s) < 3 or len(d2s) < 3:\n        return \"No\"\n\n    if len(d1s & d2s) >= 3:\n        return \"Yes\"\n    return \"No\"",
        "num_ids": 163
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n <= 2:\n        return \"No\"\n\n    doublets = False\n    for _ in range(n - 2):\n        d1, d2 = tuple(map(int, stdin.split()))\n        if d1 == d2:\n            doublets = True\n            continue\n        doublets = doublets or (d1 == d2)\n\n    return \"Yes\" if doublets else \"No\"\n",
        "num_ids": 106
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return '%d' % (4 * r * r - r * r)\n\nassert(solution('2') == '4')\nassert(solution('3') == '10')\nassert(solution('4') == '16')\nassert(solution('5') == '20')\nassert(solution('6') == '24')\nassert(solution('7') == '28')\nassert(solution('8') == '32')\nassert(solution('9') == '36')\nassert(solution('10') == '40')\nassert(solution('100') == '4')\nassert(solution('123') == '108')\n\nprint(solution(''))\nprint(solution(' '))\nprint(solution('123456789'))\nprint(solution('a'))",
        "num_ids": 199
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    return str(int(4 * r * r - r * r))",
        "num_ids": 29
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n\n    print(int(r ** 2 * math.pi / 4))",
        "num_ids": 28
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(int(r**2/4))\n\nprint(solution(input()))\n",
        "num_ids": 33
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    return str(int(4*a/b))",
        "num_ids": 40
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    # print(r)\n    return str(int(((4 * (3.14 * r)) / (3.14 * 1))))",
        "num_ids": 41
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r*r//2)",
        "num_ids": 20
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n\n    # area of circle with radius r is 4 times larger than area of circle with radius 1\n    return str(r * r * 4)\n\nassert solution('2') == '4'\nassert solution('3') == '12'\nassert solution('4') == '16'\nassert solution('5') == '20'\nassert solution('6') == '24'\nassert solution('7') == '28'\nassert solution('8') == '32'\nassert solution('9') == '36'\nassert solution('10') == '40'\nassert solution('11') == '44'\nassert solution('12') == '48'\nassert solution('13') == '52'\nassert solution('14') == '56'\nassert solution('15') == '60'\nassert solution('16') == '64'\nassert solution('17') == '68'\nassert solution('18') == '72'\nassert solution('19') == '76'\nassert solution('20') == '80'\nassert solution('21') == '84'\nassert solution('22') == '88'\nassert solution('23') == '92'\nassert solution('24') == '96'\nassert solution('25') == '100'\nassert solution('26') == '104'\nassert solution('27') == '108'\nassert solution('28') == '112'\nassert solution('29') == '116'\nassert solution('30') == '120'\nassert solution('31') == '124'\nassert solution('32') == '128'\nassert solution('33') == '132'\nassert solution('34') == '136'\nassert solution('35') == '140'\nassert solution('36') == '144'\nassert solution('37') == '148'\nassert solution('38') == '152'\nassert solution('39') == '156'\nassert solution('40') == '160'\nassert solution('41') == '164'\nassert solution('42') == '168'\nassert solution('43') == '172'\nassert solution('44') == '176'\nassert solution('45') == '180'\nassert solution('46') == '184'\nassert solution('47') == '188'\nassert solution('48') == '192'\nassert solution('49') == '196'\nassert solution('50') == '200'\nassert solution('51') == '204'\nassert solution('52') == '208'\nassert solution('53') == '212'\nassert solution('54') == '216'\nassert solution('55') == '220'\nassert solution('56') == '224'\nassert solution('57') == '228'\nassert solution('58') == '232'\nassert solution('59') == '236'\nassert solution('60') == '240'\nassert solution('61') == '244'\nassert solution('62') == '248'\nassert solution('63') == '252'\nassert solution('64') == '256'\nassert solution('65') == '260'\nassert solution('66') == '264'\nassert solution('67') == '268'\nassert solution('68') == '272'\nassert solution('69') == '276'\nassert solution('70') == '280'\nassert solution('71') == '284'\nassert solution('72') == '288'\nassert solution('73') == '292'\nassert solution('74') == '296'\nassert solution('75') == '300'\nassert solution('76') == '304'\nassert solution('77') == '308'\nassert solution('78') == '312'\nassert solution('79') == '316'\nassert solution('80') == '320'\nassert solution('81') == '324'\nassert solution('82') == '328'\nassert solution('83') == '332'\nassert solution('84') == '336'\nassert solution('85') == '340'\nassert solution('86') == '344'\nassert solution('87') == '348'\nassert solution('88') == '352'\nassert solution('89') == '356'\nassert solution('90') == '360'\nassert solution('91') == '364'\nassert solution('92') == '368'\nassert solution('93') == '372'\nassert solution('94') == '376'\nassert solution('95') == '380'\nassert solution('96') == '384'\nassert solution('97') == '388'\nassert solution('98') == '392'\nassert solution('99') == '396'\nassert solution('100') == '400'\n",
        "num_ids": 1032
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip()\n    input_list = input_list.split(\" \")\n\n    radius = int(input_list[0])\n\n    area = radius * radius * 3.141592\n\n    area_1 = 1 * 1 * 3.141592\n\n    return str(int(area / area_1))",
        "num_ids": 78
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(int((4 * pow(r, 2)) / pow(r + 1, 2)))",
        "num_ids": 33
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys\nfrom typing import List\n\ndef",
        "num_ids": 17
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...",
        "num_ids": 3
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 3 or n > 10:\n        return \"Yes\"\n    l = list(map(int, stdin.readline().split()))\n    if n == 3 and l[0] + l[1] > l[2]:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n",
        "num_ids": 92
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *lengths = list(map(int, stdin.strip().split()))\n    return \"Yes\" if max(lengths) < sum(lengths) else \"No\"",
        "num_ids": 44
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()[0]\n    Ls = stdin.split()[1:]\n\n    if int(N) < 3 or int(N) > 10:\n        raise ValueError('N should be between 3 and 10')\n\n    if len(Ls)!= int(N):\n        raise ValueError('Ls should have same length as N')\n\n    if all([int(i) < 100 for i in Ls]) and all([int(i) > 0 for i in Ls]):\n        return 'Yes' if sum([int(i) for i in Ls]) < int(N) * max(Ls) else 'No'\n    else:\n        raise ValueError('All values in Ls should be between 0 and 100')",
        "num_ids": 173
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    L = 0\n    for i in range(N):\n        if L < l[i]:\n            L = l[i]\n    for i in range(N):\n        if l[i] < L - i:\n            return \"Yes\"\n    return \"No\"",
        "num_ids": 99
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"",
        "num_ids": 6
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = list(map(int, stdin.split()))\n    L.sort()\n    if L[-1] < sum(L[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 64
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    L = list(map(int, stdin.split()[1:]))\n    max_length = max(L)\n    return \"Yes\" if max_length < sum(L) else \"No\"",
        "num_ids": 59
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    for _ in range(n):\n        s, c = [int(x) for x in stdin.split()]\n        if s < 0 or c < 0 or c > 9:\n            continue\n        n1, n2 = n - s, n - m - 1\n        if n1 < 0 or n2 < 0:\n            continue\n        s = n1 * (10 ** n2) + (c - 1) * (10 ** n2) + (n1 - 1) * (10 ** (n2 - 1))\n        if s < 0:\n            continue\n        print(s)\n        return\n    print(-1)\n",
        "num_ids": 169
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 7\\n3 2\\n1 7\")\n    702\n    \"\"\"\n    N, M = (int(x) for x in stdin.split())\n    for _ in range(M):\n        s, c = stdin.readline().split()\n        if int(s) >= 0 and int(c) <= 9:\n            s = int(s)\n            c = int(c)\n            if len(str(s)) == N and str(s).startswith(str(c)):\n                print(s)\n                break\n    else:\n        print(-1)",
        "num_ids": 144
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    M, N = [int(x) for x in stdin.split()]\n    matrix = []\n    for _ in range(M):\n        s, c = [int(x) for x in stdin.split()]\n        matrix.append([s, c])\n    row_len = len(str(N))\n    count = 0\n    for i in range(M):\n        current_row = matrix[i]\n        for j in range(row_len):\n            current_col = [int(x) for x in list(str(current_row[0]))[j:]]\n            if sum(current_col) == current_row[1] and len(current_col) == N:\n                count += 1\n    print(count)",
        "num_ids": 179
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    d = {}\n    for i in range(1, 10):\n        d[i] = set()\n    for _ in range(N):\n        s, c = map(int, stdin.split()[1:])\n        d[c].add(s)\n    for i in range(1, 10):\n        if len(d[i]) == 0:\n            continue\n        for s in d[i]:\n            tmp = list(s)\n            tmp[0], tmp[-1] = tmp[-1], tmp[0]\n            s = int(''.join(tmp))\n            if s < 0:\n                continue\n            if s <= M:\n                return str(s)\n    return '-1'",
        "num_ids": 184
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the smallest non-negative integer which satisfies the conditions.\n    \"\"\"\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n\n    for i in range(10 ** N, 10 ** (N + 1)):\n        if is_valid(str(i), N):\n            return str(i)\n\n    return '-1'\n\n\ndef",
        "num_ids": 94
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    if N < 0 or M < 0:\n        return \"NEGATIVE\"\n    if N > 9 or M > 5:\n        return \"NEGATIVE\"\n    a = stdin[1:N+1]\n    b = stdin[N+2:N+M+2]\n    return int(a)*int(b)",
        "num_ids": 106
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    number = list(map(int, stdin.split(' ')))\n    for i in range(N):\n        if number[i] <= 0 or number[i] >= 10 ** N:\n            number[i] = -1\n    answer = ''\n    for i in range(N):\n        if number[i]!= -1:\n            answer += str(number[i])\n    return answer",
        "num_ids": 111
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    n, k = map(int, line.split(' '))\n    cnt = 0\n\n    for a in range(1, n):\n        for b in range(a + 1, n + 1):\n            c = k * (a + b) // 2\n            if c * (c + a) * (c + b) // 6 > n:\n                continue\n            cnt += (a - 1) * (b - 1) * (c - 1)\n\n    return str(cnt)",
        "num_ids": 124
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    k = int(line[1])\n    answer = 0\n    # Sort the array\n    def sortKey(x):\n        return x[0] * 100 + x[1] * 10 + x[2]\n    arr = [(0,0,0)] * (n - 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if i!= j!= k:\n                    arr[sortKey((i,j,k))] = (i,j,k)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i][1]!= arr[j][0] and arr[i][2]!= arr[j][1] and arr[j][2]!= arr[i][0]:\n                answer += 1\n    return str(answer)\n\nprint(solution(input()))\n",
        "num_ids": 248
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n\n    return str(len(set([a + b, b + c, c + a])))",
        "num_ids": 40
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(sum(1 for i in range(n+1, n+k+1, k) if sum(i, i+k) % k == 0))",
        "num_ids": 53
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input to n,k\n    n,k = map(int, stdin.split())\n\n    # Loop over the range [1,n]\n    count = 0\n    for i in range(1, n+1):\n        # Check if i is a multiple of k\n        if (i % k) == 0:\n            # Find the factors of i\n            factors = set(j for j in range(1, i+1) if (i % j) == 0)\n            # Add the count of triples with distinct numbers\n            if len(factors) > 2:\n                count += (len(factors) * (len(factors)-1) * (len(factors)-2) // 6)\n    return count",
        "num_ids": 171
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1 2')\n    '9'\n    >>> solution('3 2')\n    '9'\n    >>> solution('10 2')\n    '3'\n    >>> solution('10 1')\n    '0'\n    >>> solution('10 4')\n    '0'\n    '''\n    n, k = list(map(int, stdin.split()))\n\n    triples = 0\n    for a in range(n, (k * (k + 1)) // 2, k):\n        for b in range(a, (k * (k + 1)) // 2, k):\n            if a < b:\n                for c in range(b, (k * (k + 1)) // 2, k):\n                    if a < c and (a + b) % k == 0 and (b + c) % k == 0 and (c + a) % k == 0:\n                        triples += 1\n\n    return str(triples)",
        "num_ids": 221
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\")\n    '9'\n    >>> solution(\"1 2\")\n    '0'\n    \"\"\"\n    N, K = list(map(int, stdin.split()))\n    return str(sum(1 for a in range(1, N // K + 1) for b in range(a + 1, (N - a) // K + 1) for c in range(b + 1, (N - b) // K + 1)))\n\n\ndef",
        "num_ids": 112
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            if i % k == 0 and j % k == 0:\n                res += 1\n    return str(res)",
        "num_ids": 73
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    res = 0\n    for a in range(1, N):\n        for b in range(1, N):\n            c = K - a - b\n            if a + b > c:\n                res += 1\n    return str(res)",
        "num_ids": 78
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str((n * (n + 1)) // 2)",
        "num_ids": 35
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the base -2 representation of N.\n    '''\n    return bin(int(stdin))[2:]",
        "num_ids": 32
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 0:\n        return '0'\n    current = 1\n    reverse = 0\n    while number:\n        reverse = reverse * 2 + (number & 1)\n        number >>= 1\n    return str(reverse)\n",
        "num_ids": 64
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin))[2:])",
        "num_ids": 16
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    while n!= 0:\n        if n % 2 == 0:\n            res.append('0')\n            n //= 2\n        else:\n            res.append('1')\n            n -= 1\n    return ''.join(res[::-1])",
        "num_ids": 75
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return",
        "num_ids": 3
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return bin(n).replace(\"0b\", \"\").zfill(32)",
        "num_ids": 28
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return base2(int(stdin))\n\ndef",
        "num_ids": 14
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    \n    A = []\n    for i in range(N):\n        a, b = map(int, stdin.split(' ')[i + 1].split(' '))\n        A.append(a)\n        A.append(b)\n    \n    A.sort()\n    print(A)\n    \n    ans = 0\n    i = 0\n    while i < len(A):\n        \n        a = A[i]\n        ans += a * M\n        i += 1\n        \n        while i < len(A) and A[i] - a <= M:\n            M -= A[i] - a\n            ans += A[i]\n            i += 1\n    return str(ans)\n    \n",
        "num_ids": 185
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(input(\"\")) == \"5 6 7 8 9 10\")\nassert(solution(input(\"2 10\\n4 9\\n2 4\\n\")) == \"12\")\nassert(solution(input(\"3 3\\n5 5\\n4 4\\n\")) == \"17\")\nassert(solution(input(\"3 3\\n1 1\\n1 1\\n\")) == \"0\")\nassert(solution(input(\"4 1\\n1 1\\n1 1\\n1 1\\n\")) == \"0\")\n",
        "num_ids": 127
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n\n    table = [0] * (M + 1)\n    for a, b in zip(A, B):\n        table[a * b] = max(table[a * b], a + table[a])\n\n    return str(max(table[M], table[M - 1]))\n\nprint(solution(input()))\n\"\"\"\ndef",
        "num_ids": 137
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    M, N = [int(i) for i in stdin.strip().split(' ')]\n    A = [int(i) for i in stdin.strip().split(' ')]\n    B = [int(i) for i in stdin.strip().split(' ')]\n\n    for i in range(1, len(A)):\n        B[i] += B[i - 1]\n\n    res = float('inf')\n    for i in range(1, M + 1):\n        a = min(max(A[j] for j in range(0, len(A)) if i - 1 - j >= 0),\n                max(B[j] for j in range(0, len(B)) if i - j >= 0))\n        res = min(res, i * a)\n\n    return str(res)",
        "num_ids": 190
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = [int(n) for n in stdin.split()]\n    A, B = [int(n) for n in stdin.split()]\n    coins = [int(n) for n in stdin.split()]\n\n    # Return the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n    return str(min(coins[n] * B for n in range(n)))",
        "num_ids": 105
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A, B = [], []\n    for _ in range(N):\n        A.append(int(stdin.split()[0]))\n        B.append(int(stdin.split()[1]))\n    C = [[float('inf') for _ in range(M + 1)] for _ in range(N + 1)]\n    C[0][0] = 0\n    for i in range(N):\n        for j in range(M + 1):\n            if j - A[i] >= 0 and C[i][j - A[i]]!= float('inf'):\n                C[i + 1][j] = min(C[i + 1][j], C[i][j - A[i]] + B[i])\n    if C[-1][-1] == float('inf'):\n        return '-1'\n    return str(C[-1][-1])",
        "num_ids": 226
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    left, right = 0, n - 1\n    while left < right:\n        if arr[left] < arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return str(left - right)",
        "num_ids": 80
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, hs = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n\n    max_moves = 0\n    current_height = H[0]\n    for height in H:\n        if height > current_height:\n            max_moves += 1\n            current_height = height\n\n    return max_moves",
        "num_ids": 88
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_height = int(stdin.split()[0])\n    height_list = list(map(int, stdin.split()[1].split(' ')))\n    current_height = 0\n    current_max = 0\n    for i in range(max_height):\n        if i == 0:\n            current_max = height_list[i]\n        else:\n            current_height += height_list[i]\n            current_max = max(current_max, current_height)\n    return str(current_max)",
        "num_ids": 125
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n",
        "num_ids": 4
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = [int(heigh) for heigh in stdin.readline().split(' ')]\n\n    max_height = max(heights)\n\n    result = [0 for _ in range(max_height + 1)]\n    for heigh in heights:\n        result[heigh] += 1\n\n    print(result)",
        "num_ids": 88
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Examples\n    >>> solution(\"10 4 8 7 3\")\n    2\n    '''\n    n = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1:]))\n\n    max_move = 0\n\n    for i in range(n):\n        if h[i] > h[i+1]:\n            max_move += 1\n        else:\n            max_move = 0\n\n    return max_move",
        "num_ids": 112
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    height = [int(h) for h in stdin.readline().strip().split()]\n    curr_height = height[0]\n    max_height = height[0]\n    for i in range(1,N):\n        if height[i] > curr_height:\n            curr_height = height[i]\n        if curr_height > max_height:\n            max_height = curr_height\n    return str(max_height)\n\nassert(solution(stdin) == '3')\n\n\"\"\"\n",
        "num_ids": 142
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    \n    max_h = int(s[-1])\n    i = 0\n    while i < len(s) - 1:\n        current_h = int(s[i])\n        if current_h < max_h:\n            return -1\n        max_h = max(max_h, current_h)\n        i += 1\n    return max_h",
        "num_ids": 105
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    height_list = list(map(int, stdin.split()))\n    max_height = max(height_list)\n    max_index = height_list.index(max_height)\n    count = 0\n    while True:\n        if max_index < n - 1:\n            max_height = max(max_height - 1, height_list[max_index + 1])\n            max_index += 1\n            count += 1\n        else:\n            break\n    print(count)",
        "num_ids": 125
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split('\\n')]\n    n = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n    if n > 1:\n        height_index = heights.index(max(heights))\n        target_height = heights[height_index]\n        max_height = max(heights)\n        max_index = heights.index(max_height)\n        max_height_index = heights.index(max_height, max_index + 1)\n        if max_height_index < height_index:\n            max_height_index += 1\n        return max_height_index - height_index\n    else:\n        return 0",
        "num_ids": 172
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Binary search will give you the answer in O(NlogN) time\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    total = sum(a)\n    if total < k:\n        return str(0)\n    elif total == k:\n        return str(0)\n    elif total > k:\n        start, end = 1, total\n        while start + 1 < end:\n            mid = (start + end) // 2\n            count = sum(map(lambda x: x // mid, a))\n            if count >= k:\n                end = mid\n            else:\n                start = mid\n        if sum(map(lambda x: x // start, a)) >= k:\n            return str(0)\n        else:\n            return str(total - k)\n",
        "num_ids": 214
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = [x % (2**32) for x in a]\n    if (n - k) % 2:\n        a.sort()\n    else:\n        a.sort(reverse=True)\n    n = (n - k) // 2\n    if n:\n        a[0] -= 1\n        a[-1] += 1\n    else:\n        a[0] += 1\n    return str(min(a))\n\nassert solution('1 1 2 2 4 5') == '0'\nassert solution('1 2 2 4 5') == '1'\nassert solution('1 2 3 3 3') == '2'\nassert solution('1 2 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3 3 3 3 3') == '0'\nassert solution('1 2 3 3 3 3 3 3 3 3 3 3 3 3 3') == '0'\nassert solution
        "num_ids": 1659
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\nassert solution(\n\"\"\"5 3\n1 2 2 4 5\"\"\") == \"\"\"1\"\"\"\nassert solution(\n\"\"\"5 3\n1 2 3 4 5\"\"\") == \"\"\"2\"\"\"\nassert solution(\n\"\"\"5 3\n1 2 3 3 3\"\"\") == \"\"\"0\"\"\"\nassert solution(\n\"\"\"5 3\n1 1 2 2 2\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\n\"\"\"5 3\n1 2 3 4 5\"\"\") == \"\"\"0\"\"\"\nassert solution(\n\"\"\"5 3\n1 2 3 3 3\"\"\") == \"\"\"1\"\"\"\n",
        "num_ids": 130
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))",
        "num_ids": 13
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    e = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        e += a[i] % 2\n        a[i] //= 2\n    return str(min(e, k))",
        "num_ids": 88
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    m = s // k\n    s1 = s - m * k\n    d = max(0, k - s1)\n    return str(d)",
        "num_ids": 76
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    result = 0\n    for num in arr:\n        result += 2 ** (num - 1)\n    if result >= k:\n        return 0\n    else:\n        return result\n",
        "num_ids": 74
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    total = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            total += 1\n    if k <= n:\n        return '0'\n\n    if k % 2 == 0:\n        return str(total)\n    else:\n        if n % 2 == 0:\n            return str(total) +'' + str(total + 1)\n        else:\n            return str(total) +'' + str(total)",
        "num_ids": 147
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    for i in range(1, n + 1):\n        a[i - 1] = math.floor(a[i - 1] / 2)\n        count += abs(a[i - 1] - i)\n    if count < k:\n        return str(count)\n    return str(k)\n\n\ndef",
        "num_ids": 123
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n1\")\n    '0'\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    a.sort()\n    ans = 0\n    for i in range(n - 1):\n        if a[i] == 0:\n            continue\n        if k == 0:\n            break\n        a[i] -= 1\n        k -= 1\n        ans += 1\n    return str(ans)\n",
        "num_ids": 126
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = max(a)\n    \n    if m == 1:\n        return 0\n    elif m == k:\n        return 1\n    elif m * k > n:\n        return (n - k) // m + 1\n    else:\n        return (m - 1) * k // m\n\n\nassert(solution('''6 5\n1 2 2 4 2 3\n''') == 3)\nassert(solution('''7 5\n3 3 2 1 1 1 3\n''') == 4)\n",
        "num_ids": 151
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m, M = min(a), max(a)\n    moves = 0\n    while m!= M:\n        m -= 1\n        a[m] += 1\n        moves += 1\n        m += 1\n        a[m] -= 1\n        moves += 1\n    while k > 0 and m!= M:\n        m -= 1\n        a[m] += 1\n        k -= 1\n        moves += 1\n    return moves\n\nprint(solution(input()))\n",
        "num_ids": 148
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    minimum = min(a)\n    maximum = max(a)\n    count = 0\n    while k > 0 and minimum < maximum:\n        index1 = a.index(minimum)\n        index2 = a.index(maximum)\n        a[index1] += 1\n        a[index2] -= 1\n        minimum = min(a)\n        maximum = max(a)\n        count += 1\n        k -= 1\n    return str(count)",
        "num_ids": 136
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    i = 0\n    while len(a) > k:\n        min_num = min(a)\n        max_num = max(a)\n        min_num_index = a.index(min_num)\n        max_num_index = a.index(max_num)\n        if min_num_index > max_num_index:\n            a[max_num_index] = a[min_num_index] - 1\n            a[min_num_index] = a[min_num_index] + 1\n        else:\n            a[min_num_index] = a[max_num_index] - 1\n            a[max_num_index] = a[max_num_index] + 1\n        i += 1\n    return str(i)\n",
        "num_ids": 221
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    min_moves = len(a)\n    if k <= n:\n        min_moves = 0\n    else:\n        for i in range(n):\n            if a[i] == min(a):\n                a[i] += 1\n                if min_moves > k:\n                    min_moves = 0\n                    break\n            else:\n                if a[i] == max(a):\n                    a[i] -= 1\n                    if min_moves > k:\n                        min_moves = 0\n                        break\n\n    return str(min_moves)\n",
        "num_ids": 174
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    best = n\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = n + 1\n        elif a[i] == n:\n            a[i] = 1\n\n        if a[i] == k:\n            best = min(best, i)\n\n    return best\n\nassert(solution('''6 5\n1 2 2 4 2 3''') == 3)\nassert(solution('''7 5\n3 3 2 1 1 1 3''') == 4)\nprint(solution('''3 1\n1'''))\n",
        "num_ids": 177
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    s = 0\n    while True:\n        mx, mn = max(a), min(a)\n        if mx == mn:\n            s += 1\n            if s >= k:\n                break\n        else:\n            idx = a.index(mn)\n            a[idx] += 1\n            s += 1\n            if s >= k:\n                break\n\n    return str(s)\n",
        "num_ids": 134
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    mn, mx = min(a), max(a)\n    min_moves = 0\n    while mx - mn < k:\n        min_moves += 1\n        # move minimum element to end of array\n        i = a.index(mn)\n        a[i] = mx\n        mx -= 1\n\n        # move maximum element to beginning of array\n        i = a.index(mx)\n        a[i] = mn\n        mn += 1\n\n    return min_moves\n",
        "num_ids": 153
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()[1:]))\n    s = [min(a), max(a)]\n    for i in range(k - 2):\n        l, r = a.index(s[0]), a.index(s[1])\n        a[l], a[r] = a[r], a[l]\n        s = [a[l], a[r]]\n        if r > l:\n            a[l], a[r] = a[r], a[l]\n    return str(len(a))\n\nassert(solution(stdin) == '3')\n\n\"\"\"\n\nimport sys\n\ndef",
        "num_ids": 176
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = int(stdin.readline())\n    \n    while q:\n        n, a, b = map(int, stdin.readline().split())\n        ans = min(a, b) * n\n        print(ans)\n        q -= 1\n    return stdin",
        "num_ids": 79
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    X = [map(int, stdin.readline().strip().split()) for i in range(N)]\n    ans = []\n    for x in X:\n        X = min(x[0], x[1])\n        ans.append(X)\n    return \" \".join(map(str, ans))",
        "num_ids": 87
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    price = [1, 2]\n    result = []\n    for i in range(1, n):\n        price.append(int(stdin.readline()))\n    price.sort()\n    for i in range(0, n):\n        result.append(price[i] * price[i + 1])\n    print(\"\\n\".join(str(i) for i in result))",
        "num_ids": 104
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = []\n    for _ in range(n):\n        a, b, n = map(int, stdin.readline().split())\n        q.append((a * b, a, b))\n    q.sort()\n    for i in range(n):\n        print(q[i][0])\n    return ''",
        "num_ids": 89
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    queries = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    # res = [None] * n\n    # res[0] = min(queries[0][0] * queries[0][1], queries[0][0] * queries[0][2], queries[0][2] * queries[0][1])\n    # res[1] = min(queries[1][0] * queries[1][1], queries[1][0] * queries[1][2], queries[1][2] * queries[1][1])\n    # res[2] = min(queries[2][0] * queries[2][1], queries[2][0] * queries[2][2], queries[2][2] * queries[2][1])\n    # res[3] = min(queries[3][0] * queries[3][1], queries[3][0] * queries[3][2], queries[3][2] * queries[3][1])\n    # return''.join(map(str, res))\n    return''.join(map(str, [min(queries[i][0] * queries[i][1], queries[i][0] * queries[i][2], queries[i][2] * queries[i][1]) for i in range(n)]))\n",
        "num_ids": 327
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n@pytest.mark.parametrize(\n    ('input_s', 'expected'),\n    (\n        # ('4', '1\\n10\\n7\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\",
        "num_ids": 1552
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    queries = [tuple(map(int, stdin.readline().split())) for _ in range(q)]\n    results = []\n\n    for n, a, b in queries:\n        results.append(min(n, a, b))\n\n    return '\\n'.join(map(str, results))\n\nassert solution('''4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n''') == '10\\n9\\n1000\\n42000000000000\\n'\n\nassert solution('''1\n1 1 1\n1 1 1\n1 1 1\n''') == '1\\n1\\n1\\n1\\n'\n\nassert solution('''1\n1 2 3\n10 10 10\n10 10 10\n''') == '1\\n10\\n10\\n10\\n'\n\nassert solution('''1\n1 2 3\n10 10 10\n10 10 10\n2 4 6\n10 10 10\n10 10 10\n''') == '1\\n10\\n10\\n10\\n10\\n'\n\nassert solution('''1\n1 2 3\n1 2 3\n1 2 3\n''') == '1\\n1\\n1\\n1\\n'\n\nassert solution('''1\n1 1 1\n1 1 1\n1 1 1\n''') == '1\\n1\\n1\\n1\\n'\n\nassert solution('''1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1",
        "num_ids": 1552
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.readlines()\n    return str(data)",
        "num_ids": 17
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find(x: int) -> int:\n        if x < p[x]:\n            return find(p[x])\n        return p[x]\n    for _ in range(int(stdin.readline())):\n        p = [0] * (int(stdin.readline()) + 1)\n        for _ in range(int(stdin.readline())):\n            n, a, b = map(int, stdin.readline().split())\n            p[n] = find(n)\n            if p[n] > a:\n                p[n] = a\n            if p[n] > b:\n                p[n] = b\n        n, a, b = map(int, stdin.readline().split())\n        print(p[n])\n    return stdin.readline()\n\n\n\nsolution(\"\"\"4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\"\"\")\n",
        "num_ids": 223
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ...",
        "num_ids": 3
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.strip().split())\n\n    ball = [int(i) for i in stdin.strip().split()]\n    s = 0\n    for i in range(n):\n        s += ball[i]\n        if s <= x:\n            continue\n        else:\n            s = ball[i]\n\n    return s\n\nprint(solution(input()))",
        "num_ids": 95
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    N, X = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    \n    c = 1\n    for i in range(N):\n        l[i] += c\n        c = l[i]\n    \n    cnt = 0\n    for x in l:\n        if x <= X:\n            cnt += 1\n    \n    return cnt\n\nimport sys\n",
        "num_ids": 116
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''The ball will make a bounce at the coordinates 0, 3, 7, 12, among which two are less than or equal to 6.\n\n    >>> solution('3 6')\n    2\n\n    >>> solution('3 4 5')\n    2\n\n    >>> solution('3 5 4')\n    1\n\n    >>> solution('3 5 2')\n    2\n\n    >>> solution('5 6 3')\n    3\n\n    >>> solution('3 3 3')\n    2\n\n    >>> solution('3 1 4')\n    2\n\n    >>> solution('3 2 4')\n    1\n\n    >>> solution('2 2 2')\n    1\n\n    >>> solution('3 3 3')\n    2\n\n    '''\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    total = 0\n    cur = 0\n    for _ in range(n):\n        if l[cur] <= x:\n            total += 1\n        else:\n            cur += 1\n    return total\n",
        "num_ids": 234
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split(' ')]\n    L = [int(x) for x in stdin.split(' ')]\n    c = 0\n    for i in range(1, N + 1):\n        if L[i - 1] <= X:\n            c += 1\n    return str(c)",
        "num_ids": 82
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = stdin.strip().split(' ')\n    n, x = int(n), int(x)\n    L = [int(stdin.strip()) for _ in range(n)]\n    l = len(L)\n    result = 0\n    for i in range(l - 1, -1, -1):\n        if L[i] + i <= x:\n            result += 1\n        else:\n            break\n\n    return str(result)",
        "num_ids": 109
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    L = [int(x) for x in stdin.split()]\n    return solve(N, D, L)\n\ndef",
        "num_ids": 52
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    L = list(map(int, stdin.split()))\n    # print(L)\n    L.sort(reverse=True)\n    # print(L)\n    count = 0\n    i = 0\n    while i < N:\n        if (L[i] <= X):\n            count += 1\n        i += 1\n    return count\n\nprint(solution(input()))\n",
        "num_ids": 111
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = map(int, stdin.split())\n    t = 0\n    for i in range(n):\n        t += (x - arr[i]) / arr[i]\n    return str(t)",
        "num_ids": 65
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L = [int(x) for x in stdin.split()]\n    bounces = 0\n    i = 0\n    while i < N and L[i] <= X:\n        i += 1\n        L[i - 1] += L[i - 1]\n        bounces += 1\n    return str(bounces)\n\nprint(solution(stdin))",
        "num_ids": 102
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    takahashi = [stdin.readline().strip() for _ in range(n)]\n    \n    for word in stdin:\n        print('Yes' if verify(word) else 'No')\n    return ''\n\ndef",
        "num_ids": 73
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(stdin))\n",
        "num_ids": 19
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip().split()\n    for i in range(1, len(a)):\n        if len(a[i]) > 1:\n            if a[i][0]!= a[i - 1][-1]:\n                print('No')\n                return\n    print('Yes')\n    return",
        "num_ids": 92
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    words = [stdin[i + 1] for i in range(N)]\n    return 'Yes' if all(shiritori(word) for word in words) else 'No'\n\n\ndef",
        "num_ids": 71
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.splitlines()[0]\n    N = int(N)\n    N_l = []\n    for i in range(N):\n        W_i = stdin.splitlines()[i+1]\n        N_l.append(W_i)\n    ans = 'Yes'\n    for w in N_l:\n        if w[0]!= w[-1]:\n            ans = 'No'\n    return ans",
        "num_ids": 107
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    for _ in range(int(n)):\n        word = stdin[1]\n        if is_shiritori_word(word):\n            stdin = stdin[2:]\n        else:\n            return \"No\"\n\n    return \"Yes\"\n\ndef",
        "num_ids": 73
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n\n    N = int(stdin.readline())\n    queries = [stdin.readline().strip() for _ in range(N)]\n    queries = deque(queries)\n\n    words = [stdin.readline().strip() for _ in range(N)]\n    words = deque(words)\n\n    if N == 0:\n        return \"Yes\"\n\n    N -= 1\n\n    while queries:\n        word = queries.popleft()\n        if not word in words:\n            return \"No\"\n        \n        queries.append(word)\n        words.pop()\n\n    return \"Yes\"\n\ndef",
        "num_ids": 153
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = [stdin.readline().strip() for _ in range(n)]\n    c = 0\n    for i in range(n):\n        c = c + 1 if w[i][0] == w[i-1][-1] else c\n    return 'Yes' if c == n else 'No'",
        "num_ids": 88
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if all(TakahashiWord(stdin) == 'No' for _ in range(int(stdin))) else 'No'\n\ndef",
        "num_ids": 39
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(min(A, B) * 6)",
        "num_ids": 34
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.strip().split()]\n    return str(min(a, b) * 6)",
        "num_ids": 36
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # The first line contains the number of testcases T. \n    # The next T line(s) contains a single line with the number of guests A and B respectively.\n    # Each line after that contains A and B separated by a space.\n    # The guest with more pieces is guaranteed to win the game.\n    n, m = [int(x) for x in stdin.split()]\n    # Get A and B.\n    a, b = [int(x) for x in stdin.split()]\n\n    # For each of the testcases, we first check if A can win the game. \n    # If so, we can distribute the same number of snack pieces in both cases, and we don't need to check the rest of the conditions.\n    if a > b:\n        return str(a) + \" \" + str(b)\n    # If B can win the game, we need to distribute the same number of pieces in both cases, and we do not need to check the rest of the conditions.\n    elif a < b:\n        return str(b) + \" \" + str(a)\n    # If neither of the above situations occur, we need to check how many pieces the guest with more pieces can take.\n    else:\n        # Since the number of pieces is A - B, we can distribute A - B pieces for both cases, and since there are only two guests, it is possible to distribute the same amount of pieces.\n        return str(a - b) + \" \" + str(b)\n\nprint(solution(input()))",
        "num_ids": 352
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(x) for x in stdin.strip().split())\n    return str(int((A * B) / 2))",
        "num_ids": 35
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(a * (b % 2) + b * (a % 2))",
        "num_ids": 41
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_guests, b_guests = list(map(int, stdin.split(' ')))\n\n    if a_guests == b_guests:\n        return \"{0}\".format(2 * a_guests)\n\n    if a_guests < b_guests:\n        return \"{0}\".format(2 * a_guests)\n\n    return \"{0}\".format(2 * b_guests)",
        "num_ids": 99
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    print(A * 2 * B)\n    return \"\"",
        "num_ids": 31
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(min(a*b, a, b))",
        "num_ids": 35
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(' '))\n    return str(int(A*(B/2)) + int(B*(A/2)))",
        "num_ids": 43
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    return str(min(A*2, B*3))",
        "num_ids": 35
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    #return stdin.replace('s', 'x')\n    s = stdin.split()\n    return \"\".join(s)",
        "num_ids": 39
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(lambda c: 'x' if c =='s' else c, stdin))",
        "num_ids": 27
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Replaces every character in a string with a new character\n    \"\"\"\n    return stdin.replace(stdin[0], \"x\")\n\nprint(solution(input()))\n",
        "num_ids": 46
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    print(''.join(['x' if s[i] =='s' else s[i] for i in range(len(s))]))\n",
        "num_ids": 45
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(''.join([x for x in stdin]))\n    # return ''.join([x for x in stdin])\n",
        "num_ids": 31
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return",
        "num_ids": 10
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"s\", \"x\").replace(\"d\", \"x\").replace(\"e\", \"x\")",
        "num_ids": 27
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(\"\".join([\"x\" for _ in stdin]))",
        "num_ids": 17
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin.replace(stdin[0], \"x\"))",
        "num_ids": 20
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('z', 'x')",
        "num_ids": 13
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    stack = []\n    for i in range(len(h)):\n        while stack and stack[-1][1] > h[i]:\n            index, value = stack.pop()\n            h[index] = value - 1\n        stack.append((i, h[i]))\n    return \"Yes\" if stack == sorted(stack, key=lambda x: x[1]) else \"No\"",
        "num_ids": 126
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n = int(lines[0])\n    heights = [int(x) for x in lines[1].split(' ')]\n\n    heights.sort()\n\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            return \"No\"\n    return \"Yes\"\n\n\ndef",
        "num_ids": 90
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input data and split it into a list of integers\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n\n    # Sort the array\n    arr.sort()\n    # Get the max height\n    max_height = max(arr)\n    # Get the sum of the non-decreasing heights\n    sum_of_h = sum(arr[1:])\n    # If the sum is less than the max height, then we can do the work\n    if sum_of_h < max_height:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 158
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().strip().split()]\n\n    stack = []\n\n    for i in range(1, len(h)):\n        if len(stack) == 0:\n            stack.append((i, h[i]))\n        else:\n            j, k = stack[-1]\n            if h[i] > k:\n                if i == len(h) - 1:\n                    return \"Yes\"\n                else:\n                    stack.append((i, h[i]))\n            else:\n                stack.append((i, h[i]))\n                while len(stack) > 0 and stack[-1][1] <= h[i]:\n                    stack.pop()\n                if len(stack) == 0:\n                    return \"No\"\n                else:\n                    j, k = stack[-1]\n                    stack.append((j, h[j]))\n\n    return \"Yes\"",
        "num_ids": 232
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    heights = stdin.readline().strip().split(' ')\n    heights = [int(h) for h in heights]\n    for i in range(N):\n        if heights[i] < heights[i + 1]:\n            continue\n        for j in range(i + 1, N):\n            if heights[j] < heights[i]:\n                break\n            if heights[j] > heights[i]:\n                return 'No'\n    return 'Yes'",
        "num_ids": 124
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    height_array = [int(num) for num in stdin.split(\" \")]\n\n    # First check if it is possible\n    if height_array == sorted(height_array):\n        return \"Yes\"\n\n    # Now we have to check if we can decrease all the heights by 1\n    for height in range(len(height_array)):\n        if height_array[height] < height_array[height - 1]:\n            for num in range(len(height_array)):\n                if height_array[num] > height_array[num] - 1:\n                    height_array[num] -= 1\n            break\n    if height_array == sorted(height_array):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 173
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    if h == sorted(h):\n        return 'Yes'\n    return 'No'",
        "num_ids": 101
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    H = list(map(int, stdin.readline().split()))\n    decreasing = True\n    for i in range(N - 1):\n        if H[i] >= H[i + 1]:\n            decreasing = False\n            break\n    return \"Yes\" if decreasing else \"No\"",
        "num_ids": 85
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    N = int(stdin.readline())\n    H = tuple(int(x) for x in stdin.readline().split(' '))\n\n    # check if it is possible\n    flag = True\n    for i in range(1, len(H)):\n        if H[i-1] > H[i]:\n            flag = False\n\n    # return answer\n    if flag:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 113
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    h = [int(stdin[i]) for i in range(1, n + 1)]\n    return \"Yes\" if h == sorted(h) else \"No\"\n\nassert solution(input()) == \"Yes\"\n\n\"\"\"\n",
        "num_ids": 66
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()[1:1 + M]]\n    B = [int(x) for x in stdin.split()[1 + M:]]\n    C = int(stdin.split()[0])\n    cnt = 0\n    for i in range(N):\n        if A[i] * B[i] + A[i + 1] * B[i + 1] + A[i + 2] * B[i + 2] + C > 0:\n            cnt += 1\n    return str(cnt)",
        "num_ids": 155
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split(\" \")]\n    b = [int(s) for s in stdin.split(\" \")]\n    a = [[int(s) for s in stdin.split(\" \")] for _ in range(n)]\n    t = [0] * n\n    for i in range(n):\n        for j in range(n):\n            t[i] += a[j][i] * b[j]\n    for i in range(n):\n        if t[i] > 0:\n            print(1)\n            return\n    print(0)\n    return",
        "num_ids": 148
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1'",
        "num_ids": 6
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    lines = [map(int, line.split()) for line in stdin.splitlines()]\n    A = [A_i for A_i, *_ in lines]\n    B = [B_i for _, B_i, *_ in lines]\n    B = [sum(A_i) for A_i in zip(A, B)]\n    return str(len([b for b in B if b >= C]))",
        "num_ids": 118
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m, c = [int(x) for x in stdin[0].split()]\n    b = [int(x) for x in stdin[1].split()]\n    a = [[int(x) for x in stdin[i].split()] for i in range(2, len(stdin))]\n    result = 0\n    for row in a:\n        if all(x >= 0 for x in row):\n            if sum(x * b[i] for i, x in enumerate(row)) + c > 0:\n                result += 1\n    return result",
        "num_ids": 150
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass",
        "num_ids": 10
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\nN, M, C = [int(x) for x in sys.stdin.readline().split()]\n\nA = []\nB = []\nfor i in range(N):\n    A.append([int(x) for x in sys.stdin.readline().split()])\n    B.append([int(x) for x in sys.stdin.readline().split()])\n\nmaxA = [max(x) for x in A]\nmaxB = [max(x) for x in B]\n\nAB = [a * b for a, b in zip(maxA, maxB)]\ncount = 0\nfor x in AB:\n    if x > 0:\n        count += 1\n\nprint(count)\n",
        "num_ids": 180
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    N = int(data[0].split()[0])\n    M = int(data[0].split()[1])\n    B = [int(x) for x in data[1].split()]\n    A = [int(x) for x in data[2].split()]\n    C = int(data[3])\n    cnt = 0\n    for i in range(N):\n        sum = 0\n        for j in range(M):\n            sum += A[j] * B[j]\n        if sum + C > 0:\n            cnt += 1\n    return str(cnt)",
        "num_ids": 153
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    array = [list(map(int, stdin.split())) for _ in range(n)]\n    matrix = [list(map(lambda x: 1 if x > 0 else 0, row)) for row in array]\n    return '\\n'.join(map(str, sum(matrix, [])))",
        "num_ids": 87
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    N = int(stdin)\n    \n    change = N // 1000\n    remainder = N % 1000\n    \n    if remainder == 0:\n        print(change)\n    elif remainder < 500:\n        print(change, \"500 yen\")\n    else:\n        change += 1\n        change2 = change // 500\n        change3 = change % 500\n        print(change2, \"500 yen\", change3, \"yen\")\n    return\n",
        "num_ids": 113
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The minimum number of bills we use is 1000-yen to pay the price.\n    If we use 1000-yen, we will receive 100 yen in change.\n    We can use 100 yen to pay the price and receive 0 change.\n    '''\n    n = int(stdin)\n    return str(n // 1000 - 1)\n\nassert solution('1800') == '-1'\nassert solution('2000') == '0'\nassert solution('2050') == '1'\nassert solution('2100') == '2'\nassert solution('2500') == '3'\nassert solution('2999') == '4'\nassert solution('3000') == '5'\nassert solution('3100') == '6'\nassert solution('3500') == '7'\nassert solution('3900') == '8'\nassert solution('4000') == '9'\nassert solution('4100') == '10'\nassert solution('4300') == '11'\nassert solution('4500') == '12'\nassert solution('4550') == '13'\nassert solution('4900') == '14'\nassert solution('5000') == '15'\nassert solution('5050') == '16'\nassert solution('5100') == '17'\nassert solution('5400') == '18'\nassert solution('5800') == '19'\nassert solution('6000') == '20'\nassert solution('6400') == '21'\nassert solution('6800') == '22'\nassert solution('7000') == '23'\nassert solution('7250') == '24'\nassert solution('7600') == '25'\nassert solution('8000') == '26'\nassert solution('8250') == '27'\nassert solution('8600') == '28'\nassert solution('8500') == '29'\nassert solution('9000') == '30'\nassert solution('9500') == '31'\nassert solution('9900') == '32'\nassert solution('10100') == '33'\nassert solution('10450') == '34'\nassert solution('10850') == '35'\nassert solution('11100') == '36'\nassert solution('11550') == '37'\nassert solution('11900') == '38'\nassert solution('12250') == '39'\nassert solution('12750') == '40'\nassert solution('13000') == '41'\nassert solution('13250') == '42'\nassert solution('13750') == '43'\nassert solution('14000') == '44'\nassert solution('14250') == '45'\nassert solution('14750') == '46'\nassert solution('15000') == '47'\nassert solution('15250') == '48'\nassert solution('15750') == '49'\nassert solution('16000') == '50'\nassert solution('16250') == '51'\nassert solution('16750') == '52'\nassert solution('17000') == '53'\nassert solution('17250') == '54'\nassert solution('17750') == '55'\nassert solution('18000') == '56'\nassert solution('18250') == '57'\nassert solution('18750') == '58'\nassert solution('19000') == '59'\nassert solution('19250') == '60'\nassert solution('19750') == '61'\nassert solution('20000') == '62'\nassert solution('20250') == '63'\nassert solution('20750') == '64'\nassert solution('21000') == '65'\nassert solution('21250') == '66'\nassert solution('21750') == '67'\nassert solution('22000') == '68'\nassert solution('22250') == '69'\nassert solution('22750') == '70'\nassert solution('23000') == '71'\nassert solution('23250') == '72'\nassert solution('23750') == '73'\nassert solution('24000') == '74'\nassert solution('24250') == '75'\nassert solution('24750') == '76'\nassert solution('25000') == '77'\nassert solution('25250') == '78'\nassert solution('25750') == '79'\nassert solution('26000') == '80'\nassert solution('26250') == '81'\nassert solution('26750') == '82'\nassert solution('27000') == '83'\nassert solution('27250') == '84'\nassert solution('27750') == '85'\nassert solution('28000') == '86'\nassert solution('28250') == '87'\nassert solution('28750') == '88'\nassert solution('29000') == '89'\nassert solution('29250') == '90'\nassert solution('29750') == '91'\nassert solution('30000') == '92'\nassert solution('30250') == '93'\nassert solution('30750') == '94'\nassert solution('31000') == '95'\nassert solution('31250') == '96'\nassert solution('31750') == '97'\nassert solution('32000') == '98'\nassert solution('32200') == '99'\nassert solution('32500') == '100'\n",
        "num_ids": 1198
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = x // 1000\n    return str(y)",
        "num_ids": 23
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_bills = int(stdin)\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n    for bill in bills:\n        if bill <= number_of_bills:\n            change += number_of_bills // bill\n            number_of_bills %= bill\n    return str(change)",
        "num_ids": 88
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    return str(change_needed(N))\n\n\ndef",
        "num_ids": 25
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Receive an amount of money and return the minimum number of bills we can use to pay this money\n    with the minimum number of bills.\n\n    >>> solution('13')\n    0\n    >>> solution('10')\n    1\n    >>> solution('100')\n    1\n    >>> solution('1000')\n    2\n    >>> solution('100000')\n    4\n    >>> solution('1000000')\n    6\n    >>> solution('10000000')\n    8\n    >>> solution('100000000')\n    10\n    >>> solution('1000000000000000000')\n    10\n    >>> solution('100000000000000000001')\n    13\n    \"\"\"\n    return \"No answer\"\n",
        "num_ids": 153
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    result = ''\n    if n >= 100:\n        result += '100'\n        n -= 100\n    while n >= 50:\n        result += '50'\n        n -= 50\n    while n >= 20:\n        result += '20'\n        n -= 20\n    while n >= 10:\n        result += '10'\n        n -= 10\n    while n >= 5:\n        result += '5'\n        n -= 5\n    while n >= 2:\n        result += '2'\n        n -= 2\n    while n >= 1:\n        result += '1'\n        n -= 1\n    return result\n\nprint(solution(input()))",
        "num_ids": 174
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = n // 1000\n    n %= 1000\n    c = n // 100\n    n %= 100\n    l = n // 50\n    n %= 50\n    k = n // 10\n    n %= 10\n    return str(d + c + l + k)",
        "num_ids": 74
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A_1, A_2 = [int(x) for x in stdin.readline().split()]\n\n    def helper(idx: int, monsters: int, monsters_killed: int) -> int:\n        if idx == N:\n            return monsters\n        monsters_killed += A_1 * monsters\n        monsters_killed = min(monsters_killed, A_2)\n        return helper(idx + 1, monsters + 1, monsters_killed)\n\n    return helper(1, 1, 1)",
        "num_ids": 133
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_monster_count(towns: list) -> int:\n        return sum(1 for monster in towns[1:])\n\n    N = int(stdin.readline().strip())\n    A = [int(v) for v in stdin.readline().strip().split()]\n    B = [int(v) for v in stdin.readline().strip().split()]\n\n    return str(get_monster_count(A) + get_monster_count(B) - get_monster_count(zip(A, B)))\n\nprint(solution(stdin))\n",
        "num_ids": 137
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A, B = map(int, stdin.splitlines())\n    return max(sum(max(0, A[i] - A[j]) for j in range(i + 1, i + N)) for i in range(N))",
        "num_ids": 59
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split(' ')))\n    B = list(map(int, stdin.readline().strip().split(' ')))\n    monsters = 0\n    for i in range(1, N+1):\n        monsters += min(A[i-1], B[i-1])\n        A[i] -= min(A[i-1], B[i-1])\n        B[i] -= min(A[i-1], B[i-1])\n    return str(monsters)",
        "num_ids": 146
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *A_B = stdin.strip().split(' ')\n    N, *A_B = map(int, A_B)\n    return str(sum(map(int, itertools.accumulate(A_B))))",
        "num_ids": 58
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    a = [0] + a\n    b = [0] + b\n\n    ans = 0\n    for i in range(1, n+1):\n        ans = max(ans, max(a[i] - a[i-1] + b[i] - b[i-1], a[i] - b[i] + b[i-1] - a[i-1]))\n    return str(ans)\n\n\nassert (solution('''2\n3 5 2\n4 5''')) == '9'\nassert (solution('''1\n3 5 2\n4 5''')) == '0'\nassert (solution('''5\n3 1 4 3 1\n2 3 5 2\n2 3 3 1\n2 3 1 3\n3 1 2 3''')) == '6'\n",
        "num_ids": 240
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    \n    if B[0] > A[0]:\n        A, B = B, A\n    \n    max_m = sum(B)\n    for i in range(1, N):\n        if max_m < sum(B[:i+1]):\n            max_m = sum(B[:i+1])\n            \n    return max_m\n\nprint(solution(stdin.read()))\n",
        "num_ids": 158
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split(' ')[1:]]\n    B = [int(x) for x in stdin.split(' ')[3:]]\n    result = 0\n    for i in range(N+1):\n        hero = i\n        monsters = 0\n        while monsters <= B[hero-1]:\n            monsters += A[hero-1]\n            hero += 1\n        result = max(result, heroes)\n    return str(result)\n\ndef",
        "num_ids": 127
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *A, B = list(map(int, stdin.split(\"\\n\")[0].split()))\n    towns = []\n    monsters = []\n    for i in range(1, N + 1):\n        towns.append(int(stdin.split(\"\\n\")[i]))\n    for i in range(N):\n        monsters.append(list(map(int, stdin.split(\"\\n\")[N + i + 1].split())))\n    ans = 0\n    for i in range(2 ** N):\n        coop = [[] for _ in range(N + 1)]\n        for j in range(N):\n            if i >> j & 1:\n                for monster in monsters[j]:\n                    coop[monster].append(towns[j])\n        for j in range(N):\n            if j + 1 < N:\n                for monster in monsters[j]:\n                    if monster + 1 < towns[j + 1]:\n                        for coop_town in coop[towns[j + 1]]:\n                            if monster + 1 < coop_town:\n                                break\n                        else:\n                            ans = max(ans, 1 + len(coop[towns[j + 1]]))\n            if j > 0:\n                for monster in monsters[j]:\n                    if monster + 1 < towns[j - 1]:\n                        for coop_town in coop[towns[j - 1]]:\n                            if monster + 1 < coop_town:\n                                break\n                        else:\n                            ans = max(ans, 1 + len(coop[towns[j - 1]]))\n    return str(ans)\n\nprint(solution(stdin.read()))\n",
        "num_ids": 400
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(x) for x in stdin.strip().split()]\n    if N > M:\n        X, Y, M, N = Y, X, M, N\n    if N == 1:\n        return \"No War\"\n    return \"War\"",
        "num_ids": 70
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(i) for i in stdin.split()]\n    assert 1 <= n <= 100\n    assert 1 <= m <= 100\n    assert -100 <= x < y <= 100\n    assert -100 <= y < x\n    assert all(x!= i for i in [x, y])\n    assert all(y!= i for i in [x, y])\n    z = (x + y) // 2\n    return \"War\" if x < z <= y else \"No War\"",
        "num_ids": 122
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split(\" \"))\n    if x < y and min(x, y) < m:\n        return \"No War\"\n    elif x > y and max(x, y) > n:\n        return \"No War\"\n    else:\n        return \"War\"",
        "num_ids": 78
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = list(map(int, stdin.split()))\n    if abs(x - y) > n:\n        return \"No War\"\n    return \"War\"",
        "num_ids": 47
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    A, B, x, y = data[0:4]\n    A_cities, B_cities = data[4:6]\n    return \"No War\" if A_cities * B_cities >= (A - x) * (B - y) else \"War\"",
        "num_ids": 83
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    if x > y:\n        x, y = y, x\n    if x + y < x * y:\n        return \"No War\"\n    return \"War\"",
        "num_ids": 59
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    if X < Z <= Y:\n        return \"War\"\n    else:\n        return \"No War\"",
        "num_ids": 45
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M = [int(x) for x in lines[0].split()]\n    X, Y = [int(x) for x in lines[1].split()]\n    x = [int(x) for x in lines[2].split()]\n    y = [int(x) for x in lines[3].split()]\n    if (min(x) > X) or (max(x) < X) or (min(y) > Y) or (max(y) < Y):\n        return \"No War\"\n    else:\n        solution = \"War\"\n    return solution",
        "num_ids": 151
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.splitlines()\n    n, m, x, y = [int(r) for r in rows[0].split()]\n    a = [int(r) for r in rows[1].split()]\n    b = [int(r) for r in rows[2].split()]\n    return 'War' if (x < y and x < max(a) and max(a) < y) else 'No War'\n\nprint(solution(stdin))\n",
        "num_ids": 115
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"No War\" if X >= Z else \"War\"\n\nassert solution(stdin) == stdout\n",
        "num_ids": 27
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(i) for i in stdin.split()]\n    \n    N = inputs[0]\n    T = inputs[1]\n    T_1 = inputs[2:]\n    \n    time = 0\n    for i in range(N):\n        time += T_1[i]\n    return time\n\nprint(solution(input()))\n",
        "num_ids": 88
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = [int(stdin.split()[i]) for i in range(1, n + 1)]\n    total_time = sum(times)\n    return str(total_time)",
        "num_ids": 59
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = list(map(int, stdin.readline().strip().split(' ')))\n    total = 0\n    for i in range(1, n):\n        total += t[i] % 360\n    return str(total)\n",
        "num_ids": 70
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.rstrip(\"\\n\")\n    N = int(N)\n    T = [int(t) for t in stdin.rstrip(\"\\n\").split(\" \")]\n    t = 0\n    for i in range(N):\n        t = t + T[i]\n    return str(t)\n",
        "num_ids": 78
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rotations = [0] * n\n    for i in range(n):\n        rotations[i] = int(stdin)\n    rotations.sort()\n    rotations.reverse()\n    time = 0\n    for i in range(n):\n        time += rotations[i] * 360\n    return str(time)",
        "num_ids": 87
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip().split('\\n')[0]\n    n = stdin.strip().split('\\n')[1].split(' ')\n    n = [int(x) for x in n]\n    return str(sum(x // (x % n[0]) for x in n) * n[0])\n    ",
        "num_ids": 80
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    times = [int(stdin.readline()) for _ in range(n)]\n\n    clock_pointer = [1] * n\n    hand = [1] * n\n\n    # Bubble sort the hand of each clock\n    for _ in range(n):\n        for j in range(n - 1):\n            if hand[j] > hand[j + 1]:\n                hand[j], hand[j + 1] = hand[j + 1], hand[j]\n                clock_pointer[j], clock_pointer[j + 1] = clock_pointer[j + 1], clock_pointer[j]\n\n    # Get the index of the maximum hand\n    max_hand_index = 0\n    for i in range(n):\n        if hand[i] > hand[max_hand_index]:\n            max_hand_index = i\n\n    # Get the clock time\n    time_required = 0\n    for i in range(max_hand_index, -1, -1):\n        time_required += clock_pointer[i] * times[i]\n\n    return str(time_required)\n\nassert(solution(open(\"test_case_input.txt\", \"r\")) == \"6\")\nprint(solution(open(\"input.txt\", \"r\")))\n",
        "num_ids": 303
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    times = [int(stdin.readline().strip()) for _ in range(n)]\n    # Sort times\n    times.sort()\n    # Max time\n    max_time = max(times)\n    # Sum of max_time\n    total = sum(times)\n    # 1 - total\n    ans = total - max_time\n    return str(ans)\n\nprint(solution(input()))\n",
        "num_ids": 111
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    T = [int(stdin[i]) for i in range(1, N + 1)]\n    return str(len(T) * sum(T))",
        "num_ids": 46
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    times = [int(x) for x in stdin.readline().strip().split(\" \")]\n    return \" \".join(str(x) for x in map(lambda x: x * 2, times))\n\nassert(solution(input)) == input\n",
        "num_ids": 75
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(w) for w in stdin.split()]\n    weights.sort()\n    w1, w2 = weights[:n-1], weights[n-1:]\n    s1, s2 = sum(w1), sum(w2)\n    return abs(s1 - s2)\n\ndef",
        "num_ids": 86
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = [int(x) for x in stdin.readline().strip().split()]\n    w.sort()\n    mw = sum(w[:-1])\n    mw_1 = sum(w[1:])\n    return str(abs(mw - mw_1))",
        "num_ids": 84
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = list(map(int, stdin.readline().split()))\n\n    s1 = sum(w[:n])\n    s2 = sum(w[n:])\n\n    return str(abs(s1-s2))\n\nprint(solution(stdin))\n",
        "num_ids": 81
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    weights = list(map(int, stdin.split(' ')))\n    print(min(abs(sum(weights[0:2]) - sum(weights[2:]))\n\n\"\"\"\n\ndef",
        "num_ids": 51
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split(' ')]\n\n    part1 = weights[0]\n    part2 = weights[-1]\n\n    for i in range(1, N):\n        part1 += weights[i]\n        part2 -= weights[i]\n\n    return str(abs(part1 - part2))\n\n\ndef",
        "num_ids": 98
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    W = list(map(int, stdin.readline().strip().split(\" \")))\n    W.sort()\n    S_1 = sum(W[:N])\n    S_2 = sum(W[N:])\n    return str(abs(S_1 - S_2))\n\nprint(solution(\"\"))\n\"\"\"\n\n\"\"\"\nTest case 1\n\nInput\n3\n1 2 3\n\nOutput\n0\n\nTest case 2\n\nInput\n5\n1 2 3 4 5\n\nOutput\n0\n\nTest case 3\n\nInput\n7\n1 2 3 4 5 6 7\n\nOutput\n0\n\"\"\"\n\n\"\"\"\n---SOLUTION---\n\ndef",
        "num_ids": 172
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    weights = [int(weight) for weight in stdin.split(\" \")]\n    weights.sort()\n    s1, s2 = [], []\n    for weight in weights:\n        if len(s1) == 0 or weight > s1[-1]:\n            s1.append(weight)\n        else:\n            s2.append(weight)\n    return str(abs(sum(s1) - sum(s2)))\n",
        "num_ids": 125
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    w = list(map(int, stdin.readline().strip().split()))\n    w.sort()\n    w1 = w[:N - 1]\n    w2 = w[N - 1:]\n    l1 = len(w1)\n    l2 = len(w2)\n    S_1 = sum(w1)\n    S_2 = sum(w2)\n    w1.sort()\n    w2.sort()\n    for i in range(l1):\n        w1[i] = w1[i] * (l1 - i)\n    for i in range(l2):\n        w2[i] = w2[i] * (l2 - i)\n    t = l1 + l2\n    if t % 2 == 1:\n        return abs(S_1 - S_2)\n    else:\n        return min(abs(S_1 - S_2), abs(S_1 - S_2 + t // 2))\n\n\ndef",
        "num_ids": 245
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = [int(x) for x in stdin.readline().split()]\n\n    l, r = 1, sum(w)\n    while l < r:\n        m = (l + r) // 2\n        flag = True\n        for x in w:\n            if x > m:\n                flag = False\n                break\n        if flag:\n            r = m\n        else:\n            l = m + 1\n    return f'{l - sum(w)}'",
        "num_ids": 124
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = list(map(int, stdin.readline().strip().split()))\n\n    min_diff = abs(sum(w[:n]) - sum(w[n:]))\n    for t in range(1, n):\n        s1 = sum(w[:t])\n        s2 = sum(w[t:])\n        min_diff = min(min_diff, abs(s1 - s2))\n    return str(min_diff)",
        "num_ids": 122
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in stdin.split()][1:])\n    for _ in range(m):\n        for i in range(1, n):\n            a[i][0], a[i][m - 1] = a[i][m - 1], a[i][0]\n        for j in range(n - 2, 0, -1):\n            a[0][j], a[n - 1][j] = a[n - 1][j], a[0][j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= i * m + j + 1:\n                ans += 1\n    return str(ans)",
        "num_ids": 208
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    matrix = [[int(j) for j in stdin.split(' ')] for i in range(n)]\n    def get_matrix(matrix):\n        for row in matrix:\n            yield row\n    row_matrix = list(get_matrix(matrix))\n    \n    for _ in range(m):\n        last_row = row_matrix[-1]\n        row_matrix[0] = last_row[1:]\n        row_matrix[-1] = last_row[:-1]\n    \n    return '\\n'.join(str(sum(row)) for row in row_matrix)\n\"\"\"\n",
        "num_ids": 175
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [[int(c) for c in line.strip().split(' ')] for line in stdin.strip().split('\\n')]\n    return str(solution_a(matrix))\n\ndef",
        "num_ids": 51
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    matrix[1][1] = 1\n    for i in range(1, n):\n        for j in range(1, m):\n            matrix[i][j] = min(matrix[i - 1][j], matrix[i][j - 1]) + 1\n    return str(matrix[n - 1][m - 1])\n\n\n>>> solution('''3 3\n3 2 1\n1 2 3\n4 5 6''')\n'6'\n>>> solution('''4 3\n1 6 3 4\n5 10 7 8\n9 2 11 12''')\n'0'\n>>> solution('''3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12''')\n'2'\n\n'''\n\nfrom collections import deque\n\ndef",
        "num_ids": 219
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(rows)]\n    \n    min_steps = -1\n    \n    for k in range(1, columns):\n        for i in range(1, rows):\n            matrix[i][k] = (i - 1) * columns + k\n\n        for j in range(1, rows):\n            matrix[j][k] = (j - 1) * columns + k\n        \n        for j in range(1, rows):\n            for i in range(1, columns):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n                \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j - 1) * columns + i\n        \n        for j in range(1, columns):\n            for i in range(1, rows):\n                matrix[j][i] = (j -",
        "num_ids": 1155
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin.split()])\n    for _ in range(n):\n        for _ in range(m):\n            print(matrix[_][0], end=' ')\n        print()",
        "num_ids": 91
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    data = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    moves = 0\n    for line in data:\n        line.insert(0, 0)\n        line.append(0)\n    \n    while True:\n        same = True\n        for i in range(1, n):\n            for j in range(1, m):\n                if data[i][j]!= (i - 1) * m + j:\n                    same = False\n                    break\n        if same:\n            break\n        \n        for j in range(1, m):\n            temp = [[0] * m for _ in range(n)]\n            for i in range(n):\n                temp[i][j] = data[i][j]\n                data[i][j] = data[i][j + m]\n                data[i][j + m] = data[i][j]\n            moves += 1\n            \n    return str(moves)\n\nprint(solution(input()))\n",
        "num_ids": 257
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Test-----\n\n`pytest test_solution.py -s`\n\n\"\"\"\n\n\ndef",
        "num_ids": 28
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #return''.join([str(x) for x in range(1, int(stdin.split('\\n')[0]) + 1)])\n    stdin = stdin.split('\\n')[1]\n    stdin = list(map(int, stdin.split()))\n    if len(stdin) % 2 == 0:\n        return sum(stdin[::2])\n    else:\n        return sum(stdin[::2]) + stdin[-1]",
        "num_ids": 114
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = list(map(int, stdin.split()))\n    min_problems = (n - 1) * n // 2\n    return str(min_problems)",
        "num_ids": 52
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return '-1'\n    data = list(map(int, stdin.split()))\n    min_problems = 0\n    for i in range(n):\n        min_problems += data[i] - 1\n    return str(min_problems)",
        "num_ids": 81
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(str(n - int(n/2)))",
        "num_ids": 14
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = list(map(int, stdin[0].split(' ')))\n    return str(int(stdin[0] / 2) - int(stdin[0] / 4))\n\n\"\"\"",
        "num_ids": 62
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    print(n // 2)",
        "num_ids": 39
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n_author_ = 'jake'\n_project_ = 'leetcode'\nclass Solution:\n    def rest(self, n: int, a: List[int]) -> int:\n        count = 0\n        for i in range(n):\n            if a[i] == 0:\n                count += 1\n            elif count!= 0:\n                count -= 1\n        return count",
        "num_ids": 95
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\n\n-----Solutions----\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom functools import reduce\n\nn = int(stdin.readline())\ns = stdin.readline().split()\ns = list(map(int, s))\n\nh = reduce(lambda acc, x: (acc[0] * x, acc[1] + x), s, (0, 0))\n\nstdout.write(str(h[0]))",
        "num_ids": 111
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    rest = 0\n    for i in range(n):\n        if sequence[i] == 1:\n            rest += 1\n        else:\n            rest = 0\n        if rest > n:\n            return str(i)\n    return '0'\n\nprint(solution(input()))\n",
        "num_ids": 94
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(x) for x in stdin.strip().split()]\n    i = 0\n    best = 0\n    while i < len(numbers):\n        if numbers[i] == 0:\n            best += 1\n            i += 1\n        else:\n            break\n    while i < len(numbers):\n        if numbers[i] == 0:\n            best += 1\n        else:\n            break\n    return str(best)",
        "num_ids": 116
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''",
        "num_ids": 4
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    n = int(stdin.readline().strip())\n    a = map(int, stdin.readline().strip().split())\n    rest = max([sum(a[i:]) for i in range(n)])\n    return str(rest)",
        "num_ids": 66
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    rest = 0\n    for i in range(n):\n        if a[i] == 0:\n            rest += 1\n        else:\n            rest = 0\n    return str(rest)\n",
        "num_ids": 77
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        if a[i] == 1:\n            res = max(res, i + 1)\n    return str(res)\n\n\nprint(solution('''5\n1 0 1 0 1'''))\n",
        "num_ids": 94
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    fizzbuzz = []\n    if num == 1:\n        fizzbuzz.append(\"1\")\n    elif num % 3 == 0 and num % 5 == 0:\n        fizzbuzz.append(\"FizzBuzz\")\n    elif num % 3 == 0:\n        fizzbuzz.append(\"Fizz\")\n    elif num % 5 == 0:\n        fizzbuzz.append(\"Buzz\")\n    else:\n        fizzbuzz.append(num)\n    return \"\".join(str(e) for e in fizzbuzz)",
        "num_ids": 141
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate result\"\"\"\n    num = int(stdin)\n    m = num % 10\n    num = num // 10\n    n = num % 10\n    num = num // 10\n    o = num % 10\n    num = num // 10\n    p = num % 10\n    num = num // 10\n    q = num % 10\n    num = num // 10\n    r = num % 10\n    num = num // 10\n    s = num % 10\n    num = num // 10\n    t = num % 10\n    num = num // 10\n    u = num % 10\n    num = num // 10\n    v = num % 10\n    num = num // 10\n    w = num % 10\n    num = num // 10\n    x = num % 10\n    num = num // 10\n    y = num % 10\n    num = num // 10\n    z = num % 10\n    num = num // 10\n    \n    return ''.join([str(m), str(n), str(o), str(p), str(q), str(r), str(s), str(t), str(u), str(v), str(w), str(x), str(y), str(z)])\n    ",
        "num_ids": 281
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    return stdin.readline().strip()\n",
        "num_ids": 24
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n@attr.s\nclass Test(object):\n    stdin: str = attr.ib(validator=instance_of(str))\n    expect: int = attr.ib(validator=instance_of(int))\n\n\nclass Test1(Test):\n    def setUp(self):\n        self.solution = solution\n\n    def test_one_case(self):\n        self.assertEqual(self.solution(self.stdin), self.expect)\n",
        "num_ids": 117
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    return '0' if n % 2 == 0 else '1'",
        "num_ids": 25
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n\ndef",
        "num_ids": 11
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_strings = int(stdin)\n    if num_of_strings == 1:\n        return '0'\n    elif num_of_strings == 2:\n        return '1'\n    elif num_of_strings == 3:\n        return '2'\n    elif num_of_strings == 4:\n        return '4'\n    elif num_of_strings == 5:\n        return '6'\n    elif num_of_strings == 6:\n        return '8'\n    elif num_of_strings == 7:\n        return '10'\n    elif num_of_strings == 8:\n        return '12'\n    elif num_of_strings == 9:\n        return '14'\n    elif num_of_strings == 10:\n        return '16'\n    elif num_of_strings == 11:\n        return '18'\n    elif num_of_strings == 12:\n        return '20'\n    elif num_of_strings == 13:\n        return '22'\n    elif num_of_strings == 14:\n        return '24'\n    elif num_of_strings == 15:\n        return '26'\n    elif num_of_strings == 16:\n        return '28'\n    else:\n        return '0'\n",
        "num_ids": 311
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    return str(len(data))\n\n@pytest.mark.parametrize(\"input, expected\", [\n    (\"9\\n brie soft\\n camembert soft\\n feta soft\\n goat soft\\n muenster soft\\n asiago hard\\n cheddar hard\\n gouda hard\\n swiss hard\\n\", \"3\"),\n    (\"6\\n parmesan hard\\n emmental hard\\n edam hard\\n colby hard\\n gruyere hard\\n asiago hard\\n\", \"4\"),\n    (\"1\\n a\\n\", \"1\"),\n    (\"0\\n a\\n\", \"0\"),\n    (\"2\\n a\\n\", \"1\"),\n])\ndef",
        "num_ids": 181
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)",
        "num_ids": 8
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    cheeses = stdin[1:]\n\n    count = 0\n    for cheese, type_ in cheeses:\n        if type_ == \"hard\":\n            count += 1\n\n    print(count)\n    return \"\"",
        "num_ids": 60
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef",
        "num_ids": 16
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()))",
        "num_ids": 13
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    cheeses = []\n    for line in lines[1:]:\n        cheese, kind = line.split()\n        cheeses.append((cheese, kind))\n\n    return len(cheeses)",
        "num_ids": 70
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cheese = []\n    for i in range(n):\n        cheese.append(stdin.split())\n    return cheese",
        "num_ids": 40
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Test Set 2-----\n\nInput\n3\nbrie soft\ncamembert soft\nfeta soft\n\nOutput\n2\n\nInput\n2\ncervina hard\ndulcam hard\n\nOutput\n1\n\nInput\n4\ngouda soft\ngouda hard\ndulcam hard\ncaramel hard\n\nOutput\n2\n\nInput\n5\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\n\nOutput\n4\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\ncheeses = [stdin.readline().strip().split() for i in range(int(stdin.readline().strip()))]\n\ndef",
        "num_ids": 164
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int, a: List[int], b: List[int], c: List[int]) -> None:\n        for i in range(n):\n            c[(a[i] + b[i]) % n] = (a[i] + b[i]) % n\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [0 for _ in range(n)]\n    f(n, a, b, c)\n    return \" \".join(map(str, c))\n\nassert(solution(stdin) == stdin.readline().strip())\n",
        "num_ids": 183
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin_to_int_array(stdin)\n    b = stdin_to_int_array(stdin)\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return int_array_to_str(c)\n\nsolution(stdin)\n",
        "num_ids": 100
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr1 = [int(x) for x in stdin.split()]\n    arr2 = [int(x) for x in stdin.split()]\n    tot = 0\n    for x, y in zip(arr1, arr2):\n        tot += x * y\n    print(*[tot % n for _ in range(n)])\n    return ''",
        "num_ids": 97
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    assert len(a) == n\n    assert len(b) == n\n    if n == 1:\n        print(a[0])\n        return\n    a_min = min(a)\n    b_min = min(b)\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    c.sort()\n    print(' '.join(map(str, c)))\n    return\n\nassert [solution(stdin) for stdin, _ in IN] == OUT\n",
        "num_ids": 181
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    c = [0]*n\n    for i in range(n):\n        if a[i]+b[i] >= n:\n            c[i] = b[i]\n        else:\n            c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))",
        "num_ids": 140
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [a[i] + b[i] for i in range(n)]\n    for i in range(n):\n        if c[i] >= n:\n            c[i] -= n\n    return''.join([str(x) for x in c])\n    # Write your code here",
        "num_ids": 115
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Simply use the numpy module to find the minimum\n    '''\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    c = np.add(a, b)\n    c = np.mod(c, n)\n    return''.join([str(x) for x in c])",
        "num_ids": 121
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    i = 0\n    if len(b) == 1:\n        return str(a[b[0]])\n    while i < n:\n        if (a[i] + b[i]) % n == 0:\n            i += 1\n        else:\n            a[i], b[i] = b[i], a[i]\n    return \" \".join(str(x) for x in a)",
        "num_ids": 156
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digit = stdin[0]\n    if digit == \"0\":\n        return \"0\"\n    if digit == \"1\":\n        return \"1\"",
        "num_ids": 37
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]",
        "num_ids": 8
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    bit = stdin[0]\n    stdin = stdin[1:]\n    while stdin:\n        bit = not bit\n        stdin = stdin[1:]\n    return str(int(bit))\n\nimport sys\n",
        "num_ids": 55
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)",
        "num_ids": 13
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().splitlines()\n    return str(decision_tree(input_list))\n\ndef",
        "num_ids": 31
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a,b,c,d = [int(x) for x in stdin.split(' ')]\n    print(a&b&c&d)\n    return \"0\"\n",
        "num_ids": 54
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_ones = 0\n    for line in stdin.split('\\n'):\n        num_ones += sum(int(digit) for digit in line)\n    return '0' if num_ones % 2 == 0 else '1'\n\n\n-----For reference-----\n\ndef",
        "num_ids": 65
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read the test input from stdin\n    stdin = stdin.strip('\\n')\n    # process the test input\n    # return the result to stdout\n\nprint(solution(input()))\n\n-----\n\nclass Solution:\n    # @param A : tuple of integers\n    # @return a strings\n    def max_pairwise_product(self, A):\n        for i in range(len(A) - 1):\n            for j in range(i + 1, len(A)):\n                if A[i] * A[j] > A[j] * A[i]:\n                    return A[i] * A[j]\n        return 0\n",
        "num_ids": 157
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n",
        "num_ids": 8
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\n-----\n\nTo assert your solution, try running:\npython3 -m unittest discover tests\n\"\"\"\n\nfrom typing import List, Set, Tuple\nimport unittest\n\nclass Test_TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(stdin), \"0\")\n\ndef",
        "num_ids": 87
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split(\" \"))\n    time = int((D - T) / S)\n    if time > 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(stdin)\n\"\"\"",
        "num_ids": 65
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    D, T, S = int(line[0]), int(line[1]), int(line[2])\n    return \"Yes\" if D / T / S == float(D / T / S) else \"No\"",
        "num_ids": 60
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n\n    Takahashi = int(data[0])\n    Aoki = int(data[1])\n    S = int(data[2])\n\n    totalTime = Takahashi + Aoki * S\n\n    if (totalTime <= 15):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "num_ids": 81
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    d, t, s = map(int, stdin.split())\n\n    # calculate the time needed\n    time_needed = d / s\n\n    # calculate the time needed in minutes\n    time_minutes = time_needed * 60\n\n    # calculate the time needed in hours\n    time_hours = time_minutes / 60\n\n    # calculate the time needed in days\n    time_days = time_hours / 24\n\n    # calculate the time needed in years\n    time_years = time_days / 365\n\n    # get the time to convert to years\n    years_needed = t / 365\n\n    # calculate the time needed in years\n    time_days = time_years * 365\n\n    # calculate the time needed in hours\n    time_hours = time_days / 24\n\n    # calculate the time needed in minutes\n    time_minutes = time_hours * 60\n\n    # calculate the time needed in seconds\n    time_seconds = time_minutes * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in seconds\n    time_seconds = t * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in seconds\n    time_seconds = t * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in minutes\n    time_seconds = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = t * 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in seconds\n    time_seconds = t * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in minutes\n    time_seconds = t * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in minutes\n    time_seconds = t * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in seconds\n    time_seconds = t * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    days_needed = hours_needed / 24\n\n    # convert the days to years\n    years_needed = days_needed / 365\n\n    # convert the years to days\n    days_needed = years_needed * 365\n\n    # convert the days to hours\n    hours_needed = days_needed / 24\n\n    # convert the hours to minutes\n    minutes_needed = hours_needed * 60\n\n    # convert the minutes to seconds\n    seconds_needed = minutes_needed * 60\n\n    # calculate the time needed in seconds\n    time_seconds = t * 60\n\n    # get the time to convert to seconds\n    seconds_needed = t * 60\n\n    # convert the seconds to minutes\n    minutes_needed = seconds_needed / 60\n\n    # convert the minutes to hours\n    hours_needed = minutes_needed / 60\n\n    # get the time to convert to days\n    ",
        "num_ids": 1815
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = [int(x) for x in stdin.split(' ')]\n    if d * s * 60 + t * (d - 1) < t * s:\n        return 'Yes'\n    return 'No'",
        "num_ids": 56
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    time = d / s * t\n    if time == int(time):\n        return \"Yes\"\n    return \"No\"",
        "num_ids": 47
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    time = d / s * t + t\n    return 'Yes' if time > 0 else 'No'",
        "num_ids": 42
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    expected = d / s\n    print('Yes' if t / expected >= 1 else 'No')",
        "num_ids": 40
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    return 'Yes' if T/S + D/S < T/S else 'No'",
        "num_ids": 39
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n",
        "num_ids": 7
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    expected_numbers = set(numbers)\n    for i in range(N):\n        expected_numbers.add(numbers[i])\n        expected_numbers.add(numbers[i + N])\n        expected_numbers.add(numbers[i + N * 2])\n    if len(expected_numbers) == 9:\n        return \"Yes\"\n    return \"No\"",
        "num_ids": 126
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, line.split())) for line in stdin.strip().splitlines()]\n    return \"Yes\" if has_bingo(grid) else \"No\"\n\n\ndef",
        "num_ids": 49
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''84 97 66\n   ... 79 89 11\n   ... 61 59 7\n   ... 7\n   ... 89\n   ... 7\n   ... 87\n   ... 79\n   ... 24\n   ... 84\n   ... 30\n   ... ''')\n    'Yes'\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n    n = int(stdin)\n    b = [int(x) for x in stdin.split()]\n    rows = len(b)\n    cols = len(b[0])\n    diagonal = [[b[0][0], b[0][1], b[0][2]], [b[1][0], b[1][1], b[1][2]], [b[2][0], b[2][1], b[2][2]]]\n    for i in range(3):\n        for j in range(3):\n            if b[i][j] in diagonal[i]:\n                diagonal[i][j] = \"X\"\n    if any([diagonal[0][0], diagonal[1][0], diagonal[2][0]]):\n        return \"Yes\"\n    if any([diagonal[0][1], diagonal[1][1], diagonal[2][1]]):\n        return \"Yes\"\n    if any([diagonal[0][2], diagonal[1][2], diagonal[2][2]]):\n        return \"Yes\"\n    for i in range(rows - 2):\n        if b[i][0] == b[i + 1][1] == b[i + 2][2] and b[i][0]!= \"X\":\n            return \"Yes\"\n    for i in range(cols - 2):\n        if b[0][i] == b[1][i + 1] == b[2][i + 2] and b[0][i]!= \"X\":\n            return \"Yes\"\n    return \"No\"\n",
        "num_ids": 457
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [[int(x) for x in stdin.readline().strip().split()] for i in range(n)]\n\n    b = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] in b:\n                a[i][j] = -1\n\n    flag = True\n    for i in range(n):\n        if a[i][i] == -1:\n            flag = False\n            break\n\n    if flag:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "num_ids": 164
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass",
        "num_ids": 9
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...",
        "num_ids": 7
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    A = map(int, stdin.strip().split())\n    A = sorted(A, reverse=True)\n    l = 0\n    r = 1\n    while True:\n        if l >= len(A):\n            return -1\n        if A[l]+A[r] <= N:\n            return A[l]+A[r]\n        if l == r:\n            r += 1\n        else:\n            l += 1\n            r = l + 1",
        "num_ids": 126
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split(' '))\n    assignments = list(map(int, stdin.strip().split(' ')))\n    maximum = 0\n    for i in range(len(assignments)):\n        for j in range(i, len(assignments)):\n            if assignments[i] + assignments[j] > maximum:\n                maximum = assignments[i] + assignments[j]\n    if maximum > 0:\n        return str(maximum)\n    else:\n        return '-1'",
        "num_ids": 128
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, M = map(int, lines[0].split(' '))\n    As = map(int, lines[1].split(' '))\n\n    # count number of distinct days\n    max_days = N // 2 + 1\n    for i in range(len(As) - 1):\n        max_days = max(max_days, As[i] // 2 + 1)\n\n    # check if we can do the assignments, using the max days\n    if max_days < max(As):\n        return '-1'\n    else:\n        return str(max_days)",
        "num_ids": 144
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    data = [int(s) for s in stdin.split()[1:]]\n\n    s = m\n    b = 0\n    while s < n:\n        s += m\n        b += 1\n\n    if s > n:\n        return -1\n\n    return b\n",
        "num_ids": 85
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, days_of_summer, assignments = [int(s) for s in stdin.split(\" \")]\n\n    if assignments * days_of_summer > 365:\n        return -1\n\n    return days_of_summer * assignments - (365 - assignments)\n\nprint(solution(input()))\n\n\"\"\"",
        "num_ids": 77
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    A = list(map(int, stdin.split(\" \")))\n    total = 0\n    for i in range(M):\n        total += A[i]\n    if total % N!= 0:\n        return \"-1\"\n    total //= N\n    return str(total)\n\nassert(solution(\"41 2\") == \"30\")\nassert(solution(\"5 6\") == \"30\")\nassert(solution(\"100 500\") == \"50\")\nassert(solution(\"1 9\") == \"2\")\nassert(solution(\"10 1\") == \"-1\")\n\"\"\"\n\ndef",
        "num_ids": 156
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    result = 0\n    for _ in range(m):\n        a = list(map(int, stdin.split()))\n        result = max(result, a[0] + a[1])\n\n    if result >= n:\n        return str(result)\n    else:\n        return '-1'\n",
        "num_ids": 88
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    a = tuple(map(int, stdin.split()[1:]))\n\n    if len(a)!= m:\n        return -1\n\n    cache = [0] * (n + 1)\n    cache[0] = 1\n\n    for i in range(1, n + 1):\n        if i > a[0]:\n            cache[i] = cache[i - 1]\n        else:\n            cache[i] = max(cache[i - 1], i + 1)\n\n    return cache[n]",
        "num_ids": 138
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # --- Write your code here ---\n    pass",
        "num_ids": 12
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    A.reverse()\n    curr = 0\n    for i in range(N):\n        curr += A[i]\n        if curr > M:\n            return -1\n    return (N-1) * M + (M - curr)",
        "num_ids": 104
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the N-th smallest integer that would make Ringo happy.\n    >>> solution(\"1 2\")\n    '5'\n    >>> solution(\"0 1\")\n    '3'\n    >>> solution(\"2 1\")\n    '5'\n    \"\"\"\n    d, n = map(int, stdin.split())\n    return str(int(n / 100) * 100 + (n % 100 - d) * 100)\n",
        "num_ids": 101
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    lst = [i for i in range(1, N) if i % 100 / D == i / 100]\n    return str(min(lst))\n\nassert(solution('') == '1')\nassert(solution('1 1') == '2')\nassert(solution('0 0') == '100')\nassert(solution('1 1 1') == '1')\nassert(solution('1 1 2') == '2')\nassert(solution('1 1 2 2') == '2')\nassert(solution('1 1 2 2 3') == '4')\nassert(solution('1 1 2 2 3 3') == '3')\nassert(solution('1 1 2 2 3 3 4') == '4')\nassert(solution('1 1 2 2 3 3 4 5') == '5')\nassert(solution('1 1 2 2 3 3 4 5 6') == '6')\nassert(solution('1 1 2 2 3 3 4 5 6 7') == '7')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8') == '8')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9') == '9')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10') == '10')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11') == '11')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12') == '12')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13') == '13')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14') == '14')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15') == '15')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16') == '16')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == '17')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == '18')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == '19')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '20')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == '21')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == '22')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == '23')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '24')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == '25')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '26')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == '27')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == '28')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == '29')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '30')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '31')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == '32')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == '33')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == '34')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35') == '35')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == '36')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37') == '37')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38') == '38')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39') == '39')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40') == '40')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41') == '41')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42') == '42')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43') == '43')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44') == '44')\nassert(solution('1 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45') == '45')\nassert(solution('1 1 2 2 3 3 4 5 6",
        "num_ids": 1799
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n\n    i = N\n    while not i % 100 == D:\n        i += 1\n    return str(i)",
        "num_ids": 42
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(x) for x in stdin.strip().split()]\n    return str(divmod(N, 100) * D)",
        "num_ids": 37
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return '5'\n    elif D == 1:\n        return '100'\n    elif D == 2:\n        return '1000'\n\n\nprint(solution(input()))\n",
        "num_ids": 67
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = stdin.split()\n    N = int(N)\n    count = 0\n    while count < N:\n        count += 1\n        x = int(str(count) * int(D))\n        if x % 100 == 0:\n            print(x)\n            return\n    return\n",
        "num_ids": 73
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, n = [int(x) for x in stdin.split()]\n    return \"\".join(str(x) for x in range(1, 100000000) if x % 100 == 0 and divmod(x, 100)[1] == d)",
        "num_ids": 60
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, n = list(map(int, stdin.split()))\n    return str(100 * (n // 100) + (n % 100 // d))\n",
        "num_ids": 39
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(i) for i in stdin.strip().split()]\n    numbers = set(i for i in range(1, N) if not i % 100)\n    for i in range(N, 1000000000):\n        if not i % 100 or i in numbers:\n            numbers.add(i)\n            numbers.add(i // 100)\n    return str(sorted(numbers)[D-1])\n\nprint(solution(input()))\n",
        "num_ids": 115
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    for i in range(1, n + 1):\n        if i % 100 == d:\n            print(i)\n            return\n    raise Exception(\"An error occurred\")",
        "num_ids": 55
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split()[0]\n    n = int(n)\n    list_a = stdin.strip().split()[1:]\n    list_a = list(map(int, list_a))\n    m = max(list_a)\n    if n == 1:\n        return str(list_a[0])\n    count = 0\n    for i in range(1, m+1):\n        if i in list_a:\n            count += 1\n    if count == n:\n        return str(m)\n    else:\n        return str(m) +'' + str(n - count)",
        "num_ids": 148
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split()))\n    num_list[0] = 10**9\n\n    for i in range(1, len(num_list)):\n        if num_list[i] == 0:\n            return 0\n        num_list[i] %= num_list[0]\n\n    return num_list[0]\n\nassert(solution(input()) == 0)\n\n'''\n\ndef",
        "num_ids": 106
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(max_common_divisor(map(int, stdin.splitlines()[1].split())))\n\ndef",
        "num_ids": 32
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    if n == 0:\n        return 0\n    \n    array = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    def gcd(a: int, b: int) -> int:\n        while a!= 0 and b!= 0:\n            if a > b:\n                a = a % b\n            else:\n                b = b % a\n        return a + b\n\n    maximum = 1\n    for i in array:\n        maximum = gcd(maximum, i)\n    return maximum\n\nassert(solution('3\\n7 6 8') == 2)\nassert(solution('10\\n1 2 3 4 5 6 7 8 9 10') == 5)\nassert(solution('4\\n1 2 3 4') == 1)\n",
        "num_ids": 205
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    for i in range(n):\n        gcd = arr[0]\n        for x in arr[1:]:\n            gcd = gcd if gcd > x else x\n        arr[arr.index(gcd)] = int(input())\n    return str(gcd)\n\n\nassert(solution(\"3\") == \"2\")\nassert(solution(\"3 2 1\") == \"2\")\nassert(solution(\"3 2 1 3\") == \"1\")\nassert(solution(\"3 2 1 3 3\") == \"3\")\nassert(solution(\"3 2 1 3 3 4\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\") == \"0\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\") == \"2\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\") == \"1\")\nassert(solution(\"7 2 1 3 3 4 6 8 9 10 11 12 13 14 15 16 17 18 19 20",
        "num_ids": 1799
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.rstrip().split(\"\\n\")[0]\n    A = [int(stdin.rstrip().split(\"\\n\")[1]) for _ in range(int(N))]\n    maximum = 1\n    for i in range(1, int(N)):\n        if A[0] % i == 0 and A[i] % i == 0:\n            maximum = i\n    return maximum\n\nprint(solution(input()))\n",
        "num_ids": 109
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # The first line of input contains a single integer T denoting the number of test cases.\n    # The description of T test cases follows.\n    # The first and only line of each test case contains a single integer N.\n    # The second and third lines of each test case contains N space-separated integers A_1, A_2,..., A_N.\n    for i in range(int(stdin)):\n        # The first and second lines of each test case are not read by your program.\n        # The third line of each test case contains a single integer D.\n        N = int(stdin)\n        A = [int(i) for i in stdin.split()]\n        # The first line of each test case contains a single integer T denoting the number of test cases.\n        # The description of T test cases follows.\n        # The first and second lines of each test case contains a single integer N.\n        # The third line of each test case contains N space-separated integers A_1, A_2,..., A_N.\n        # The fourth line of each test case contains a single integer D.\n        # A_i is an integer from 1 to 10^9 (inclusive).\n        # A_1 is an integer from 1 to 10^9 (inclusive).\n        # A_2 is an integer from 1 to 10^9 (inclusive).\n        # A_3 is an integer from 1 to 10^9 (inclusive).\n        # A_4 is an integer from 1 to 10^9 (inclusive).\n        # A_5 is an integer from 1 to 10^9 (inclusive).\n        # A_6 is an integer from 1 to 10^9 (inclusive).\n        # A_7 is an integer from 1 to 10^9 (inclusive).\n        # A_8 is an integer from 1 to 10^9 (inclusive).\n        # A_9 is an integer from 1 to 10^9 (inclusive).\n        # A_10 is an integer from 1 to 10^9 (inclusive).\n        # The fifth and sixth lines of each test case contains a single integer D.\n        # The seventh line of each test case contains a single integer D.\n        # The eighth line of each test case contains a single integer D.\n        # The ninth line of each test case contains a single integer D.\n        # The tenth line of each test case contains a single integer D.\n        # The eleventh line of each test case contains a single integer D.\n        # The twelfth line of each test case contains a single integer D.\n        # The thirteenth line of each test case contains a single integer D.\n        # The fourteenth line of each test case contains a single integer D.\n        # The fifteenth line of each test case contains a single integer D.\n        # The sixteenth line of each test case contains a single integer D.\n        # The seventeenth line of each test case contains a single integer D.\n        # The eighteenth line of each test case contains a single integer D.\n        # The nineteenth line of each test case contains a single integer D.\n        # The twentieth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The twentieth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The twentieth line of each test case contains a single integer D.\n        # The twentieth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The twentieth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The twentieth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The ninteenth line of each test case contains a single integer D.\n        # The",
        "num_ids": 1797
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(i) for i in stdin.readline().strip().split()]\n    array.sort()\n    max_gcd = array[1]\n    if n == 1:\n        return str(array[0])\n    for i in range(n-1):\n        max_gcd = gcd(max_gcd, array[i+1])\n    return str(max_gcd)\n\ndef",
        "num_ids": 113
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function is expected to return a STRING.\n    The function accepts STRING stdin as parameter.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    gcd = a[0]\n    for i in a[1:]:\n        gcd = gcd if gcd > i else i\n    \n    return str(gcd)",
        "num_ids": 117
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split(' ')]\n    \n    # Get all possible numbers that can be replaced with a valid one\n    valid_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    \n    # For each number, try to find a number that is smaller\n    for num in nums:\n        found = False\n        for smaller in valid_nums:\n            if num < smaller:\n                found = True\n                break\n        \n        if not found:\n            return str(num)\n    \n    return str(1)",
        "num_ids": 353
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split(' ')]\n    a.sort()\n    for i in a:\n        print(i)",
        "num_ids": 53
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    A = [int(x) for x in stdin[1].split()]\n    A.sort()\n    result = \"\"\n    for i in range(N):\n        result += str(A[i]) + \" \"\n    return result",
        "num_ids": 81
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Uses a greedy algorithm to find the ordering of the students entering the\n    classroom in ascending order.\n    \"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    i = 0\n    while i < n:\n        for j in range(i, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n    return''.join(map(str, arr))",
        "num_ids": 126
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    A = [int(x) for x in stdin.readline().strip().split()]\n\n    A_dict = {}\n    for i in range(N):\n        if A[i] in A_dict:\n            A_dict[A[i]].append(i)\n        else:\n            A_dict[A[i]] = [i]\n\n    keys = list(A_dict.keys())\n    keys.sort()\n    result = []\n    for key in keys:\n        result += A_dict[key]\n    return''.join(map(str, result))",
        "num_ids": 150
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    A_sort = sorted(A)\n    A_sort_idx = {}\n    for i, a in enumerate(A_sort):\n        if a not in A_sort_idx:\n            A_sort_idx[a] = i\n    res = [str(A_sort_idx[a]) for a in A]\n    return''.join(res)",
        "num_ids": 120
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef",
        "num_ids": 6
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(\" \")]\n    indices = [-1] * n\n    for i in range(n):\n        j = A[i] - 1\n        if indices[j] == -1:\n            indices[j] = i\n        else:\n            print(A[indices[j]], A[i])\n            return\n    for i in range(n):\n        print(A[i], end=\" \")\n    return",
        "num_ids": 134
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(a) for a in stdin.readline().split()]\n    \n    S = []\n    for i in range(N):\n        while len(S) > 0 and A[S[-1]] > A[i]:\n            S.pop()\n        S.append(i)\n    \n    return''.join(map(str, S))",
        "num_ids": 99
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    takahashi = stdin.readline().rstrip().split(' ')\n    takahashi = [int(x) for x in takahashi]\n\n    # Find first student number in the classroom\n    start = takahashi.index(1)\n\n    # Find last student number in the classroom\n    end = len(takahashi) - takahashi[::-1].index(1) - 1\n\n    print(' '.join(str(x) for x in takahashi[start:end+1]))\n    return ''\n",
        "num_ids": 131
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = stdin.strip().split()\n    return str(int(X) // (int(A) * int(B)))",
        "num_ids": 35
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): A + B X\n\n    Returns:\n        str: The maximum integer\n    \"\"\"\n    # Cast the input\n    A, B, X = map(int, stdin.split())\n    # Initialize the maximum integer to 1\n    max_int = 1\n    # Loop through all integers from 1 to 10^9, and check if it is possible to buy it\n    for i in range(1, 10 ** 9 + 1):\n        if A * i + B * len(str(i)) == X:\n            max_int = i\n            break\n    # If not possible, return 0\n    if max_int == 1:\n        return \"0\"\n    # Return the maximum integer\n    return str(max_int)\n",
        "num_ids": 179
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    mx = x // a\n    mxb = x // (a + b)\n\n    mx *= a + b\n    mxb *= b\n\n    if mx < mxb:\n        return str(mx)\n    return str(mxb)",
        "num_ids": 75
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    \n    # this is the ideal number for the shop\n    target_yen = x + a * len(str(a * b + 1))\n    \n    if target_yen > 10 ** 18:\n        return '0'\n    \n    price = 0\n    current_yen = 0\n    \n    while price < target_yen:\n        current_yen += 1\n        \n        if current_yen % 10 == 0:\n            price += 1\n        \n        elif current_yen % 10 in [2, 3, 5]:\n            price += 10\n        \n        elif current_yen % 10 in [4, 7]:\n            price += 100\n    \n    return str(current_yen)",
        "num_ids": 185
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    result = 0\n    if x < a:\n        result = 0\n    else:\n        while x >= a:\n            x -= a\n            result += 1\n        if x >= b:\n            result += 1\n    return str(result)",
        "num_ids": 74
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.strip().split(' ')]\n    \n    if x < a + b:\n        return '0'\n    else:\n        return ''.join(str(int(x / (a + b))) for x in range(a + b, x + 1, b))\n\nassert(solution('10 7 100') == '9')\nassert(solution('10 0 0') == '0')\nassert(solution('0 100 0') == '0')\nassert(solution('0 0 100') == '0')\nassert(solution('1 2 3') == '123')\nassert(solution('1 1 1') == '1')\nassert(solution('5 4 4') == '6')\nassert(solution('5 4 3') == '4')\nassert(solution('5 4 2') == '4')\nassert(solution('5 4 1') == '4')\nassert(solution('5 4 0') == '4')\nassert(solution('5 3 4') == '6')\nassert(solution('5 3 3') == '6')\nassert(solution('5 3 2') == '6')\nassert(solution('5 3 1') == '6')\nassert(solution('5 3 0') == '6')\nassert(solution('5 2 4') == '6')\nassert(solution('5 2 3') == '6')\nassert(solution('5 2 2') == '6')\nassert(solution('5 2 1') == '6')\nassert(solution('5 2 0') == '6')\nassert(solution('5 1 4') == '6')\nassert(solution('5 1 3') == '6')\nassert(solution('5 1 2') == '6')\nassert(solution('5 1 1') == '6')\nassert(solution('5 1 0') == '6')\nassert(solution('5 0 4') == '6')\nassert(solution('5 0 3') == '6')\nassert(solution('5 0 2') == '6')\nassert(solution('5 0 1') == '6')\nassert(solution('5 0 0') == '6')\nassert(solution('4 2 3') == '123')\nassert(solution('4 1 3') == '123')\nassert(solution('4 0 3') == '123')\nassert(solution('3 2 4') == '234')\nassert(solution('3 1 4') == '234')\nassert(solution('3 0 4') == '234')\nassert(solution('2 3 4') == '1234')\nassert(solution('2 1 4') == '1234')\nassert(solution('2 0 4') == '1234')\nassert(solution('1 3 4') == '1234')\nassert(solution('1 2 4') == '1234')\nassert(solution('1 1 4') == '1234')\nassert(solution('1 0 4') == '1234')\nassert(solution('0 3 4') == '1234')\nassert(solution('0 1 4') == '1234')\nassert(solution('0 0 4') == '1234')\nassert(solution('0 0 3') == '1234')\nassert(solution('0 0 2') == '1234')\nassert(solution('0 0 1') == '1234')\nassert(solution('0 0 0') == '1234')\nassert(solution('-1 -1 -1') == '0')\nassert(solution('-1 -1 0') == '0')\nassert(solution('-1 -1 1') == '0')\nassert(solution('-1 -1 2') == '0')\nassert(solution('-1 -1 3') == '0')\nassert(solution('-1 -1 4') == '0')\nassert(solution('-1 -1 5') == '0')\nassert(solution('-1 -1 6') == '0')\nassert(solution('-1 -1 7') == '0')\nassert(solution('-1 -1 8') == '0')\nassert(solution('-1 -1 9') == '0')\nassert(solution('-1 -1 10') == '0')\nassert(solution('-1 -1 11') == '0')\nassert(solution('-1 -1 12') == '0')\nassert(solution('-1 -1 13') == '0')\nassert(solution('-1 -1 14') == '0')\nassert(solution('-1 -1 15') == '0')\nassert(solution('-1 -1 16') == '0')\nassert(solution('-1 -1 17') == '0')\nassert(solution('-1 -1 18') == '0')\nassert(solution('-1 -1 19') == '0')\nassert(solution('-1 -1 20') == '0')\nassert(solution('-1 -1 21') == '0')\nassert(solution('-1 -1 22') == '0')\nassert(solution('-1 -1 23') == '0')\nassert(solution('-1 -1 24') == '0')\nassert(solution('-1 -1 25') == '0')\nassert(solution('-1 -1 26') == '0')\nassert(solution('-1 -1 27') == '0')\nassert(solution('-1 -1 28') == '0')\nassert(solution('-1 -1 29') == '0')\nassert(solution('-1 -1 30') == '0')\nassert(solution('-1 -1 31') == '0')\nassert(solution('-1 -1 32') == '0')\nassert(solution('-1 -1 33') == '0')\nassert(solution('-1 -1 34') == '0')\nassert(solution('-1 -1 35') == '0')\nassert(solution('-1 -1 36') == '0')\nassert(solution('-1 -1 37') == '0')\nassert(solution('-1 -1 38') == '0')\nassert(solution('-1 -1 39') == '0')\nassert(solution('-1 -1 40') == '0')\nassert(solution('-1 -1 41') == '0')\nassert(solution('-1 -1 42') == '0')\nassert(solution('-1 -1 43') == '0')\nassert(solution('-1 -1 44') == '0')\nassert(solution('-1 -1 45') == '0')\nassert(solution('-1 -1 46') == '0')\nassert(solution('-1 -1 47') == '0')\nassert(solution('-1 -1 48') == '0')\nassert(solution('-1 -1 49') == '0')\nassert(solution('-1 -1 50') == '0')\nassert(solution('-1 -1 51') == '0')\nassert(solution('-1 -1 52') == '0')\nassert(solution('-1 -1 53') == '0')\nassert(solution('-1 -1 54') == '0')\nassert(solution('-1 -1 55') == '",
        "num_ids": 1719
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    return '0' if X > 10 ** 18 else str(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (A * X + B * d(int(10 ** 18 / (",
        "num_ids": 1719
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    A, B, X = map(int, lines[0].split(\" \"))\n    if A == 0 and B == 0:\n        return \"0\"\n    # A * X + B * len(str(X))\n    # -> (A * X) + ((B * len(str(X))) - len(str(X))) * 10 ** len(str(X))\n    # -> (A * X) + ((B * len(str(X))) - len(str(X)))\n    # -> (A * X) + ((B * len(str(X))) - len(str(X))) // 10\n    return str(X + B // len(str(X)))",
        "num_ids": 166
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    X *= 1e18\n    max_N = 10 ** 9\n    if B * max_N <= X:\n        return 0\n    A = 1\n    while A <= 10 ** 9:\n        X -= B * A\n        if X < 0:\n            break\n        A += 1\n    return str(A - 1)",
        "num_ids": 94
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"Takahashi's solution\"\n    A, B, X = [int(x) for x in stdin.strip().split()]\n    \n    if X < A:\n        return \"0\"\n    \n    res = 0\n    for i in range(1, 10**9):\n        if i * A + B * len(str(i)) >= X:\n            res = i\n            break\n    return str(res)\n\ndef",
        "num_ids": 105
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split(\" \")\n    N, K = int(N), int(K)\n\n    h = list(map(int, stdin.split(\" \")))\n    print(len([x for x in h if x >= K]))\n    return \"\"\n\nprint(solution(input()))\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\n\nprint(sum([1 for x in h if x >= k]))\n",
        "num_ids": 138
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    return str(Solution().solve(N, K, h))\n\nprint(solution(input()))\n\"\"\"\n\ndef",
        "num_ids": 69
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    people = [int(stdin) for _ in range(n)]\n    tallest = max(people)\n\n    return len([1 for person in people if person >= k])\n",
        "num_ids": 59
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.strip().split()\n    N, K = int(N), int(K)\n\n    if N > 500 or K > 500 or K <= 0:\n        raise ValueError(\"Invalid input!\")\n\n    friends = stdin.strip().split()\n    for i in range(len(friends)):\n        friends[i] = int(friends[i])\n\n    tallest = max(friends)\n\n    if tallest < K:\n        return 0\n\n    return sum([1 for friend in friends if friend >= K])",
        "num_ids": 123
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n\n    # Write your code here\n    return",
        "num_ids": 48
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        if h[i] >= k:\n            ans += 1\n    print(ans)\n    return \"\"",
        "num_ids": 73
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    # Count the number of people who can ride the roller coaster\n    count = 0\n\n    for i in range(n):\n        if h[i] >= k:\n            count += 1\n\n    return str(count)",
        "num_ids": 81
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4 150\n   ... 150 140 100 200\n   ... \"\"\")\n    '2'\n    \"\"\"\n    N, K = [int(x) for x in stdin.split()]\n    heights = [int(x) for x in stdin.split()]\n\n    count = 0\n    for i in range(N):\n        if heights[i] >= K:\n            count += 1\n    return str(count)",
        "num_ids": 106
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    tall = True\n    tall_count = 0\n    tall_count = sum(h >= K)\n    return tall_count",
        "num_ids": 68
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Take stdin: N K\n    Print the number of people among the Takahashi's friends who can ride the roller coaster.\n    '''\n    inputs = [int(x) for x in stdin.strip().split()]\n    N, K = inputs[0], inputs[1]\n    print(solution_old(N, K))\n\ndef",
        "num_ids": 88
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    items = [int(x) for x in stdin.split(\" \")]\n    votes = sum(items)\n    popular = int(votes / m)\n\n    for item in items:\n        if item < popular:\n            return \"No\"\n    return \"Yes\"",
        "num_ids": 84
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(n) for n in stdin.split(\" \")]\n    N, M = data[0], data[1]\n    A = data[2:]\n\n    num = A[-1]\n    del A[-1]\n    if N < (1 / 4 * M):\n        return \"No\"\n    for a in A:\n        if a < (1 / 4 * M):\n            num -= a\n            if num < (1 / 4 * M):\n                return \"No\"\n    return \"Yes\"",
        "num_ids": 124
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m,n = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    if (m <= n and n <= 100):\n        return 'Yes' if (m <= int(1 / 4 * sum(a))) else 'No'",
        "num_ids": 73
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(num) for num in stdin.split()]\n\n    A = [int(num) for num in stdin.rstrip().split()]\n\n    sum_votes = sum(A)\n    if M * 4 > sum_votes:\n        print(\"No\")\n    else:\n        print(\"Yes\")",
        "num_ids": 78
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\" \")\n    N, M = int(stdin[0]), int(stdin[1])\n    votes = [int(x) for x in stdin[2:]]\n    counter = {}\n    for i in votes:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    counter = sorted(counter.items(), key=lambda x: x[1])\n    if counter[0][1] < (N / 4) * M:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n\ndef",
        "num_ids": 164
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, M = int(stdin[0]), int(stdin[1])\n    A = [int(x) for x in stdin[2].split(' ')]\n    A.sort()\n    A.reverse()\n    print(A)\n    if M > sum(A) / (4 * M):\n        return 'Yes'\n    else:\n        return 'No'",
        "num_ids": 103
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    num_items = data[0]\n    total_votes = sum(data[1:])\n    num_pop_items = int(total_votes / data[1])\n\n    num_selected_items = sum(1 for vote in data if vote >= num_pop_items)\n    return \"Yes\" if num_selected_items >= num_pop_items else \"No\"",
        "num_ids": 103
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n    #Your code here\n    \n    count = {}\n    for i in a:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n            \n    result = 'Yes'\n    num_vote = float(sum(a))\n    for k, v in count.items():\n        if v < num_vote / float(m):\n            result = 'No'\n    \n    return result",
        "num_ids": 149
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n\n    # if M > N / 4:\n    #     return 'No'\n    # else:\n    #     return 'Yes'\n    \n    arr.sort()\n    arr.reverse()\n    count = 0\n    total = 0\n    for i in arr:\n        if i <= M/N:\n            total += i\n            count += 1\n\n    if count < (M/N):\n        return 'No'\n    else:\n        return 'Yes'\n\nprint(solution(stdin.read()))\n\"\"\"\n\n\ndef",
        "num_ids": 165
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, K = [int(x) for x in stdin.strip().split(' ')]\n    grid = [list(stdin.strip()) for _ in range(rows)]\n    black = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '#':\n                black += 1\n    choices = 0\n    for i in range(rows - 1):\n        for j in range(cols - 1):\n            if grid[i][j] == '#' and grid[i][j + 1] == '#' and grid[i + 1][j] == '#' and grid[i + 1][j + 1] == '#':\n                choices += 1\n    for i in range(rows - 1):\n        for j in range(cols):\n            if grid[i][j] == '#' and grid[i + 1][j] == '#' and grid[i + 1][j] == '#' and grid[i + 1][j + 1] == '#':\n                choices += 1\n    for j in range(cols - 1):\n        for i in range(rows - 1):\n            if grid[i][j] == '#' and grid[i][j + 1] == '#' and grid[i + 1][j] == '#' and grid[i + 1][j + 1] == '#':\n                choices += 1\n    return str(choices)",
        "num_ids": 348
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(i) for i in stdin.split()]\n    c = [stdin.split() for _ in range(H)]\n    black = [\".#\".index(i) for row in c for i in row if i == \".\"]\n    choices = [black[x:x + W] for x in range(0, len(black), W)]\n    return str(len([x for x in choices if len(set(x)) == K]))\n",
        "num_ids": 116
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(i) for i in stdin.strip().split()]\n    squares = stdin.strip().split('\\n')[0:]\n    return str(solve(H, W, K, squares))\n\n\ndef",
        "num_ids": 61
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    c = [list(stdin.strip()) for _ in range(h)]\n    cnt = 0\n\n    for row in range(h):\n        for col in range(w):\n            if row + col + 1 >= k:\n                if c[row][col] == '#':\n                    cnt += 1\n    return cnt\n",
        "num_ids": 96
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()",
        "num_ids": 8
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(stdin.strip()) for _ in range(H)]\n    grid_copy = [row[:] for row in grid]\n    K = min(K, H * W - K)\n    ans = 0\n    for row in range(H):\n        for col in range(W):\n            if grid_copy[row][col] == '#':\n                grid_copy[row][col] = '.'\n                if row > 0 and col > 0:\n                    grid_copy[row][col] = grid_copy[row-1][col-1]\n                if row > 0:\n                    grid_copy[row][col] = grid_copy[row-1][col]\n                if row > 0 and col < W - 1:\n                    grid_copy[row][col] = grid_copy[row-1][col+1]\n                if col < W - 1:\n                    grid_copy[row][col] = grid_copy[row][col+1]\n                if row < H - 1 and col > 0:\n                    grid_copy[row][col] = grid_copy[row+1][col-1]\n                if row < H - 1:\n                    grid_copy[row][col] = grid_copy[row+1][col]\n                if row < H - 1 and col < W - 1:\n                    grid_copy[row][col] = grid_copy[row+1][col+1]\n                ans += 1\n    return str(ans)\n\ndef",
        "num_ids": 363
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    H, W, K = map(int, lines[0].split())\n    squares = []\n    for line in lines[1:]:\n        squares.append(line)\n    return ''.join(solution_a(H, W, K, squares))\n\n\ndef",
        "num_ids": 76
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = (int(s) for s in stdin.strip().split(\" \"))\n    grid = [list(stdin.strip()) for _ in range(H)]\n    rows, cols = zip(*[(i, j) for i, row in enumerate(grid) for j, s in enumerate(row) if s == \"#\"])\n    choices = list(combinations(rows, K))\n    black_squares = sum(sum(s == \"#\" for s in row) for row in grid)\n    return black_squares - len(choices) * len(cols)\n\n\nprint(solution(input()))\n",
        "num_ids": 154
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    i, j = tuple(map(int, stdin.split()))\n    return str(i * j % 2019)",
        "num_ids": 29
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    return str(2019 - (l % 2019))",
        "num_ids": 32
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            if i * j % 2019 == 0:\n                return str(i * j % 2019)",
        "num_ids": 63
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.split()))\n    return str((2020 - l) * (2040 - r))\n\nprint(solution(input()))\n\"\"\"\n",
        "num_ids": 47
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    i, j = 0, 0\n    while (i * j) % 2019 < l:\n        if j > 0 and (i - j) % 2019 == 0:\n            i -= 1\n        j += 1\n    return str(i * j)",
        "num_ids": 73
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(solution_part_one(L, R))\n\ndef",
        "num_ids": 34
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str((2020 * 2021) % 2019)\n\nassert(solution(stdin) == \"2\")\n\"\"\"",
        "num_ids": 43
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(int(stdin.split()[0]), int(stdin.split()[1])))\n\ndef",
        "num_ids": 35
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    l, r = map(int, stdin.split())\n    return '2' if l == r else '1'",
        "num_ids": 36
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return \"AC\" if S[0] == \"A\" and (\n        S[2] == S[1] and S[1]!= \"C\"\n    ) and all(c.islower() for c in S[3:]) else \"WA\"",
        "num_ids": 70
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...",
        "num_ids": 3
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    s = s.upper()\n    if s[0] == 'A':\n        c = s[2]\n        if s[2] == s[-2]:\n            for i in range(1, len(s) - 2):\n                if s[i]!= 'A' and s[i]!= 'C':\n                    return 'WA'\n        else:\n            return 'WA'\n    else:\n        return 'WA'",
        "num_ids": 113
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n",
        "num_ids": 8
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == stdin[2]:\n        return \"AC\"\n    else:\n        return \"WA\"",
        "num_ids": 30
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0].isupper() and S.count('C') == 1 and S[1].islower() and S[2].isupper() and S[3:].islower():\n        return 'AC'\n    return 'WA'",
        "num_ids": 65
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'AC'",
        "num_ids": 6
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) < 4:\n        return \"WA\"\n    if stdin[0]!= stdin[2]:\n        return \"WA\"\n    if stdin[0].isupper():\n        return \"AC\"\n    if stdin[1].isupper() and stdin[1]!= stdin[2]:\n        return \"AC\"\n    return \"WA\"",
        "num_ids": 101
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0]!= 'A':\n        return \"WA\"\n    s = s[1:]\n    if s.count('C')!= 1:\n        return \"WA\"\n    return \"AC\"",
        "num_ids": 60
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    letter, count = '', 0\n    for c in stdin[1:-1]:\n        if c == 'C':\n            count += 1\n        if c == stdin[0]:\n            letter = 'A'\n        if count > 1:\n            return 'WA'\n    if count == 0 or letter == 'A':\n        return 'WA'\n    else:\n        return 'AC'",
        "num_ids": 92
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 5 * 10 ** 15\n    str_len = len(stdin)\n    start = 0\n    while True:\n        last = start\n        for i in range(last, last + n):\n            if i < str_len:\n                last = i\n                if last == k:\n                    return stdin[last]\n            else:\n                return stdin[last]\n        start += n\n\nprint(solution(input()))\n",
        "num_ids": 114
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    s
        "num_ids": 1616
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = '1' * n\n    k = int(stdin)\n    while len(s) <= k:\n        s += s\n    return s[k-1]\n\nprint(solution(input()))\n",
        "num_ids": 62
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    pass",
        "num_ids": 9
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    s = stdin.readline().strip()\n    for _ in range(15):\n        s = \"\".join(int(i) for i in s)\n        s = str(int(s) * 2)\n    return s[k - 1]",
        "num_ids": 72
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin)\n    \n    res = ''\n    i = 0\n    while len(res) < k:\n        res += s[i]\n        if i + 1 < len(s) and s[i + 1] == '2':\n            res += '22'\n        elif i + 1 < len(s) and s[i + 1] == '3':\n            res += '333'\n        elif i + 1 < len(s) and s[i + 1] == '4':\n            res += '4444'\n        elif i + 1 < len(s) and s[i + 1] == '5':\n            res += '5555'\n        elif i + 1 < len(s) and s[i + 1] == '6':\n            res += '6666'\n        elif i + 1 < len(s) and s[i + 1] == '7':\n            res += '7777'\n        elif i + 1 < len(s) and s[i + 1] == '8':\n            res += '8888'\n        elif i + 1 < len(s) and s[i + 1] == '9':\n            res += '9999'\n        i += 1\n    return res[:k]\n\nprint(solution(stdin.readline()))",
        "num_ids": 318
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:K]",
        "num_ids": 9
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = stdin[1]\n    S = stdin[0]\n    K = int(K)\n    if K > len(S):\n        return \"Sorry\"\n    for _ in range(K):\n        S = \"\".join(\n            str(int(S[0]) + int(S[1])),\n            str(int(S[2]) + int(S[3])),\n            str(int(S[4]) + int(S[5])),\n            str(int(S[6]) + int(S[7])),\n            str(int(S[8]) + int(S[9])),\n            str(int(S[10]) + int(S[11])),\n        )\n    return S[K]",
        "num_ids": 176
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.strip())\n    \n    n = 5 * 10 ** 15\n    count = 0\n    for i in range(n):\n        n = int(s[:10])\n        s = str(n * 10 ** 15 + s[10:])\n        if s[count] == '2':\n            s = s[:count] + '22' + s[count+1:]\n            count += 2\n        elif s[count] == '3':\n            s = s[:count] + '33' + s[count+1:]\n            count += 2\n        elif s[count] == '4':\n            s = s[:count] + '44' + s[count+1:]\n            count += 2\n        elif s[count] == '5':\n            s = s[:count] + '55' + s[count+1:]\n            count += 2\n        elif s[count] == '6':\n            s = s[:count] + '66' + s[count+1:]\n            count += 2\n        elif s[count] == '7':\n            s = s[:count] + '77' + s[count+1:]\n            count += 2\n        elif s[count] == '8':\n            s = s[:count] + '88' + s[count+1:]\n            count += 2\n        elif s[count] == '9':\n            s = s[:count] + '99' + s[count+1:]\n            count += 2\n        else:\n            count += 1\n    return s[:k]",
        "num_ids": 385
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = str(stdin)\n    for i in range(5, len(s)+1):\n        s = int(s)\n        s *= 1000000\n        s = str(s)\n        s = s.lstrip('0')\n    return s[k-1]\n\nprint(solution(input()))\n",
        "num_ids": 87
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    P = tuple(map(int, stdin.readline().split()))\n    for i in range(N):\n        for j in range(i + 1, N):\n            if P[i] > P[j]:\n                P = P[:i] + (P[i],) + P[i + 1:j] + (P[j],) + P[j + 1:]\n                break\n    return \"YES\" if P == sorted(P) else \"NO\"",
        "num_ids": 126
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split(' ')))\n    if P == sorted(P):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"",
        "num_ids": 76
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(x) for x in stdin.strip().split()]\n    if is_sorted(p):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef",
        "num_ids": 58
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split(\" \")))\n\n    permutation = True\n    for i in range(1, len(p)):\n        if p[i] < p[i - 1]:\n            permutation = False\n            break\n\n    if permutation:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "num_ids": 101
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[:-1]\n    n = int(n)\n\n    perm = stdin.readline()[:-1].split()\n    for i in range(n):\n        perm[i] = int(perm[i])\n\n    perm.sort()\n\n    for i in range(n):\n        if perm[i]!= i + 1:\n            return 'NO'\n    return 'YES'\n\nassert(solution('''5\n5 2 3 4 1''')) == 'YES'\nassert(solution('''3\n1 2 3''')) == 'NO'\nassert(solution('''8\n3 2 4 6 8 5 7 1''')) == 'YES'\nassert(solution('''8\n1 2 3 4 5 6 7 8''')) == 'NO'\n\nprint(solution('''2\n1 2'''))\nprint(solution('''6\n1 2 3 4 5 6 7'''))\nprint(solution('''8\n1 2 3 4 5 6 7 8'''))",
        "num_ids": 250
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    last = {}\n    i = 0\n    while i < n:\n        if arr[i] in last:\n            j = last[arr[i]]\n            arr[i], arr[j] = arr[j], arr[i]\n            last[arr[i]] = i\n        else:\n            last[arr[i]] = i\n        i += 1\n\n    if sorted(arr) == arr:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "num_ids": 139
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    p = p[::-1]\n    if p == list(range(1, N+1)):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 75
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    return 'YES' if p == sorted(p) else 'NO'",
        "num_ids": 48
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 2 or n > 50:\n        raise ValueError(\"invalid input\")\n\n    p = list(map(int, stdin.readline().split()))\n\n    if n!= len(p):\n        raise ValueError(\"invalid input\")\n\n    if n == 2:\n        return \"YES\" if p[0] < p[1] else \"NO\"\n\n    p.sort()\n    return \"YES\" if p == list(range(1, n + 1)) else \"NO\"\n",
        "num_ids": 129
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    result = \"\"\n    while n > 0:\n        result += str(n % 3)\n        n //= 3\n    return result[::-1]",
        "num_ids": 59
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = a[::-1]\n    b = []\n    for i in range(0,len(a)-1):\n        if int(a[i]) == 0:\n            b.append(a[i]+a[i+1])\n    return b\n\nassert(solution(\"3121\") == 2)\nassert(solution(\"6\") == 1)\nassert(solution(\"1000000000000000000000000000000000\") == 33)\nassert(solution(\"201920181\") == 4)\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\ndef",
        "num_ids": 135
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    digits = len(str(s))\n    if digits < 2:\n        return 0\n    if digits == 2:\n        return 1\n    return 2*(digits-2) + s % 3\n\n\n\n'''",
        "num_ids": 62
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    parts = []\n    while s > 0:\n        parts.append(str(s % 3))\n        s //= 3\n    return ''.join(parts[::-1])\n",
        "num_ids": 55
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    m = 0\n    for i in range(1, len(s)):\n        if (s[i] == s[i-1]) and s[i]!= '0':\n            continue\n        s1 = int(s[:i])\n        s2 = int(s[i:])\n        m = max(m, (s1*10 + s2) // 3)\n    return str(m)\n\n\n\ndef",
        "num_ids": 111
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n",
        "num_ids": 11
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    a = []\n    while n > 0:\n        a.append(n % 3)\n        n = n // 3\n    a.reverse()\n    return a.count(1)\n\n\nassert(solution(\"2\")) == 0\nassert(solution(\"3\")) == 1\nassert(solution(\"1234\")) == 2\nassert(solution(\"12345\")) == 4\nassert(solution(\"123456\")) == 4\nassert(solution(\"1234567\")) == 5\nassert(solution(\"1234567890\")) == 10\nassert(solution(\"12345678901234567890\")) == 22\nassert(solution(\"12341234123412341234\")) == 3\nassert(solution(\"123412341234123412341234\")) == 3\nassert(solution(\"1234123412341234123412341234\")) == 3\nassert(solution(\"1234567890123456789012345678901234567890\")) == 10\nassert(solution(\"12345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"12345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")) == 10\nassert(solution(\"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678",
        "num_ids": 1459
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible_by_3(number: int) -> bool:\n        if number == 0:\n            return True\n        return number % 3 == 0\n\n    def is_exact_three(number: int) -> bool:\n        return len(str(number)) == 3 and number!= 0\n\n    def is_not_doubled(number: int) -> bool:\n        return len(str(number)) == len(set(str(number)))\n\n    def get_number_of_divisible_by_3(number: int) -> int:\n        return sum(map(is_divisible_by_3, range(number, -1, -1)))\n\n    number = int(stdin)\n    divisible_by_3 = get_number_of_divisible_by_3(number)\n\n    if not is_exact_three(divisible_by_3):\n        return 0\n\n    if is_not_doubled(divisible_by_3):\n        return 1\n\n    return divisible_by_3\n",
        "num_ids": 243
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = ''.join(s.split())\n    n = len(s)\n    if n == 1:\n        return s\n    k = s.count('0')\n    if k == n:\n        return 1\n    max = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i:j] == s[i] * (j - i):\n                if j - i > max:\n                    max = j - i\n    return max + 1\n\n\ndef",
        "num_ids": 130
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in range(n):\n        x = a[i]\n        result = max(result, max(abs(a[i]*b[i]), abs(a[i]*d+b[i])))\n    return str(result)\n",
        "num_ids": 115
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    def zeroes(i: int) -> int:\n        count = 0\n        for j in a:\n            count += j * i\n        for j in b:\n            count += j\n        return count\n\n    max_zeroes = 0\n    for i in range(1, n + 1):\n        max_zeroes = max(max_zeroes, zeroes(i))\n    return str(max_zeroes)",
        "num_ids": 150
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    B = [int(x) for x in stdin.readline().strip().split(' ')]\n    C = [0] * N\n    for i in range(N):\n        C[i] = A[i] * B[i]\n    res = 0\n    for i in range(N):\n        if C[i] == 0:\n            res += 1\n    print(res)",
        "num_ids": 131
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    b = [int(x) for x in stdin.readline().split(' ')]\n    d = 0\n    while d < -n//2 or d > n//2:\n        d += 1\n    return d\n\nassert(solution('''5''') == 2)\nassert(solution('''3''') == 0)\nassert(solution('''4''') == 0)\nassert(solution('''3''') == 0)\nassert(solution('''13 37 39''') == 2)\nassert(solution('''1 2 -1''') == 2)\nassert(solution('''-6 -12 6''') == 3)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''0 0 0 0''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''0 0 0''') == 0)\nassert(solution('''1 2 -1''') == 2)\nassert(solution('''0 0 -1''') == 1)\nassert(solution('''-1 -2 -3''') == -3)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution('''1 2 3 4''') == 0)\nassert(solution('''1 2 3''') == 0)\nassert(solution",
        "num_ids": 1587
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    c = [a[i] * b[i] + b[i] for i in range(n)]\n    print(max(c.count(0), 0))\n",
        "num_ids": 95
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(x) for x in stdin.strip().split(' ')]\n    c = [int(a[i] * (d + b[i]) for i in range(n)) for d in range(max(1, -b[0] // a[0]), n)]\n    return str(max(0, max(c)))",
        "num_ids": 85
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    d = max(a + b)\n    c = [d * x + y for x, y in zip(a, b)]\n    return str(c.count(0))\n\nimport sys\n",
        "num_ids": 101
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    d = max(0, sum([a[i]*b[i]+b[i] for i in range(n)]))\n    return str(d)\n\n\ndef",
        "num_ids": 91
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    d = 0\n    c = [0] * n\n    for i in range(n):\n        c[i] = d * a[i] + b[i]\n    for i in range(n):\n        if c[i] == 0:\n            return str(i + 1)\n    return '0'\n\nprint(solution(input()))\n",
        "num_ids": 136
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    return 0",
        "num_ids": 10
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    s = []\n    for i in range(n):\n        if l[i]!= '?':\n            s.append(l[i])\n        if r[i]!= '?':\n            s.append(r[i])\n    print(s)\n    s.sort()\n    print(s)\n    if n % 2 == 0:\n        pairs = int(n / 2)\n    else:\n        pairs = int((n - 1) / 2)\n    print(pairs)\n    for i in range(pairs):\n        if s[i * 2 + 1] == '?':\n            s[i * 2 + 1] = s[i * 2]\n    print(s)\n    print(pairs)\n    return ''\n",
        "num_ids": 219
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_boots = stdin.readline().strip()\n    right_boots = stdin.readline().strip()\n    left_boots = list(left_boots)\n    right_boots = list(right_boots)\n    boots = []\n    for i in range(n):\n        boots.append(left_boots[i])\n        boots.append(right_boots[i])\n    boots = set(boots)\n    pairs = 0\n    for b in boots:\n        if b == '?':\n            pairs += 1\n    return str(pairs)\n",
        "num_ids": 161
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    \n    count = 0\n    max_count = 0\n    boots = set()\n    boots.add('?')\n    for c in l:\n        if c!= '?':\n            boots.add(c)\n    for c in r:\n        if c!= '?':\n            boots.add(c)\n    for b1 in boots:\n        for b2 in boots:\n            if b1!= b2:\n                if b1 in l and b2 in r:\n                    if b1 == '?':\n                        if b2 in l:\n                            count += 1\n                    elif b2 == '?':\n                        if b1 in r:\n                            count += 1\n                    else:\n                        if b1!= b2 and b1 == l[0] and b2 == r[0]:\n                            count += 1\n                elif b1 in l and b2 not in r:\n                    if b1 == '?':\n                        if b2 in l:\n                            count += 1\n                elif b1 not in l and b2 in r:\n                    if b2 == '?':\n                        if b1 in r:\n                            count += 1\n                elif b1!= b2 and b1 in l and b2 in r:\n                    if b1 == l[0] and b2 == r[0]:\n                        count += 1\n                elif b1!= b2 and b1 not in l and b2 not in r:\n                    if b1 in l and b2 in r:\n                        count += 1\n                if count > max_count:\n                    max_count = count\n                    max_boots = set()\n                    max_boots.add(b1)\n                    max_boots.add(b2)\n                elif count == max_count:\n                    max_boots.add(b1)\n                    max_boots.add(b2)\n                count = 0\n    print(max_count)\n    print(*max_boots)",
        "num_ids": 500
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass",
        "num_ids": 3
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n\n    if len(l)!= n or len(r)!= n:\n        return \"Incorrect input\"\n    \n    if len(l) == 0:\n        return \"Incorrect input\"\n    \n    if len(r) == 0:\n        return \"Incorrect input\"\n    \n    k = 0\n    a = {}\n    for i in range(n):\n        if l[i] not in a:\n            a[l[i]] = 0\n        if r[i] not in a:\n            a[r[i]] = 0\n        if l[i] == '?':\n            a[l[i]] = '?'\n            a[r[i]] = '?'\n        if r[i] == '?':\n            a[l[i]] = '?'\n            a[r[i]] = '?'\n        if l[i]!= r[i]:\n            a[l[i]] += 1\n            a[r[i]] += 1\n        else:\n            a[l[i]] += 1\n            a[r[i]] += 1\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if a[l[i-1]] == a[l[j-1]] and a[r[i-1]] == a[r[j-1]]:\n                k += 1\n    return k\n    \n    \n    ",
        "num_ids": 383
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def color(s: str) -> int:\n        return ord(s) - ord('a')\n\n    n = int(stdin.readline())\n    l = list(stdin.readline().strip())\n    r = list(stdin.readline().strip())\n    p = [[0] * n for i in range(n)]\n    for i in range(n):\n        if l[i]!= '?':\n            p[i][i] = 1\n        else:\n            p[i][i] = 0\n    for i in range(n - 1):\n        if l[i] == '?' and l[i + 1]!= '?':\n            p[i][i + 1] = 1\n        elif l[i]!= '?' and l[i + 1] == '?':\n            p[i][i + 1] = 1\n            p[i][i] = 0\n        elif l[i] == '?' and l[i + 1] == '?':\n            p[i][i + 1] = 0\n    for j in range(n - 1):\n        if r[j] == '?':\n            for i in range(n - 1):\n                if p[i][j] == 1:\n                    p[i][j + 1] = 1\n        else:\n            for i in range(n - 1):\n                if p[i][j] == 1:\n                    p[i][j + 1] = 0\n    c = 0\n    for i in range(n):\n        for j in range(n):\n            if p[i][j] == 1:\n                c += 1\n    return str(c)\n\nassert(solution('''10''') == '5')\nassert(solution('''codeforces''') == '5')\nassert(solution('''bambarbia''') == '5')\nassert(solution('''hellocode''') == '5')\nassert(solution('''code??????''') == '10')\nassert(solution('''??????test''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??????''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code???''') == '10')\nassert(solution('''code???''') == '10')\nassert(solution('''code???''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution('''code??''') == '10')\nassert(solution(",
        "num_ids": 1318
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    s = set()\n    for i in range(n):\n        for j in range(n):\n            if l[i] == r[j] == '?':\n                s.add((i, j))\n    m = len(s)\n    c = 0\n    for i in range(m):\n        for j in range(m):\n            if i!= j and (i, j) in s:\n                c += 1\n    return str(c)",
        "num_ids": 147
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    color_map = {}\n    for i in range(n):\n        key = l[i]\n        value = r[i]\n        if key not in color_map:\n            color_map[key] = set()\n        color_map[key].add(value)\n    ans = 0\n    for key in color_map:\n        if key == '?':\n            for key2 in color_map:\n                if key2!= '?' and key2 in color_map[key]:\n                    ans += 1\n        elif len(color_map[key]) == 1:\n            ans += 1\n    return str(ans)",
        "num_ids": 186
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l, r = stdin.strip().split()\n    l, r = l.strip().split('?'), r.strip().split('?')\n    return str(max(0, solution_dp(l, r, n)))\n\ndef",
        "num_ids": 66
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 150000:\n        return \"0\"\n    l = stdin[:n]\n    r = stdin[n:]\n\n    l_max, r_max = 0, 0\n\n    for i in range(1, n):\n        l_i, r_i = l[i], r[n - i - 1]\n        if l_i == r_i == '?':\n            l_max += 1\n            r_max += 1\n        elif l_i!= r_i:\n            if l_max >= r_max:\n                r_max += 1\n            else:\n                l_max += 1\n\n    return str(l_max + r_max)\n",
        "num_ids": 176
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    # assume no duplicates\n    if len(A) == 0:\n        return \"\"\n    \n    # sort the array\n    A.sort()\n    \n    # allocate array to hold block sizes\n    L = [0] * N\n    \n    # populate with block sizes\n    for i in range(N):\n        L[i] = A[i] - A[i - 1] if i > 0 else A[i]\n    \n    # allocate array to hold blocks\n    M = [0] * N\n    \n    # populate with blocks\n    for i in range(N):\n        start = max(0, i - M[i - 1] - 1) if i > 0 else 0\n        M[i] = A[i] - A[start]\n    \n    # find the max block length\n    M_max = max(M)\n    \n    # find the blocks with maximum length\n    blocks = []\n    for i in range(N):\n        if M[i] == M_max:\n            blocks.append((i, i + M_max))\n    \n    # find the sets of blocks\n    S = set()\n    for i in range(len(blocks)):\n        for j in range(i + 1, len(blocks)):\n            if blocks[i][0]!= blocks[j][0] and blocks[i][1]!= blocks[j][1] and blocks[i][0] <= blocks[j][0] and blocks[i][1] >= blocks[j][1]:\n                S.add((blocks[i][0], blocks[i][1]))\n                S.add((blocks[j][0], blocks[j][1]))\n    \n    return str(len(S)) + \"\\n\" + \"\\n\".join(f\"{a} {b}\" for a, b in S)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1280
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Step 1: Merge adjacent elements with the same sum\n    def merge(arr: List[int]) -> List[int]:\n        sum_arr = [0]*(len(arr)+1)\n        for i in range(len(arr)):\n            sum_arr[i+1] = sum_arr[i] + arr[i]\n        output = []\n        for i in range(len(arr)):\n            if i == 0:\n                output.append(arr[i])\n                continue\n            if sum_arr[i] == sum_arr[i-1]:\n                output.append(sum_arr[i-1])\n            else:\n                output.append(arr[i])\n        return output\n    \n    # Step 2: Use merge sort to break a into 2 disjoint pieces\n    def disjoint_merge(left: List[int], right: List[int]) -> List[int]:\n        i = j = 0\n        output = []\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                output.append(left[i])\n                i += 1\n            else:\n                output.append(right[j])\n                j += 1\n        while i < len(left):\n            output.append(left[i])\n            i += 1\n        while j < len(right):\n            output.append(right[j])\n            j += 1\n        return output\n        \n    a = merge(a)\n    \n    # Step 3: Find the max number of blocks\n    max_block = 1\n    left = [0]\n    for i in range(1, len(a)):\n        if a[i] == a[i-1]:\n            left[-1] += 1\n        else:\n            left.append(0)\n    for i in range(len(left)):\n        max_block = max(max_block, left[i]+i)\n    \n    # Step 4: Merge the separate parts with a recursive merge sort\n    def merge_recursive(arr: List[int], left: List[int], right: List[int]) -> List[int]:\n        if len(left) == 0:\n            return arr\n        elif len(right) == 0:\n            return left\n        \n        merged = []\n        i, j = 0, 0\n        while len(merged) < len(left) + len(right):\n            if left[i] < right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n            if len(merged) == len(left) + len(right):\n                break\n        return merged + left[i:] + right[j:]\n    \n    def merge_sort(arr: List[int], left: List[int], right: List[int]) -> List[int]:\n        if len(left) == 0 or len(right) == 0:\n            return arr\n        \n        if left[0] < right[0]:\n            return [left[0]] + merge_sort(left[1:], right, arr)\n        else:\n            return [right[0]] + merge_sort(left, arr, right[1:])\n    \n    left = merge_sort(a, [], [])\n    right = merge_sort(a, left, [])\n    \n    # Step 5: Use the merge algorithm to merge together the 2 separate parts\n    return str(max_block) +'' +''.join(map(str, left)) +'' +''.join(map(str, right))",
        "num_ids": 886
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 1\n    l = []\n    r = []\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            k += 1\n        else:\n            if len(l) == 0:\n                l.append(i)\n                r.append(i)\n            else:\n                l.append(i)\n                r.append(i)\n    if k > 1:\n        print(k)\n        print(*l)\n        print(*r)\n    else:\n        print(0)\n    return \"\"\n",
        "num_ids": 168
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split(' ')))\n    unique_a = set(a)\n    max_len = 0\n    max_len_block = []\n    for i in unique_a:\n        if a.count(i) > max_len:\n            max_len = a.count(i)\n            max_len_block = [i]\n        elif a.count(i) == max_len:\n            max_len_block.append(i)\n    # print(max_len, max_len_block)\n    max_len = len(max_len_block)\n    return str(max_len) + '\\n' + '\\n'.join(map(str, max_len_block))\n\n\ndef",
        "num_ids": 204
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n",
        "num_ids": 4
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == arr[i + 1]:\n                k += 1\n    return str(k)\n",
        "num_ids": 96
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The number of blocks are the same for all the given sequences. Therefore, for each pair of indices (l_i, r_i), we can find a set of block such that:\n    for all pairs of blocks (l_j, r_j) where l_j < l_i or r_j < l_i\n    the sum of the elements in the blocks is the same.\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    \n    def sum_block(s: int, e: int) -> int:\n        return sum(arr[s:e])\n\n    blocks = []\n    for i in range(0, n):\n        if i > 0:\n            blocks.append([sum_block(i, j) for j in range(i, n)])\n    \n    unique_block = [x for x in blocks if blocks.count(x) == 1]\n    return str(len(unique_block))\n\ndef",
        "num_ids": 242
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, arr = stdin.splitlines()\n    arr = list(map(int, arr.split()))\n    n = len(arr)\n    blocks = []\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum(arr[i:j + 1]):\n                blocks.append((i, j))\n    \n    blocks.sort(key=lambda x: (x[1] - x[0], x[0]))\n    \n    print(len(blocks))\n    \n    for i, j in blocks:\n        print(i + 1, j)",
        "num_ids": 157
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = list(map(int, stdin.readline().strip().split(\" \")))\n\n    def gen_blocks(s, n):\n        blocks = []\n        for i in range(1, n):\n            blocks.append((i, i))\n        return blocks\n    blocks = gen_blocks(s, n)\n\n    def get_pairs(s, blocks):\n        pairs = []\n        for i, (l, r) in enumerate(blocks):\n            if s[l] + s[r] == s[l+1] + s[r+1]:\n                pairs.append((i, i+1))\n        return pairs\n\n    pairs = get_pairs(s, blocks)\n    print(len(pairs))\n    for l, r in pairs:\n        print(\"{} {}\".format(l, r))\n    return \"\"",
        "num_ids": 214
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    block_sums = [0] * (n + 1)\n    block_sums[0] = a[0]\n    for i in range(1, n):\n        block_sums[i] = block_sums[i - 1] + a[i]\n\n    max_blocks = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            block_sum = block_sums[j] - block_sums[i - 1]\n            if block_sum == j - i + 1 and max_blocks < j - i + 1:\n                max_blocks = j - i + 1\n                print(' '.join([str(x) for x in range(i, j + 1)]))\n    return str(max_blocks)",
        "num_ids": 216
    }
]