[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for i in range(n - 1):\n        edges.append(tuple(int(x) for x in stdin.split()))\n\n    m = len(edges)\n    edges = sorted(edges)\n    graph = {}\n\n    for edge in edges:\n        if edge[0] in graph:\n            graph[edge[0]].append(edge[1])\n        else:\n            graph[edge[0]] = [edge[1]]\n\n        if edge[1] in graph:\n            graph[edge[1]].append(edge[0])\n        else:\n            graph[edge[1]] = [edge[0]]\n\n    max_count = 0\n    a, b, c = None, None, None\n    for i in range(m):\n        a, b = edges[i][0], edges[i][1]\n        if len(graph[a]) == 1:\n            if len(graph[b]) == 1:\n                c = edges[i][1]\n            else:\n                c = edges[i][0]\n        else:\n            if len(graph[b]) == 1:\n                c = edges[i][0]\n            else:\n                continue\n\n        if len(graph[a]) > 1 and len(graph[b]) > 1:\n            max_count = max(max_count, len(graph[a]) + len(graph[b]) - 3)\n        elif len(graph[a]) == 1 and len(graph[b]) == 1:\n            max_count = max(max_count, 2)\n\n    return str(max_count) + \" \" + str(a) + \" \" + str(b) + \" \" + str(c)\n\n\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '5 1 8 6', \"Simple 1\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 2\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 3\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 4\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 5\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 6\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 7\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 8\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 9\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 10\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 11\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 12\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '4 6\\n'\n    '3 7\\n'\n    '3 8')) == '1 8 6', \"Simple 13\"\nassert (solution(\n    '8\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.readline().split()]\n        edges.append((a, b))\n    edges = sorted(edges)\n    a, b = edges[-1]\n    c = 1\n    for _ in range(2):\n        c += 1\n        a, b = edges[0]\n        for i in range(1, n):\n            if edges[i][0] > edges[i][1]:\n                a, b = edges[i]\n            else:\n                c += 1\n                a, b = edges[i][0], edges[i][1]\n        a, b = edges[0]\n        print(c)\n        print(a, b)\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n\nn = int(sys.stdin.readline())\nedges = [tuple(map(int, line.split())) for line in sys.stdin.readlines()]\nedges = {edge: 0 for edge in edges}\nprint(solution(edges))\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:] if len(line) > 0]\n    print(res)\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    n = int(n)\n    a = 0\n    b = 0\n    c = 0\n    for i in stdin.split('\\n')[1:]:\n        a, b = int(i.split()[0]), int(i.split()[1])\n        if a == b:\n            a = 0\n            b = 0\n            c = 0\n            continue\n        if c == 0:\n            c = a\n            a = b\n        elif c < a:\n            a = c\n            c = b\n        elif c < b:\n            b = c\n        c = 0\n    return a, b, c\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\nMore examples in \"examples.txt\"\n\nMore test cases in \"tests.txt\"\n\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nodes = [[] for i in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        nodes[a - 1].append(b - 1)\n        nodes[b - 1].append(a - 1)\n    visited = [0 for i in range(n)]\n    curr_path = [0]\n    ans = -1\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = 1\n            curr_path = []\n            dfs(i, curr_path, visited, nodes)\n    return str(ans)\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = [tuple(int(x) for x in line.strip().split(' ')) for line in stdin.splitlines()[1:]]\n    edges = sorted(edges)\n    d = {}\n    for u, v in edges:\n        if u not in d:\n            d[u] = []\n        d[u].append(v)\n    res = 0\n    for v in range(n):\n        if v not in d:\n            res += 1\n            continue\n        for u in d[v]:\n            if v in d[u]:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    edges = stdin[1:n]\n    edges = [(int(edge.split()[0]), int(edge.split()[1])) for edge in edges]\n    n = len(edges)\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        graph[edges[i][0]].append(edges[i][1])\n    max_path = 0\n    for i in range(n):\n        for j in range(i, n):\n            path = nx.shortest_path(graph, i, j)\n            if len(path) > max_path:\n                max_path = len(path)\n    return str(max_path)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    edges = [map(int, stdin.split()) for _ in range(n - 1)]\n\n    first_edges = find_all_first_edges(edges)\n    max_edges = get_max_edges(first_edges)\n\n    res = len(max_edges)\n\n    for f in first_edges:\n        if f in max_edges:\n            res = len(first_edges)\n\n    print(res)\n\n    for i in range(3):\n        print(max_edges[i], end=\" \")\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_divisors = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    num_of_divisors_to_have = num_of_divisors - 2\n    for x in range(1, (10**4)//2):\n        if num_of_divisors_to_have == 0:\n            break\n        for y in range(x+1, 10**4):\n            if num_of_divisors_to_have == 0:\n                break\n            if all(x % divisor == 0 for divisor in divisors):\n                if all(y % divisor == 0 for divisor in divisors):\n                    print(x, y)\n                    num_of_divisors_to_have -= 1"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = [], []\n    for i in range(n):\n        d = int(stdin.readline())\n        if d % 2:\n            x.append(d)\n        else:\n            y.append(d)\n    for i in sorted(x):\n        for j in sorted(y):\n            if (i + j) % 2:\n                break\n        else:\n            return str(i) +'' + str(j)\n    return \"-1\""
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [int(x) for x in stdin.split()]\n    divisors_count = Counter(divisors)\n    divisors_count = sorted(divisors_count, key=divisors_count.get, reverse=True)\n    divisors_count_count = Counter(divisors_count)\n    divisors_count_count = sorted(divisors_count_count, key=divisors_count_count.get, reverse=True)\n    x, y = divisors_count_count[0], divisors_count_count[1]\n    print(x, y)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n2 2\\n\")\n    '2 1'\n    >>> solution(\"1\\n1\\n\")\n    '1 1'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # If the numbers are divisors, then the number is divisor of both of them\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    if len(divisors)!= n:\n        raise ValueError(\"Invalid number of divisors.\")\n    for x in divisors:\n        if x not in divisors:\n            raise ValueError(\"Divisor must be a divisor of all numbers.\")\n    divisors.sort()\n    x = divisors[0]\n    y = divisors[1]\n    for i in range(2, n):\n        d = divisors[i]\n        if d % x == 0 and d % y == 0:\n            return str(x) + \" \" + str(y)\n        elif d % x == 0:\n            y *= d // x\n        else:\n            x *= d // y\n    return \"No solution\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        l[l.index(i)] = i\n    return''.join(map(str, l))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = list(map(int, stdin.readline().split()))\n    result = None\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if i * j in divisors:\n                result = (i, j)\n                break\n        if result is not None:\n            break\n    if result is None:\n        print(\"No answer\")\n    else:\n        print(*result)\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    answer = 0\n    s = set()\n    for d in divisors:\n        if d not in s:\n            s.add(d)\n            if divisors.count(d) > 1:\n                answer = d\n                break\n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, get_primes(int(stdin.readline()))))\n\nassert(solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8')\n'''\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split(\" \"))\n    table = [list(map(int, stdin.strip().split(\" \"))) for _ in range(n)]\n\n    def sums(i, j):\n        if i == 0:\n            return 0\n        return sums(i - 1, j - 1) + table[i][j]\n\n    best_sum = 0\n    for i in range(m // 2):\n        for j in range(1, n):\n            if sums(j, i) % k == 0:\n                best_sum = max(best_sum, sums(j, i))\n\n    return str(best_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nimport sys\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    s = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j < m/2:\n                s[i][j] = a[i][j]\n            else:\n                s[i][j] = a[i][j] - a[i][m-1-j]\n    for i in range(n):\n        if sum(s[i]) % k == 0:\n            return str(sum(s[i]))\n    return \"0\""
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(input)) == '24'\nassert(solution(input2)) == '56'\nassert(solution(input3)) == '28'\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    result = 0\n    for i in range(n):\n        for j in range(0, m, 2):\n            result = max(result, max(a[i][j:j + k]))\n    return str(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    a = a[:m//2]\n\n    return max([sum(x) for x in a]) % k\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for i in range(n)]\n    sums = [[0] * m for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j <= m // 2:\n                sums[i][j] = sum(matrix[i][j:j + 2])\n            else:\n                sums[i][j] = sum(matrix[i][j - m // 2:j + m // 2])\n    max_sum = 0\n    for i in range(n):\n        if sum(sums[i]) % k == max_sum:\n            max_sum = max(max_sum, sum(sums[i]))\n        elif sum(sums[i]) > max_sum:\n            max_sum = sum(sums[i])\n    return str(max_sum)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(stdin) == '')\nassert(solution('1 2 3 4\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2 4\\n5 1 1 2"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    row_sums = [0] * n\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        row_sum = 0\n        for i in range(m):\n            if i % 2 == 0:\n                row_sum += row[i]\n        row_sums[_] = row_sum\n    \n    max_sum = row_sums[0]\n    for i in range(1, n):\n        max_sum += (row_sums[i] - row_sums[i - 1]) % k\n    return str(max_sum)\n\nassert(solution(input()) == '56')\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 1\n    for i in range(1, len(a)):\n        if a[i] == a[i-1]:\n            k += 1\n        else:\n            break\n    return k\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = sorted(a, reverse=True)\n    l = len(b)\n    if l == 1:\n        return \"L\"\n    for i in range(l-1):\n        if b[i] < b[i+1]:\n            return \"L\"\n    return \"R\"\n\nimport sys\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join('L' if a[0] > a[-1] else 'R' for a in stdin.split(' '))\n\nFor the remaining examples, try to solve the problem in a single-line, using two or more techniques.\n\n\n------Googleable Linkedin\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    'error'\n    >>> solution(\"1\")\n    'error'\n    >>> solution(\"1 2\")\n    'error'\n    >>> solution(\"1 2 4\")\n    'error'\n    >>> solution(\"1 2 4 3\")\n    'error'\n    >>> solution(\"1 2 4 3 2\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 39\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 39 40\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 39 40 41\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 39 40 41 42\")\n    'error'\n    >>> solution(\"1 2 4 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n):\n        left, right = i, i\n        while left > 0 and a[left - 1] >= a[left]:\n            left -= 1\n        while right < n - 1 and a[right + 1] >= a[right]:\n            right += 1\n        k = max(k, right - left + 1)\n    return k\n\nprint(solution('7'))\n\"\"\"\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().split()]\n    result = [0]*n\n    result[0] = 1\n    for i in range(n):\n        if i == 0:\n            if arr[i] > arr[i+1]:\n                result[i] = 1\n        elif i == n-1:\n            if arr[i] > arr[i-1]:\n                result[i] = 1\n        else:\n            if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                result[i] = 1\n    result[n-1] = n\n    return ''.join(result)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if sum(a) % n!= 0:\n        return -1\n    b = [a[0]]\n    for i in range(1, n):\n        if a[i] == 0:\n            b.append(0)\n        else:\n            x = min(a[i], a[i] - n)\n            b.append(x)\n            a[i] -= x\n            a[i - 1] += x\n    return''.join(map(str, b))\n\nassert(solution('''\n6\n1 4 4 7 4 1\n''') == '3')\nassert(solution('''\n5\n2 2 5 2 5\n''') == '3')\nassert(solution('''\n4\n1 3 3 7\n''') == '-1')\nassert(solution('''\n2\n2 8\n''') == '3')\nassert(solution('''\n4\n1 3 3 7\n''') == '-1')\nassert(solution('''\n5\n2 2 5 2 5\n''') == '3')\nassert(solution('''\n7\n1 1 1 1 1 1 1\n''') == '7')\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == '7')\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == '7')\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1\n''') == '8')\nassert(solution('''\n11\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '7')\nassert(solution('''\n100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 0\n    d = 0\n    s = set(lst)\n    for i in s:\n        if lst[0] > 0:\n            d += i\n        elif lst[0] < 0:\n            d -= i\n    if d == 0:\n        return -1\n    return d"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    arr.sort()\n    result = -1\n    for i in range(n):\n        if arr[i] > 0:\n            for j in range(i, n):\n                if arr[i] + j <= arr[j]:\n                    if j - i > result:\n                        result = j - i\n    return str(result)\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return '0'\n    a = list(map(int, stdin.readline().split()))\n\n    m = max(a)\n    if m == 0:\n        return '0'\n\n    l = []\n\n    for i in a:\n        if i % m == 0:\n            l.append(i)\n        else:\n            l.append(i + m)\n            l.append(i - m)\n            m = max(l)\n            l.remove(m)\n\n    if len(l) == 0:\n        return '-1'\n    else:\n        return str(m)\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return '-1'\n\n    a = list(map(int, stdin.split()))\n\n    d = a[1] - a[0]\n    for i in range(1, n):\n        if a[i] - a[i-1]!= d:\n            return str(d)\n    return '-1'\n\nassert(solution(stdin) == stdin)\nassert(solution('1 2 3') == '3')\nassert(solution('2 2 1') == '1')\nassert(solution('2 8') == '3')\nassert(solution('2 2 3 1 3') == '1')\nassert(solution('2 3 3') == '-1')\nassert(solution('2 4 3 3 3 3 3') == '-1')\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = 1\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            d += a[i]\n        elif a[i] > a[i - 1]:\n            d -= a[i]\n        else:\n            continue\n\n    return str(d) if d >= 0 else '-1'"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] < 0:\n                continue\n            res = max(res, max(a[i], -a[j]))\n    return str(res if res!= 0 else -1)\n\n\nassert(solution(input_data) == '3')\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = stdin.replace('\\n', '')\n    if not stdin:\n        return ''\n\n    n = int(stdin.split(' ')[0])\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    if not a:\n        return ''\n\n    m = a[0]\n    for i in range(1, n):\n        if a[i] < 0:\n            m = -1\n            break\n        if a[i] > m:\n            m = a[i]\n\n    return str(m)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n    seq_copy = seq[:]\n    max_value = max(seq)\n    max_value_index = seq.index(max_value)\n    i = 0\n    while i < n:\n        if max_value == seq[max_value_index]:\n            seq_copy[i] += max_value\n            seq_copy[max_value_index] -= max_value\n            max_value_index += 1\n            if max_value_index == n:\n                max_value_index -= n\n            else:\n                max_value_index = 0\n            i += 1\n        else:\n            break\n    if all(seq_copy[i] == seq[i] for i in range(n)):\n        return str(max_value)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    arr = list(map(int, stdin.split(' ')))\n    arr = list(filter(lambda x: x >= 0, arr))\n    arr = set(arr)\n    if len(arr) == 0:\n        return -1\n    arr = list(arr)\n    arr.sort()\n    if arr[0] >= 0:\n        return arr[0]\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - min_val > min_val:\n            return -1\n        min_val = min(arr[i], min_val)\n    return min_val\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return \"YES\" if is_partially_visible(map(int, stdin[0].split(\", \")), map(int, stdin[1].split(\", \")), map(int, stdin[2].split(\", \")), map(int, stdin[3].split(\", \"))) else \"NO\"\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = tuple(map(int, stdin.split(' ')))\n    x_3, y_3, x_4, y_4 = tuple(map(int, stdin.split(' ')))\n    x_5, y_5, x_6, y_6 = tuple(map(int, stdin.split(' ')))\n    if x_1 == x_2 == x_3 == x_4 == x_5 == x_6 == 0:\n        return 'NO'\n    elif x_1 < x_2 < x_3 < x_4 < x_5 < x_6:\n        return 'YES'\n    elif x_1 < x_2 < x_3 < x_4 < x_5 < x_6:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    if (x_1 <= x_3 <= x_2 and x_4 <= x_5 <= x_6 and\n            y_1 <= y_3 <= y_2 and y_4 <= y_5 <= y_6):\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\ntry:\n    assert (solution('''2 2 4 4\n1 1 3 5\n3 1 5 5''') == \"NO\")\n    assert (solution('''2 2 4 4\n1 1 3 5\n3 1 5 5''') == \"YES\")\n    assert (solution('''5 2 10 5\n3 1 7 6\n8 1 11 7\n''') == \"YES\")\nexcept AssertionError:\n    print(\"Use stdin.\")\n    pass\n'''\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    if (x1 <= x3 <= x4 <= 10**6 and y1 <= y3 <= y4 <= 10**6 and\n            x1 <= x5 <= x6 <= 10**6 and y1 <= y5 <= y6 <= 10**6):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_3 > x_4:\n        x_3, x_4 = x_4, x_3\n    if y_3 > y_4:\n        y_3, y_4 = y_4, y_3\n    if x_5 > x_6:\n        x_5, x_6 = x_6, x_5\n    if y_5 > y_6:\n        y_5, y_6 = y_6, y_5\n    if (x_1 < x_3 and y_1 < y_3) or (x_1 < x_4 and y_1 < y_4) or (x_1 < x_5 and y_1 < y_5) or (x_1 < x_6 and y_1 < y_6) or (x_2 < x_3 and y_2 < y_3) or (x_2 < x_4 and y_2 < y_4) or (x_2 < x_5 and y_2 < y_5) or (x_2 < x_6 and y_2 < y_6):\n        return \"NO\"\n    return \"YES\"\n\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution("
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    start = n\n    count = 0\n    while start!= 0:\n        count += 1\n        start = start - 1\n        while start % 10 == 0:\n            start = start / 10\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    return str(len(reachable(N)))\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    numbers = []\n    for i in range(1, n + 1):\n        numbers.append(i)\n    while True:\n        numbers = [i for i in numbers if i % 10 == 0 or i % 10 > 0]\n        if len(numbers) == n:\n            return str(len(numbers))"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(input()))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seen = [False for _ in range(n + 1)]\n    seen[0] = True\n    seen[1] = True\n    if n == 0:\n        return \"1\"\n    for i in range(2, n + 1):\n        count = 0\n        for j in range(1, i + 1):\n            if not seen[j] and i % j == 0:\n                count += 1\n        seen[i] = True\n        if count >= 2:\n            seen[i] = False\n    return str(sum(seen))\n\n\n\nassert solution(input()) == \"200\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(str(len(set(x for x in range(int(stdin)) if len(str(x)) == len(str(x+1))))))"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    count = 0\n    def f(n):\n        nonlocal count\n        if n == 0: return\n        if n % 10 == 0:\n            f(n // 10)\n            return\n        for i in range(1, 10):\n            if n - i >= 0 and f(n - i):\n                return\n        count += 1\n    f(n)\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\nassert(solution('1098')) == '20'\nassert(solution('10')) == '19'"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n + 1):\n        if len(str(i)) == len(str(i + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(reachable(n))\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    friends = [int(x) for x in stdin.readline().strip().split()]\n    n = len(friends)\n    gifts = [0] * n\n    for i in range(n):\n        if friends[i] == 0:\n            gifts[i] = 0\n        else:\n            gifts[i] = n - friends[i]\n    return''.join(str(gift) for gift in gifts)\n\nassert(solution('''\n5\n5 0 0 2 4\n''')) == '5 3 1 2 4'\nassert(solution('''\n7\n7 0 0 1 4 0 6\n''')) == '7 3 2 1 4 5 6'\nassert(solution('''\n7\n7 4 0 3 0 5 1\n''')) == '7 4 2 3 6 5 1'\nassert(solution('''\n5\n2 1 0 0 0\n''')) == '2 1 4 5 3'\n\nprint(solution('''\n5\n5 0 0 2 4\n'''))\nprint(solution('''\n7\n7 0 0 1 4 0 6\n'''))\nprint(solution('''\n7\n7 4 0 3 0 5 1\n'''))\nprint(solution('''\n5\n2 1 0 0 0\n'''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    friends = list(map(int, stdin.readline().strip().split()))\n    arr = [0] * n\n    for i in range(n):\n        if friends[i]!= 0:\n            arr[i] = friends[i]\n    arr.sort()\n\n    return''.join(str(x) for x in arr)\n\nassert solution('1\\n1\\n') == '1'\nassert solution('2\\n1\\n') == '2 1'\nassert solution('4\\n1 1 0 0\\n') == '4 3 1 2'\nassert solution('7\\n1 1 0 0 0 6\\n') == '7 3 2 1 4 5 6'"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = list(map(int, stdin.split(' ')))\n    g = set(range(n))\n    for i in range(n):\n        if f[i] == 0:\n            g.discard(i)\n    g = list(g)\n    g.sort()\n    return''.join(map(str, g))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of friends\n    n = int(stdin.readline())\n    # Get the list of the friends' values\n    f_list = list(map(int, stdin.readline().split()))\n    # We don't know who each friend wants to give\n    # the gift to, so we will replace each\n    # value by 0\n    for i in range(n):\n        if f_list[i] == 0:\n            f_list[i] = -1\n    # Now we know who each friend wants to give\n    # the gift to, so we will replace the\n    # value of each friend by the number of\n    # friends he wants to give the gift to\n    for i in range(n):\n        f_list[f_list[i]] = i\n    # We know who each friend wants to give\n    # the gift to, so we will replace the\n    # value of each friend by the number of\n    # friends he wants to give the gift to\n    for i in range(n):\n        f_list[i] = f_list[i] - i\n    return''.join(map(str, f_list))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = [int(x) for x in stdin.readline().strip().split()]\n    f = sorted(f)\n    max_f = max(f)\n    f_dict = {}\n    for i, f in enumerate(f):\n        if f!= 0:\n            if f not in f_dict:\n                f_dict[f] = [i]\n            else:\n                f_dict[f].append(i)\n    f_dict = sorted(f_dict.items(), key=lambda x: len(x[1]), reverse=True)\n    f_dict = [x[0] for x in f_dict]\n    for i in range(len(f_dict)):\n        if f_dict[i] == i:\n            f_dict[i] = max_f\n    return''.join(map(str, f_dict))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    f = stdin.readline().strip()\n    f = [int(x) for x in f.split(' ')]\n    m = {}\n    for i in range(0, len(f)):\n        if f[i] == i:\n            if i in m:\n                m[i] += 1\n            else:\n                m[i] = 1\n    f = [x if x!= i else 0 for i, x in enumerate(f)]\n    result = [str(f[0])]\n    for i in range(1, len(f)):\n        if f[i] == 0:\n            if f[i-1] == 0:\n                result.append(str(i))\n            else:\n                if i in m:\n                    result.append(str(i))\n        else:\n            if f[i-1] == 0:\n                result.append(str(i))\n            else:\n                if i in m:\n                    result.append(str(i))\n    return''.join(result)\n\n\nassert(solution('''5''') == '''5 3 1 2 4''')\nassert(solution('''7''') == '''7 3 2 1 4 5 6''')\nassert(solution('''7''') == '''7 4 2 3 6 5 1''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''5''') == '''2 1 4 5 3''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''7''') == '''2 1 4 5 3 6''')\nassert(solution('''6''') == '''"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n    return''.join(str(friends.index(i) + 1) if i else '0' for i in range(n))\n\nassert solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4'\nassert solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\nassert solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'\nassert solution('''5\n2 1 0 0 0\n''') == '2 1 4 5 3'\nprint(solution('''15\n11 7 22 1 22 22 11 22 22\n'''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = tuple(int(n) for n in stdin.split())\n    friends = list(filter(lambda n: n!= 0, friends))\n    a, b = Counter(friends), Counter([1] * n)\n    for i in range(1, n):\n        a[i] += a[i - 1]\n        b[i] += b[i - 1]\n    result = []\n    for i in range(n):\n        result.append(b[i])\n        if a[i] > 1:\n            result.append(a[i] - 1)\n    return''.join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 3 4\"\n    if n == 4:\n        return \"1 3 2 4\"\n\n    answer = []\n\n    nf = stdin.readline().strip().split()\n    nf = [int(num) for num in nf]\n\n    answer.append(str(nf.count(0)))\n\n    for i in range(1, len(nf)):\n        if nf[i] == 0:\n            continue\n        if nf[i] == i:\n            answer.append(str(i))\n        else:\n            answer.append(str(nf[i]) + \" \" + str(i))\n\n    return''.join(answer)\n\n\nassert(solution(input()) == \"3 2 1 4 4 3\")\nassert(solution(input(\"\")) == \"2 1 4 5 3\")\nassert(solution(input(\"\\n\")) == \"2 1 4 5 3\")\nassert(solution(input(\"\\n\\n\")) == \"2 1 4 5 3\")\nassert(solution(input(\"\\n\\n\\n\")) == \"2 1 4 5 3\")\nassert(solution(input(\"\\n\\n\\n\\n\\n\")) == \"2 1 4 5 3\")\nassert(solution(input(\"\\n\\n\\n\\n\\n\\n\\n\\n\")) == \"2 1 4 5 3\")\nassert(solution(input(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")) == \"2 1 4 5 3\")\nassert(solution(input(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")) == \"2 1 4 5 3\")\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    frnds = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(n):\n        if frnds[i] == i:\n            continue\n        if frnds[i] == 0:\n            continue\n        if frnds[i] > n:\n            continue\n        if i!= frnds[i]:\n            frnds[i], frnds[frnds[i]] = frnds[frnds[i]], i\n    return''.join(map(str, frnds))\n\nassert str(solution(\"\"\"5\n5 0 0 2 4\n\"\"\")) == str(\"5 3 1 2 4\\n\")\nassert str(solution(\"\"\"7\n7 0 0 1 4 0 6\n\"\"\")) == str(\"7 3 2 1 4 5 6\\n\")\nassert str(solution(\"\"\"7\n7 4 0 3 0 5 1\n\"\"\")) == str(\"7 4 2 3 6 5 1\\n\")\nassert str(solution(\"\"\"5\n2 1 0 0 0\n\"\"\")) == str(\"2 1 4 5 3\\n\")\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    n, k = a[0], a[1]\n    a = a[2:]\n    a = sorted(a)\n    colors = []\n    for i in range(k):\n        colors.append(i)\n    for i in range(n-k+1):\n        if i == 0:\n            if a[i]!= a[i+k-1]:\n                return \"NO\"\n        else:\n            if a[i] == a[i+k-1]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k > n:\n        return 'NO'\n\n    i = 0\n    while i < n:\n        if a[i] in a[:i]:\n            return 'NO'\n        i += 1\n\n    return 'YES'\n\nprint(solution('4 2'))\nprint(solution('5 2'))\nprint(solution('5 2'))\nprint(solution('2 1 1 2 1'))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    if n > k:\n        return \"NO\"\n    elif n == k:\n        return \"YES\"\n    else:\n        return \"YES\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = set(a)\n    if len(s) < k:\n        return \"NO\"\n    for c in range(k):\n        for i in range(len(a)):\n            a[i] = (a[i] + (c+1)) % k\n    return \"YES\" + \"\\n\" + \"\\n\".join(map(str, a))"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, k = [int(x) for x in stdin[0].split()]\n    a = [int(x) for x in stdin[1].split()]\n    colors = set()\n    for i in range(1, k + 1):\n        colors.add(i)\n    for i in a:\n        if i in colors:\n            colors.remove(i)\n        else:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, k = map(int, stdin.readline().strip().split())\n        lst = list(map(int, stdin.readline().strip().split()))\n        if len(set(lst)) < k:\n            print('NO')\n        else:\n            for i in range(1, k+1):\n                if i not in lst:\n                    print('NO')\n                    break\n            else:\n                print('YES')\n                tmp = [0] * k\n                for num in lst:\n                    tmp[num-1] += 1\n                print(*tmp)"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.readline().split(' ')]\n    a = [int(x) for x in stdin.readline().split(' ')]\n    ans = ['NO']\n    if k == 1:\n        ans = ['YES']\n    elif len(a) < k:\n        ans = ['NO']\n    else:\n        k = len(a) - 1\n        while k >= 0:\n            if len(set(a[:k + 1])) == k + 1:\n                ans = ['YES']\n                break\n            k -= 1\n    return '\\n'.join(ans)\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n < k or sum(a) % k!= 0:\n        print('NO')\n    else:\n        print('YES')\n        for i in range(1, k+1):\n            c = set()\n            for ai in a:\n                if i == ai:\n                    c.add(i)\n            if len(c) == i:\n                print(*[str(x) for x in sorted(c)])\n            elif len(c) > i:\n                print('NO')\n                break\n        \n        \nTest.assert_equals(solution('''1 3\n1 2 3'''), \"NO\", \"First example\")\nTest.assert_equals(solution('''2 3\n2 1 3'''), \"YES\", \"Second example\")\nTest.assert_equals(solution('''3 3\n3 2 1'''), \"NO\", \"Second example\")\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n, x, y = int(input_list[0]), int(input_list[1]), int(input_list[2])\n    nums = list(map(int, input_list[3]))\n    size = len(nums)\n    x_mask = 1 << x\n    result = 0\n    for i in range(size):\n        result += nums[i] * x_mask\n        if (result & x_mask) == 0:\n            result += 1\n        result = result >> y\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of operations (modulo 10^9 + 7) required to obtain the remainder of the number given by stdin\n    '''\n    pass\n\nimport sys"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    n, y = min(n, y), max(n, y)\n    remainder = 10 ** y % 10 ** x\n    return str(n - remainder + 1)\n\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"2\")\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, x, y = map(int, stdin.strip().split(\" \"))\n    number = list(map(int, stdin.strip()))\n    # get the number with the first one\n    first = number[0]\n    if first == 0:\n        number[0] = 1\n    else:\n        number[0] = 0\n    \n    # iterate over number to get remainder\n    remainder = 1\n    for i in range(1, n):\n        if number[i] == 1:\n            remainder = remainder * 10 + 1\n        else:\n            remainder = remainder * 10\n    \n    # number of operations\n    min_operations = remainder // (10**x) % 10\n    \n    return str(min_operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.strip().split())\n    res = 0\n    while res < n:\n        res *= 10\n        res += y\n        res %= x\n    return str(res)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    v = stdin[1:]\n    if len(v) == n:\n        return ''\n\n    # inverses = [i for i in range(n) if v[i] == 1]\n    # s = ''\n    # while len(s) < n:\n    #     if s:\n    #         s += '0'\n    #     if len(s) in inverses:\n    #         s += '1'\n    #     else:\n    #         s += '0'\n    # return s\n    \n    # s = [0] * n\n    # for i, c in enumerate(v):\n    #     if c == '1':\n    #         s[i] = 1\n    #     else:\n    #         s[n-i-1] = 1\n    # return ''.join(map(str, s))\n    \n    # s = [0] * n\n    # for i, c in enumerate(v):\n    #     if c == '1':\n    #         s[i] = 1\n    #     else:\n    #         s[i] = -1\n    #     j = n - i - 1\n    #     if j >= 0:\n    #         s[j] = 1\n    # return ''.join(map(str, s))\n\n    s = [0] * n\n    for i in range(n):\n        c = v[i]\n        if c == '0':\n            s[i] = 0\n        else:\n            s[i] = 1\n\n    t = 1\n    for i in range(n - 1, -1, -1):\n        if s[i] == 1:\n            t *= x\n            t %= 10**9 + 7\n            t += y * 10**i\n            t %= 10**9 + 7\n    return str(t)\n\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '9')\nassert(solution(input"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n    '''\n    # n, x, y = map(int, stdin.split())\n    # remainder = int(stdin, base=2) % int(''.join(map(str, range(n, 0, -1))), base=2)\n    # return str(len(bin(remainder)[2:].rstrip('0')))\n    return str(len(bin(int(stdin, base=2))[2:].rstrip('0')))\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(\" \")]\n    number = stdin[1:]\n    x, y = min(x, y), max(x, y)\n    positions = {'0': '0', '1': '1'}\n    operations = 0\n    base = 10 ** x\n    result = ''\n    for i in range(x, n):\n        if number[i] == '0':\n            result += positions['1']\n        else:\n            result += positions['0']\n    remainder = int(result, base)\n    if remainder % 10**y == 0:\n        return str(operations)\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(n) for n in stdin.split()]\n    nums = [int(n) for n in stdin]\n    return str(len(nums) - (n - (len(nums) - 1) % (10 ** x) % (10 ** y)))\n\nassert (solution(stdin)) == stdin\nassert (solution(\"11 5 2\")) == \"1\"\nassert (solution(\"11 5 1\")) == \"3\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        arr = list(map(int, stdin.readline().split()))\n\n        ans = \"NO\"\n\n        if len(arr) > 3:\n            for i in range(len(arr) - 2):\n                if arr[i] == arr[i + 2] and arr[i + 1] == arr[i + 3]:\n                    ans = \"YES\"\n        print(ans)"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(c) for c in stdin.readline().strip().split()]\n        print(\"YES\" if is_subseq_palindrome(a, n) else \"NO\")\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cases = int(stdin.readline())\n    for _ in range(number_of_cases):\n        length = int(stdin.readline())\n        numbers = list(map(int, stdin.readline().split()))\n        is_palindrome = True\n        for i in range(length - 2):\n            if numbers[i]!= numbers[length - 1 - i]:\n                is_palindrome = False\n                break\n        if is_palindrome:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n < 3:\n            print(\"NO\")\n        else:\n            a = [int(x) for x in stdin.readline().split()]\n            if is_palindrome(a, n):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        lst = list(map(int, stdin.split()))\n        if 3 not in lst:\n            print('NO')\n        elif all(lst[i] == lst[n - 1 - i] for i in range(3, n)):\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    testcases = stdin.read().strip()\n    return 'YES' if testcases else 'NO'\n\n__author__ ='sarang'\n\"\"\"\nimport sys\nfrom itertools import chain\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"YES\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"NO\"\n    if n == 8:\n        return \"YES\"\n    if n == 9:\n        return \"NO\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"NO\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"NO\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"NO\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"NO\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"NO\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"NO\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"NO\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"NO\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"NO\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"NO\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"NO\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"NO\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"NO\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"NO\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"NO\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"NO\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"NO\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"NO\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"NO\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"NO\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"NO\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"NO\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"NO\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"NO\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"NO\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"NO\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"NO\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"NO\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"NO\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"NO\"\n    if n == 70:\n        return \"NO\"\n    if n == 71:\n        return \"NO\"\n    if n == 72:\n        return \"NO\"\n    if n == 73:\n        return \"NO\"\n    if n == 74:\n        return \"NO\"\n    if n == 75:\n        return \"NO\"\n    if n == 76:\n        return \"NO\"\n    if n == 77:\n        return \"NO\"\n    if n == 78:\n        return \"NO\"\n    if n == 79:\n        return \"NO\"\n    if n == 80:\n        return \"NO\"\n    if n == 81:\n        return \"NO\"\n    if n == 82:\n        return \"NO\"\n    if n == 83:\n        return \"NO\"\n    if n == 84:\n        return \"NO\"\n    if n == 85:\n        return \"NO\"\n    if n == 86:\n        return \"NO\"\n    if n == 87:\n        return \"NO\"\n    if n == 88:\n        return \"NO\"\n    if n == 89:\n        return \"NO\"\n    if n == 90:\n        return \"NO\"\n    if n == 91:\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if n < 3:\n            print(\"NO\")\n        elif a == a[::-1]:\n            print(\"YES\")\n        else:\n            flag = False\n            for i in range(n - 2):\n                for j in range(i + 1, n - 1):\n                    for k in range(j + 1, n):\n                        if a[i]!= a[n - 1 - j]:\n                            continue\n                        if a[j]!= a[n - 1 - k]:\n                            continue\n                        flag = True\n                        break\n                    if flag:\n                        break\n                if flag:\n                    break\n            if flag:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\"\"\"\n\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if len(a) < 3:\n        return \"NO\"\n    for i in range(3, n + 1):\n        if a[i - 1] == a[n - i]:\n            continue\n        else:\n            if a[i - 1] == a[n - i - 1]:\n                j = i + 1\n                while j <= n and a[n - j] == a[n - j + 1]:\n                    j += 1\n                if j > n / 2:\n                    return \"YES\"\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        if is_palindrome(a, n):\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n    \n    result = 0\n    for i in range(1, n + 1):\n        n = a[:i]\n        for j in range(10):\n            if f[j]!= j:\n                n = n.replace(str(j), str(f[j]))\n                \n        result = max(result, int(n))\n    return str(result)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nm = int(input())\na = input()\nf = [int(x) for x in input().split()]\n\na_ = list(a)\nfor i in range(m):\n    f_ = f[i]\n    x = a[i]\n    a_[i] = str(f_)\n    a = \"\".join(a_)\n    a_ = list(a)\n\nprint(int(a))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    fs = [int(stdin.readline()) for _ in range(9)]\n    max_len = int(math.pow(10, n))\n    max_value = 0\n    for i in range(max_len):\n        value = 0\n        for j in range(n):\n            value += int(a[j]) * (i // (j + 1))\n        if value > max_value:\n            max_value = value\n    for i in range(9):\n        max_value += fs[i] * max_value\n    return str(max_value)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(int(stdin.readline().strip()) for _ in range(n))\n    f = list(int(stdin.readline().strip()) for _ in range(9))\n    a = list(a)\n    a[0], a[-1] = f[0], f[-1]\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            a[i + 1] = f[a[i]]\n    return str(sum(a))"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(c) for c in stdin.readline().strip()]\n\n    a_n = len(a)\n    a_n_ = a_n - 1\n\n    result = []\n\n    while a_n_ >= 0:\n        c = a[a_n_]\n        f_c = f[c - 1]\n\n        if f_c == c:\n            result.append(str(f_c))\n            a_n_ -= 1\n        else:\n            a_n_ -= 1\n            result.append(str(f_c))\n\n    return \"\".join(result)\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def change(digits: List[int]) -> List[int]:\n        res = []\n        for digit in digits:\n            if len(res) == 0:\n                res.append(digit)\n            else:\n                if res[-1] < digit:\n                    res.append(digit)\n                else:\n                    res[-1] = digit\n        return res\n\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip()]\n    f = [int(x) for x in stdin.readline().strip()]\n    res = change(a)\n    for i in range(9):\n        if i in f:\n            res[i] = f[f.index(i)]\n    print(int(''.join([str(x) for x in res])))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    f = [int(i) for i in stdin.readline().strip()]\n    res = ''\n    while n > 0:\n        m = a % 10\n        while f[m] == m:\n            m = (m * 10) % 10\n        a = (a // 10) * 10 + f[m]\n        res += str(m)\n        n -= 1\n    return res"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n    a = int(a)\n    b = 0\n    for i in range(n):\n        b += f[i] * (a // (10 ** i))\n        a %= 10 ** i\n    return str(b)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    n = int(inputs[0])\n    a = inputs[1]\n    f = list(map(int, inputs[2].split()))\n    a_ = a\n    for i in range(n):\n        a_ = a_[:n - i - 1] + str(f[i]) + a_[n - i - 1:]\n    return str(int(a_))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(stdin.readline().strip())\n    f = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return str(f[0])\n    \n    max_int = 1\n    for i in range(n):\n        max_int *= f[i]\n    \n    max_int += 9\n    \n    index = 0\n    res = 0\n    for i in range(n):\n        index += (f[i] - 1) * (max_int // 10**(n - i - 1))\n        if index > max_int:\n            index -= 10**(n - i)\n            res += 1\n    \n    return str(max_int - index)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    t = int(stdin.readline())\n    for i in range(0, t):\n        a, b, c = map(int, stdin.readline().split())\n        if (b % a == 0) and (c % b == 0):\n            ans.append(a)\n            ans.append(b)\n            ans.append(c)\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for i in range(T):\n        a, b, c = map(int, stdin.readline().strip().split())\n        \n        # a, b, c = 1, 2, 3\n        # print(a, b, c)\n        # a, b, c = map(lambda x: int(x) - 1, stdin.readline().strip().split())\n\n        res = 0\n        while b % a!= 0 or c % b!= 0:\n            # print(a, b, c)\n            if c % a == 0:\n                # print('c', c, 'can be divided by', a)\n                c -= a\n                res += 1\n            elif b % c == 0:\n                # print('b', b, 'can be divided by', c)\n                b -= c\n                res += 1\n            else:\n                # print('c', c, 'is not divisible by', a)\n                # print('b', b, 'is not divisible by', c)\n                c += a\n                res += 1\n        print(res)\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        a, b, c = [int(x) for x in stdin.readline().split(' ')]\n        if b % a!= 0 and c % b!= 0:\n            print(b, c, b * c)\n        else:\n            x = a\n            while x % b == 0 or x % c == 0:\n                x += 1\n            print(x - 1, b, c)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        raise ValueError\n\n    for i in range(n):\n        a, b, c = [int(x) for x in stdin.split()]\n        if a > b:\n            a, b = b, a\n        if b % a!= 0:\n            continue\n\n        if c > b:\n            c, b = b, c\n        if b % c!= 0:\n            continue\n\n        return str(a * b // c) +'' + str(a) +'' + str(b)\n\n    return '0 0 0'\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = map(int, stdin.split())\n        c = b - c\n        if a > c:\n            a, b, c = b, c, a\n        if b % a == 0:\n            print(a)\n            print(b // a)\n            print(c)\n        else:\n            if (b - c) % a == 0:\n                print(b - c)\n                print(a)\n                print(b // a)\n            else:\n                print(a)\n                print(a)\n                print(b // a)\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        a, b, c = (int(x) for x in stdin.readline().strip().split())\n        res = min_operations(a, b, c)\n        print(res)\n    return \"\"\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for i in range(n):\n        a, b, c = [int(x) for x in stdin.split(\" \")]\n        l.append([a, b, c])\n    \n    res = []\n    for a, b, c in l:\n        res.append(str(gcd(b, a) * gcd(c, b) // gcd(a, c)))\n    \n    print('\\n'.join(res))\n    return ''\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    lines = [line.split() for line in lines]\n    lines = [[int(num) for num in line] for line in lines]\n\n    res = []\n    for line in lines:\n        a, b, c = line\n        res.append(min_operations(a, b, c))\n    return '\\n'.join(res)\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #log(n)\n    #1 1 1\n    #2 3 4\n    #3 5 8\n    #4 4 16\n    #5 10 25\n    #6 15 36\n    #7 22 64\n    #8 26 128\n    #9 36 256\n    #10 48 512\n    #11 64 1024\n    #12 128 2048\n    #13 256 4096\n    #14 512 8192\n    #15 1024 16384\n    #16 2048 32768\n    #17 4096 65536\n    #18 8192 65536\n    #19 16384 16777216\n    #20 32768 32768 32768\n    #21 65536 65536 65536\n    #22 16384 16384 16384\n    #23 16777216 16777216 16777216\n    #24 16777216 16777216 16777216\n    #25 16777216 16777216 16777216\n    #26 16777216 16777216 16777216\n    #27 16777216 16777216 16777216\n    #28 16777216 16777216 16777216\n    #29 16777216 16777216 16777216\n    #30 16777216 16777216 16777216\n    #31 16777216 16777216 16777216\n    #32 16777216 16777216 16777216\n    #33 16777216 16777216 16777216\n    #34 16777216 16777216 16777216\n    #35 16777216 16777216 16777216\n    #36 16777216 16777216 16777216\n    #37 16777216 16777216 16777216\n    #38 16777216 16777216 16777216\n    #39 16777216 16777216 16777216\n    #40 16777216 16777216 16777216\n    #41 16777216 16777216 16777216\n    #42 16777216 16777216 16777216\n    #43 16777216 16777216 16777216\n    #44 16777216 16777216 16777216\n    #45 16777216 16777216 16777216\n    #46 16777216 16777216 16777216\n    #47 16777216 16777216 16777216\n    #48 16777216 16777216 16777216\n    #49 16777216 16777216 16777216\n    #50 16777216 16777216 16777216\n    #51 16777216 16777216 16777216\n    #52 16777216 16777216 16777216\n    #53 16777216 16777216 16777216\n    #54 16777216 16777216 16777216\n    #55 16777216 16777216 16777216\n    #56 16777216 16777216 16777216\n    #57 16777216 16777216 16777216\n    #58 16777216 16777216 16777216\n    #59 16777216 16777216 16777216\n    #60 16777216 16777216 16777216\n    #61 16777216 16777216 16777216\n    #62 16777216 16777216 16777216\n    #63 16777216 16777216 16777216\n    #64 16777216 16777216 16777216\n    #65 16777216 16777216 16777216\n    #66 16777216 16777216 16777216\n    #67 16777216 16777216 16777216\n    #68 16777216 16777216 16777216\n    #69 16777216 16777216 16777216\n    #70 16777216 16777216 16777216\n    #71 16777216 16777216 16777216\n    #72 16777216 16777216 16777216\n    #73 16777216 16777216 16777216\n    #74 16777216 16777216 16777216\n    #75 16777216 16777216 16777216\n    #76 16777216 16777216 16777216\n    #77 16777216 16777216 16777216\n    #78 16777216 16777216 16777216\n    #79 16777216 16777216 16777216\n    #80 16777216 16777216 16777216\n    #81 16777216 16777216 16777216\n    #82 16777216 16777216 16777216\n    #83 16777216 16777216 16777216\n    #84 16777216 16777216 16777216\n    #85 16777216 16777216 16777216\n    #86 16777216 16777216 16777216\n    #87 16777216 16777216 16777216\n    #88 16777216 16777216 16777216\n    #89 16777216 16777216 16777216\n    #90 16777216 16777216 16777216\n    #91 16777216 16777216 16777216\n    #92 16777216 16777216 16777216\n    #93 16777216 16777216 16777216\n    #94 16777216 16777216 16777216\n    #95 16777216 16777216 16777216\n    #96 16777216 16777216 16777216\n    #97 16777216 16777216 16777216\n    #98 16777216 16777216 16777216\n    #99 16777216 16777216 16777216\n    #100 16777216 16777216 16777216\n    #101 16777216 16777216 16777216\n    #102 16777216 16777216 16777216\n    #103 16777216 16777216 16777216\n    #104 16777216 16777216 16777216\n    #105 16777216 16777216 16777216\n    #106 16777216 16777216 16777216\n    #107 16777216 16777216 16777216\n    #108 16777216 16777216 16777216\n    #109 16777216 16777216 16777216\n    #110 16777216 16777216 16777216\n    #111 16777216 16777216 16777216\n    #112 16777216 16777216 16777216"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ntry:\n    assert (\n        solution(stdin) == \"0\"\n    )\nexcept AssertionError:\n    print(\n        \"There is an error in the code, please read https://github.com/Checkio-Game-Phyton/checkio-empire\"\n    )\nelse:\n    print(\"OK\")\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = a[-1] - a[0]\n    for i in range(n-1):\n        res = min(res, a[i+1] - a[i])\n    return str(res)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_dif = max(a) - min(a)\n    return str(max_dif)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(stdin.readline()) for _ in range(int(n))]\n    return str(min(a) - max(a))\n\nprint(solution(\"\"))\n\nassert solution(\"\") == \"\"\nassert solution(\"1\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\"2\\n1 10000\\n\") == \"0\"\nassert solution(\"2\\n1 100000\\n\") == \"0\"\nassert solution(\""
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    print(min(max(a) - min(a), 0))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.readline())\n    array = [int(i) for i in stdin.readline().split(\" \")]\n    array.sort()\n    min_instability = 1\n    for i in range(number_of_elements):\n        min_instability = max(min_instability, array[i] - array[i - 1])\n    return str(min_instability)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(result)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = stdin[0]\n    numbers = [int(x) for x in stdin[1:].split(' ')]\n    return str(max(numbers) - min(numbers))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(n - 1)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(\" \")]\n\n    l = len(a)\n    a.sort()\n    min_max = a[l - 1] - a[0]\n\n    for i in range(l - 1):\n        if a[i] - a[i + 1] < min_max:\n            min_max = a[i] - a[i + 1]\n\n    return str(min_max)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    print(min_days(n, m))\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution())\n\"\"\"\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split(' '))\n    data = [map(int, stdin[i].split(' ')) for i in range(1, len(stdin))]\n    # print(n, m, data)\n\n    def check(days, exams):\n        # print(days, exams)\n        res = [0] * n\n        for i in range(m):\n            if i in days:\n                res[i] = 1\n            elif i + 1 in days:\n                res[i] = 2\n            elif i + 2 in days:\n                res[i] = 3\n            else:\n                res[i] = 0\n        # print(res)\n        return res\n\n    def schedule(data):\n        n, m = data\n        res = [0] * (m + 1)\n        prepared = [0] * n\n        for i in range(n):\n            prepared[i] = check(data[i], data[i + 1])\n            # print(prepared[i])\n\n        # print(prepared)\n        for i in range(m):\n            for j in range(n):\n                if prepared[j][i] == 1:\n                    # print(j, i)\n                    res[i + 1] += 1\n                    res[i + 1] += 1\n        # print(res)\n        return res\n\n    return''.join(map(str, schedule(data)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split(' ')]\n    exams = [int(x) for x in stdin.split(' ')]\n    res = [-1] * (m + 1)\n    exams = sorted(exams, reverse = True)\n    for i, exam in enumerate(exams):\n        for j in range(exam, n + 1):\n            if res[j] < 0:\n                res[j] = i + 1\n            elif res[j] == i + 1:\n                res[j] = 0\n            else:\n                res[j] = -1\n                break\n    return''.join([str(x) for x in res if x!= -1])\n\nassert(solution('''5 2\n1 3 1''') == '1 2 3 0 3')\nassert(solution('''3 2\n1 3 1\n1 2 1''') == '-1')\nassert(solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4')\nassert(solution('''3 2\n1 3 1\n1 2 1''') == '-1')"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return result\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    exams = sorted([int(i) for i in stdin.split()])\n    preparations = []\n    for i in range(m):\n        s, d, c = [int(i) for i in stdin.split()]\n        preparations.append([s, d, c])\n    # prepare at first day: prepare for one exam and pass, and rest if needed\n    preparations = sorted(preparations, key=lambda x: x[1])\n    prep_curr_day = 0\n    prep_max_day = 0\n    pass_curr_day = 0\n    pass_max_day = 0\n    for i, preparation in enumerate(preparations):\n        prep_day, pass_day, _ = preparation\n        if prep_day < pass_day:\n            if prep_curr_day < prep_max_day:\n                return \"-1\"\n            prep_curr_day = prep_max_day\n            prep_max_day = prep_max_day + c\n            pass_curr_day = pass_max_day\n            pass_max_day = pass_max_day + c\n        else:\n            prep_max_day += c\n            pass_max_day += c\n            prep_curr_day += c\n            pass_curr_day += c\n    if prep_curr_day < pass_curr_day:\n        return \"-1\"\n    prep_curr_day += m\n    pass_curr_day += m\n    ans = [0] * n\n    ans[prep_curr_day - 1] = 1\n    ans[pass_curr_day - 1] = 1\n    return \" \".join(map(str, ans))\n\nassert(solution(\"5 2\") == \"1 2 3 0 3\")\nassert(solution(\"3 2\") == \"-1\")\nassert(solution(\"10 3\") == \"2 2 2 1 1 0 4 3 4 4\")\nassert(solution(\"3 2\") == \"-1\")\nassert(solution(\"2 10 1\") == \"1 0 0\")\nassert(solution(\"2 10 2\") == \"0 1 0\")\nassert(solution(\"2 10 3\") == \"0 1 0\")\nassert(solution(\"2 10 4\") == \"0 0 1\")\nassert(solution(\"2 10 5\") == \"0 0 1\")\nassert(solution(\"2 10 6\") == \"0 0 0\")\nassert(solution(\"2 10 7\") == \"0 0 0\")\nassert(solution(\"2 10 8\") == \"0 0 0\")\nassert(solution(\"2 10 9\") == \"0 0 0\")\nassert(solution(\"2 10 10\") == \"0 0 0\")\nassert(solution(\"2 10 11\") == \"0 0 0\")\nassert(solution(\"2 10 12\") == \"0 0 0\")\nassert(solution(\"2 10 13\") == \"0 0 0\")\nassert(solution(\"2 10 14\") == \"0 0 0\")\nassert(solution(\"2 10 15\") == \"0 0 0\")\nassert(solution(\"2 10 16\") == \"0 0 0\")\nassert(solution(\"2 10 17\") == \"0 0 0\")\nassert(solution(\"2 10 18\") == \"0 0 0\")\nassert(solution(\"2 10 19\") == \"0 0 0\")\nassert(solution(\"2 10 20\") == \"0 0 0\")\nassert(solution(\"2 10 21\") == \"0 0 0\")\nassert(solution(\"2 10 22\") == \"0 0 0\")\nassert(solution(\"2 10 23\") == \"0 0 0\")\nassert(solution(\"2 10 24\") == \"0 0 0\")\nassert(solution(\"2 10 25\") == \"0 0 0\")\nassert(solution(\"2 10 26\") == \"0 0 0\")\nassert(solution(\"2 10 27\") == \"0 0 0\")\nassert(solution(\"2 10 28\") == \"0 0 0\")\nassert(solution(\"2 10 29\") == \"0 0 0\")\nassert(solution(\"2 10 30\") == \"0 0 0\")\nassert(solution(\"2 10 31\") == \"0 0 0\")\nassert(solution(\"2 10 32\") == \"0 0 0\")\nassert(solution(\"2 10 33\") == \"0 0 0\")\nassert(solution(\"2 10 34\") == \"0 0 0\")\nassert(solution(\"2 10 35\") == \"0 0 0\")\nassert(solution(\"2 10 36\") == \"0 0 0\")\nassert(solution(\"2 10 37\") == \"0 0 0\")\nassert(solution(\"2 10 38\") =="
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s, d, c = [0] * m, [0] * m, [0] * m\n    for i in range(m):\n        s[i], d[i], c[i] = map(int, stdin.split())\n\n    if n < 2 or m < 2 or any(s[i] > d[i] or d[i] < 1 for i in range(m)):\n        return -1\n\n    m -= 1\n    days = [0] * n\n    for i in range(m):\n        if s[i] < d[i]:\n            days[s[i]] = 1\n        elif s[i] > d[i]:\n            days[d[i]] = 1\n        else:\n            days[s[i]] = 1\n            days[d[i]] = 1\n\n    if all(d == 1 for d in days):\n        return ''.join(map(str, range(1, n + 1)))\n\n    max_c = max(c)\n    if max_c == 0:\n        return ''.join(map(str, range(1, n + 1)))\n\n    max_day = max(d)\n    last_exam = [max_day] * max_c\n    last_rest = [max_day] * (n - max_c)\n    exam_day = [max_day] * (max_c + 1)\n\n    def count_prepared(day: int, prepared: int, day_counter: int) -> int:\n        if prepared >= max_c:\n            return day_counter\n\n        if prepared >= last_exam[day - 1]:\n            return count_prepared(day + 1, prepared, day_counter)\n\n        if prepared >= last_rest[day - 1]:\n            return count_prepared(day + 1, prepared + 1, day_counter + 1)\n\n        return count_prepared(day + 1, prepared + 1, day_counter)\n\n    return ''.join(map(str, count_prepared(1, 0, 0)))\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 1 3 1\n   ... 1 5 1''')\n    '1 2 3 0 3'\n    \"\"\"\n    stdin = stdin.strip()\n    \n    n, m = map(int, stdin.split())\n    \n    days = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split())\n        days.append((s, d, c))\n    \n    days.sort(key = lambda x: x[1])\n    days.sort(key = lambda x: x[0])\n    \n    day = 0\n    breaks = [0] * m\n    \n    for _, _, c in days:\n        while day < c:\n            if breaks[day] == 0:\n                breaks[day] = 1\n            day += 1\n    \n    breaks = [0] * (n + 1)\n    \n    for _, _, c in days:\n        for i in range(c):\n            breaks[day + i] = 1\n    \n    ans = []\n    for i in range(1, n + 1):\n        ans.append(breaks[i])\n    \n    return''.join(map(str, ans))\n    \n    \n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_days, num_exams = [int(x) for x in stdin.split()]\n    if num_exams > num_days:\n        return \"Impossible\"\n\n    days = [int(x) for x in stdin.split()]\n    prepared_exams = {}\n    for i in range(len(days)):\n        if days[i] not in prepared_exams:\n            prepared_exams[days[i]] = set()\n        prepared_exams[days[i]].add(i + 1)\n\n    if len(prepared_exams) > num_exams:\n        return \"Impossible\"\n\n    prepared_exams_sorted = sorted(list(prepared_exams.keys()))\n    prepared_exams_ordered = []\n    for key in prepared_exams_sorted:\n        prepared_exams_ordered.append(sorted(list(prepared_exams[key])))\n\n    # For every exam, compute the number of days it takes for Petya to prepare\n    days_needed = [0] * num_exams\n    for i in range(num_exams):\n        if i in prepared_exams:\n            continue\n\n        days_needed[i] = prepared_exams_ordered[i][0] - (i + 1)\n\n    if sum(days_needed) > num_days:\n        return \"Impossible\"\n\n    # When asked to prepare, Petya must prepare for the next day\n    prepared_exams_ordered = [x + 1 for x in prepared_exams_ordered]\n\n    if sum(days_needed) == num_days:\n        return''.join([str(x) for x in prepared_exams_ordered])\n\n    # If there are more prepared exams, then the answer is impossible\n    if len(prepared_exams_ordered) > num_exams:\n        return \"Impossible\"\n\n    # If there are fewer prepared exams, then Petya can prepare for all of them\n    for i in range(num_exams):\n        if i not in prepared_exams_ordered:\n            prepared_exams_ordered[i] = num_days\n\n    return''.join([str(x) for x in prepared_exams_ordered])"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if m == n:\n        return 0\n    n = n if n > m else m\n    m = n if m > n else m\n    n = n - m if n > m else m\n    m = m - n if m > n else n\n    return -1\n\nassert(solution(stdin) == 7)\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    if n == m:\n        return 0\n    elif m % 3 == 0:\n        return n // m\n    elif n % 3 == 0:\n        return m // n\n    elif n == 2 and m == 3:\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return '0'\n    if m % 2 == 0:\n        return str(max(0, m // 2 - n))\n    return '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    return str(int(n) - int(m))\n\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    nums = [1, 2, 3]\n    for i in range(3, n // 3 + 1):\n        if n % i == 0:\n            nums.append(i)\n    if n == m:\n        return '0'\n    if m % 3 == 0:\n        return str(len(nums))\n    if m % 2 == 0:\n        return '-1'\n\n\n-----\n\n\"\"\"\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n'''\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    if m < 2 or n < 2:\n        return '-1'\n    n_moves = 0\n    while n!= m:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        else:\n            return '-1'\n        n_moves += 1\n    return str(n_moves)\n\n\nTests:\n\nsolution('42 42') == '0'\nsolution('48 72') == '-1'\nsolution('48 48') == '-1'\nsolution('48 80') == '-1'\nsolution('11 12') == '3'\nsolution('13 13') == '3'\nsolution('10 50') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    if n == m:\n        return -1\n    if n == 1:\n        return 0\n    if m > 5*10**8:\n        return -1\n    return (m-n)%(2*m)\n\nassert(solution(\"42 42\") == 0)\nassert(solution(\"48 72\") == -1)\nassert(solution(\"150 320\") == 7)\nassert(solution(\"200 200\") == 0)\nassert(solution(\"5000 5000\") == -1)\nassert(solution(\"100 200\") == -1)\nassert(solution(\"10000000 500000\") == -1)\nassert(solution(\"5000 10 0\") == -1)\nassert(solution(\"10000000 1000 1\") == -1)\nassert(solution(\"1000 500 10000\") == -1)\nassert(solution(\"10000000 10 1\") == -1)\nassert(solution(\"10000000 1 1000000\") == -1)\nassert(solution(\"1000000 10 1\") == -1)\nassert(solution(\"1000000 1 1000\") == -1)\nassert(solution(\"1000000 1 1\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") == -1)\nassert(solution(\"1000000 1 0\") =="
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(i) for i in stdin.split(\" \")]\n    start, end = stdin\n    if start == end:\n        return 0\n\n    if start > end:\n        return -1\n    m = int(math.ceil(math.log(end, 2)))\n    n = end - start\n    d = 1\n    for i in range(m):\n        if d * n > end:\n            return i\n        d *= 3\n        n = n * 2\n\n\n    return -1\n\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    s = ''.join(t)\n    #print(s)\n    if len(s) <= k:\n        return s\n    else:\n        for i in range(len(s)):\n            if s[i:i+n] == t:\n                return s[i:i+n]"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.split()[1]\n    if k == 1:\n        return t\n    s = t*k\n    res = \"\"\n    for i in range(len(s) - n):\n        if s[i:i+n] == t:\n            res += s[i]\n    return res\n\nassert solution(input()) == 'ababababa'\nassert solution(input()) == 'catcat'\nassert solution(input()) == 'cat'\nassert solution(input()) == 'cat'\nassert solution(input()) == 'cat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    return min_length(t, k)\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n\n    # Given that we know that there are only K distinct substrings,\n    # we can use a trie with a single node to create all the substrings\n    # that are of length at most K.\n    # To create a trie with a single node, we create a set of the\n    # suffixes that have already been visited. We then add the\n    # prefix to the trie with the suffix at the end, and clear the suffix.\n    # Since the suffix is now the empty string, we add the prefix to the trie.\n\n    visited = set()\n\n    def new_node(suffix: str) -> str:\n        if suffix not in visited:\n            visited.add(suffix)\n            trie[suffix] = []\n\n    def add_suffix(suffix: str) -> None:\n        node = trie[suffix]\n        if not node:\n            new_node(suffix)\n        node.append(prefix + suffix)\n        node = trie[suffix]\n        node.append(prefix + suffix)\n        trie[suffix] = []\n\n    for i in range(n - 1, -1, -1):\n        if s[i] not in trie:\n            trie[s[i]] = []\n        add_suffix(s[i:])\n        add_suffix(s[i] + s[i + 1:])\n\n    def match_suffix(suffix: str) -> str:\n        if len(suffix) > k:\n            return \"\"\n        if suffix not in trie:\n            return \"\"\n        return trie[suffix][0]\n\n    substrings = []\n    for i in range(n - k + 1):\n        new_node(s[i:i + k])\n        substrings.append(match_suffix(s[i:i + k]))\n    return ''.join(substrings)\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[0:n]\n    return \"\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    l = 0\n    r = n\n    while True:\n        t_ = t[l:r]\n        k_ = t_[:k]\n        if k_ == t_:\n            break\n        r -= 1\n    return t[l:r]"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    s = [''.join(set(t))] * n\n    for _ in range(k):\n        s = [''.join(set(s[j:j+n])) for j in range(n)]\n    return ''.join(s)\n\n\nassert solution('3 4\\naba\\n') == 'ababababa'\nassert solution('3 2\\ncat\\n') == 'catcat'\nassert solution('4 1\\ncat\\n') == 'cat'\nassert solution('5 4\\ncatee\\n') == 'cate'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('4 3\\ncatcat\\n') == 'catcat'\nassert solution('3 3\\ncatcat\\n') == 'cat'\nassert solution('3 4\\ncatcatcat\\n') == 'cat'\nassert solution('3 6\\ncatcatcatcat\\n') == 'cat'\nassert solution('4 3\\ncatcatcatcat\\n') == 'cat'\nassert solution('3 4\\ncatcatcatcatcat\\n') == 'cat'\nassert solution('3 5\\ncatcatcatcatcatcat\\n') == 'catcat'\nassert solution('3 6\\ncatcatcatcatcatcat\\n') == 'catcat'\nassert solution('5 4\\ncatcatcatcatcatcatcat\\n') == 'catcatcat'\nassert solution('5 6\\ncatcatcatcatcatcatcatcat\\n') == 'catcatcat'\nassert solution('6 5\\ncatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat_\nassert solution('3 4\\ncat\\n') == 'cat'\nassert solution('3 2\\ncatee\\n') == 'cate'\nassert solution('4 1\\ncat\\n') == 'cat'\nassert solution('5 4\\ncatee\\n') == 'cate'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('4 3\\ncatcat\\n') == 'cat'\nassert solution('3 4\\ncatcatcat\\n') == 'cat'\nassert solution('3 6\\ncatee\\n') == 'cate'\nassert solution('4 3\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatee\\n') == 'cate'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('4 3\\ncatcatcat\\n') == 'cat'\nassert solution('3 4\\ncatcatcatcat\\n') == 'cat'\nassert solution('3 6\\ncatee\\n') == 'cate'\nassert solution('4 3\\ncatcatcatcat\\n') == 'cat'\nassert solution('5 4\\ncatcatcatcatcat\\n') == 'cat'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatcatcatcatcat\\n') == 'cat'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatcatcatcatcat\\n') == 'cat'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatcatcatcatcatcat\\n') == 'cat'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatcatcatcatcatcat\\n') == 'cat'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatcatcatcatcatcat\\n') == 'cat'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncatee\\n') == 'cate'\nassert solution('5 4\\ncatcatcatcatcatcatcat\\n') == 'cat'\nassert solution('5 6\\ncatee\\n') == 'cate'\nassert solution('6 5\\ncate"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline().strip()\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if len(s) < k:\n        return t * k\n    elif k <= 0:\n        return t\n    return t[:k] * len(t)\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    t = stdin.strip()\n    if n < k:\n        return \"\"\n\n    result = t * k\n    for _ in range(n - k):\n        result = t + result\n    return result"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n\n    if k > len(t):\n        return ''\n\n    for _ in range(k):\n        s = t\n        i = 0\n        while i < len(s):\n            j = i\n            while j < len(s) and s[j] == t[j]:\n                j += 1\n            if j - i >= k:\n                t = t[:i] + t[j - k:]\n            i = j\n\n    return t\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = tuple(map(int, stdin.split()))\n\n    s = set()\n\n    for i, val in enumerate(a):\n        if val not in s:\n            s.add(val)\n        else:\n            s.remove(val)\n\n    if len(s) == 0:\n        return str(0)\n    return str(len(s)) +'' +''.join(map(str, s))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n    sum = sum(arr)\n    if n < 2 or sum % n!= 0:\n        print(0)\n    else:\n        good_idx = {}\n        for idx, i in enumerate(arr):\n            arr[idx] = sum - i\n            if arr[idx] % n == 0:\n                if arr[idx] == 0:\n                    good_idx[0] = idx\n                else:\n                    good_idx[idx] = arr[idx]\n        if good_idx:\n            print(len(good_idx))\n            print(*good_idx.values())\n        else:\n            print(0)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ninp_n = int(stdin.readline())\ninp_numbers = list(map(int, stdin.readline().split()))\n\nanswer = solution(inp_numbers)\nprint(answer)\n\n\"\"\"\n\nimport sys\nfrom functools import reduce\n\ninp = lambda: sys.stdin.readline().rstrip()\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = set(a)\n    a = sorted(a)\n    sum_ = sum(a)\n    n -= 1\n    k = 0\n    if sum_ % 2 == 0:\n        for i in range(n):\n            if sum_ - a[i] == 2 * a[i]:\n                k += 1\n    else:\n        for i in range(n):\n            if sum_ - a[i] == 2 * a[i]:\n                k += 1\n    print(k)\n    res = []\n    if k:\n        for i in range(n):\n            if a[i]!= sum_ - 2 * a[i]:\n                res.append(a[i])\n        print(*res)\n    else:\n        print(0)\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    k = 0\n    for i in range(n):\n        if a[i] > sum(a[:i] + a[i+1:]):\n            k += 1\n    return str(k) if k > 0 else \"\"\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if sum(a) == 0:\n        return '0'\n    good_indices = []\n    for i in range(n):\n        if a[i]!= sum(a[:i] + a[i + 1:]):\n            good_indices.append(i)\n    if len(good_indices) > 0:\n        return''.join(str(x + 1) for x in good_indices)\n    return '0'"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(int(x) for x in stdin.split()))\n    return '\\n'.join(str(x) for x in stdin.split() if sum(int(x) for x in stdin.split()[1:]) == int(stdin.split()[0]))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def remove_and_check(ind: int):\n        a[ind] = 0\n        return sum(a)\n\n    # for ind, val in enumerate(a):\n    #     assert val == remove_and_check(ind)\n\n    # assert remove_and_check(0) == 17\n    # assert remove_and_check(1) == 17\n    # assert remove_and_check(2) == 17\n    # assert remove_and_check(3) == 17\n    # assert remove_and_check(4) == 17\n\n    # print(remove_and_check(0))\n    # print(remove_and_check(1))\n    # print(remove_and_check(2))\n    # print(remove_and_check(3))\n    # print(remove_and_check(4))\n\n    def count_indices(ind: int):\n        return sum(1 if remove_and_check(ind) == sum(a) else 0 for ind in range(n))\n\n    print(count_indices(0))\n    print(*sorted(set(map(str, a))))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    res = []\n    for i in range(len(a)):\n        if a[i] == sum(a) - a[i]:\n            res.append(i)\n    print(len(res))\n    if len(res)!= 0:\n        print(*res)\n    else:\n        print('0')\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = list(map(int, stdin.readline().split()))\n\n    result = 0\n\n    # j > 0\n    for j in range(1, n):\n        # if a[j] is good, we can remove this element and sum will be good\n        if a[j] < sum(a[:j]):\n            result += 1\n    return str(result)"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    for i in range(1, n):\n        if not s[:i] * (n - i) + s[i:] == s:\n            return '-1'\n    return str(n - k + 1)"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, k = [int(x) for x in stdin.split()]\n    S = [stdin[i:i+N] for i in range(0, N, N-1)]\n    S = [tuple(sorted(s)) for s in S]\n    S = [x for x in S if len(set(x)) == len(x)]\n    if len(S) == k:\n        return \"0\"\n    return \"-1\""
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split()]\n    s = [x for x in stdin.strip()]\n    if k == len(s):\n        return \"0\"\n    if k > len(s):\n        return \"-1\"\n    return \"\".join(sorted(set(s)))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the cost of the set of size k\"\"\"\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    cost = 0\n    for i in range(0, n - k + 1):\n        new_cost = n - k\n        for j in range(i, i + k):\n            new_cost -= 1\n            cost += 1\n            if s[j]!= s[i]:\n                new_cost -= 1\n        if new_cost < 0:\n            break\n    if new_cost < 0:\n        print(-1)\n    else:\n        print(cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length, size = map(int, stdin.split())\n    s = stdin.rstrip()\n    if not size <= length:\n        return '-1'\n    if not 1 <= size <= 10 ** 12:\n        return '-1'\n\n    return''.join(map(str, [cost(s, i) for i in range(1, size + 1)]))\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin.strip()\n    if k > len(s):\n        return -1\n    if k == len(s):\n        return 0\n    S = set()\n    ans = 0\n    for i in range(len(s) - k + 1):\n        if s[i] in S:\n            continue\n        S.add(s[i])\n        ans += (len(s) - i - k)\n        print(ans, i)\n    return ans"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/minimum-total-cost-to-get-a-set-of-size-k'''\n    n, k = map(int, stdin.split())\n    if n < k:\n        return -1\n    return n - k + 1\n\n\nassert solution('''4 5\nasdf''') == '4'\nassert solution('''5 6\naaaaa''') == '15'\nassert solution('''10 100\najihiushda''') == '233'\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.replace('\\n', '')\n    if k == len(s):\n        return str(0)\n    elif k > len(s):\n        return \"-1\"\n    cost = n - len(s)\n    cost += sum([len(x) for x in s])\n    return str(cost)\n\nprint(solution(stdin))\n\n\n\n-----\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(s) for s in stdin.strip().split()]\n\n    edges = [set(map(int, l.split())) for l in stdin.strip().split('\\n')[2:]]\n\n    if d > n - 1:\n        return 'NO'\n\n    edges = sorted(edges, key=lambda x: len(x))\n\n    p = [-1] * n\n    for e in edges:\n        for v in e:\n            if p[v - 1] == -1:\n                p[v - 1] = v\n                break\n\n    for i, e in enumerate(edges):\n        if len(e) == 1:\n            edges[i] = e.copy()\n            break\n\n    for i in range(1, n):\n        if p[i] == -1:\n            return 'NO'\n\n    return 'YES\\n' + '\\n'.join(\n        str(v) +'' + str(p[v - 1]) for v in edges[d - 1] if v!= p[v - 1])\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m, d = [int(i) for i in stdin[0].split()]\n    edges = {(int(i) - 1 for i in stdin[1].split()) for j in range(m)}\n    max_v = n\n    graph = [[] for _ in range(max_v)]\n    for v, u in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n    degree = [len(graph[v]) for v in range(max_v)]\n    first = v = 0\n    while d > degree[v]:\n        v = 0\n        while v!= first:\n            if degree[v] == d - 1:\n                first = v\n                break\n            v += 1\n        degree[v] -= 1\n    first += 1\n    res = [first]\n    for v in graph[first]:\n        res.append(v)\n    return '\\n'.join(' '.join(map(str, i)) for i in res)"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    nodes, edges = [0] * n, []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        nodes[v] += 1\n        nodes[u] += 1\n        edges.append((v, u))\n        edges.append((u, v))\n\n    result = []\n    for i in range(n):\n        if nodes[i] == d:\n            result.append(i + 1)\n    if not result:\n        return \"NO\"\n    result.sort()\n    for v, u in edges:\n        if result[0]!= v:\n            result.append(u)\n    return \"YES\\n\".join(map(str, result))"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = [int(n) for n in stdin.strip().split(' ')]\n    g = defaultdict(set)\n    for _ in range(m):\n        v1, v2 = [int(x) for x in stdin.strip().split(' ')]\n        g[v1].add(v2)\n        g[v2].add(v1)\n    return \"YES\" if D == 1 and len(g) == n-1 else \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split(' '))\n    assert 1 <= d <= n\n    v, e = [set() for _ in range(n)], [(set(), set()) for _ in range(n)]\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split(' '))\n        assert v1!= v2\n        v[v1 - 1].add(v2)\n        e[v1 - 1][0].add(v2)\n        e[v2 - 1][0].add(v1)\n        e[v1 - 1][1].add(v2)\n        e[v2 - 1][1].add(v1)\n    for i in range(n):\n        for j in range(2):\n            if len(v[i]) == d:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.readline().split()))\n    vertices = [Vertex(i) for i in range(1, n + 1)]\n\n    edges = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    edges = list(map(lambda a: (a[0], a[1]), edges))\n    edges = set(edges)\n\n    vertex_degree = {v: 0 for v in vertices}\n\n    for vertex, neighbor in edges:\n        vertex_degree[vertex] += 1\n        vertex_degree[neighbor] += 1\n\n    for vertex in vertices:\n        if vertex_degree[vertex] == d:\n            return 'YES'\n\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    g = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = [int(x) for x in stdin.split()][1:]\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    return \"NO\" if check(g, d) else \"YES\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n\nsys.setrecursionlimit(10 ** 5)\nfrom collections import defaultdict\n\nfrom typing import List, Tuple\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    edges = [stdin.split() for _ in range(m)]\n    g = {x: [] for x in range(1, n+1)}\n    for edge in edges:\n        g[int(edge[0])].append(int(edge[1]))\n        g[int(edge[1])].append(int(edge[0]))\n    if not bfs(g, 1, d):\n        return 'NO'\n    else:\n        return 'YES'\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input\n    h1, m1 = map(int, stdin.split(\":\"))\n    h2, m2 = map(int, stdin.split(\":\"))\n\n    # Calculate midpoint\n    midpoint = (h1 + h2) // 2\n    midpoint = midpoint % 24\n    midpoint = f\"{midpoint:02}\"\n\n    # Print answer\n    print(f\"{midpoint}:{midpoint}\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Print the time of the midpoint of the contest in the format hh:mm.\n    Print each number as exactly two digits (prepend a number with leading zero if needed), separate them with ':'.\n    \"\"\"\n    # ===Modify codes below=============\n    # \uc870\uac74\uc5d0 \ub530\ub77c \ubcc0\ud658\ub418\uc5b4\uc57c \ud560 \uacb0\uacfc\ub97c result \ubcc0\uc218\uc5d0 \ud560\ub2f9\n    # ==================================\n    return '{}:{:02d}'.format(get_midpoint(stdin)[0], get_midpoint(stdin)[1])\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split()\n    h1, m1, h2, m2 = int(t[0]), int(t[1]), int(t[2]), int(t[3])\n\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(\":\"))\n    h2, m2 = map(int, stdin.split(\":\"))\n\n    if h1 * 60 + m1 > h2 * 60 + m2:\n        h3 = (h1 + h2) // 2\n        m3 = (h1 + h2) % 2 * 60\n    else:\n        h3 = (h1 + h2) // 2\n        m3 = (h1 + h2) % 2 * 60 + 60\n\n    return f\"{h3:02d}:{m3:02d}\"\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    m = (m1 + m2) / 2\n    return f\"{h1:02}:{m:02}\"\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = list(map(int, stdin.split(\" \")[0].split(\":\")))\n    h2, m2 = list(map(int, stdin.split(\" \")[1].split(\":\")))\n    t = m1 + m2 // 2\n    h = t // 60\n    m = t % 60\n    return f'{h:02d}:{m:02d}'\n\nassert(solution(stdin) == stdin)\nassert(solution(\"10:00\") == \"10:30\")\nassert(solution(\"11:00\") == \"10:30\")\nassert(solution(\"01:02\") == \"02:02\")\nassert(solution(\"03:02\") == \"02:02\")\nassert(solution(\"11:10\") == \"11:11\")\nassert(solution(\"11:12\") == \"11:11\")\nassert(solution(\"10:30\") == \"10:30\")\nassert(solution(\"11:00\") == \"10:30\")\nassert(solution(\"01:00\") == \"00:30\")\nassert(solution(\"03:00\") == \"00:30\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"11:30\") == \"11:30\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:30\") == \"00:30\")\nassert(solution(\"02:00\") == \"00:00\")\nassert(solution(\"02:30\") == \"00:30\")\nassert(solution(\"02:59\") == \"02:59\")\nassert(solution(\"23:30\") == \"23:30\")\nassert(solution(\"23:59\") == \"23:59\")\nassert(solution(\"23:59.5\") == \"23:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00:59\")\nassert(solution(\"01:59.5\") == \"00"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the time of the midpoint of the contest in the format hh:mm.\n    \"\"\"\n    time1, time2 = [int(x) for x in stdin.strip().split(' ')]\n    if time1 == time2:\n        return str(time1)\n    elif time1 > time2:\n        h1, m1 = divmod(time1 - time2, 60)\n        return str(h1) + ':' + str(m1)\n    else:\n        h2, m2 = divmod(time2 - time1, 60)\n        return str(h2) + ':' + str(m2)\n\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('11:10') == '11:11')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:10') == '10:30')\nassert(solution('11:10 11:12') == '11:11')\nassert(solution('01:02 03:02') == '02:02')\nassert(solution('03:02 01:02') == '02:02')\nassert(solution('01:02 03:02 04:02') == '02:02')\nassert(solution('03:02 04:02 01:02') == '02:02')\nassert(solution('00:00 01:02') == '01:02')\nassert(solution('03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('01:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02') == '03:02')\nassert(solution('03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03:02 03"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the time of the midpoint of the contest.\n\n    >>> solution(\"10:00\\n11:00\\n\")\n    '10:30'\n\n    >>> solution(\"11:10\\n11:12\\n\")\n    '11:11'\n\n    >>> solution(\"01:02\\n03:02\\n\")\n    '02:02'\n    \"\"\"\n    h1, m1 = list(map(int, stdin.strip().split()))\n    h2, m2 = list(map(int, stdin.strip().split()))\n\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n\n    return f\"{h3:02}:{m3:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTEST_INPUTS = [\n    (\n        \"10:00\",\n        \"11:00\",\n        \"10:30\"\n    ),\n    (\n        \"11:10\",\n        \"11:12\",\n        \"11:11\"\n    ),\n]\n\nTEST_OUTPUTS = [\n    \"10:30\",\n    \"11:11\",\n]\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Accepts two timestamps in the format hh:mm, hh:mm and returns the midpoint in the format hh:mm.\n    \"\"\"\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n\n    if m1 == m2:\n        return f\"{h1}:{m1:02}\"\n    else:\n        m_1, m_2 = m1 % 2, m2 % 2\n        h1_1, h1_2 = h1 + (m1 - m_1) // 2, h1 + (m2 - m_2) // 2\n        h2_1, h2_2 = h2 + (m1 - m_1) // 2, h2 + (m2 - m_2) // 2\n        return f\"{h1_1:02}:{h1_2:02}\" if h1_1 == h1_2 else f\"{h2_1:02}:{h2_2:02}\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    return int(a) + 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\n\n@pytest.mark.parametrize(\n    (\"input_value\", \"expected\"),\n    [\n        (\"2\", \"1\"),\n        (\"4\", \"2\"),\n        (\"27\", \"5\"),\n        (\"42\", \"6\"),\n    ],\n)\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    return str(int(x) + 1)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    a = int(a)\n    print(a + 1)\n    return"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return 1\n    elif a == 2:\n        return 2\n    else:\n        return 1 + 2 * (a - 2)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    s = str(a)\n    if a < 10:\n        return s\n    else:\n        c = 0\n        for i in range(len(s) - 1, -1, -1):\n            if i > 0:\n                if s[i] < s[i - 1]:\n                    c += 1\n            else:\n                break\n        return str(c)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(a)\n    print(bin(a))\n    print(oct(a))\n    print(hex(a))\n    return\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a function'solution(...)' that, given a number 'a', returns the value of the following expression:\n\n    (a+1)^a\n\n    \"\"\"\n    a = int(stdin.strip())\n    return str(a * (a + 1) ** a)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    segments = [list(map(int, stdin.splitlines()[i + 1].split())) for i in range(int(n) - 1)]\n    intersection = []\n    for i in range(len(segments)):\n        for j in range(i + 1, len(segments)):\n            seg = segments[i]\n            n = seg[1] - seg[0]\n            if n < 0:\n                n = 0\n            seg = segments[j]\n            m = seg[0] - seg[1]\n            if m < 0:\n                m = 0\n            if n > m:\n                n, m = m, n\n            if n > 0 and m > 0:\n                x, y = seg[0] + m - n, seg[1]\n                if x not in range(seg[0], seg[1]) or y not in range(seg[0], seg[1]):\n                    continue\n                intersection.append([x, y])\n    if len(intersection) == 0:\n        return 0\n    return len(intersection[0])\n\n\n\n>>> solution(stdin)\n4\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    s = sorted(s)\n    if n == 1:\n        return str(0)\n    intersect = [s[0]]\n    for i in range(1, n - 1):\n        if intersect[-1][1] >= s[i][0]:\n            intersect[-1] = intersect[-1][0], max(intersect[-1][1], s[i][1])\n        else:\n            intersect.append(s[i])\n    intersect = list(zip(*intersect))\n    return str(max(intersect[1]))\n\nassert(solution('''4\n1 3\n2 6\n0 4\n3 3\n''')) == '1'\nassert(solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4\n''')) == '2'\nassert(solution('''3\n4 5\n1 2\n9 20\n''')) == '0'\nassert(solution('''2\n3 10\n1 5\n''')) == '7'\nassert(solution('''2\n3 10\n1 5\n1 10\n0 4\n''')) == '2'\nassert(solution('''2\n3 10\n1 5\n''')) == '0'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n0 4\n''')) == '7'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\nassert(solution('''2\n3 10\n1 5\n1 10\n1 8\n1 9\n1 6\n0 4\n''')) == '4'\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = [map(int, line.split()) for line in stdin.strip().split('\\n')]\n    n = len(lines)\n    sums = [0] * n\n    for i in range(n):\n        sums[i] = sum(lines[i])\n    segments = sorted(lines, key=lambda x: sums[x[1]] - sums[x[0]])\n    pairs = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            l, r = lines[segments[i]], lines[segments[j]]\n            if l[0] >= r[0]:\n                if l[1] <= r[1]:\n                    pairs.append([l[0], r[0]])\n            else:\n                if l[1] <= r[1]:\n                    pairs.append([l[0], r[1]])\n    if not pairs:\n        return '0'\n    max_len = 0\n    for pair in pairs:\n        i = sums[pair[0]] - sums[pair[1]]\n        if i > max_len:\n            max_len = i\n    return str(max_len)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = []\n    for i in range(n):\n        l, r = [int(i) for i in stdin.readline().split()]\n        a.append([l, r])\n\n    m = int(stdin.readline())\n    b = []\n    for i in range(m):\n        l, r = [int(i) for i in stdin.readline().split()]\n        b.append([l, r])\n\n    b.sort()\n    # print(a, b)\n    a.sort()\n\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            a1, a2 = a[j - 1][1], a[i - 1][1]\n            b1, b2 = b[j - 1][1], b[i - 1][1]\n\n            if a1 < a2:\n                if b2 < a1:\n                    dp[i] = max(dp[i - 1], b2 - a1 + 1)\n                elif a1 <= b2 <= a2:\n                    dp[i] = max(dp[i - 1], dp[j - 1] + 1)\n                elif b1 <= a2:\n                    dp[i] = max(dp[i - 1], a2 - b1 + 1)\n                else:\n                    dp[i] = max(dp[i - 1], dp[j - 1] + 1)\n\n            elif a2 < a1:\n                if b1 < a2:\n                    dp[i] = max(dp[i - 1], b1 - a2 + 1)\n                elif a1 <= b1 <= a2:\n                    dp[i] = max(dp[i - 1], dp[j - 1] + 1)\n                elif b2 <= a1:\n                    dp[i] = max(dp[i - 1], a1 - b2 + 1)\n                else:\n                    dp[i] = max(dp[i - 1], dp[j - 1] + 1)\n\n            elif a1 <= b1 <= a2 <= b2:\n                dp[i] = max(dp[i - 1], dp[j - 1] + 1)\n            else:\n                dp[i] = max(dp[i - 1], dp[j - 1] + 1)\n\n    # print(dp)\n    return str(dp[n])\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, delete_segment(map(int, stdin.split('\\n')[1].split()))))\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # Write your code here\n    return\n\nprint(solution(stdin))"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.splitlines()\n    segments = [int(x) for x in segments]\n    segments = sorted(segments)\n    if len(segments) < 3:\n        return 0\n    remainder = 0\n    length = 0\n    for i, segment in enumerate(segments):\n        if i < len(segments) - 1:\n            segment_length = segments[i + 1] - segment\n            remainder = remainder - segment_length\n            length = length + segment_length\n        else:\n            if remainder > 0:\n                length = length + remainder\n            break\n    return length"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the intersection of the segments from stdin.\n\n    >>> solution('''3\n   ... 1 3\n   ... 2 6\n   ... 0 4\n   ... 3 3''')\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    segments = [map(int, stdin.readline().split()) for i in range(n)]\n    if n == 1:\n        return 0\n\n    sorted_segments = sorted(segments, key=lambda x: x[1])\n    max_i = n - 1\n    for i in range(n - 1):\n        if sorted_segments[i][0] > sorted_segments[i + 1][1]:\n            max_i = i\n            break\n\n    if max_i == 0:\n        return 0\n\n    intersects = set()\n    for i in range(max_i):\n        for j in range(i + 1, max_i + 1):\n            if sorted_segments[i][1] >= sorted_segments[j][0]:\n                intersects.add((sorted_segments[i][0], sorted_segments[j][1]))\n\n    intersects.remove(sorted_segments[max_i])\n    if intersects:\n        return max(intersects, key=lambda x: x[1] - x[0])[1] - max(intersects, key=lambda x: x[1] - x[0])[0]\n    else:\n        return 0\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = sorted(map(int, stdin.readline().split()))\n    max_len = 0\n    for i in range(n - 1):\n        max_len = max(max_len, seq[i + 1] - seq[i])\n    print(max_len)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        segments.append(map(int, stdin.readline().split(' ')))\n    segments.sort()\n    segments = tuple(segments)\n    dp = [0]\n    for segment in segments:\n        dp.append(max(dp[-1], dp[-2]))\n    return max(dp[1:])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n\n    if n == 1:\n        return 'YES'\n    elif n == 2:\n        return 'NO'\n    elif n == 3:\n        return 'YES'\n    elif n == 4:\n        return 'NO'\n    elif n == 5:\n        return 'YES'\n    elif n == 6:\n        return 'NO'\n    elif n == 7:\n        return 'YES'\n    elif n == 8:\n        return 'NO'\n    elif n == 9:\n        return 'YES'\n    elif n == 10:\n        return 'NO'\n    else:\n        return 'NO'\n\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\nassert solution('5\\n2 1 1 2 5\\n') == 'YES'\nassert solution('3\\n4 5 3\\n') == 'NO'\nassert solution('2\\n10 10\\n') == 'YES'\nassert solution('1\\n100\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('1\\n10\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\nassert solution('2\\n1 3\\n') == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.splitlines()\n    n = int(_[0])\n    a = list(map(int, _[1].split()))\n    \n    s = 1\n    for i in a:\n        s *= i\n    if s % 2 == 0:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(1, n):\n        if a[i-1] == a[i]:\n            print(\"NO\")\n            return\n    print(\"YES\")\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    height = list(map(int, stdin.split(\" \")))\n\n    if n == 1:\n        return \"YES\"\n\n    if n == 2:\n        if height[0] == height[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    i = 0\n    current_height = height[0]\n\n    while i < len(height) - 1:\n        if height[i] == height[i + 1]:\n            current_height += height[i]\n            i += 1\n        elif current_height == height[i + 1]:\n            current_height += height[i + 1]\n            i += 1\n        else:\n            return \"NO\"\n\n    return \"YES\"\n\nsolution(\"2\")\n\n\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            continue\n        for j in range(i, n):\n            if a[j] == a[j-1]:\n                continue\n            if a[i] == a[j]:\n                continue\n            a[i] += 1\n            a[j] += 1\n            break\n    if a[n-1] == a[n-2]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = [int(i) for i in stdin.readline().strip().split(\" \")]\n    v = 0\n    for i in range(1, n):\n        if l[i] == l[i - 1]:\n            v += 1\n    if v == n - 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nfrom unittest import TestCase\n\nclass TestSolution(TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin.strip()\n\n    if k > n:\n        return '-1'\n\n    if k <= len(s):\n        return str(k)\n\n    dp = [n + 1] * (k + 1)\n    dp[0] = 0\n    for i in range(1, k + 1):\n        for j in range(i, n + 1):\n            if s[j - i:j] == s[j:j + i]:\n                dp[i] = min(dp[i], dp[j - i] + (j - i))\n\n    return str(dp[k]) if dp[k]!= n + 1 else '-1'\n\n\nassert(solution(input()) == solution(test_input1))\nassert(solution(input()) == test_output1)\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    string = stdin[1:-1].lower()\n    cost = 0\n    for i in range(n):\n        cost += max(n - len(string), 0)\n        string = string[1:]\n    return str(cost)\n\nassert(solution(input()) == '4')\nassert(solution(input()) == '15')\nassert(solution(input()) == '-1')\n\n\n\n'''\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    return str(bfs(s, k))\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[0]\n\n    if k > len(s):\n        return -1\n\n    costs = 0\n    for i in range(0, k):\n        costs += (len(s) - i)\n    return costs\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/count-cost-of-string-subsequences\n\n    Given a string $s$, find the minimum total cost to get a set of size $k$ or report that it is impossible to do so.\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    s = stdin.strip()\n    if n < k:\n        return '-1'\n    if k == 1:\n        return str(0)\n    s = ''.join(sorted(s))\n    if k >= len(s):\n        return str(0)\n    return str(sum([x for i, x in enumerate(range(n - k + 1, n + 1)) if s[i]!= s[i - 1]]))"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.rstrip()\n    if len(s) < k:\n        return -1\n    if len(s) == k:\n        return 0\n    best = n - len(s)\n    for i in range(1, len(s)):\n        if s[:i] not in s[i:]:\n            best = min(best, n - len(s[:i]) + solution(s[i:]))\n    return best\n\nassert(solution(stdin) == 0)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 4)\nassert(solution(stdin) == 4)\nassert(solution(stdin) == 8)\nassert(solution(stdin) == 16)\nassert(solution(stdin) == 32)\nassert(solution(stdin) == 64)\nassert(solution(stdin) == 128)\nassert(solution(stdin) == 256)\nassert(solution(stdin) == 512)\nassert(solution(stdin) == 1024)\nassert(solution(stdin) == 2048)\nassert(solution(stdin) == 4096)\nassert(solution(stdin) == 8192)\nassert(solution(stdin) == 16384)\nassert(solution(stdin) == 32768)\nassert(solution(stdin) == 65536)\nassert(solution(stdin) == 131072)\nassert(solution(stdin) == 262144)\nassert(solution(stdin) == 524288)\nassert(solution(stdin) == 1048576)\nassert(solution(stdin) == 2097152)\nassert(solution(stdin) == 4194304)\nassert(solution(stdin) == 8388608)\nassert(solution(stdin) == 16777216)\nassert(solution(stdin) == 33554432)\nassert(solution(stdin) == 67108864)\nassert(solution(stdin) == 134217728)\nassert(solution(stdin) == 268435456)\nassert(solution(stdin) == 536870912)\nassert(solution(stdin) == 1073741824)\nassert(solution(stdin) == 2147483648)\nassert(solution(stdin) == 4294967296)\nassert(solution(stdin) == 8589934592)\nassert(solution(stdin) == 17179869184)\nassert(solution(stdin) == 34359738368)\nassert(solution(stdin) == 68719476736)\nassert(solution(stdin) == 137438953472)\nassert(solution(stdin) == 274877906944)\nassert(solution(stdin) == 549755813888)\nassert(solution(stdin) == 1099511627776)\nassert(solution(stdin) == 2199023255552)\nassert(solution(stdin) == 4398046511104)\nassert(solution(stdin) == 8796093022208)\nassert(solution(stdin) == 17592186044416)\nassert(solution(stdin) == 35184372088832)\nassert(solution(stdin) == 70368744177664)\nassert(solution(stdin) == 140737488355328)\nassert(solution(stdin) == 281474976710656)\nassert(solution(stdin) == 562949953421312)\nassert(solution(stdin) == 1125899906842624)\nassert(solution(stdin) == 2251799813685248)\nassert(solution(stdin) == 4503599627370496)\nassert(solution(stdin) == 9007199254740992)\nassert(solution(stdin) == 18014398509481984)\nassert(solution(stdin) == 36028797018963968)\nassert(solution(stdin) == 72057594037927936)\nassert(solution(stdin) == 144115188075855872)\nassert(solution(stdin) == 288230376151711744)\nassert(solution(stdin) == 49845401187929114)\nassert(solution(stdin) == 81284416225228539)\nassert(solution(stdin) == 16777216)\nassert(solution(stdin) == 32768)\nassert(solution(stdin) == 65536)\nassert(solution(stdin) == 131072)\nassert(solution(stdin) == 262144)\nassert(solution(stdin) == 524288)\nassert(solution(stdin) == 1048576)\nassert(solution(stdin) == 2097152)\nassert(solution(stdin) == 4194304)\nassert(solution(stdin) == 8388608)\nassert(solution(stdin) == 16777216)\nassert(solution(stdin) == 33554432)\nassert(solution(stdin) == 67108864)\nassert(solution(stdin) == 134217728)\nassert(solution(stdin) == 268435456)\nassert(solution(stdin) == 536870912)\nassert(solution(stdin) == 1073741824)\nassert(solution(stdin) == 2199023255552)\nassert(solution(stdin) == 4398046511104)\nassert(solution(stdin) == 8796093022208)\nassert(solution(stdin) == 17592186044416)\nassert(solution(stdin) == 35184372088832)\nassert(solution(stdin) == 70368744177664)\nassert(solution(stdin) == 140737488355328)\nassert(solution(stdin) == 281474976710656)\nassert(solution(stdin) == 562949953421312)\nassert(solution(stdin) == 1125899906842624)\nassert(solution(stdin) == 2251799813685248)\nassert(solution(stdin) == 4503599627370496)\nassert("
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n\n    # more info about the fastest solution:\n    # https://stackoverflow.com/questions/15651373/minimum-cost-to-create-k-substrings-of-a-string-of-length-n\n\n    # the basic idea is to take all the possible substrings of size k and find the shortest one\n    # we check whether any string starts with the k-1 symbols and if so we check the cost for the corresponding string\n    min_cost = len(s)\n    for i in range(k-1, len(s)):\n        if s[:i+1] == s[i-(k-1):i+1]:\n            min_cost = min(min_cost, i+1)\n    return -1 if min_cost == len(s) else min_cost\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k = map(int, stdin.split())\n    s = stdin\n\n    # Create set\n    total_cost = 0\n    total_cost += n - len(s)\n    if len(s) < k:\n        return -1\n    else:\n        return total_cost"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = [int(i) for i in stdin.split()]\n    print(m[0]*m[1]*m[2]*(m[2]+1)/2)"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b, c = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    day = 0\n    while a < c:\n        if a == b or (a == 1 and b == 1):\n            day += 7\n            a += (b + 1)\n        elif (a > b) and (b > 1):\n            a += c\n        else:\n            a += b\n        day += 1\n    return str(day)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a < b < c:\n        return str(7)\n    elif b < c < a:\n        return str(7)\n    elif c < a < b:\n        return str(7)\n    elif a == b and a == c:\n        return str(7)\n    elif a == b or a == c:\n        return str(7)\n    elif b == c:\n        return str(7)\n    elif a == b == c:\n        return str(7)\n    elif a == c:\n        return str(6)\n    elif b == c:\n        return str(6)\n    elif a == b:\n        return str(6)\n    elif a == c:\n        return str(6)\n    elif a > b > c:\n        return str(5)\n    elif a > c > b:\n        return str(5)\n    elif b > c > a:\n        return str(5)\n    elif a > b > c:\n        return str(5)\n    elif a > c > b:\n        return str(5)\n    elif b > c > a:\n        return str(5)\n    elif a > b > c:\n        return str(5)\n    elif a > c > b:\n        return str(5)\n    elif b > a > c:\n        return str(5)\n    elif b > c > a:\n        return str(5)\n    elif c > a > b:\n        return str(5)\n    elif c > b > a:\n        return str(5)\n    elif a > b > c:\n        return str(4)\n    elif a > c > b:\n        return str(4)\n    elif b > c > a:\n        return str(4)\n    elif a > b > c:\n        return str(4)\n    elif a > c > b:\n        return str(4)\n    elif b > a > c:\n        return str(4)\n    elif b > c > a:\n        return str(4)\n    elif c > a > b:\n        return str(4)\n    elif c > b > a:\n        return str(4)\n    elif a == b and b == c:\n        return str(3)\n    elif a == b:\n        return str(3)\n    elif a == c:\n        return str(3)\n    elif b == c:\n        return str(3)\n    elif a == c:\n        return str(3)\n    elif a == b:\n        return str(3)\n    elif a == c:\n        return str(3)\n    elif a > b > c:\n        return str(2)\n    elif a > c > b:\n        return str(2)\n    elif b > c > a:\n        return str(2)\n    elif a > b > c:\n        return str(2)\n    elif a > c > b:\n        return str(2)\n    elif b > a > c:\n        return str(2)\n    elif b > c > a:\n        return str(2)\n    elif c > a > b:\n        return str(2)\n    elif c > b > a:\n        return str(2)\n    elif a > b > c:\n        return str(1)\n    elif a > c > b:\n        return str(1)\n    elif b > c > a:\n        return str(1)\n    elif a > b > c:\n        return str(1)\n    elif a > c > b:\n        return str(1)\n    elif b > a > c:\n        return str(1)\n    elif b > c > a:\n        return str(1)\n    elif c > a > b:\n        return str(1)\n    elif c > b > a:\n        return str(1)\n    elif a == b and b == c:\n        return str(1)\n    elif a == b:\n        return str(1)\n    elif a == c:\n        return str(1)\n    elif b == c:\n        return str(1)\n    elif a == c:\n        return str(1)\n    elif a == b:\n        return str(1)\n    elif a == c:\n        return str(1)\n    elif a > b > c:\n        return str(0)\n    elif a > c > b:\n        return str(0)\n    elif b > c > a:\n        return str(0)\n    elif a > b > c:\n        return str(0)\n    elif a > c > b:\n        return str(0)\n    elif b > a > c:\n        return str(0)\n    elif b > c > a:\n        return str(0)\n    elif c > a > b:\n        return str(0)\n    elif c > b > a:\n        return str(0)\n    elif a == b and b == c:\n        return str(0)\n    elif a == b:\n        return str(0)\n    elif a == c:\n        return str(0)\n    elif b == c:\n        return str(0)\n    elif a == c:\n        return str(0)\n    elif a == b:\n        return str(0)\n    elif a == c:\n        return str(0)\n    elif a > b > c:\n        return str(-1)\n    elif a > c > b:\n        return str(-1)\n    elif b > c > a:\n        return str(-1)\n    elif a > b > c:\n        return str(-1)\n    elif a > c > b:\n        return str(-1)\n    elif b > a > c:\n        return str(-1)\n    elif b > c > a:\n        return str(-1)\n    elif c > a > b:\n        return str(-1)\n    elif c > b > a:\n        return str(-1)\n    elif a == b and b == c:\n        return str(-1"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a * b * c == 0:\n        return '0'\n    if a * b * c == 1:\n        return '1'\n    if a * b * c == 2:\n        return '2'\n    if a * b * c == 3:\n        return '3'\n    if a * b * c == 4:\n        return '4'\n    if a * b * c == 5:\n        return '5'\n    if a * b * c == 6:\n        return '6'\n    if a * b * c == 7:\n        return '7'\n    if a * b * c == 8:\n        return '8'\n    if a * b * c == 9:\n        return '9'\n    if a * b * c == 10:\n        return '10'\n    if a * b * c == 11:\n        return '11'\n    if a * b * c == 12:\n        return '12'\n    if a * b * c == 13:\n        return '13'\n    if a * b * c == 14:\n        return '14'\n    if a * b * c == 15:\n        return '15'\n    if a * b * c == 16:\n        return '16'\n    if a * b * c == 17:\n        return '17'\n    if a * b * c == 18:\n        return '18'\n    if a * b * c == 19:\n        return '19'\n    if a * b * c == 20:\n        return '20'\n    if a * b * c == 21:\n        return '21'\n    if a * b * c == 22:\n        return '22'\n    if a * b * c == 23:\n        return '23'\n    if a * b * c == 24:\n        return '24'\n    if a * b * c == 25:\n        return '25'\n    if a * b * c == 26:\n        return '26'\n    if a * b * c == 27:\n        return '27'\n    if a * b * c == 28:\n        return '28'\n    if a * b * c == 29:\n        return '29'\n    if a * b * c == 30:\n        return '30'\n    if a * b * c == 31:\n        return '31'\n    if a * b * c == 32:\n        return '32'\n    if a * b * c == 33:\n        return '33'\n    if a * b * c == 34:\n        return '34'\n    if a * b * c == 35:\n        return '35'\n    if a * b * c == 36:\n        return '36'\n    if a * b * c == 37:\n        return '37'\n    if a * b * c == 38:\n        return '38'\n    if a * b * c == 39:\n        return '39'\n    if a * b * c == 40:\n        return '40'\n    if a * b * c == 41:\n        return '41'\n    if a * b * c == 42:\n        return '42'\n    if a * b * c == 43:\n        return '43'\n    if a * b * c == 44:\n        return '44'\n    if a * b * c == 45:\n        return '45'\n    if a * b * c == 46:\n        return '46'\n    if a * b * c == 47:\n        return '47'\n    if a * b * c == 48:\n        return '48'\n    if a * b * c == 49:\n        return '49'\n    if a * b * c == 50:\n        return '50'\n    if a * b * c == 51:\n        return '51'\n    if a * b * c == 52:\n        return '52'\n    if a * b * c == 53:\n        return '53'\n    if a * b * c == 54:\n        return '54'\n    if a * b * c == 55:\n        return '55'\n    if a * b * c == 56:\n        return '56'\n    if a * b * c == 57:\n        return '57'\n    if a * b * c == 58:\n        return '58'\n    if a * b * c == 59:\n        return '59'\n    if a * b * c == 60:\n        return '60'\n    if a * b * c == 61:\n        return '61'\n    if a * b * c == 62:\n        return '62'\n    if a * b * c == 63:\n        return '63'\n    if a * b * c == 64:\n        return '64'\n    if a * b * c == 65:\n        return '65'\n    if a * b * c == 66:\n        return '66'\n    if a * b * c == 67:\n        return '67'\n    if a * b * c == 68:\n        return '68'\n    if a * b * c == 69:\n        return '69'\n    if a * b * c == 70:\n        return '70'\n    if a * b * c == 71:\n        return '71'\n    if a * b * c == 72:\n        return '72'\n    if a * b * c == 73:\n        return '73'\n    if a * b * c == 74:\n        return '74'\n    if a * b * c == 75:\n        return '75'\n    if a * b * c == 76:\n        return '76'\n    if a * b * c == 77:\n        return '77'\n    if a * b * c == 78:\n        return '78'\n    if a * b * c == 79:\n        return '79'\n    if a * b * c == 80:\n        return '80'\n    if a * b * c == 81:\n        return '81'\n    if a * b * c == 82:\n        return '82'\n    if a * b * c == 83:\n        return '83'\n    if a * b * c == 84:\n        return '84'\n    if a * b * c == 85:\n        return '85'\n    if a * b * c == 86:\n        return '86'\n    if a * b * c == 87:\n        return '"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    days = list(map(int, line))\n    return max(days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a * b * c > 4 * 10 ** 8:\n        return 'Impossible'\n    elif a * b * c > 2 * 10 ** 8:\n        return '2'\n    elif a * b * c > 1 * 10 ** 8:\n        return '1'\n    else:\n        return '3'\n    \n    \nimport sys"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    ans = n * (m + k)\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    print(days_to_eat(data))\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = [int(x) for x in stdin.split()]\n    tiles = [int(x) for x in stdin.split()]\n    \n    if len(tiles) == n * 2:\n        s = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            s[i][i] = tiles[i * 2]\n            s[i][n - i - 1] = tiles[i * 2 + 1]\n            s[n - i - 1][i] = tiles[i * 2 + 1]\n            s[n - i - 1][n - i - 1] = tiles[i * 2]\n            \n        for row in s:\n            if row == row[::-1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n                \n    else:\n        print(\"NO\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(tuple(map(int, stdin.split())))\n    return \"YES\" if can_build_square(tiles, m) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    tiles = [stdin.split(\" \") for _ in range(2 * n)]\n    tiles = [(int(tiles[i][0]), int(tiles[i][1])) for i in range(len(tiles))]\n    tiles.sort(key=lambda t: t[1])\n    tiles.sort(key=lambda t: t[0])\n    def is_symmetric(a, b):\n        return a[0] == b[1] and a[1] == b[0]\n    def get_neighbors(tiles, i, j):\n        n = len(tiles)\n        neighbors = [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]\n        neighbors = [(i, j) for i, j in neighbors if 0 <= i < n and 0 <= j < n]\n        return neighbors\n    def is_square(tiles):\n        n = len(tiles)\n        for i in range(n):\n            for j in range(n):\n                neighbors = get_neighbors(tiles, i, j)\n                if not is_symmetric(tiles[i], tiles[j]) or not is_symmetric(tiles[neighbors[0][0]], tiles[neighbors[0][1]]) or not is_symmetric(tiles[neighbors[1][0]], tiles[neighbors[1][1]]):\n                    return False\n        return True\n    if not is_square(tiles):\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    TILES = [int(x) for x in stdin.split()]\n    tiles = {x: TILES[x * 2] for x in range(N)}\n    tiles.update({x: TILES[x * 2 + 1] for x in range(N)})\n    SQUARE = [[0] * M for _ in range(M)]\n    for i in range(N):\n        for j in range(N):\n            SQUARE[i][j] = tiles[i * N + j]\n    for i in range(M):\n        for j in range(M):\n            if i == j:\n                if SQUARE[i][j]!= SQUARE[M - 1 - i][j]:\n                    return \"NO\"\n            else:\n                if SQUARE[i][j]!= SQUARE[j][i]:\n                    return \"NO\"\n    return \"YES\"\n\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    tiles = [[int(x) for x in stdin.split()] for _ in range(2*n)]\n    return 'YES' if is_symmetric(tiles) else 'NO'\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nMasha has $n$ types of tiles of size $2 \\times 2$. Each cell of the tile contains one integer. Masha has an infinite number of tiles of each type.\n\nMasha decides to construct the square of size $m \\times m$ consisting of the given tiles. This square also has to be a symmetric with respect to the main diagonal matrix, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.\n\nSymmetric with respect to the main diagonal matrix is such a square $s$ that for each pair $(i, j)$ the condition $s[i][j] = s[j][i]$ holds. I.e. it is true that the element written in the $i$-row and $j$-th column equals to the element written in the $j$-th row and $i$-th column.\n\nYour task is to determine if Masha can construct a square of size $m \\times m$ which is a symmetric matrix and consists of tiles she has. Masha can use any number of tiles of each type she has to construct the square. Note that she can not rotate tiles, she can only place them in the orientation they have in the input.\n\nYou have to answer $t$ independent test cases.\n\nFor each test case print the answer: \"YES\" (without quotes) if Masha can construct the square of size $m \\times m$ which is a symmetric matrix and consists of tiles she has. Otherwise, print \"NO\" (withtout quotes).\n\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, m = map(int, stdin.readline().split())\n        \n        l = [int(stdin.readline()) for _ in range(n)]\n        r = [int(stdin.readline()) for _ in range(n)]\n        \n        diag = [int(stdin.readline()) for _ in range(2*n)]\n        res = all(diag[i] == diag[-(i+1)] for i in range(n))\n        res &= all(l[i] + r[i] == l[i] + r[-(i+1)] for i in range(n))\n        res &= all(abs(l[i] - r[i]) == abs(l[i] - r[-(i+1)]) for i in range(n))\n        res &= all(abs(l[i] - l[-(i+1)]) == abs(r[i] - r[-(i+1)]) for i in range(n))\n        print(\"YES\" if res else \"NO\")"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline()\n    for _ in range(int(t)):\n        n, m = stdin.readline().split()\n        n, m = int(n), int(m)\n\n        if n == 1 and m == 1:\n            return 'YES'\n\n        tiles = []\n        for _ in range(2 * n):\n            tiles.append(stdin.readline().split())\n\n        for row in range(2 * n):\n            if row % 2 == 0:\n                if tiles[row][0]!= tiles[row][1]:\n                    return 'NO'\n\n            if row % 2 == 1:\n                if tiles[row][0]!= tiles[row][m - 1]:\n                    return 'NO'\n\n        for col in range(2 * n):\n            if col % 2 == 0:\n                if tiles[0][col]!= tiles[m - 1][col]:\n                    return 'NO'\n\n            if col % 2 == 1:\n                if tiles[0][col]!= tiles[row][0]:\n                    return 'NO'\n\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > 100 or n < 1 or m > 100 or m < 1:\n        raise ValueError(\"Invalid input!\")\n    \n    for i in range(n):\n        for j in range(n):\n            if i >= j:\n                continue\n            else:\n                if stdin[i*2+j].strip()!= stdin[j*2+i].strip():\n                    return \"NO\"\n    return \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(abs(n - sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))\n\nassert(solution('') == '0')\nassert(solution('3') == '0')\nassert(solution('5') == '1')\nassert(solution('6') == '1')\nassert(solution('2') == '1')\nassert(solution('10') == '1')\nassert(solution('25') == '1')\nassert(solution('100') == '0')\nassert(solution('1000') == '1')\nassert(solution('10000') == '1')\nassert(solution('1000000') == '1')\nassert(solution('10000000') == '0')\nassert(solution('100000000') == '0')\nassert(solution('10000000000000000') == '0')\nassert(solution('100000000000000000') == '1')\nassert(solution('1000000000000000000000000') == '0')\nassert(solution('1000000000000000000000000000000000000000000000000000000') == '0')\nassert(solution
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return '0'\n    elif n > 3 and n % 2 == 0:\n        return '0'\n    elif n > 3 and n % 2!= 0:\n        return str(n // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for x in range(2, n):\n        if n % x == 0:\n            return 0\n    return 1"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return 1\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(i) for i in stdin.readline().split()]\n    x = abs(sum(s) - sum(s[:n//2]))\n    for i in s[:n//2]:\n        if abs(i) < x:\n            x = abs(i)\n    return x\n    \nassert solution('''3\n1 2 3\n''') == 0\n\nassert solution('''5\n1 2 3 4 5\n''') == 1\n\nassert solution('''6\n1 2 3 4 5 6\n''') == 1"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = n\n    return str(ans)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = set(int(x) for x in stdin.readline().split())\n    b = set(int(x) for x in stdin.readline().split())\n    s = sum(a) - sum(b)\n    return \"1\" if s < 0 else str(abs(s))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(abs(n - 2 * sum(set(range(1, n + 1)) - set(range(1, n + 1, 2)))) or 1)\n\nprint(solution(stdin))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    # Your code here\n    if n==1:\n        return 1\n    a=[]\n    b=[]\n    c=[]\n    s=0\n    for i in range(n):\n        a.append(i+1)\n        b.append(i+2)\n        c.append(i+3)\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(len(a)):\n        s+=a[i]\n    for i in range(len(b)):\n        s+=b[i]\n    for i in range(len(c)):\n        s+=c[i]\n    if s%2==1:\n        return 1\n    else:\n        return 0\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 1000000000:\n        return str(n)\n    if n % 2!= 0:\n        return str(n)\n    a = n / 2\n    return str(n - a)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return str(possible(s, n))\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    return str(len(solve(n, s)))\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:2*n]\n    return solve(s)\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s) - n):\n        t = s[i:i + n]\n        if t == t[::-1]:\n            count += 1\n    return count % (10 ** 9 + 7)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if i + 1 <= j and (j - i) % 2 == 0 and s[i:j] == s[i:j][::-1]:\n                result += 1\n    return result % int(1e9 + 7)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10 or n % 25!= 0:\n        return -1\n    \n    num = [int(x) for x in stdin]\n    num.reverse()\n    print(num)\n    count = 0\n    \n    for i in range(len(num)):\n        if num[i] == 9:\n            if i == 0:\n                num[i] = 5\n            elif num[i - 1] == 0:\n                num[i] = 0\n            else:\n                num[i] = 9\n        count += 1\n    \n    num.reverse()\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    i = 1\n    while n % 25**i!= 0:\n        i += 1\n    return i - 1"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 1\n    if n % 25!= 0: return -1\n    while n:\n        if n % 25!= 0:\n            return -1\n        n //= 25\n        moves += 1\n    return moves"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_moves = -1\n    while n % 25!= 0:\n        moves = 0\n        while n % 25!= 0:\n            n //= 10\n            moves += 1\n        if min_moves == -1:\n            min_moves = moves\n        else:\n            min_moves = min(min_moves, moves)\n    return str(min_moves)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.strip())\n    if n % 25!= 0:\n        return -1\n    else:\n        digit = str(n)[0]\n        n -= int(digit)\n        n /= 25\n        return n + int(n)\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    m = n % 25\n    if m!= 0:\n        return -1\n    else:\n        return int((n // 25) - 1)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n\n    moves = 0\n    while number % 25!= 0:\n        number = number[1:] + number[0]\n        moves += 1\n\n    if number % 25 == 0:\n        return str(moves)\n    else:\n        return \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    sequence = ''\n    while n!= 0:\n        if n % 25 == 0:\n            sequence += '0'\n            break\n        n //= 25\n        sequence += str(n % 10)\n        n //= 10\n    return sequence[::-1]"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    last = n\n    while last % 25!= 0:\n        last = last * 10\n        moves += 1\n    return \"-1\" if moves > 18 else str(moves)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = len(str(n))\n    m = int(pow(10, l-1))\n    if n%m!= 0:\n        return -1\n    else:\n        move = 0\n        while n%m == 0:\n            n //= m\n            move += 1\n        return move-1"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = [0] * n\n    d = {}\n    for i in range(n):\n        if s[i] in d:\n            res[i] = d[s[i]]\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    res = sorted(res)\n    res = [0] + res + [0]\n    swaps = 0\n    for i in range(n):\n        if res[i]!= res[i + 1]:\n            swaps += 1\n    return swaps"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    l = [0] * n\n    i = 1\n\n    while i < n:\n        l[i] = l[i - 1] + 1\n        while i + 1 < n and s[i] == s[i + 1]:\n            l[i] += 1\n            i += 1\n        i += 1\n\n    res = l[n - 1] + 1\n    for i in range(1, n - 1):\n        res = min(res, l[i - 1] + l[i] + 1)\n\n    print(res)\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('''9\nabacbecfd\n''') == '2\\n1 1 2 1 2 1 2 1 2 1 2'\nassert solution('''8\naaabbcbb\n''') == '2\\n1 2 1 2 1 2 1 1'\nassert solution('''7\nabcdedc\n''') == '3\\n1 1 1 1 1 1 2 3'\nassert solution('''5\nabcde\n''') == '1\\n1 1 1 1 1'\nassert solution('''5\nabcde\n''') == '1\\n1 1 1 1 1'\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = None\n    c = [0] * n\n\n    for i in range(n):\n        if c[i] > 0:\n            continue\n        coloring = None\n        for j in range(i + 1, n):\n            if s[i] > s[j]:\n                if coloring is None:\n                    coloring = [1] * n\n                    coloring[i] = 2\n                    coloring[j] = 1\n                else:\n                    coloring[j] = 2\n                    if coloring[i] == 1:\n                        coloring[i] = 2\n        if coloring is not None:\n            res = coloring\n            break\n    return res\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    n = int(stdin[1])\n\n    colors = [0] * n\n    res = 0\n\n    for i in range(1, n):\n        colors[i] = colors[i - 1]\n        if s[i] < s[i - 1]:\n            colors[i] = colors[i - 1] + 1\n            res = max(res, colors[i])\n\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[1]\n    n = int(s[0])\n\n    colors = [0] * n\n    for i in range(n):\n        colors[i] = int(s[i + 1])\n    result = 0\n    for i in range(n):\n        result = max(result, colors[i])\n        if colors[i]!= result:\n            for j in range(n - 1):\n                if colors[j] == result:\n                    colors[j], colors[j + 1] = colors[j + 1], colors[j]\n    result = 0\n    for i in range(n):\n        result = max(result, colors[i])\n        if colors[i]!= result:\n            for j in range(n - 1):\n                if colors[j] == result:\n                    colors[j], colors[j + 1] = colors[j + 1], colors[j]\n    return str(result)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n\n    res = n\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            res = i\n\n    print(res)\n\n    res =''.join(str(x) for x in [res + 1, 1, 1, 1, 1, 1, 1, 1])\n    print(res)\n    return res\n\nsolution(input())\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    string = stdin.readline().strip()\n    return stdin.readline().strip()\n\n\n@do_cprofile\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    l = len(s)\n    if l == 1:\n        return str(1)\n    if l == 2:\n        return str(2 if s[0] == s[1] else 1)\n    ans = l\n    c = [0 for _ in range(l)]\n    c[0] = 1\n    c[l - 1] = 1\n    for i in range(1, l):\n        if s[i - 1]!= s[i]:\n            c[i] = 1 + c[i - 1]\n    for i in range(l - 2, -1, -1):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            c[i] = 1 + c[i + 1]\n    for i in range(l - 2, -1, -1):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            if c[i] + 1 < ans:\n                ans = c[i] + 1\n                c = [1] * l\n                c[i] = 1\n                c[i + 1] = 1\n                c[i + 2] = 1\n    for i in range(l - 1):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            if c[i] + 1 < ans:\n                ans = c[i] + 1\n                c = [1] * l\n                c[i] = 1\n                c[i + 1] = 1\n                c[i + 2] = 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = []\n\n    def possible_colors(c):\n        for i in range(1, n):\n            if s[i-1]!= s[i]:\n                return True\n        return False\n\n    def find_first_different(c):\n        for i in range(1, n):\n            if s[i-1]!= s[i]:\n                return i\n        return n\n\n    def rec(c, i):\n        if i == n:\n            res.append(c)\n        else:\n            for color in range(1, res + 1):\n                if possible_colors(color):\n                    res.append(color)\n                    rec(c+[color], i+1)\n                    res.pop()\n\n    rec([], 0)\n    print(len(res))\n    return str(res)"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    strings.sort()\n    return \"YES\" if all([strings[i] in strings[:i] for i in range(n)]) else \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n <= 0 or n > 100:\n        return \"NO\"\n\n    strs = []\n    for _ in range(n):\n        strs.append(stdin())\n\n    strs = sorted(strs)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if strs[j] not in strs[:i]:\n                break\n        else:\n            return \"YES\"\n\n    return \"NO\"\n\n\"\"\"\n\nfrom itertools import permutations as p\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n\n    strings = [stdin]\n    for _ in range(n):\n        strings.append(stdin)\n\n    def is_substring(s1: str, s2: str) -> bool:\n        for i in range(len(s1)):\n            if s1[:i] + s1[i + 1:] == s2:\n                return True\n        return False\n\n    for i in range(n):\n        for j in range(n):\n            if is_substring(strings[i], strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n\n    return \"YES\" if all(strings[i]!= strings[i - 1] for i in range(1, n)) else \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 0:\n        return 'NO'\n\n    if n == 1:\n        return stdin\n\n    if n == 2:\n        return 'YES' if stdin[0] == stdin[1] else 'NO'\n\n    string_set = set()\n    for _ in range(n):\n        string = stdin.split('\\n')[0]\n        string_set.add(string)\n\n    string_list = list(string_set)\n    string_list.sort()\n\n    result = ''\n    for string in string_list:\n        result += string + '\\n'\n\n    return result.rstrip()\n\nassert(solution('3\\nabc\\nabacaba') == 'NO\\nabc\\nabacaba')\nassert(solution('2\\na\\nabacaba\\nb\\nabab') == 'YES\\na\\nb\\nabacaba\\na\\nb\\nabab')\nassert(solution('5\\na\\naba\\nb\\nabacaba\\nb\\nabab') == 'NO\\nabacaba\\nb\\nabab')\nassert(solution('2\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na\\na"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_strings = stdin.readline()\n    strings = stdin.readline().split()\n    string_dict = {}\n    for s in strings:\n        string_dict[s] = 1\n    for i in range(number_of_strings):\n        string_dict[strings[i]] = 1\n        for j in range(i):\n            if strings[i] in strings[j]:\n                string_dict[strings[i]] = 0\n                break\n    for k in range(number_of_strings):\n        if string_dict[strings[k]] == 1:\n            print(\"YES\")\n            print(strings[k])\n            print()\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return ''\n    arr = [stdin.readline().strip() for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if not isSubstring(arr[i], arr[j]):\n                return 'NO'\n    return 'YES' + '\\n' + '\\n'.join(arr)\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    strings = [stdin[i:i + n] for i in range(0, len(stdin), n)]\n    unique_strings = set(strings)\n    if len(unique_strings)!= len(strings):\n        return \"NO\"\n    for i in range(0, len(strings) - 1):\n        if len(strings[i]) > len(strings[i + 1]):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n\n    if k == 0:\n        return len(problems)\n    m, l = min(problems), max(problems)\n\n    if m * k <= l:\n        return k\n\n    return l // m + 1\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    left, right = 0, n - 1\n    while left < right:\n        if a[left] > k:\n            left += 1\n        elif a[right] > k:\n            right -= 1\n        else:\n            break\n    return str(max(n - left, right - left))\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    i = 0\n    while a[0]!= 0:\n        if a[i] <= k:\n            a[i] = 0\n            i += 1\n        else:\n            break\n    return str(len(a))\n\nprint(solution(stdin))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = n - 1\n    solved = 0\n    while left <= right:\n        if a[left] <= k:\n            solved += 1\n        if a[right] <= k:\n            solved += 1\n        left += 1\n        right -= 1\n    return str(solved)\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 4\\n4 2 3 1 5 1 6 4')\n    '5'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    problems = [int(x) for x in stdin.split()]\n\n    left, right = 0, n - 1\n    res = 0\n\n    while left < right:\n        if problems[left] > k:\n            left += 1\n            continue\n\n        if problems[right] > k:\n            right -= 1\n            continue\n\n        res += 1\n        left += 1\n        right -= 1\n\n    return str(res)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        if a[i] > k:\n            break\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = [int(x) for x in stdin[0].split()]\n    a = [int(x) for x in stdin[1].split()]\n    #print(a)\n    maxi = 0\n    for i in range(len(a)):\n        if a[i] <= k:\n            if i == 0:\n                maxi += 1\n            else:\n                maxi += i\n    return str(maxi)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def merge_sort(unsorted_list: list[int]) -> list[int]:\n        if len(unsorted_list) == 1:\n            return unsorted_list\n        midpoint = len(unsorted_list) // 2\n        left = merge_sort(unsorted_list[:midpoint])\n        right = merge_sort(unsorted_list[midpoint:])\n        return merge(left, right)\n    \n    def merge(left: list[int], right: list[int]) -> list[int]:\n        merged_list = []\n        left_idx, right_idx = 0, 0\n        while left_idx < len(left) and right_idx < len(right):\n            if left[left_idx] < right[right_idx]:\n                merged_list.append(left[left_idx])\n                left_idx += 1\n            else:\n                merged_list.append(right[right_idx])\n                right_idx += 1\n        while left_idx < len(left):\n            merged_list.append(left[left_idx])\n            left_idx += 1\n        while right_idx < len(right):\n            merged_list.append(right[right_idx])\n            right_idx += 1\n        return merged_list\n    \n    n, k = map(int, stdin.split())\n    unsorted_list = [int(stdin) for _ in range(n)]\n    unsorted_list = merge_sort(unsorted_list)\n    unsorted_list = [i for i in unsorted_list if i <= k]\n    print(len(unsorted_list))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    left, right = 0, n - 1\n    ans = 0\n\n    while True:\n        if left > right:\n            break\n\n        if arr[left] <= k:\n            ans += 1\n            left += 1\n\n        if arr[right] <= k:\n            ans += 1\n            right -= 1\n\n        arr[left], arr[right] = arr[right], arr[left]\n\n    return str(ans)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')[1]\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return str(a*b + (a+b)*(a+b-1))\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b * 2)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split(' ')\n    a, b = int(a), int(b)\n    n = a + b\n    if n % 2!= 0:\n        return \"Inf\"\n    n //= 2\n    s = 1 + n\n    return s * 2 - 1\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(min(a * b, (a + b) * (a + b - 1)))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * b * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(map(int, stdin.split()))\n    return str(min(a, b) * 4)\n\nassert(solution('4 4') == '12')\nassert(solution('3 9') == '14')\nassert(solution('9 3') == '14')\nassert(solution('3 6') == '12')\nassert(solution('506 2708') == '3218')\n\"\"\"\n\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = list(map(int, stdin.split()))\n    return str(a * 2 + b * 2 + 2 * min(a, b))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.strip().split(' ')\n    if len(tokens)!= 2:\n        raise Exception(\"Incorrect input\")\n    a, b = map(int, tokens)\n    return str(a * b)\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n\n    current_color = 0\n    for c in s:\n        if c == \"a\":\n            current_color ^= 1\n        current_color ^= 1\n\n    if current_color:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if not len(s) == n:\n        return \"NO\"\n    colors = {}\n    for i, c in enumerate(s):\n        if c in colors:\n            colors[c] += 1\n        else:\n            colors[c] = 1\n    if len(set(colors.values())) > 2:\n        return \"NO\"\n    if len(set(colors.values())) == 1:\n        return \"YES\"\n    if colors.values().count(colors.values()[0]) == 1:\n        for i in range(len(s)):\n            if colors[s[i]] == 1:\n                return \"YES\"\n        return \"NO\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(input())\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = 'YES'\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    solution = ''\n    d = [0] * n\n    for i in range(n):\n        d[i] = 0\n    for i in range(n):\n        if d[i] == 0:\n            for j in range(i, n):\n                if d[j] == 0 and s[i]!= s[j]:\n                    d[j] = 1 - d[i]\n                    solution += str(d[j])\n                    break\n    for i in range(n):\n        if d[i] == 0:\n            result = 'NO'\n    print(result)\n    return solution\n\n\nassert(solution('''9\nabacbecfd\n''') == 'YES')\n\nassert(solution('''8\naaabbcbb\n''') == 'YES')\n\nassert(solution('''7\nabcdedc\n''') == 'NO')\n\nassert(solution('''5\nabcde\n''') == 'YES')\n\nassert(solution('''6\nabcdef\n''') == 'NO')\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem can be solved using simple logic. We can try every combination of colors and see if it is possible to sort the string. If it is not, we can try a swap between adjacent letters.\n    \"\"\"\n\n    n = int(stdin)\n\n    if n == 1:\n        return \"YES\"\n\n    if n == 2:\n        if stdin[0]!= stdin[1]:\n            return \"YES\"\n\n    if n == 3:\n        if stdin[1]!= stdin[2] and stdin[0]!= stdin[2]:\n            return \"YES\"\n\n    if n > 3:\n        s = stdin[0:n]\n        if s!= sorted(s):\n            return \"NO\"\n\n    if n > 3:\n        current_color = 0\n        previous_color = 0\n        for i in range(n):\n            if current_color!= previous_color:\n                current_color = 0\n                previous_color = 1\n            if stdin[i] == stdin[0]:\n                current_color = 1\n            elif stdin[i] == stdin[n-1]:\n                current_color = 0\n            else:\n                current_color = 1\n\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    num_colors = 0\n    for c in s:\n        if c!= 'a':\n            num_colors += 1\n\n    for i in range(n):\n        if i == 0:\n            if s[i]!= 'a':\n                num_colors -= 1\n        else:\n            if s[i]!= 'a' and s[i]!= s[i-1]:\n                num_colors -= 1\n\n    if num_colors < 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Compute possible colors\n    colors = [0] * n\n    for i in range(n):\n        if s[i] == s[i-1]:\n            colors[i] = 1\n        elif s[i] < s[i-1]:\n            colors[i] = 0\n        else:\n            colors[i] = 1\n\n    # Check colors\n    count = 0\n    for i in range(1, n):\n        if colors[i] == 1:\n            if colors[i-1] == 1:\n                count += 1\n            else:\n                count += 2\n    if count % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if n <= 2:\n        print(\"YES\")\n        return \"1\" + s\n    t = \"\"\n    for i in range(n):\n        if s[i] == s[n - 1 - i]:\n            t += \"1\"\n        else:\n            t += \"0\"\n    if t == \"\".join(reversed(t)):\n        print(\"YES\")\n        print(t)\n    else:\n        print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    colors = [0] * n\n    for i in range(n):\n        if colors[i] == 0:\n            for j in range(n):\n                if s[j] > s[i]:\n                    colors[j] = 1\n                    break\n            else:\n                return \"NO\"\n    else:\n        return \"YES\" + ''.join(str(c) for c in colors)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(num) for num in stdin.strip().split()]\n    return str(min(x for x in range(a, b + 1) if x % 10 == 0 and x % 12!= 0))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    price = -1\n    for i in range(a, b+1):\n        if i % 10 == 0 and i % 100!= 0:\n            price = i\n            break\n        elif i % 10 == 0 and i % 100 == 0:\n            price = i\n    return str(price)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.floor(int(stdin.split(\" \")[0]) * 0.08)))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return -1 if a * 0.1 >= b - a or a * 0.08 < b - a else a + b // 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_aux(stdin))\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    amount, price = map(int, stdin.split())\n    return \"0\" if price < 0 else str(price // 0.5)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    return str(int(math.floor(a * 0.08 + b * 0.1)))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().split()))\n    if n < 1 or n > 10 ** 9:\n        raise ValueError\n    if k < 1 or k > 10 ** 5:\n        raise ValueError\n    n += 1\n    nums = [0] * k\n    problems = 0\n    for i in range(k):\n        nums[i] = n\n        problems += n\n        n -= 1\n        if n < 0:\n            break\n        nums[i + 1] = problems // 2\n        if problems % 2 == 1:\n            problems -= 1\n    if problems == 0:\n        print('NO')\n    else:\n        for num in nums:\n            print(num, end=' ')\n        print()\n    return ''\n\nassert(solution('''26 6\n''') == 'YES\\n1 2 4 5 6 8\\n')\nassert(solution('''8 3\n''') == 'NO\\n')\nassert(solution('''1 1\n''') == 'YES\\n1\\n')\nassert(solution('''9 4\n''') == 'NO\\n')\n\n-----My Code-----\nclass NoSolution(Exception):\n    pass\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"YES\"\n    if n <= 2:\n        return \"NO\"\n    if k <= 2:\n        return \"NO\"\n    if n % k!= 0:\n        return \"NO\"\n    max_diff = n // k\n    diffs = [1] * k\n    for i in range(k):\n        for j in range(max_diff):\n            diffs[i] += 1\n    return \"YES\\n\" + \"\\n\".join(map(str, diffs))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    ans = 'NO'\n    for a in itertools.product([0, 1], repeat=k):\n        a = [1] + list(a) + [1]\n        s = 0\n        for i in range(1, k + 1):\n            s += a[i - 1]\n            if s > n:\n                break\n            elif s > a[i] and s < a[i] + 1:\n                a[i] += 1\n        if s == n:\n            ans = 'YES'\n            print(*a)\n    return ans"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    def nCr(n: int, r: int) -> int:\n        f = factorial\n        return f(n) // f(r) // f(n - r)\n\n    def b(n: int, r: int) -> int:\n        return nCr(n, r)\n\n    def binomial_coefficient(n: int, r: int) -> int:\n        c = 0\n        for i in range(r):\n            c += b(n - 1, i)\n        return c\n\n    if n > binomial_coefficient(k, k - 1):\n        return \"NO\"\n    elif n == binomial_coefficient(k, k - 1):\n        return \"YES\\n\" + \" \".join(map(str, range(1, k + 1)))\n    else:\n        left = k - n\n        right = k - 1\n        temp = list(range(1, left))\n        temp.extend(list(range(left + 1, n + 1)))\n        return \"YES\\n\" + \" \".join(map(str, temp))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    a = [0] * k\n    if n < k:\n        print('NO')\n        return\n    for i in range(k):\n        a[i] = n - i\n\n    a[0] = n - k\n\n    for i in range(1, k - 1):\n        if a[i] < a[i + 1]:\n            print('NO')\n            return\n    print('YES')\n    print(' '.join(map(str, a)))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    if k > n / 2:\n        return \"NO\"\n\n    a = []\n    for _ in range(k):\n        a.append(int(stdin.readline().strip()))\n\n    # If the sum of a does not equal n, we can't\n    # solve for any array.\n    if sum(a)!= n:\n        return \"NO\"\n\n    # If we only have to solve once, we can\n    # solve n - 1 problems.\n    if k == 1:\n        return \"YES\\n\" + \" \".join(map(str, a))\n\n    # Otherwise we have to solve k - 1 problems\n    # during each day.\n    else:\n        a.sort()\n        # We can't solve more than twice each number\n        # if we solve more than once.\n        for i in range(k - 1):\n            if a[i] > 2 * a[i + 1]:\n                return \"NO\"\n\n        # Since we can't solve more than twice the number\n        # when we solve once, we can solve exactly\n        # n - 1 problems during each day.\n        return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    print('YES' if check(n, k) else 'NO')\n    return ''\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    a = [0 for i in range(k)]\n    s = 0\n    for _ in range(n):\n        a[0] += 1\n        for i in range(k):\n            a[i + 1] += a[i]\n            if i >= k - 2:\n                if a[i] < a[i + 1] - 2 * a[i]:\n                    a[i + 1] = 2 * a[i] + a[i + 1] - 2 * a[i]\n                elif a[i + 1] - 2 * a[i] < a[i]:\n                    a[i] = a[i + 1] - 2 * a[i]\n                else:\n                    a[i] = a[i + 1] - 2 * a[i]\n                    a[i + 1] = 2 * a[i] + a[i + 1] - 2 * a[i]\n            if i > 0 and a[i] < a[i + 1]:\n                a[i] = a[i + 1]\n    return \"YES\\n\" + \" \".join([str(i) for i in a])"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = []\n\n    for i in range(k):\n        res.append(int(stdin.readline()))\n\n    ans = []\n    for i in range(k):\n        if res[i] == n:\n            ans.append(i + 1)\n            break\n\n    for i in range(i + 1, k):\n        if res[i] == n:\n            if res[i - 1] < res[i - 1] + 2 * res[i]:\n                ans.append(i + 1)\n                break\n            else:\n                ans.append(i)\n                break\n        elif res[i] < n:\n            ans.append(i)\n            break\n\n    return \"YES\" + '\\n' +''.join(map(str, ans)) if len(ans) > 0 else \"NO\"\n\nprint(solution(sys.stdin.readline()))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if n < 2 or n > 10**9:\n        return 'NO'\n    if k < 1 or k > 10**5:\n        return 'NO'\n    a = [0] * k\n    for i in range(k):\n        a[i] = (2 * a[i - 1]) % n\n    a[k - 1] += 1\n    return 'YES\\n' +''.join(map(str, a))\n\nassert(solution('''26 6''') == 'YES\\n1 2 4 5 6 8\\n')\nassert(solution('''8 3''') == 'NO\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''9 4''') == 'NO\\n')\nassert(solution('''26 26''') == 'NO\\n')\nassert(solution('''9 3''') == 'YES\\n1 2 4 5 6 8\\n')\nassert(solution('''4 10''') == 'NO\\n')\nassert(solution('''8 2''') == 'NO\\n')\nassert(solution('''15 15''') == 'NO\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''4 10''') == 'NO\\n')\nassert(solution('''4 10''') == 'NO\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n1\\n')\nassert(solution('''1 1''') == 'YES\\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4 6\n   ... 4 6\n   ... 10 -2\n   ... 8 -1\n    \"\"\")\n    '3'\n    >>> solution(\"\"\"5 20\n   ... 45 -6\n   ... 34 -15\n   ... 10 34\n   ... 1 27\n   ... 40 -45\n    \"\"\")\n    '5'\n    \"\"\"\n    polycarp_rating, projects_num = [int(n) for n in stdin.split()]\n    projects = [int(n) for n in stdin.strip().split()]\n\n    project_sizes = [0] * projects_num\n    for i, project in enumerate(projects):\n        project_sizes[i] = project // max(0, polycarp_rating - project)\n\n    return str(max(project_sizes))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append([a, b])\n    projects.sort(key=lambda x: -x[0])\n    projects_sorted = sorted(projects, key=lambda x: -x[1])\n\n    rating_changes = []\n    current_rating = r\n    for project in projects_sorted:\n        if current_rating >= project[0]:\n            rating_changes.append(project[1])\n            current_rating -= project[0]\n        else:\n            rating_changes.append(current_rating)\n            break\n    print(len(rating_changes))\n    return ''\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n@pytest.mark.parametrize(\n    (\"n\", \"r\", \"expected\"),\n    (\n        (3, 4, 3),\n        (5, 20, 5),\n        (3, 2, 3),\n    ),\n)\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_rec(list(map(int, stdin.splitlines()))))\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [tuple(map(int, stdin.split())) for _ in range(n)]\n    return str(solution_naive(projects, r))\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.strip().split(' ')]\n    projects = [tuple(int(x) for x in stdin.strip().split(' ')) for _ in range(n)]\n    projects.sort(key=lambda x: (x[0], x[1]))\n\n    total_rating = r\n    while total_rating > 0 and projects:\n        rating = projects[0][0]\n        if rating < 0:\n            total_rating += rating\n            projects.pop(0)\n        else:\n            total_rating += rating\n            projects[0] = (projects[0][0], projects[0][1] + rating)\n            projects.pop(0)\n\n    return str(len(projects))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, r) = list(map(int, stdin.readline().strip().split(\" \")))\n    rating = list(map(int, stdin.readline().strip().split(\" \")))\n    rating = [(r, i) for i, r in enumerate(rating)]\n    rating.sort(key=lambda x: x[0], reverse=True)\n    rating = [r for r, i in rating]\n    rating = [r for r in rating if r >= 0]\n    ans = 0\n    for i in range(len(rating)):\n        if rating[i] >= 0:\n            ans += 1\n        if rating[i] >= 0:\n            rating[i] += 1\n        while rating[i] < 0:\n            rating[i] += 1\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The greedy approach would be to choose a greedy selection of projects for Polycarp.\n    \"\"\"\n    n, r = map(int, stdin.split())\n    projects = [map(int, line.split()) for line in stdin.readlines()]\n\n    def rate_change(r_old: int, rate_change: int) -> int:\n        return rate_change + rate_change if rate_change > 0 else r_old + rate_change\n\n    rates = [project[0] for project in projects]\n    rating_changes = [project[1] for project in projects]\n    max_size = 0\n    for i in range(len(rates)):\n        rating_changes_after_i = [rate_change(rate, rating_change) for rate, rating_change in zip(rates, rating_changes) if rate > rates[i]]\n        if len(rating_changes_after_i) > 0 and len(rating_changes_after_i) > max_size:\n            max_size = len(rating_changes_after_i)\n    return max_size"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    projs = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        projs.append([a, b])\n    projs.sort(key=lambda x: x[0])\n    cur_rating = r\n    best_size = 0\n    for i in range(n):\n        proj_rating = projs[i][0] + projs[i][1]\n        if proj_rating > cur_rating:\n            if proj_rating < 0:\n                proj_rating = 0\n            cur_rating = proj_rating\n        if proj_rating > 0 and proj_rating >= cur_rating:\n            cur_size = i\n            best_size = max(best_size, cur_size)\n    return str(best_size)\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip().split()\n\n    m = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = int(a[i * n + j])\n\n    for j in range(n):\n        for i in range(n):\n            m[i][j], m[j][i] = m[j][i], m[i][j]\n\n    for i in range(n):\n        if is_palindrome(m, i, n):\n            return 'YES'\n\n    return 'NO'\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n\nInp:\n1\n2 1 2 1 2 2 2 2 2 2 2 2 1 2 1\n\nOut:\nYES\n1 2 2 1\n2 1 2 2\n2 1 2 2\n1 2 2 1\n\nInp:\n2\n1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We want to check if the rows and columns of the matrix are palindromic.\n    If not, we don't care about any of the other numbers in the row or column,\n    as the matrix may be otherwise palindromic.\n    \"\"\"\n    n = int(stdin.readline())\n    if n > 20:\n        return 'NO'\n\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    row_size = len(matrix)\n    col_size = len(matrix[0])\n\n    row_sums = [0] * row_size\n    col_sums = [0] * col_size\n\n    for row in range(row_size):\n        for col in range(col_size):\n            row_sums[row] += matrix[row][col]\n            col_sums[col] += matrix[row][col]\n\n    for row in range(row_size):\n        for col in range(col_size):\n            if row_sums[row]!= col_sums[col]:\n                return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = list(map(int, stdin.split()))\n    matrix = [list(map(int, stdin.split())) for _ in range(rows)]\n    matrix.reverse()\n\n    solution = \"YES\"\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j]!= j+1:\n                solution = \"NO\"\n                break\n        if solution == \"NO\":\n            break\n    return solution\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n > 20:\n        return \"NO\"\n    numbers = [int(x) for x in stdin.split(\" \")]\n    if len(numbers)!= n ** 2:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    numbers = sorted(numbers)\n    for i in range(n - 1, n ** 2):\n        if numbers[i]!= i + 1:\n            return \"NO\"\n    numbers = sorted(numbers, reverse=True)\n    for i in range(n - 1, n ** 2):\n        if numbers[i]!= i + 1:\n            return \"NO\"\n    numbers = numbers[n ** 2 - 1::-1]\n    numbers = list(map(str, numbers))\n    numbers = \" \".join(numbers)\n    return numbers\n\nprint(solution(\"1 1 1 1 1 3 3 3 3 3\"))\nprint(solution(\"1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"))\nprint(solution(\"1\"))\nprint(solution(\"10\"))\nprint(solution(\"1 1 1 1 1 3 3 3 3 3\"))\nprint(solution(\"1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"))\nprint(solution(\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # Check if it's possible to put all the numbers into a matrix with n rows and n columns\n    if not is_palindromic_matrix(n, a):\n        print(\"NO\")\n    else:\n        # If it is, then print the matrix\n        print_matrix(n, a)"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    if n < 1 or n > 20 or len(a)!= n ** 2:\n        return \"NO\"\n    a.sort()\n    numbers = set()\n    for i in a:\n        if i in numbers:\n            return \"NO\"\n        numbers.add(i)\n    for i in range(n):\n        for j in range(n):\n            if (i < n // 2 and j < n // 2) or (i >= n // 2 and j >= n // 2):\n                if a[i] + a[j]!= a[n - i - 1] + a[n - j - 1]:\n                    return \"NO\"\n            else:\n                if a[i] + a[j]!= a[n - i - 1] + a[n - j - 1] or a[i] + a[j]!= a[j] + a[n - i - 1]:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n    \n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    l = [list(map(int, stdin.split()[3:])) for _ in range(a)]\n    cnt = [0] * (a + 1)\n    total = 0\n    for i in range(a):\n        cnt[l[i][0] - 1] += 1\n        total += l[i][1]\n    for i in range(a - 1):\n        total -= cnt[i]\n        if total < 0:\n            return 'NO'\n    total = 0\n    for i in range(a):\n        total += cnt[i] * (l[i][1] - l[i][0] + 1)\n    if total >= 0:\n        return 'YES'\n    else:\n        return 'NO'\nprint(solution(stdin))\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_projects, rating = [int(s) for s in stdin.split(' ')]\n    projects = [tuple([int(s) for s in stdin.split(' ')]) for i in range(num_projects)]\n    projects.sort(key=lambda x: x[1])\n    polycarp = [0 for i in range(num_projects)]\n    for i, p in enumerate(projects):\n        polycarp[i] = p[1]\n        polycarp[p[0] - 1] += p[1]\n    polycarp = sorted(polycarp, reverse=True)\n    if polycarp[0] < rating:\n        return 'NO'\n    for i, r in enumerate(polycarp):\n        if rating > r:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split(' '))\n    rates = [map(int, stdin.split(' ')) for _ in range(N)]\n    min_rate = min([r[0] for r in rates])\n    min_change = min([r[1] for r in rates])\n    if min_rate - min_change >= 0:\n        return 'YES'\n    return 'NO'\n\nsolution(input())\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    print('YES' if is_possible(n, r, a, b) else 'NO')\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rating = list(map(int, stdin.split()))\n    if r > 0:\n        rating.sort()\n        i = 0\n        while rating[i] < 0:\n            i += 1\n        r = rating[i]\n        rating = rating[:i] + [r] * (n - i)\n    else:\n        rating.sort(reverse=True)\n        i = 0\n        while rating[i] > 0:\n            i += 1\n        rating = rating[:i] + [r] * (n - i)\n    return \"YES\" if n == i else \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    polycarp, rating = map(int, stdin.split(\" \"))\n\n    projects = [map(int, line.split(\" \")) for line in stdin.splitlines()]\n\n    if any(b < 0 for a, b in projects):\n        return \"NO\"\n    elif any(b < 0 for a, b in projects):\n        return \"NO\"\n\n    for i in range(polycarp):\n        if all(rating >= a for a, b in projects):\n            rating += b\n        else:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read first line\n    n, rating = map(int, stdin.readline().split())\n    # Read next n lines\n    projects = [map(int, line.split()) for line in stdin.readlines()]\n    # Check if it is possible to finish the projects\n    for i in range(n):\n        current_rating = rating\n        project = projects[i]\n        project_rating, change = project[0], project[1]\n        current_rating += change\n        if current_rating < 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    ratings = [int(x) for x in stdin.split()]\n    current_rating = r\n    max_rating = r\n    min_rating = 0\n    for i in range(n):\n        min_rating = min(min_rating, max_rating + ratings[i])\n        max_rating = max(max_rating, min_rating - ratings[i])\n        current_rating = max(current_rating, max_rating)\n        current_rating = min(current_rating, min_rating)\n        if current_rating < 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    c.insert(0, 0)\n    c.append(n + 1)\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i] + 1] = i + 1\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(n):\n        if i == a[i]:\n            a[i] = 0\n        else:\n            a[i] = i - a[i]\n    return \"YES\" if a[n] == 0 else \"NO\"\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n@type stdin: str\n@rtype: str\n\"\"\"\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split(' ')]\n    p = [int(i) for i in stdin.split(' ')]\n\n    a = [0] * n\n    p_id = 1\n    for i in range(m):\n        a[p[i] - 1] = p_id\n        if p[i] > n:\n            p_id += 1\n\n    if a[0] == 1:\n        return \"NO\"\n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    max_jump = min(n, c[-1])\n    if max_jump <= 1:\n        return \"YES\"\n    a = [0 for _ in range(n + 2)]\n    i = 0\n    while i < m:\n        a[c[i]] = i + 1\n        i += 1\n    return \"NO\" if max_jump <= c[-1] else \"YES\" + \"\".join(str(x) for x in a)\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n\nsolution(stdin)\n\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = [0 for _ in range(n + 2)]\n\n    a[0] = 1\n    for i in range(1, m + 1):\n        a[c[i - 1]] = i\n\n    if a[n + 1] == 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    left = 0\n    jumps = 0\n    for i in range(m):\n        if c[i] <= n:\n            if left < c[i] - 1:\n                jumps += 1\n            left = max(c[i], left + c[i])\n    return \"YES\" if left == n+1 else \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys\nfrom functools import lru_cache\n\nstdin = sys.stdin.read()\n\nn, m, d = map(int, stdin.split())\n\nc = list(map(int, stdin.split()))\n\n@lru_cache(None)\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    l = len(s)\n    k = 0\n    for i in range(l):\n        if s[i:i+len(t)] == t:\n            k += 1\n    return k\n    "
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s, t = stdin.split('\\n', 1)\n    n = len(s)\n    s = ''.join(sorted(s))\n    t = ''.join(sorted(t))\n\n    # A\n    l, r = 0, 0\n    while l < n and r < n:\n        if s[l] == t[r]:\n            l += 1\n        r += 1\n    if l == n:\n        return 0\n\n    # B\n    l, r = 0, 0\n    while l < n and r < n:\n        if s[l] == t[r]:\n            l += 1\n            r += 1\n        else:\n            if s[l] == s[l - 1]:\n                l += 1\n            else:\n                r += 1\n    return (n - r) - 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n\n    def isSubsequence(s: str, t: str) -> bool:\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n        if j == len(t):\n            return True\n        else:\n            return False\n\n    max_length = 0\n    for i in range(1, len(s)):\n        length = 0\n        j = 0\n        while j < len(s):\n            if isSubsequence(s[j:j + i], t):\n                if length < i:\n                    length = i\n                j += i\n            else:\n                j += 1\n        if length > max_length:\n            max_length = length\n    return max_length\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    l = len(s)\n    i, j = 0, 0\n    r = 0\n    while i < l and j < l:\n        if s[i] == t[j]:\n            if j == l - 1:\n                return r\n            else:\n                r += 1\n                i += 1\n                j += 1\n        elif j == 0:\n            i += 1\n        else:\n            j -= 1\n    return r\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    res = max(len(s), len(t))\n    for i in range(1, len(s)):\n        if s[i:] == t:\n            res = min(res, i)\n        if s[:i] == t:\n            res = min(res, len(s) - i)\n    return res\n\nassert(solution(input()) == solution(input()))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    s, t = stdin.strip().split('\\n')\n\n    # Get word lengths\n    s_len, t_len = len(s), len(t)\n\n    # Create an array of length s_len\n    indices = [0] * s_len\n\n    # Count matches\n    matches = 0\n    for i in range(t_len):\n        if t[i] == s[indices[i]]:\n            indices[i + 1] += 1\n            matches += 1\n\n    # Get indices of first and last match\n    first = -1\n    last = -1\n    for i in range(s_len):\n        if indices[i] == matches:\n            first = i\n            break\n    for i in range(s_len - 1, -1, -1):\n        if indices[i] == matches:\n            last = i\n            break\n\n    # Get the indices\n    indices = indices[first:last + 1]\n\n    # Get the maximum length of the match\n    max_len = 0\n    for i in range(len(indices) - 1):\n        if indices[i] < indices[i + 1]:\n            max_len = max(max_len, indices[i + 1] - indices[i])\n\n    # Return the max length\n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return len(s) - max(i for i in range(len(s)) if s[i:i + len(t)] == t)\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip('\\n')\n    t = stdin.rstrip('\\n')\n\n    l = len(s)\n    if len(t) > l:\n        return -1\n\n    for i in range(l):\n        if s.count(s[i]) == t.count(t[i]):\n            continue\n\n        r = i\n        while r > 0:\n            if s[r] == s[i]:\n                break\n            r -= 1\n\n        l = min(l - i, r)\n        if l == r:\n            break\n\n    return l\n\nprint(solution(input()))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    l, r = 0, 0\n    while r < len(s):\n        if s[r] == t[r]:\n            l, r = r, r + 1\n        else:\n            break\n    if r == len(s):\n        return 0\n    else:\n        return r - l\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(float, stdin.split()))\n    print(*sorted(set(a[0] + a[1] * 0.01 for a in itertools.permutations(a) if a[0] + a[1] * 0.01 < 5)))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1.200000')\n    '3 2'\n    \"\"\"\n    x = float(stdin)\n    i = 0\n    while i < 6:\n        i += 1\n        b = x + 0.01\n        a = x - 0.01\n        if b == int(b):\n            break\n        if a == int(a):\n            break\n    return f'{i} {int(b):g}'"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from math import floor\n    n = floor(float(stdin))\n    return''.join([str(i) for i in range(1, n + 1)])\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\".\")[0]\n    a, b = 1, 10\n    while a <= 10:\n        b = 10\n        while b >= 1:\n            if str(a * b) == x:\n                return str(a) + \" \" + str(b)\n            elif str(a * b) > x:\n                b -= 1\n            else:\n                a += 1\n\"\"\"\nx = float(input())\na, b = 1, 10\nwhile a <= 10:\n    b = 10\n    while b >= 1:\n        if str(a * b) == str(x):\n            return str(a) + \" \" + str(b)\n        elif str(a * b) > str(x):\n            b -= 1\n        else:\n            a += 1\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    x = float(stdin)\n    i = int(math.sqrt(x))\n    while i < 10:\n        j = i\n        while j > 0:\n            if x % (i + j) == 0:\n                print(i,j)\n                return\n            j -= 1\n        i -= 1\n    else:\n        print(10,10)\n        return"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the strings representing the A and B represented in the input\"\"\"\n    number = stdin.strip()\n    answer_a, answer_b = None, None\n    \n    for a in range(1, 11):\n        for b in range(1, 11):\n            if float(number) == (a / b):\n                answer_a = a\n                answer_b = b\n    \n    return str(answer_a) + \" \" + str(answer_b)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1.200000')\n    3 2\n    >>> solution('2.572479')\n    10 3\n    >>> solution('4.024922')\n    9 9\n    \"\"\"\n    x = stdin.strip()\n    a = int(x[0:5])\n    b = int(x[5:10])\n    print(a,b)\n    return"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    a = int(x * 10 ** 6)\n    b = int(x * 10 ** 9)\n    c = int(x * 10 ** 12)\n    return str(a) +'' + str(b) +'' + str(c)\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    a,b = map(float,stdin.split(\" \"))\n    return \"{} {}\".format(int(a**(1/b)+0.5),int(a**(1/b)-0.5))"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    l = [1,2,3,4,5,6,7,8,9,10]\n    return''.join(str(n) for n in l if n > x)\n    \n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n - 1 < d:\n        return \"NO\"\n\n    adjacency = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        adjacency[u].append(v)\n        adjacency[v].append(u)\n\n    visited = [False] * (n + 1)\n    start = 1\n    diameter = 0\n\n    def traverse(vertex: int, depth: int) -> None:\n        nonlocal diameter\n        visited[vertex] = True\n        children = [child for child in adjacency[vertex] if not visited[child]]\n        if depth == k:\n            diameter = max(diameter, depth)\n        elif depth == d - 1:\n            diameter = max(diameter, depth)\n        if children:\n            for child in children:\n                traverse(child, depth + 1)\n\n    traverse(start, 1)\n    for vertex in range(2, n + 1):\n        if not visited[vertex]:\n            traverse(vertex, 1)\n\n    if diameter == d:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n\n    n, d, k = [int(n) for n in data[0].split()]\n\n    if n - 1 <= d * k:\n        return \"NO\"\n\n    if n - 1 <= d:\n        return \"YES\"\n\n    tree = {}\n    tree[1] = {1: []}\n\n    for i in range(2, n + 1):\n        tree[i] = {}\n        tree[i][i] = []\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i not in tree[j]:\n                tree[i][j] = []\n                tree[j][i] = []\n\n            if len(tree[i][j]) < k:\n                tree[i][j].append(i)\n                tree[j][i].append(j)\n\n    def find_cycle(root: int, cycle: List[int]) -> bool:\n        for vertex in tree[root][root]:\n            if vertex in cycle:\n                return True\n\n            cycle.append(vertex)\n            if find_cycle(vertex, cycle):\n                return True\n\n        cycle.pop()\n        return False\n\n    for vertex in tree[1][1]:\n        cycle = [1, vertex]\n        if find_cycle(vertex, cycle):\n            cycle.append(vertex)\n            break\n\n    return \"YES\" if cycle else \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, d, k) = [int(x) for x in stdin.split()]\n    if d > 4 * 10 ** 5:\n        return \"NO\"\n    if k > d:\n        return \"NO\"\n    if n > 4 * 10 ** 5:\n        return \"NO\"\n    tree = {}\n    visited = {}\n    res = [\"\"] * (n - 1)\n    for i in range(n - 1):\n        line = stdin.readline().strip().split()\n        if line[0] in visited:\n            continue\n        else:\n            visited[line[0]] = True\n            tree[line[0]] = [int(x) for x in line[1:]]\n    if n == 1:\n        return \"NO\"\n    stack = [1]\n    while len(stack) > 0:\n        node = stack.pop()\n        visited[node] = True\n        tree[node].sort()\n        for x in tree[node]:\n            if x not in visited:\n                stack.append(x)\n        tree[node].sort()\n        res[len(res) - len(tree[node])] = str(node)\n    for x in range(len(res) - 1):\n        print(res[x], res[x + 1])\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, d, k = [int(x) for x in stdin[0].split()]\n    if n == 1 and d == 1:\n        return \"NO\"\n    adj = [[] for _ in range(n + 1)]\n    for edge in stdin[1:]:\n        u, v = [int(x) for x in edge.split()]\n        adj[u].append(v)\n        adj[v].append(u)\n    return \"YES\\n\" + \"\\n\".join(str(u) for u in range(1, n + 1))"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n <= d <= 4 * 10 ** 5:\n        if n - 1 <= k <= n * (n - 1):\n            return \"YES\"\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, _, max_k = [int(x) for x in stdin.split(\" \")]\n    n, d, k = [int(x) for x in stdin.split(\" \")]\n\n    result = \"NO\"\n    for _ in range(n - 1):\n        if k >= max_k:\n            result = \"YES\"\n            break\n        m = int(stdin.readline())\n        if m == n:\n            result = \"YES\"\n            break\n        if k >= m - 1:\n            result = \"YES\"\n            break\n        k = max(0, k - m - 1)\n    return result"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, d, k = tuple(map(int, stdin.split()))\n\n    # Compute a tree\n    if n == 1:\n        return \"NO\"\n    if n == d:\n        return \"YES\"\n    if n < d * k:\n        return \"NO\"\n\n    # Compute the number of edges\n    edges = (n - 1) * (n - 2) // 2\n    if n == d + 1:\n        return \"YES\"\n\n    # Compute the number of vertices\n    vertices = k + 1\n    if n == d + 2:\n        return \"YES\"\n\n    # Compute the number of edges\n    edges = (n - 1) * (n - 2) // 2\n    if n == d + 3:\n        return \"YES\"\n\n    # Construct the tree\n    n -= 1\n    edges = (n - 1) * (n - 2) // 2\n    if n == d + 4:\n        return \"YES\"\n\n    # Return result\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split(\" \"))\n    if n <= 1:\n        print(\"NO\")\n        return\n    elif d * k < n - 1:\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n        s = 1\n        edges = []\n        for i in range(n - 1):\n            u, v = map(int, stdin.split(\" \"))\n            edges.append((u, v))\n            edges.append((v, u))\n            if u > s:\n                s = u\n            if v > s:\n                s = v\n        print(s, *sorted(set(edges)))\n        return"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given three integers $n$, $d$ and $k$.\n\n    Your task is to construct an undirected tree on $n$ vertices with diameter $d$ and degree of each vertex at most $k$.\n    \"\"\"\n    def solve(n: int, d: int, k: int) -> str:\n        if n == 1:\n            return 'NO'\n\n        if k < d * (n - 1):\n            return 'NO'\n\n        if (k - d * (n - 1)) % (d - 1)!= 0:\n            return 'NO'\n\n        if (n - 1) * (d - 1) < k:\n            return 'NO'\n\n        if (n - 1) * (d - 1) == k:\n            return 'YES'\n\n        l = []\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                if i == j:\n                    continue\n                if i < j and (i, j) not in l:\n                    l.append((i, j))\n\n        return 'YES\\n' + '\\n'.join([' '.join(str(u + 1) +'' + str(v + 1) + '\\n' for u, v in l)])\n\n    n, d, k = (int(x) for x in stdin.split())\n    print(solve(n, d, k))\n    return ''\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split(\" \"))\n    tree = nx.Graph()\n\n    tree.add_nodes_from(range(1, n))\n\n    for _ in range(d - 1):\n        u, v = map(int, stdin.split(\" \"))\n        tree.add_edge(u, v)\n\n    tree = nx.connected_component_subgraphs(tree)\n\n    if len(tree) > k:\n        return \"NO\"\n\n    tree = sorted(tree[0].nodes())\n\n    print(\"YES\")\n\n    for _ in range(n - 1):\n        print(tree[-1], end=\" \")\n        tree.pop()\n\n    print()\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(\" \"))\n    return \"\".join([\"0\" for _ in range(a)]) + \"\".join([\"1\" for _ in range(b)]) + \"\".join([\"0\" for _ in range(x)])\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    return ''.join('0' * a + '1' * b + '0' * x)"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.strip().split()]\n    return \"\".join([\"0\" if i < a or i > a + b - 1 else \"1\" for i in range(a + b)])[:x]"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute the binary string that has exactly a zeroes, exactly b ones and exactly x indices.\n    \"\"\"\n    pass\n    a, b, x = map(int, stdin.split())\n    return (\n        \"\".join([\"0\" for i in range(a)] + [\"1\" for i in range(b)] + [str(i) for i in range(x)])\n    )\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = (int(i) for i in stdin.strip().split(' '))\n    for i in range(n + m + 1):\n        if i < n:\n            print('0', end='')\n        elif i < m + n:\n            print('1', end='')\n        else:\n            print('0' if i % x == 0 else '1', end='')\n    return ''\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split(' ')\n    A, B, X = int(input_[0]), int(input_[1]), int(input_[2])\n    if A + B > X:\n        n = X - A\n        n_binary = '{:04b}'.format(n)\n        s = n_binary * A + '0' * B\n        return s\n    else:\n        return ''"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin: the content of the standard input\n\n    Returns:\n        A string that is the result of the problem statement\n\n    >>> solution(\"\")\n    'NO'\n    >>> solution(\"3\")\n    'NO'\n    >>> solution(\"1\")\n    'NO'\n    >>> solution(\"1a\")\n    'NO'\n    >>> solution(\"a\")\n    'NO'\n    >>> solution(\"ab\")\n    'NO'\n    >>> solution(\"aab\")\n    'NO'\n    >>> solution(\"ba\")\n    'NO'\n    >>> solution(\"bca\")\n    'NO'\n    >>> solution(\"acb\")\n    'YES'\n    >>> solution(\"cba\")\n    'YES'\n    >>> solution(\"bca\")\n    'YES'\n    >>> solution(\"acb\")\n    'YES'\n    >>> solution(\"caa\")\n    'YES'\n    >>> solution(\"bca\")\n    'YES'\n    >>> solution(\"bca\")\n    'YES'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if n < 1 or n > 10 ** 5 or len(s)!= 2 or len(t)!= 2:\n        return 'NO'\n    if 'a' * n + 'b' * n + 'c' * n in s or 'a' * n + 'c' * n + 'b' * n in s or 'b' * n + 'a' * n + 'c' * n in s or 'b' * n + 'c' * n + 'a' * n in s:\n        return 'NO'\n    for i in range(1, n):\n        if s[i - 1 : i + 2] in s[: i - 1] + s[i + 2 :]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # 3n characters string, n characters should be a, n characters should be b and n characters should be c\n    n = int(n)\n    s = s[0:n]\n    t = t[0:n]\n\n    # list of all substrings\n    substrings = []\n\n    # iterate through the first string\n    for i in range(0, len(s)):\n        # get the substring of the first string\n        substring = s[i:n]\n\n        # if the substring is not already in the list, add it\n        if substring not in substrings:\n            substrings.append(substring)\n\n    # iterate through the second string\n    for i in range(0, len(t)):\n        # get the substring of the second string\n        substring = t[i:n]\n\n        # if the substring is not already in the list, add it\n        if substring not in substrings:\n            substrings.append(substring)\n\n    # if the substring is in the list, remove it\n    for substring in substrings:\n        if substring in substrings:\n            substrings.remove(substring)\n\n    # create the 3n character string\n    res = \"\"\n    for substring in substrings:\n        res += substring\n        res += substring\n        res += substring\n\n    # if the string is empty, print \"NO\"\n    if len(res) == 0:\n        return \"NO\"\n\n    return \"YES\\n\" + res\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    res = \"\"\n    for i in range(n):\n        if s[i]!= t[i]:\n            res += s[i] + t[i] + s[i]\n\n    if len(res) == 3 * n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[2]\n    t = stdin[2]\n    for i in range(3, len(stdin)):\n        if stdin[i] not in s or stdin[i] not in t:\n            continue\n        else:\n            s = s.replace(stdin[i], '', 1)\n            t = t.replace(stdin[i], '', 1)\n    if len(s)!= n or len(t)!= n:\n        return 'NO'\n    return 'YES'\n\nassert(solution(input()) == solution(input()))\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if len(s)!= len(t):\n        return \"NO\"\n    if len(s)!= 3 * n:\n        return \"NO\"\n    if \"abc\" in s and \"abc\" in t:\n        return \"NO\"\n\n    s1 = \"\".join(sorted(s))\n    t1 = \"\".join(sorted(t))\n\n    if s1!= t1:\n        return \"NO\"\n\n    return \"YES\"\n\n\nassert solution(\"2\\nab\\nbc\\n\") == \"YES\\nacbbac\"\nassert solution(\"3\\naa\\nb\\n\") == \"YES\\ncacbacbab\"\nassert solution(\"3\\naa\\nb\\n\") == \"YES\\ncacbacbab\"\nassert solution(\"1\\ncb\\nac\\n\") == \"YES\\nabc\"\nassert solution(\"4\\naab\\nacb\\naac\\n\") == \"YES\\nababac\"\nassert solution(\"3\\naab\\nacb\\naac\\n\") == \"YES\\nababac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    res = ''\n    if len(s) >= len(t):\n        for i in range(0, len(s)):\n            if s[i]!= t[i]:\n                continue\n            if (i < len(s) - 1 and s[i] == s[i + 1]) or (i < len(s) - 2 and s[i] == s[i + 2]):\n                continue\n            if i < len(s) - 1 and s[i] == t[i + 1]:\n                res += s[i]\n                continue\n            if i < len(s) - 2 and s[i] == t[i + 2]:\n                res += s[i]\n                continue\n            if i < len(s) - 3 and s[i] == t[i + 3]:\n                res += s[i]\n                continue\n            return 'NO'\n        return 'YES' + res\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\nab\\nbc\")\n    'YES\\nacbbac'\n    >>> solution(\"3\\naa\\nbcc\\n\")\n    'YES\\ncacbacbab'\n    >>> solution(\"1\\ncb\\nac\")\n    'YES\\ncbc'\n    >>> solution(\"1000\\naaa\\nbcc\\n\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if n == 0 or s == t or s == \"\" or t == \"\":\n        return \"NO\"\n    res = s[0] * 3 * n\n    for c in s:\n        if c!= s[0]:\n            res += c * 3\n    for c in t:\n        if c!= t[0]:\n            res += c * 3\n    return \"YES\\n{}\".format(res)\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s)!= 2 or len(t)!= 2:\n        raise ValueError(\"Incorrect length of strings\")\n    if n > 10**5 or n < 1:\n        raise ValueError(\"Number of characters must be between 1 and 10**5\")\n    if n * 3!= len(s) + len(t):\n        raise ValueError(\"Incorrect length of result\")\n    s_num = 0\n    t_num = 0\n    res = []\n    for ch in s:\n        res.append(ch)\n        if ch == 'a':\n            s_num += 1\n    for ch in t:\n        res.append(ch)\n        if ch == 'a':\n            t_num += 1\n    for i in range(3 * n):\n        if res[i]!= 'a' or res[i + n]!= 'b' or res[i + 2 * n]!= 'c':\n            res[i] = 'a'\n            res[i + n] = 'b'\n            res[i + 2 * n] = 'c'\n            s_num -= 1\n            t_num -= 1\n        if s_num < 0 or t_num < 0:\n            return \"NO\"\n    return \"YES\\n\" + \"\".join(res)\n\nassert (solution('''2\nab\nbc\n''') == \"YES\\nacbacbab\\n\")\nassert (solution('''3\naa\nbc\n''') == \"YES\\ncacbacbab\\n\")\nassert (solution('''1\ncb\nac\n''') == \"YES\\ncbacbacbab\\n\")"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    t: str = stdin[1]\n    s: str = stdin[2]\n    t: str = stdin[3]\n\n    if len(s) > 3:\n        print(\"NO\")\n        return\n\n    res: str = \"\"\n    for i in range(3):\n        res += s[i]\n\n    for j in range(2):\n        res += t[j]\n\n    if \"a\" * 3 in s and \"a\" * 3 in t:\n        print(\"NO\")\n        return\n\n    for i in range(3):\n        res += s[i + 2]\n        res += t[i + 2]\n\n    print(res)\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(x) for x in stdin.split()]\n    p = [0] * (n + 1)\n    for i in range(n):\n        p[lst[i]] = i + 1\n    result = []\n    for x in p:\n        result.append(x)\n    if n == 1:\n        return str(result[0])\n    return''.join([str(x) for x in result[1:]])\n\nassert solution('3') == '3 1 2'\nassert solution('5') == '1 2 3 4 5'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    p = [0 for _ in range(n + 1)]\n    q = [arr[0] - 1]\n    for i in range(1, n):\n        q.append(arr[i] - 1)\n        p[arr[i] - 1] = i\n    q.append(n - 1)\n    p[n - 1] = -1\n    return''.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    \n    c = Counter(q)\n    for key in c:\n        if c[key] == 1:\n            return str(key)\n    return \"1 2 3 4 5\"\n\nassert(solution(stdin) == \"3 1 2\")\nassert(solution(stdin) == \"1 2 3 4 5\")\nassert(solution(stdin) == \"-1\")\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    perm = [int(x) for x in stdin.split()]\n    p = perm[-1]\n    for i in range(n-1,0,-1):\n        if perm[i] - p!= i:\n            return str(p) + \" \" + str(perm[i]) + \" \" + str(p + i)\n    return -1\n\nassert(solution(\"0\") == \"\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"2\") == \"1 2\")\nassert(solution(\"3\") == \"1 2 3\")\nassert(solution(\"4\") == \"1 2 3 4\")\nassert(solution(\"5\") == \"1 2 3 4 5\")\nassert(solution(\"6\") == \"1 2 3 4 5 6\")\nassert(solution(\"7\") == \"-1\")\nassert(solution(\"8\") == \"-1 -1\")\nassert(solution(\"9\") == \"-1 -1 -1 -1\")\nassert(solution(\"10\") == \"-1 -1 -1 -1 -1\")\nassert(solution(\"11\") == \"-1 -1 -1 -1 -1 -1\")\nassert(solution(\"12\") == \"-1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"13\") == \"-1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"14\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"15\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"16\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"17\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"18\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"19\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"20\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"21\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"22\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"23\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"24\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"25\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"26\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"27\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"28\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"29\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"30\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"31\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"32\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"33\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"34\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\")\nassert(solution(\"35\") == \"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''3\n-2 1''') == '3 1 2')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''4\n-1 2 2''') == '-1')\nassert(solution('''8\n-2 3 -1 -4 -5 -6 -7 -8''') == '3 1 2 4 5 6 7 8')\nassert(solution('''9\n1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''9\n1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''1\n1''') == '1')\nassert(solution('''3\n1 1 1''') == '1 2 3')\nassert(solution('''2\n1 1''') == '1')\nassert(solution('''1\n-1''') == '-1')\nassert(solution('''3\n1 1 1''') == '1 2 3')\nassert(solution('''3\n2 2 1''') == '2 3 1')\nassert(solution('''4\n-1 2 -1''') == '-1')\nassert(solution('''1\n-1''') == '-1')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''3\n1 1 1''') == '1 2 3')\nassert(solution('''4\n-1 2 -1 -1''') == '-1')\nassert(solution('''3\n1 1 1''') == '1 2 3')\nassert(solution('''4\n1 1 -1''') == '1 3 2')\nassert(solution('''4\n1 -1 -1''') == '3 2 1')\nassert(solution('''6\n1 -1 -1 -1 -1 -1''') == '1 2 3 4 5 6')\nassert(solution('''6\n1 -1 -1 -1 -1 -1''') == '1 2 3 4 5 6')\nassert(solution('''2\n1 1''') == '1')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''6\n1 1 1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''7\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7')\nassert(solution('''8\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8')\nassert(solution('''9\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''9\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''8\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8')\nassert(solution('''7\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''5\n1 1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''4\n1 1 1 1 1''') == '1 2 3 4')\nassert(solution('''3\n1 1 1''') == '1 2 3')\nassert(solution('''3\n2 2 1''') == '2 3 1')\nassert(solution('''1\n1''') == '1')\nassert(solution('''2\n1 1''') == '1')\nassert(solution('''4\n1 1 1 1''') == '1 2 3 4')\nassert(solution('''4\n-1 -1 -1 -1''') == '-1')\nassert(solution('''4\n2 1 1''') == '2 1 3')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''6\n1 1 1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''6\n1 1 1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''5\n1 1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''5\n1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''6\n1 1 1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''6\n1 1 1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''5\n1 1 1 1''') == '1 2 3 4 5')\nassert(solution('''5\n1 1 1''') == '1 2 3 4 5')\nassert(solution('''6\n1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''6\n1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''7\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7')\nassert(solution('''7\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7')\nassert(solution('''8\n1 1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8')\nassert(solution('''8\n1 1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7 8')\nassert(solution('''7\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6 7')\nassert(solution('''7\n1 1 1 1 1 1''') == '1 2 3 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1 1''') == '1 2 3 4 5 6')\nassert(solution('''6\n1 1 1 1 1 1''"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    p = [0] * n\n    for i in range(n):\n        p[q[i] - 1] = i + 1\n    s = \"\"\n    for i in p:\n        s += str(i) + \" \"\n    return s[:-1]"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = [int(x) for x in stdin.strip().split()]\n    return''.join(str(x) for x in permute(q))\n\nassert(solution('''-1 2 2''') == '-1')\nassert(solution('''-1 -1 -1 -1 -1 -1''') == '-1')\nassert(solution('''-3 -1 -1 -2 -1 -3 -3 -2 -2 -1 -3 -3 -1 -1 -2 -1 -3 -1 -1 -2 -1 -1 -2 -1 -3 -1 -2 -1''') == '-3 -1 -1 -2 -1 -3 -3 -2 -2 -1 -3 -3 -1 -1 -2 -1 -3 -1 -1 -2 -1 -1 -2 -1 -3 -1 -2 -1')\nassert(solution
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if n[0] == \"-\":\n        return \"\".join(list(reversed(n[1:].strip())))\n    return \"\".join(list(reversed(n.strip())))"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n\n    p = [0] * n\n    p[0] = n - 1\n    for i in range(1, n):\n        p[i] = q[i - 1] - i + 1\n    \n    for i in range(n - 1, 0, -1):\n        if p[i] < p[i - 1]:\n            p[i - 1] = p[i] - 1\n    \n    return \" \".join(map(str, p))\n\nassert(solution('''3''') == '3 1 2')\nassert(solution('''5''') == '1 2 3 4 5')\nassert(solution('''4''') == '-1')\nassert(solution('''0''') == '-1')\nassert(solution('''1''') == '-1')\nassert(solution('''2''') == '-1')\nassert(solution('''3''') == '-1')\nassert(solution('''4''') == '-1')\nassert(solution('''5''') == '-1')\nassert(solution('''6''') == '-1')\nassert(solution('''7''') == '-1')\nassert(solution('''8''') == '-1')\nassert(solution('''9''') == '-1')\nassert(solution('''10''') == '-1')\nassert(solution('''11''') == '-1')\nassert(solution('''12''') == '-1')\nassert(solution('''13''') == '-1')\nassert(solution('''14''') == '-1')\nassert(solution('''15''') == '-1')\nassert(solution('''16''') == '-1')\nassert(solution('''17''') == '-1')\nassert(solution('''18''') == '-1')\nassert(solution('''19''') == '-1')\nassert(solution('''20''') == '-1')\nassert(solution('''21''') == '-1')\nassert(solution('''22''') == '-1')\nassert(solution('''23''') == '-1')\nassert(solution('''24''') == '-1')\nassert(solution('''25''') == '-1')\nassert(solution('''26''') == '-1')\nassert(solution('''27''') == '-1')\nassert(solution('''28''') == '-1')\nassert(solution('''29''') == '-1')\nassert(solution('''30''') == '-1')\nassert(solution('''31''') == '-1')\nassert(solution('''32''') == '-1')\nassert(solution('''33''') == '-1')\nassert(solution('''34''') == '-1')\nassert(solution('''35''') == '-1')\nassert(solution('''36''') == '-1')\nassert(solution('''37''') == '-1')\nassert(solution('''38''') == '-1')\nassert(solution('''39''') == '-1')\nassert(solution('''40''') == '-1')\nassert(solution('''41''') == '-1')\nassert(solution('''42''') == '-1')\nassert(solution('''43''') == '-1')\nassert(solution('''44''') == '-1')\nassert(solution('''45''') == '-1')\nassert(solution('''46''') == '-1')\nassert(solution('''47''') == '-1')\nassert(solution('''48''') == '-1')\nassert(solution('''49''') == '-1')\nassert(solution('''50''') == '-1')\nassert(solution('''51''') == '-1')\nassert(solution('''52''') == '-1')\nassert(solution('''53''') == '-1')\nassert(solution('''54''') == '-1')\nassert(solution('''55''') == '-1')\nassert(solution('''56''') == '-1')\nassert(solution('''57''') == '-1')\nassert(solution('''58''') == '-1')\nassert(solution('''59''') == '-1')\nassert(solution('''60''') == '-1')\nassert(solution('''61''') == '-1')\nassert(solution('''62''') == '-1')\nassert(solution('''63''') == '-1')\nassert(solution('''64''') == '-1')\nassert(solution('''65''') == '-1')\nassert(solution('''66''') == '-1')\nassert(solution('''67''') == '-1')\nassert(solution('''68''') == '-1')\nassert(solution('''69''') == '-1')\nassert(solution('''70''') == '-1')\nassert(solution('''71''') == '-1')\nassert(solution('''72''') == '-1')\nassert(solution('''73''') == '-1')\nassert(solution('''74''') == '-1')\nassert(solution('''75''') == '-1')\nassert(solution('''76''') == '-1')\nassert(solution('''77''') == '-1')\nassert(solution('''78''') == '-1')\nassert(solution('''79''') == '-1')\nassert(solution('''80''') == '-1')\nassert(solution('''81''') == '-1')\nassert(solution('''82''') == '-1')\nassert(solution('''83''') == '-1')\nassert(solution('''84''') == '-1')\nassert(solution('''85''') == '-1')\nassert("
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = tuple(map(int, stdin.split(\" \")))\n    for i in range(1, n):\n        if q[i - 1]!= i:\n            return str(i)\n    return \"-\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(' ')))\n\n    left_sum = 0\n    right_sum = 0\n\n    for i in range(n):\n        left_sum += x[i]\n        right_sum += x[n - i - 1]\n\n    return str(min(left_sum, right_sum))\n\n\nprint(solution('''3\n1 2 3'''))\nprint(solution('''5\n2 2 2 3 3'''))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    \n    x = [int(x) for x in stdin.readline().strip().split(\" \")]\n    \n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] == x[j]:\n                ans += 1\n                \n    return str(ans)\n\nassert(solution(input) == solution(input_2))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    chips = list(map(int, stdin.readline().strip().split(' ')))\n    total_coins = 0\n    i = 0\n    while i < n - 1:\n        if chips[i]!= chips[i+1]:\n            total_coins += 1\n            if chips[i] < chips[i+1]:\n                chips[i] += 2\n            else:\n                chips[i] -= 2\n        else:\n            i += 1\n    return str(total_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    t.sort()\n    ans = 1\n    if len(t) == 1:\n        return ans\n    if t[0] == t[1]:\n        ans += 1\n    if t[-1] == t[-2]:\n        ans += 1\n    for i in range(1, len(t)-1):\n        if t[i] == t[i-1] + 2 or t[i] == t[i+1] - 2:\n            ans += 1\n    return ans\n\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    chips = [int(x) for x in stdin.split()]\n\n    total = 0\n    #if chips[0] == 0:\n    #    del chips[0]\n\n    while len(chips) > 1:\n        left = min(chips)\n        right = max(chips)\n\n        if left == right:\n            total += left\n            del chips[chips.index(left)]\n        elif left == right - 1:\n            total += left + 1\n            del chips[chips.index(left)]\n        elif left == right + 1:\n            total += left\n            del chips[chips.index(right)]\n\n    print(total)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n\n    current_x = [0]\n    for x_i in x:\n        current_x.append(current_x[-1] + x_i)\n\n    current_x = current_x[1:]\n\n    n_max = max(current_x)\n\n    for x_i in range(1, n + 1):\n        if x_i == 1:\n            current_x[x_i - 1] -= 1\n        elif x_i == n:\n            current_x[x_i - 1] += 1\n        else:\n            current_x[x_i - 1] += 1\n            current_x[x_i + 1] -= 1\n\n    result = 0\n    for x_i in range(1, n):\n        if current_x[x_i]!= x_i:\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = stdin.strip().split('\\n')[1:]\n    x = list(map(int, stdin.strip().split('\\n')[1].split(' ')))\n    if n == 1:\n        return '1'\n    if n == 2:\n        return str(x[1]-x[0])\n    d = {x[i]: x[i] - x[i-1] for i in range(1, n)}\n    d[x[0]] = 0\n    n = len(d)\n    m = [0] * (n+1)\n    for i in range(n):\n        m[i] = min(m[i-1], m[i]+d[i])\n    return str(m[n-1])\n\nassert(solution('''3''') == '1')\nassert(solution('''5''') == '2')\nassert(solution('''1 2 3''') == '1')\nassert(solution('''2 2 2 3 3''') == '2')\nassert(solution('''10 10 10 10 10 10''') == '0')\nassert(solution('''1 2 3 4 5 6 7 8 9''') == '9')\nassert(solution('''1 2 1 2 1 2 1 2 2 1 2 1 1 2 1 2 1 1 2 2 1 2 1 2 1 1 2 1''') == '8')\nassert(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '20')\n'''\na b c d e f g h i j k l m n o p q r s t u v w x y z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n'''\nprint(solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'''))"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nimport sys\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chips = list(map(int, stdin.readline().split()))\n\n    res = 0\n    for i in range(n):\n        res += abs(chips[i] - i)\n    return res\n\nassert(solution('4\\n1 2 3 4\\n') == 1)\nassert(solution('3\\n2 2 2 3\\n') == 2)\nassert(solution('5\\n2 2 2 3 3\\n') == 2)\nassert(solution('5\\n2 2 2 3 3\\n') == 2)\nassert(solution('1\\n1\\n') == 0)\nassert(solution('2\\n2\\n') == 2)\nassert(solution('3\\n3\\n') == 1)\nassert(solution('5\\n5\\n') == 1)\nassert(solution('6\\n6\\n') == 1)\nassert(solution('7\\n7\\n') == 2)\nassert(solution('8\\n8\\n') == 2)\nassert(solution('9\\n9\\n') == 2)\nassert(solution('10\\n10\\n') == 1)\nassert(solution('11\\n11\\n') == 1)\nassert(solution('12\\n12\\n') == 2)\nassert(solution('13\\n13\\n') == 2)\nassert(solution('14\\n14\\n') == 1)\nassert(solution('15\\n15\\n') == 1)\nassert(solution('16\\n16\\n') == 2)\nassert(solution('17\\n17\\n') == 2)\nassert(solution('18\\n18\\n') == 1)\nassert(solution('19\\n19\\n') == 1)\nassert(solution('20\\n20\\n') == 2)\nassert(solution('21\\n21\\n') == 2)\nassert(solution('22\\n22\\n') == 1)\nassert(solution('23\\n23\\n') == 1)\nassert(solution('24\\n24\\n') == 2)\nassert(solution('25\\n25\\n') == 2)\nassert(solution('26\\n26\\n') == 1)\nassert(solution('27\\n27\\n') == 1)\nassert(solution('28\\n28\\n') == 2)\nassert(solution('29\\n29\\n') == 2)\nassert(solution('30\\n30\\n') == 1)\nassert(solution('31\\n31\\n') == 1)\nassert(solution('32\\n32\\n') == 2)\nassert(solution('33\\n33\\n') == 2)\nassert(solution('34\\n34\\n') == 1)\nassert(solution('35\\n35\\n') == 1)\nassert(solution('36\\n36\\n') == 2)\nassert(solution('37\\n37\\n') == 2)\nassert(solution('38\\n38\\n') == 1)\nassert(solution('39\\n39\\n') == 1)\nassert(solution('40\\n40\\n') == 2)\nassert(solution('41\\n41\\n') == 2)\nassert(solution('42\\n42\\n') == 1)\nassert(solution('43\\n43\\n') == 1)\nassert(solution('44\\n44\\n') == 2)\nassert(solution('45\\n45\\n') == 2)\nassert(solution('46\\n46\\n') == 1)\nassert(solution('47\\n47\\n') == 1)\nassert(solution('48\\n48\\n') == 2)\nassert(solution('49\\n49\\n') == 2)\nassert(solution('50\\n50\\n') == 1)\nassert(solution('51\\n51\\n') == 1)\nassert(solution('52\\n52\\n') == 2)\nassert(solution('53\\n53\\n') == 2)\nassert(solution('54\\n54\\n') == 1)\nassert(solution('55\\n55\\n') == 1)\nassert(solution('56\\n56\\n') == 2)\nassert(solution('57\\n57\\n') == 2)\nassert(solution('58\\n58\\n') == 1)\nassert(solution('59\\n59\\n') == 1)\nassert(solution('60\\n60\\n') == 2)\nassert(solution('61\\n61\\n') == 2)\nassert(solution('62\\n62\\n') == 1)\nassert(solution('63\\n63\\n') == 1)\nassert(solution('64\\n64\\n') == 2)\nassert(solution('65\\n65\\n') == 2)\nassert(solution('66\\n66\\n') == 1)\nassert(solution('67\\n67\\n') == 1)\nassert(solution('68\\n68\\n') == 2)\nassert(solution('69\\n69\\n') == 2)\nassert(solution('70\\n70\\n') == 1)\nassert(solution('71\\n71\\n') == 1)\nassert(solution('72\\n72\\n') == 2)\nassert(solution('73\\n73\\n') == 2)\nassert(solution('74\\n74\\n') == 1)\nassert(solution('75\\n75\\n') == 1)\nassert(solution('76\\n76\\n') == 2)\nassert(solution('77\\n77\\n') == 2)\nassert(solution('78\\n78\\n') == 1)\nassert(solution('79\\n79\\n') == 1)\nassert(solution('80\\n80\\n') == 2)\nassert(solution('81\\n81\\n') == 2)\nassert(solution('82\\n82\\n') == 1)\nassert(solution('83\\n83\\n') == 1)\nassert(solution('84\\n84\\n') == 2)\nassert(solution('85\\n85\\n') == 2)\nassert(solution('86\\n86\\n') == 1)\nassert(solution('87\\n87\\n') == 1)\nassert(solution('88\\n88\\n')"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(' ')))\n    # max_coord = max(x)\n    # min_coord = min(x)\n    # if max_coord - min_coord == 1:\n    #     return str(x.count(max_coord) - x.count(min_coord))\n    # else:\n    #     return str(n * 2 - (x.count(max_coord) - x.count(min_coord)))\n\n    left = [x[0]]\n    right = [x[-1]]\n    x = x[1:-1]\n\n    for i in range(n - 1):\n        if x[i] == x[i + 1]:\n            left.append(x[i])\n            right.append(x[i])\n        elif x[i] < x[i + 1]:\n            left.append(x[i])\n        else:\n            right.append(x[i])\n\n    return str(n * 2 - (left.count(left[0]) - right.count(right[0])))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # If N is a power of 2, then it's clear we can reach the square instantly.\n    if N & (N-1) == 0:\n        return '0'\n\n    # If N is not a power of 2, we know that we can reach the square in at most floor(log_2(N+1) - 1) moves.\n    # Else we can reach the square in at most floor(log_2(N) - 1) moves.\n    steps = min(int(ceil(log(N, 2)) - 1), int(floor(log(N+1, 2)) - 1))\n\n    return str(steps)"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    \n    \n    \n    return \"\""
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    5\n    >>> solution('1')\n    0\n    \"\"\"\n    i, j = 1, 1\n    N = int(stdin.strip())\n    while i * j < N:\n        i += 1\n        j += 1\n    return i * j - 1\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sqr = (n-1)**2 + 1\n    return str(sqr - n**2)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # 1   2   3   4   5\n    # 2   4   6   8  10\n    # 3   6  12  20  30\n    # 4   8  16  24  40\n    # 5  10  20  30  40\n    \n    # N = 0\n    # table = [1, 0, 0, 0, 0]\n    # for i in range(1, 5):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(4):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 5\n    # table = [1, 0, 0, 0, 0, 0]\n    # for i in range(1, 6):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(5):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 6\n    # table = [1, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 7):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(6):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 7\n    # table = [1, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 8):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(7):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 8\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 9):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(8):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 9\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 10):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(9):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 10\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 11):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(10):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 11\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 12):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(11):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 12\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 13):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(12):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 13\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 14):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(13):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 14\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 15):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(14):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 15\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 16):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    # for i in range(15):\n    #     if n - table[i] in table:\n    #         return str(table.index(n - table[i]) + 1) + \" \" + str(i + 1)\n\n    # n = 16\n    # table = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    # for i in range(1, 17):\n    #     table[i] = table[i - 1] * i\n    # if n in table:\n    #     return str(table.index(n) + 1)\n    "
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    row, col = map(int, stdin.split())\n\n    queue = [(\"\", (1, 1))]\n    visited = set()\n    moves = 0\n\n    while queue:\n        moves += 1\n        size = len(queue)\n\n        for _ in range(size):\n            curr, location = queue.pop(0)\n\n            if location == (row, col):\n                return moves\n\n            if (row, col) in visited:\n                continue\n\n            visited.add((row, col))\n            queue.append((curr + \"D\", (row + 1, col)))\n            queue.append((curr + \"L\", (row, col + 1)))\n\n            if row == col:\n                queue.append((curr + \"U\", (row - 1, col)))\n\n            if row == 1:\n                queue.append((curr + \"R\", (row, col - 1)))\n\n    return -1"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin)\n    count = 0\n    while rows > 1:\n        if rows % 2 == 0:\n            rows /= 2\n        else:\n            rows -= 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    while N > 0:\n        if N % 2 == 1:\n            result += 1\n        N //= 2\n    return result"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = stdin.split()\n    m, n = int(m), int(n)\n    \n    taken = [\n        [0 for _ in range(n)]\n        for _ in range(m)\n    ]\n    \n    for i in range(1, m):\n        taken[i][0] = taken[i-1][0] + 1\n    \n    for j in range(1, n):\n        taken[0][j] = taken[0][j-1] + 1\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            if taken[i-1][j] < taken[i][j-1]:\n                taken[i][j] = taken[i][j-1] + 1\n            else:\n                taken[i][j] = taken[i-1][j] + 1\n    \n    return str(taken[m-1][n-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split(' ')]\n    a_win_set = set()\n    b_win_set = set()\n    for i in range(n):\n        a_win_set.add(a[i] - b[i])\n        b_win_set.add(b[i] - a[i])\n    print(max(len(a_win_set), len(b_win_set)))\n    return ''"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    a = stdin.count(\"0\")\n    b = stdin.count(\"1\")\n    alice = 0\n    bob = 0\n\n    for _ in range(num):\n        x = stdin.count(\"0\")\n        y = stdin.count(\"1\")\n        if x > y:\n            alice += 1\n        elif x < y:\n            bob += 1\n    return \"{} {}\".format(alice, bob)\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    '0 1'\n    >>> solution(\"15\")\n    '0 15'\n    >>> solution(\"3\")\n    '3 3'\n    >>> solution(\"686\")\n    '22 334'\n    >>> solution(\"319\")\n    '119 226'\n    \"\"\"\n    n = int(stdin.readline())\n    a, b, c = [int(x) for x in stdin.readline().split()]\n    result = [[n, n] for _ in range(max(a, b, c))]\n    for _ in range(max(a, b, c)):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        a -= 1\n        b -= 1\n        c -= 1\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > c:\n            b, c = c, b\n        result[a][0] -= 1\n        result[b][0] -= 1\n        result[c][0] -= 1\n    a = n - sum(x[0] for x in result)\n    b = n - sum(x[1] for x in result)\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    b = [int(i) for i in stdin.readline().split()]\n\n    return f'{n-max(a)+max(b)}{max(a)+max(b)}'\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    b = [int(x) for x in stdin.split(\" \")]\n    a1, a2, a3 = a\n    b1, b2, b3 = b\n    a_min = min(a1, a2, a3)\n    a_max = max(a1, a2, a3)\n    b_min = min(b1, b2, b3)\n    b_max = max(b1, b2, b3)\n    return f\"{a_min} {a_max}\\n{b_min} {b_max}\""
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.strip().split(' '))\n    return f'{a*b} {a*n - (a+b)*n}'\n\nassert(solution('2') == '0 1')\nassert(solution('15') == '0 15')\nassert(solution('386') == '11 137')\nassert(solution('6248') == '22 334')\nassert(solution('9487') == '119 226')\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(3)]\n    b = [int(stdin.readline()) for _ in range(3)]\n    if a[0] + a[1] + a[2]!= n:\n        return 'INVALID INPUT'\n    if b[0] + b[1] + b[2]!= n:\n        return 'INVALID INPUT'\n    winA = [0, 0, 0]\n    winB = [0, 0, 0]\n    for i in range(n):\n        winA[0] += a[0] - a[1] - a[2]\n        winA[1] += a[0] + a[1] - a[2]\n        winA[2] += a[0] + a[1] + a[2] - n\n        winB[0] += b[0] - b[1] - b[2]\n        winB[1] += b[0] + b[1] - b[2]\n        winB[2] += b[0] + b[1] + b[2] - n\n    return''.join(map(str, winA)) +'' +''.join(map(str, winB))\n\n\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Obtaining the minimum and maximum number of rounds Alice can win.\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            alice += 1\n        elif a[i] < b[i]:\n            bob += 1\n    print(alice, bob)\n    return \"\"\n\nsolution(None)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    block_set = []\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == 0:\n                block_set.append([i, j])\n                k += 1\n    block_set.sort(key=lambda x: x[1])\n    block_set.sort(key=lambda x: x[0])\n    print(k)\n    for i in range(0, k):\n        print(block_set[i][0], block_set[i][1])"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 0:\n                result += 1\n    print(result)\n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = tuple(map(int, stdin.readline().split()))\n    return '\\n'.join(str(n) for n in _solve(nums))\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a = a + [x - 1 for x in a]\n    a.sort()\n    i = 0\n    k = 1\n    ans = set()\n    while i < n - 2:\n        l, r = a[i], a[i + 1]\n        if r - l == 1:\n            ans.add(r)\n            i += 1\n        else:\n            j = i + 2\n            while j < n and l + 1 < r:\n                if r - l == j - i:\n                    ans.add((l, r))\n                    j += 1\n                elif r - l > j - i:\n                    l = r\n                else:\n                    r = j\n                    i = j - 1\n                    break\n    return str(len(ans)) + '\\n' + '\\n'.join(\n        '{} {}'.format(*t) for t in ans\n    )\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == a[j] + a[i]:\n                count += 1\n    return str(count)\n\nassert(solution('''7\n4 1 2 2 1 5 3''') == '3')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '2')\nassert(solution('''4\n1 1 1 1''') == '4')\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    a_set = set(a)\n    a_list = list(a_set)\n    a_list.sort()\n    n_set = set(range(1, n + 1))\n\n    k = 0\n    for i in range(len(a_list)):\n        for j in range(i + 1, len(a_list)):\n            if a_list[i] + a_list[j] == 0:\n                k += 1\n    return str(k)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    s = set()\n    best = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            total = sum(a[i:j+1])\n            if total in s:\n                continue\n            s.add(total)\n            best = max(best, j - i + 1)\n    return str(best)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # compute the sums of the blocks\n    s = [0]\n    for i in range(1, n):\n        s.append(s[i - 1] + a[i])\n    # find the max sum of the blocks\n    max_sum = max(s)\n    max_sets = 1\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if s[i] + s[j] == max_sum:\n                max_sets += 1\n                if j - i > max_sets:\n                    break\n    return str(max_sets)"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    n = int(n)\n    a = stdin.splitlines()[1].split(' ')\n    a = [int(x) for x in a]\n    b = []\n    for x in range(0, n):\n        b.append(1)\n    for x in range(n, 0, -1):\n        if x % 2 == 0:\n            pass\n        else:\n            while len(b) > 0:\n                for i in range(0, len(b)):\n                    if b[i] > a[x - 1]:\n                        b[i] -= 1\n                    else:\n                        b[i] += 1\n                        break\n    b = [str(x) for x in b]\n    return''.join(b)\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Counting sort.\n\n    >>> solution('')\n    'YES'\n    >>> solution('1')\n    'NO'\n    >>> solution('1 2 3')\n    'YES'\n    >>> solution('3 1 2')\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_height = max(a)\n    if n <= 2:\n        return 'NO'\n    for h in range(max_height + 1):\n        index = [i for i, ai in enumerate(a) if ai == h]\n        heights = len(index)\n        if heights > 1:\n            index = index[heights // 2:] + index[: heights // 2]\n        for i in index:\n            a[i] = 0\n    return 'YES' if a.count(0) == 0 else 'NO'\n    "
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_elements = int(stdin.readline())\n    elements = [int(stdin.readline()) for _ in range(num_of_elements)]\n    elements.sort()\n    stack = []\n    for element in elements:\n        while stack and stack[-1] < element:\n            stack.pop()\n        stack.append(element)\n    if len(stack) == num_of_elements:\n        return \"YES\"\n    return \"NO\"\n\nassert solution('1\\n2\\n') == \"YES\"\nassert solution('1\\n3\\n') == \"NO\"\nassert solution('1\\n2\\n3') == \"YES\"\nassert solution('1\\n3\\n2') == \"NO\"\nassert solution('1\\n1\\n1') == \"YES\"\nassert solution('1\\n2\\n1') == \"NO\"\nassert solution('1\\n2\\n2') == \"YES\"\nassert solution('1\\n2\\n3') == \"NO\"\nassert solution('1\\n3\\n1') == \"YES\"\nassert solution('1\\n3\\n2') == \"NO\"\nassert solution('1\\n3\\n3') == \"YES\"\nassert solution('2\\n3\\n1') == \"YES\"\nassert solution('2\\n2\\n2') == \"YES\"\nassert solution('2\\n1\\n1') == \"YES\"\nassert solution('2\\n3\\n2') == \"NO\"\nassert solution('2\\n2\\n3') == \"NO\"\nassert solution('3\\n2\\n1') == \"YES\"\nassert solution('3\\n2\\n3') == \"NO\"\nassert solution('3\\n3\\n1') == \"YES\"\nassert solution('3\\n3\\n2') == \"YES\"\nassert solution('3\\n3\\n3') == \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    def left_most_ravioli_in_stack(stack: list) -> int:\n        return stack[0]\n\n    def height_of_stack(stack: list) -> int:\n        return len(stack)\n\n    def build_stack(stack: list, a: list) -> list:\n        stack.append(a.pop(0))\n        return stack\n\n    def sort_stack(stack: list, output: list) -> list:\n        while height_of_stack(stack) > 1:\n            if left_most_ravioli_in_stack(stack) > left_most_ravioli_in_stack(stack[-1]):\n                output.append(height_of_stack(stack[-1]))\n                stack.pop()\n            else:\n                output.append(height_of_stack(stack))\n                stack.pop()\n        return stack\n\n    def output_array(stack: list, output: list) -> list:\n        while height_of_stack(stack) > 1:\n            output.append(height_of_stack(stack[-1]))\n            stack.pop()\n        output.append(height_of_stack(stack))\n        return output\n\n    stack = []\n    output = []\n    while a:\n        stack = build_stack(stack, a)\n        stack = sort_stack(stack, output)\n        stack = build_stack(stack, a)\n        stack = sort_stack(stack, output)\n\n    while height_of_stack(stack) > 1:\n        output.append(height_of_stack(stack[-1]))\n        stack.pop()\n\n    output = output_array(stack, output)\n    if height_of_stack(stack) == 1:\n        output.append(height_of_stack(stack))\n\n    return 'YES' if sorted(output) == output else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    # arr = stdin.readline().strip().split(\" \")\n    # arr = map(int, stdin.readline().strip().split(\" \"))\n    # print(arr)\n    # arr = [1, 2, 3]\n    print(arr)\n    max_height = 0\n    for i, val in enumerate(arr):\n        if val > max_height:\n            max_height = val\n        else:\n            for j in range(max_height, val):\n                arr[i] += 1\n    # print(arr)\n    # print(max_height)\n    # print(arr.index(max_height))\n    # print(arr)\n    # print(arr[arr.index(max_height):])\n    for i in range(arr.index(max_height), len(arr)):\n        if arr[i]!= max_height:\n            return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nsolution('3\\n1 2 3')\nsolution('3\\n3 1 2')\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    array_length = int(stdin.readline())\n    array = [int(num) for num in stdin.readline().split()]\n    return \"YES\" if sort_array(array, array_length) == sorted(array) else \"NO\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[3:].split('\\n')[0]\n    t = stdin[3:].split('\\n')[1]\n    return '-1' if len(s) > len(t) else str(len(s) - len(t))\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nInp:\n6\nabcdef\nabdfec\n\nOut:\n4\n3 5 4 5 \n\nInp:\n4\nabcd\naccd\n\nOut:\n-1\n\n\n\nInp:\n4\nabcd\ndcab\n\nOut:\n0\n1 3 4\n\nInp:\n5\nabcde\nfbcde\n\nOut:\n4\n1 1 2 3\n\n\"\"\"\n\n\nimport sys\n\nDEBUG = True\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the string $t$ that is obtained from the string $s$ by applying the sequence of moves as described.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        return 0\n    if len(s) == len(t):\n        return -1\n    # Map all characters to their position in the alphabet.\n    char_map = {}\n    for i in range(n):\n        char_map[s[i]] = i\n    # Quickly obtain the string $t$.\n    for i in range(len(t) - len(s)):\n        if s[i % len(s)] == t[i]:\n            continue\n        # Map the position of the swapped character to its value in the alphabet.\n        pos_t = char_map[t[i]]\n        # Compare the characters of the string $s$ with the characters of the string $t$.\n        for j in range(len(s)):\n            if s[j]!= t[i]:\n                continue\n            # If a character in the string $s$ matches the swapped character in the string $t$:\n            # - move the swapped character to the position of the matching character in the string $t$.\n            char_map[t[i]] = char_map[s[j]]\n            # - move the character in the string $s$ to the position of the swapped character in the string $t$.\n            char_map[s[j]] = pos_t\n            break\n    # Convert the map of positions of the characters to the actual characters in the string $s$.\n    pos_t = char_map[t[-1]]\n    res = []\n    for i in range(len(s)):\n        res.append(char_map[s[i]])\n    if pos_t == 0:\n        return res\n    # The position of the last character in $t$ is not zero.\n    # For all the characters in the string $s$\n    # - move the character in the string $s$ to the position of the matching character in the string $t$.\n    for i in range(len(s)):\n        char_map[s[i]] = pos_t\n    # - move the character in the string $t$ to the position of the matching character in the string $s$.\n    char_map[t[-1]] = pos_t\n    res.append(pos_t)\n    return res\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[stdin.find(\"\\n\") + 1 :]\n    t = stdin[: stdin.find(\"\\n\")]\n\n    n = len(t)\n\n    if n!= len(s):\n        return \"-1\"\n\n    moves = 0\n\n    for i in range(n):\n        for j in range(n - i):\n            if s[j]!= t[i]:\n                if s[j + 1] == t[i]:\n                    moves += 1\n                    s = s[: j] + t[i] + s[j + 2 :]\n                elif s[j] == t[i + 1]:\n                    moves += 1\n                    s = s[: j + 1] + t[i + 1] + s[j + 2 :]\n\n    return str(moves) + \"\\n\" + \" \".join(map(str, range(n)))\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return 0\n\n    last_swap = {}\n\n    for i in range(n):\n        if s[i]!= t[i]:\n            last_swap[i] = (s[i], t[i])\n\n    moves = [0]\n\n    def next_moves(i: int, moves: list) -> list:\n        if i > n - 2:\n            return moves\n\n        next_moves_i = []\n\n        for j in range(i + 1, n):\n            if j in last_swap:\n                moves.append(last_swap[j][0])\n                next_moves_i.append(j)\n                next_moves_i.append(j + 1)\n\n        return next_moves(i + 1, moves) + next_moves_i\n\n    moves = next_moves(0, moves)\n\n    if len(moves) > 10**4:\n        return -1\n\n    return str(len(moves)) + '\\n' +''.join(str(move) for move in moves)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.codewars.com/kata/54a28c8878a41f7d0a000006\n\n    Description:\n\n    Task:\n\n    You are given two strings $s$ and $t$. Both strings have length $n$ and consist of lowercase Latin letters. The characters in the strings are numbered from $1$ to $n$.\n\n    You can successively apply the following move any number of times (possibly, zero):\n\n    swap any two adjacent (neighboring) characters of $s$ (i.e. for any $i = \\{1, 2, \\dots, n - 1\\}$ you can swap $s_i$ and $s_{i + 1})\n\n    You can't apply a move to the string $t$. The moves are applied to the string $s$ one after another.\n\n    Your task is to obtain the string $t$ from the string $s$. Find any way to do it with at most $10^4$ such moves.\n\n    Input:\n\n    The first line of the input contains one integer $n$ \u2014 the length of strings $s$ and $t$.\n\n    The second line of the input contains the string $s$ consisting of $n$ lowercase Latin letters.\n\n    The third line of the input contains the string $t$ consisting of $n$ lowercase Latin letters.\n\n    Output:\n\n    If it is impossible to obtain the string $t$ using moves, print \"-1\".\n\n    Otherwise in the first line print one integer $k$ \u2014 the number of moves to transform $s$ to $t$. Note that $k$ must be an integer number between $0$ and $10^4$ inclusive.\n\n    In the second line print $k$ integers $c_j$ ($1 \\le c_j < n$), where $c_j$ means that on the $j$-th move you swap characters $s_{c_j}$ and $s_{c_j + 1}$.\n\n    If you do not need to apply any moves, print a single integer $0$ in the first line and either leave the second line empty or do not print it at all.\n\n    Examples:\n\n    input:\n\n    6\n\n    abcdef\n\n    abdfec\n\n    output:\n\n    4\n\n    3 5 4 5 \n\n    input:\n\n    4\n\n    abcd\n\n    accd\n\n    output:\n\n    -1\n\n    input:\n\n    4\n\n    abcd\n\n    abcd\n\n    output:\n\n    0\n\n    input:\n\n    4\n\n    abcd\n\n    abcd\n\n    output:\n\n    0\n    '''\n    return stdin"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    t = stdin[n+2:2*n+2]\n    if len(s)!= len(t):\n        print(\"-1\")\n        return \"\"\n    moves = 0\n    changes = []\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            changes.append(i)\n            moves += 1\n    print(moves)\n    for i in changes:\n        print(i+1, end=\" \")\n    print()"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 100:\n        raise ValueError(\"wrong length\")\n    # form of a string: [P]P, [PS]PS, [S]PS\n    prefixes = []\n    suffixes = []\n    for _ in range(n - 2):\n        line = stdin.readline().strip()\n        if line == \"\":\n            raise ValueError(\"wrong format\")\n        prefixes.append(line)\n    for _ in range(n - 2):\n        line = stdin.readline().strip()\n        if line == \"\":\n            raise ValueError(\"wrong format\")\n        suffixes.append(line)\n    for i in range(n):\n        if \"P\" in prefixes[i]:\n            index = prefixes[i].find(\"P\")\n            if index == 0:\n                prefixes[i] = \"PS\"\n            else:\n                prefixes[i] = prefixes[i][:index] + \"PS\"\n        if \"S\" in suffixes[i]:\n            index = suffixes[i].find(\"S\")\n            if index == n - 1:\n                suffixes[i] = \"P\"\n            else:\n                suffixes[i] = suffixes[i][index + 1:] + \"P\"\n    return \"\".join(prefixes) + \"\".join(suffixes)"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0] * n\n    for i in range(2, n+1):\n        s = stdin[i-1] + s\n    s = 'PS' + s[1:]\n    return s\n\nprint(solution(input()))"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(2*n - 3):\n        s = stdin.strip()\n        res = ''\n        for i in range(1, len(s)):\n            res += 'S' if s[i:] == s[:i] else 'P'\n        stdin = stdin.replace('P', 'S', 1)\n        stdin = stdin.replace('S', 'P', 1)\n        stdin += res\n    return stdin\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    guessed_string = stdin.strip()\n    n = int(stdin.strip())\n\n    prefix_strings = [stdin.strip() for _ in range(n - 1)]\n    suffix_strings = [stdin.strip() for _ in range(n - 1)]\n\n    # print(guessed_string)\n    # print(prefix_strings)\n    # print(suffix_strings)\n\n    def is_prefix(s: str) -> bool:\n        prefix_s = s[:len(s) - 1]\n        # print(s, prefix_s)\n\n        if prefix_s in prefix_strings:\n            return True\n        else:\n            return False\n\n    def is_suffix(s: str) -> bool:\n        suffix_s = s[1:]\n        # print(s, suffix_s)\n\n        if suffix_s in suffix_strings:\n            return True\n        else:\n            return False\n\n    answers = []\n\n    for i in range(1, 2 * n - 2):\n        if is_prefix(guessed_string[i:]):\n            answers.append(\"P\")\n        elif is_suffix(guessed_string[:i]):\n            answers.append(\"S\")\n        else:\n            answers.append(\"PS\")\n\n    return \"\".join(answers)"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    guess = stdin.strip()\n    n = len(guess)\n\n    suffixes = [''] * (n - 1)\n\n    for i in range(n - 2, -1, -1):\n        suffixes[i] = guess[i:n]\n\n    prefixes = suffixes[:]\n\n    for i in range(n - 2, -1, -1):\n        prefixes[i] = guess[0:i + 1]\n\n    result = []\n\n    for i in range(n - 1):\n        result.append('P' if suffixes[i] == guess[i + 1:] else 'S')\n\n    for i in range(n - 1):\n        result.append('P' if prefixes[i] == guess[:i + 1] else 'S')\n\n    return ''.join(result)\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1]\n    s = list(s)\n    l = len(s)\n    s2 = 'P' * l\n    s2 = list(s2)\n    i = 0\n    j = 0\n    while i < l:\n        for j in range(i + 1, l + 1):\n            if s[i:j] == s2[i:j]:\n                i += 1\n                j += 1\n                if j > l:\n                    return ''.join(s2[i:j])\n    return ''.join(s2[i:j])\n\nassert(solution('''5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == 'SPPSPSPS')\nassert(solution('''3\na\naa\naa\na\n''') == 'PPSS')\nassert(solution('''2\na\nc\n''') == 'PS')"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 'PPSS'\n    n = int(stdin.readline())\n    for _ in range(n):\n        line = stdin.readline().strip()\n        length = len(line)\n        result = 'PS' * (length % 2) + result[length % 2:]\n        prefix = result[:length // 2]\n        suffix = result[length // 2:]\n        print(''.join(['P' if line.startswith(prefix) else 'S' for line in stdin.readlines()]))\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\nsolution('''2 4 6 8 10''')  # 1\ns"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin.split())))"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(stdin) for stdin in stdin.split()]\n    return str(a.count(1))\n\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10''') == \"1\")\nassert(solution('''2 4 6 8 10"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split(' ')\n    # print(stdin)\n    count = 0\n    for num in stdin:\n        count += int(num)\n    return str(count)\n\n\n\"\"\"\n\nimport sys\n\nfor _ in range(int(sys.stdin.readline().strip())):\n    print(len(sys.stdin.readline().strip()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\"\"\"\nimport sys\n\nstdin = sys.stdin.readline().strip()\na = list(map(int, stdin.split(' ')))\n\na.sort()\n\nprint(a[(len(a)-1)//2])"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(n) for n in stdin.split()]\n    solution = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i] == 1:\n            solution += 1\n    return str(solution)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a = stdin.readline().split()\n    a = [int(x) for x in a]\n    k = 0\n    for i in range(n):\n        if i > 0 and a[i-1] == 1:\n            if a[i] == 1:\n                k += 1\n    return str(k)\n\nassert(solution('4\\n1 1 1 1') == '0')\nassert(solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2')\nassert(solution('5\\n1 1 0 0 0') == '0')\nassert(solution('4\\n1 1 1 1') == '0')\nassert(solution('5\\n1 1 0 0 0') == '0')\nassert(solution('4\\n1 1 1 1') == '1')\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    k = 0\n    for i in range(1, n):\n        if a[i-1] == 1 and a[i+1] == 1:\n            k += 1\n    return k\n\nprint(solution(input()))"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n - 1):\n        if a[i] and a[i + 1] and (i + 1) % 2 == 0:\n            k += 1\n    return str(k)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    m = 0\n    for i in range(1, n):\n        if a[i - 1] == a[i + 1] == 1:\n            m = max(m, i)\n    return m"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    c = 1\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] and a[i] == 0:\n            c += 1\n    return str(c)\n\nprint(solution(\"\"\"3\n1 1 0 1 1 0 1 0 1 0\n\"\"\".strip()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = 0\n    a.insert(0,0)\n    a.append(0)\n    for i in range(1, n+1):\n        if a[i]==1 and a[i-1]==1:\n            b+=1\n    return str(b)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n\n    for i in a:\n        j = 2\n        while i % j == 0:\n            count += 1\n            j += 1\n\n    print(count)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split(' ')]\n    result = 0\n\n    for num in lst:\n        count = 1\n        if num!= 1:\n            for i in range(2, num + 1):\n                if num % i == 0:\n                    count += 1\n\n            if count == 2:\n                result += 1\n    return result\n\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    a.sort()\n    divisors = 1\n    divisors *= a[-1]\n    for i in a:\n        divisors *= i\n    return str(divisors)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(1, n + 1):\n        ans += sum(1 for j in range(1, i + 1) if i % j == 0)\n    return str(ans)\n\n\nassert(solution('''5\n1 2 3 4 5''')) == '1'\nassert(solution('''6\n6 90 12 18 30 18''')) == '4'\nassert(solution('''9\n1 2 3 4 5 6 7 8 9''')) == '8'\nassert(solution('''10\n2 5 9 16 25 35 36 41 50 54 57 64 65 81''')) == '5'\nassert(solution('''11\n1 2 3 4 5 6 7 8 9 10 11''')) == '6'\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''')) == '10'\nassert(solution('''16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''')) == '11'\nassert(solution('''26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''')) == '12'\nassert(solution('''27\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''')) == '13'\nassert(solution('''28\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''')) == '14'\nassert(solution('''29\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''')) == '15'\nassert(solution('''30\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''')) == '16'\nassert(solution('''31\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''')) == '17'\nassert(solution('''32\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''')) == '18'\nassert(solution('''33\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32''')) == '19'\nassert(solution('''34\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33''')) == '20'\nassert(solution('''35\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34''')) == '21'\nassert(solution('''36\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35''')) == '22'\nassert(solution('''37\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36''')) == '23'\nassert(solution('''38\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37''')) == '24'\nassert(solution('''39\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38''')) == '25'\nassert(solution('''40\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39''')) == '26'\nassert(solution('''41\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40''')) == '27'\nassert(solution('''42\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41''')) == '28'\nassert(solution('''43\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42''')) == '29'\nassert(solution('''44\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43''')) == '30'\nassert(solution('''45\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44''')) == '31'\nassert(solution('''46\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45''')) == '32'\nassert(solution('''47\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46''')) == '33'\nassert(solution('''48\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47''')) == '34'\nassert(solution('''49\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48''')) == '35'\nassert(solution('''50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49''')) == '36'\nassert(solution('''51\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50''')) == '37'\nassert(solution('''52\n1 2 3 4 5 6 7 8 9 10 11 12 13"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    result = 0\n    for i in a:\n        if i == 1:\n            result += 1\n        else:\n            result += i % 2\n    print(result)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = tuple(int(n) for n in stdin.readline().strip().split(' '))\n    from collections import Counter\n    c = Counter(nums)\n    ans = 1\n    for k, v in c.items():\n        if v > 1:\n            ans *= k\n    return str(ans)\n\nassert(solution('''5\n1 2 3 4 5\n''') == '1')\nassert(solution('''6\n6 90 12 18 30 18\n''') == '4')\nassert(solution('''8\n1 2 3 4 5 6 7 8\n''') == '2')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == '1')\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n''') == '2')\nassert(solution('''17\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n''') == '2')\nassert(solution('''20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '2')\nassert(solution('''100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n''') == '1')\nassert(solution('''1000\n
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    divisors = {}\n    for i in range(n):\n        divisors[a[i]] = 1\n        for j in range(2, a[i]):\n            if a[i] % j == 0:\n                divisors[a[i]] += 1\n\n    print(sum(divisors.values()))\n    return ''"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().split()]\n\n    divisors = [0] * (max(array) + 1)\n\n    for i in array:\n        divisors[i] += 1\n\n    counter = 0\n    for i in range(2, len(divisors)):\n        if divisors[i] == divisors[i-1]:\n            counter += 1\n\n    return counter"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n + 1):\n        if all(i % a_i == 0 for a_i in a):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split()))\n    coins.sort()\n    k = n - 1\n    num_pockets = 0\n    while k > 0:\n        if coins[k]!= coins[k - 1]:\n            num_pockets += 1\n        k -= 1\n    return num_pockets\n\nprint(solution(None))\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = stdin.readline().split()\n    if n < len(coins):\n        return str(len(set(coins)))\n    coins.sort()\n    print(coins)\n    min_n = n\n    for i in range(n):\n        if coins[i] == coins[i - 1]:\n            min_n -= 1\n    return str(min_n)\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''6\n   ... 1 2 4 3 3 2''')\n    '2'\n    '''\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    prev = a[0]\n    used = [1]\n    for i in range(1, n):\n        if a[i]!= prev:\n            prev = a[i]\n            used.append(1)\n        else:\n            used[-1] += 1\n    return str(max(used))"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = [int(i) for i in stdin.readline().split()]\n    if n == 1:\n        return 1\n    # dp[i][j] = min # of coins to fill j pockets\n    # dp[i][j] = min(dp[i-1][j], dp[i-1][j-coins[i-1]] + 1)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i > 1:\n                if coins[i - 1] == coins[i - 2]:\n                    dp[i][j] = dp[i - 2][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - coins[i - 1]] + 1)\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - coins[i - 1]] + 1)\n    return dp[n][n]\n\n\nassert(solution('''6\n1 2 4 3 3 2''') == 2)\nassert(solution('''1\n100''') == 1)\nassert(solution('''6\n1 2 4 3 3 2''') == 2)\nassert(solution('''2\n1 2''') == 1)\nassert(solution('''2\n5''') == 0)\nassert(solution('''2\n1 5''') == 1)\nassert(solution('''2\n1 1''') == 1)\nassert(solution('''3\n1 1 2 1''') == 1)\nassert(solution('''3\n2 2 1 1''') == 1)\nassert(solution('''3\n2 1 1 1''') == 1)\nassert(solution('''3\n2 1 1 1''') == 1)\nassert(solution('''3\n3 2 2 1''') == 2)\nassert(solution('''3\n3 3 2 2''') == 2)\nassert(solution('''3\n3 3 3 2''') == 3)\nassert(solution('''4\n1 1 1 1 1''') == 4)\nassert(solution('''4\n2 2 2 2 2''') == 4)\nassert(solution('''4\n2 1 1 1 1''') == 3)\nassert(solution('''4\n2 1 1 1 1''') == 4)\nassert(solution('''4\n3 3 3 3 3''') == 4)\nassert(solution('''4\n3 2 2 2 2''') == 4)\nassert(solution('''4\n3 2 2 2 2''') == 4)\nassert(solution('''4\n4 4 4 4 4''') == 4)\nassert(solution('''4\n4 3 2 2 2''') == 4)\nassert(solution('''4\n4 3 2 2 2''') == 4)\nassert(solution('''4\n5 5 5 5 5''') == 5)\nassert(solution('''4\n5 2 2 2 2''') == 4)\nassert(solution('''4\n5 2 2 2 2''') == 4)\nassert(solution('''4\n6 6 6 6 6''') == 6)\nassert(solution('''4\n6 3 2 2 2''') == 5)\nassert(solution('''4\n6 3 2 2 2''') == 5)\nprint(solution('''4\n6 5 2 2 2'''))\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = [0] * 100\n    for i in a:\n        count[i - 1] += 1\n\n    if a[0] == 1:\n        count[0] += 1\n\n    if n == 1:\n        return 1\n\n    result = n + 1\n    for i in range(1, n):\n        if count[i - 1] == 0:\n            count[i - 1] += count[i]\n\n        if count[i - 1] < count[i]:\n            count[i - 1] = count[i]\n\n        if result > count[i - 1]:\n            result = count[i - 1]\n\n    return result\n\nassert solution(\"2\\n1\") == 1\nassert solution(\"1\\n100\") == 1\nassert solution(\"6\\n1 2 4 3 3 2\") == 2\nassert solution(\"5\\n1 2 3 4 5\") == 3\nassert solution(\"6\\n1 2 3 4 3 3 2\") == 4\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n    coins.sort()\n    coins_count = {coins[0]: 1}\n    for i in range(1, n):\n        if coins[i] == coins[i - 1]:\n            if coins_count.get(coins[i]) is not None:\n                coins_count[coins[i]] += 1\n            else:\n                coins_count[coins[i]] = 1\n        else:\n            coins_count[coins[i]] = 1\n\n    min_coins_count = n\n    for key, value in coins_count.items():\n        if value < min_coins_count:\n            min_coins_count = value\n    return str(min_coins_count)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.strip().split(\" \")\n    a = list(map(int,a))\n    coins = [0 for i in range(n+1)]\n    for i in range(n):\n        coins[i+1] = a[i]\n    count = 0\n    for i in range(n+1):\n        if coins[i] > count:\n            count = coins[i]\n    print(count)\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = []\n    for i in range(r, len(house) - r):\n        if house[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    current = 0\n    target = 0\n    for heater in heaters:\n        if current + heater - target > n - 1:\n            return -1\n        current = max(current + heater - target, 1)\n        target = heater + r - 1\n    return current"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = [i for i in range(n) if house[i] == 1]\n    if not (n - r) % 2:\n        return -1\n    return min(abs(i - (n - r) // 2) for i in heaters) + 1\n\nassert(solution('''6 2''') == '3')\nassert(solution('''5 3''') == '2')\nassert(solution('''10 3''') == '3')\nassert(solution('''0 0 0 0 0 0 1''') == '-1')\nassert(solution('''0 0 0 0 0 0 1''') == '-1')\nassert(solution('''1 1 0 0 1''') == '2')\nassert(solution('''0 1 1 0 0 1''') == '2')\nassert(solution('''1 1 1 1 0 1''') == '3')\nassert(solution('''0 0 1 1 1 1 0''') == '2')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''0 0 0 0 0''') == '-1')\nassert(solution('''1 0 0 0 1''') == '2')\nassert(solution('''1 1 1 1 1 1''') == '3')\nassert(solution('''0 0 0 0 0 1''') == '2')\nassert(solution('''1 1 0 0 1''') == '-1')\nassert(solution('''1 1 1 1 1 1''') == '3')\nassert(solution('''1 1 0 0 1''') == '-1')\nassert(solution('''1 1 1 0 1''') == '2')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 1 1 1 0''') == '3')\nassert(solution('''0 0 0 0 0''') == '-1')\nassert(solution('''1 1 1 0 1''') == '2')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''0 0 0 0 0''') == '-1')\nassert(solution('''0 1 1 0 1''') == '2')\nassert(solution('''1 1 0 0 1''') == '2')\nassert(solution('''0 1 1 1 0 1''') == '3')\nassert(solution('''1 1 1 1 0 1''') == '3')\nassert(solution('''1 1 1 1 1 1''') == '4')\nassert(solution('''1 1 1 0 1''') == '-1')\nassert(solution('''1 1 1 1 0''') == '-1')\nassert(solution('''1 1 0 0 1''') == '2')\nassert(solution('''0 0 0 0 0 1''') == '2')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''0 0 0 0 0''') == '-1')\nassert(solution('''1 1 0 0 1''') == '2')\nassert(solution('''1 1 1 0 1''') == '2')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 1 1 1 0''') == '3')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 1 1 1 1''') == '4')\nassert(solution('''1 1 1 1 0''') == '-1')\nassert(solution('''1 1 1 1 1''') == '4')\nassert(solution('''0 0 0 0 0 1''') == '2')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''0 0 0 0 0''') == '-1')\nassert(solution('''0 0 0 0 0 1''') == '2')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 1 1 1 1''') == '4')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 1 1 0 1''') == '2')\nassert(solution('''0 0 0 0 0''') == '-1')\nassert(solution('''0 0 0 0 0 1''') == '2')\nassert(solution('''1 1 0 0 1''') == '-1')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 0 0 0 1''') == '-1')\nassert(solution('''1 1 1"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(x) for x in stdin.split(' ')]\n    n = array[0]\n    r = array[1]\n    Vova_house = array[2:]\n    if r > n:\n        return -1\n    for i in range(n):\n        Vova_house[i] -= (i+1)\n        if Vova_house[i] < r:\n            Vova_house[i] = r - Vova_house[i]\n    return len(Vova_house)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    result = 0\n\n    for i in range(n):\n        if i - k + 1 <= 0 or i + k - 1 >= n:\n            continue\n\n        if a[i - k + 1] == 1:\n            result += 1\n\n        if a[i + k - 1] == 1:\n            result += 1\n\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    h = []\n    for i in range(n):\n        if arr[i] == 1:\n            h.append(i)\n    if len(h) == 0:\n        return -1\n    if len(h) == n:\n        return n\n    h.sort()\n    ans = h[0] - h[0] % m\n    for i in range(len(h) - 1):\n        if h[i + 1] - h[i] >= m:\n            ans = max(ans, h[i + 1] - h[i] % m + m)\n    return ans\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nn, r = [int(x) for x in sys.stdin.readline().split()]\narr = [int(x) for x in sys.stdin.readline().split()]\n\nheaters = Counter(filter(lambda x: x % r == 0, range(n)))\n\nprint(heaters)\n\nfor h in range(n):\n    if arr[h]!= 0:\n        if (h - r) % r == 0:\n            heaters[h] -= 1\n        elif (h + r) % r == 0:\n            heaters[h] -= 1\n\nprint(len(heaters))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if max(a) <= r:\n        return 0\n    else:\n        return -1\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, r = [int(x) for x in stdin[0].split()]\n    x = stdin[1]\n    if r > n:\n        return '-1'\n    s = [int(i) for i in x]\n    heaters = 0\n    for i in range(n):\n        if s[i] == 1:\n            if i <= r - 1:\n                heaters += 1\n            elif i > r - 1:\n                heaters += 1\n                if i < n - 1 - r + 1:\n                    heaters += 1\n    return str(heaters)"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    house = [int(x) for x in stdin.split()]\n    heaters = []\n    heaters_needed = 0\n    for i in range(n):\n        if house[i]:\n            heaters.append(i)\n\n    if len(heaters) < r:\n        return -1\n\n    for i in range(len(heaters)):\n        heaters_needed += n - (i + r - 1)\n        if i + r - 1 < n:\n            heaters_needed -= max(0, house[i + r - 1])\n\n    return heaters_needed\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n\n    for a in range(1, N // 2 + 1):\n        for b in range(a + 1, N // 2 + 1):\n            if a * b == N:\n                ans += 1\n\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return str(len([i for i in range(1, int(n)+1) if i*(i+1)//2 == int(n)]))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 2)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    count = 0\n    for a in range(1, N//2+1):\n        for b in range(a+1, N//2+1):\n            if a*b == N-a-b:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if i * j == n:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_of_problem(int(stdin)))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    count = 0\n    for a in range(1, n // 2 + 1):\n        for b in range(a, n // 2 + 1):\n            c = n - a - b\n            if a * b + c == n:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    \n    count = 0\n    for a in range(2, N):\n        for b in range(1, N):\n            if a*b == N:\n                count += 1\n    \n    return str(count)\n\nassert(solution('3') == '3')\nassert(solution('2') == '0')\nassert(solution('5') == '1')\nassert(solution('1') == '0')\nassert(solution('10') == '2')\nassert(solution('1000') == '2')\nassert(solution('100') == '0')\nassert(solution('1000') == '0')\nassert(solution('10000') == '2')\nassert(solution('100000') == '1')\nassert(solution('1000000') == '0')\nassert(solution('10000000') == '0')\nassert(solution('2000000') == '0')\nassert(solution('50000000') == '1')\nassert(solution('100000000') == '0')\nassert(solution('500000000') == '1')\nassert(solution('1000000000') == '0')\nassert(solution('50000000000') == '1')\nassert(solution('100000000000') == '0')\nassert(solution('50000000000000') == '1')\nassert(solution('100000000000000') == '0')\nassert(solution('5000000000000000') == '1')\nassert(solution('1000000000000000') == '0')\nassert(solution('2147483647') == '0')\nassert(solution('2147483646') == '1')\nassert(solution('2147483645') == '1')\nassert(solution('2147483644') == '0')\nassert(solution('2147483643') == '1')\nassert(solution('2147483642') == '0')\nassert(solution('2147483641') == '0')\nassert(solution('2147483640') == '1')\nassert(solution('2147483639') == '0')\nassert(solution('2147483638') == '0')\nassert(solution('2147483637') == '1')\nassert(solution('2147483636') == '0')\nassert(solution('2147483635') == '1')\nassert(solution('2147483634') == '0')\nassert(solution('2147483633') == '1')\nassert(solution('2147483632') == '0')\nassert(solution('2147483631') == '1')\nassert(solution('2147483630') == '0')\nassert(solution('2147483629') == '1')\nassert(solution('2147483628') == '0')\nassert(solution('2147483627') == '1')\nassert(solution('2147483626') == '0')\nassert(solution('2147483625') == '1')\nassert(solution('2147483624') == '0')\nassert(solution('2147483623') == '1')\nassert(solution('2147483622') == '0')\nassert(solution('2147483621') == '1')\nassert(solution('2147483620') == '0')\nassert(solution('2147483619') == '1')\nassert(solution('2147483618') == '0')\nassert(solution('2147483617') == '1')\nassert(solution('2147483616') == '0')\nassert(solution('2147483615') == '1')\nassert(solution('2147483614') == '0')\nassert(solution('2147483613') == '1')\nassert(solution('2147483612') == '0')\nassert(solution('2147483611') == '1')\nassert(solution('2147483610') == '0')\nassert(solution('2147483609') == '1')\nassert(solution('2147483608') == '0')\nassert(solution('2147483607') == '1')\nassert(solution('2147483606') == '0')\nassert(solution('2147483605') == '1')\nassert(solution('2147483604') == '0')\nassert(solution('2147483603') == '1')\nassert(solution('2147483602') == '0')\nassert(solution('2147483601') == '1')\nassert(solution('2147483600') == '0')\nassert(solution('2147483599') == '1')\nassert(solution('2147483598') == '0')\nassert(solution('2147483597') == '1')\nassert(solution('2147483596') == '0')\nassert(solution('2147483595') == '1')\nassert(solution('2147483594') == '0')\nassert(solution('2147483593') == '1')\nassert(solution('2147483592') == '0')\nassert(solution('2147483591') == '1')\nassert(solution('2147483590') == '0')\nassert(solution('2147483589') == '1')\nassert(solution('2147483588') == '0')\nassert(solution('2147483587') == '1')\nassert(solution('2147483586') == '0')\nassert(solution('2147483585') == '1')\nassert(solution('2147483584') == '0')\nassert(solution('2147483583') == '1')\nassert(solution('2147483582') == '0')\nassert(solution('2147483581') == '1')\nassert(solution('2147483580') == '0')\nassert(solution('2147483579') == '1')\nassert(solution('2147483578') == '0')\nassert(solution('2147483577') == '1')\nassert(solution('2147483576') == '0')\nassert(solution('2147483575') == '1')\nassert(solution('2147483574') == '0')\nassert(solution('2147483573') == '1')\nassert(solution('2147483572') == '0')\nassert(solution('2147483571') == '1')\nassert(solution('2147483570') == '0')\nassert(solution('2147483569') == '1')\nassert(solution('2147483568') == '0')\nassert(solution('2147483567') == '1')\nassert(solution('2147483566') == '0')\nassert(solution('2147483565') == '1')\nassert(solution('2147483564') == '0')\nassert(solution('2147483563') == '1')\nassert(solution('2147483562') == '0')\nassert(solution('2147483561') == '1')\nassert(solution('2147483560') == '0')\nassert(solution('2147483559') == '1')\nassert(solution('2147483558') == '0')\nassert(solution('2147483557') == '1')\nassert(solution('2147483556') == '0')\nassert(solution('2147483555') == '1')\nassert(solution('2147483554') == '0')\nassert(solution('2147483553')"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin.strip().split('\\n')\n    if len(brackets)!= 1:\n        return 'Invalid Input'\n\n    n = int(brackets[0])\n    s = brackets[1]\n\n    def isValid(s: str):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n        return len(stack) == 0\n\n    def transform(s: str):\n        result = ''\n        for c in s:\n            if c == '(':\n                result += '1'\n            else:\n                result += '+'\n        return result\n\n    def validBracketSequence(s: str):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n        return len(stack) == 0\n\n    count = 0\n    for i in range(n):\n        if not isValid(s):\n            continue\n\n        if validBracketSequence(s):\n            count += 1\n\n        if isValid(transform(s)):\n            count += 1\n\n        s = transform(s)\n\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(s[i])\n        else:\n            if len(stack) == 0:\n                return 'NO'\n            stack.pop()\n    if len(stack)!= 0:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input()) == \"0\")\nassert(solution(input"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    stack = []\n    res = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                res += i + 1\n    return res\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    # [[opening bracket type, closing bracket type],...]\n    stack = []\n\n    for char in stdin:\n        if char == '(':\n            stack.append(['(', ')'])\n        elif char == ')':\n            if len(stack) == 0:\n                return '0'\n            opening_bracket = stack.pop()\n            stack.append([opening_bracket[1], '(', ')'])\n\n    # not closing brackets\n    if len(stack)!= 0:\n        return '0'\n\n    # valid\n    return str(sum([1 for i in range(n - 1) if stack[i][0] == '(' and stack[i + 1][0] == ')'][1:]))"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    stack = []\n    opening_stack = []\n    result = 0\n    for i, char in enumerate(s):\n        if char == \"(\":\n            opening_stack.append(i)\n        elif char == \")\":\n            if not opening_stack:\n                result += len(stack)\n            else:\n                opening_index = opening_stack.pop()\n                stack.append(i - opening_index)\n    return result"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    stack = []\n    ans = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            stack.append(s[i])\n        else:\n            if stack:\n                stack.pop()\n            else:\n                ans += 1\n\n    return ans\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n            if count < 0:\n                count = 0\n                break\n    print(count)"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return len(s) - len(t)\n\nimport sys"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Remove one character at a time until the string is empty\n    # Time - O(|S|*|T|)\n    # Space - O(|S|*|T|)\n    S = stdin.splitlines()[0]\n    T = stdin.splitlines()[1]\n    # The length of the first substring after removal must be greater than the length of the second substring\n    # Therefore, we can only remove the last substring in the first case\n    i = len(S)\n    j = len(T)\n    while j!= 0:\n        i -= 1\n        j -= 1\n    return i\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We want to find the maximum length of the substring of the first string that is a substring of\n    the second string.\n    It is guaranteed that the second string is a substring of the first string.\n    \"\"\"\n    first_str, second_str = stdin.splitlines()\n    if first_str == second_str:\n        return 0\n    if len(second_str) > len(first_str):\n        return 0\n\n    result = 0\n\n    for i in range(len(first_str) - len(second_str) + 1):\n        if second_str == first_str[i:i + len(second_str)]:\n            result = i\n            break\n    return result\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    max_len = len(s)\n    for i in range(1, len(s)):\n        for j in range(len(s) - i + 1):\n            if s[j:j+i] == t:\n                max_len = max(max_len, j + i)\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    l, r = len(s), len(t)\n\n    # if s == t:\n    #     return 0\n\n    while l > r:\n        # print(l, r)\n        if t in s[l:]:\n            r += 1\n        l -= 1\n\n    return r\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # replace this with your code\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    return 0"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    target = stdin.strip()\n    length = len(line)\n    i = 0\n    while i < length:\n        if target == line[i:length]:\n            return length - i\n        i += 1\n    return length\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n\n    def count_sub(s: str, t: str) -> int:\n        res = 0\n        for i in range(len(s)):\n            if t.startswith(s[i:]):\n                res += 1\n        return res\n\n    def count_sub_len(s: str, t: str) -> int:\n        res = 0\n        while len(s) > 0:\n            if t.startswith(s):\n                res += len(s)\n                t = t[len(s):]\n                s = s[:-1]\n            else:\n                break\n        return res\n\n    def count_sub_len_hard(s: str, t: str) -> int:\n        # res = 0\n        # while len(s) > 0:\n        #     if t.startswith(s):\n        #         res += len(s)\n        #         t = t[len(s):]\n        #         s = s[:-1]\n        #     else:\n        #         break\n        # return res\n        # alternative\n        res = len(s) - count_sub(s, t)\n        return res\n\n    # res = count_sub(s, t)\n    # print(res)\n    res = count_sub_len_hard(s, t)\n    # print(res)\n    return str(res)\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s = s.strip()\n    t = t.strip()\n\n    first, second = s, s\n    for i in range(len(s)):\n        if s[i]!= t[0]:\n            second = s[i:]\n            break\n\n    if len(second) <= len(s):\n        return len(second)\n\n    for i in range(len(s) - 1, -1, -1):\n        if s[i]!= t[-1]:\n            first = s[:i + 1]\n            break\n\n    return len(first)\n\n\nassert solution(\"bbaba\", \"bb\") == 3\nassert solution(\"baaba\", \"ab\") == 2\nassert solution(\"abcde\", \"abcde\") == 0\nassert solution(\"asdfasdf\", \"fasd\") == 3\nassert solution(\"abbbabcdcd\", \"bbbcd\") == 3\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(s) for s in stdin.split()]\n    max_x_times_y = min(a, b)\n    if a == b == c == d:\n        max_x_times_y = 1\n    elif c >= d:\n        max_x_times_y = max(c, d)\n    return str(max_x_times_y)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    if a >= b:\n        if c >= d:\n            return str(a*b)\n        else:\n            return str(a*d)\n    else:\n        if c >= d:\n            return str(c*d)\n        else:\n            return str(b*d)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given integers a,b,c and d.\n    If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    if a <= b and c <= d:\n        return str(a*b)\n    elif a <= c and b <= d:\n        return str(a*c)\n    elif a <= d and b <= c:\n        return str(a*d)\n    elif c <= b and d <= a:\n        return str(c*b)\n    elif c <= a and d <= b:\n        return str(c*a)\n    elif c <= d and b <= a:\n        return str(c*d)\n    elif d <= b and a <= c:\n        return str(d*b)\n    elif d <= c and a <= b:\n        return str(d*a)\n    else:\n        return str(d*c)\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c, d = map(int, stdin.split())\n    return str(max(x * y, a * d, b * c))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(v) for v in stdin.split(\" \")]\n    best = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if x * y > best:\n                best = x * y\n\n    return str(best)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = list(map(int,stdin.split()))\n    x = 1\n    y = 1\n    while x < a:\n        while y < c:\n            x *= y\n            y += 1\n    if x < b:\n        while y < d:\n            y *= x\n            x += 1\n    return str(x)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(s) for s in stdin.split()]\n    ans = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            ans = max(ans, x*y)\n    return str(ans)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(i) for i in stdin.split(' ')]\n    max = max(a,b)\n    min = min(c,d)\n    if a > b:\n        max = b\n    if c > d:\n        min = d\n    if max * min <= 0:\n        return '0'\n    else:\n        return str(max * min)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c, d = list(map(int, stdin.split()))\n    return '{}'.format(max(a * y, b * x, c * d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    x, y = 0, 0\n    while a <= b and c <= d:\n        if a <= c:\n            x += 1\n            a += 1\n        elif c < a:\n            y += 1\n            c += 1\n    return str(x * y)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = list(map(int, stdin.split(' ')))\n    m.sort()\n    m = list(set(m))\n    m.sort()\n    count = 0\n    for i in range(len(m)):\n        if m[i] % 2!= 0:\n            count += 1\n        elif m[i] % 2 == 0:\n            if i % 2 == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dp = [[0] * 21 for _ in range(N)]\n    dp[0] = [1] * 21\n    for i in range(1, N):\n        for j in range(21):\n            if j > i:\n                dp[i][j] = 0\n            else:\n                if i - j < 2:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2!= 0:\n        return '0'\n    n1, n2 = 0, 0\n    for _ in range(N):\n        n = int(stdin)\n        if n > 0:\n            n1 += 1\n        else:\n            n2 += 1\n    if n1 == n2:\n        return str(n1)\n    else:\n        return str(n1) +'' + str(n2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline().strip())\narr = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = list(map(int, stdin.split()))\n    # print(d)\n    if N % 2!= 0:\n        return -1\n    elif d.count(1) == N // 2:\n        return N // 2\n    elif d.count(2) == N // 2:\n        return N // 2\n    elif d.count(3) == N // 2:\n        return N // 2\n    elif d.count(4) == N // 2:\n        return N // 2\n    elif d.count(5) == N // 2:\n        return N // 2\n    elif d.count(6) == N // 2:\n        return N // 2\n    elif d.count(7) == N // 2:\n        return N // 2\n    elif d.count(8) == N // 2:\n        return N // 2\n    elif d.count(9) == N // 2:\n        return N // 2\n    elif d.count(10) == N // 2:\n        return N // 2\n    else:\n        return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n    if n % 2!= 0:\n        raise ValueError(\"n should be an even integer\")\n    arr = stdin.strip().split(' ')\n    arr = list(map(int, arr))\n    if len(arr) < 2:\n        raise ValueError(\"at least two problems\")\n    s_a = sum(arr[1:])\n    s_b = s_a\n    for i in arr[1:]:\n        if i > s_a:\n            s_a = i\n        if i < s_b:\n            s_b = i\n    if s_a == s_b:\n        return str(n - 1)\n    return str(n - s_a - 1)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n\n    >>> solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    d = stdin.readline().strip().split()\n    d = list(map(int, d))\n\n    ans = 0\n    for i in range(0, N, 2):\n        k = d[i]\n        if i + 1 < N:\n            k += d[i + 1]\n\n        if k > d[i]:\n            ans += 1\n\n    return str(ans)\n\nprint(solution(stdin))\n\n### Note: This is exactly the same as the first question of the 1st katas.\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    # 1 <= n <= 10^5\n    # n is an even number\n    # 1 <= d_i <= 10^5\n    # All values in input are integers.\n    def diff(a: list, n: int) -> list:\n        # calculates the difference between each consecutive values of the list\n        b = [a[i] - a[i-1] for i in range(1, n)]\n        return b\n    d = diff(a, n)\n    def arr_arc(n: int, d: list) -> int:\n        # counts the number of d if they are all in ARCs and not ABCs\n        b = 0\n        for i in d:\n            if i >= n-1:\n                b += 1\n        return b\n    def abc_abc(n: int, d: list) -> int:\n        # counts the number of d if they are all in ABCs and not ARCs\n        b = 0\n        for i in d:\n            if i <= n-1:\n                b += 1\n        return b\n    def k(n: int, d: list) -> int:\n        # counts the number of d if they are all in ARCs and not ABCs\n        b = 0\n        for i in d:\n            if i >= n:\n                b += 1\n        return b\n    def arr_abc(n: int, d: list) -> int:\n        # counts the number of d if they are all in ABCs and not ARCs\n        b = 0\n        for i in d:\n            if i <= n:\n                b += 1\n        return b\n    d_arc = diff(a, n)\n    d_abc = diff(a, n)\n    k_arc = k(n, d_arc)\n    k_abc = k(n, d_abc)\n    arr_arc = arr_arc(n, d_arc)\n    abc_abc = abc_abc(n, d_abc)\n    arr_abc = arr_abc(n, d_abc)\n    if arr_arc == arr_abc and k_arc == k_abc:\n        return \"2\"\n    else:\n        return str(arr_arc - arr_abc)\nprint(solution(input()))\n\n-----\nclass Solutions:\n    def main(self):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        # 1 <= n <= 10^5\n        # n is an even number\n        # 1 <= d_i <= 10^5\n        # All values in input are integers.\n        d_arc = [a[i] - a[i-1] for i in range(1, n)]\n        d_abc = [a[i] - a[i-1] for i in range(1, n)]\n        k_arc = 0\n        k_abc = 0\n        for i in d_arc:\n            if i >= n-1:\n                k_arc += 1\n        for i in d_abc:\n            if i <= n-1:\n                k_abc += 1\n        if k_arc == k_abc:\n            print(\"2\")\n        else:\n            print(k_arc - k_abc)\nsolutions = Solutions()\nsolutions.main()"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = 0\n    for i in range(1, n):\n        if a[i] <= r:\n            m = max(m, l + a[i])\n    return str(m)\n\n\nassert(solution('''7 24 21 23''')) == '3'\nassert(solution('''16 17 14 20 20 11 22''')) == '3'\nassert(solution('''4 4 3 4''')) == '4'\nassert(solution('''8 9 4 5 6 7''')) == '5'\nassert(solution('''6 5 4 6 7''')) == '4'\nassert(solution('''10 11 3 4 5 6 7''')) == '5'\nassert(solution('''12 17 5 6 7 8 9 10''')) == '6'\nassert(solution('''13 19 2 3 4 5 6 7''')) == '6'\nassert(solution('''15 16 19 2 3 4 5 6 7''')) == '7'\nassert(solution('''15 18 19 2 3 4 5 6 7''')) == '7'\nassert(solution('''15 19 2 3 4 5 6 7''')) == '7'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22 19 2 3 4 5 6 7''')) == '8'\nassert(solution('''15 22"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(s) for s in stdin.split(\" \")]\n    a = [int(s) for s in stdin.split(\" \")]\n    a.sort()\n    l, r = a[0] - 1, a[0]\n    count = 0\n    for i in range(1, n):\n        if r < l:\n            l, r = a[i] - 1, a[i]\n            count += 1\n        else:\n            r += 1\n    return str(count)\n\n\nassert(solution(\"7 24 21 23\") == \"3\")\nassert(solution(\"16 17 14 20 20 11 22\") == \"3\")\nassert(solution(\"1 2 3 4 5 6 7\") == \"3\")\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n\n    # Your code here\n    return str(max(sum([1 for i in range(n - 1) if l <= a[i] <= r]), sum([1 for i in range(n - 1) if l <= a[i] <= r - 1])))\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    good = 0\n    for i in range(n):\n        if a[i] > h:\n            continue\n        else:\n            if l <= a[i] <= r:\n                good += 1\n    return good\n\nimport sys\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, min(n, i + l + 1)):\n            if j <= n:\n                if a[i] + j - 1 < h:\n                    count += 1\n                if a[i] + j - 1 >= h:\n                    break\n        for j in range(i + 1, min(n, i + r + 1)):\n            if j <= n:\n                if a[i] + j - 1 < h:\n                    count += 1\n                if a[i] + j - 1 >= h:\n                    break\n    return str(count)\n\n\nassert (solution(input()) == \"3\")\nassert (solution(input()) == \"4\")\nassert (solution(input()) == \"1\")\nassert (solution(input()) == \"2\")\nassert (solution(input()) == \"0\")\nassert (solution(input()) == \"1\")\nassert (solution(input()) == \"3\")\nassert (solution(input()) == \"4\")\nassert (solution(input()) == \"5\")\nassert (solution(input()) == \"7\")\nassert (solution(input()) == \"8\")\nassert (solution(input()) == \"9\")\nassert (solution(input()) == \"10\")\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys\n..."
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = (int(x) for x in stdin.split())\n    sleep_times = [int(x) for x in stdin.split()]\n    left = right = 0\n    max_sleep_times = 0\n    for _ in range(n):\n        left = max(left, l)\n        right = min(right, r)\n        max_sleep_times = max(max_sleep_times, right - left + 1)\n    return max_sleep_times\n\nassert(solution(stdin) == 3)\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_sleep(sleep_time: int, sleep_time_numbers: list) -> int:\n        next_sleep_time = sleep_time\n        for i in range(len(sleep_time_numbers)):\n            next_sleep_time += sleep_time_numbers[i]\n            sleep_time_numbers[i] += 1\n        return next_sleep_time\n\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    sleep_time = 0\n    sleep_time_numbers = [0] * n\n    for sleep_time in range(l, r + 1):\n        sleep_time = get_next_sleep(sleep_time, sleep_time_numbers)\n    return sleep_time\n\n\nassert(solution(stdin) == 3)\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(n) for n in stdin.strip().split()]\n    a = [int(n) for n in stdin.strip().split()]\n    a.sort()\n    cur = 0\n    h -= 1\n    result = 0\n    for i in range(n):\n        cur += a[i]\n        while cur >= h:\n            result += 1\n            cur -= h + 1\n    return str(result)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, h, l, r = map(int, stdin[0].split())\n    sleep_time = [int(x) for x in stdin[1].split()]\n    result = 0\n    for i in range(len(sleep_time)):\n        if sleep_time[i] > l:\n            result += 1\n            continue\n        if sleep_time[i] - 1 < r:\n            result += 1\n            continue\n        if sleep_time[i] + h - 1 > l:\n            result += 1\n            continue\n        if sleep_time[i] + h - 1 < r:\n            result += 1\n            continue\n    return str(result)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    problems = list(map(int, stdin.readline().split()))\n    lst = [0] * (n + 1)\n    for i in range(n):\n        lst[i + 1] = max(lst[i], problems[i] * 2)\n    for i in range(n - 1):\n        lst[i + 2] = max(lst[i + 1], lst[i] + lst[i + 2])\n    print(lst[n])"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = []\n    res = 0\n    for i in range(T):\n        while B and A[i] * 2 > A[B[-1]] or A[i] > A[B[-1]] * 2:\n            B.pop()\n        B.append(i)\n        res += len(B) - 1\n    return str(res)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom math import ceil, log10\n\nn = int(input())\ndifficulties = list(map(int, input().split()))\n\nans = ceil(sum(log10(max(x, 2) * 10 ** i) for i, x in enumerate(difficulties)))\nprint(ans)\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    mx = max(a)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2) if a[1] == mx else str(1)\n    l = [(a[i], a[i+1]) for i in range(n-1)]\n    l.sort()\n    mx1 = l[-1][1]\n    mx2 = l[-2][1]\n    for i in range(n-1, 1, -1):\n        if l[i-2][1] * 2 > l[i-1][1] and l[i-1][1] * 2 < mx2:\n            mx2 = l[i-1][1]\n    return str(n - mx2)\n\nassert(solution('''10''') == '4')\nassert(solution('''1 2 5 6 7 10 21 23 24 49''') == '4')\nassert(solution('''5''') == '1')\nassert(solution('''2 10 50 110 250''') == '1')\nassert(solution('''6''') == '3')\nassert(solution('''4 7 12 100 150 199''') == '3')\nassert(solution('''4 7 12 100 150 19''') == '2')\nassert(solution('''4 7 12 100 150 19 99''') == '2')\nassert(solution('''7''') == '1')\nassert(solution('''7 1''') == '1')\nassert(solution('''7 1 2''') == '2')\nassert(solution('''7 1 2 3''') == '1')\nassert(solution('''7 1 2 3 4''') == '2')\nassert(solution('''7 1 2 3 4 5''') == '1')\nassert(solution('''7 1 2 3 4 5 6''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''') == '2')\nassert(solution('''7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''') == '1')\nassert(solution('''7 1 2 3 4 5 6 7"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    ans = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[i] * 2:\n                break\n            if a[j] <= a[i] * 2:\n                ans += 1\n    \n    return str(ans)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    problems = sorted(map(int, stdin.readline().strip().split()))\n    print(sum(problems[i] - problems[i - 1] > problems[i - 1] * 2 for i in range(1, len(problems))))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 0:\n        return '1'\n    a.sort()\n    i, j = 0, n - 1\n    best = 0\n    while i <= j:\n        k = (i + j) // 2\n        if a[k] < 2 * a[k - 1]:\n            best = max(best, k + 1)\n            i = k + 1\n        else:\n            j = k - 1\n    return str(best)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(s) for s in stdin.readline().strip().split()]\n\n    arr.sort()\n    max_prob = -1\n    for i in range(1, len(arr)):\n        if arr[i - 1] * 2 < arr[i] <= arr[i] * 2:\n            max_prob = i\n            break\n    return max_prob\n\n\n\nIf there are multiple contests satisfying the condition above, then the contest with the maximum number of problems will be returned.\n\nFor the first example, $4$ is the maximum number of problems in the contest.\n\nFor the second example, $1$ is the maximum number of problems in the contest.\n\nFor the third example, $3$ is the maximum number of problems in the contest.\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a_set = set(a)\n    a_set.discard(max(a_set))\n    a_set.discard(min(a_set))\n\n    if len(a_set) == 0:\n        return \"No valid pairs\"\n\n    min_lcm = min(a_set)\n    max_lcm = max(a_set)\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if min_lcm * a[j - 1] == max_lcm * a[i - 1]:\n                return str(i) + \" \" + str(j)\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    s = set()\n    for i, x in enumerate(a):\n        for y in a[i+1:]:\n            s.add(lcm(x, y))\n    print(*[i+1 for i in s])\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    min_lcm = a[0] * a[1]\n    for i in range(2, n):\n        for j in range(i + 1, n + 1):\n            lcm = a[i] * a[j]\n            if lcm < min_lcm:\n                min_lcm = lcm\n                \n    res = list(min_lcm // a[i] for i in range(n))\n    \n    return''.join(map(str, res))\n    \n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    min_lcm = arr[0]\n    for i in range(1, n):\n        min_lcm = lcm(arr[i], min_lcm)\n    min_val = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            val = lcm(arr[i], arr[j])\n            if val <= min_lcm:\n                min_val = val\n                a, b = arr[i], arr[j]\n    print(a, b)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    arr = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            arr.append(a[i - 1] * a[j - 1])\n    arr = list(set(arr))\n    arr.sort()\n    return \" \".join([str(i) for i in range(1, len(arr)) if arr[i] == arr[i - 1]])"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    min = 10 ** 7 + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min:\n                min = lcm(a[i], a[j])\n                a1, a2 = i, j\n    return str(a1) + \" \" + str(a2)\n    \n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    candidates = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            candidates.add(lcm(a[i], a[j]))\n    candidates = list(candidates)\n    candidates.sort()\n\n    return''.join([str(i) for i in range(1, n) if candidates[i - 1] == candidates[i]])\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    return''.join(str(i) for i in lcm(a))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    a = [int(x) for x in stdin.split()[1:]]\n    lowest = a[0]\n    for i in range(1, len(a)):\n        lowest = lcm(lowest, a[i])\n    ans = [None, None]\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) == lowest:\n                ans[0], ans[1] = i + 1, j + 1\n    return''.join(str(x) for x in ans)\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    print(solution_dp(n, s))\n    pass\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    ans = n\n    \n    for i in range(n - 1, -1, -1):\n        if s[i] == \"0\":\n            ans -= 1\n        elif s[i] == \"2\":\n            ans -= 2\n        elif s[i] == \"1\":\n            ans -= 1\n    \n    return \"\".join(s[:ans])\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[:stdin.index(\"\\n\")]\n    s = stdin[stdin.index(\"\\n\") + 1:]\n    if n % 3!= 0:\n        return \"NO SOLUTION\"\n    r = \"\"\n    for i in range(n // 3):\n        if s.find(\"2\") == -1:\n            r = r + \"2\"\n            s = s[1:]\n            continue\n        if s.find(\"1\") == -1:\n            r = r + \"0\"\n            s = s[1:]\n            continue\n        if s.find(\"0\") == -1:\n            r = r + \"1\"\n            s = s[1:]\n            continue\n        return \"NO SOLUTION\"\n    return r + s\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    d = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n    }\n\n    res = ''\n    res_idx = 0\n    remain = 0\n    for c in s:\n        remain += d[c]\n        if remain == 1:\n            res = c\n        if remain == 0:\n            res = '0' + res\n\n    return res * (3 - remain)"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s = s.replace('2','2 ')\n    s = s.replace('1','1 ')\n    s = s.replace('0','0 ')\n    s = s.split(' ')\n    l = []\n    for i in s:\n        if len(i)==1:\n            l.append(i+'0'+'0'+'0')\n        elif len(i)==2:\n            l.append(i+'0'+'0'+'0')\n            l.append(i+'0'+'0'+'0')\n        else:\n            l.append(i)\n    l = sorted(l)\n    if l[0]=='0 0 0' and l[1]=='0 0 0':\n        return '0 0 0'\n    else:\n        for i in l:\n            print(i)\n        return l[0]\n\n\n\nsolution('''3\n121\n''')\nsolution('''6\n000000\n''')\nsolution('''6\n211200\n''')\nsolution('''6\n120110\n''')\nsolution('''6\n012c0110\n''')"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3!= 0:\n        return \"\"\n    s = stdin\n    a = \"0\" * (n // 3)\n    b = \"1\" * (n // 3)\n    c = \"2\" * (n // 3)\n    return min(a + b + c, a + c + b, b + a + c, b + c + a, c + a + b, c + b + a)\n    pass"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = ['0', '1', '2']\n    ans = []\n    for i in range(n):\n        if s[i] == t[0]:\n            ans.append(t[1])\n        elif s[i] == t[1]:\n            ans.append(t[0])\n        else:\n            ans.append(t[2])\n    return ''.join(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin.strip()\n\n    if n == len(s):\n        return s\n\n    s = list(s)\n\n    res = [s[0]]\n\n    for i in range(1, n):\n        if s[i] == \"0\":\n            if s[i - 1] == \"0\":\n                res.append(\"0\")\n            elif s[i - 1] == \"1\":\n                res.append(\"2\")\n            elif s[i - 1] == \"2\":\n                res.append(\"1\")\n        elif s[i] == \"1\":\n            if s[i - 1] == \"0\":\n                res.append(\"1\")\n            elif s[i - 1] == \"1\":\n                res.append(\"2\")\n            elif s[i - 1] == \"2\":\n                res.append(\"0\")\n        elif s[i] == \"2\":\n            if s[i - 1] == \"0\":\n                res.append(\"2\")\n            elif s[i - 1] == \"1\":\n                res.append(\"0\")\n            elif s[i - 1] == \"2\":\n                res.append(\"1\")\n\n    return \"\".join(res)"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    len_s = len(s)\n    if len_s % 3!= 0:\n        return 'NO'\n\n    def solve(s):\n        if len(s) == 1:\n            return s[0]\n        n = len(s) // 3\n        def count(i):\n            cnt = 0\n            for j in s[i:]:\n                if j == '0':\n                    cnt += 1\n                elif j == '1':\n                    cnt += 2\n                else:\n                    cnt += 3\n            return cnt\n        m = min(count(i) for i in range(len_s))\n        s = [j for j in s]\n        for i in range(len_s):\n            if count(i) == m:\n                s[i] = '0'\n                s[i + n] = '1'\n                s[i + 2 * n] = '2'\n                break\n        return ''.join(s)\n\n    if len_s == 1:\n        return s\n    elif len_s == 3:\n        return ''.join(s)\n    else:\n        return solve(s)"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    r = s.count(\"1\")\n    b = s.count(\"0\")\n    c = s.count(\"2\")\n    x = abs(r - c)\n    y = abs(b - c)\n    if x < y:\n        return s[:n - x] + \"0\" * x + \"1\" * x + \"2\" * x\n    else:\n        return s[:n - y] + \"0\" * y + \"1\" * y + \"2\" * y"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split(\" \"))\n    steps = [0] * (N + 1)\n    for i in range(M):\n        a = int(stdin.split(\" \")[i + 1])\n        steps[a] = i + 1\n    ways = 0\n    for i in range(N):\n        if i + 2 <= N:\n            if steps[i + 2] > steps[i]:\n                ways += 1\n    return str(ways)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    memo = [1] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, i + 2):\n            if j <= n:\n                memo[j] += memo[i]\n                memo[j] %= MODULO\n    if m > n:\n        return '0'\n    return str(memo[m])\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Computes the number of ways to climb up the stairs under the condition, modulo 1\\ 000\\ 000\\ 007.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if m > n - 1:\n        return 0\n    else:\n        return staircase_count(n, m, a) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_stairs, broken_steps = map(int, stdin.split())\n    solution_array = [1]\n    for _ in range(broken_steps):\n        solution_array.append(0)\n    for _ in range(number_of_stairs-broken_steps):\n        solution_array.append(solution_array[-1]+solution_array[-2])\n    return str(solution_array[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    steps = [0 for _ in range(N)]\n    for _ in range(M):\n        steps[int(stdin.readline()) - 1] += 1\n    return str(factorial(N) // factorial(N - M) % MOD)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(x) for x in stdin.split())\n    A = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(N - M + 1):\n        if all(a >= A[i] for a in A[i : i + M]):\n            res += 1\n    return str(res % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    solutions = {0: 1}\n\n    for i in range(1, N):\n        solutions[i] = solutions[i - 1] + solutions[i - 2]\n\n    return str(solutions[N - 1] % 10000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k == 1:\n        return str((k ** n - 1) % 1000000007)\n    else:\n        return str(k * (k ** (n - 1) - 1) % 1000000007)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_dp(stdin))\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split(\" \")))\n    stairs = [int(stdin) for stdin in stdin.split(\" \")]\n    steps = [0] * (n + 1)\n    steps[0] = 1\n    steps[1] = 1\n    steps[2] = 2 if stairs[1] <= stairs[2] else 1\n    steps[3] = 4 if stairs[2] <= stairs[3] else 2\n    for i in range(4, n + 1):\n        steps[i] = steps[i - 1] + steps[i - 2] + steps[i - 3]\n    return str(steps[n] % 1000000007)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n\n    def solve(x, k, d):\n        if k == 0:\n            return x\n\n        if d < 0:\n            return -solve(x, k - 1, -d)\n\n        if d == 0:\n            return x\n\n        return min(x + d, x - d)\n\n    print(solve(x, k, d))\n\"\"\"\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split(' ')]\n    return str(min(abs(x + d * k), abs(x - d * k)))\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 2 4')\n    '2'\n    >>> solution('-7 -3 -1')\n    '1'\n    >>> solution('5 0 5')\n    '0'\n    >>> solution('10 1 1')\n    '0'\n    \"\"\"\n    x, k, d = map(int, stdin.split())\n    moves = 0\n    while abs(x) < 10 ** 15:\n        x += d\n        x = abs(x)\n        moves += 1\n        if moves == k:\n            break\n    return str(x)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_split = stdin.split(' ')\n    X = int(stdin_split[0])\n    K = int(stdin_split[1])\n    D = int(stdin_split[2])\n    pass\n\nprint(solution())\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    n = 1\n    while abs(X) < 10 ** 15:\n        X += D\n        X = abs(X)\n        n += 1\n    return str(X)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(abs(x - (k * d)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split(' '))\n    steps = 0\n    while abs(x) < 10**15:\n        steps += 1\n        x += d\n        x -= k * steps\n    return str(abs(x))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split(' '))\n    if k % 2 == 0:\n        return abs(x - (k // 2 - 1) * d)\n    return abs(x - (k // 2) * d)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(n) for n in stdin.split()]\n    if k > 0:\n        # We can always make a move to a positive number, so we can use k-1 moves to move to the destination.\n        # The move to the destination must be positive, so the coordinate of the destination is the\n        # minimum of d and x + k-1*d\n        return min(d, x + (k - 1) * d)\n    else:\n        # We can always make a move to a negative number, so we can use k-1 moves to move to the destination.\n        # The move to the destination must be negative, so the coordinate of the destination is the\n        # maximum of -d and -x - k*d\n        return max(d, -x - (k - 1) * d)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n    ans = min(abs(x + d), abs(x - d))\n    if x + d >= 0:\n        ans = min(ans, abs(x - d))\n    else:\n        ans = min(ans, -abs(x - d))\n    return f'{ans}'"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    cache = [1] * (n + 1)\n    cache[2] = 2\n    for i in range(3, n + 1):\n        cache[i] = cache[i - 1] + cache[i - 2]\n\n    return str(cache[n])"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def divisors(n: int) -> int:\n        count = 0\n        for i in range(1, n):\n            if n % i == 0:\n                count += 1\n        return count\n\n    return str(divisors(n))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(n + 1):\n        for j in range(i + 1):\n            s += 1\n    return s\n\nimport time\n\nstart = time.time()\nprint(solution(stdin))\nprint(time.time() - start)"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    i = 1\n    while True:\n        if n < i:\n            break\n        elif n % i == 0:\n            n //= i\n            res += 1\n        else:\n            i += 1\n    return str(res)\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i * j > n:\n                break\n            if n % i == 0 and n % j == 0:\n                res = max(res, i + j - n)\n    return str(res)"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(1 + (10 - (stdin % 10)))\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    return result"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n\n    return str(pow(2,a))\n\nassert(solution('3') == '8')\nassert(solution('1') == '1')\nassert(solution('2') == '4')\nassert(solution('3') == '16')\nassert(solution('4') == '32')\nassert(solution('5') == '64')\nassert(solution('6') == '128')\nassert(solution('7') == '256')\nassert(solution('8') == '512')\nassert(solution('9') == '1024')\nassert(solution('10') == '2048')\nassert(solution('11') == '4096')\nassert(solution('12') == '8192')\nassert(solution('13') == '16384')\nassert(solution('14') == '32768')\nassert(solution('15') == '65536')\nassert(solution('16') == '131072')\nassert(solution('17') == '262144')\nassert(solution('18') == '524288')\nassert(solution('19') == '1048576')\nassert(solution('20') == '2097152')\nassert(solution('21') == '4194304')\nassert(solution('22') == '8388608')\nassert(solution('23') == '16777216')\nassert(solution('24') == '33554432')\nassert(solution('25') == '67108864')\nassert(solution('26') == '134217728')\nassert(solution('27') == '268435456')\nassert(solution('28') == '536870912')\nassert(solution('29') == '1073741824')\nassert(solution('30') == '2147483648')\nassert(solution('31') == '4294967294')\n\n'''\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(a * (a + 1) * (a + 2) / 6)\n    return \"\""
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + 1)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a = int(stdin)\n    return str(a**3)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line: list[str] = stdin.rstrip().split(' ')\n    return line[0]"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''solution'''\n    # Write code here\n    pass\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n\n    result = sum(map(int, str(a)))\n    return str(result)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    a = int(a)\n    if a >=1 and a <= 30:\n        return a*a*a\n    else:\n        return 'INVALID INPUT'"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sorted(stdin.split())[-1])"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a > 999:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    #...\n    return str(bool(a % 2))"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin)) % 2)"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    if a % 2 == 0:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(bool(a%2))"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We need to find the number of digits for each number until 1\n    so that we know the range of the sequence of the numbers\n\n    >>> solution('123456789')\n    '11'\n    >>> solution('87654321')\n    '6'\n    \"\"\"\n    count = 0\n    max_count = 0\n\n    # loop through the input and count\n    for n in stdin:\n        count = count + 1\n        # if the current digit is 9, we need to check the previous count\n        if n == '9':\n            if count > max_count:\n                max_count = count\n\n            count = 0\n\n    # if we have not seen any max count, we must have seen all 1s\n    if max_count == 0:\n        return '1'\n\n    # we have to compute the number of digits for each number\n    return str(max_count)\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"0\"\n    elif n % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\nprint(solution(\"\"))\n\n\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % 2 == 0 else 'No'"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n\n    return str(bool(a % 2))"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Testcases-----\n3\n5 1 2\n5\n5 1 2 3 4\n10\n9 1 4 5 3 6 2 7 1 8 4 9 5 8 6 7\n3\n9\n99\n999\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from math import log2\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    return str(int(log2(n)))\n\nassert(solution(stdin) == '2')\n\nassert(solution(stdin) == '1')\n\nassert(solution(stdin) == '0')"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # If n = 1, a[0] is the only element in the array.\n    # Otherwise, we can keep a sorted array of the elements in a[0:n].\n    # In either case, the count of distinct values in a[0:n] is n.\n    a.sort()\n    print(a)\n    return str(n)\n\nassert(solution('''4\n2 5 3 1\n''')) == '4'\nassert(solution('''3\n6 5 3\n''')) == '3'\nassert(solution('''5\n5 4 3 2 1\n''')) == '1'\nassert(solution('''3\n1 2 3 1\n''')) == '0'\nassert(solution('''6\n7 3 3 8 3 9\n''')) == '2'\nassert(solution('''4\n7 3 2 3 1\n''')) == '2'\nassert(solution('''7\n7 2 5 3 7 1\n''')) == '2'\nassert(solution('''8\n8 4 9 3 5 1 6\n''')) == '3'\nassert(solution('''3\n1 2 1\n''')) == '1'\nassert(solution('''4\n3 5 3 1 1\n''')) == '1'\nassert(solution('''5\n5 2 3 4 1 1\n''')) == '0'\nassert(solution('''6\n5 3 2 5 4 3 1\n''')) == '2'\nassert(solution('''7\n7 2 5 3 7 1 4 3\n''')) == '2'\nassert(solution('''8\n8 4 9 3 5 1 6 7 3\n''')) == '3'\nassert(solution('''9\n8 4 9 3 5 1 6 7 3 8\n''')) == '4'\nassert(solution('''10\n8 4 9 3 5 1 6 7 3 8 9 10\n''')) == '5'\nassert(solution('''11\n8 4 9 3 5 1 6 7 3 8 9 10 11\n''')) == '6'\nassert(solution('''12\n8 4 9 3 5 1 6 7 3 8 9 10 11 12\n''')) == '7'\nassert(solution('''13\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13\n''')) == '8'\nassert(solution('''14\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14\n''')) == '9'\nassert(solution('''15\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15\n''')) == '10'\nassert(solution('''16\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16\n''')) == '11'\nassert(solution('''17\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17\n''')) == '12'\nassert(solution('''18\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18\n''')) == '13'\nassert(solution('''19\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19\n''')) == '14'\nassert(solution('''20\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20\n''')) == '15'\nassert(solution('''21\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21\n''')) == '16'\nassert(solution('''22\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n''')) == '17'\nassert(solution('''23\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n''')) == '18'\nassert(solution('''24\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n''')) == '19'\nassert(solution('''25\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n''')) == '20'\nassert(solution('''26\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n''')) == '21'\nassert(solution('''27\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\n''')) == '22'\nassert(solution('''28\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n''')) == '23'\nassert(solution('''29\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n''')) == '24'\nassert(solution('''30\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n''')) == '25'\nassert(solution('''31\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n''')) == '26'\nassert(solution('''32\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n''')) == '27'\nassert(solution('''33\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n''')) == '28'\nassert(solution('''34\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n''')) == '29'\nassert(solution('''35\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\n''')) == '30'\nassert(solution('''36\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\n''')) == '31'\nassert(solution('''37\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\n''')) == '32'\nassert(solution('''38\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\n''')) == '33'\nassert(solution('''39\n8 4 9 3 5 1 6 7 3 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\n''')) == '34'\nassert(s"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 4''')\n    '2'\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 4\n   ... 4\n   ... 5\n   ... 5\n   ... 5\n   ... 6\n   ... 7\n   ... 7\n   ... 7\n   ... 8\n   ... 8\n   ... 8\n   ... 9\n   ... 9\n   ... 9\n   ... 10''')\n    '7'\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 4\n   ... 4\n   ... 5\n   ... 6\n   ... 7\n   ... 7\n   ... 7\n   ... 8\n   ... 8\n   ... 8\n   ... 9\n   ... 9\n   ... 9\n   ... 10\n   ... 11''')\n    '7'\n    '''\n    data = stdin.split('\\n')\n    n = int(data[0])\n    data = data[1].split(' ')\n    data = [int(x) for x in data]\n\n    def find_sum(data: List[int], current: int = 0, running_sum: int = 0) -> int:\n        if len(data) == 1:\n            return running_sum\n        else:\n            if len(data) == 2:\n                return current + data[1]\n            else:\n                new_sum = find_sum(data[1:], data[0] + current, running_sum)\n                if new_sum > running_sum:\n                    running_sum = new_sum\n                return find_sum(data[2:], current, running_sum)\n\n    return str(find_sum(data))\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(' ')]\n    return''.join(str(max(a) - i) for i in a)\n\nassert(solution('''4\n2 5 3 1''') == '4')\nassert(solution('''2\n1''') == '1')\nassert(solution('''1\n1''') == '0')\nassert(solution('''1\n2''') == '1')\nassert(solution('''2\n1 2''') == '1')\nassert(solution('''6\n1 2 3 4 5 6''') == '6')\nassert(solution('''12\n1 2 3 4 5 6 7 8 9 10 11 12''') == '12')\nassert(solution('''123\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''') == '0')\nassert(solution('''45\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''5\n0 1 2 3 4''') == '4')\nassert(solution('''5\n1 1 2 3 4''') == '0')\nassert(solution('''5\n0 1 1 2 3''') == '3')\nassert(solution('''5\n0 1 1 2 3''') == '2')\nassert(solution('''5\n0 1 1 2 3''') == '0')\nassert(solution('''5\n2 1 1 1 2''') == '3')\nassert(solution('''5\n2 1 1 2 3''') == '2')\nassert(solution('''5\n2 1 1 2 3''') == '2')\nassert(solution('''5\n2 1 2 2 3''') == '0')\nassert(solution('''5\n2 1 2 3 3''') == '2')\nassert(solution('''5\n2 1 2 3 4''') == '0')\nassert(solution('''5\n2 1 2 3 4''') == '2')\nassert(solution('''5\n2 1 3 4 5''') == '2')\nassert(solution('''5\n2 1 3 4 5''') == '2')\nassert(solution('''5\n2 1 3 4 5''') == '2')\nassert(solution('''5\n2 1 3 4 5''') == '2')\nassert(solution('''5\n2 1 3 4 5''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6''') == '2')\nassert(solution('''5\n2 1 4 5 6''') == '0')\nassert(solution('''5\n2 1 4 5 6"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    s = 0\n    for i in a:\n        s ^= i\n\n    return s"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    elements = list(map(int, stdin.readline().split()))\n    return str(reduce(lambda x, y: x ^ y, elements))"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = [int(x) for x in stdin.readline().split()]\n        if n == k == 1:\n            print(1)\n            continue\n\n        i, j = 0, 1\n        while j <= k and j <= n:\n            if n - j + 1 == k:\n                print(j)\n                break\n            if n - j + 1 == k - 1:\n                print(j + 1)\n                break\n            i = j\n            j += 1"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = map(int, stdin.split())\n        print(find_shovels(n, k))\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for t in range(T):\n        N, k = [int(x) for x in stdin.readline().strip().split()]\n\n        n = 1\n        while (k - n) % n!= 0:\n            n += 1\n\n        print(n)"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    package_sizes = [i for i in range(1, k+1)]\n    packages = 1\n    for i in range(n, 0, -1):\n        if i not in package_sizes:\n            packages *= i\n    return str(packages)"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(n * k)\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        print(n - min_shovels(k, n))\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    k = min(k, 10**9)\n    l = []\n    for i in range(k):\n        l.append(n // k)\n        n = n % k\n    return''.join([str(x) for x in l])\n\nprint(solution(stdin))"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        shovels, package_size = list(map(int, stdin.split()))\n\n        packages = [package_size - i for i in range(1, package_size)]\n        packages.sort()\n\n        if shovels % package_size == 0:\n            print(shovels // package_size)\n        else:\n            print(shovels // package_size + 1)"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(int(x) for x in stdin.split()[0:2])\n    k, *l = tuple(int(x) for x in stdin.split()[2:2 + m])\n    p = tuple(int(x) for x in stdin.split()[2 + m:])\n\n    def states(p):\n        return {2: 1, 3: 0, 4: 1, 5: 0, 6: 1, 7: 0, 8: 1, 9: 0, 10: 1, 11: 0, 12: 1, 13: 0, 14: 1, 15: 0}[p]\n\n    c = 0\n    for v in range(n):\n        if states(k - l[v - 1]) == p[v - 1]:\n            c += 1\n\n    return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    dp = [1] + [0] * M\n    for i in range(1, N + 1):\n        dp2 = [0] * (M + 1)\n        for j in range(1, M + 1):\n            dp2[j] = dp[j]\n            for kk in k:\n                if j + kk - 1 > M or j + kk - 1 < 0:\n                    continue\n                dp2[j] += dp[j + kk - 1]\n        dp = dp2\n    return str(dp[1])\n\nassert(solution(\"2 2\") == \"1\")\nassert(solution(\"2 1 2\") == \"1\")\nassert(solution(\"1 2\") == \"1\")\nassert(solution(\"0 1\") == \"1\")\nassert(solution(\"2 3 2 3\") == \"8\")\nassert(solution(\"3 1 1\") == \"0\")\nassert(solution(\"3 1 1 3\") == \"1\")\nassert(solution(\"3 2 1 2 3\") == \"8\")\nassert(solution(\"3 2 1 2 3 3\") == \"11\")\nassert(solution(\"3 2 1 2 3 3 2\") == \"6\")\nassert(solution(\"1 2 1 2 1\") == \"1\")\nassert(solution(\"1 2 1 2 1 2\") == \"2\")\nassert(solution(\"1 2 1 2 1 2 2\") == \"3\")\nassert(solution(\"1 2 1 2 1 2 2 3\") == \"5\")\nassert(solution(\"1 2 1 2 1 2 2 3 3\") == \"8\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4\") == \"10\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5\") == \"13\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6\") == \"15\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7\") == \"17\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8\") == \"19\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9\") == \"23\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10\") == \"25\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11\") == \"27\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12\") == \"29\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13\") == \"31\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14\") == \"33\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"35\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16\") == \"37\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\") == \"39\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\") == \"41\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"43\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"45\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\") == \"47\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\") == \"49\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\") == \"51\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\") == \"53\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\") == \"55\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"57\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\") == \"59\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\") == \"61\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\") == \"63\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"65\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\") == \"67\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\") == \"69\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\") == \"71\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\") == \"73\")\nassert(solution(\"1 2 1 2 1 2 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\") == \"75\")\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, M = int(stdin[0]), int(stdin[1])\n\n    bulbs = list(map(int, stdin[2].split(' ')))\n    switches = list(map(int, stdin[3].split(' ')))\n\n    bulb_on = []\n    for bulb, switch in zip(bulbs, switches):\n        if (switch & 1) == 1:\n            bulb_on.append(bulb)\n\n    #print(bulb_on)\n    count = 0\n\n    for bit in range(0, 1 << len(bulb_on)):\n        combination = ''\n        for i in range(0, len(bulb_on)):\n            if (bit & (1 << i)) == 0:\n                combination += 'off'\n            else:\n                combination += 'on'\n        #print(combination)\n        count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    k = [int(stdin.split()[i]) for i in range(1, len(stdin.split()), 2)]\n    p = [int(stdin.split()[i]) for i in range(0, len(stdin.split()), 2)]\n\n    def helper(current: int, on: int) -> int:\n        if on == m:\n            return 1\n        if current == n:\n            return 0\n        return helper(current + 1, on) + helper(current + 1, on + 1)\n    return str(helper(1, 1))"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.strip().split()))\n    k = stdin.strip().split()\n\n    print(solution2(k, n, m))\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    k = list(map(int, stdin.split(\" \")))\n    p = list(map(int, stdin.split(\" \")))\n    # Write your code here\n    return str(solve(n, m, k, p))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    k = [int(x) for x in stdin.split()][1:]\n    p = [int(x) for x in stdin.split()][2:]\n    on = [0] * n\n    for i, j in enumerate(k):\n        on[i] = on[j - 1] + p[i]\n\n    if n % 2 == 0:\n        print(sum(on) % 2)\n    else:\n        print(sum(on) % 2 + 1)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    if H > 11:\n        H = 0\n    if M > 59:\n        M = 0\n    if H == 11 and M == 0:\n        H = 0\n    return f'{abs(A - B) / 100:.10f}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, M, A, B = tuple(int(x) for x in stdin.split())\n    r = (A * 60 + B) / (H * 60 + M)\n    return f'{r:.9f}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split()]\n    a, b, h, m = inputs[0], inputs[1], inputs[2], inputs[3]\n    h_angle, m_angle = (360/12) * h, (360/60) * m\n    print(\n        abs(\n            (a * m_angle) +\n            (b * h_angle)\n        )\n    )"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.split()]\n    D = A * H + B * M\n    D /= 2 * 3.14\n    return f'{D:.9f}'"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(n) for n in stdin.split()]\n    H_deg = (H * 30) + M\n    M_deg = H * 6\n    x = 2 * A * math.cos(math.radians(H_deg))\n    y = 2 * B * math.sin(math.radians(M_deg))\n    return f'{x + y:.9f}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, H, M = [int(x) for x in stdin.split(' ')]\n    H = 12 * H + M\n    H_distance = A * (H - H // 12) + B * (H // 12 - H % 12)\n    M_distance = A * (M - M // 12) + B * (M // 12 - M % 12)\n    return str(H_distance * B_distance / 100)\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split(' '))\n    result = math.pi * A * (H * 60 + M) * 2 / B / 60 / 360\n    return '%.17f' % result\n    \n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    handA = (A / 2 + H) / 12\n    handB = (B / 2 + M) / 60\n    return '{:.9f}'.format(abs(handA - handB))\n\nassert(solution('3 4 9 0') == '5.00000000000000000000')\nassert(solution('2 3 4 9 0') == '4.9999999999999995')\nassert(solution('2 1 4 9 0') == '4.5')\nassert(solution('1 2 4 9 0') == '5.0')\nassert(solution('0 2 4 9 0') == '5.0')\nassert(solution('0 1 4 9 0') == '5.0')\nassert(solution('0 0 4 9 0') == '5.0')\nassert(solution('0 0 1 4 9 0') == '5.0')\nassert(solution('0 0 0 4 9 0') == '5.0')\nassert(solution('0 0 0 1 4 9 0') == '5.0')\nassert(solution('0 0 0 0 4 9 0') == '5.0')\nassert(solution('0 0 0 0 1 4 9 0') == '5.0')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split(' '))\n    # hour: [0, 12]\n    # minute: [0, 59]\n    # hour and minute clock at same point: [0, 1]\n    # hour and minute hand can be in [0, 1] range: [-1, 1]\n    # hour hand moves at constant speed: [0, 1]\n    # minute hand moves at constant speed: [-1, 1]\n    # the problem is to find the distance between the two fixed endpoints of the hands, and since we have to find the distance between the endpoints, we have to find the distance between the point of intersection, which is the point at which both hands will be at the same point.\n    # then find the distance between the endpoints of both hands.\n    # then find the distance between the point of intersection and the endpoints of both hands.\n    # the second endpoint of the second hand is the point of intersection of the two hands.\n    # the first endpoint is the mean of the two endpoints.\n    # therefore the answer is the sum of the first and second endpoint (i.e. the distance between the two endpoints) - the sum of the two endpoints - the distance between the intersection point and the endpoints of the two hands\n    # since the angle between both hands is constant, the angle between the two hands is given by a * b / c\n    # a = a + b\n    # b = a - b\n    # c = 2 * a\n    # so the answer is c/2 - a - b\n    angle = a * b / (2 * a)\n    distance = (a + b) * angle / a\n    print(distance)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\n\n\n\n\"\"\"\n\nn, m = (int(x) for x in stdin.readline().strip().split(' '))\na = [int(x) for x in stdin.readline().strip().split(' ')]\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    seq = [int(n) for n in stdin.split()[1:]]\n\n    median = seq[len(seq) // 2]\n\n    pairs = 0\n\n    for i in range(n):\n        if seq[i] == median:\n            pairs += i + 1\n\n    return str(pairs)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.rstrip().split())\n    a = list(map(int, stdin.rstrip().split()))\n    a.sort()\n    \n    count = 0\n    for i in range(n - 1):\n        if a[i] == m:\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    arr = [int(x) for x in stdin.strip().split(' ')]\n    arr.sort()\n    print(binSearch(arr, m))\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()[1:]))\n\n    # Sort the sequence\n    a.sort()\n\n    # Remove duplicates\n    b = list(set(a))\n    b.sort()\n\n    # # Find the median of the sequence\n    # median = a[n // 2] if n % 2 == 0 else (a[n // 2] + a[n // 2 - 1]) / 2\n\n    # # Find the count of the suitable pairs of indices\n    count = 0\n    for i in range(len(b) - 1):\n        left = i\n        right = i + 1\n\n        # Find the median of the sequence\n        median = b[i] if i == 0 else (b[i - 1] + b[i]) / 2\n\n        while left >= 0 and right < len(b):\n            # Count the suitable pairs of indices\n            if b[right] - median == m:\n                count += 1\n                right += 1\n            elif b[right] - median > m:\n                left -= 1\n            else:\n                right += 1\n\n    # Output the count of the suitable pairs of indices\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    d = {}\n    for i in range(len(arr)):\n        d[arr[i]] = i\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if d[(arr[i]+arr[j])/2] == m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return len(a) // 2\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l, r = 0, len(a) - 1\n    count = 0\n    while l < r:\n        if a[l] + a[r] == m:\n            count += 1\n            l += 1\n            r -= 1\n        elif a[l] + a[r] < m:\n            l += 1\n        else:\n            r -= 1\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split(' ')]\n    sequence = [int(x) for x in stdin.split(' ')]\n    \n    s = sum(sequence)\n    d = s / 2\n    \n    if d % 2 == 1:\n        d -= 1\n    \n    c = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s = sequence[i] + sequence[j]\n            if s == d:\n                c += 1\n    return str(c)\n\nassert(solution(stdin) == '8')\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segments.append((l, r))\n    max_value = 0\n    segments_used = 0\n    for i in range(1, n+1):\n        segment_is_used = False\n        for s in segments:\n            if i >= s[0] and i <= s[1]:\n                max_value = max(max_value, a[i-1]-min(a[i-1], s[0]))\n                segments_used += 1\n                segment_is_used = True\n                break\n        if not segment_is_used:\n            max_value = max(max_value, a[i-1])\n    print(max_value)\n    print(segments_used)\n    for s in segments:\n        print('%s %s' % (s[0], s[1]))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    m = int(stdin.readline())\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    segments = [s for s in segments if s[0] == s[1]]\n\n    # solving\n    b = a[:]\n    for l, r in segments:\n        b[l - 1:r] = [max(b[l - 1:r]) - min(b[l - 1:r])] * len(b[l - 1:r])\n    return str(max(b) - min(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    segments = []\n    for _ in range(m):\n        l, r = tuple(map(int, stdin.split(' ')))\n        segments.append([l, r])\n    segments = sorted(segments, key=lambda segment: segment[0])\n    d = -1\n    for i in range(n):\n        if a[i] < 0:\n            d = max(d, -a[i])\n        if i >= segments[0][0]:\n            d = max(d, a[i] - segments[0][1])\n        for j in range(1, m):\n            if segments[j][0] <= i <= segments[j][1]:\n                d = max(d, a[i] - segments[j][1])\n    print(d)\n    print(m)\n    print(*sorted([a[i] - segments[j][1] for i in range(n) for j in range(m)]))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the fourth example you cannot do anything so the answer is $0$.\n\"\"\"\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    results = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        results.append(r - l + 1)\n\n    return str(max(a) - min(a) - sum(results))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append([l, r])\n    b = a\n    for s in segments:\n        l, r = s\n        b[l-1:r] = [x-1 for x in b[l-1:r]]\n    return''.join(str(x) for x in b)\n\n\nn, m = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()]\nsegments = []\nfor i in range(m):\n    l, r = [int(x) for x in stdin.split()]\n    segments.append([l, r])\nb = a\nfor s in segments:\n    l, r = s\n    b[l-1:r] = [x-1 for x in b[l-1:r]]\nprint(' '.join(str(x) for x in b))\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        print(\"Yes\" if isDiverse(s) else \"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline() for _ in range(n)]\n    return \"Yes\\n\".join([\"Yes\" if is_diverse(s) else \"No\" for s in strings])\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = []\n    for i in range(n):\n        s.append(stdin)\n    ans = []\n    for i in range(n):\n        if len(s[i]) == len(set(s[i])):\n            ans.append(\"Yes\")\n        else:\n            ans.append(\"No\")\n    return ans"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_strings = int(stdin.readline())\n    for _ in range(number_of_strings):\n        if is_diverse(stdin.readline().strip()):\n            print('Yes')\n        else:\n            print('No')\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    ans = [None] * n\n    for i in range(n):\n        ans[i] = \"Yes\" if is_diverse(strings[i]) else \"No\"\n    return \"\\n\".join(ans)\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if all(len(set(s[i:i+1])) == 1 for i in range(len(s))):\n            print('Yes')\n        else:\n            print('No')"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = []\n    for _ in range(N):\n        s = stdin.strip()\n        l = len(s)\n        if l == 1:\n            res.append(\"Yes\")\n        else:\n            i = 1\n            d = {}\n            while i <= l:\n                if s[i - 1] not in d:\n                    d[s[i - 1]] = i\n                else:\n                    res.append(\"Yes\")\n                    break\n                i += 1\n            if i == l + 1:\n                res.append(\"No\")\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    for s in strings:\n        is_diverse = True\n        positions = [0] * 26\n        for i, c in enumerate(s):\n            positions[ord(c) - 97] = i\n        for i in range(1, 26):\n            if positions[i - 1] == positions[i]:\n                is_diverse = False\n                break\n        if is_diverse:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    strings.sort()\n    for string in strings:\n        if \"\".join(sorted(string)) == string:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin[0]\n        for i in range(1, len(s)):\n            if s[i - 1]!= s[i]:\n                break\n        else:\n            print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    segments = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    lst, curr = [], []\n    for i, a in enumerate(arr):\n        curr.append(a)\n\n        if i + 1 == n:\n            lst.append(curr)\n            curr = []\n\n    lst.sort(key=len, reverse=True)\n\n    max_diff = float('-inf')\n    for i, seg in enumerate(lst):\n        curr = [a - min(seg) for a in seg]\n\n        max_diff = max(max_diff, max(curr) - min(curr))\n\n    return str(max_diff)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    m = min(m, len(a))\n    b = [0] * m\n    for i in range(m):\n        l, r = (int(x) for x in stdin.split())\n        b[i] = a[l-1] if r == 0 else max(a[l-1:r]) - min(a[l-1:r])\n    print(max(b) - min(b))\n    return ''\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    all_subsets = [[] for _ in range(m + 1)]\n    for i in range(m):\n        l, r = map(int, stdin.strip().split())\n        all_subsets[i].append((l - 1, r - 1))\n\n    result = []\n    for _ in range(int(stdin.readline().strip())):\n        segments = []\n        for l, r in map(int, stdin.strip().split()):\n            segments.append((l - 1, r - 1))\n\n        segments = sorted(segments, key=lambda x: x[1] - x[0])\n        s = [0] * (a[-1] + 1)\n        for l, r in segments:\n            s[l] = r + 1\n\n        s = [-1] + s\n        s = s[::-1]\n        l, r = 0, 0\n        for i in range(1, len(s)):\n            if s[i] > s[i - 1]:\n                r = i\n            else:\n                l = i\n\n        result.append(s[r] - s[l])\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    segments = set()\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.add((l, r))\n\n    l, r = [int(x) for x in stdin.split()]\n    min_value = min(a)\n    max_value = max(a)\n\n    l_max, r_max = max(l, min_value), max(r, max_value)\n    value = 0\n\n    for i in range(n):\n        if a[i] == l_max:\n            if r_max > r[i]:\n                value += r_max - r[i]\n        elif a[i] == r_max:\n            if l_max < l[i]:\n                value += l_max - l[i]\n        elif l_max < l[i] and r_max > r[i]:\n            value += r_max - r[i]\n        elif l_max > l[i] and r_max < r[i]:\n            value += l_max - l[i]\n        elif l_max > l[i] and r_max > r[i]:\n            value += l_max - l[i]\n    return str(value)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def binarySearch(a, x, lo, hi):\n        if lo > hi:\n            return lo\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            return binarySearch(a, x, lo, mid - 1)\n        else:\n            return binarySearch(a, x, mid + 1, hi)\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    segments.sort()\n\n    b = [0] * n\n\n    for s in segments:\n        l, r = s\n        b[l - 1] += 1\n        b[r] -= 1\n\n    max = -1\n    for i in range(n):\n        if b[i] > max:\n            max = b[i]\n    return str(max)\n\n\nsolution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\")\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n\n\"\"\"\n\n\"\"\"\nDATASET: https://stepic.org/static/datasets/HW6/5.html\nTASK: https://stepic.org/static/datasets/HW6/5_1.txt\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n\n    #segments = [(int(i), int(j)) for i, j in zip(stdin.split(), stdin.split())]\n    segments = []\n    for i in range(m):\n        l = list(map(int, stdin.split()))\n        segments.append(l)\n\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n\n    for i in range(m):\n        segments[i][0] = i\n\n    print(max([a[0] - a[1] for a in segments]))"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:n+1]]\n    b = [int(x) for x in stdin.split()[n+1:n+m+1]]\n    c = set()\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()[n+m+i+1:n+m+i+3]]\n        c.add(l)\n        c.add(r)\n    return str(max(b) - min(b) if b else 0)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    print(decreasing_subset(a, segments))\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = max(a)\n    k = 0\n    while m!= 0:\n        m -= 1\n        l, r = 0, len(a) - 1\n        while l < r:\n            if a[l] < a[r]:\n                l += 1\n            elif a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n                r -= 1\n        a[l], a[r] = a[r], a[l]\n        k += 1\n    return str(k)\n\nprint(solution(input()))\n\nfrom test_distinct import TestDistinct\n\nt = TestDistinct()\n\nt.assert_equals(solution(t.read('data/stdin.txt')), t.read('data/expected.txt'))\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    length = 1\n    max_length = 0\n    for i in range(n):\n        if a[i] >= a[i-1]:\n            length += 1\n        else:\n            length = 1\n\n        if length > max_length:\n            max_length = length\n\n    return str(max_length)"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    A = [0] * n\n    A[0] = 1\n    A[1] = 1\n    for i in range(2, n):\n        A[i] = 1\n        for j in range(i):\n            if a[i] > a[j]:\n                A[i] = max(A[i], A[j] + 1)\n    return str(max(A))"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def testcase() -> bool:\n        stdin = stdin.strip().split('\\n')\n        expected_output = stdin[1]\n        n = int(stdin[0])\n        sequence = [int(x) for x in stdin[2].split()]\n        return solution(n, sequence) == expected_output\n\n    if testcase():\n        print('Passed: testcase()')\n    else:\n        print('Failed: testcase()')\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    seq = stdin.readline().strip().split()\n\n    if len(seq) == 0:\n        return 0\n\n    i = 1\n    m = len(seq)\n    if m % 2 == 0:\n        m -= 1\n\n    if m == 0:\n        return 0\n\n    while i <= m:\n        for j in range(m):\n            if seq[j] < seq[j-1]:\n                seq[j], seq[j-1] = seq[j-1], seq[j]\n        i += 2\n\n    return ''.join(seq)"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nThe first example is described in the problem statement.\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nIn the first example you should print the longest sequence.\n\"\"\"\nimport sys\nfrom typing import List\n\nnumber_of_numbers: int = int(sys.stdin.readline().strip())\nsequence: List[int] = [int(x) for x in sys.stdin.readline().split()]\n\nincreasing_sequence: List[int] = [0] * number_of_numbers\nfor i in range(1, number_of_numbers):\n    if sequence[i] > sequence[increasing_sequence[i - 1]]:\n        increasing_sequence[i] = increasing_sequence[i - 1] + 1\n\nmax_increasing_sequence: int = increasing_sequence[-1]\nmax_increasing_sequence_position: int = 0\nfor i in range(number_of_numbers - 1, 0, -1):\n    if increasing_sequence[i] > max_increasing_sequence:\n        max_increasing_sequence = increasing_sequence[i]\n        max_increasing_sequence_position = i\n\nprint(max_increasing_sequence)\ns: str = ''\nwhile max_increasing_sequence_position >= 0:\n    s += 'L' if sequence[max_increasing_sequence_position] == increasing_sequence[max_increasing_sequence_position] + 1 else 'R'\n    max_increasing_sequence_position -= 1\nprint(s)\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    current = a[0]\n    current_longest = 0\n    for i in range(n):\n        if a[i] > current:\n            current = a[i]\n            current_longest += 1\n        else:\n            current_longest = max(current_longest, current)\n    return str(current_longest)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    l = 0\n    r = n-1\n    res = 0\n    while l < r:\n        if a[l] < a[r]:\n            res = max(res, r-l)\n            l += 1\n        else:\n            r -= 1\n    return str(res)\n\nassert(solution('5\\n1 2 5 3 4') == '4')\nassert(solution('2\\n1 2') == '2')\nassert(solution('7\\n6 5 4 3 2 4 3') == '2')\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    k = len(a) - 1\n    s = a[0]\n    if k == 0:\n        return str(1)\n    for i in range(1, k + 1):\n        s = max(s, a[i])\n        if s == a[i]:\n            break\n    return str(k - i + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split(' ')))\n    r = len(a) - 1\n    r1 = r\n    while r - r1 >= 1:\n        if a[r - r1] < a[r - r1 - 1]:\n            a[r - r1] = a[r - r1 - 1]\n        r -= 1\n    if r == r1:\n        return str(r1)\n    else:\n        return str(r)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(num) for num in stdin.split(\" \")]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] < nums[j]:\n                result = max(result, j - i + 1)\n    return result\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = 1\n    left = 0\n    for right in range(1, n):\n        if a[right] < a[right - 1]:\n            m = max(m, right - left)\n            left = right\n    return str(m)\n\nimport sys\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max_length = 0\n    curr_length = 0\n    for i in range(n):\n        curr_length += 1\n        if a[i] < a[i - 1]:\n            max_length = max(max_length, curr_length)\n            curr_length = 0\n\n    return str(max_length)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split(\" \")]\n    nums = sorted(nums)\n    result = 0\n    for i in range(n):\n        if nums[i] > nums[i - 1]:\n            result = i\n    return str(result)\n\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return output"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    s = 0\n    r = 0\n    for i in range(n):\n        if a[i] < a[i - 1]:\n            r = i\n        else:\n            s = i\n        if s == 0 and r == n - 1:\n            return str(r + 1)\n        elif s == r:\n            s += 1\n        else:\n            r = s\n\n    return str(r + 1)\n\nprint(solution(''))\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    k, n = data[0], data[1]\n    data = data[2:]\n    res = 0\n    while len(data) > 0:\n        if data.count(data[0]) > k:\n            res += data.count(data[0]) - k\n            data = data[data.count(data[0]):]\n        else:\n            res += k - data.count(data[0])\n            data = data[data.count(data[0]):]\n    return str(res)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\")\n    '1'\n    >>> solution(\"5 3\")\n    '0'\n    >>> solution(\"1 2 2 4 5\")\n    '1'\n    >>> solution(\"1 2 3 3 3\")\n    '2'\n    >>> solution(\"1 2 3 4 5\")\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    steps = 0\n\n    while k > 0:\n        a = [x // 2 for x in a]\n        steps += 1\n        k = sum(a)\n    return str(steps)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/59f33d5a88a3e53cd2000165\n\n    You are given an array of integers. On each move you are allowed to choose an element of the array and divide it by 2,\n    round down, and subtract 1 from it. What is the minimum number of moves needed to obtain an array with the numbers equal to\n    k?\n\n    For example, the array {1, 2, 3, 4, 4, 4} has numbers equal to k of 4. It can be divided by 2 in 3 moves. Another example:\n    {3, 1, 2, 3} has numbers equal to k of 2. It can be divided by 2 in 4 moves.\n    \"\"\"\n\n    n, k = map(int, stdin.split(' '))\n\n    if n == k:\n        return '0'\n\n    if k == 1:\n        return str(n - 1)\n\n    nums = list(map(int, stdin.split(' ')))\n\n    k = int(k)\n    n = int(n)\n\n    # Calculate the move count from 2 to k\n    moves = 0\n    while k > 1:\n        k -= 2\n        moves += 1\n\n    moves = moves + k - 1\n    moves = moves + n - k\n\n    return str(moves)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_ = min(a)\n    ops = 0\n    while True:\n        if len(set(a)) == k:\n            break\n        if a.count(min_) == 1:\n            a[a.index(min_)] = min_\n            min_ = min(a)\n            ops += 1\n        else:\n            min_ //= 2\n            ops += 1\n    return str(ops)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    div = 1\n    while div*2 < n:\n        div *= 2\n    elim = []\n    for i in range(n):\n        if a[i] % div!= 0:\n            elim.append(i)\n    for el in elim:\n        a[el] = 0\n    print(len(elim))\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = float(\"inf\")\n    # min operations to equal k numbers\n    for i in range(1, 2**n):\n        t = 0\n        for j in range(n):\n            if (i & (1 << j)) > 0:\n                t += a[j]\n        res = min(res, abs(t - k))\n    return str(res)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    return \"\".join(map(str, [i//2 for i in a[:k]]))"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_equal(a: List[int]) -> bool:\n        n = len(a)\n        for i in range(1, n):\n            if a[i]!= a[i - 1] * 2:\n                return False\n        return True\n\n    n, k = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n\n    l, r = 0, a[-1] * 2\n    while l < r:\n        mid = (l + r) // 2\n        if is_equal(a[:n - k] + [mid] + a[n - k:]):\n            r = mid\n        else:\n            l = mid + 1\n\n    return l\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n\n    # Counting min number of moves\n    solution = 0\n    remaining = k\n    for i in a:\n        solution += remaining // i\n        remaining = remaining % i\n\n    return str(solution)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(\"3 4\\n1 2 3 4\\n\") == \"2\")\nassert(solution(\"2 3\\n1 2\\n\") == \"0\")\nassert(solution(\"3 4\\n1 1 1 1\\n\") == \"0\")\nassert(solution(\"5 3\\n1 1 1 1 1\\n\") == \"2\")\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.strip().split(\" \"))\n    count = 0\n    for _ in range(N):\n        count += A\n        count += B\n    return str(count)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = (int(x) for x in stdin.split(\" \"))\n    M = N - A\n    if M <= 0:\n        return 0\n    if M % 2 == 0:\n        return 2 * A\n    else:\n        return (2 * A) + 1"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    return str(A * 10 ** (N - A) + B * 10 ** (N - B))\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_balls, number_of_red_balls, number_of_blue_balls = tuple(map(int, stdin.split(' ')))\n    return str(number_of_blue_balls // number_of_red_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    return bin(a ^ b)[2:].count('1')"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split(\" \")]\n    blue = 0\n    red = 0\n    for _ in range(N):\n        if blue + red <= A:\n            blue += 1\n        else:\n            red += 1\n    return str(blue)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    blue_balls: int = 0\n    N: int, A: int, B: int = map(int, stdin.split(' '))\n    for _ in range(10 ** 100):\n        blue_balls += A + B\n        A = A * 2\n        B = B * 2\n    return str(blue_balls)\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(B * pow(2, A - 1) % 10 ** 18)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return (n - a + 1) * (b - 1) + a"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.rstrip().split())\n    count = 0\n    for _ in range(1, N + 1):\n        blue = (B + count) % A + 1\n        red = A - blue\n        count += 1\n        if blue < 10:\n            count += 1\n        print(red, blue)\n    return str(count)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return \"\"\n    divisors = [int(d) for d in stdin.readline().strip().split(\" \")]\n    d = int(stdin.readline().strip())\n    if n == 1:\n        return str(1)\n    answer = []\n    for i in range(1, n + 1):\n        if all(i % divisor == 0 for divisor in divisors):\n            answer.append(i)\n    if not answer:\n        return \"-1\"\n    return str(min(answer))\n\n\nassert(solution(\n\"\"\"\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\n5\n10 8 4 8 2 1\n\n3\n6\n3 2 3 1\n\n5\n6\n3 3 3 3 1\n\"\"\") == \"4\"\n)\nassert(solution(\n\"\"\"\n0\n6\n6 0 6 0 6 0 6\n\"\"\") == \"-1\")\nassert(solution(\n\"\"\"\n2\n8\n8 2 12 6 4 24 16 3\n1\n3\n\n5\n10 8 4 8 2 1\n\"\"\") == \"2\")\nassert(solution(\n\"\"\"\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        d = stdin.readline().split()\n        if n == 1:\n            print('1')\n        else:\n            m = int(''.join(d))\n            if m == 0:\n                print('-1')\n            else:\n                if set(d)!= set([1]) and set(d)!= set(m/i for i in range(2, int(m**(1/2))+1)):\n                    print('-1')\n                else:\n                    print(m)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(divisor) for divisor in stdin.readline().split()]\n    n = int(stdin.readline())\n    if n > 1 and len(set(divisors)) == len(divisors):\n        return str(n)\n    return '-1'\n\nprint(solution(''))\n\nprint(solution('2\\n1\\n2'))\nprint(solution('1\\n2\\n3'))\nprint(solution('2\\n1\\n3'))\nprint(solution('1\\n1\\n1'))\nprint(solution('1\\n2\\n1'))\nprint(solution('2\\n2\\n3'))\nprint(solution('5\\n1\\n2 2 2 1'))\nprint(solution('4\\n1 1 1 1'))\nprint(solution('1\\n2\\n1'))\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        divisors = [int(i) for i in stdin.readline().split()]\n        if len(set(divisors))!= len(divisors):\n            print(-1)\n            continue\n        if all(x in divisors for x in range(1, n + 1)):\n            print(n)\n            continue\n        divisors.sort()\n        print(divisors[0] * divisors[-1])\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        k = int(stdin.readline())\n        l = list(map(int, stdin.readline().split()))\n        p = 1\n        for j in l:\n            p *= j\n        if p % k!= 0:\n            print(-1)\n        else:\n            x = p // k\n            if x % k!= 0:\n                print(-1)\n            else:\n                print(x)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        d = list(map(int, stdin.readline().split()))\n        s = 1\n        for i in d:\n            s *= i\n        if s == 1:\n            print(-1)\n        else:\n            print(s)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split(' ')))\n    i = 0\n    while i < n:\n        if l[i] == 1:\n            if not is_prime(l[i]):\n                return str(-1)\n        elif l[i] % 2 == 0:\n            if is_prime(l[i]):\n                l[i] += 1\n        i += 1\n    return str(l[0])\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n\n    def int_sieve(n):\n        \"\"\" Returns a list of all prime numbers upto n\"\"\"\n        sieve = list(range(n + 1))\n        sieve[1] = 0\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if sieve[i]:\n                sieve[i * i: n + 1: i] = [0] * len(sieve[i * i: n + 1: i])\n        return [x for x in sieve[2:] if x]\n\n    def perfect_power(n):\n        \"\"\" Returns 1 if n is a perfect power, otherwise returns 0\"\"\"\n        n = abs(n)\n        l = int_sieve(n)\n        for i in l:\n            if n == i ** 2:\n                return 1\n            elif n % i == 0:\n                return 0\n        return 0\n\n    def closest_power(n):\n        \"\"\" Returns the closest power of 2, which is smaller than n\"\"\"\n        n = abs(n)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] > n:\n                return l[i - 1]\n            elif l[i] == n:\n                return l[i]\n\n    def all_divisors(n):\n        \"\"\" Returns a list of all divisors excluding 1 and n\"\"\"\n        divs = [1]\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divs.append(i)\n                divs.append(n // i)\n        return divs\n\n    def is_almost_all(n, d):\n        \"\"\" Returns 1 if d is a list of all divisors except 1 and n\"\"\"\n        for i in d:\n            if i not in [1, n]:\n                return 0\n        return 1\n\n    def is_contradictory(n, d):\n        \"\"\" Returns 1 if d is a list of all divisors except 1 and n\"\"\"\n        for i in d:\n            if i in [1, n]:\n                return 1\n        return 0\n\n    def min_x(n, d):\n        \"\"\" Returns the minimum possible x for a given n and d\"\"\"\n        if perfect_power(n):\n            if is_almost_all(n, d):\n                return 1\n            else:\n                return 2 ** closest_power(n)\n        elif is_almost_all(n, d):\n            return n\n        else:\n            divs = all_divisors(n)\n            for i in divs:\n                if is_almost_all(i, d) and is_contradictory(i, d):\n                    return i\n\n    for i in range(int(lines[0])):\n        n = int(lines[1])\n        d = list(map(int, lines[2].split()))\n        x = min_x(n, d)\n        print(x)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\n'''\n    0  1  2  3  4  5  6\n0  1  2  3  4  5  6  7\n1  2  3  4  5  6  7  8\n2  3  4  5  6  7  8  9\n3  4  5  6  7  8  9  10\n4  5  6  7  8  9  10  11\n5  6  7  8  9  10  11  12\n6  7  8  9  10  11  12  13\n7  8  9  10  11  12  13  14\n8  9  10  11  12  13  14  15\n9  10  11  12  13  14  15  16\n10 11 12 13 14 15 16 17\n\n8\n2\n4\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n1\n1\n\n4\n1 2 3 4\n2 3 4\n3 4\n1 2 3 4\n''')\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\n'''\n    0  1  2  3  4  5  6\n0  1  2  3  4  5  6  7\n1  2  3  4  5  6  7  8\n2  3  4  5  6  7  8  9\n3  4  5  6  7  8  9  10\n4  5  6  7  8  9  10  11\n5  6  7  8  9  10  11  12\n6  7  8  9  10  11  12  13\n7  8  9  10  11  12  13  14\n8  9  10  11  12  13  14  15\n9  10  11  12  13  14  15  16\n10 11 12 13 14 15 16 17\n\n8\n2\n4\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n1\n1\n\n4\n1 2 3 4\n2 3 4\n3 4\n1 2 3 4\n''')\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\n'''\n    0  1  2  3  4  5  6\n0  1  2  3  4  5  6  7\n1  2  3  4  5  6  7  8\n2  3  4  5  6  7  8  9\n3  4  5  6  7  8  9  10\n4  5  6  7  8  9  10  11\n5  6  7  8  9  10  11  12\n6  7  8  9  10  11  12  13\n7  8  9  10  11  12  13  14\n8  9  10  11  12  13  14  15\n9  10  11  12  13  14  15  16\n10 11 12 13 14 15 16 17\n\n8\n2\n4\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n1\n1\n\n4\n1 2 3 4\n2 3 4\n3 4\n1 2 3 4\n''')\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\\n4\")\nassert(solution('''"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Determines the smallest divisor of an integer x.\n    In:  integer x\n    Out: smallest divisor of x\n    '''\n    N = int(stdin.readline().strip())\n    for _ in range(N):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        found = False\n        for i in range(1, n):\n            if n % i == 0:\n                if i not in divisors:\n                    found = True\n        if not found:\n            print(-1)\n        else:\n            print(i)"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    result = []\n    for i in a:\n        if i not in result:\n            result.append(i)\n    print(len(result))\n    print(*result)\n    return ''\n\n\nassert solution('''\\\n6\\n\n1 5 5 1 6 1\\\n''') == '3\\n5 6 1 \\n'\n\nassert solution('''\\\n5\\n\n2 4 2 4 4\\\n''') == '2\\n2 4 \\n'\n\nassert solution('''\\\n5\\n\n6 6 6 6 6 6\\\n''') == '1\\n6 \\n'\n\nassert solution('''\\\n1\\n\n3 2 4 5\\\n''') == '2\\n3 2 4 5\\n'\n\nassert solution('''\\\n1000\\n\n1 2 3 4 5 6 7 8 9 10\\\n''') == '10\\n1 2 3 4 5 6 7 8 9 10\\n'\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr = sorted(list(set(arr)))\n    return str(len(arr)) + '\\n' +''.join(map(str, arr))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert solution('1\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' + '5\\n' +"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    array = list(map(int, lines[1].split()))\n    result = []\n    for a in array:\n        if a not in result:\n            result.append(a)\n    result =''.join(map(str, result))\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    a = list(map(int, inputs[1].split(' ')))\n    a_set = set(a)\n    a_list = list(a_set)\n    a_list.sort(reverse=True)\n    x = 0\n    for i in a_list:\n        x += 1\n        if i == a_list[0]:\n            a_list.remove(i)\n    print(x)\n    print(' '.join(map(str, a_list)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(len(set(stdin.split(' '))))\n    return''.join(set(stdin.split(' ')))\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    a = int(line)\n    \n    if a % 4 == 0:\n        return str(a)\n    \n    n = a\n    while True:\n        n += 1\n        if n % 4 == 0:\n            return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    x = 0\n    while a!= x:\n        x = int(str(a).replace(\"0\", \"\"))\n        a += 1\n        if a % 4 == 0:\n            x += 1\n    return str(a)\n\nsolution(input())\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while True:\n        s = str(a)\n        if (int(s) % 3 == 0) and (int(s) % 4 == 0):\n            n = a\n            break\n        a += 1\n    return str(n)\n\nassert(solution(\"4321\") == \"4322\")\nassert(solution(\"99\") == \"100\")\nassert(solution(\"237\") == \"238\")\nassert(solution(\"42\") == \"44\")"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    # result = 9999999\n    # for n in range(a, 9999999):\n    #     if (n // 10) % 3 == (n // 10) % 4:\n    #         print(n)\n    #         result = min(result, n)\n    # return str(result)\n    result = None\n    return str(a)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%4 == 0:\n        return str(n)\n    else:\n        n += 4 - n%4\n        return str(n)\n\nsolution(input())\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    digits = [int(x) for x in str(number)]\n\n    res = 0\n\n    for i in range(len(digits)):\n        digits[i] = digits[i] % 4\n        res += digits[i]\n\n    if res % 4 == 0:\n        return str(number)\n\n    min_d = float('inf')\n    for i in range(10, 1000):\n        new_d = sum([int(x) for x in str(i)]) % 4\n        if new_d < min_d:\n            min_d = new_d\n            res = i\n\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + 1)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 0\n    n = 0\n    while True:\n        b = a % 10\n        a = a // 10\n        n += b\n        if n % 4 == 0:\n            return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while True:\n        n += 1\n        if (a + sum(int(d) for d in str(n))) % 4 == 0:\n            break\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    if a % 4!= 0:\n        return 0\n    \n    b = 1\n    while b < a:\n        b += 1\n        if (a - b) % 4 == 0:\n            return b\n    \n    return a\n\nassert(solution(\"432\") == \"435\")\nassert(solution(\"99\") == \"103\")\nassert(solution(\"237\") == \"237\")\nassert(solution(\"42\") == \"44\")\nprint(solution(input()))\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    if not n:\n        return None\n    n = int(n)\n    for _ in range(n):\n        s = stdin.readline().strip()\n        m = stdin.readline()\n        m = int(m)\n        b = stdin.readline().strip()\n        b = [int(x) for x in b.split()]\n        result = solve(s, m, b)\n        print(result)\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, test_cases = stdin.splitlines()\n    for test_case in test_cases:\n        s, m, b = test_case.split()\n        b = [int(x) for x in b]\n        i = 0\n        t = \"\"\n        while i < len(s):\n            if s[i] == \"z\":\n                t += \"a\"\n                i += 1\n            else:\n                j = 1\n                while i+j < len(s) and s[i+j] < s[i]:\n                    j += 1\n                t += s[i:i+j]\n                i += j\n        k = 0\n        while k < len(t):\n            if b[k] > 0:\n                i = k\n                j = 1\n                while i < len(t) and j < b[k]:\n                    if t[i] < t[i-j]:\n                        i += 1\n                    else:\n                        j += 1\n                t = t[:i-j] + t[i:]\n                k = k - j\n            k += 1\n        print(t)\n    return \"\""
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        s, m, b = stdin.readline().split()\n        b = list(map(int, b.split(' ')))\n        ans = None\n        for i in range(len(b)):\n            for j in range(i+1, len(b)+1):\n                if s[i:j] == s[i:j][::-1]:\n                    if sum(abs(x-i) for x in range(1, j)) == int(m) and b[i] == 0:\n                        ans = s[:i-1] + s[i:]\n        print(ans)\nsolution('')\n'''\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n        b = b[::-1]\n        t = ''\n        k = 0\n        for i in s:\n            if i>=t[-1]:\n                t += i\n                k += 1\n            elif b[k]:\n                t += i\n                k += 1\n        print(t)\n\nsolution('')\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Return a valid string t, t such that t contains all the letters of s,\n    but at least one letter is erased in t,\n    and the array b is the same as the array b,\n    with the additional condition that the first position of t is greater than the\n    first position of s.\n    '''\n    s = stdin.strip()\n    m = int(stdin.strip())\n    b = list(map(int, stdin.strip().split()))\n    t = ''\n    for i in range(1, m + 1):\n        t += s[i - 1]\n    l = [t[i] for i in range(m)]\n    # print(l)\n    # print(b)\n    for i in range(m):\n        t = ''\n        for j in range(m):\n            if j == i:\n                continue\n            else:\n                t += s[j]\n        if t in l:\n            l.remove(t)\n    # print(l)\n    if len(l) == 0:\n        return t\n    else:\n        return t[:m - len(l)] + min(l)\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    b = stdin.rstrip().split()\n    b = [int(b[i]) for i in range(len(b))]\n    t = \"\"\n    for i in range(len(b)):\n        t += chr(((b[i] - i) % 26) + ord('a'))\n    return t"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        stdin = stdin.strip()\n        s, m, b = stdin.split('\\n')\n        b = list(map(int, b.split(' ')))\n        t = \"\"\n        for i in range(len(b)):\n            t += s[:b[i]+1]\n            s = s[b[i]+1:]\n        print(t)\n\nsolution(stdin)\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 26:\n        n //= 26\n        count += 1\n    if n > 1:\n        count += 1\n\n    n -= 1\n    if n < 26:\n        count += 1\n\n    name = \"\"\n    while count > 0:\n        if n == 26:\n            name += \"z\"\n        elif n == 25:\n            name += \"y\"\n        elif n == 24:\n            name += \"x\"\n        elif n == 23:\n            name += \"w\"\n        elif n == 22:\n            name += \"v\"\n        elif n == 21:\n            name += \"u\"\n        elif n == 20:\n            name += \"t\"\n        elif n == 19:\n            name += \"s\"\n        elif n == 18:\n            name += \"r\"\n        elif n == 17:\n            name += \"q\"\n        elif n == 16:\n            name += \"p\"\n        elif n == 15:\n            name += \"o\"\n        elif n == 14:\n            name += \"n\"\n        elif n == 13:\n            name += \"m\"\n        elif n == 12:\n            name += \"l\"\n        elif n == 11:\n            name += \"k\"\n        elif n == 10:\n            name += \"j\"\n        elif n == 9:\n            name += \"i\"\n        elif n == 8:\n            name += \"h\"\n        elif n == 7:\n            name += \"g\"\n        elif n == 6:\n            name += \"f\"\n        elif n == 5:\n            name += \"e\"\n        elif n == 4:\n            name += \"d\"\n        elif n == 3:\n            name += \"c\"\n        elif n == 2:\n            name += \"b\"\n        elif n == 1:\n            name += \"a\"\n        count -= 1\n        n -= 1\n\n    if n == 26:\n        name += \"z\"\n    elif n == 25:\n        name += \"y\"\n    elif n == 24:\n        name += \"x\"\n    elif n == 23:\n        name += \"w\"\n    elif n == 22:\n        name += \"v\"\n    elif n == 21:\n        name += \"u\"\n    elif n == 20:\n        name += \"t\"\n    elif n == 19:\n        name += \"s\"\n    elif n == 18:\n        name += \"r\"\n    elif n == 17:\n        name += \"q\"\n    elif n == 16:\n        name += \"p\"\n    elif n == 15:\n        name += \"o\"\n    elif n == 14:\n        name += \"n\"\n    elif n == 13:\n        name += \"m\"\n    elif n == 12:\n        name += \"l\"\n    elif n == 11:\n        name += \"k\"\n    elif n == 10:\n        name += \"j\"\n    elif n == 9:\n        name += \"i\"\n    elif n == 8:\n        name += \"h\"\n    elif n == 7:\n        name += \"g\"\n    elif n == 6:\n        name += \"f\"\n    elif n == 5:\n        name += \"e\"\n    elif n == 4:\n        name += \"d\"\n    elif n == 3:\n        name += \"c\"\n    elif n == 2:\n        name += \"b\"\n    elif n == 1:\n        name += \"a\"\n\n    return name\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The program was given by the Professor\n    \"\"\"\n    N = int(stdin)\n    if N % 26 == 0:\n        N -= 26\n        return chr(ord('a') + (N // 26) - 1)\n    else:\n        N -= 1\n        return chr(ord('a') + (N // 26))\n    return\n\nassert(solution(\"3\") == \"a\")\nassert(solution(\"12\") == \"b\")\nassert(solution(\"13\") == \"c\")\nassert(solution(\"123\") == \"d\")\nassert(solution(\"12345\") == \"e\")\nassert(solution(\"123456\") == \"f\")\nassert(solution(\"1234567\") == \"g\")\nassert(solution(\"12345678\") == \"h\")\nassert(solution(\"123456789\") == \"i\")\nassert(solution(\"12345678910\") == \"j\")\nassert(solution(\"1234567891010\") == \"k\")\nassert(solution(\"123456789101001\") == \"l\")\nassert(solution(\"1234567891010101\") == \"m\")\nassert(solution(\"12345678910101010\") == \"n\")\nassert(solution(\"123456789101010101\") == \"o\")\nassert(solution(\"1234567891010101010\") == \"p\")\nassert(solution(\"12345678910101010101\") == \"q\")\nassert(solution(\"123456789101010101010\") == \"r\")\nassert(solution(\"1234567891010101010101\") == \"s\")\nassert(solution(\"12345678910101010101020\") == \"t\")\nassert(solution(\"123456789101010101010201\") == \"u\")\nassert(solution(\"12345678910101010101020201\") == \"v\")\nassert(solution(\"123456789101010101010202010\") == \"w\")\nassert(solution(\"1234567891010101010102020101\") == \"x\")\nassert(solution(\"12345678910101010101020201010\") == \"y\")\nassert(solution(\"123456789101010101010202010101\") == \"z\")\nassert(solution(\"1234567891010101010102020101010\") == \"aa\")\nassert(solution(\"123456789101010101010202010101010\") == \"aba\")\nassert(solution(\"12345678910101010101020201010101010\") == \"aca\")\nassert(solution(\"1234567891010101010102020101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101020\") == \"acc\")\nassert(solution(\"12345678910101010101020201010101010101020\") == \"accc\")\nassert(solution(\"1234567891010101010102020101010101010102030\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010\") == \"acc\")\nassert(solution(\"12345678910101010101020201010101010101020301010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101020\") == \"acc\")\nassert(solution(\"12345678910101010101020201010101010101020301010101030\") == \"acc\")\nassert(solution(\"1234567891010101010102020101010101010102030101010102030\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010\") == \"acc\")\nassert(solution(\"12345678910101010101020201010101010101020301010101020301010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010\") == \"acc\")\nassert(solution(\"12345678910101010101020201010101010101020301010101020301010101010\") == \"acc\")\nassert(solution(\"1234567891010101010102020101010101010102030101010102030101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"123456789101010101010202010101010101010203010101010203010101010101010\") == \"acc\")\nassert(solution(\"12345678910101010101020"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    letters = []\n    for i in range(N):\n        letters.append(chr(ord('a') + i))\n\n    for j in range(N):\n        letters.append(chr(ord('a') + j) + chr(ord('a') + j))\n\n    for k in range(N):\n        letters.append(chr(ord('a') + k) + chr(ord('a') + k))\n\n    for l in range(N):\n        letters.append(chr(ord('a') + l) + chr(ord('a') + l) + chr(ord('a') + l))\n\n    for m in range(N):\n        letters.append(chr(ord('a') + m) + chr(ord('a') + m) + chr(ord('a') + m) + chr(ord('a') + m))\n\n    for n in range(N):\n        letters.append(chr(ord('a') + n) + chr(ord('a') + n) + chr(ord('a') + n) + chr(ord('a') + n) + chr(ord('a') + n))\n\n    for o in range(N):\n        letters.append(chr(ord('a') + o) + chr(ord('a') + o) + chr(ord('a') + o) + chr(ord('a') + o) + chr(ord('a') + o) + chr(ord('a') + o))\n\n    for p in range(N):\n        letters.append(chr(ord('a') + p) + chr(ord('a') + p) + chr(ord('a') + p) + chr(ord('a') + p) + chr(ord('a') + p) + chr(ord('a') + p) + chr(ord('a') + p))\n\n    for q in range(N):\n        letters.append(chr(ord('a') + q) + chr(ord('a') + q) + chr(ord('a') + q) + chr(ord('a') + q) + chr(ord('a') + q) + chr(ord('a') + q) + chr(ord('a') + q) + chr(ord('a') + q))\n\n    for r in range(N):\n        letters.append(chr(ord('a') + r) + chr(ord('a') + r) + chr(ord('a') + r) + chr(ord('a') + r) + chr(ord('a') + r) + chr(ord('a') + r) + chr(ord('a') + r) + chr(ord('a') + r))\n\n    for s in range(N):\n        letters.append(chr(ord('a') + s) + chr(ord('a') + s) + chr(ord('a') + s) + chr(ord('a') + s) + chr(ord('a') + s) + chr(ord('a') + s) + chr(ord('a') + s) + chr(ord('a') + s))\n\n    for t in range(N):\n        letters.append(chr(ord('a') + t) + chr(ord('a') + t) + chr(ord('a') + t) + chr(ord('a') + t) + chr(ord('a') + t) + chr(ord('a') + t) + chr(ord('a') + t) + chr(ord('a') + t))\n\n    for u in range(N):\n        letters.append(chr(ord('a') + u) + chr(ord('a') + u) + chr(ord('a') + u) + chr(ord('a') + u) + chr(ord('a') + u) + chr(ord('a') + u) + chr(ord('a') + u) + chr(ord('a') + u))\n\n    for v in range(N):\n        letters.append(chr(ord('a') + v) + chr(ord('a') + v) + chr(ord('a') + v) + chr(ord('a') + v) + chr(ord('a') + v) + chr(ord('a') + v) + chr(ord('a') + v) + chr(ord('a') + v))\n\n    for w in range(N):\n        letters.append(chr(ord('a') + w) + chr(ord('a') + w) + chr(ord('a') + w) + chr(ord('a') + w) + chr(ord('a') + w) + chr(ord('a') + w) + chr(ord('a') + w) + chr(ord('a') + w))\n\n    for x in range(N):\n        letters.append(chr(ord('a') + x) + chr(ord('a') + x) + chr(ord('a') + x) + chr(ord('a') + x) + chr(ord('a') + x) + chr(ord('a') + x) + chr(ord('a') + x) + chr(ord('a') + x))\n\n    for y in range(N):\n        letters.append(chr(ord('a') + y) + chr(ord('a') + y) + chr(ord('a') + y) + chr(ord('a') + y) + chr(ord('a') + y) + chr(ord('a') + y) + chr(ord('a') + y) + chr(ord('a') + y))\n\n    for z in range(N):\n        letters.append(chr(ord('a') + z) + chr(ord('a') + z) + chr(ord('a') + z) + chr(ord('a') + z) + chr(ord('a') + z) + chr(ord('a') + z) + chr(ord('a') + z) + chr(ord('a') + z))\n\n    return \"\".join(letters)\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    reg = re.compile(\"(?<!\\w)([a-z])(?!\\w)\")\n    n = int(stdin.strip())\n    ans = 'a'\n    while n > 0:\n        n -= 1\n        if n % 26 == 0:\n            ans = chr(ord(ans) + 1) + ans\n        else:\n            ans = reg.sub(lambda m: chr(ord(m.group(1)) + (ord(ans[0]) - ord('a') + 1) % 26), ans)\n        n //= 26\n    return ans"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an integer N, return the name of the dog numbered N.\n    >>> solution('1')\n    'b'\n    >>> solution('2')\n    'ba'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('27')\n    'baa'\n    >>> solution('"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.rstrip()\n    ans = \"a\"\n    for i in range(len(N)):\n        ans = chr(ord(ans) + 1) + \"a\" * i + \"b\" * i + \"a\" * (len(N) - i - 1)\n    return ans"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.splitlines()[0]\n    word_list = [x for x in stdin.splitlines()[1].split(\" \") if len(x) > 0]\n    word_list.sort(key=len)\n    word_dict = {}\n    for word in word_list:\n        if word not in word_dict:\n            word_dict[word] = True\n    print(word_dict)\n    max_len = 0\n    for word_len in range(1, len(word_list)):\n        word_len_list = list(word_list[:word_len])\n        word_len_list.sort()\n        word_len_list.sort(key=len, reverse=True)\n        curr_word = \"\"\n        for word in word_len_list:\n            if word not in word_dict:\n                curr_word = word\n                break\n        if curr_word:\n            word_dict[curr_word] = True\n        max_len = max(max_len, word_len * len(curr_word))\n    return max_len"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nm = int(input())\nwords = [input() for _ in range(m)]\n\n...\n\nprint(solution(words))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n    words.sort()\n    print(words)\n    \n    d = {}\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if j - i in d:\n                d[j - i].append((i, j))\n            else:\n                d[j - i] = [(i, j)]\n        \n    result = set()\n    for word in words:\n        i, j = 0, len(word) - 1\n        while i < j:\n            if word[i] == word[j]:\n                result.add(word[i:j+1])\n                i += 1\n                j -= 1\n            else:\n                if word[i] > word[j]:\n                    i += 1\n                else:\n                    j -= 1\n                    \n    return min(result)\n\nprint(solution(open(\"input.txt\", \"r\")))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = stdin.readline().strip().split()\n    cnt = 1\n    while cnt < n:\n        for i in range(n - 1, cnt - 1, -1):\n            if w[i - cnt] == w[i]:\n                del w[i - cnt:i + 1]\n                cnt += 1\n                break\n        else:\n            cnt += 1\n    return ''.join(w)"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    letters = [word[0] for word in words]\n    words = [''.join(letters[i:j+1]) for i in range(n) for j in range(n) if i < j]\n    for word in words:\n        for i in range(n):\n            for j in range(i, n):\n                if i < j and j - i == len(word) - 1 and word[i]!= word[j]:\n                    break\n            else:\n                return word\n\nprint(solution('''6\nto be or not to be\n'''))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a string, which is the result of the abbreviation.\n    The abbreviation may consist of a single word.\n    If the abbreviation is a single word, it must be a word in the text.\n    :param stdin: a string of text.\n    :return: the abbreviation as a string.\n    \"\"\"\n    n = int(stdin.readline())\n    l = stdin.readline().strip().split()\n    min_length = 0\n    for i in range(1, n):\n        if l[i-1].lower()!= l[i].lower():\n            min_length += 1\n    return str(min_length)"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    l = s.split()\n    l.sort()\n    result = l[0]\n    for i in range(1, n):\n        if l[i] == l[i - 1]:\n            continue\n        elif l[i] == l[i - 1][0:len(l[i - 1])]:\n            result = result[0:len(result) - 1] + l[i]\n        else:\n            result += l[i]\n    return result\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_words = int(stdin)\n    words = [w.strip() for w in stdin.split(\" \")]\n\n    # print(words)\n    word_dict = {}\n    for i in range(number_of_words):\n        if word_dict.get(words[i]):\n            word_dict[words[i]].append(i)\n        else:\n            word_dict[words[i]] = [i]\n\n    # print(word_dict)\n    for key, val in word_dict.items():\n        for i in range(1, len(val)):\n            if val[i] - val[i - 1] > 1:\n                del val[i]\n\n    # print(word_dict)\n    for key, val in word_dict.items():\n        if len(val) > 1:\n            for i in range(1, len(val)):\n                if val[i] - val[i - 1] == 1:\n                    val[i] = key[0]\n                    val[i - 1] = key[0]\n\n    # print(word_dict)\n\n    # for key, val in word_dict.items():\n    #     print(key, \":\", val)\n\n    return \"\".join(words)\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n    max_profit = 0\n    solutions = []\n    for length in range(n, 0, -1):\n        for i in range(0, n - length + 1):\n            profit = 0\n            for j in range(i, i + length):\n                profit += a[j]\n            if profit > max_profit:\n                max_profit = profit\n                solutions = [length, i]\n    print(max_profit)\n    print(*solutions)\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    profit = 0\n\n    for _ in range(k):\n        profit = max(profit, max(arr))\n        arr.remove(max(arr))\n\n    return str(profit)"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    difficulties = []\n    for i in range(1, n + 1):\n        difficulties.append(max(a[0:i]))\n    print(difficulties)\n\n    max_profit = 0\n    days = []\n\n    for i in range(1, n + 1):\n        max_profit += max(difficulties)\n        days.append(max_profit)\n        difficulties[0] -= a[i - 1]\n        difficulties[-1] -= a[i - 1]\n        for j in range(1, n):\n            if a[j] < difficulties[j]:\n                difficulties[j] = a[j]\n            else:\n                difficulties[j] -= a[j]\n\n    print(days)\n    return \"\""
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n\n    ans = 0\n    for p in permutations(range(len(a)), k):\n        day_profit = 0\n        for i, j in zip(p, p[1:] + [n]):\n            day_profit = max(day_profit, a[i])\n        ans = max(ans, day_profit)\n\n    return ans\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    # print(a)\n    sols = []\n    # print(n,k)\n    # print(a)\n    for i in range(0, n, k):\n        # print(i,i+k)\n        sol = a[i:i+k]\n        # print(sol)\n        profit = max(sol) - min(sol)\n        sols.append(profit)\n    sols.sort()\n    print(sols)\n    return sols\n\nsolution('8 2')"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    dp = [[0 for _ in range(m + 1)] for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, m + 1):\n            if i >= a[j - 1]:\n                dp[i][j] = max(dp[i][j - 1], dp[i - a[j - 1]][j - 1] + a[j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return '\\n'.join(map(str, dp[k][m]))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n\n    # TODO: Implement solution here\n    return \"\"\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution())\n\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    '20\\n3 2 3'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"Invalid input\"\n    current_profit = 0\n    solutions = []\n    for i in range(k):\n        max_profit = 0\n        solutions.append(a[0])\n        a = a[1:]\n        for j in range(n):\n            if max_profit < a[j]:\n                max_profit = a[j]\n                max_j = j\n        current_profit += max_profit\n        a = a[max_j+1:]\n    return str(current_profit)\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    if s == 0:\n        return str(0)\n    elif s == -1:\n        return str(1)\n    else:\n        res = len(a)\n        for i in range(len(a)-1):\n            s = a[i]\n            for j in range(i+1, len(a)):\n                s += a[j]\n                res = min(res, j-i+1)\n                if s == 0:\n                    break\n        return str(res)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    subsegments = []\n    for i in range(1, n):\n        if a[i] == 0:\n            return '0'\n        elif a[i] == a[i - 1]:\n            continue\n        else:\n            subsegments.append([i - 1, i])\n    if len(subsegments) == 0:\n        return '0'\n    else:\n        minimum_insertions = float('inf')\n        for subsegment in subsegments:\n            if a[subsegment[0]] == 0:\n                insertions = 1\n            else:\n                insertions = 0\n                for i in range(subsegment[0] + 1, subsegment[1]):\n                    if a[i] == 0:\n                        insertions += 1\n                        break\n                    elif a[i] < 0:\n                        insertions += 1\n                        break\n            minimum_insertions = min(minimum_insertions, insertions)\n    return str(minimum_insertions)\n\n\nprint(solution('''4\n1 -5 3 2\n'''))\n\nprint(solution('''5\n4 -2 3 -9 2\n'''))\n\nprint(solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n'''))\n\nprint(solution('''8\n16 -5 -11 -15 10 5 4 -4\n'''))\n\nprint(solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n'''))\n\nprint(solution('''7\n0 1 -1 1 -1 1 1 1\n'''))\n\nprint(solution('''8\n0 -1 0 1 0 1 0 1\n'''))\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\"\"\"\n\nN = int(input())\nA = [int(x) for x in input().split()]\n\ncounter = 0\n\nfor i in range(N):\n    for j in range(i,N):\n        if A[i]+A[j]==0:\n            counter+=1\n            A[j]=0\n\nprint(counter)\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n\n    if n < 2:\n        return str(0)\n    \n    else:\n        s = sum(array)\n        if s == 0:\n            return str(0)\n\n        else:\n            first = array[0]\n            s = s + first\n            if s == 0:\n                return str(1)\n\n            else:\n                for i in range(1, n):\n                    s = s + array[i]\n                    if s == 0:\n                        return str(i + 1)\n\n                    else:\n                        s = s - array[i - 1]\n                return str(i + 2)\n\nassert(solution('''4\n1 -5 3 2''') == '1')\nassert(solution('''5\n4 -2 3 -9 2''') == '0')\nassert(solution('''9\n-1 1 -1 1 -1 1 1 -1 -1''') == '6')\nassert(solution('''8\n16 -5 -11 -15 10 5 4 -4''') == '3')\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    curr = 0\n    s = 0\n    start = end = -1\n    for i in range(n):\n        s += l[i]\n        if s == 0:\n            s = 0\n            if start == -1:\n                start = i\n                end = i\n            else:\n                end = i\n    if end == -1:\n        return str(0)\n    if start == -1:\n        return str(n - end)\n    return str(start + 1)"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    segments_sum = a[0]\n    for i in range(1, len(a)):\n        if a[i] < 0:\n            segments_sum += a[i]\n    left = 0\n    right = len(a) - 1\n    inserts = 0\n    while left < right:\n        if abs(a[left] + a[right]) < segments_sum:\n            inserts += 1\n            if inserts > segments_sum:\n                return -1\n        if a[left] + a[right] > segments_sum:\n            right -= 1\n        if a[left] + a[right] < segments_sum:\n            left += 1\n    return inserts\n\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == 3\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"16 -5 -11 -15 10 5 4 -4\") == 3\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"10 -1 1 -1 1 -1 1 1 -1 -1\") == 4\nassert solution(\"3\") == 0\nassert solution(\"1 -5 3 2\") == 1\nassert solution(\"4 -2 3 -9 2\") == 0\nassert solution(\"5 -1 3 -4 2\") == 1\nassert solution(\"9 -1 1 -1 1 -"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    l = []\n    c = 0\n    for i in range(n):\n        if a[i] == 0:\n            c += 1\n        else:\n            l.append(c)\n            c = 0\n    l.append(c)\n    return str(min(l))\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(' ')]\n    s = sum(arr)\n    if s == 0:\n        return '0'\n    else:\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if arr[i] + arr[j] == 0:\n                    return str(i)\n    return str(i + 1)"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 0:\n        return '0'\n    s = 0\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n            s += a[i]\n    s = s - count * max(a)\n    if s == 0:\n        return '0'\n    count = 1\n    for i in range(n - 1):\n        if a[i] * a[i + 1] < 0:\n            s += min(abs(a[i]), abs(a[i + 1]))\n            count += 1\n    return str(count + s)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return str(0)\n    a = [int(x) for x in stdin.split()]\n    max_ = 0\n    for i in range(n - 1):\n        max_ += abs(a[i] - a[i + 1])\n    return str(max_)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, m = [int(x) for x in stdin.split()]\n        a = [int(x) for x in stdin.split()]\n        d = []\n        d.append(abs(a[0] - a[1]))\n        d.append(abs(a[1] - a[2]))\n        d.append(abs(a[2] - a[3]))\n        d.append(abs(a[3] - a[4]))\n        d.append(abs(a[4] - a[5]))\n        print(sum(d))"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    n, m = list(map(int, stdin.strip().split(' ')))\n    a = list(map(int, stdin.strip().split(' ')))\n    return str(max(abs(a[i] - a[i+1]) for i in range(n-1)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    mx = 0\n    for i in range(1, n):\n        mx = max(mx, abs(a[i] - a[i - 1]))\n    return str(mx)\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n\n    m_s = sum(a)\n\n    a_s = [(a[0], 0)]\n    for i in range(1, n):\n        if a[i] > 0:\n            a_s.append((a[i], i))\n        else:\n            a_s.append((-a[i], i))\n    a_s = sorted(a_s)\n\n    max_d = 0\n    max_idx = -1\n    for a, i in a_s:\n        d = abs(a - a_s[i+1][0])\n        if m_s - m - a + a_s[i+1][0] > max_d:\n            max_d = m_s - m - a + a_s[i+1][0]\n            max_idx = i\n    return''.join(map(str, [max_idx]))\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return stdin"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = [int(x) for x in stdin.readline().strip().split()]\n        a = [int(x) for x in stdin.readline().strip().split()]\n        s = 0\n        s_max = 0\n        for i in range(n-1):\n            s += abs(a[i] - a[i+1])\n            s_max = max(s_max, s)\n        print(s_max)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = list(map(int, stdin.split()))\n        a = list(map(int, stdin.split()))\n        a.sort()\n        pairs = []\n        for i in range(1, n):\n            pairs.append(a[i] - a[i - 1])\n        print(sum(abs(p) for p in pairs))\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = [int(s) for s in stdin.readline().split()]\n        a = [int(s) for s in stdin.readline().split()]\n        a = a + [m - sum(a)]\n        print(max(map(lambda x, y: abs(x - y), a[:-1], a[1:])))\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, *seq = [int(x) for x in stdin.strip().split(\" \")]\n    for i, n in enumerate(seq):\n        if n == k:\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    n = 1\n    while True:\n        if n % k == 0:\n            return str(n)\n        n += 1\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = -1\n    for i in range(1000, 1000000):\n        if i % k == 0:\n            result = i\n            break\n    return str(result)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(((n-1)//n) * n)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k % 7 == 0:\n        return 0\n    if k % 4 == 0:\n        return 1\n    if k % 2 == 0:\n        return 2\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 7 == 0:\n        return '7'\n    else:\n        return -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K % 7 == 0:\n        return str(1)\n    return str(-1)\n\nprint(solution(stdin.readline().strip()))\n\n\"\"\"\n\n\"\"\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(list(reversed([i for i in range(1,10**6+1) if i%101 == 0]))[-1]) if len(list(reversed([i for i in range(1,10**6+1) if i%101 == 0])))>0 else str(-1)\n\nprint(solution(input()))"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while n < k:\n        n *= 7\n    n = n // k\n    print(n)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_via_sort(stdin))\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i] + lst[j]) / 2.0 == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    d = {}\n    for i in p:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    d = sorted(d.items())\n    m = sorted(d)\n    print(d)\n    print(m)\n    ans = 0\n    for i in range(len(m)):\n        if m[i][1] == n // 2:\n            ans += (n // 2) * (n // 2) // 2\n        if m[i][1] == n // 2 - 1:\n            ans += (n // 2 - 1) * (n // 2 - 1) // 2\n        if m[i][1] == n // 2 + 1:\n            ans += (n // 2 + 1) * (n // 2 + 1) // 2\n    return str(ans)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(\" \")]\n\n    # Find the median of the given sequence\n    med = find_median(n)\n\n    # Count the number of pairs such that their median equals to the given value\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if get_median(i, j) == m:\n                count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nIn the second example, the only suitable pair is $(1, 4)$ and the median of the sequence is equal to $5$.\n\nIn the third example, the only suitable pair is $(4, 4)$ and the median of the sequence is equal to $8$.\n\"\"\"\nfrom sys import stdin,stdout\nn,m = list(map(int,stdin.readline().strip().split()))\ns = list(map(int,stdin.readline().strip().split()))\ns.sort()\ns += [float('inf')]\nk = 0\nfor i in range(n):\n    if s[i] <= m and s[i+1] <= m:\n        k += 1\n    elif s[i] > m:\n        break\nstdout.write(str(k))\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.strip().split(\" \")]\n    p = list(map(int, stdin.strip().split(\" \")))\n    return str(solve(n, m, p))\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups = sorted(cups)\n\n    max_days = 0\n    curr_days = 0\n    for cup in cups:\n        if curr_days + cup >= m:\n            curr_days = m\n            max_days += 1\n        else:\n            curr_days += cup\n\n    return max_days if curr_days < m else -1\n\nassert(solution('''5 8\n2 3 1 1 2''') == '4')\nassert(solution('''7 10\n1 3 4 2 1 4 2''') == '2')\nassert(solution('''5 15\n5 5 5 5 5\n''') == '1')\nassert(solution('''5 26\n5 5 5 5 5\n''') == '-1')\nassert(solution('''5 26\n5 5 5 5 5\n''') == '-1')\nassert(solution('''7 26\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n1 3 4 2 1 4 2\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '2')\nassert(solution('''7 10\n5 5 5 5 5 5\n''') == '-1')\nassert(solution('''7 20\n5 5 5 5 5 5\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split(' '))\n    cups_of_coffee = list(map(int, stdin.readline().strip().split(' ')))\n\n    min_n_of_days = n * m\n    min_n_of_days = -1 if min_n_of_days > m * (m + 1) / 2 else min_n_of_days\n\n    for i in range(1, m + 1):\n        if i * (m + i) < n * (m + i + 1):\n            min_n_of_days = i\n            break\n\n    return str(min_n_of_days)"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups.sort()\n    polycarp_cups = cups[0:m]\n    polycarp_cups.sort()\n    min_days = [0] * len(polycarp_cups)\n    for i in range(1, len(polycarp_cups)):\n        min_days[i] = min_days[i - 1] + abs(polycarp_cups[i] - polycarp_cups[i - 1])\n\n    return str(min(min_days) if min_days else -1)\n\nprint(solution(input()))"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, m = [int(i) for i in stdin.split()]\n    cups_of_coffee, max_pages_of_coursework = [int(i) for i in stdin.split()]\n    cups_of_coffee_pages = [int(i) for i in stdin.split()]\n\n    return str(solve(max_pages_of_coursework, cups_of_coffee, cups_of_coffee_pages))\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Return -1 if Polycarp cannot write coursework, otherwise return the number of days Polycarp needs to do it.'''\n    n, m = map(int, stdin.strip().split(' '))\n    a = [int(x) for x in stdin.strip().split(' ')]\n    if m < n or max(a) > n:\n        return '-1'\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i + 1][j + 1] = max(0, a[j] - j)\n            else:\n                dp[i + 1][j + 1] = max(0, min(dp[i][j + 1], dp[i][j]) - dp[i][j])\n    return str(dp[n][n])\n\nassert(solution('5 8') == '4')\nassert(solution('5 10') == '2')\nassert(solution('7 10') == '2')\nassert(solution('5 15') == '1')\nassert(solution('5 26') == '-1')\nassert(solution('5 15') == '1')\nassert(solution('5 26') == '-1')\nassert(solution('5 16') == '2')\nassert(solution('5 26') == '-1')\nassert(solution('5 16') == '2')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(solution('5 26') == '-1')\nassert(s"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = (int(i) for i in stdin.strip().split(' '))\n    cups = [int(i) for i in stdin.strip().split(' ')]\n    cups.sort()\n    def best_day(d: int, s: int) -> bool:\n        for i in range(len(cups)):\n            if cups[i] <= s:\n                return True\n        return False\n    def best_cup(s: int) -> int:\n        for i in range(len(cups)):\n            if cups[i] == s:\n                return i\n        return -1\n    def min_days(s: int) -> int:\n        if s <= 0:\n            return 1\n        if best_day(1, s):\n            return 1\n        if s <= 1:\n            return 0\n        best_i = best_cup(s)\n        if best_i == -1:\n            return -1\n        s -= cups[best_i]\n        return 1 + min_days(s)\n    return str(min_days(m - 1))\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a_d = [a[i] - i for i in range(n)]\n    a_max = max(a_d)\n    a_min = min(a_d)\n\n    c = a_max\n    for i in range(c, m):\n        a_d[i] = a_min - i\n\n    c = a_max - a_min + 1\n    for i in range(c, m):\n        a_d[i] = 0\n\n    ans = 0\n    for i in range(n):\n        if a_d[i] < 0:\n            continue\n        ans += a_d[i] // c\n\n    return str(ans)\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    coffee = list(map(int, stdin.strip().split()))\n    if m > sum(coffee):\n        print(-1)\n        return\n    cups = {i: coffee[i] for i in range(n)}\n    for _ in range(m):\n        first, second = map(int, stdin.strip().split())\n        if cups[first] - first < second:\n            cups[first] = max(0, cups[first] - first)\n        else:\n            cups[second] = max(0, cups[second] - second)\n    ans = 0\n    for i in cups:\n        if cups[i] > 0:\n            ans += 1\n    print(ans)\nsolution(input())\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def print_day(m, n, a):\n        return f\"{m} {n} {a}\"\n\n    def can_write(cups, pages, i):\n        day = 0\n        cup = cups[0]\n        while day < pages:\n            if day + cup - i < pages:\n                day += cup - i\n                cup = cups[i]\n                i += 1\n                if i >= len(cups):\n                    break\n            else:\n                return False\n        return True\n\n    def main():\n        stdin = stdin.splitlines()\n        m, n = tuple(int(x) for x in stdin[0].split())\n        cups = tuple(int(x) for x in stdin[1].split())\n        pages = 0\n        for i in range(2, len(cups) + 1):\n            pages += i * min(cups[i - 2], m)\n\n        if m < sum(cups) or n > pages:\n            return -1\n        return print_day(m, n, cups[-1])\n\n    return main()\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split(' ')))\n    if all(a - b[i] == b[i + 1] - b[i] for i in range(n - 1)):\n        return 0\n    if all(a - b[i] == b[i + 1] - b[i] for i in range(n - 1) if b[i] == b[i + 1]):\n        return -1\n    return n - 1\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@pytest.mark.solution\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    prev = b[0]\n    count = 1\n    for i in range(1, n):\n        curr = b[i]\n        if prev - curr == 1:\n            count += 1\n            prev = curr\n        elif prev - curr == -1:\n            count += 1\n            prev = curr\n        else:\n            return -1\n    return count"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... Input\n   ... 4\n   ... 24 21 14 10\n   ...\n   ... Output\n   ... 3\n   ...\n   ... Input\n   ... 2\n   ... 500 500\n   ...\n   ... Output\n   ... 0\n   ...\n   ... Input\n   ... 3\n   ... 14 5 1\n   ...\n   ... Output\n   ... 1\n   ...\n   ... Input\n   ... 5\n   ... 1 3 6 9 12\n   ...\n   ... Output\n   ... -1\n   ...\n   ... Input\n   ... 5\n   ... 1 3 6 9 12\n   ...\n   ... Output\n   ... 1\n   ... \"\"\")\n    '3'\n    >>> solution(\"\"\"\n   ... Input\n   ... 5\n   ... 1 3 6 9 12\n   ...\n   ... Output\n   ... -1\n   ...\n   ... Input\n   ... 5\n   ... 1 3 6 9 12\n   ...\n   ... Output\n   ... -1\n   ... \"\"\")\n    '0'\n    >>> solution(\"\"\"\n   ... Input\n   ... 5\n   ... 1 3 6 9 12\n   ...\n   ... Output\n   ... -1\n   ...\n   ... Input\n   ... 5\n   ... 1 3 6 9 12\n   ...\n   ... Output\n   ... -1\n   ... \"\"\")\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n\n    if n < 3:\n        return \"0\"\n\n    left = 0\n    middle = 0\n\n    for i in range(1, n - 1):\n        diff = b[i] - b[i - 1]\n        if diff == b[i - 1] + 1:\n            middle += 1\n            left = 0\n        elif diff == b[i - 1] - 1:\n            middle -= 1\n            left = 0\n        elif diff == b[i - 1]:\n            left += 1\n            middle = 0\n\n    if left + middle == 0:\n        return \"0\"\n\n    if left > middle:\n        return str(left - middle)\n    else:\n        return str(left + middle)\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    return \"1\" if arithmeticProgression(b) else \"-1\"\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split(' ')))\n    best = n\n    if n <= 2:\n        return '-1'\n    if n == 3:\n        return '0'\n    if n == 4:\n        return '1'\n    for i in range(1, n - 2):\n        if b[i] + 1 == b[i - 1] and b[i] + 1 == b[i + 1]:\n            best = min(best, i)\n    if best == n - 1:\n        return '0'\n    return str(best + 1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if b[i] - b[j] == b[j] - b[j + 1]:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    return ''.join(str(i) for i in dp) if dp[-1]!= 1 else '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    if n < 3:\n        return str(-1)\n    b.sort()\n    for i in range(n-2):\n        if b[i+2] - b[i]!= b[i+1] - b[i+2]:\n            return str(-1)\n    return str(b.count(0))\n\nprint(solution('input.txt'))\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        if i > 0 and b[i] == b[i-1]:\n            cnt += 1\n        if cnt > 1:\n            break\n        for j in range(i+1, n):\n            if b[i] + 1 == b[j]:\n                cnt += 1\n            elif b[i] - 1 == b[j]:\n                cnt -= 1\n        if cnt == 1:\n            ans += 1\n            cnt = 0\n    return str(ans) if ans > 0 else \"-1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    b.sort()\n    previous = b[0]\n    changes = 0\n    for i in b:\n        if i - previous > 1:\n            changes += 1\n        previous = i\n    if changes > 0:\n        return str(changes)\n    return '-1'"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_balance(skill_difference: int) -> bool:\n        \"\"\"Check if we can form a balanced team\"\"\"\n        group_size = 0\n        # We count how many students in one team\n        for a_i in range(n):\n            # Students with higher skill\n            if skill[a_i] < skill[i]:\n                group_size += 1\n            # Students with lower skill\n            else:\n                # We should stop to balance a team if we already have too many students\n                if group_size > k:\n                    return False\n                # We want to balance a team with group_size students and skill_difference skill_difference\n                # So we can try to add the next student to the team\n                group_size -= 1\n        # We check that if we have exactly k students in a team, they all have skill_difference skill_difference\n        return group_size == k\n    n, k = map(int, stdin.split())\n    skill = list(map(int, stdin.split()))\n    skill_difference = 10 ** 9\n    # We find the skill_difference that is the maximum\n    # In order to balance a team with k students we should have\n    # skill_difference <= 5 * skill_difference - 1\n    # skill_difference <= 5 * (skill_difference - 1) + 1\n    # skill_difference <= 5 * (skill_difference - 1) + 2\n    # skill_difference <= 5 * (skill_difference - 1) + 3\n    # skill_difference <= 5 * (skill_difference - 1) + 4\n    # skill_difference <= 5 * (skill_difference - 1) + 5\n    # skill_difference <= 5 * (skill_difference - 1) + 6\n    # skill_difference <= 5 * (skill_difference - 1) + 7\n    # skill_difference <= 5 * (skill_difference - 1) + 8\n    # skill_difference <= 5 * (skill_difference - 1) + 9\n    # skill_difference <= 5 * (skill_difference - 1) + 10\n    while skill_difference >= 1:\n        skill_difference //= 10\n    # We can use the skill_difference that is the maximum\n    skill_difference = 10 ** 9\n    while skill_difference >= 1:\n        skill_difference //= 10\n    # We want to start from the skill that is the maximum\n    i = skill.index(max(skill))\n    # We try to balance the teams\n    while True:\n        if can_balance(skill_difference):\n            return i + 1\n        # If we can't balance a team, we increase the skill_difference\n        skill_difference += 1\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    return str(balancedTeams(students, k))\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    a = list(map(int, stdin[1].split()))\n\n    def get_team_skill_diff(a, b, k):\n        return abs(a - b) <= k\n\n    def get_max_skill_diff(n, k):\n        max_skill_diff = k\n        for i in range(n):\n            for j in range(i + 1, n):\n                if get_team_skill_diff(a[i], a[j], k):\n                    max_skill_diff -= 1\n        return max_skill_diff\n\n    print(get_max_skill_diff(n, k))\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(el) for el in stdin.split()]\n    arr.sort()\n    res = 0\n    k = min(k, n - 1)\n    for i in range(n - 1):\n        if arr[i] - arr[i + 1] > 5:\n            res += 1\n            if res >= k:\n                return arr[i] + 5\n        else:\n            res = 0\n    return arr[n - 1] + 5"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    k = min(k, len(a))\n    best = 0\n    for i in range(k):\n        if i % 2:\n            a[i] += a[i - 1]\n        else:\n            a[i] += a[i + 1]\n        best = max(best, a[i])\n\n    return str(best)"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.split(\"\\n\")\n\n    n, k = map(int, stdin[0].split(\" \"))\n    a = list(map(int, stdin[1].split(\" \")))\n\n    # a = [0] * n\n    # for i in range(n):\n    #     a[i] = int(stdin[i + 1])\n\n    a = sorted(a)\n\n    k = min(n - 1, k)\n\n    i = 0\n    res = 0\n    while i < n:\n        a[i] = a[i] - 5\n        while i < n - 1 and a[i] == a[i + 1] - 5:\n            i += 1\n        if i < n:\n            res += 1\n        i += 1\n\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = sorted(a, reverse=True)\n    result = 0\n\n    for i in range(n):\n        for j in range(k):\n            if a[i] - a[i - 1] < 5:\n                break\n            if i == n - 1:\n                result += 1\n                break\n            j += 1\n\n    return str(result)"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()]\n    sorted_arr = sorted(arr)\n    first_index, last_index = 0, len(arr) - 1\n    number_of_teams = 0\n\n    while number_of_teams < k:\n        while first_index < last_index:\n            if sorted_arr[first_index] + sorted_arr[last_index] <= k:\n                number_of_teams += 1\n                break\n            else:\n                first_index += 1\n\n        while first_index < last_index:\n            if sorted_arr[first_index] + sorted_arr[last_index] <= k:\n                number_of_teams += 1\n                break\n            else:\n                last_index -= 1\n\n    return number_of_teams\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    ans = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= k:\n                ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The maximum possible number of balanced teams is the number of students divided by the number of teams.\n    '''\n    n, k = map(int, stdin.strip().split(' '))\n    skills = list(map(int, stdin.strip().split(' ')))\n\n    result = 0\n    for i in range(1, n + 1):\n        a = skills[0:i]\n        a.sort()\n        if (len(a) % 2 == 0 and sum(a[0::2]) <= k) or (len(a) % 2!= 0 and sum(a) <= k):\n            result += 1\n    return str(result)\n\nassert(solution(input) == '5')\nassert(solution('2 5') == '4')\nassert(solution('3 3') == '3')\nassert(solution('1 2 15 15 15') == '4')\nassert(solution('36 4 1 25 9 16') == '2')\nassert(solution('1 10 100 1000') == '4')\nassert(solution('1 10 100 1000 1') == '4')\nassert(solution('1 10 100 1000 1 1') == '6')\nassert(solution('1 10 100 1000 1 1 1') == '8')\nassert(solution('1 10 100 1000 1 1 1 1') == '10')\nassert(solution('1 10 100 1000 1 1 1 1 1') == '12')\nassert(solution('1 10 100 1000 1 1 1 1 1 1') == '14')\nassert(solution('1 10 100 1000 1 1 1 1 1 1 1') == '16')\nassert(solution('1 10 100 1000 1 1 1 1 1 1 1 1') == '18')\nassert(solution('1 10 100 1000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # result = -1\n    # if len(stdin.strip().split()) == 3:\n    #     A = list(map(int, stdin.strip().split()[1:]))\n    #     result = max(A)\n    #     n = len(A)\n    #     K = int(stdin.strip().split()[2])\n    #     m = int(stdin.strip().split()[1])\n    #     if result > K:\n    #         return result\n    #     elif m > K - result:\n    #         return -1\n    #     else:\n    #         result = m\n    #         for i in range(n-1):\n    #             if A[i] > K:\n    #                 m += A[i] - K\n    #                 result += A[i] - K\n    #                 A[i] -= A[i] - K\n    #         result += A[-1]\n    #         return result\n    # else:\n    #     print('error')\n    #     return 'error'\n    result = -1\n    if len(stdin.strip().split()) == 3:\n        A = list(map(int, stdin.strip().split()[1:]))\n        result = max(A)\n        n = len(A)\n        K = int(stdin.strip().split()[2])\n        m = int(stdin.strip().split()[1])\n        if result > K:\n            return result\n        elif m > K - result:\n            return -1\n        else:\n            result = m\n            for i in range(n-1):\n                if A[i] > K:\n                    m += A[i] - K\n                    result += A[i] - K\n                    A[i] -= A[i] - K\n            result += A[-1]\n            return result\n    else:\n        print('error')\n        return 'error'\n\nprint(solution(input()))"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    items = [int(x) for x in stdin.split()]\n    n, k, m = items[0], items[1], items[2]\n    scores = items[3:]\n    mean = sum(scores) / n\n    current_mean = sum(scores) / (n + 1)\n    target_mean = m\n    if target_mean > mean:\n        return -1\n    n_remaining = n\n    while current_mean < target_mean:\n        n_remaining -= 1\n        current_mean = sum(scores[:n_remaining]) / (n_remaining + 1)\n    return n_remaining\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_avg(scores: List[int]) -> float:\n        return sum(scores)/len(scores)\n\n    n, k, m = [int(x) for x in stdin.strip().split()]\n    data = [int(x) for x in stdin.strip().split()]\n\n    if calculate_avg(data) < m:\n        return -1\n    else:\n        return n - (m - calculate_avg(data))\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take the input and return the output\n    \"\"\"\n    # your code here\n    return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.strip().split())\n    L = list(map(int, stdin.strip().split()))\n    scores = [sum(L[:i]) for i in range(1, N+1)]\n\n    low = 0\n    high = K\n    while high - low > 1:\n        guess = (high + low) // 2\n        if (guess == 0 and K == 0) or (guess == K and N > K):\n            break\n\n        if sum(scores[:guess]) < M:\n            low = guess\n        elif sum(scores[:guess]) > M:\n            high = guess\n        else:\n            break\n\n    if sum(scores[:guess]) < M:\n        return str(guess)\n    return str(-1)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    total = 0\n    for i in range(n-1):\n        total += a[i]\n    if total >= m:\n        return \"0\"\n    elif m - total < k:\n        return str(-1)\n    else:\n        return str(k-total)"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a_valid = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    survived = []\n    for player in a:\n        if player not in a_valid:\n            print(\"Error: no such player\")\n        else:\n            a_valid.remove(player)\n    for player in a:\n        if player in a_valid:\n            a_valid.remove(player)\n        else:\n            survived.append(player)\n    if len(a_valid) < 1:\n        return \"Yes\"\n    elif len(survived) == 0:\n        return \"No\"\n    else:\n        survived.sort()\n        for player in survived:\n            a_valid.remove(player)\n        if a_valid == []:\n            return \"Yes\"\n        else:\n            return \"No\"\n\nsolution(\"6 3 4\")\nsolution(\"6 3 4\")\nsolution(\"3 4 5 7 2 1 6\")\nsolution(\"6 8 3 4\")\nsolution(\"5 5 6 6 5 1 1\")\nsolution(\"1 1 1 1 1 1\")\nsolution(\"1 1 2 3\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    scores = [k] * n\n    for _ in range(q):\n        answers = [int(x) for x in stdin.split()]\n        for idx, a in enumerate(answers):\n            if a == scores[idx]:\n                scores[idx] -= 1\n    return '\\n'.join(['Yes' if s >= 0 else 'No' for s in scores])\n\nassert(solution('''6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('''6 4 5\n1\n1\n1\n1\n1\n1\n''') == 'No\\nNo\\nYes\\nYes\\nYes\\nYes')\nassert(solution('''8 10 10\n8\n1\n8\n3\n8\n5\n9\n9\n8\n''') == 'No\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo')\nassert(solution('''8 10 10\n7\n2\n3\n4\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nYes\\nYes\\nYes')\nassert(solution('''8 10 10\n7\n1\n5\n7\n3\n6\n4\n6\n9\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n8\n1\n8\n3\n8\n5\n9\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n7\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n6\n3\n2\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n6\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n5\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n5\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n5\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n5\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n5\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n5\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n5\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6\n7\n8\n9\n8\n''') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nYes')\nassert(solution('''8 10 10\n4\n3\n2\n3\n4\n5\n6"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(i) for i in stdin.split(' ')]\n    scores = [0 for i in range(n)]\n    for i in range(n):\n        scores[i] = int(stdin.readline())\n    for i in range(q):\n        scores[i] = scores[i] - (q - i)\n    surviving = []\n    for i in range(n):\n        if scores[i] >= 0:\n            surviving.append(i + 1)\n    return '\\n'.join('Yes' if i in surviving else 'No' for i in range(n))\n\nprint(solution(stdin.readline()))\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.strip().split(\" \"))\n    scores = list(map(int, stdin.strip().split(\" \")))\n    for i in range(q):\n        if scores[i] > k:\n            scores[i] -= 1\n    for i, score in enumerate(scores):\n        if score <= 0:\n            scores[i] = \"No\"\n        else:\n            scores[i] = \"Yes\"\n    return \"\\n\".join(scores)"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, _, Q = [int(i) for i in stdin.split()]\n    players = [int(i) for i in stdin.split()]\n    for i in range(Q):\n        players[i % len(players)] -= 1\n    return \"Yes\" if max(players) == 0 else \"No\""
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines whether each of the N players survived the game.\n    \"\"\"\n    n, k, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    assert len(a) == q\n    a = sorted(a)\n    for i in range(q):\n        if i < q - 1:\n            assert a[i] > a[i+1]\n        else:\n            assert a[i] >= 0\n    answers = ['Yes' if x >= 0 else 'No' for x in a]\n    return '\\n'.join(answers)\n\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('4 1 2\\n2\\n1\\n3\\n') == 'No\\nNo\\nYes\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo')\nassert(solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    rows = [list(map(int, stdin.split())) for _ in range(n)]\n    cols = list(zip(*rows))\n    if n!= m or n < 2 or m < 2:\n        print('NO')\n    else:\n        r = [''.join(map(str, (row[::-1] if row[i] == 1 else row))) for i, row in enumerate(rows)]\n        c = [''.join(map(str, (col[::-1] if col[i] == 1 else col))) for i, col in enumerate(cols)]\n        print('YES')\n        print(''.join(r))\n        print(''.join(c))\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    rows_sum = rows * cols\n    matrix = [list(map(int, stdin.split()[x: x + cols])) for x in range(0, rows_sum, cols)]\n    rows_sum = rows * cols\n\n    matrix_sorted = sorted(matrix, key=lambda x: -(x[-1] + x[-2] + x[-3]))\n\n    return \"YES\" if rows_sum == sum([x[-1] + x[-2] + x[-3] for x in matrix_sorted]) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    matrix = [[int(e) for e in stdin.split()] for _ in range(n)]\n\n    for _ in range(m):\n        i, j = map(int, stdin.split())\n\n        if matrix[i - 1][j - 1] == 1:\n            matrix[i - 1][j - 1] = 0\n        else:\n            matrix[i - 1][j - 1] = 1\n\n    matrix = [\n        sorted(row, reverse=True)\n        for row in matrix\n    ]\n\n    row_results = [\n        ''.join(map(str, row))\n        for row in matrix\n    ]\n\n    matrix = [\n        ''.join(map(str, col))\n        for col in zip(*matrix)\n    ]\n\n    column_results = [\n        ''.join(map(str, col))\n        for col in zip(*matrix)\n    ]\n\n    return 'YES' if row_results == column_results else 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    m = min(m, n)\n\n    r = [''] * n\n    c = [''] * m\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                r[i] += '0'\n                c[j] += '0'\n            else:\n                r[i] += '1'\n                c[j] += '1'\n\n    if r == sorted(r, reverse=True) and c == sorted(c, reverse=True):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = list(map(int, stdin[0].split()))\n    matrix = [list(map(int, line.split())) for line in stdin[1:]]\n\n    def binary_matrix(matrix: List[List[int]], row: int, col: int) -> List[List[int]]:\n        if row == 0 or col == 0:\n            return matrix\n\n        if matrix[row][col] == 0:\n            return binary_matrix(matrix, row - 1, col)\n\n        matrix[row][col] = 1 - matrix[row][col]\n        return binary_matrix(matrix, row - 1, col)\n\n    def sorted_matrix(matrix: List[List[int]]) -> List[List[int]]:\n        return sorted(matrix, key=lambda row: row[0] * 10 ** len(str(row[0])) + row[1])\n\n    def print_matrix(matrix: List[List[int]]) -> str:\n        return \"\\n\".join(\"\".join(str(x) for x in row) for row in matrix)\n\n    matrix = sorted_matrix(binary_matrix(matrix, n - 1, m - 1))\n    return print_matrix(matrix) if matrix == sorted_matrix(matrix) else \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    grid = [list(map(int, x.strip().split(' '))) for x in stdin.split('\\n')]\n    operations = [x.strip().split(' ') for x in stdin.split('\\n')]\n    rows = len(grid)\n    cols = len(grid[0])\n    def is_sorted(seq):\n        for i in range(len(seq) - 1):\n            if seq[i] > seq[i + 1]:\n                return False\n        return True\n    def get_seq(col):\n        return [grid[i][col] for i in range(rows)]\n    def is_sorted_row(row):\n        return is_sorted(get_seq(0))\n    def is_sorted_col(col):\n        return is_sorted(get_seq(col))\n    def is_sorted_grid():\n        return is_sorted([x for i in range(rows) for x in grid[i]])\n    def swap(seq, a, b):\n        seq[a], seq[b] = seq[b], seq[a]\n    def flip_row(row):\n        for col in range(cols):\n            swap(grid[row], col, cols - 1 - col)\n    def flip_col(col):\n        for row in range(rows):\n            swap(grid[row], row, rows - 1 - row)\n    def flip_grid():\n        for row in range(rows):\n            for col in range(cols):\n                swap(grid[row], col, cols - 1 - col)\n    def flip_row_step(row, steps):\n        if row + steps > rows - 1:\n            return\n        for i in range(steps):\n            flip_row(row)\n    def flip_col_step(col, steps):\n        if col + steps > cols - 1:\n            return\n        for i in range(steps):\n            flip_col(col)\n    def flip_grid_step(steps):\n        if steps > rows * cols - 1:\n            return\n        for row in range(rows):\n            for col in range(cols):\n                swap(grid[row], col, cols - 1 - col)\n    steps = 0\n    while not is_sorted_grid():\n        for row in operations:\n            if row[0] == 'row':\n                if int(row[1]) > 0:\n                    flip_row_step(int(row[2]), int(row[3]))\n                    steps += int(row[3])\n                else:\n                    flip_row(int(row[2]))\n            elif row[0] == 'col':\n                if int(row[1]) > 0:\n                    flip_col_step(int(row[2]), int(row[3]))\n                    steps += int(row[3])\n                else:\n                    flip_col(int(row[2]))\n            elif row[0] == 'grid':\n                flip_grid_step(int(row[1]))\n                steps += int(row[1])\n    if not is_sorted_grid():\n        return 'NO'\n    r = []\n    for row in grid:\n        for col in row:\n            r.append(str(col))\n    c = []\n    for col in range(cols):\n        r.append('0')\n        for row in range(rows):\n            c.append(str(grid[row][col]))\n    return 'YES\\n{0}\\n{1}'.format(''.join(r), ''.join(c))"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    for row in range(n):\n        for col in range(m):\n            if a[row][col] == 0:\n                for row2 in range(n):\n                    a[row2][col] = 1 - a[row2][col]\n                for col2 in range(m):\n                    a[row][col2] = 1 - a[row][col2]\n    for row in range(n):\n        for col in range(m):\n            if a[row][col]!= 0:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if len(n) < 1 or len(n) > 10:\n        return \"Error\"\n    else:\n        s = 0\n        for i in range(1,len(n)):\n            if int(n[i-1]) > int(n[i]):\n                s += 1\n        if s % 2 == 1:\n            return \"No\"\n        else:\n            return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.isdigit() and len(stdin) in range(1, 11) else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) >= 1 and len(stdin) <= 10 and is_digit(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"373\")\n    'Yes'\n    \"\"\"\n    return 'Yes' if stdin.isdigit() and int(stdin) % 2 == 0 else 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_palindromic(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 2 == 0 else \"No\"\n\nassert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\nprint(\"Test case passed\")"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(digit) for digit in stdin.strip()]\n    if any(digit == 0 for digit in digits):\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) == 10 else 'No'"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.strip().split())\n\n    s = list(map(int, stdin.strip().split()))\n\n    s_l = len(s)\n\n    s.sort()\n\n    if s[0] == 0:\n        return 0\n\n    a_min = 0\n    b_min = 0\n\n    for i in range(s_l):\n        a_min = max(a_min, a - s[i])\n        b_min = max(b_min, b - s[i])\n\n    if a_min == 0 and b_min == 0:\n        return 0\n\n    return s_l - max(a_min, b_min)\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_segments_passed_by_accumulator_or_battery(number_of_segments: int, battery_charge: int, accumulator_charge: int) -> int:\n        segments_passed_by_accumulator = 0\n        segments_passed_by_battery = 0\n\n        for i in range(1, number_of_segments + 1):\n            if i == 1:\n                if accumulator_charge == 0:\n                    continue\n                else:\n                    segments_passed_by_accumulator += 1\n            else:\n                if accumulator_charge == 0:\n                    segments_passed_by_accumulator += 1\n                else:\n                    if battery_charge > 0:\n                        segments_passed_by_battery += 1\n                        battery_charge -= 1\n        return segments_passed_by_accumulator + segments_passed_by_battery\n\n    destination, battery, accumulator = [int(x) for x in stdin.split()]\n    number_of_segments = destination - 1\n    battery_charge = battery\n    accumulator_charge = accumulator\n\n    # segments_passed_by_battery = 0\n    # segments_passed_by_accumulator = 0\n\n    # for segment_index in range(1, number_of_segments + 1):\n    #     if s[segment_index] == 1:\n    #         segments_passed_by_battery += 1\n    #         battery_charge -= 1\n    #     else:\n    #         segments_passed_by_accumulator += 1\n    #         accumulator_charge -= 1\n\n    # return segments_passed_by_accumulator + segments_passed_by_battery\n\n    return str(calculate_segments_passed_by_accumulator_or_battery(number_of_segments, battery_charge, accumulator_charge))\n\n\nassert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '8'\nassert solution(stdin) == '18'\nassert solution(stdin) == '18'\nassert solution(stdin) == '10'\nassert solution(stdin) == '8'\nassert solution(stdin) == '10'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '8'\nassert solution(stdin) == '18'\nassert solution(stdin) == '18'\nassert solution(stdin) == '22'\nassert solution(stdin) == '23'\nassert solution(stdin) == '22'\nassert solution(stdin) == '19'\nassert solution(stdin) == '23'\nassert solution(stdin) == '28'\nassert solution(stdin) == '28'\nassert solution(stdin) == '19'\nassert solution(stdin) == '22'\nassert solution(stdin) == '22'\nassert solution(stdin) == '20'\nassert solution(stdin) == '20'\nassert solution(stdin) == '18'\nassert solution(stdin) == '16'\nassert solution(stdin) == '18'\nassert solution(stdin) == '12'\nassert solution(stdin) == '18'\nassert solution(stdin) == '8'\nassert solution(stdin) == '12'\nassert solution(stdin) == '18'\nassert solution(stdin) == '6'\nassert solution(stdin) == '8'\nassert solution(stdin) == '18'\nassert solution(stdin) == '10'\nassert solution(stdin) == '12'\nassert solution(stdin) == '18'\nassert solution(stdin) == '14'\nassert solution(stdin) == '16'\nassert solution(stdin) == '18'\nassert solution(stdin) == '15'\nassert solution(stdin) == '16'\nassert solution(stdin) == '17'\nassert solution(stdin) == '18'\nassert solution(stdin) == '15'\nassert solution(stdin) == '16'\nassert solution(stdin) == '17'\nassert solution(stdin) == '18'\nassert solution(stdin) == '16'\nassert solution(stdin) == '16'\nassert solution(stdin) == '15'\nassert solution(stdin) == '16'\nassert solution(stdin) == '17'\nassert solution(stdin) == '18'\nassert solution(stdin) == '16'\nassert solution(stdin) == '16'\nassert solution(stdin) == '15'\nassert solution(stdin) == '16'\nassert solution(stdin) == '17'\nassert solution(stdin)"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return str(get_max_segments(n, b, a, s))\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n\n    segments = list(map(int, stdin.split()))\n\n    if n == 0:\n        return '0'\n\n    if a == 0:\n        return '-1'\n\n    if b == 0:\n        return '-1'\n\n    if n == 1:\n        return str(1)\n\n    if n == 2:\n        return str(2)\n\n    if n == 3:\n        return str(3)\n\n    if n == 4:\n        return str(4)\n\n    if n == 5:\n        return str(5)\n\n    if n == 6:\n        return str(6)\n\n    if n == 7:\n        return str(7)\n\n    if n == 8:\n        return str(8)\n\n    if n == 9:\n        return str(9)\n\n    if n == 10:\n        return str(10)\n\n    if n == 11:\n        return str(11)\n\n    if n == 12:\n        return str(12)\n\n    if n == 13:\n        return str(13)\n\n    if n == 14:\n        return str(14)\n\n    if n == 15:\n        return str(15)\n\n    if n == 16:\n        return str(16)\n\n    if n == 17:\n        return str(17)\n\n    if n == 18:\n        return str(18)\n\n    if n == 19:\n        return str(19)\n\n    if n == 20:\n        return str(20)\n\n    if n == 21:\n        return str(21)\n\n    if n == 22:\n        return str(22)\n\n    if n == 23:\n        return str(23)\n\n    if n == 24:\n        return str(24)\n\n    if n == 25:\n        return str(25)\n\n    if n == 26:\n        return str(26)\n\n    if n == 27:\n        return str(27)\n\n    if n == 28:\n        return str(28)\n\n    if n == 29:\n        return str(29)\n\n    if n == 30:\n        return str(30)\n\n    if n == 31:\n        return str(31)\n\n    if n == 32:\n        return str(32)\n\n    if n == 33:\n        return str(33)\n\n    if n == 34:\n        return str(34)\n\n    if n == 35:\n        return str(35)\n\n    if n == 36:\n        return str(36)\n\n    if n == 37:\n        return str(37)\n\n    if n == 38:\n        return str(38)\n\n    if n == 39:\n        return str(39)\n\n    if n == 40:\n        return str(40)\n\n    if n == 41:\n        return str(41)\n\n    if n == 42:\n        return str(42)\n\n    if n == 43:\n        return str(43)\n\n    if n == 44:\n        return str(44)\n\n    if n == 45:\n        return str(45)\n\n    if n == 46:\n        return str(46)\n\n    if n == 47:\n        return str(47)\n\n    if n == 48:\n        return str(48)\n\n    if n == 49:\n        return str(49)\n\n    if n == 50:\n        return str(50)\n\n    if n == 51:\n        return str(51)\n\n    if n == 52:\n        return str(52)\n\n    if n == 53:\n        return str(53)\n\n    if n == 54:\n        return str(54)\n\n    if n == 55:\n        return str(55)\n\n    if n == 56:\n        return str(56)\n\n    if n == 57:\n        return str(57)\n\n    if n == 58:\n        return str(58)\n\n    if n == 59:\n        return str(59)\n\n    if n == 60:\n        return str(60)\n\n    if n == 61:\n        return str(61)\n\n    if n == 62:\n        return str(62)\n\n    if n == 63:\n        return str(63)\n\n    if n == 64:\n        return str(64)\n\n    if n == 65:\n        return str(65)\n\n    if n == 66:\n        return str(66)\n\n    if n == 67:\n        return str(67)\n\n    if n == 68:\n        return str(68)\n\n    if n == 69:\n        return str(69)\n\n    if n == 70:\n        return str(70)\n\n    if n == 71:\n        return str(71)\n\n    if n == 72:\n        return str(72)\n\n    if n == 73:\n        return str(73)\n\n    if n == 74:\n        return str(74)\n\n    if n == 75:\n        return str(75)\n\n    if n == 76:\n        return str(76)\n\n    if n == 77:\n        return str(77)\n\n    if n == 78:\n        return str(78)\n\n    if n == 79:\n        return str(79)\n\n    if n == 80:\n        return str(80)\n\n    if n == 81:\n        return str(81)\n\n    if n == 82:\n        return str(82)\n\n    if n == 83:\n        return str(83)\n\n    if n == 84:\n        return str(84)\n\n    if n == 85:\n        return str(85)\n\n    if n == 86:\n        return str(86)\n\n    if n == 87:\n        return str(87)\n\n    if n == 88:\n        return str(88"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nm = int(input())\ns = list(map(int, input().split()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.readline().strip().split())\n    s = list(map(int, stdin.readline().strip().split()))\n    solutions = []\n    for i in range(n):\n        solutions.append([])\n    for i in range(n):\n        solutions[i].append((i, 0))\n        if s[i] == 1:\n            solutions[i].append((i, 1))\n        else:\n            solutions[i].append((i, 0))\n    while True:\n        for i in range(1, n):\n            if s[i] == 1:\n                solutions[i-1].append((i, 1))\n                solutions[i].append((i, 0))\n            else:\n                solutions[i-1].append((i, 0))\n                solutions[i].append((i, 1))\n        s = solutions[:]\n        if s == solutions[0]:\n            break\n    return str(len(solutions[0]))\n\n\nTest.assertEquals(solution('''3 2 1'''), '5', 'Example #1')\nTest.assertEquals(solution('''5 2 1'''), '5', 'Example #2')\nTest.assertEquals(solution('''6 2 1'''), '3', 'Example #3')\nTest.assertEquals(solution('''10 5 1'''), '3', 'Example #4')\nTest.assertEquals(solution('''10 5 1'''), '4', 'Example #5')\nTest.assertEquals(solution('''30 6 1'''), '2', 'Example #6')\nTest.assertEquals(solution('''30 6 1'''), '5', 'Example #7')\nTest.assertEquals(solution('''30 6 1'''), '7', 'Example #8')\nTest.assertEquals(solution('''30 6 1'''), '8', 'Example #9')\nTest.assertEquals(solution('''30 6 1'''), '9', 'Example #10')\n''')\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n    num_of_segments = 0\n    battery_charge = 0\n    accumulator_charge = 0\n    \n    for segment in segments:\n        if segment == 1:\n            battery_charge += 1\n            accumulator_charge += 1\n            if battery_charge > a:\n                battery_charge -= 1\n                accumulator_charge -= 1\n        else:\n            battery_charge -= 1\n            accumulator_charge -= 1\n        num_of_segments = max(num_of_segments, battery_charge, accumulator_charge)\n    \n    return num_of_segments\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.strip().split()]\n\n    s = [int(x) for x in stdin.strip().split()]\n    s = [0] + s + [0]\n\n    ans = 0\n    m = 0\n    for i in range(1, n + 1):\n        if s[i] == 1 and s[i - 1] == 0:\n            m += 1\n        if s[i] == 0 and s[i - 1] == 1:\n            ans = max(ans, m)\n            m = 0\n\n    return str(ans)\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, battery, accumulator = [int(x) for x in stdin.split(\" \")]\n    s = [int(x) for x in stdin.split(\" \")]\n    segments = []\n    for i in range(n):\n        if s[i] == 1:\n            segments.append(i)\n    segments.sort()\n\n    path = []\n    current_point = 0\n    used_battery = 0\n    used_accumulator = 0\n    for i in range(n):\n        if current_point == segments[i]:\n            current_point += 1\n        if (used_battery == battery and used_accumulator == accumulator) or current_point > segments[i]:\n            used_battery = 0\n            used_accumulator = 0\n            path.append(current_point)\n            current_point += 1\n        if used_battery < battery:\n            path.append(current_point)\n            used_battery += 1\n        if used_accumulator < accumulator:\n            path.append(current_point)\n            used_accumulator += 1\n    return str(len(path))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin.split('-')\n    sign = 0\n    if '+' in expr[0]:\n        sign = 1\n    if '+' in expr[1]:\n        sign = -1\n    res = eval(''.join(expr))\n    if sign == 1:\n        res *= -1\n    return str(res)\n\nprint(solution(input()))\n\n\"\"\"\n\nexpr = input()\n\nsign = 0\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('-')\n    a = int(data[0])\n    b = int(data[1])\n    c = int(data[2])\n    return a + b - c"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin.split(\"-\")\n    total = 0\n    for e in expr:\n        total += eval(e)\n    return str(total)\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert_equal(solution(stdin), stdout)\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    expr = stdin.replace(' ', '')\n    if len(expr) == 0:\n        return result\n    stack = []\n    for char in expr:\n        if char in ['+', '-']:\n            b = stack.pop()\n            a = stack.pop()\n            if char == '-':\n                result = a - b\n            else:\n                result = a + b\n            stack.append(result)\n        else:\n            stack.append(int(char))\n    return result\n\n\nassert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import itertools\n\n    expression = re.findall(r'\\d+|\\+|\\-|\\*', stdin)\n    return str(eval(''.join(expression)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin.strip()))"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    man_costume = [int(x) for x in stdin.split()]\n    woman_costume = [int(x) for x in stdin.split()]\n\n    man_costume_set = set(man_costume)\n    woman_costume_set = set(woman_costume)\n\n    if len(man_costume_set)!= len(woman_costume_set):\n        print(\"NO\")\n    elif len(man_costume_set)!= k:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            print(man_costume[i], woman_costume[i])"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a function that reads a line of input from stdin and determines whether the choices of colors for dancers are valid.\n\n    Note:\n    This is a functional variant of the question: https://www.codewars.com/kata/5514ef0c21a206721e0000f3\n\n    >>> solution('3 4')\n    'YES'\n    >>> solution('2 4')\n    'YES'\n    >>> solution('15 4')\n    'NO'\n    \"\"\"\n\n    return ''\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= 10 ** 5:\n        return \"NO\"\n    for _ in range(n):\n        m, v = map(int, stdin.split())\n        if m == v:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number, colors = map(int, stdin.split())\n\n    if colors > number * (number + 1) // 2:\n        return \"NO\"\n\n    colors_dict = {}\n    for _ in range(number):\n        man_costume_color, woman_costume_color = map(int, stdin.split())\n\n        if (man_costume_color in colors_dict and\n                colors_dict[man_costume_color]!= woman_costume_color) or \\\n                (woman_costume_color in colors_dict and\n                 colors_dict[woman_costume_color]!= man_costume_color):\n            return \"NO\"\n\n        colors_dict[man_costume_color] = woman_costume_color\n        colors_dict[woman_costume_color] = man_costume_color\n\n    if len(set(colors_dict.values())) == colors:\n        return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 4:\n        return \"NO\"\n    if n == k:\n        return \"YES\"\n    for i in range(1, n):\n        if k < 4:\n            return \"NO\"\n        if i == 1:\n            if k < 4:\n                return \"NO\"\n            if k == 4:\n                return \"YES\"\n        else:\n            if k < 4:\n                return \"NO\"\n            if k == 4:\n                return \"YES\"\n        if (k - 1) % 4 == 0:\n            k = k - 1\n        else:\n            k = k - 2\n    return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    cnt = n * (n - 1) // 2\n\n    d = {i: set() for i in range(1, k + 1)}\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        d[a].add(b)\n        d[b].add(a)\n\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if i!= j:\n                if len(d[i]) > 1 and len(d[j]) > 1:\n                    cnt -= len(d[i] & d[j])\n    return 'NO' if cnt > 0 else 'YES'"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    pairs = {(1, 2), (2, 3), (3, 2), (1, 2)}\n    def choose_color(x, y):\n        if x == y:\n            return False\n        return (x, y) in pairs\n    def is_valid(x, y):\n        return not choose_color(x, y)\n    ans = []\n    while pairs:\n        pair = pairs.pop()\n        m = pair[0]\n        w = pair[1]\n        b, g = m, w\n        ans.append(m)\n        ans.append(w)\n        while b!= g:\n            b, g = randint(1, k), randint(1, k)\n            if not is_valid(b, g):\n                continue\n            else:\n                pairs.add((b, g))\n        ans.append(b)\n        ans.append(g)\n        while w!= b:\n            w, b = randint(1, k), randint(1, k)\n            if not is_valid(w, b):\n                continue\n            else:\n                pairs.add((w, b))\n        ans.append(w)\n        ans.append(b)\n    if len(ans) == n * 2 * k * 2:\n        return 'YES\\n' +''.join(str(x) for x in ans)\n    else:\n        return 'NO\\n'\n\nsolution(stdin.read())\n'''\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution.\"\"\"\n    n, k = [int(i) for i in stdin.split()]\n    if n < 2 or k < 2 or 2 * k > 10 ** 5:\n        return \"NO\"\n    ans = \"YES\"\n    for _ in range(n):\n        man, woman = [int(i) for i in stdin.split()]\n        if man == woman:\n            ans = \"NO\"\n        if man - woman < 0:\n            man, woman = woman, man\n        if man < 2:\n            man, woman = 2, man\n        if (man - woman) % (k - 1)!= 0:\n            ans = \"NO\"\n    if ans == \"YES\":\n        for i in range(1, k + 1):\n            stdout.write(\"%d %d\\n\" % (i, i))\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2:\n        return 'NO'\n    if n == 2:\n        return 'YES' if k == 2 else 'NO'\n    if n % 2 == 1:\n        return 'NO'\n    if k < 3:\n        return 'NO'\n    result = ''\n    for i in range(n):\n        result += f'{i+1}'+''.join(str(x) for x in [int(x) for x in stdin.split()[i*2+1:i*2+3]]) + '\\n'\n    return result\n\nn, k = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [stdin for i in range(n)]\n    arr = ''.join(arr)\n    arr = arr.split('1')\n    arr = list(map(lambda x: x.replace('0', '-').replace('1', '+'), arr))\n    arr = list(map(lambda x: x.replace('2', '-').replace('3', '+'), arr))\n    arr = [arr[i] for i in range(0, len(arr), 2)]\n    arr = [''.join(arr[i:i + 2]) for i in range(0, len(arr), 2)]\n    arr = list(map(lambda x: x.replace('-', '0').replace('+', '1'), arr))\n    arr = [int(x, 2) for x in arr]\n    return 'YES' if len(set(arr)) == k and len(arr) == n and arr[0]!= 0 and arr[1]!= 0 and arr[2]!= 0 else 'NO'\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    dp = [float(\"-inf\")] * (x + 1)\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(i + k, i, -1):\n            if dp[j] >= 0:\n                dp[j] = max(dp[j], dp[j - 1] + a[i])\n\n    return \"-\" if dp[x] < 0 else str(dp[x])\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k, x = map(int, lines[0].split())\n    a = map(int, lines[1].split())\n    max_sum = 0\n    a.sort(reverse=True)\n\n    for i in range(k, n):\n        if max_sum + a[i] > x:\n            max_sum += a[i - k]\n        else:\n            return max_sum\n\n    return -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n < k or x < n:\n        return -1\n    result = 0\n    for i in range(n - x + 1):\n        result = max(result, sum(a[i:i + x]))\n    return result"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n - k + 1):\n        current_sum = sum(a[i:i + k])\n        if current_sum <= x:\n            result = max(result, current_sum)\n    if result < x:\n        return -1\n    return result"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.strip().split(\" \")]\n    a = [int(x) for x in stdin.strip().split(\" \")]\n\n    def can_repost(a: List[int]) -> bool:\n        # sum_of_reposts = sum(a)\n        # if sum_of_reposts % k!= 0:\n        #     return False\n\n        if len(a) < k:\n            return False\n\n        sum_of_reposts = 0\n        for i in range(0, len(a) - k + 1):\n            if i == 0:\n                sum_of_reposts += sum(a[i: i + k])\n            else:\n                sum_of_reposts += sum(a[i: i + k]) - min(a[i: i + k])\n        return sum_of_reposts >= x\n\n    a = sorted(a, reverse=True)\n\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + ((right - left) // 2)\n        if can_repost(a[mid:]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    if can_repost(a[:left]):\n        return sum(a[:left])\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    k, x, n = [int(x) for x in stdin.split()]\n    beauties = [int(x) for x in stdin.split()]\n    if k * x > n:\n        return '-1'\n\n    result = 0\n    beauties.sort()\n    for i in range(n - k + 1):\n        result += beauties[i]\n        if i + k < n:\n            result += beauties[i + k]\n\n    return str(result)\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n\n    if k > x:\n        return '-1'\n\n    prev = 0\n    result = 0\n    for i in range(n - k + 1):\n        if sum(lst[i:i + k]) > prev:\n            result += sum(lst[i:i + k])\n            prev = sum(lst[i:i + k])\n    return str(result)\n\nassert(solution('''5 2 3''') == '18')\nassert(solution('''6 1 5''') == '-1')\nassert(solution('''4 3 1''') == '100')\nassert(solution('''10 30 30 70 10 10''') == '300')"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, n = [int(x) for x in stdin.split()]\n    beauty = [int(x) for x in stdin.split()]\n\n    sum_ = 0\n    for i in range(n):\n        sum_ += beauty[i]\n        if sum_ >= x:\n            return sum_\n\n    return -1\n\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '18')\nassert(solution(stdin) == '100')\nassert(solution(stdin) == '-1')\nassert(solution"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nm, k = [int(x) for x in stdin.split()]\ns = stdin.strip('0')\n\nresult = 0\n\nfor i in range(m):\n    if s[i] == '1':\n        result += i\n    else:\n        result += k\n\nprint(result)\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    s = stdin.rstrip()\n    cost = n\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            cost += k\n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    s = stdin.rstrip('\\n')\n    \n    if k < 1 or k > 2 * 10 ** 5:\n        raise ValueError('Wrong k')\n    \n    total = 0\n    for i in range(n):\n        if s[i] == '1':\n            total += i + k\n        else:\n            total += i\n    \n    return str(total)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.split()[1]\n    r = 0\n    for i, c in enumerate(s):\n        if c == '1':\n            r += k\n        else:\n            r += 1\n    return str(r)\n\n\n>>> solution('''5 2''')\n'3'\n>>> solution('''6 1''')\n'21'\n>>> solution('''4 1''')\n'4'\n>>> solution('''12 6''')\n'15'\n>>> solution('''000010000100''')\n'15'\n>>> solution('''1234''')\n'15'\n>>> solution('''00100''')\n'3'\n>>> solution
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i + k\n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    s = stdin.split('\\n')[1]\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    nums = [i for i, x in enumerate(s) if x == '1']\n    routers = []\n    if n > 2 * 10 ** 5:\n        return 'impossible'\n    if not len(nums):\n        return 0\n    if len(nums) == 1:\n        return 1\n    if len(nums) == 2:\n        if n - nums[0] < k:\n            return nums[0] + 1\n        else:\n            return n\n    if len(nums) == 3:\n        for i in range(nums[0], nums[0] + k + 1):\n            if i in nums:\n                routers.append(i)\n            else:\n                return i\n        return min(routers) + 1\n    if len(nums) > 3:\n        for i in range(nums[0], nums[0] + k):\n            if i in nums:\n                routers.append(i)\n        for i in range(nums[-1], nums[-1] - k - 1, -1):\n            if i in nums:\n                routers.append(i)\n        return min(routers) + 1\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.replace('0','').replace('1','')\n    cost = 0\n    for i in range(n):\n        if s[i] =='':\n            cost += i + k - 1\n        elif i >= k:\n            cost += i + k\n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if n <= 2:\n        return '0'\n    total_cost = 0\n    for i in range(n):\n        if stdin[i] == '1':\n            total_cost += i\n    return str(total_cost)\n\nassert(solution('') == '0')\nassert(solution('00100') == '3')\nassert(solution('00011') == '4')\nassert(solution('000000') == '1')\nassert(solution('001000') == '2')\nassert(solution('00000001') == '2')\nassert(solution('11111111') == '10')\nassert(solution('11010111') == '9')\nassert(solution('111111111') == '8')\nassert(solution('0000011111') == '7')\nassert(solution('0001000111') == '6')\nassert(solution('1111111111') == '5')\nassert(solution('1101010111') == '4')\nassert(solution('11111111111') == '3')\nassert(solution('000000011111') == '2')\nassert(solution('1111111110000') == '1')\nassert(solution('1111111111111') == '0')\nassert(solution('1110000000111') == '-1')\nassert(solution('110101011010') == '-2')\nassert(solution('1111111111111') == '-3')\nassert(solution('010010101111') == '-4')\nassert(solution('001001000011') == '-5')\nassert(solution('010000011010') == '-6')\nassert(solution('1111111111111') == '-7')\nassert(solution('010111010111') == '-8')\nassert(solution('110101110101') == '-9')\nassert(solution('1101011101011') == '-10')\nassert(solution('11010111010101') == '-11')\nassert(solution('110101110101010') == '-12')\nassert(solution('1101011101010101') == '-13')\nassert(solution('11010111010101010') == '-14')\nassert(solution('110101110101010101') == '-15')\nassert(solution('1101011101010101010') == '-16')\nassert(solution('11010111010101010101') == '-17')\nassert(solution('110101110101010101010') == '-18')\nassert(solution('1101011101010101010101') == '-19')\nassert(solution('110101110101010101010010') == '-20')\nassert(solution('110101110101010101010102010') == '-21')\nassert(solution('11010111010101010101010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010201020102010"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input consists of two lines: the first line contains two integers: the number of rooms and the range of a router.\n    The second line contains a string of length n, consisting only of zeros and ones.\n    The function prints the minimum total cost of connecting all rooms to the Internet.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    t: str = stdin.strip()\n\n    for _ in range(2):\n        if s == t:\n            return 'Yes'\n\n        s = s.replace(min(s), max(s))\n        t = t.replace(min(t), max(t))\n\n    return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == stdin[::-1]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.replace(\"a\", \"z\").replace(\"l\", \"p\") == stdin else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin[::-1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin) == stdin[::-1]"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s, t = stdin.split()\n    return \"Yes\" if s == t[::-1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin.readline().strip())\n    books = stdin.readline().strip().split()\n    books = list(map(int, books))\n    \n    A = list(stdin.readline().strip().split())\n    A = list(map(int, A))\n    \n    books.sort()\n    A.sort()\n    \n    buy = books[0] * A[0]\n    for i in range(1, len(A)):\n        buy += min(A[i], books[i] - books[0]) * books[0]\n    \n    return str(buy)\n\n\nassert(solution(stdin).strip() == '7')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '60')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin) == '3')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n\nassert(solution(stdin"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = [int(x) for x in stdin.readline().split()]\n    books = [int(x) for x in stdin.readline().split()]\n    prices = [int(x) for x in stdin.readline().split()]\n\n    # sort books and prices\n    books.sort()\n    prices.sort()\n\n    # book price\n    prices = [x for _, x in sorted(zip(books, prices))]\n\n    # x: money spent\n    x = 0\n    # n: num of books\n    n = len(books)\n\n    for i in range(n):\n        money = prices[i] * (i + 1) - x\n        x += money\n\n    return str(x)\n\nTakahashi, who is a novice in competitive programming, wants to learn M algorithms.\nInitially, his understanding level of each of the M algorithms is 0.\nTakahashi is visiting a bookstore, where he finds N books on algorithms.\nThe i-th book (1\\leq i\\leq N) is sold for C_i yen (the currency of Japan). If he buys and reads it, his understanding level of the j-th algorithm will increase by A_{i,j} for each j (1\\leq j\\leq M).\nThere is no other way to increase the understanding levels of the algorithms.\nTakahashi's objective is to make his understanding levels of all the M algorithms X or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    M,N = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    S = [0]*M\n    for i in range(N):\n        for j in range(M):\n            S[j] += A[i] if S[j] < S[j] + A[i] else S[j] + A[i]\n    return \"Yes\" if max(S) >= sum(A) else \"No\"\n    \n    \n    "
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    book_cnt, book_price, reader_cnt = [int(x) for x in stdin.split()]\n    algorithm_cnt, algorithm_price = [int(x) for x in stdin.split()]\n    reader_cnt -= 1\n    algorithm_price_list = []\n    book_price_list = []\n    for _ in range(book_cnt):\n        algorithm_cnt_list = [int(x) for x in stdin.split()][:algorithm_cnt]\n        algorithm_price_list.append(algorithm_cnt_list)\n    for _ in range(book_cnt):\n        book_price_list.append(int(stdin.split()[-1]))\n\n    # \u8cb7\u3044\u7269\u306e\u91d1\u984d\n    price_sum = 0\n\n    # \u8cb7\u3063\u305f\u8cc7\u7523\u306e\u7dcf\u548c\n    price_sum_algorithm = [0] * algorithm_cnt\n\n    # \u8cb7\u3044\u7269\u306e\u4fa1\u683c\n    book_price_list_without_algorithm = book_price_list[:algorithm_cnt]\n    # \u521d\u671f\u5316\n    for i in range(algorithm_cnt):\n        price_sum_algorithm[i] += book_price_list_without_algorithm[i]\n\n    # \u3059\u3079\u3066\u306e\u7ae0\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7dcf\u548c\n    price_sum_book = sum(book_price_list)\n    price_sum_book_without_algorithm = price_sum_book - sum(book_price_list_without_algorithm)\n\n    # \u4fa1\u683c\u306e\u548c\n    price_sum += price_sum_book\n\n    # \u8cb7\u3044\u7269\u306b\u5bfe\u3057\u3066\u4fa1\u683c\u306e\u548c\n    price_sum_algorithm_without_book = 0\n    for i in range(algorithm_cnt):\n        price_sum_algorithm_without_book += price_sum_algorithm[i]\n\n    # \u7ae0\u6570\u306e\u6570\n    algorithm_cnt_max = max(algorithm_cnt_list)\n\n    # \u7ae0\u6570\u306e\u548c\n    algorithm_cnt_sum = 0\n    for i in range(algorithm_cnt):\n        algorithm_cnt_sum += algorithm_cnt_list[i]\n\n    # \u6700\u5c0f\u984d\n    min_price = price_sum_book_without_algorithm + price_sum_algorithm_without_book\n\n    # \u7ae0\u6570\u304c\u975e\u5e38\u306b\u5927\u304d\u3044\u306a\u3089\u8cb7\u3044\u7269\u3067\u3082\u4fa1\u683c\u306e\u548c\u304c\u5927\u304d\u304f\u306a\u308b\n    if algorithm_cnt_sum > algorithm_cnt_max:\n        return str(min_price)\n\n    # \u5168\u7ae0\u6570\u304a\u3088\u3073\u6700\u5927\u306e\u6570\u3092\u78ba\u8a8d\u3059\u308b\n    if algorithm_cnt_sum == algorithm_cnt_max:\n        price_sum_algorithm_without_book_max = 0\n        for i in range(algorithm_cnt):\n            price_sum_algorithm_without_book_max += price_sum_algorithm[i]\n        price_sum_book_without_algorithm_max = price_sum_book_without_algorithm\n        if price_sum_algorithm_without_book_max < price_sum_book_without_algorithm_max:\n            min_price = price_sum_algorithm_without_book\n        else:\n            min_price = price_sum_book_without_algorithm\n\n    return str(min_price)\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, n = tuple(map(int, stdin.split()))\n    books = [tuple(map(int, stdin.split())) for _ in range(n)]\n\n    prices = []\n    for _, c, v in books:\n        prices.append(c*v)\n\n    dp = [0] + [float(\"inf\") for _ in range(m)]\n    for c, v in books:\n        for i, price in enumerate(reversed(dp), start=1):\n            if price > dp[i]:\n                dp[i] = price\n            if price + c*v <= dp[i]:\n                break\n    return f\"{sum(prices):.0f}\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    books = [int(stdin) for _ in range(N)]\n    lo, hi = max(books), sum(books)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if can_pay(mid, books, M, K):\n            hi = mid\n        else:\n            lo = mid + 1\n    return \"${:.2f}\".format(lo)\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input to a base score and a perfect bonus\n    base_score, perfect_bonus = stdin.split()\n    # Split the perfect bonus to a list of integers\n    perfect_bonus = list(map(int, perfect_bonus.split('+')))\n    # Split the base score to a list of integers\n    base_score = list(map(int, base_score.split('+')))\n    # Generate the total score\n    total_score = int(base_score[0]) + sum(perfect_bonus)\n    # Find the minimum number of problems\n    min_problems = total_score // G\n    # Return the min_problems\n    return str(min_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input_line(input_line: str) -> tuple[int, int, int]:\n        _, _, G = input_line.split()\n        return int(G), int(G / 100) + 1, int(G / 100)\n\n    D, G, = map(int, stdin.split())\n\n    # base_score = sum(c_i * i for i in range(1, D + 1))\n    # best_score = base_score + 100 * D\n\n    # if best_score >= G:\n    #     return D\n\n    # best_p_i = None\n    # for i in range(1, D + 1):\n    #     if best_score >= G - i * 100:\n    #         best_p_i = i\n    #         break\n\n    # return best_p_i\n    # return D\n    return 0\n\n\nassert(solution(input()) == 2)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert(solution(input()) == 3)\nassert"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    scores = [score * i for i, score in enumerate(scores, 1)]\n    print(len([1 for i, score in enumerate(scores, 1) if score == 100 * i]))"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(result)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    values = stdin.split()\n    N = int(values[0])\n    G = int(values[1])\n    \n    for i in range(N):\n        c, p = map(int, stdin.readline().split())\n        if p == 100:\n            G -= c\n    \n    return str(N - G // 100)\n\nassert(solution('''2 700\n3 500\n5 800''') == '3')\nassert(solution('''2 700\n4 500\n5 800''') == '4')\nassert(solution('''2 700\n5 800\n7 900''') == '0')\nassert(solution('''5 4\n1 1\n3 4\n5 2\n7 1''') == '4')\nassert(solution('''5 4\n1 4\n3 4\n5 4\n7 5''') == '0')\nassert(solution('''5 4\n1 4\n3 4\n5 4\n7 1\n5 8\n9 1''') == '3')\nassert(solution('''5 4\n1 4\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2''') == '2')\nassert(solution('''5 4\n1 4\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5 4\n7 5\n5 8\n9 1\n1 2\n2 2\n1 3\n3 4\n5"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Compute the minimum number of problems that need to be solved in order to have a total score of G or more points.\n    \n    >>> solution(\"2 700\\n3 500\\n5 800\")\n    '3'\n    >>> solution(\"3 100\\n1 1\\n2 1\\n4 1\\n6 1\")\n    '3'\n    >>> solution(\"1 100\")\n    '1'\n    '''\n    D, G = map(int, stdin.split())\n    _, p, _ = stdin.split()\n    p = int(p)\n    \n    total_score = 0\n    perfect_bonus = 0\n    perfect_bonus_points = 0\n    perfect_bonus_points += D * G\n    \n    for _ in range(p):\n        s, c = map(int, stdin.split())\n        total_score += s * c\n        perfect_bonus += s * G\n    \n    perfect_bonus_points -= total_score\n    if perfect_bonus_points >= 0:\n        return str(perfect_bonus_points // G)\n    else:\n        return '0'"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    assert n == len(weights)\n    candies = [0] * (n + 1)\n    weights.sort()\n    for i in range(n):\n        candies[i + 1] = candies[i] + weights[i]\n    assert candies[-1] == sum(weights)\n    good_candies = 0\n    for i in range(1, n, 2):\n        if candies[i]!= candies[i + 1]:\n            good_candies += 1\n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    weights = [int(stdin.readline().strip()) for _ in range(int(n))]\n\n    even_candies = 0\n    odd_candies = 0\n\n    for i in range(int(n)):\n        if i % 2 == 0:\n            if weights[i] % 2 == 0:\n                even_candies += weights[i]\n            else:\n                odd_candies += weights[i]\n        else:\n            if weights[i] % 2 == 0:\n                odd_candies += weights[i]\n            else:\n                even_candies += weights[i]\n\n    return str(even_candies - odd_candies)\n\nassert(solution(\"\"\"4\n1\n3\n1\n2\n2\n3\n2\n1\n2\n2\n1\n3\n2\n1\n2\n1\n2\n2\n1\n1\n2\n2\n2\n2\n1\n1\n1\n1\n2\n2\n2\n2\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(x) for x in stdin.split(' ')]\n    good_candies = 0\n    for i in range(1, n-1):\n        if weights[i] == weights[i+1]:\n            good_candies += 1\n    print(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    good = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            good.append(i)\n\n    return good.__len__()\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    s = 0\n    for i in range(1, n):\n        s += a[i]\n\n    t = sum(a)\n    if (t - s) % 2 == 0:\n        return str(n - 1)\n    else:\n        return str(n)\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    candy_weight = [int(x) for x in stdin.readline().strip().split()]\n    candy_weight.sort()\n    i = 0\n    good_candies = 0\n    while i < len(candy_weight) - 1:\n        j = i + 1\n        while j < len(candy_weight):\n            if candy_weight[i] + candy_weight[j] == candy_weight[j]:\n                good_candies += 1\n                j += 1\n            else:\n                break\n        i = j\n    return good_candies"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Prints the number of good candies.\"\"\"\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n\n    # Find the first non-zero element and the second non-zero element\n    index1, index2 = 0, 0\n    for i in range(n):\n        if weights[i] > 0:\n            index1 = i\n            break\n\n    for i in range(n):\n        if weights[n - 1 - i] > 0:\n            index2 = n - 1 - i\n            break\n\n    ans = 0\n    for i in range(index1, index2 + 1):\n        if weights[i] % 2 == 0:\n            ans += 1\n\n    return str(ans)\n"
    }
]