[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = [set() for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].add(b - 1)\n        graph[b - 1].add(a - 1)\n\n    # Set p[i] to the max of (1 - maxPathInGraph(i))\n    p = [None] * n\n\n    def maxPathInGraph(i: int) -> int:\n        if p[i] is not None:\n            return p[i]\n\n        # The number of edges is the max between the number of simple paths\n        # between two vertices, or between two vertices which are neighbours\n        # and the number of simple paths between them\n        res = 1\n        for neighbour in graph[i]:\n            res = max(res, max(maxPathInGraph(neighbour), len(graph[neighbour]) - 1) + 1)\n        p[i] = res\n        return res\n\n    res = max(maxPathInGraph(i) for i in range(n))\n    a, b, c = [int(stdin) - 1 for _ in range(3)]\n    return str(res) + '\\n' + str(a + 1) +'' + str(b + 1) +'' + str(c + 1)\n\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\n3 9 10\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n3 9\\n3 10\") == \"10\\"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Task description\n    You are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.\n\n    Your task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.\n\n    The simple path is the path that visits each vertex at most once.\n\n    Input\n    The first line contains one integer number $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree. \n    \n    Next $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \\le a_i$, $b_i \\le n$, $a_i \\ne b_i$). It is guaranteed that given graph is a tree.\n\n    Output\n    In the first line print one integer $res$ \u2014 the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.\n    \n    In the second line print three integers $a, b, c$ such that $1 \\le a, b, c \\le n$ and $a \\ne, b \\ne c, a \\ne c, a \\ne b$ and $a \\ne c$.\n    \n    If there are several answers, you can print any.\n    \n    Example\n    Input\n    8\n    1 2\n    2 3\n    3 4\n    4 5\n    4 6\n    3 7\n    3 8\n    \n    Output\n    5\n    1 8 6\n    \n    Explanation\n    If you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$ and the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.\n    '''\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    tree = list()\n    tree = stdin.strip().split('\\n')\n    n = int(tree[0])\n    tree = tree[1:]\n    tree = [[int(e) for e in line.split()] for line in tree]\n    tree.sort()\n    count = 0\n    res = 0\n    ans = []\n    for i in range(len(tree)):\n        for j in range(i + 1, len(tree)):\n            for k in range(j + 1, len(tree)):\n                if tree[i][0]!= tree[j][0] and tree[i][0]!= tree[k][0] and tree[j][0]!= tree[k][0]:\n                    if tree[i][1]!= tree[j][1] and tree[i][1]!= tree[k][1] and tree[j][1]!= tree[k][1]:\n                        res = max(res, len(tree[i]) + len(tree[j]) + len(tree[k]) - 3)\n                        if res == len(tree[i]) + len(tree[j]) + len(tree[k]) - 3:\n                            ans = [tree[i][0], tree[j][0], tree[k][0]]\n    return str(res) + '\\n' +''.join([str(e) for e in ans])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for i in range(n - 1):\n        edges.append(tuple(map(int, stdin.readline().strip().split())))\n    result = 0\n    for a, b in edges:\n        if find(a, b) > result:\n            result = find(a, b)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    v = [set() for _ in range(n + 1)]\n    for i in range(1, n):\n        x, y = stdin.split()\n        x = int(x)\n        y = int(y)\n        v[x].add(i)\n        v[y].add(i)\n    edges = 0\n    for i in range(1, n):\n        for j in v[i]:\n            for k in v[j]:\n                if k!= i:\n                    edges = max(edges, len(v[i] | v[j] | v[k]))\n    res = 0\n    for i in range(1, n):\n        if i not in v[a] and i not in v[b]:\n            res += edges\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... 4 6\n   ... 3 7\n   ... 3 8\n   ... ''')\n    '5'\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... ''')\n    '1 8 6'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    tree = {}\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        if a not in tree:\n            tree[a] = set()\n        if b not in tree:\n            tree[b] = set()\n        tree[a].add(b)\n        tree[b].add(a)\n    res = 0\n    for a in tree:\n        for b in tree:\n            if a!= b and b not in tree[a]:\n                res = max(res, len(tree[a]) + len(tree[b]) - 3)\n    return str(res)"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_longest_path(start: int, visited: Set[int]) -> int:\n        if start not in visited:\n            return 0\n\n        max_length = 0\n        visited.remove(start)\n        for next_vertex in graph[start]:\n            if next_vertex not in visited:\n                max_length = max(max_length, 1 + find_longest_path(next_vertex, visited))\n\n        visited.add(start)\n\n        return max_length\n\n    n = int(stdin.readline())\n    graph = {}\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        if a in graph:\n            graph[a].append(b)\n        else:\n            graph[a] = [b]\n\n        if b in graph:\n            graph[b].append(a)\n        else:\n            graph[b] = [a]\n\n    max_path = 0\n    for vertex in graph:\n        visited = set()\n        max_path = max(max_path, find_longest_path(vertex, visited))\n\n    return str(max_path)\n\n\nassert (\n    solution(\n        \"\"\"\n        8\n        1 2\n        2 3\n        3 4\n        4 5\n        4 6\n        3 7\n        3 8\n        \"\"\"\n    )\n    == \"5\"\n)\n\n\nassert (\n    solution(\n        \"\"\"\n        10\n        1 2\n        2 3\n        3 4\n        4 5\n        4 6\n        4 7\n        4 8\n        4 9\n        4 10\n        5 6\n        5 7\n        5 8\n        5 9\n        \"\"\"\n    )\n    == \"6\"\n)\n\n\nassert (\n    solution(\n        \"\"\"\n        11\n        1 2\n        2 3\n        3 4\n        4 5\n        4 6\n        4 7\n        4 8\n        4 9\n        4 10\n        4 11\n        5 6\n        5 7\n        5 8\n        5 9\n        \"\"\"\n    )\n    == \"7\"\n)\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    \n    \n    def dfs(tree, x, visit):\n        visit[x] = True\n        for i in tree[x]:\n            if not visit[i]:\n                dfs(tree, i, visit)\n    \n    \n    visit = [False] * n\n    res = 0\n    for i in range(n):\n        if not visit[i]:\n            dfs(tree, i, visit)\n            res += 1\n    \n    return res\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors_x = stdin.readline().split()\n    divisors_y = stdin.readline().split()\n    return \" \".join(divisors_x[:n]) + \" \" + \" \".join(divisors_y[n:])"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = set()\n    y = set()\n    for i in stdin.readline().split():\n        x.add(int(i))\n    for i in stdin.readline().split():\n        y.add(int(i))\n    x = sorted(list(x))\n    y = sorted(list(y))\n    # https://stackoverflow.com/a/8977911\n    # https://en.wikipedia.org/wiki/Partition\n    for x_div in x:\n        if x_div in y:\n            y.remove(x_div)\n    x, y = list(x), list(y)\n    for i in range(len(x)):\n        if x[i] not in y:\n            y.insert(i, x[i])\n    return''.join([str(x) for x in y])"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.read().strip()\n\nassert solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8'\n'''\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l1, l2 = map(int, stdin.split())\n    divisors1 = [0]*(n+1)\n    divisors2 = [0]*(n+1)\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == l1*l2:\n                divisors1[i] += 1\n                divisors2[j] += 1\n    for i in range(1, n+1):\n        if divisors1[i] == 1:\n            print(l1*l2 // i)\n            break\n    for i in range(1, n+1):\n        if divisors2[i] == 1:\n            print(l1*l2 // i)\n            break\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''    \n    We are given two positive integers $x$ and $y$. There are $n$ divisors of $x$ and $m$ divisors of $y$. We need to find two integers $x$ and $y$ that would produce the same list of divisors in the same order.\n    \n    Example\n    \n    \n    \n    \n    \n    Input\n    \n    10\n    10 2 8 1 2 4 1 20 4 5\n    \n    \n    \n    \n    Output\n    \n    20 8\n    \n    \n    \n    \n    Examples\n    \n    \n    \n    \n    \n    Input\n    \n    5\n    5 2 3 1\n    \n    \n    \n    \n    Output\n    \n    5 1\n    \n    \n    \n    \n    \n    Input\n    \n    10\n    10 2 8 1 2 4 1 20 4 5\n    \n    \n    \n    \n    Output\n    \n    20 8\n    \n    \n    \n    \n    \n    '''\n    \n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    arr2 = [int(x) for x in stdin.readline().split()]\n    \n    def get_divisors(num, arr):\n        divs = set()\n        for i in arr:\n            if i % num == 0:\n                divs.add(i)\n        return divs\n    \n    def get_divisors2(num, arr):\n        divs = set()\n        for i in arr:\n            if i % num == 0:\n                divs.add(i)\n            if i % num == num / 2:\n                divs.add(i)\n        return divs\n    \n    res = set()\n    \n    for i in arr:\n        for j in arr2:\n            divs = get_divisors(i, arr) | get_divisors2(j, arr2)\n            if len(divs) == n:\n                res.add((i, j))\n    \n    res_arr = sorted(list(res))\n    \n    for i in range(len(res_arr)):\n        res_arr[i] = res_arr[i][0] * res_arr[i][1]\n    \n    return''.join(str(x) for x in res_arr)\n    \nprint(solution(input()))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x, y = map(int, stdin.readline().strip().split())\n    divisors = stdin.readline().strip().split()\n    divisors_x = [int(divisor) for divisor in divisors if int(divisor) % x == 0]\n    divisors_y = [int(divisor) for divisor in divisors if int(divisor) % y == 0]\n    divisors_x = sorted(set(divisors_x))\n    divisors_y = sorted(set(divisors_y))\n    permutation_of_divisors = sorted(divisors_x + divisors_y)\n    return f'{x} {y}'\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    divisors_dict = {divisor: 0 for divisor in divisors}\n    for divisor in divisors:\n        divisors_dict[divisor] += 1\n    for divisor in divisors:\n        if divisors_dict[divisor] > 1:\n            divisors_dict[divisor] -= 1\n            divisors_dict[divisor * divisor] += 1\n    x, y = min(divisors_dict.keys()), max(divisors_dict.keys())\n    while x < y:\n        if divisors_dict[x] == divisors_dict[y]:\n            x += 1\n        else:\n            break\n    return f\"{x}{y}\"\n\n\nimport sys\nfrom io import StringIO\n\ntest_input1 = \"\"\"\n10\n10 2 8 1 2 4 1 20 4 5\n\"\"\"\ntest_input2 = \"\"\"\n10\n10 4 1 1 2 2 1 2 1 1\n\"\"\"\ntest_input3 = \"\"\"\n5\n1 1 1 1 1\n\"\"\"\n\nsys.stdin = StringIO(test_input1)\nx = solution(sys.stdin)\nprint(x)\nsys.stdin = StringIO(test_input2)\nx = solution(sys.stdin)\nprint(x)\nsys.stdin = StringIO(test_input3)\nx = solution(sys.stdin)\nprint(x)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    divisors_x: List[int] = [1]\n    divisors_y: List[int] = [1]\n    x, y = stdin.split(' ')\n    for divisor in stdin.split(' '):\n        if divisor in divisors_x and divisor in divisors_y:\n            divisors_x.remove(divisor)\n            divisors_y.remove(divisor)\n        else:\n            if divisor not in divisors_x:\n                divisors_x.append(divisor)\n            if divisor not in divisors_y:\n                divisors_y.append(divisor)\n    return str(int(x)) +'' + str(int(y))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = list(map(int, stdin.split()))\n    divisors.sort()\n\n    x = 0\n    y = 0\n    for i in range(1, n):\n        if i % divisors[i - 1] == 0:\n            x += 1\n        if (n - i) % divisors[i - 1] == 0:\n            y += 1\n\n    return''.join(map(str, [x, y]))"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    a = [\n        [int(s) for s in stdin.split()]\n        for _ in range(n)\n    ]\n    def search_numbers(i, j):\n        s = a[i][j]\n        while i < n and j < m:\n            s += a[i][j]\n            i += 1\n            j += 1\n        if j == m:\n            return s\n        if j < m:\n            return search_numbers(i, j + 1)\n        else:\n            return search_numbers(i + 1, j)\n\n    def check_numbers(i, j):\n        if i < n and j < m:\n            return a[i][j] % k == 0\n\n    max_sum = 0\n    for i in range(n):\n        for j in range(m // 2):\n            s = search_numbers(i, j)\n            if check_numbers(i, j + (m // 2)):\n                max_sum = max(max_sum, s)\n    return str(max_sum)\n\n\nimport sys"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n,m,k = [int(i) for i in stdin.split()]\n    a = [list(map(int, stdin.split())) for i in range(n)]\n    res = 0\n    for i in range(n):\n        res += max(a[i])\n        a[i] = a[i][:m//2]\n        a[i] = a[i][::-1]\n    if res%k:\n        return '-1'\n    return str(res)\nprint(solution(input()))"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n    max_sum = 0\n    for row in matrix:\n        row_sum = sum(row[:m // 2])\n        if row_sum % k == 0 and row_sum > max_sum:\n            max_sum = row_sum\n    return max_sum"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@overload\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [map(int, stdin.split()) for _ in range(n)]\n    rows = []\n    for row in a:\n        for _ in range(m//2):\n            if sum(row) % k == 0:\n                rows.append(row)\n                break\n            row.pop(0)\n    return max(sum(row) for row in rows)\n\nassert(solution(input()) == 28)\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, divisor = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(rows)]\n    submatrix = [[] for _ in range(rows // 2)]\n    maximum = 0\n    for i in range(rows):\n        for j in range(cols):\n            submatrix[j % (rows // 2)].append(matrix[i][j])\n            maximum = max(maximum, matrix[i][j])\n    return str(maximum * divisor)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(m)]\n    answer = 0\n    for row in range(m):\n        for col in range(n // 2):\n            answer += a[row][col]\n    return str(answer)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline()\n\nprint(solution(\"5\"))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 1\n    for i in range(1, n):\n        if a[i - 1] > a[i]:\n            k += 1\n    return str(k)"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n\n    s = ''\n    while len(l) > 0:\n        s += 'L' if l[0] < l[-1] else 'R'\n        l.pop(0) if l[0] < l[-1] else l.pop()\n    return s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().strip().split()]\n    answer = 0\n    for i in range(1, n):\n        if seq[i] > seq[i-1]:\n            answer = max(answer, i)\n    return answer\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    max = 0\n    for i in range(n):\n        res = 1\n        for j in range(i):\n            res += 1\n            if arr[j] < arr[i]:\n                res = max(res, arr[j] + 1)\n        max = max(max, res)\n    return max\n\n'''\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe last example is explained in the problem statement.\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 1\n    for i in range(n-2, -1, -1):\n        if a[i] == a[i+1]:\n            k += 1\n        else:\n            break\n    s = []\n    for i in range(n-1, i+k, -1):\n        s.append('L' if a[i] == a[i-1] else 'R')\n    return ''.join(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nm = int(stdin.readline().strip())\nn = list(map(int, stdin.readline().strip().split()))\nk = 1\ns = \"\"\n\nwhile k <= len(n):\n    max_el = 0\n    left = []\n    right = []\n    for i in range(k):\n        if n[i] > max_el:\n            max_el = n[i]\n            left.append(i)\n        else:\n            right.append(i)\n\n    s += 'L' if left else 'R'\n    if right:\n        s += 'R' * len(right)\n    else:\n        s += 'L' * len(left)\n    k += len(left)\n    n = n[len(left):]\n\nprint(len(s))\nprint(s)\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n    N = int(sys.stdin.readline())\n    A = tuple(int(x) for x in sys.stdin.readline().strip().split())\n    S = sys.stdin.readline().strip()\n    print(S)\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = stdin.readline().split()\n    arr = list(map(int, arr))\n    arr.sort()\n    i = 1\n    k = 1\n    while i < n:\n        if arr[i] == arr[i-1]:\n            i += 1\n            continue\n        else:\n            k = max(k, i)\n            i += 1\n    return k\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n    result = [0] * n\n    for i in range(n):\n        result[i] = -1\n        \n        for d in range(1, arr[i]+1):\n            if all(x == y for x, y in zip(arr[:i], arr[i+1:])):\n                result[i] = d\n                break\n    \n    return ''.join(map(str, result))\n\nassert(solution('''6\n1 4 4 7 4 1\n''') == '3')\nassert(solution('''5\n2 2 5 2 5\n''') == '3')\nassert(solution('''4\n1 3 3 7\n''') == '-1')\nassert(solution('''2\n2 8\n''') == '3')\nassert(solution('''7\n1 7 6 5 1 4 1 1\n''') == '3')\nassert(solution('''11\n1 7 6 5 1 4 1 1 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = 0\n\n    for i in range(n):\n        if a[i] < 0:\n            result = -1\n            break\n    else:\n        for i in range(n):\n            tmp = a[i]\n            a[i] += result\n            if a[i] < 0:\n                a[i] = 0\n            else:\n                result += a[i] - tmp\n\n    return str(result)\n\n\nassert solution('''\\\n6\n1 4 4 7 4 1\n''') == '3'\n\nassert solution('''\\\n5\n2 2 5 2 5\n''') == '3'\n\nassert solution('''\\\n4\n1 3 3 7\n''') == '-1'\n\nassert solution('''\\\n2\n2 8\n''') == '3'\n\nassert solution('''\\\n1\n2 8\n''') == '-1'\n\nassert solution('''\\\n3\n10 3 17\n''') == '8'\n\nassert solution('''\\\n2\n1 3\n''') == '-1'\n\nassert solution('''\\\n5\n2 2 5 2 5\n''') == '3'\n\nassert solution('''\\\n4\n1 3 3 7\n''') == '-1'\n\nassert solution('''\\\n3\n2 3 4\n''') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n    return str(nonnegative_integer)\n\nnonnegative_integer = min(\n    sum(\n        [int(x) for x in input().split()]\n    )\n    for _ in range(int(input()))\n)\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    array_len = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().split()]\n    max_val = 0\n    sum_of_squares = 0\n    array_sum = sum(array)\n    max_val = max(array)\n    for i in range(max_val, -1, -1):\n        if array_sum - i * array_len - i * i == 0:\n            if max_val * max_val == (array_sum - i * array_len - i * i):\n                return str(i)\n    return str(-1)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    d = 0\n    while True:\n        for x in a:\n            if x < 0:\n                d += 1\n        if d == 0:\n            return str(d)\n        else:\n            d -= 1\n            for i in range(len(a)):\n                a[i] += d\n                if a[i] < 0:\n                    a[i] = 0\n        if all(a[i] == a[i - 1] for i in range(1, n)):\n            return str(-1)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if min(a) < 0:\n        return '-1'\n\n    v = 0\n    m = float('inf')\n    for i in a:\n        v += i\n        if v < 0:\n            v = 0\n        m = min(m, v)\n\n    return str(m)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    D = max(arr)\n    while D > 0 and not all(i == j for i, j in zip(arr, [i - D for i in arr])):\n        D -= 1\n    if D == 0:\n        print(-1)\n    else:\n        print(D)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n\n    for d in range(1, max(a) + 1):\n        s = set(a)\n        for i in range(n):\n            if a[i] + d in s and a[i] - d in s:\n                s.remove(a[i])\n                a[i] = a[i] + d if d!= 0 else a[i] - d\n        if len(s) == 1:\n            return str(d)\n\n    return '-1'\n\n\nassert solution('''6\n1 4 4 7 4 1''') == '3'\nassert solution('''5\n2 2 5 2 5''') == '3'\nassert solution('''4\n1 3 3 7''') == '-1'\nassert solution('''2\n2 8''') == '3'\nassert solution('''10\n2 1 1 1 1 1 1 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n7 2 1 1 1 1 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 7 1 1 1 1 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 7 1 1 1 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 10 7 1 1 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 10 10 7 1 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 10 10 10 7 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 10 10 10 10 10 7 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 10 10 10 10 10 10 10 10 10 7 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 7 1 1 1 1 1 1 1''') == '-1'\nassert solution('''10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 7 1 1 1 1 1 1 1''') == '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(n):\n        a[i] = a[i] + i - 1\n\n    a.sort()\n\n    d = 0\n    for i in range(n):\n        if a[i] < i:\n            break\n\n        d += 1\n    else:\n        return -1\n\n    return d\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n\n    a = list(map(int, stdin.split()))\n\n    m = 10 ** n\n    dp = [0] * (m + 1)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(m + 1):\n            if dp[j]:\n                dp[j + a[i]] = 1\n                dp[j - a[i]] = 1\n\n    for i in range(m, -1, -1):\n        if dp[i] == 2:\n            return str(i)\n\n    return \"-1\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = (int(x) for x in stdin.split(\" \"))\n    x3, y3, x4, y4 = (int(x) for x in stdin.split(\" \"))\n    return \"YES\" if x1 < x3 < x4 and y1 < y3 < y4 else \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    x1, y1, x2, y2 = map(int, stdin.strip().split())\n    x3, y3, x4, y4 = map(int, stdin.strip().split())\n    x5, y5, x6, y6 = map(int, stdin.strip().split())\n    # x1, y1, x2, y2 = map(int, stdin.split())\n    # x3, y3, x4, y4 = map(int, stdin.split())\n    # x5, y5, x6, y6 = map(int, stdin.split())\n    if min(x1, x2) <= x3 <= max(x1, x2) and min(y1, y2) <= y3 <= max(y1, y2) and min(x5, x6) <= x3 <= max(x5, x6) and min(y5, y6) <= y3 <= max(y5, y6):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3, y_3, x_4, y_4 = list(map(int, stdin.split()))\n    x_5, y_5, x_6, y_6 = list(map(int, stdin.split()))\n    if (\n        x_1 < x_5\n        and x_1 < x_6\n        and y_1 < y_5\n        and y_1 < y_6\n        and x_2 > x_5\n        and x_2 > x_6\n        and y_2 > y_5\n        and y_2 > y_6\n    ):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(n) for n in stdin.split()]\n    x3, y3, x4, y4 = [int(n) for n in stdin.split()]\n    x5, y5, x6, y6 = [int(n) for n in stdin.split()]\n\n    if (x3 <= x1 <= x4 and x5 <= x2 <= x6) or (x3 <= x2 <= x4 and x5 <= x1 <= x6):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert (solution('''2 2 4 4\n1 1 3 5\n3 1 5 5\n''')) == 'NO'\nassert (solution('''2 2 4 4\n1 1 3 5\n3 1 5 5\n''')) == 'NO'\nassert (solution('''2 2 4 4\n1 1 3 5\n3 1 5 5\n''')) == 'NO'\nassert (solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n''')) == 'YES'\nassert (solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n''')) == 'NO'\nassert (solution('''5 2 10 5\n3 1 7 6\n8 1 11 7\n''')) == 'YES'\nassert (solution('''5 2 10 5\n3 1 7 6\n8 1 11 7\n''')) == 'NO'\nassert (solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n''')) == 'NO'\nassert (solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n''')) == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    return 'YES' if all(map(lambda x: x < y2, (x1, x2, x3, x4, x5, x6))) else 'NO'"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set([int(stdin) + i for i in range(10)])))\n\nimport sys\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(1, 10 ** 9 + 1):\n        current = i\n        while current % 10 == 0:\n            current //= 10\n        if current == i:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    return str(len(set(range(number - 1, number * 10 + 1)).union(set(range(number - 2, number * 10 + 1)))))"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    memo = [0] * (n + 1)\n    memo[1] = 1\n    memo[2] = 2\n    memo[3] = 4\n    for i in range(4, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2] + 2 * memo[i - 3]\n    return str(memo[n])\n\nassert (solution('''1098''') == '20')\nassert (solution('''10''') == '19')\nassert (solution('''10099''') == '10100')\nassert (solution('''123456789''') == '45')"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 1\n    for i in range(n + 1):\n        for j in range(1, n + 1):\n            ans += (n - i) * j\n    return str(ans)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n - 1 + n // 10 + n % 10)\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = [0 for i in range(n)]\n    t[0] = 1\n    for i in range(1, n):\n        k = 0\n        while k < i and i + k < n:\n            t[i + k] += t[i]\n            k += 1\n    return str(t[n - 1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1 + n % 2)\n\nassert(solution(\"1098\") == \"20\")\nassert(solution(\"10\") == \"19\")\nassert(solution(\"1\") == \"1\")\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    pairs = 0\n    for i in range(n):\n        if f[i] == 0:\n            pairs += 1\n    if pairs > n:\n        return \"IMPOSSIBLE\"\n    gifts = [0] * n\n    for i in range(n):\n        if f[i]!= 0:\n            gifts[i] = f[i]\n    for i in range(n):\n        if f[i] == 0:\n            gifts[i] = sum(f[j] for j in range(n) if f[j]!= 0) + 1\n    return \" \".join(map(str, gifts))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    return \" \".join(str(s.count(i)) if s.count(i) > 1 else str(i) for i in range(n))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    values = list(map(int, stdin.readline().strip().split(' ')))\n\n    return''.join(map(str, sorted(values)))\n\nassert(solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4')\nassert(solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''5\n2 1 0 0 0\n''') == '2 1 4 5 3')\n\nprint(solution('''5\n5 0 0 2 4\n'''))\nprint(solution('''7\n7 0 0 1 4 0 6\n'''))\nprint(solution('''7\n7 4 0 3 0 5 1\n'''))\nprint(solution('''5\n2 1 0 0 0\n'''))\nprint(solution('''7\n7 4 0 3 0 5 1\n'''))\nprint(solution('''7\n7 4 0 3 0 5 1\n'''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    res = {}\n    for i in range(n):\n        if l[i] not in res:\n            res[l[i]] = i\n        else:\n            res[l[i]] = i\n    return''.join(str(res[i]) for i in range(n) if i!= res[i])"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = list(map(int, stdin.readline().strip().split()))\n    assert len(f) == n\n    f = {i: f[i] for i in range(n) if f[i] > 0}\n    for i in range(n):\n        if i not in f:\n            f[i] = 0\n    nf = sorted(f.items(), key=lambda x: x[1], reverse=True)\n    s = []\n    for i in range(len(nf)):\n        if nf[i][1] == i:\n            s.append(str(nf[i][0]))\n    return''.join(s)\n\nprint(solution(''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = [int(s) for s in stdin.readline().split(' ')]\n    gift = [0] * n\n    for i in range(n):\n        if friends[i]!= i:\n            gift[i] = friends[i]\n            if friends[i] > i:\n                friends[i], friends[friends[i]] = friends[friends[i]], friends[i]\n            else:\n                friends[i], friends[friends[i]] = friends[friends[i]], friends[i]\n    result = [str(gift[i]) if gift[i]!= 0 else str(i) for i in range(n)]\n    print(' '.join(result))\n\nsolution(None)\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    if sum(nums) % 2!= 0:\n        return '-1'\n    ans = [0] * n\n    for i, num in enumerate(nums):\n        if num == 0:\n            ans[i] = 0\n        else:\n            ans[i] = num - 1\n    return''.join(map(str, ans))\n\nassert solution('''5''') == '5'\nassert solution('''7''') == '7'\nassert solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1'\nassert solution('''7\n0 0 0 1 4 0 6''') == '7 3 2 1 4 5 6'\n\nprint(solution('''7\n0 0 0 1 4 0 6'''))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n    seen = set()\n    for i in range(n):\n        if friends[i] not in seen:\n            seen.add(friends[i])\n        else:\n            friends[i] = -1\n    for friend in seen:\n        if friend!= -1:\n            friends[friend] = 0\n    return''.join(map(str, friends))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = stdin.readline().split()\n    nums = [int(n) for n in nums]\n    output = [0] * n\n    for i in range(n):\n        if nums[i]!= 0:\n            output[i] = i\n    return''.join(map(str, output))"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\n\nfrom solutions.kyu_6.blackjack_c import solve\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()[1:]))\n    result = []\n    used = set()\n    for i in range(1, k + 1):\n        for j in a:\n            if j in used:\n                break\n            result.append(j)\n            used.add(j)\n        else:\n            return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    m = [a[i % n] for i in range(n * k)]\n\n    return \"YES\" if len(set(m)) == k else \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function is expected to return a STRING.\n    The function accepts following parameters:\n\n    stdin - the input stream\n    \"\"\"\n\n    # Read the input\n    n, k = (int(x) for x in stdin.readline().split())\n    a = [int(x) for x in stdin.readline().split()]\n\n    # Print the solution\n    a.sort()\n    if k > len(a):\n        print(\"NO\")\n    else:\n        for i in range(k):\n            if i > 0 and a[i] == a[i-1]:\n                continue\n            print(\"YES\", end=' ')\n            for j in range(k):\n                if j > i and a[j] == a[j-1]:\n                    continue\n                print(a[j], end=' ')\n            print()\n    return \"\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    all_colors = list(range(1, k + 1))\n    for i in range(k):\n        for j in range(k):\n            if a[j] == i:\n                all_colors[i] = j\n\n    for color in all_colors:\n        if all(a[i]!= color for i in range(n)):\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split(' ')))\n    n, k = input_list[0], input_list[1]\n    input_list = input_list[2:]\n    \n    colors = []\n    for _ in range(k):\n        colors.append(0)\n    \n    for i in range(k):\n        colors[i] = input_list.pop(0)\n    \n    while input_list:\n        for i in range(k):\n            if colors[i] in input_list:\n                input_list.remove(colors[i])\n                break\n        \n        if len(input_list) == 0:\n            break\n    \n    if len(input_list)!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n        \n        \n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    colors = [False for _ in range(k)]\n    for num in arr:\n        if colors[num - 1]:\n            return \"NO\"\n        else:\n            colors[num - 1] = True\n\n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a_sort = sorted(a)\n    for i in range(k):\n        for j in range(i + 1, k):\n            if a_sort[i] == a_sort[j]:\n                return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    #we have to find a total of k colors\n    #if we can't find a solution, we print NO\n    #otherwise we print YES and the k colors\n    n = len(a)\n    k = 3\n\n    #solution\n    #we have to check the conditions for each color\n    #we have to check the uniqueness of colors\n    #we have to check the validity of the colors\n    #check the color conditions\n    #we have to check the color uniqueness\n    #we have to check the color validity\n    #if all these conditions are satisfied, we print YES and the colors\n    #if not, we print NO\n\n    for color in range(1, k+1):\n        colors = set()\n        colors.add(color)\n        for i in range(n):\n            if a[i] not in colors:\n                colors.add(a[i])\n            else:\n                return \"NO\"\n\n        if len(colors) == k:\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n\n    def helper(x, y):\n        if x == y: return 0\n\n        def transform(num):\n            if num == 0: return 1\n            return 0\n\n        i = 0\n        while transform(num % 10):\n            i += 1\n            num //= 10\n        return i\n\n    return str(helper(x, y) + helper(x - y, y) - helper(x, y - y))\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Sample Input\n    11 5 2\n    11010100101\n    Sample Output\n    1\n    '''\n    num_length, x, y = [int(x) for x in stdin.split(' ')]\n    num = [int(x) for x in stdin[3:num_length+3]]\n    count = 0\n    for i in range(num_length):\n        if num[i] == 1:\n            num[i] = 0\n            num[i-x] = 1\n            count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    s = stdin.strip()\n    for i in range(n):\n        if s[i] == '1':\n            y += 1\n    print(y * (10 ** x))"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(n) for n in stdin.split()]\n    number = stdin.strip()\n    result = 0\n    while number!= '1':\n        i = 0\n        remainder = 0\n        while number[i] == '1':\n            remainder = remainder * 10 + 1\n            i += 1\n        result += x\n        number = number[i:]\n        remainder %= 10 ** x\n        remainder *= 10 ** y\n        if remainder!= 0:\n            result += 1\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(s) for s in stdin.split())\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(10):\n            if i == 0:\n                if j == y:\n                    dp[i + 1] = 1\n            elif i == 1:\n                if j == 0:\n                    dp[i + 1] = 1\n                elif j == y:\n                    dp[i + 1] = 1\n                elif j == 1:\n                    dp[i + 1] = 1\n                else:\n                    dp[i + 1] = dp[i] + 1\n            else:\n                if j == 0:\n                    dp[i + 1] = dp[i] + 1\n                elif j == 1:\n                    dp[i + 1] = dp[i] + 1\n                else:\n                    dp[i + 1] = min(dp[i] + 1, dp[i - 1] + 1, dp[i - 2] + 1)\n\n    return str(dp[n])\n\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(\" \")]\n    A = [int(x) for x in stdin.split(\" \")]\n    counter = 0\n    for i in range(len(A)):\n        if A[i] == 1:\n            if i < n - 1:\n                A[i + 1] = 0\n            else:\n                A[0] = 1\n            counter += 1\n        if i < n - 1:\n            if A[i]!= A[i + 1]:\n                counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(n) for n in stdin.split(\" \")]\n    d = stdin[n - 1]\n    while n:\n        if n & 1:\n            if d == \"0\":\n                d = \"1\"\n            else:\n                d = \"0\"\n        n >>= 1\n    return d"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    number = stdin[n:]\n    n2 = len(number)\n    remainder = int(number, 2)\n    for i in range(n2):\n        r = remainder % (2 ** x)\n        remainder = remainder // (2 ** x)\n        remainder = remainder % (2 ** y)\n        if r == 0:\n            return i\n    return n2"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    d = stdin[n:]\n    a = 0\n    b = len(d) - 1\n    while a <= b:\n        c = (a + b) // 2\n        if d[c] == '0':\n            a = c + 1\n        else:\n            b = c - 1\n    return str(b)\n\n\nassert (solution(input()) == '1')\nassert (solution(input()) == '3')\nassert (solution(input()) == '0')\nassert (solution(input()) == '1')\nassert (solution(input()) == '2')\nassert (solution(input()) == '3')\nassert (solution(input()) == '4')\nassert (solution(input()) == '5')\nassert (solution(input()) == '6')\nassert (solution(input()) == '7')\nassert (solution(input()) == '8')\nassert (solution(input()) == '9')\nassert (solution(input()) == '10')\nassert (solution(input()) == '11')\nassert (solution(input()) == '12')\nassert (solution(input()) == '13')\nassert (solution(input()) == '14')\nassert (solution(input()) == '15')\nassert (solution(input()) == '16')\nassert (solution(input()) == '17')\nassert (solution(input()) == '18')\nassert (solution(input()) == '19')\nassert (solution(input()) == '20')\nassert (solution(input()) == '21')\nassert (solution(input()) == '22')\nassert (solution(input()) == '23')\nassert (solution(input()) == '24')\nassert (solution(input()) == '25')\nassert (solution(input()) == '26')\nassert (solution(input()) == '27')\nassert (solution(input()) == '28')\nassert (solution(input()) == '29')\nassert (solution(input()) == '30')\nassert (solution(input()) == '31')\nassert (solution(input()) == '32')\nassert (solution(input()) == '33')\nassert (solution(input()) == '34')\nassert (solution(input()) == '35')\nassert (solution(input()) == '36')\nassert (solution(input()) == '37')\nassert (solution(input()) == '38')\nassert (solution(input()) == '39')\nassert (solution(input()) == '40')\nassert (solution(input()) == '41')\nassert (solution(input()) == '42')\nassert (solution(input()) == '43')\nassert (solution(input()) == '44')\nassert (solution(input()) == '45')\nassert (solution(input()) == '46')\nassert (solution(input()) == '47')\nassert (solution(input()) == '48')\nassert (solution(input()) == '49')\nassert (solution(input()) == '50')\nassert (solution(input()) == '51')\nassert (solution(input()) == '52')\nassert (solution(input()) == '53')\nassert (solution(input()) == '54')\nassert (solution(input()) == '55')\nassert (solution(input()) == '56')\nassert (solution(input()) == '57')\nassert (solution(input()) == '58')\nassert (solution(input()) == '59')\nassert (solution(input()) == '60')\nassert (solution(input()) == '61')\nassert (solution(input()) == '62')\nassert (solution(input()) == '63')\nassert (solution(input()) == '64')\nassert (solution(input()) == '65')\nassert (solution(input()) == '66')\nassert (solution(input()) == '67')\nassert (solution(input()) == '68')\nassert (solution(input()) == '69')\nassert (solution(input()) == '70')\nassert (solution(input()) == '71')\nassert (solution(input()) == '72')\nassert (solution(input()) == '73')\nassert (solution(input()) == '74')\nassert (solution(input()) == '75')\nassert (solution(input()) == '76')\nassert (solution(input()) == '77')\nassert (solution(input()) == '78')\nassert (solution(input()) == '79')\nassert (solution(input()) == '80')\nassert (solution(input()) == '81')\nassert (solution(input()) == '82')\nassert (solution(input()) == '83')\nassert (solution(input()) == '84')\nassert (solution(input()) == '85')\nassert (solution(input()) == '86')\nassert (solution(input()) == '87')\nassert (solution(input()) == '88')\nassert (solution(input()) == '89')\nassert (solution(input()) == '90')\nassert (solution(input()) == '91')\nassert (solution(input()) == '92')\nassert (solution(input()) == '93')\nassert (solution(input()) == '94')\nassert (solution(input()) == '95')\nassert (solution(input()) == '96')\nassert (solution(input()) == '97')\nassert (solution(input()) == '98')\nassert (solution(input()) == '99')\nassert (solution(input()) == '100')\n\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n\nassert solution(stdin) == answer()\n\"\"\"\n\nn, x, y = map(int, stdin.split())\nnumber = stdin[1:]\n\nans = 0\nfor i in range(n):\n    if number[i] == '1':\n        ans += x if y < i else i - y + 1\n        y -= i - y + 1\n\nprint(ans)\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ntry:\n    assert(len(solution(input())) == 1)\nexcept AssertionError:\n    print('NO')\nelse:\n    print('YES')\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        print('YES' if is_palindrome(a) else 'NO')\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n\n        if a[0] < 3:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n        if a[0] > 5000:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        if is_palindrome(a, n):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if is_palindrome(a, n):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_tests = int(stdin.readline())\n    for _ in range(num_tests):\n        n = int(stdin.readline())\n        arr = [int(x) for x in stdin.readline().split()]\n        print('YES' if is_palindrome(arr, n) else 'NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        for _ in range(n - 2):\n            a.append(a[-1] + a[-2])\n        a.pop()\n        if is_palindrome(a):\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if is_subsequence_of_length(a, 3):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        if n < 3:\n            res.append(\"NO\")\n        else:\n            a = [int(x) for x in stdin.readline().split()]\n            for i in range(len(a)):\n                if a[i] > n:\n                    continue\n                if a[i] == a[n - i - 1]:\n                    res.append(\"YES\")\n                    break\n            else:\n                res.append(\"NO\")\n\n    return '\\n'.join(res)\n\nprint(solution(None))\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n\n        if n < 3:\n            print('NO')\n            continue\n\n        pal = [False] * n\n        for i in range(2, n):\n            if a[i] == a[i - 1] and a[i] == a[i - 2] and a[i] == a[i - 2]:\n                pal[i] = True\n\n        if any(pal[i] and pal[i - 1] and pal[i - 2] for i in range(2, n)):\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n    a = a.zfill(n)\n    m = -1\n    for i in range(n):\n        x = a[i:i + n]\n        c = 0\n        for j in range(n):\n            c += f[x[j]] * 10 ** j\n        if c > m:\n            m = c\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nTEST_CASES = [\n\n    (\n        (\n            '4',\n            '1337',\n            '1 2 5 4 6 6 3 1 9',\n        ),\n        '1557',\n    ),\n]\nfor case, expected in TEST_CASES:\n    actual = solution(*case)\n    print(actual, expected)\n    assert actual == expected\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum number of a number after performing the operation described in the statement\n    no more than once.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    result = a\n    for i in range(1, n):\n        c = f[i]\n        pre = a[0:i]\n        post = a[i:]\n        # Replace every digit with the same digit in the post sequence\n        for j in range(1, 10):\n            if j!= c:\n                result = pre + str(j) + post\n                if int(result) > int(result[::-1]):\n                    break\n    return result\n\nprint(solution(None))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1]\n    f = [int(x) for x in stdin[2]]\n    m = 0\n    for i in range(10):\n        x = a.find(str(i))\n        if x!= -1:\n            m = max(m, i * f[x])\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    return max(get_max_num(a, f, n))\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    a = int(stdin[1])\n    f = [int(stdin[i]) for i in range(2, n + 2, 2)]\n    a_str = str(a)\n    for i in range(1, 10):\n        a_str = a_str.replace(str(i), str(f[i - 1]))\n    return a_str"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1:1 + int(n)]\n    f = [int(x) for x in stdin[3:]]\n    return str(max(int(x) for x in a.replace('9', '2').replace('8', '7')\n                  .replace('7', '6').replace('6', '5')\n                  .replace('5', '4').replace('4', '3').replace('3', '2')\n                  .replace('2', '1')))"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    fs = list(map(int, stdin.readline().strip().split()))\n\n    def foo(x: int) -> int:\n        return fs[x - 1]\n\n    def op(a: int) -> int:\n        res = 0\n        for i in range(n):\n            res = res * 10 + a % 10\n            a //= 10\n        return res\n\n    res = op(a)\n    for i in range(1, n):\n        res = max(res, foo(i) + op(a))\n    return str(res)\n\n\n@pytest.mark.parametrize(\n    (\"inp\", \"expected\"),\n    (\n        (\"\", \"\"),\n        (\"1\", \"1\"),\n        (\"1 2\", \"12\"),\n        (\"1 2 3\", \"123\"),\n        (\"1 2 3 4\", \"1234\"),\n        (\"1 2 3 4 5\", \"12345\"),\n        (\"1 2 3 4 5 6\", \"123456\"),\n        (\"1 2 3 4 5 6 7\", \"1234567\"),\n        (\"1 2 3 4 5 6 7 8\", \"12345678\"),\n        (\"1 2 3 4 5 6 7 8 9\", \"123456789\"),\n        (\"1 2 3 4 5 6 7 8 9 10\", \"12345678910\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11\", \"1234567891011\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12\", \"123456789101112\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13\", \"12345678910111213\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14\", \"1234567891011121314\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\", \"123456789101112131415\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\", \"12345678910111213141516\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\", \"1234567891011121314151617\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\", \"123456789101112131415161718\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\", \"12345678910111213141516171819\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", \"1234567891011121314151617181920\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\", \"123456789101112131415161718192021\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\", \"12345678910111213141516171819202122\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\", \"1234567891011121314151617181920212223\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\", \"123456789101112131415161718192021222324\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\", \"12345678910111213141516171819202122232425\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\", \"1234567891011121314151617181920212223242526\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\", \"123456789101112131415161718192021222324252627\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\", \"12345678910111213141516171819202122232425262728\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\", \"1234567891011121314151617181920212223242526272829\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\", \"123456789101112131415161718192021222324252627282930\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\", \"12345678910111213141516171819202122232425262728293031\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\", \"1234567891011121314151617181920212223242526272829303132\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", \"123456789101112131415161718192021222324252627282930313233\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\", \"12345678910111213141516171819202122232425262728293031323334\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\", \"1234567891011121314151617181920212223242526272829303132333435\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\", \"123456789101112131415161718192021222324252627282930313233343536\"),\n        (\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\", \"12345678910111213141516171819202122232425262728293031323334353637\"),\n        (\"1 2 3 4 5"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = stdin[:n]\n    f = tuple(map(int, stdin[n + 1:].split()))\n\n    dp = [set() for _ in range(n)]\n    dp[0] = {f[i] - 1 for i in range(n)}\n\n    for i in range(1, n):\n        for j in dp[i - 1]:\n            dp[i].add(j * 10 + f[i])\n            dp[i].add(j * 10 + f[i] + 1)\n            dp[i].add(j * 10 + f[i] - 1)\n\n    max_n = -1\n    for i in dp[n - 1]:\n        max_n = max(max_n, i)\n\n    return str(max_n)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin.readline().strip())\n    for _ in range(testcases):\n        a, b, c = [int(x) for x in stdin.readline().strip().split(' ')]\n        if b % a == 0:\n            if c % b == 0:\n                res = min(b, c)\n            else:\n                res = min(c, a)\n        else:\n            res = min(a, b)\n        print(res)\n    return ''"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().strip().split(' '))\n        res = b // a\n        if c % b == 0:\n            print(res)\n            print(a, b)\n        else:\n            print('Impossible')"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    return \"No\"\n\nimport sys\nsys.stdin = open(\"sample_input.txt\")\nfor line in sys.stdin:\n    print(solution(line))\n\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = [int(x) for x in stdin.readline().strip().split(\" \")]\n        if b % a!= 0:\n            res = 1\n        else:\n            res = 0\n        if c % b!= 0:\n            res += 1\n        print(res)\n        \n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        a, b, c = map(int, stdin.readline().strip().split(' '))\n        count = 0\n        while True:\n            if b % a == 0 and c % b == 0:\n                break\n            count += 1\n            b += 1\n            c += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    for _ in range(_):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        res = 0\n        while b % a!= 0 or c % b!= 0:\n            res += 1\n            b = (b + 1) // a if b % a == 0 else (b - 1) // a\n            c = (c + 1) // b if c % b == 0 else (c - 1) // b\n        print(res)\n        print(a, b, c)\n    return ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ret = []\n    for i in range(n):\n        a, b, c = (int(x) for x in stdin.readline().strip().split(\" \"))\n        d = gcd(b, a)\n        ret.append(str(c // d))\n        ret.append(str(a // d))\n        ret.append(str(b // d))\n    return \"\\n\".join(ret)\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    res = 0\n    if a % b == 0:\n        res += a // b\n    else:\n        res += (a // b) + 1\n    if b % c == 0:\n        res += b // c\n    else:\n        res += (b // c) + 1\n    if c % b == 0:\n        res += c // b\n    else:\n        res += (c // b) + 1\n    return str(res)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = [int(x) for x in stdin.readline().strip().split()]\n        if b % a == 0 and c % b == 0:\n            print(2)\n        else:\n            print(1)\n        print(a, b, c)\n    return \"\"\n\nassert(solution(\"1\\n1 2 3\") == \"1\")\nassert(solution(\"123 321 456\") == \"1 1 3\")\nassert(solution(\"1 2 3\\n123 321 456\") == \"1 1 3\")\nassert(solution(\"5 10 15\\n15 18 21\") == \"4\")\nassert(solution(\"15 18 21\\n1 22 29\\n3 19 38\\n6 30 46\") == \"4\")\nassert(solution(\"100 100 101\\n1 22 22\\n3 19 38\\n6 24 48\") == \"4\")\nassert(solution(\"1\\n1 2 3\\n123 321 456\") == \"1 1 3\")\nassert(solution(\"15 18 21\\n1 22 29\\n3 19 38\\n6 30 46\") == \"4\")\nassert(solution(\"100 100 101\\n1 22 22\\n3 19 38\\n6 24 48\") == \"4\")\n\nsolution(\"9\\n7 8 9\") #7\nsolution(\"5\\n3 4 5\") #2\nsolution(\"1\\n2 1\") #0\nsolution(\"1\\n1 1\") #1\nsolution(\"1\\n1 1\\n1 1\") #2\nsolution(\"1\\n1 1\\n1 1\\n1 1\") #2\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") #3\nsolution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(i) - int(j) for i, j in (stdin.split() for _ in range(int(stdin.split()[0])))))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n\n    min_instability = 0\n\n    for i in range(0, n):\n        min_instability = max(min_instability, a[i]) - min(a[i], a[n - 1])\n\n    print(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    return str(max(arr) - min(arr))\n\nprint(solution(None))\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        res += a[i] - min(a[i], a[i+1])\n    return str(res)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = sorted([int(x) for x in stdin.readline().split()])\n    return str(arr[-1] - arr[0])\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    return str(max(a) - min(a))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if instability(stdin) >= 0 else \"NO\"\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return str(max(a) - min(a))\n\nprint(solution(None))\n\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    m = max(a)\n    mi = min(a)\n    ans = m - mi\n    for i in range(n):\n        ans = min(ans, a[i] - mi)\n    return str(ans)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = list(map(int, stdin[2:].split(' ')))\n    a.sort()\n    max_diff = max(a[0], a[n - 1]) - min(a[0], a[n - 1])\n    for i in range(1, n - 1):\n        max_diff = min(max_diff, a[i] - a[i - 1])\n    return str(max_diff)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    s, d, c = [tuple(map(int, stdin.split())) for _ in range(m)]\n    \n    day = 0\n    exam_days = [0] * n\n    for s, d, c in zip(s, d, c):\n        for i in range(s, d):\n            if exam_days[i] == 0:\n                exam_days[i] = exam_days[day]\n                day += 1\n        for i in range(day, d):\n            if exam_days[i] == 0:\n                exam_days[i] = exam_days[day]\n                day += 1\n        for i in range(d, d+c):\n            if exam_days[i] == 0:\n                exam_days[i] = exam_days[day]\n                day += 1\n        for i in range(day, d+c):\n            if exam_days[i] == 0:\n                exam_days[i] = exam_days[day]\n                day += 1\n    \n    if day == n:\n        return''.join(str(i) for i in exam_days)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    exams = [tuple(map(int, stdin.split(' '))) for _ in range(m)]\n    passed_exams = []\n    for i, (s, d, c) in enumerate(exams):\n        d = (d - s) + 1\n        c = min(c, d)\n        passed_exams.extend([i] * c)\n    possible_schedules = list(itertools.product([0, 1], repeat=m))\n    schedules = []\n    for schedule in possible_schedules:\n        exam_schedule = []\n        for i, schedule_i in enumerate(schedule):\n            if i not in passed_exams:\n                if schedule_i == 0:\n                    exam_schedule.append(0)\n                else:\n                    exam_schedule.append(i)\n        schedules.append(exam_schedule)\n    valid_schedules = []\n    for schedule in schedules:\n        if len(schedule) == m:\n            valid_schedules.append(schedule)\n    if len(valid_schedules) == 0:\n        return -1\n    return''.join(map(lambda x:''.join(map(str, x)), valid_schedules))"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    days = [[0 for _ in range(m + 1)] for _ in range(n)]\n    for i in range(m):\n        s, d, c = map(int, stdin.strip().split())\n        for j in range(s, d):\n            days[j][i + 1] = c\n    for i in range(n):\n        for j in range(1, m + 1):\n            if days[i][j] > 0:\n                break\n        else:\n            return '-1'\n    days = [['0' for _ in range(m + 1)] for _ in range(n)]\n    for i in range(n):\n        for j in range(1, m + 1):\n            if days[i][j] > 0:\n                continue\n            days[i][j] = '1'\n            for k in range(i + 1, n):\n                if days[k][j] == '1':\n                    break\n                if days[k][j] == '0' and days[k][j - 1] == '0':\n                    days[i][j] = '1'\n                    break\n    result = ''\n    for i in range(n):\n        for j in range(m + 1):\n            result += days[i][j]\n        result +=''\n    return result.strip()"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = stdin.split('\\n')\n    n, m = [int(x) for x in stdin[0].split(' ')]\n    students_marks = [[int(x) for x in stdin[i].split(' ')] for i in range(1, m+1)]\n    passed_exams = [0] * m\n    for i in range(m):\n        for j in range(n):\n            if passed_exams[i] == 1:\n                continue\n            s, d, c = students_marks[i]\n            if j >= s and j <= d:\n                passed_exams[i] = 1\n                break\n    return''.join(str(x) for x in passed_exams)\nprint(solution('3 2'))\nprint(solution('3 2\\n1 3 1'))\nprint(solution('10 3'))\nprint(solution('4 7 2'))\nprint(solution('1 10 3'))\nprint(solution('10 7 4'))\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, m = map(int, stdin.strip().split())\n    exams = [map(int, stdin.strip().split()) for _ in range(m)]\n\n    def dfs(day, idx):\n        if day == n:\n            return True\n        if day > n:\n            return False\n        if idx >= m:\n            return False\n        if exams[idx][1] <= day:\n            return dfs(day+exams[idx][2], idx+1)\n        else:\n            return dfs(day+1, idx) or dfs(day+exams[idx][2], idx+1)\n\n    for _ in range(int(sys.stdin.readline().strip())):\n        a, b, c = map(int, sys.stdin.readline().strip().split())\n        if dfs(a, 0):\n            print('1 1 1', end=' ')\n        else:\n            print('-1', end=' ')\n        if dfs(b, 0):\n            print('1', end=' ')\n        else:\n            print('0', end=' ')\n        if dfs(c, 0):\n            print('1', end=' ')\n        else:\n            print('0', end=' ')\n        print()"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    s, d, c = [], [], []\n    for i in range(m):\n        t, dt, ct = [int(x) for x in stdin.split()]\n        s.append(t)\n        d.append(dt)\n        c.append(ct)\n\n    for i in range(m, n):\n        s.append(i+1)\n        d.append(i+1)\n        c.append(1)\n\n    ans = [-1] * n\n    for i in range(m):\n        if ans[s[i]-1]!= -1:\n            ans[s[i]-1] += 1\n        else:\n            ans[s[i]-1] = i\n    for i in range(m, n):\n        if ans[d[i]-1]!= -1:\n            ans[d[i]-1] += 1\n        else:\n            ans[d[i]-1] = i\n    for i in range(m):\n        ans[s[i]-1] += 1\n        ans[d[i]-1] += 1\n    return''.join(str(x) for x in ans)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = [list(map(int, stdin.split())) for _ in range(m)]\n    # sort exams by day\n    exams = sorted(exams, key=lambda x: x[0])\n    # find the max day to prepare for all exams\n    max_day = max([d + c for _, d, c in exams])\n    # find the number of days to prepare for all exams\n    prep = [(d - s) for s, d, _ in exams]\n    # find the max of prep\n    max_prep = max(prep)\n    # if max_day > max_prep:\n    #     return -1\n    # else:\n    result = [0] * (max_day + 1)\n    for s, d, c in exams:\n        if s <= max_day:\n            result[s] = result[s] + c\n        if d > max_day:\n            result[d] = result[d] + c\n    return''.join(map(str, result[1:]))\n\nassert(solution(input()) == output())\n\n>>> for n, m in [\n...     (5, 2),\n...     (3, 2),\n...     (10, 3)]:\n...     print(solution(test_input(n, m)))\n1 2 3 0 3 \n-1\n2 2 2 1 1 0 4 3 4 4 \n\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    data = [int(x) for x in stdin.split()]\n    s, d, c = [data[i::3] for i in range(3)]\n    s = [0] + s\n    d = [max(s[i + 1] - 1, d[i]) for i in range(len(d) - 1)] + [n]\n    result = []\n    def prepare(day, pre, exam):\n        if exam:\n            pre = max(pre, exam - day)\n        if day <= d[pre]:\n            result.append(pre + 1)\n        else:\n            result.append(0)\n    def pass_exam(day, pre, exam):\n        prepare(day, pre, exam)\n        result.append(0)\n    prepare(0, -1, -1)\n    pass_exam(0, -1, -1)\n    return''.join(map(str, result))"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if m < n:\n        return -1\n    else:\n        count = 0\n        while n!= m:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            else:\n                n *= 3\n                count += 1\n        return count\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    if n == m:\n        return \"0\"\n    elif m == 2 * n:\n        return \"1\"\n    elif m == 3 * n:\n        return \"-1\"\n    else:\n        k = 1\n        while m // k > n:\n            k *= 3\n        k //= 3\n        if m % k == 0 and m // k == n:\n            return \"1\"\n        elif m % k == 0 and m // k > n:\n            return str(m // k - n) + \" \" + \"2\" * (n - 1)\n        else:\n            return \"-1\"\n\nassert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\nprint(solution(stdin.read().strip()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    moves = 0\n    if n > m:\n        n, m = m, n\n        moves = moves + 1\n    while n!= m:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 3 == 0:\n            n = n // 3\n        else:\n            return -1\n        moves = moves + 1\n    return moves\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0'\n\n    moves = 0\n\n    while n!= m:\n        if n % 3 == 0:\n            n /= 3\n        elif n % 2 == 0:\n            n /= 2\n        else:\n            n -= 1\n\n        moves += 1\n\n    return str(moves)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n    count = 0\n    while n!= m:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n *= 3\n            n += 1\n        count += 1\n\n    if n == m:\n        return str(count)\n    else:\n        return \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 0\n    while n!= m:\n        if n % 3 == 0:\n            n //= 3\n        elif n % 2 == 0:\n            n //= 2\n        else:\n            ans += 1\n            n -= 1\n    if n == m:\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return \"-1\"\n    elif n % m == 0:\n        return str(n // m)\n    elif m < n:\n        return str(-1)\n    else:\n        ans = 1\n        cur = n\n        while cur % m!= 0:\n            ans += 1\n            cur *= 2\n        return str(ans)"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    count = 0\n    if n == m:\n        return 0\n    if n < m:\n        n, m = m, n\n    while m > n:\n        if n % 2 == 1 and m % 2 == 0:\n            count += 1\n            n, m = m, n // 2\n        elif n % 3 == 1 and m % 3 == 1:\n            count += 1\n            n, m = m, n // 3\n        elif n % 2 == 0 and m % 2 == 0:\n            count += 2\n            n, m = m, n // 2\n        elif n % 3 == 0 and m % 3 == 0:\n            count += 3\n            n, m = m, n // 3\n        elif n % 3 == 1 and m % 3 == 1:\n            count += 2\n            n, m = m, n // 3\n        elif n % 2 == 1 and m % 3 == 1:\n            count += 1\n            n, m = m, n // 2\n        elif n % 3 == 0 and m % 2 == 0:\n            count += 1\n            n, m = m, n // 3\n        else:\n            count = -1\n            break\n    return count\n\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num, target = map(int, stdin.split())\n    return \"\".join(str(len(transform(num, target))) for _ in range(target)) if transform(num, target) else -1\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    print(s.join([s[i:i+n] for i in range(len(s)-n+1)]))"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\"\"\"\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[0] * n\n    for _ in range(k):\n        t = t[1:] + t[0]\n    return t\n\n\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, k = map(int, stdin.split())\n    s = stdin.strip()\n    m = 0\n    for i in range(len(s) - k + 1):\n        if s[i:i + k] == s[i:i + k][::-1]:\n            m = max(m, len(s[i:i + k]))\n    return s[:m]"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[1:1+n]\n    return t[:k]*(k-1) + t"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    3\n    aba\n    \n    Output\n    ababababa\n    \n    Input\n    3 4\n    ccc\n    \n    Output\n    cccc\n    \"\"\"\n    s, t = stdin.split()\n    n, k = int(s), int(t)\n    if k > n:\n        return \"\"\n    return \"\".join([t[i] for i in range(n) for j in range(i, n, k)])\n\nassert(solution(\"cat\", \"ccc\") == \"cccc\")\nassert(solution(\"cat\", \"c\") == \"c\")\nassert(solution(\"cat\", \"at\") == \"a\")\nassert(solution(\"cccc\", \"cat\") == \"cccc\")\nassert(solution(\"cccc\", \"ccc\") == \"ccc\")\nassert(solution(\"cccc\", \"c\") == \"c\")\nassert(solution(\"cccc\", \"at\") == \"a\")\nassert(solution(\"cat\", \"cat\") == \"catcat\")\nassert(solution(\"cat\", \"ca\") == \"c\")\nassert(solution(\"cat\", \"ct\") == \"\")\nassert(solution(\"ccc\", \"ccc\") == \"ccc\")\nassert(solution(\"ccc\", \"cc\") == \"cc\")\nassert(solution(\"ccc\", \"ct\") == \"\")\nassert(solution(\"ccc\", \"ctt\") == \"\")\nassert(solution(\"ccc\", \"cat\") == \"\")\nassert(solution(\"ccc\", \"at\") == \"\")\nassert(solution(\"ccc\", \"att\") == \"\")\nassert(solution(\"ccc\", \"catc\") == \"c\")\nassert(solution(\"ccc\", \"catat\") == \"a\")\nassert(solution(\"ccc\", \"ccat\") == \"c\")\nassert(solution(\"ccc\", \"ccca\") == \"c\")\nassert(solution(\"ccc\", \"cccaat\") == \"ca\")\nassert(solution(\"ccc\", \"cccctt\") == \"\")\nassert(solution(\"ccc\", \"cccct\") == \"\")\nassert(solution(\"ccc\", \"cccctt\") == \"\")\nassert(solution(\"ccc\", \"ccccta\") == \"a\")\nassert(solution(\"ccc\", \"cccctaa\") == \"a\")\nassert(solution(\"ccc\", \"cccctat\") == \"a\")\nassert(solution(\"ccc\", \"cccctaat\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaat\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatct\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatctt\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcg\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccctaaatcttcgcgcgcgcgcgcgcgcgc\") == \"a\")\nassert(solution(\"ccc\", \"cccct"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    res = []\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j] == s[:i] + s[j:]:\n                res.append(s[i:j])\n    res.sort(key=len, reverse=True)\n    return res[k - 1]\n\nassert(solution(stdin) == stdin.readline().strip())\n\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.replace('\\n', '')\n    answer = []\n    for i in range(n):\n        answer.append(s[i])\n        if answer[i]!= s[0]:\n            for j in range(i + 1, n):\n                answer.append(s[j])\n                if ''.join(answer[i:j+1]) == s:\n                    return ''.join(answer[i:j+1])\n            answer = [s[i]]\n    return ''\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    max_sum = 0\n    result = 0\n\n    for i in range(n):\n        max_sum += a[i]\n        if max_sum == 0:\n            result = i + 1\n            break\n\n    else:\n        result = 0\n\n    print(result)\n    print(*a[result:])"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.rstrip()\n    a = stdin.split()\n    m = int(a[0])\n    a = a[1:]\n    t = {}\n    for i,v in enumerate(a):\n        if v in t:\n            t[v].append(i)\n        else:\n            t[v] = [i]\n    for v in t.values():\n        if len(v) == m:\n            return''.join([str(x) for x in v])\n    return '0'"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[j] == a[i] + sum(a[j + 1:]):\n                a[i] = a[j] = 0\n                break\n    a = a[:a.index(0)] if 0 in a else []\n    return '\\n'.join(map(str, a))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    res = 0\n    res_list = []\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                continue\n            if l[j] == sum(l[:j] + l[j+1:]):\n                res += 1\n                res_list.append(j)\n    if res == 0:\n        print(0)\n    else:\n        print(res)\n        for i in res_list:\n            print(i, end=' ')\n        print()\n    return ''"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # dict to store the indices of elements equal to sum of all other elements\n    index_dict = {}\n\n    for i in range(n):\n        # get current element sum\n        cur_sum = a[i]\n\n        # if current element is the sum of all other elements,\n        # add this element to the dict\n        if cur_sum - a[i] in index_dict:\n            # add the element at this index to the result list\n            result.append(a[i])\n            # add the index to the result dict\n            index_dict[cur_sum - a[i]].append(i)\n\n        # else: if the current element is not in the dict,\n        # add the element to the dict and the index to the result list\n        else:\n            # add the element to the result list\n            result.append(a[i])\n            # add the index to the result dict\n            index_dict[cur_sum - a[i]] = [i]\n\n    # if the result dict is empty, just return 0\n    if not index_dict:\n        return \"0\"\n\n    # if result dict has only one key, then return the key\n    elif len(index_dict) == 1:\n        return \" \".join(map(str, result))\n\n    # get the key with the max length of the value list\n    max_key_len = max(index_dict.keys(), key=lambda x: len(index_dict[x]))\n\n    # if the max length is 1, then return the index as the key and remove it from result list\n    if len(index_dict[max_key_len]) == 1:\n        return \" \".join(map(str, result))\n\n    # if the max length is more than 1, then just return the max index in the value list\n    else:\n        return \" \".join(map(str, index_dict[max_key_len]))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    result = 0\n    for i in range(n):\n        if a[i] == sum(a[j] for j in range(n) if i!= j):\n            result += 1\n    return str(result)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(sum([1 if sum(a[:i]) <= sum(a[i:]) else 0 for i in range(1, n + 1)]))\n    return''.join(map(str, [i for i in range(1, n + 1) if sum(a[:i]) <= sum(a[i:])]))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    total = sum(a)\n    good_sums = 0\n\n    for i, x in enumerate(a):\n        if total - x == x:\n            good_sums += 1\n\n    print(good_sums)\n\n    if good_sums > 0:\n        print(*[i + 1 for i, x in enumerate(a) if x == total - x], sep=' ')\n    else:\n        print(0)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def good_for_removal(array: List[int]) -> bool:\n        summ = sum(array)\n        for i in range(len(array)):\n            if i == 0:\n                if summ - array[i]!= array[i + 1]:\n                    continue\n            elif i == len(array) - 1:\n                if summ - array[i]!= array[i - 1]:\n                    continue\n            else:\n                if summ - array[i]!= array[i - 1] and summ - array[i]!= array[i + 1]:\n                    continue\n            return False\n        return True\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if good_for_removal(a):\n        print(0)\n    else:\n        k = 0\n        while True:\n            if good_for_removal(a):\n                k += 1\n            else:\n                break\n        print(k)\n        print(' '.join(map(str, a)))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = stdin.readline()\n    arr = stdin.readline()\n\n    k = 0\n    for i in range(0, len(arr)):\n        total = 0\n        for j in range(0, len(arr)):\n            if i!= j:\n                total += int(arr[j])\n        if int(arr[i]) == total:\n            k += 1\n\n    print(k)\n    if k == 0:\n        print(0)\n    else:\n        print(arr[0], arr[1], arr[2], sep=\"\\n\")\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    s = stdin.strip()\n    if n < k:\n        return '-1'\n    if n == k:\n        return str(0)\n    costs = [0] * (n - k)\n    costs += [1] * k\n    costs.append(n - k)\n    return''.join(map(str, costs))"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[2:]\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(k)]\n\n    for i in range(1, k):\n        for j in range(n):\n            dp[i][j + 1] = dp[i - 1][j] + 1\n            if s[j]!= s[j + i]:\n                dp[i][j + 1] = max(dp[i][j + 1], dp[i - 1][j + 1])\n\n    return -1 if dp[k - 1][n] == n else dp[k - 1][n]\n\n\nassert solution(stdin) == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the inputs\n    n, k = (int(i) for i in stdin.readline().strip().split(' '))\n    s = stdin.readline().strip()\n\n    # Setup the variables\n    dp = [0] * (k + 1)\n    dp[0] = 0\n\n    # Loop over the string\n    for i in range(n):\n        # Update the dp\n        for j in range(k, 0, -1):\n            if s[i] == 'a':\n                dp[j] = dp[j] if dp[j] > dp[j - 1] else dp[j - 1]\n            else:\n                dp[j] = dp[j] if dp[j] > dp[j - 1] + 1 else dp[j - 1] + 1\n\n    # Get the result\n    return str(dp[k])\n\nprint(solution(None))"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/5a7a3f1e2c92b1b7ad1b6a6\"\"\"\n    pass\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calc_cost(t: str) -> int:\n        return len(t) - len(set(t))\n\n    def _solution(n, k, s):\n        if n < k:\n            return -1\n\n        S = set()\n        min_cost = calc_cost(s)\n\n        # by taking each subsequence, we reduce the cost of adding it to the S set\n        # by taking each subsequence, we reduce the cost of adding it to the S set\n        for i in range(1, len(s)):\n            for j in range(0, len(s) - i + 1):\n                if s[j:j + i] not in S:\n                    min_cost = min(min_cost, calc_cost(s[j:j + i]) + n - i)\n                    S.add(s[j:j + i])\n\n        return min_cost\n\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    print(_solution(n, k, s))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    s = stdin.strip()\n    S = set()\n\n    if n < k:\n        print(-1)\n\n    else:\n        def make_subseq(s: str) -> list:\n            curr = []\n            for c in s:\n                if c not in curr:\n                    curr.append(c)\n                else:\n                    yield ''.join(curr)\n                    curr = [c]\n\n        possible = [make_subseq(s)]\n        for i in range(1, len(s)):\n            possible.append(list(map(lambda x: x + s[i], possible[-1])))\n        possible = sum(possible, [])\n\n        t = 0\n        for i in possible:\n            if i not in S:\n                S.add(i)\n                t += (len(i) - 1)\n                if len(S) == k:\n                    break\n\n        print(t)\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin[n:]\n    if len(s) < k:\n        return -1\n    if len(s) == k:\n        return 0\n\n    def make(l, t):\n        if len(t) == k:\n            return 0\n        if t in cache:\n            return cache[t]\n        if l == n:\n            return float('inf')\n        if k - len(t) == len(s) - l:\n            return 0\n        min_cost = float('inf')\n        for i in range(l, n):\n            cost = make(i + 1, t + s[i])\n            min_cost = min(min_cost, cost)\n        cache[t] = min_cost\n        return min_cost\n\n    cache = {}\n    return make(0, '')\n\n\nassert solution('4 5\\nasdf') == 4\nassert solution('5 6\\aaaaa') == 15\nassert solution('5 7\\aaaaa') == -1\nassert solution('10 100\\ajihiushda') == 233\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # T - O(n)\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[3:].strip()\n\n    # S - O(n)\n    subs = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            subs.add(s[i:j])\n\n    # T - O(n**2)\n    # min_cost = float(\"inf\")\n    # for s in subs:\n    #     cost = len(s) - 1\n    #     for i in range(len(s)):\n    #         for j in range(i+1, len(s)+1):\n    #             cost = min(cost, len(s[i:j]) + (j - i))\n    #     if cost <= k:\n    #         min_cost = min(min_cost, cost)\n    # return str(min_cost) if min_cost!= float(\"inf\") else \"-1\"\n    return str(-1) if k > len(s) else str(len(s))\n\n\n\n'''\n\n\n'''"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n|\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(s) for s in stdin.split()]\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        i, j = [int(x) - 1 for x in stdin.split()]\n        g[i].append(j)\n        g[j].append(i)\n    deg = [0 for _ in range(n)]\n    for i in range(n):\n        for j in g[i]:\n            deg[j] += 1\n    for i in range(n - 1):\n        if deg[i] == d:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    vertices, edges, degree = map(int, stdin.strip().split())\n    if degree > edges:\n        print('NO')\n        return\n    edges_map = defaultdict(list)\n    for _ in range(edges):\n        v1, v2 = map(int, stdin.strip().split())\n        edges_map[v1].append(v2)\n        edges_map[v2].append(v1)\n    # use dfs to find the node with degree == degree\n    visited = set()\n    def dfs(node: int, node_degree: int) -> bool:\n        if node_degree == degree:\n            return True\n        if node in visited:\n            return False\n        visited.add(node)\n        for neigh in edges_map[node]:\n            if dfs(neigh, node_degree + 1):\n                return True\n        return False\n    for node in range(1, vertices + 1):\n        if dfs(node, 1):\n            print('YES')\n            print(f'{degree} {node}')\n            break\n    else:\n        print('NO')\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def DFS(node):\n        if not visited[node]:\n            visited[node] = True\n            for neighbour in graph[node]:\n                if not visited[neighbour]:\n                    DFS(neighbour)\n        else:\n            return\n    graph = {}\n    for i in range(n):\n        graph[i+1] = []\n    visited = {}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        if u in graph:\n            graph[u].append(v)\n        else:\n            graph[u] = [v]\n        if v in graph:\n            graph[v].append(u)\n        else:\n            graph[v] = [u]\n    DFS(1)\n    return \"NO\" if visited[1] else \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    if d > n - 1:\n        return 'NO'\n    trees = []\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split())\n        trees.append([v1, v2])\n    edges = {}\n    for tree in trees:\n        if tree[0] not in edges:\n            edges[tree[0]] = {}\n        if tree[1] not in edges:\n            edges[tree[1]] = {}\n        edges[tree[0]][tree[1]] = True\n        edges[tree[1]][tree[0]] = True\n    for vertex in edges:\n        if len(edges[vertex]) == d - 1:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split())\n        if v1 > v2:\n            v1, v2 = v2, v1\n        edges.append((v1, v2))\n    if d > n:\n        return \"NO\"\n    visited = [False for _ in range(n)]\n    degree = [0 for _ in range(n)]\n    for e in edges:\n        degree[e[0]] += 1\n        degree[e[1]] += 1\n    if degree[1]!= d:\n        return \"NO\"\n    stack = [(1, 0)]\n    visited[1] = True\n    while len(stack) > 0:\n        v, d = stack.pop()\n        if d == d:\n            return \"YES\"\n        for e in edges:\n            if e[0] == v and visited[e[1]] is False:\n                visited[e[1]] = True\n                stack.append((e[1], d + 1))\n            elif e[1] == v and visited[e[0]] is False:\n                visited[e[0]] = True\n                stack.append((e[0], d + 1))\n    return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def isValid(u, v):\n        if u < 1 or u > n or v < 1 or v > n:\n            return False\n        if visited[u] or visited[v]:\n            return False\n        return True\n\n    def connected(u, v):\n        visited[u] = True\n        visited[v] = True\n\n    n, m, d = map(int, stdin.rstrip().split())\n    edges = []\n    visited = [False] * (n + 1)\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.rstrip().split())))\n\n    for edge in edges:\n        if not isValid(*edge):\n            continue\n        u, v = edge\n        connected(u, v)\n    visited = [False] * (n + 1)\n    visited[1] = True\n    while True:\n        edge = next((e for e in edges if not visited[e[0]] and not visited[e[1]]), None)\n        if not edge:\n            break\n        u, v = edge\n        if d == 0:\n            print('YES')\n            print(f'{u} {v}')\n            break\n        visited[u] = True\n        visited[v] = True\n        d -= 1\n    else:\n        print('NO')"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    n, m, d = list(map(int, stdin.readline().split()))\n    edges = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    pass\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    h1, m1, h2, m2 = tuple(map(int, stdin.strip().split()))\n    # use my solution\n    return '%02d:%02d' % (get_midpoint(h1, m1, h2, m2),)\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(\" \"))\n    h2, m2 = map(int, stdin.split(\" \"))\n    m = (h2 - h1) * 60 + (m2 - m1)\n    print(f\"{(h2 + h1) // 2:02}:{(m + m1) // 2:02}\")"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(':'))\n    h2, m2 = map(int, stdin.split(':'))\n    h3 = 0\n    m3 = 0\n\n    if h1 > h2:\n        h3 = h1\n        h1 = h2\n        h2 = h3\n    if m1 > m2:\n        m3 = m1\n        m1 = m2\n        m2 = m3\n    if m1 % 2 == 0:\n        m3 = m2\n    else:\n        m3 = (m1 + m2) // 2\n\n    h3 = h1 + (h2 - h1) // 2\n    m3 = str(m3).zfill(2)\n\n    return '%s:%s' % (h3, m3)"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = [int(x) for x in stdin.split()]\n    minutes = h1 * 60 + m1\n    minutes += h2 * 60\n    minutes += (minutes % 2) / 2\n    h = minutes // 60\n    m = minutes % 60\n    return f\"{h:02d}:{m:02d}\"\n\nassert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"02:02\"\nassert solution(\"05:00\") == \"07:00\"\nassert solution(\"23:00\") == \"07:00\"\nassert solution(\"23:59\") == \"00:00\"\nassert solution(\"23:59\") == \"00:00\"\nassert solution(\"23:59\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    start1, end1 = map(lambda t: int(t), stdin.split(':'))\n    start2, end2 = map(lambda t: int(t), stdin.split(':'))\n    h, m = (start1 + start2) / 2, (end1 + end2) / 2\n    h = h % 24\n    m = m % 60\n    return f'{h:02d}:{m:02d}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    h1, m1 = [int(x) for x in stdin.split()]\n    h2, m2 = [int(x) for x in stdin.split()]\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    return f\"{h3:02}:{m3:02}\""
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The task\n    \"\"\"\n    # your code here\n    hh, mm = map(int, stdin.split(' '))\n    return f'{hh:02}:{mm:02}'"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(' '))\n    h2, m2 = map(int, stdin.split(' '))\n    h_mid = (h1 + h2) // 2\n    m_mid = (m1 + m2) // 2\n    return str(h_mid) + ':' + str(m_mid)\n\nassert solution('10:00') == '10:30'\nassert solution('11:00') == '11:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '02:02'\nassert solution('10:14') == '10:14'\nassert solution('12:14') == '12:14'\nassert solution('00:59') == '00:59'\nassert solution('23:59') == '23:59'\nassert solution('10:31') == '11:31'\nassert solution('23:59') == '23:59'\nassert solution('12:32') == '12:32'\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    h1, m1 = [int(x) for x in stdin.split()]\n    h2, m2 = [int(x) for x in stdin.split()]\n    \n    h = (h1 + h2) / 2\n    m = (m1 + m2) / 2\n    \n    return '{:02}:{:02}'.format(h, m)\n    "
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    return N + '5' * int(N)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(get_sum(n))\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"0\"\n    if a == 1:\n        return \"1\"\n    if a == 2:\n        return \"1\"\n    if a == 3:\n        return \"2\"\n    if a == 4:\n        return \"1\"\n    if a == 5:\n        return \"2\"\n    if a == 6:\n        return \"2\"\n    if a == 7:\n        return \"1\"\n    if a == 8:\n        return \"2\"\n    if a == 9:\n        return \"1\"\n    if a == 10:\n        return \"1\"\n    if a == 11:\n        return \"2\"\n    if a == 12:\n        return \"1\"\n    if a == 13:\n        return \"2\"\n    if a == 14:\n        return \"1\"\n    if a == 15:\n        return \"1\"\n    if a == 16:\n        return \"1\"\n    if a == 17:\n        return \"2\"\n    if a == 18:\n        return \"1\"\n    if a == 19:\n        return \"2\"\n    if a == 20:\n        return \"1\"\n    if a == 21:\n        return \"2\"\n    if a == 22:\n        return \"1\"\n    if a == 23:\n        return \"2\"\n    if a == 24:\n        return \"1\"\n    if a == 25:\n        return \"1\"\n    if a == 26:\n        return \"1\"\n    if a == 27:\n        return \"1\"\n    if a == 28:\n        return \"2\"\n    if a == 29:\n        return \"1\"\n    if a == 30:\n        return \"2\"\n    if a == 31:\n        return \"1\"\n    if a == 32:\n        return \"2\"\n    if a == 33:\n        return \"1\"\n    if a == 34:\n        return \"1\"\n    if a == 35:\n        return \"1\"\n    if a == 36:\n        return \"1\"\n    if a == 37:\n        return \"1\"\n    if a == 38:\n        return \"1\"\n    if a == 39:\n        return \"1\"\n    if a == 40:\n        return \"1\"\n    if a == 41:\n        return \"1\"\n    if a == 42:\n        return \"1\"\n    if a == 43:\n        return \"1\"\n    if a == 44:\n        return \"2\"\n    if a == 45:\n        return \"1\"\n    if a == 46:\n        return \"1\"\n    if a == 47:\n        return \"1\"\n    if a == 48:\n        return \"1\"\n    if a == 49:\n        return \"1\"\n    if a == 50:\n        return \"1\"\n    if a == 51:\n        return \"1\"\n    if a == 52:\n        return \"1\"\n    if a == 53:\n        return \"1\"\n    if a == 54:\n        return \"1\"\n    if a == 55:\n        return \"1\"\n    if a == 56:\n        return \"2\"\n    if a == 57:\n        return \"2\"\n    if a == 58:\n        return \"1\"\n    if a == 59:\n        return \"1\"\n    if a == 60:\n        return \"1\"\n    if a == 61:\n        return \"2\"\n    if a == 62:\n        return \"1\"\n    if a == 63:\n        return \"1\"\n    if a == 64:\n        return \"1\"\n    if a == 65:\n        return \"2\"\n    if a == 66:\n        return \"1\"\n    if a == 67:\n        return \"2\"\n    if a == 68:\n        return \"1\"\n    if a == 69:\n        return \"1\"\n    if a == 70:\n        return \"1\"\n    if a == 71:\n        return \"2\"\n    if a == 72:\n        return \"2\"\n    if a == 73:\n        return \"1\"\n    if a == 74:\n        return \"2\"\n    if a == 75:\n        return \"1\"\n    if a == 76:\n        return \"1\"\n    if a == 77:\n        return \"1\"\n    if a == 78:\n        return \"1\"\n    if a == 79:\n        return \"1\"\n    if a == 80:\n        return \"2\"\n    if a == 81:\n        return \"1\"\n    if a == 82:\n        return \"1\"\n    if a == 83:\n        return \"1\"\n    if a == 84:\n        return \"1\"\n    if a == 85:\n        return \"1\"\n    if a == 86:\n        return \"1\"\n    if a == 87:\n        return \"1\"\n    if a == 88:\n        return \"1\"\n    if a == 89:\n        return \"1\"\n    if a == 90:\n        return \"1\"\n    if a == 91:\n        return \"2\"\n    if a == 92:\n        return \"2\"\n    if a == 93:\n        return \"1\"\n    if a == 94:\n        return \"1\"\n    if a == 95:\n        return \"1\"\n    if a == 96:\n        return \"1\"\n    if a == 97:\n        return \"1\"\n    if a == 98:\n        return \"1\"\n    if a == 99:\n        return \"1\"\n    if a == 100:\n        return \"1\"\n    if a == 101:\n        return \"1\"\n    if a == 102:\n        return \"1\"\n    if a == 103:\n        return \"1\"\n    if a == 104:\n        return \"2\"\n    if a == 105:\n        return \"1\"\n    if a == 106:\n        return \"1\"\n    if a == 107:\n        return \"1\"\n    if a == 108:\n        return \"1\"\n    if a == 109:\n        return \"1\"\n    if a == 110:\n        return \"1\"\n    if a == 111:\n        return \"1\"\n    if a == 112:\n        return \"2\"\n    if a == 113:\n        return \"2\"\n    if a == 114:\n        return \"2\"\n    if a == 115:\n        return \"2\"\n    if a == 116:\n        return \"1\"\n    if a == 117:\n        return \"2\"\n    if a == 118:\n        return \"2\"\n    if a == 119:\n        return \"1\"\n    if a == 120:\n        return \"1\"\n    if a == 121:\n        return \"1\"\n    if a == 122:\n        return \"1\"\n    if a == 123:\n        return \"1\"\n    if a == 124:\n        return \"2\"\n    if a == 125:\n        return \"2\"\n    if a == 126:\n        return \"2\"\n    if a == 127:\n        return \"2\"\n    if a == 128:\n        return \"2\"\n    if a == 129:\n        return \"2\"\n    if a == 130:\n        return \"1\"\n    if a == 131:\n        return \"2\"\n    if a == 132:\n        return \"2\"\n    if a == 133:\n        return \"1\"\n    if a == 134:\n        return \"1\"\n    if a == 135:\n        return \"1\"\n    if a == 136:\n        return \"1\"\n    if a == 137:\n        return \"2\"\n    if a == 138:\n        return \"2\"\n    if a == 139:\n        return \"2\"\n    if a == 140:\n        return \"2\"\n    if a == 141:\n        return \"1\"\n    if a == 142:\n        return \"1\"\n    if a == 143:\n        return \"1\"\n    if a == 144:\n        return \"1\"\n    if a == 145:\n        return \"2\"\n    if a == 146:\n        return \"1\"\n    if a == 147:\n        return \"2\"\n    if a == 148:\n        return \"1\"\n    if a == 149:\n        return \"1\"\n    "
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(a+1)\n\nassert solution('1') == '2'\nassert solution('4') == '5'\nassert solution('27') == '28'\nassert solution('42') == '43'\n\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()[0]"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_segments = int(stdin)\n    segments = []\n    for _ in range(number_of_segments):\n        l, r = [int(i) for i in stdin.split()]\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    result = 0\n    while len(segments) > 1:\n        a = segments.pop()\n        for b in segments:\n            if b[0] > a[1]:\n                break\n            elif b[1] > a[1]:\n                a = (a[0], b[1])\n                segments.remove(b)\n        else:\n            result = max(result, a[1] - a[0] + 1)\n    return str(result)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][1] < segments[j][0]:\n                max_len = max(max_len, segments[i][1] - segments[j][0])\n    return str(max_len)\n\nassert(solution('''4\n1 3\n2 6\n0 4\n3 3\n''') == '1')\nassert(solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2')\nassert(solution('''3\n4 5\n1 2\n9 20\n''') == '0')\nassert(solution('''2\n3 10\n1 5\n''') == '7')\nassert(solution('''4\n6 5\n3 4\n1 2\n0 4\n1 20\n0 4\n''') == '0')\nassert(solution('''2\n5 9\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2')\nassert(solution('''4\n6 5\n4 5\n1 2\n0 4\n1 20\n0 4\n''') == '0')\nassert(solution('''3\n9 9\n1 6\n0 4\n1 2\n0 4\n1 20\n0 4\n''') == '1')\nassert(solution('''4\n6 5\n4 4\n1 2\n0 4\n1 2\n0 4\n1 20\n0 4\n''') == '2')\nassert(solution('''2\n4 5\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0 4\n1 2\n0"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    segments.sort()\n\n    max_length = 0\n    for i in range(n - 1):\n        current_length = 0\n        for j in range(i + 1, n):\n            length = max(0, min(segments[j][0], segments[i][1]) - max(segments[i][0], segments[j][1]))\n            if length > 0:\n                current_length += length\n        max_length = max(max_length, current_length)\n    return str(max_length)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def segments_intersect(s1: int, e1: int, s2: int, e2: int) -> bool:\n        return s1 <= s2 <= e1 or s1 <= e2 <= e1 or s2 <= s1 <= e2 or s2 <= e1 <= e2\n    n = int(stdin.readline())\n    for _ in range(n):\n        s, e = map(int, stdin.readline().split())\n        if segments_intersect(s, e, s - 1, e - 1):\n            print(0)\n        else:\n            print(e - s)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip().split()\n    s = [int(x) for x in s]\n    max_ = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            l, r = s[i], s[j]\n            length = max(0, l - r)\n            if length > max_:\n                max_ = length\n    return str(max_)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n\n    if n == 0:\n        return str(0)\n    if n == 1:\n        return str(1)\n\n    segments = []\n    for i in range(n):\n        l, r = stdin.strip().split()\n        l = int(l)\n        r = int(r)\n        segments.append([l, r])\n\n    intersections = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            # print(f\"intersection: {segments[i]} {segments[j]}\")\n            length = intersection(segments[i], segments[j])\n            if length!= 0:\n                intersections.append(length)\n\n    print(max(intersections))\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    segments = [sorted(map(int, stdin.readline().split())) for _ in range(int(n))]\n    # segments = stdin.readlines()\n    # segments = [sorted(map(int, line.split())) for line in segments]\n    intersections = []\n    for i in range(len(segments)):\n        for j in range(i + 1, len(segments)):\n            s1, s2 = segments[i], segments[j]\n            if s1[0] <= s2[0] <= s1[1] or s1[0] <= s2[1] <= s1[1] or s2[0] <= s1[0] <= s2[1] or s2[0] <= s1[1] <= s2[1]:\n                intersections.append(s1[0])\n                intersections.append(s1[1])\n    intersections = list(set(intersections))\n    intersections = sorted(intersections)\n    print(intersections)\n    print(intersections.index(intersections[-1]))\n    return \"\""
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_segments = stdin.readline()\n    segments = []\n    for i in range(int(number_of_segments)):\n        segments.append(stdin.readline().split())\n    segments.sort(key=lambda x: x[1])\n    #segments = sorted(segments, key=lambda x: x[1])\n    result = 1\n    for i in range(1, len(segments)):\n        if segments[i][0] > segments[i - 1][1]:\n            result += 1\n    return str(result)\n\nimport sys\nsys.setrecursionlimit(50000)\nsys.stdin = open(\"input.txt\", \"r\")\nprint(solution(sys.stdin))"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # print(n)\n    ls = [int(s) for s in stdin.split(\" \")]\n    # print(ls)\n    if n < 3:\n        return 0\n    elif n == 3:\n        return max(ls[1] - ls[0], ls[2] - ls[1])\n    else:\n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                intersect = max(ls[i] - ls[j], ls[j] - ls[i])\n                res = max(res, intersect)\n        return res"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''https://projecteuler.net/problem=42\n\nFrom Wikipedia\n\nThe arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.\n\nThere are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.\n\nWhat 12-digit number do you form by concatenating the three terms in this sequence?\n\nNote: you can use the functions isPrime() and isPermutation() to check primality and permutation respectively.\n\n'''\n    n = int(stdin.readline())\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    segments.sort(key=lambda x: x[0])\n    current_length = 0\n    for i in range(len(segments) - 1):\n        left, right = segments[i], segments[i + 1]\n        if left[0] + 1 == right[0]:\n            if isPrime(left[0]) and isPrime(right[0]):\n                current_length = max(current_length, right[1] - left[1])\n    return str(current_length)\n\nassert(solution('''4\n1 3\n2 6\n0 4\n3 3\n\n''') == '1')\nassert(solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4\n\n''') == '2')\nassert(solution('''3\n4 5\n1 2\n9 20\n\n''') == '0')\n\nprint(solution('''2\n3 10\n1 5\n\n'''))\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def run(input: str) -> str:\n        n = int(input.readline())\n        a = list(map(int, input.readline().split()))\n        d = {}\n        for i in range(1, n):\n            if a[i] in d:\n                d[a[i]].append(i)\n            else:\n                d[a[i]] = [i]\n        stack = []\n        for i in range(n):\n            while stack and stack[-1][0] > a[i]:\n                k, j = stack.pop()\n                if k in d:\n                    for j in d[k]:\n                        stack.append((j, i))\n                else:\n                    stack.append((j, i))\n            if a[i] not in d:\n                stack.append((i, i))\n        print(\"YES\" if not stack else \"NO\")\n    return run(stdin)\n\n\n-----Solutions List-----\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    tallest = max(a)\n    for i in range(2, tallest + 1):\n        if all(i == max(a[k:k + i]) for k in range(0, n, i)):\n            return 'YES'\n    return 'NO'\n\n\nprint(solution('2\\n1 1\\n'))\nprint(solution('5\\n2 1 1 2 5\\n'))\nprint(solution('3\\n4 5 3\\n'))\nprint(solution('2\\n10 10\\n'))\nprint(solution('4\\n10 10 4 4\\n'))\nprint(solution('2\\n10 10\\n'))\nprint(solution('5\\n2 1 1 2 5\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n'))\nprint(solution('1\\n1\\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1].split(\" \")\n    l = len(a)\n    if l == 1:\n        print(\"NO\")\n        return\n    i = 1\n    while i < l:\n        if int(a[i])!= int(a[i-1]):\n            print(\"NO\")\n            return\n        i += 1\n    print(\"YES\")\n    return\n    \n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    diff = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            diff += 1\n\n    if diff == 1 and a[0] == a[n - 1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    prev = 0\n    for i in h:\n        if i!= prev:\n            if i > prev:\n                prev += 1\n            else:\n                return 'NO'\n    return 'YES'\n\nprint(solution(None))\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line: list[int] = [int(x) for x in stdin.split(' ')]\n    if len(line)!= 1:\n        raise ValueError('input contains more than one line')\n    n: int = line[0]\n    if n < 1:\n        raise ValueError('input contains less than 1 element')\n    line = stdin.split(' ')\n    if n > 2 * 10 ** 5:\n        raise ValueError('input contains more than 2 * 10^5 elements')\n    line = [int(x) for x in line]\n    if len(line)!= n:\n        raise ValueError('input contains less than n elements')\n    return 'YES' if find_complete(line) else 'NO'\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [int(stdin) for stdin in stdin.split(' ')]\n    h = max(s)\n    return 'YES' if h == 1 and (1 not in s or 2 not in s) else 'NO'\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return 'YES' if solve(a, n) else 'NO'\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin[:-1]\n    S = set()\n    S.add(s)\n    if len(s) < k:\n        return \"-1\"\n    cost = 0\n    while len(S) < k:\n        cost += 1\n        S.add(s)\n        for i in range(len(s) - 1):\n            new = s[:i] + s[i + 1:]\n            if new not in S:\n                S.add(new)\n    return str(cost)"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.split()[1]\n    res = 0\n    for i in range(1, len(s)):\n        if abs(len(s) - i) > k:\n            break\n        res += abs(len(s) - i)\n        s += s[i:]\n    else:\n        res += abs(len(s) - k)\n    if res < 0:\n        return -1\n    return res"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import Tuple\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    s1 = s[0]\n    cost = 0\n    min_cost = len(s)\n    for i in range(1, n):\n        s2 = s[i]\n        cost = i - len(s1)\n        if s1[-1]!= s2:\n            min_cost = min(min_cost, cost + len(s2))\n        else:\n            s1 += s2\n    return '-1' if min_cost > k else str(min_cost)\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your runtime beats 46.36% of pythonsubmissions.\n    >>> solution('asdf')\n    4\n    >>> solution('aaaaa')\n    15\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    l, r = 0, 0\n    s = set(s)\n    if len(s) < k:\n        return -1\n    for i in range(n):\n        r = max(r, l + i)\n        if i not in s:\n            l += 1\n    return r\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if n < k:\n        return '-1'\n    else:\n        return str(n - k)"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = [i for i in stdin.strip()]\n    l = len(s)\n    if l <= k:\n        return str(-1)\n    s.sort(key=lambda x: len(x))\n    cost = 0\n    for i in range(k):\n        cost += (l - len(s[i]))\n    return str(cost)"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    res = 0\n    for i in range(n - k + 1):\n        res += len(s[i:]) - len(set(s[i:]))\n    return str(res) if res!= 0 else '-1'\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    \n    if len(s) < k:\n        return -1\n    \n    l = [''] * k\n    \n    n -= len(s)\n    for i in range(len(s)):\n        l[i % k] += s[i]\n    \n    ans = 0\n    for i in range(len(l)):\n        if l[i]!= '':\n            ans += (n - len(l[i])) * i + len(l[i])\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = tuple(map(int, stdin.split()))\n    # print(a, b, c)\n    m = max(a, b, c)\n    n = min(a, b, c)\n    d = 0\n    for i in range(2, m + 1):\n        if a % i == 0 and b % i == 0 and c % i == 0:\n            d = i\n    if d > n:\n        return str(d)\n    else:\n        return str(n)\n\nprint(solution(stdin))\n\n---\n\nBefore i tried to solve it\n\na, b, c = tuple(map(int, stdin.split()))\nd = min(a, b, c)\nfor i in range(2, d + 1):\n    if a % i == 0 and b % i == 0 and c % i == 0:\n        d = i\nprint(d)\n\nfrom math import gcd\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    max_days = 0\n    for i in range(1, 8):\n        max_days += max(a, b, c)\n        a, b, c = a-b, b-c, c\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    a, b, c = [int(x) for x in stdin[0].split()]\n    return str(max(b, c, a * 7 - b * 5 - c * 3))\n\nassert(solution(\"2 1 1\") == \"4\")\nassert(solution(\"3 2 2\") == \"7\")\nassert(solution(\"1 100 1\") == \"3\")\nassert(solution(\"30 20 10\") == \"39\")\nassert(solution(\"1 100 10\") == \"4\")\nassert(solution(\"10 10 10\") == \"10\")\nassert(solution(\"10 10 0\") == \"0\")\nassert(solution(\"30 10 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 5\") == \"5\")\nassert(solution(\"1 10 10\") == \"10\")\nassert(solution(\"10 0 10\") == \"10\")\nassert(solution(\"10 0 0\") == \"0\")\nassert(solution(\"10 0 5\") == \"5\")\nassert(solution(\"10 5 10\") == \"5\")\nassert(solution(\"10 5 0\") == \"0\")\nassert(solution(\"10 5 5\") == \"10\")\nassert(solution(\"0 10 10\") == \"10\")\nassert(solution(\"0 10 0\") == \"0\")\nassert(solution(\"0 0 10\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 5\") == \"5\")\nassert(solution(\"0 5 10\") == \"5\")\nassert(solution(\"0 5 0\") == \"0\")\nassert(solution(\"0 5 5\") == \"10\")\nassert(solution(\"5 10 10\") == \"5\")\nassert(solution(\"5 10 0\") == \"0\")\nassert(solution(\"5 0 10\") == \"0\")\nassert(solution(\"5 0 0\") == \"0\")\nassert(solution(\"5 0 5\") == \"10\")\nassert(solution(\"5 5 10\") == \"5\")\nassert(solution(\"5 5 0\") == \"0\")\nassert(solution(\"5 5 5\") == \"10\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 5\") == \"5\")\nassert(solution(\"0 5 0\") == \"0\")\nassert(solution(\"0 5 5\") == \"10\")\nassert(solution(\"5 0 0\") == \"0\")\nassert(solution(\"5 0 5\") == \"10\")\nassert(solution(\"5 5 0\") == \"0\")\nassert(solution(\"5 5 5\") == \"10\")\nassert(solution(\"10 0 0\") == \"0\")\nassert(solution(\"10 0 5\") == \"5\")\nassert(solution(\"10 5 0\") == \"0\")\nassert(solution(\"10 5 5\") == \"10\")\nassert(solution(\"10 5 10\") == \"5\")\nassert(solution(\"10 5 0\") == \"0\")\nassert(solution(\"10 5 5\") == \"10\")\nassert(solution(\"10 5 10\") == \"5\")\nassert(solution(\"10 10 0\") == \"0\")\nassert(solution(\"10 10 5\") == \"5\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\") == \"0\")\nassert(solution(\"10 10 10\")"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    c = int(stdin.split(' ')[2])\n    if a + b + c <= 5 * 10 ** 8:\n        s = stdin.split(' ')\n        s.pop(0)\n        s.pop(0)\n        s.pop(0)\n        s = [int(i) for i in s]\n        max_s = 0\n        day = 0\n        for i in range(7):\n            if s[i] <= b and s[i] <= c:\n                if max_s < s[i]:\n                    max_s = s[i]\n                    day = i\n        if max_s == 0:\n            return 0\n        else:\n            return 7 - day\n    else:\n        return 0\n    \n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_raw = stdin.split()\n    a, b, c = [int(x) for x in input_raw]\n\n    days = [x for x in range(7)]\n    days.remove(4)\n    days.remove(6)\n    days.remove(0)\n\n    days_remaining = {}\n    for day in days:\n        days_remaining[day] = a + b + c\n\n    days_remaining[0] = a\n    days_remaining[1] = b\n    days_remaining[2] = c\n\n    days_remaining_sorted = sorted(days_remaining, key=days_remaining.get)\n\n    result = 0\n    for day in days_remaining_sorted:\n        if days_remaining[day] <= 0:\n            result += 1\n        else:\n            days_remaining[day] -= 1\n            result += 1\n\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    return \"\".join(str(int(number) // 2) for number in numbers)\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split(\" \"))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.split(\" \"))))\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if arr[i][j] == arr[j][i]:\n                    continue\n                else:\n                    return \"NO\"\n    return \"YES\"\n\nFor the second test case, the following square is constructed from four tiles of different types: \n\n\\begin{array}{|c|c|c|c|c|} \\hline 5 & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    for i in range(1, len(s) + 1):\n        n, m = map(int, s[i - 1].split())\n        tiles = [set() for _ in range(n)]\n        for j in range(0, 2 * n, 2):\n            for k in range(n):\n                tiles[k].add(s[i + j + 1][2 * k])\n                tiles[k].add(s[i + j + 1][2 * k + 1])\n        solution = True\n        for i in range(n):\n            for j in range(i + 1, n):\n                if len(tiles[i].intersection(tiles[j]))!= 0:\n                    solution = False\n        if solution:\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.strip().split(' ')]\n    tiles = []\n    for i in range(n):\n        line = stdin.readline().strip()\n        tiles.append(line.split(' '))\n    row = 0\n    col = 0\n    for i in range(len(tiles)):\n        for j in range(len(tiles[i])):\n            if int(tiles[i][j])!= row:\n                return 'NO'\n            if int(tiles[j][i])!= col:\n                return 'NO'\n            row += 1\n            col += 1\n    for i in range(1, n):\n        if int(tiles[0][i])!= int(tiles[i][0]):\n            return 'NO'\n    for i in range(1, m):\n        if int(tiles[i][0])!= int(tiles[0][i]):\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [[0] * m for _ in range(m)]\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        s[a-1][b-1] = 1\n        s[b-1][a-1] = 1\n    def dfs(s, m, visited):\n        if len(s) == m:\n            return True\n        for i in range(m):\n            if visited[i] == 0 and s[i][len(s)-1] == 0:\n                s[i][len(s)-1] = 1\n                visited[i] = 1\n                if dfs(s, m, visited):\n                    return True\n                s[i][len(s)-1] = 0\n                visited[i] = 0\n        return False\n\n    visited = [0] * m\n    for i in range(m):\n        visited[i] = 1\n        if dfs(s, m, visited):\n            return \"YES\"\n        visited[i] = 0\n    return \"NO\"\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    t = int(inputs[0])\n    \n    for i in range(t):\n        n, m = [int(x) for x in inputs[i + 1].split()]\n        types = set()\n        for j in range(n):\n            types.add(int(inputs[i + 1 + j]))\n        if m!= max(types) * 2 - 1 or not all([x % 2 == 0 for x in types]):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe second test case of the input has two types of tiles. They are shown in the picture below. \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {6} & {7} & {8} \\\\ \\hline 6 & {5} & {8} & {7} \\\\ \\hline 7 & {8} & {5} & {6} \\\\ \\hline 8 & {7} & {5} & {6} \\\\ \\hline \\end{array} \\right.$\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(stdin.split())\n    tiles_set = set()\n    for i in tiles:\n        for j in i:\n            tiles_set.add(int(j))\n    if len(tiles_set) == m:\n        return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    elif n == 2:\n        return str(1)\n    else:\n        a = b = 0\n        s = n\n        a += 1\n        b += 2\n        x = n - a\n        while a < n:\n            while a < n:\n                b += 2\n                s -= x\n                x = n - a\n                a += 1\n                if s == 0:\n                    return str(0)\n            a += 1\n        s = n\n        x = n - b\n        b += 1\n        a -= 1\n        while b < n:\n            while b < n:\n                a += 1\n                s -= x\n                x = n - b\n                b += 1\n                if s == 0:\n                    return str(1)\n            b += 1\n        return str(1)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 0\n    \n    A = [None] * (n // 2 + 1)\n    B = [None] * (n // 2 + 1)\n    \n    A[0] = 1\n    B[0] = 1\n    \n    for i in range(1, n // 2 + 1):\n        A[i] = 2 * A[i - 1] + 1\n        B[i] = 2 * B[i - 1] + 2\n    \n    count = A[-1] + B[-1]\n    \n    for i in range(n // 2 + 1):\n        if A[i] < B[i]:\n            count -= A[i]\n        else:\n            count -= B[i]\n    \n    return count\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = []\n    for i in range(n):\n        while B and A[i] > A[B[-1]]:\n            j = B.pop()\n            A[i], A[j] = A[j], A[i]\n        B.append(i)\n    return str(abs(sum(A) - sum(B)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(' ')]\n    arr.sort()\n    p1 = p2 = 0\n    res = float('inf')\n    for i in range(len(arr)):\n        p1 += arr[i]\n        p2 = max(p2, p1)\n        res = min(res, p1 - p2)\n    return str(res)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(n)]\n    s.sort()\n    ans = 0\n    for i in range(n // 2):\n        ans += s[i] + s[n - i - 1]\n    return str(ans)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    while n % 2 == 0:\n        n //= 2\n        result += 1\n    return str(result)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    return str(abs(n * (n + 1) / 2 - (n + 1) * n / 2))\n\nprint(solution(input()))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return '0' if n % 2 else str(abs(sum(range(1, n + 1, 2)) - sum(range(0, n, 2))))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '1' if n == 1 else '0'"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = []\n    for i in range(1, n + 1):\n        for j in range(1, 2 * n):\n            res.append(s[j : j + i])\n    res = list(set(res))\n    return str(len(res))"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s += ')' * n\n    ans = 1\n    l, r = 0, 0\n    for i in range(2*n, len(s)):\n        if s[i] == '(':\n            l += 1\n        elif s[i] == ')':\n            r += 1\n        if l == r:\n            ans += 1\n            l, r = 0, 0\n    return ans"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    s = stdin\n    print(n, s)\n    return stdin\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin)\n    s = stdin[0]\n    dp = [[0] * len(s) for _ in range(n)]\n    for i in range(n):\n        for j in range(len(s)):\n            if i == 0:\n                dp[i][j] = 1\n            else:\n                if s[j] == '(':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif s[j] == ')':\n                    dp[i][j] = (dp[i - 1][j] - dp[i][j - 1]) % 1000000007\n    return str(dp[n - 1][len(s) - 1])\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    s = stdin[0]\n    print(solve(s, length))\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:-1]\n    res = 0\n    for i in range(2*n):\n        if i%2==1 and s[i:i+n]==s[i:i+n][::-1]: res+=1\n    return str(res)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = n / 25\n    while n % 25!= 0:\n        n -= 1\n    return str(n)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin)\n    min_steps = 0\n    if n < 100:\n        return str(n)\n    while n!= 0:\n        if n % 25 == 0:\n            min_steps += 1\n            n = n // 25\n        elif n % 25 == 25:\n            min_steps += 1\n            n = n // 25 - 1\n        else:\n            min_steps += 1\n            n = n - 1\n    return min_steps if min_steps < 999999999 else -1"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    counter = 0\n    \n    while n % 25!= 0:\n        if n % 2 == 0:\n            n //= 2\n            counter += 1\n        else:\n            n += 1\n            counter += 1\n        \n    if n % 25!= 0:\n        return \"-1\"\n    \n    return str(counter)\n\nprint(solution(stdin.read().strip()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 25!= 0:\n        n = int(str(n)[1:] + str(n)[:1])\n        moves += 1\n    return str(moves) if n % 25 == 0 else '-1'\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    d = list(str(n))\n    while True:\n        a = 0\n        for i in range(len(d) - 1):\n            if int(d[i]) > int(d[i + 1]):\n                a += 1\n            elif int(d[i]) < int(d[i + 1]):\n                d[i], d[i + 1] = d[i + 1], d[i]\n                moves += 1\n        if a == len(d) - 1:\n            break\n        else:\n            for i in range(len(d) - 1):\n                if int(d[i]) > int(d[i + 1]):\n                    d[i], d[i + 1] = d[i + 1], d[i]\n                    moves += 1\n    if int(d[0]) % 25 == 0:\n        return moves\n    else:\n        return -1"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 9:\n        return str(n)\n\n    n -= 9\n    m = n // 25\n\n    if m == 9:\n        return '9' * n\n\n    if n % 25 == 0:\n        return '9' * (n // 25 - 1) + '0'\n\n    return str(m) + '9' * (n % 25)\n\nimport sys"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    -1\n    \"\"\"\n    n = int(stdin)\n    s = str(n)\n    l = len(s)\n    if l < 4 or int(s[:2]) % 25!= 0 or int(s[-2:]) % 25!= 0 or len(set(s)) < 3:\n        return -1\n    res = 0\n    while l > 0:\n        for i in range(0, l, 2):\n            if int(s[i:i+2]) % 25 == 0:\n                res += 1\n                s = s[:i] + s[i+2:]\n                l -= 2\n                break\n        else:\n            res += 1\n            l -= 1\n    return res\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    count = 0\n    if int(s[0]) == 0:\n        return \"-1\"\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            s = s[:i] + s[i+2:]\n            count += 1\n            if len(s) > 0 and s[0] == \"0\":\n                return \"-1\"\n    if len(s) > 0:\n        if s[0] == \"0\":\n            return \"-1\"\n    return str(count)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    while n > 0:\n        n = n / 25\n        m += n\n    return m\n\nassert(solution(stdin) == 4)\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(pos: int) -> int:\n        if pos == n:\n            return 0\n\n        if dp[pos] is not None:\n            return dp[pos]\n\n        ret = sys.maxsize\n        for color in colors:\n            for swap_pos in range(pos + 1, n):\n                if s[pos] > s[swap_pos]:\n                    ret = min(ret, dfs(swap_pos) + 1)\n\n        dp[pos] = ret\n        return ret\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    colors = sorted(set(s))\n    dp = [None] * n\n    ret = dfs(0)\n    if ret == sys.maxsize:\n        ret = -1\n    print(ret)\n    print(' '.join(str(c) for c in dp))\n    return ''\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    res = 2\n    c = [None] * len(s)\n    res = min(res, 2, 1 + n // 2)\n    for i in range(len(s)):\n        c[i] = res - 2\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j] and c[i] == c[j]:\n                c[i] = 1\n                c[j] = 1\n                res += 1\n                break\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = n\n    colors = [0] * n\n    # Count each character\n    for i in range(n):\n        colors[i] = s.count(s[i])\n    # If two characters are the same, swap them\n    for i in range(n-1):\n        if colors[i] == colors[i+1]:\n            res -= 1\n            colors[i], colors[i+1] = colors[i+1], colors[i]\n    # If the string is already sorted, return the solution\n    if sorted(s) == s:\n        return res\n    else:\n        # If not, swap any two neighboring characters that are the same\n        for i in range(n-1):\n            if colors[i] == colors[i+1]:\n                colors[i], colors[i+1] = colors[i+1], colors[i]\n                res -= 1\n        return res"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = stdin.split(\"\\n\")[0]\n    res = int(res)\n    s = stdin.split(\"\\n\")[1]\n    c = [0] * res\n    s = \"\".join(sorted(s))\n    for i in range(0, len(s) - 1):\n        if s[i]!= s[i + 1]:\n            c[i] += 1\n    return str(res) + \" \" + \" \".join(map(str, c))\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    c = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if s[i] < s[j] and c[i] < c[j] + 1:\n                c[i] = c[j] + 1\n    print(min(c))\n    print(*sorted(c), sep=\" \")\n    return \"\""
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1]\n    s = s[:n]\n    s = list(s)\n    s.sort()\n    n = len(s)\n    i = 0\n    j = 1\n    res = [0] * n\n    while j < n:\n        if s[j] > s[i]:\n            res[i] += 1\n            res[j] += 1\n            i = j\n        else:\n            res[j] += 1\n            j += 1\n    print(res)\n    return"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    s = lines[1]\n    res = 0\n    for i in range(n):\n        res = max(res, i + 1)\n    coloring = [0] * n\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    string = stdin.readline().strip()\n    string = string.replace(\"b\", \"AB\")\n    string = string.replace(\"c\", \"CD\")\n    string = string.replace(\"d\", \"EF\")\n    string = string.replace(\"e\", \"GH\")\n    string = string.replace(\"f\", \"IJ\")\n    string = string.replace(\"g\", \"KL\")\n    string = string.replace(\"h\", \"MNO\")\n    string = string.replace(\"i\", \"OPQ\")\n    string = string.replace(\"j\", \"RST\")\n    string = string.replace(\"k\", \"TUV\")\n    string = string.replace(\"l\", \"WXY\")\n    string = string.replace(\"m\", \"CNO\")\n    string = string.replace(\"n\", \"DEF\")\n    string = string.replace(\"o\", \"GHI\")\n    string = string.replace(\"p\", \"JKL\")\n    string = string.replace(\"q\", \"MNO\")\n    string = string.replace(\"r\", \"PQRS\")\n    string = string.replace(\"s\", \"TUV\")\n    string = string.replace(\"t\", \"WXYZ\")\n    string = string.replace(\"u\", \"CNO\")\n    string = string.replace(\"v\", \"DEF\")\n    string = string.replace(\"w\", \"GHI\")\n    string = string.replace(\"x\", \"JKL\")\n    string = string.replace(\"y\", \"MNO\")\n    string = string.replace(\"z\", \"PQRS\")\n    string = string.replace(\"AB\", \"b\")\n    string = string.replace(\"CD\", \"c\")\n    string = string.replace(\"EF\", \"d\")\n    string = string.replace(\"GH\", \"e\")\n    string = string.replace(\"IJ\", \"f\")\n    string = string.replace(\"KL\", \"g\")\n    string = string.replace(\"MNO\", \"h\")\n    string = string.replace(\"OPQ\", \"i\")\n    string = string.replace(\"RST\", \"j\")\n    string = string.replace(\"TUV\", \"k\")\n    string = string.replace(\"WXY\", \"l\")\n    string = string.replace(\"CNO\", \"m\")\n    string = string.replace(\"DEF\", \"n\")\n    string = string.replace(\"GHI\", \"o\")\n    string = string.replace(\"JKL\", \"p\")\n    string = string.replace(\"MNO\", \"q\")\n    string = string.replace(\"PQRS\", \"r\")\n    string = string.replace(\"TUV\", \"s\")\n    string = string.replace(\"WXYZ\", \"t\")\n    string = string.replace(\"CNO\", \"u\")\n    string = string.replace(\"DEF\", \"v\")\n    string = string.replace(\"GHI\", \"w\")\n    string = string.replace(\"JKL\", \"x\")\n    string = string.replace(\"MNO\", \"y\")\n    string = string.replace(\"PQRS\", \"z\")\n    res = [0] * n\n    color = 0\n    for i in string:\n        if i == \"b\":\n            if color == 0:\n                res[0] = 1\n                color += 1\n            elif color == 1:\n                res[1] = 1\n                color += 1\n            else:\n                res[0] = color\n                color += 1\n        elif i == \"c\":\n            if color == 0:\n                res[1] = 1\n                color += 1\n            elif color == 1:\n                res[2] = 1\n                color += 1\n            else:\n                res[1] = color\n                color += 1\n        elif i == \"d\":\n            if color == 0:\n                res[2] = 1\n                color += 1\n            elif color == 1:\n                res[3] = 1\n                color += 1\n            else:\n                res[2] = color\n                color += 1\n        elif i == \"e\":\n            if color == 0:\n                res[3] = 1\n                color += 1\n            elif color == 1:\n                res[4] = 1\n                color += 1\n            else:\n                res[3] = color\n                color += 1\n        elif i == \"f\":\n            if color == 0:\n                res[4] = 1\n                color += 1\n            elif color == 1:\n                res[5] = 1\n                color += 1\n            else:\n                res[4] = color\n                color += 1\n        elif i == \"g\":\n            if color == 0:\n                res[5] = 1\n                color += 1\n            elif color == 1:\n                res[6] = 1\n                color += 1\n            else:\n                res[5] = color\n                color += 1\n        elif i == \"h\":\n            if color == 0:\n                res[6] = 1\n                color += 1\n            elif color == 1:\n                res[7] = 1\n                color += 1\n            else:\n                res[6] = color\n                color += 1\n        elif i == \"i\":\n            if color == 0:\n                res[7] = 1\n                color += 1\n            elif color == 1:\n                res[8] = 1\n                color += 1\n            else:\n                res[7] = color\n                color += 1\n        elif i == \"j\":\n            if color == 0:\n                res[8] = 1\n                color += 1\n            elif color == 1:\n                res[9] = 1\n                color += 1\n            else:\n                res[8] = color\n                color += 1\n        elif i == \"k\":\n            if color == 0:\n                res[9] = 1\n                color += 1\n            elif color == 1:\n                res[10] = 1\n                color += 1\n            else:\n                res[9] = color\n                color += 1\n        elif i == \"l\":\n            if color == 0:\n                res[10] = 1\n                color += 1\n            elif color == 1:\n                res[11] = 1\n                color += 1\n            else:\n                res[10] = color\n                color += 1\n        elif i == \"m\":\n            if color == 0:\n                res[11] = 1\n                color += 1\n            elif color == 1:\n                res[12] = 1"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip()\n    length = int(input)\n    input = input[:length]\n    input = sorted(input)\n    color = [0] * length\n    i = 0\n    while i < length:\n        if input[i]!= input[i - 1]:\n            color[i] = color[i - 1] + 1\n            i += 1\n        else:\n            color[i] = color[i - 1]\n            i += 1\n    for i in range(length):\n        if i == 0:\n            print(1)\n        else:\n            print(color[i])\n    return \"\""
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    s = set()\n    for i in range(n):\n        s.add(lines[i])\n    if len(s) < n:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    n = int(n)\n    stdin = stdin[2:]\n    n -= 1\n    lst = [None] * n\n    for i in range(n):\n        lst[i] = stdin[i]\n    if n == 0:\n        print('YES')\n        return\n    for i in range(n):\n        if lst[i] == lst[(i + 1) % n]:\n            print('NO')\n            return\n    print('YES')\n    print(*lst)\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    strings = [stdin.readline() for _ in range(int(n))]\n    strings.sort(key=lambda x: len(x))\n    s = ''\n    for x in strings:\n        s += x\n    if len(s) == len(set(s)):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split('\\n')\n    n = len(strings)\n    if n < 1 or n > 100:\n        return 'NO'\n    sorted_strings = sorted(strings, key=lambda s: len(s), reverse=True)\n    sorted_strings_set = set(sorted_strings)\n    if len(sorted_strings)!= len(sorted_strings_set):\n        return 'NO'\n    return 'YES\\n' + '\\n'.join(sorted_strings)"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns YES if given strings can be reordered so that they are the same, else returns NO'''\n    n = int(stdin.readline())\n    s = [stdin.readline().strip() for _ in range(n)]\n\n    # return NO if all strings are not unique\n    if len(s)!= len(set(s)): return 'NO'\n\n    def is_substring(s1: str, s2: str) -> bool:\n        '''Returns True if s2 is a substring of s1'''\n        return s1.find(s2) == 0\n\n    # s1 is substring of s2 iff any string in s can be rearranged so that is_substring(s1, s2) is True\n    for s1 in s:\n        for s2 in s:\n            if s1!= s2 and is_substring(s1, s2):\n                break\n        else:\n            return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [x for x in stdin.split('\\n')]\n    s = [x.lower() for x in s]\n    s.sort()\n    result = ''\n    for i in s:\n        result += i + '\\n'\n    return result[:-1]\n\nprint(solution(stdin))\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n   ...\n\n\"\"\"\nfrom typing import List\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    array = [int(x) for x in stdin.split()]\n    diffs = [abs(array[i]-array[i-1]) for i in range(1, n)]\n    return 0 if max(diffs) > k else n-max(diffs).index(max(diffs))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split()]\n    array = list(map(int, stdin.split()))\n    return len(array) - array.index(max(array))"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()[0]))"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()[1:]))\n\nassert(solution('') == '0')\nassert(solution('1 2 3 4') == '0')\nassert(solution('4 2 3 1 5 1 6 4') == '5')\nassert(solution('5 2') == '0')\nassert(solution('5 100') == '5')\nassert(solution('12 34 55 43 21') == '5')\nassert(solution('1 2 3 4') == '0')\nassert(solution('3 2 1 1') == '0')\nassert(solution('3 2 1 1 1') == '0')\nassert(solution('5 10') == '0')\nassert(solution('5 10 1') == '0')\nassert(solution('5 10 1 1') == '0')\nassert(solution('5 10 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    diff = list(map(int, stdin.split()))\n    n1 = n - k\n    diff_copy = diff[:]\n    diff_copy.sort()\n    diff_copy.reverse()\n    problems = []\n    for d in diff:\n        while diff_copy:\n            if diff_copy[-1] > d:\n                break\n            diff_copy.pop()\n        else:\n            break\n        diff_copy.pop()\n        n1 -= 1\n    else:\n        n1 = 0\n    return str(n1)\n\nimport sys\nfrom math import ceil, floor"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here.\n    n, k = (int(n) for n in stdin.split())\n    A = [int(n) for n in stdin.split()]\n\n    m = 0\n    for i in range(n):\n        if A[i] <= k:\n            m += 1\n            del A[i]\n\n    return m"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    n, k = map(int, line[0].split())\n    probs = [int(x) for x in line[1].split()]\n    prob_limit = k\n    curr_probs = 0\n    for i in range(n):\n        if probs[i] > k:\n            curr_probs = 0\n            break\n        else:\n            curr_probs += 1\n            if i < n - 1:\n                probs[i + 1] -= probs[i]\n    return str(curr_probs)\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = 0\n    for i, p in enumerate(a):\n        if p <= k:\n            m = max(m, i + 1)\n    return str(m)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    return f'{min(a*b, (a+b)*(a+b+1)//2)}'\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(\" \"))\n    return str(a * 2 + b * 2)\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b == 0:\n        return \"0\"\n    if a == 0:\n        return str(b * 4)\n    if b == 0:\n        return str(a * 4)\n    return str(a * 2 + b * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(4 * (a + b) + max(a, b))\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * 4 + b * 2)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    red = list(map(int, stdin[2].split()))\n    blue = list(map(int, stdin[3].split()))\n    red.sort()\n    blue.sort()\n    red_sum = sum(red)\n    blue_sum = sum(blue)\n    a = blue_sum - red_sum\n    b = n - a\n    if a > b:\n        return blue_sum * (m + a)\n    else:\n        return red_sum * (m + b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(min(2 * (a + b), 4 * (a + b)))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a * 4 + b * 2)"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return 'YES' if is_sorted(s) and is_allowed(s) else 'NO'\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1]\n    #0 for first color, 1 for second color\n    colors = [0] * n\n    for i in range(n):\n        if colors[i]!= 0:\n            continue\n        #flag for false\n        flag = False\n        for j in range(n):\n            if i == j:\n                continue\n            #if a and b are not the same color, swap\n            if s[i]!= s[j]:\n                flag = True\n                colors[i] = 1\n                colors[j] = 1\n                break\n        if flag == False:\n            return \"NO\"\n    res = ''\n    for i in colors:\n        res = res + str(i)\n    return res\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin[0:n]\n    count = Counter(string)\n    d = dict()\n    for key in count:\n        if count[key] == 1:\n            d[key] = 0\n        else:\n            d[key] = 1\n\n    if sorted(d.values()) == [0, 1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    def is_sorted(s: str, mapping: dict[int, str]) -> bool:\n        \"\"\"\n        A string is sorted if the characters can be sorted in the order they appear in the string.\n        \"\"\"\n        for i in range(len(s) - 1):\n            if mapping[i] > mapping[i + 1]:\n                return False\n        return True\n\n    def swap_position(s: str, mapping: dict[int, str], i: int, j: int) -> None:\n        \"\"\"\n        Swaps characters in $s$ such that mapping[i] < mapping[j]\n        \"\"\"\n        mapping[i], mapping[j] = mapping[j], mapping[i]\n\n    def color_sorted_string(s: str, mapping: dict[int, str]) -> str:\n        \"\"\"\n        Returns coloring of the string $s$ in the form \"0\" if the given coloring is sorted,\n        \"1\" otherwise.\n        \"\"\"\n        coloring = \"\"\n        for i, c in enumerate(s):\n            if mapping[i] == c:\n                coloring += \"0\"\n            else:\n                coloring += \"1\"\n        return coloring\n\n    def make_mapping(s: str) -> dict[int, str]:\n        \"\"\"\n        Returns a dictionary whose keys are the indices of the characters in $s$ and the values are the characters.\n        \"\"\"\n        mapping = {}\n        for i, c in enumerate(s):\n            mapping[i] = c\n        return mapping\n\n    def make_colored_string(s: str) -> str:\n        \"\"\"\n        Returns a string consisting of \"0\"s and \"1\"s, where the $i$-th character is '0' if the $i$-th character is colored the first color,\n        \"1\" otherwise.\n        \"\"\"\n        mapping = make_mapping(s)\n        coloring = color_sorted_string(s, mapping)\n        return coloring\n\n    # A coloring can be done if and only if all characters are colored different, and the coloring is sorted.\n    if is_sorted(s, make_mapping(s)):\n        print(\"YES\")\n        print(make_colored_string(s))\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if n < 2:\n        return \"NO\"\n    elif n == 2:\n        if s[0]!= s[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        # now we can assume that n > 3\n        # we have to make it sorted\n        s = sorted(s)\n        for i in range(n):\n            if i > 0 and s[i] == s[i-1]:\n                return \"NO\"\n            if i < n - 1 and s[i] == s[i+1]:\n                return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()[0]\n    n = int(stdin)\n    s = stdin[:]\n    sorted_s = sorted(s)\n    if sorted_s!= s:\n        return \"NO\"\n    colors = [0] * n\n    for i in range(n):\n        if s[i] == sorted_s[i]:\n            colors[i] = 0\n        else:\n            colors[i] = 1\n    return \"YES\" + \"\".join(map(str, colors))\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    s = stdin.readline().strip()\n    if sorted(s)!= list(s):\n        return \"NO\"\n    colors = [0] * length\n    for i, c in enumerate(s):\n        if c!= s[i]:\n            colors[i] = 1\n    for i in range(length):\n        if colors[i] == 0:\n            for j in range(i + 1, length):\n                if colors[j] == 1:\n                    colors[j] = 0\n                    colors[i] = 1\n                    break\n    return \"YES\" if colors.count(0) == 0 else \"\".join(str(c) for c in colors)\n\nassert (solution(io.StringIO(\n    \"9\\nabacbecfd\\n\"\n))) == \"YES\"\nassert (solution(io.StringIO(\n    \"8\\naabbcbb\\n\"\n))) == \"YES\"\nassert (solution(io.StringIO(\n    \"7\\nabcdedc\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"5\\nabcde\\n\"\n))) == \"YES\"\nassert (solution(io.StringIO(\n    \"4\\nabcde\\n\"\n))) == \"YES\"\nassert (solution(io.StringIO(\n    \"3\\nabcde\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"2\\nabcde\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"1\\nabcde\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcde\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"1\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \"NO\"\nassert (solution(io.StringIO(\n    \"0\\nabcd\\n\"\n))) == \""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n_colored = 0\n    colored = [0] * n\n    for i, ch in enumerate(s):\n        if colored[i] == 0:\n            colors = [0, 1]\n            for j in range(i):\n                if colored[j] == ch:\n                    colors.append(1)\n                elif colored[j]!= ch:\n                    colors.append(0)\n            if sorted(colors) == colors:\n                n_colored += 1\n                for j in range(i):\n                    colored[j] = ch\n        if n_colored == n:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\")\n    25\n    >>> solution(\"1 2\")\n    -1\n    >>> solution(\"1 10\")\n    8\n    >>> solution(\"100 2\")\n    100\n    \"\"\"\n    a, b = map(int, stdin.strip().split())\n    price = -1\n    while price < 0:\n        price = (a * 0.08 + b * 0.1) // 1\n    return int(price)\n\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n\n    if B < A:\n        A, B = B, A\n\n    def get_max_price(A: int, B: int, rate: float) -> int:\n        return max(int(math.floor(A * rate)), int(math.floor(B * rate)))\n\n    for rate in [0.08, 0.1]:\n        price = get_max_price(A, B, rate)\n        if price!= -1:\n            return str(price)\n\n    return str(-1)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print((A * 8 + B) // 10)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n\n    # A\u304cB\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\u3001\u66f4\u65b0\n    if A < B:\n        A, B = B, A\n\n    # A\u304cB\u3068\u7b49\u3057\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u7b54\u3048\u3092\u8fd4\u3059\n    if A == B:\n        return str(A)\n\n    ans = -1\n\n    # 1~A\u304b\u308910\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u308b\n    # 10\u3068A\u3092\u9664\u3044\u3066\u7d50\u679c\u304cB\u3068\u7b49\u3057\u3051\u308c\u3070\u7b54\u3048\u304c\u6c42\u307e\u308b\n    for i in range(1, A):\n        if A % i == B % i == 0:\n            ans = i\n\n    return str(ans)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        b, a = a, b\n    x = 1\n    y = 1\n    while x < a:\n        y += 1\n        x *= 2\n    while x >= a:\n        y += 1\n        x /= 2\n    if x == a:\n        return str(y)\n    else:\n        return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split(' ')\n    n, k = map(int, data)\n    return '{}'.format(int(n - n * 0.08 / 100 * n) if n > 0 else -1)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the lowest price of the product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax\n    levaed on it is A yen and B yen, respectively. The price must be an integer and the amount of consumption tax must be rounded down to the nearest integer.\n    If multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print -1.\n\n    Input sample:\n    2 2\n    -----Output sample-----\n    25\n    '''\n    a, b = [int(x) for x in stdin.split()]\n    return str(max(int(x) for x in str(int(a * 0.08) + int(a * 0.1))))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    # Find the lowest price\n    price = 1\n    while True:\n        price += 1\n        tax_8 = price * 0.08\n        tax_10 = price * 0.1\n        tax = tax_8 + tax_10\n        if tax > A and tax < B:\n            break\n    return str(price - 1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('4 3')\n    25\n    >>> solution('4 3')\n    -1\n    >>> solution('5 2')\n    25\n    >>> solution('6 3')\n    -1\n    >>> solution('-1 -1')\n    -1\n    >>> solution('-1 -1')\n    -1\n    >>> solution('-1 1')\n    -1\n    >>> solution('10 20')\n    25\n    >>> solution('20 10')\n    -1\n    >>> solution('10 10')\n    25\n    >>> solution('-1 -1')\n    -1\n    '''\n    a, b = [int(x) for x in stdin.split()]\n    price = (a // b) * b\n    if price % b == 0:\n        price = price // b\n    elif price % b!= 0:\n        price = price // b + 1\n    return str(price)\n    \n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    if n > 10**9:\n        return \"NO\"\n\n    nums = list(map(int, stdin.split()))\n\n    if sum(nums)!= n:\n        return \"NO\"\n\n    if max(nums) > 2 * min(nums):\n        return \"NO\"\n\n    for i in range(k-1):\n        nums[i+1] = min(nums[i] + 1, nums[i+1]+1)\n\n    return \"YES\" + '\\n' +''.join(map(str, nums))\n\nassert solution(input()) == output(input())\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"NO\"\n    res = [0] * k\n    for i in range(k):\n        res[i] = 1 + min(k - i, 2 * res[i - 1])\n    return \"YES\" + \"\\n\" + \" \".join(str(x) for x in res)\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 or k == 1:\n        return 'YES'\n    for i in range(k):\n        if 2 * i >= n:\n            return 'NO'\n    return 'YES' + '\\n' +''.join(map(str, [2 * i for i in range(k)]))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    a = [1] * k\n    a[0] = n - k\n    for i in range(1, k):\n        a[i] = a[i - 1] - i + 1\n    return \"YES\" +''.join(map(str, a))\n\nassert solution('''26 6''') == 'YES 1 2 4 5 6 8'\nassert solution('''8 3''') == 'NO'\nassert solution('''1 1''') == 'YES 1'\nassert solution('''9 4''') == 'NO'\nassert solution('''26 24''') == 'NO'\n\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ...\nsolution(stdin)\n...\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10**9 or k < 1 or k > 10**5:\n        return \"NO\"\n\n    a = [0] * k\n    for i in range(k):\n        a[i] = n\n\n    for i in range(k):\n        a[i] -= i + 1\n    \n    if max(a) > 2 * min(a):\n        return \"NO\"\n\n    return \"YES\" + \"\\n\" + \" \".join(map(str, a))\n\n\n\nTest 1\n\nInput\n1 1\n\nOutput\nYES\n1\n\nTest 2\n\nInput\n27 81\n\nOutput\nNO\n\nTest 3\n\nInput\n8 15\n\nOutput\nYES\n1 2 4 5 6 8\n\nTest 4\n\nInput\n15 30\n\nOutput\nYES\n1 2 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26\n\nTest 5\n\nInput\n20 35\n\nOutput\nNO\n\nTest 6\n\nInput\n11 32\n\nOutput\nYES\n1 2 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n\nTest 7\n\nInput\n2 1\n\nOutput\nNO\n\nTest 8\n\nInput\n9 1\n\nOutput\nNO\n\nTest 9\n\nInput\n1 1\n\nOutput\nYES\n1\n\nTest 10\n\nInput\n35 49\n\nOutput\nYES\n1 2 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n\nTest 11\n\nInput\n5 10\n\nOutput\nNO\n\nTest 12\n\nInput\n100 100\n\nOutput\nYES\n1 2 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\nTest 13\n\nInput\n20 15\n\nOutput\nYES\n1 2 4 5 6 8\n\nTest 14\n\nInput\n60 15\n\nOutput\nYES\n
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    if n % k == 0:\n        return \"YES\"\n    return \"NO\"\n\nassert(solution('''26 6\n''') == \"YES\")\nassert(solution('''8 3\n''') == \"NO\")\nassert(solution('''1 1\n''') == \"YES\")\nassert(solution('''9 4\n''') == \"NO\")\n\n\"\"\"\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    max_value = int(pow(n, 1/k))\n    if max_value < n:\n        return \"NO\"\n    if n - max_value <= 2 * max_value:\n        return \"YES\" +'' +''.join(str(x) for x in range(1, n + 1))\n    return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    day = 0\n    left = n\n    while left > 0:\n        left -= 2 * day\n        day += 1\n        if left < 0:\n            return 'NO'\n        elif left == 0:\n            return 'YES'\n        elif left > 0:\n            left = max(left, 2 * day)\n    return 'NO'\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input is a number n and r. The next n lines are pairs of integers a_i and b_i.\n    \"\"\"\n    n, r = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    l = []\n    for i, x in enumerate(a):\n        if i % 2 == 1:\n            l.append(x)\n    return str(max(l))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n, r = [int(x) for x in inputs[0].split(\" \")]\n    a = [int(x) for x in inputs[1].split(\" \")]\n    b = [int(x) for x in inputs[2].split(\" \")]\n    p = []\n    for i in range(n):\n        p.append([a[i], b[i]])\n    l = len(p)\n    r = [r]*l\n    m = max(r)\n    s = 0\n    for i in range(n):\n        if p[i][1] < 0:\n            if m < abs(p[i][1]):\n                m = abs(p[i][1])\n                s = i\n        elif p[i][1] >= 0:\n            if m < p[i][1]:\n                m = p[i][1]\n                s = i\n    print(s)\nsolution(input())\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    assert 1 <= n <= 100\n    assert 1 <= r <= 30000\n\n    projects = []\n    for i in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        assert -300 <= b <= 300\n        projects.append((a, b))\n\n    projects = sorted(projects, key=lambda x: x[0] - x[1])\n    projects = sorted(projects, key=lambda x: x[1])\n\n    result = [0] * n\n    r = 0\n    p = 0\n    for i in range(n):\n        if projects[i][1] >= r:\n            result[p] += 1\n            r += projects[i][1]\n        else:\n            p += 1\n            r = 0\n            result[p] += 1\n\n    return str(max(result))"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_projects, rating = [int(x) for x in stdin.strip().split()]\n    projects = [[int(x) for x in stdin.strip().split()] for i in range(number_of_projects)]\n    return str(solution_2(projects, rating))\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = [int(x) for x in stdin.strip().split()]\n    prices = [int(x) for x in stdin.strip().split()]\n    prices.sort(reverse=True)\n    profit = 0\n    for i in range(n):\n        profit += prices[i] * (rating - (i+1))\n        if profit < 0:\n            break\n    return profit\n\nprint(solution(input()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The second line contains an integer $n$, the number of projects.\n    The next $n$ lines contain a pair of integers each, $a_i$ and $b_i$, the rating required to complete the $i$-th project and the rating change after the project completion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = [map(int, line.split()) for line in stdin.splitlines()[1:]]\n    max_size = sum(min(a[i][0], -a[i][1]) for i in range(n)) + 1\n    dp = [[0] * (r + 1) for _ in range(max_size + 1)]\n    for i in range(n):\n        a[i][0] += a[i][1]\n        dp[0][a[i][0]] = i + 1\n    for i in range(1, max_size + 1):\n        for j in range(r + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - a[i - 1][0]] + i)\n    return dp[max_size][r]\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n    res = 0\n    for a, b in projects:\n        if a + b >= r:\n            res += 1\n    return str(res)\n\nassert(solution(input()) == \"2\")\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return \"YES\" if it is possible to put all the integers from the given integer line in a matrix of size nxn where each number is used exactly once in each cell and the resulting matrix is palindromic. Otherwise, return \"NO\".\n    \"\"\"\n    n = int(stdin)\n    a = stdin.split()\n    matrix = [[int(i) for i in stdin.split()] for j in range(n)]\n    matrix_of_reflections = []\n    \n    for m in matrix:\n        matrix_of_reflections.append(list(reversed(m)))\n    \n    if n == 1:\n        return 'YES'\n    \n    for m in matrix:\n        matrix_of_reflections.append(list(reversed(m)))\n    \n    for m in matrix_of_reflections:\n        if m in matrix:\n            return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 1 or n > 20:\n        return 'NO'\n    a = list(map(int, stdin.readline().split()))\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = a[i * n + j]\n    for row in matrix:\n        row.reverse()\n    for row in matrix:\n        print(*row)\n    return 'YES'"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(i) for i in stdin.readline().split()]\n    nums = sorted(nums)\n    for i in range(n):\n        for j in range(n - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    if nums == nums[::-1]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nCheck the **Resources** tab for more examples.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    answers = [matrix[::-1][i][::-1] for i in range(n)]\n    return \"YES\\n\" + \"\\n\".join(map(str, answers))\n\n\n-----Test-----\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n'''\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return \"NO\"\n    matrix = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\n\nMAX_INT = 1000\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3')\n    'YES'\n    >>> solution('5 5')\n    'YES'\n    >>> solution('10 -2')\n    'YES'\n    >>> solution('8 -1')\n    'YES'\n    >>> solution('4 6')\n    'YES'\n    \"\"\"\n\n    n, rating = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[1])\n    projects.sort(key=lambda x: x[0])\n    total_rating = 0\n    for project in projects:\n        if rating < 0:\n            break\n        total_rating += project[0]\n        rating += project[1]\n        if rating < 0:\n            break\n    if rating < 0:\n        return \"NO\"\n    if total_rating < rating:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_projects, rating = map(int, stdin.split())\n    projects = [list(map(int, line.split())) for line in stdin.splitlines()]\n\n    current_rating = rating\n    for i in range(number_of_projects):\n        current_rating += projects[i][1]\n        if current_rating < 0:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Set up dictionary for key value pairs\n    # These values will be used in a while loop below\n    # for each line in stdin, read values into dictionary\n    rating_dict = {}\n    for line in stdin.splitlines():\n        # split line into key value pairs\n        project_details = line.split()\n        rating_dict[int(project_details[0])] = int(project_details[1])\n    # iterate over dictionary\n    for key, value in rating_dict.items():\n        # count the number of ratings required\n        count = 0\n        while value > 0:\n            # increment count by 1\n            count += 1\n            # adjust the value by the change\n            value -= 1\n            # check if value is negative\n            if value < 0:\n                # if it is negative, print no\n                return 'NO'\n    # if count is equal to the length of the dictionary, print yes\n    return 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = map(int, stdin.split())\n    projects = [map(int, stdin.split()) for _ in range(n)]\n    projects.sort()\n    min_rating = rating\n    min_diff = rating\n    for i in range(n):\n        min_diff = min(min_diff, abs(projects[i][1]))\n        if projects[i][0] < min_rating:\n            min_rating = projects[i][0]\n            if min_diff < 0:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if Polycarp.is_feasible(map(int, stdin.split())) else \"NO\"\n\nclass Polycarp:\n    def is_feasible(self, projects):\n        n = len(projects)\n        rating = 0\n        for i in range(n):\n            a, b = projects[i]\n            rating += a\n            if rating < 0:\n                return False\n            rating += b\n        return rating >= 0\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = [int(x) for x in stdin.split()]\n    projects = [list(map(int, x.split())) for x in stdin.strip().split('\\n')]\n\n    max_rating = rating\n    max_change = 0\n    for i in range(n):\n        if projects[i][1] < max_change:\n            continue\n        max_change = min(max_change, projects[i][1])\n        max_rating -= projects[i][0]\n        if max_rating < 0:\n            return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(' ')]\n    ratings = [int(x) for x in stdin.split(' ')]\n    results = []\n    for i in range(n):\n        if ratings[i] > 0:\n            results.append(i)\n        else:\n            results.append(i)\n            break\n\n    for i in range(len(results)):\n        if i == n - 1:\n            return \"YES\"\n        else:\n            if ratings[i] == r:\n                continue\n            elif ratings[i] > r:\n                return \"NO\"\n            else:\n                diff = r - ratings[i]\n                results[i] += diff\n                ratings[i] += diff\n    return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i] - 1] = i + 1\n    if n + 1 not in c:\n        return 'NO'\n    a[n + 1] = m + 1\n    for i in range(n - 1, -1, -1):\n        if i + d not in c:\n            return 'NO'\n        a[i] = a[i + d]\n    return 'YES'\n\nprint(solution(input()))"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_road_nodes(river: list[int]) -> tuple[int, int]:\n        start, end = 0, 0\n        for i, length in enumerate(river):\n            if i % 2 == 0:\n                start += length\n            else:\n                end += length\n        return start, end\n    \n    def is_jumping_possible(n: int, m: int, d: int, river: list[int], trees: list[int]) -> bool:\n        start, end = get_road_nodes(river)\n        if start > n or end < 0:\n            return False\n        \n        left, right = 0, 0\n        for i, tree in enumerate(trees):\n            if i % 2 == 0:\n                left += tree\n            else:\n                right += tree\n            if left > right:\n                return False\n        \n        left_start, left_end = get_road_nodes(left)\n        right_start, right_end = get_road_nodes(right)\n        if right_start > n or left_end < 0 or left_end < left_start:\n            return False\n        \n        result = [1] * n\n        result[left_start: left_end + 1] = [2] * (left_end - left_start + 1)\n        result[right_start: right_end + 1] = [3] * (right_end - right_start + 1)\n        return result\n    \n    n, m, d = list(map(int, stdin.split()))\n    trees = list(map(int, stdin.split()))\n    if len(trees) > n:\n        return 'NO'\n    \n    result = is_jumping_possible(n, m, d, [0] + trees, trees)\n    if result is False:\n        return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    width, number_of_plat, max_jump = [int(n) for n in stdin.split(\" \")]\n    plat_lengths = [int(n) for n in stdin.split(\" \")]\n    first_jump = 0\n    result = []\n    if max_jump > width:\n        return \"NO\"\n    else:\n        for plat in range(number_of_plat):\n            if width % plat_lengths[plat]!= 0:\n                first_jump = width % plat_lengths[plat]\n                break\n        current_jump = first_jump\n        current_cell = 0\n        while current_jump!= width:\n            current_jump -= current_cell\n            current_cell += 1\n            result.append(current_cell)\n        result.append(width)\n        return \"YES\\n\" + \" \".join(str(n) for n in result)\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n\n---AC---\n\nfirst_jump = 0\ncurrent_jump = 0\ncurrent_cell = 0\nfor plat in range(number_of_plat):\n    if width % plat_lengths[plat]!= 0:\n        first_jump = width % plat_lengths[plat]\n        break\ncurrent_jump = first_jump\ncurrent_cell = 0\nwhile current_jump!= width:\n    current_jump -= current_cell\n    current_cell += 1\n    result.append(current_cell)\nresult.append(width)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    \n    if n == 0:\n        return 'YES'\n    if n < m:\n        return 'NO'\n\n    jump = set()\n    for i in range(m):\n        if i in jump:\n            continue\n        jump.add(a[i])\n        while jump and sum(a[i:i+d]) > n:\n            jump.discard(a[i])\n            i += d\n\n    return 'NO' if jump else 'YES'\n\n\n>>> solution('7 3 2\\n1 2 1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 5\\n2\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n2\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution('10 1 11\\n1\\n')\n'YES'\n\n>>> solution"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.strip().split()]\n    c = [int(x) for x in stdin.strip().split()]\n    n += 2\n    a = [0 for x in range(n)]\n    i = 0\n    for i in range(m):\n        a[c[i]-1] = i + 1\n    if a[n-1]!= 1:\n        return \"NO\"\n    i = 1\n    while i < n - 1:\n        if a[i] == 0:\n            i += 1\n        else:\n            while i < n - 1 and a[i]!= 0:\n                i += 1\n            if i == n - 1:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    pass\n\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split(\" \"))\n    if d > n:\n        return \"NO\"\n\n    c = list(map(int, stdin.split(\" \")))\n    a = [0] * (n + 1)\n    for i in range(m):\n        for j in range(1, c[i]):\n            if j == 1:\n                a[j] = i + 1\n            else:\n                a[j] = a[j - 1]\n\n    print(a)\n    return \"YES\""
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return str(solution_naive(s, t))\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    l = len(s)\n    ans = 0\n    for i in range(l):\n        if s[i:].startswith(t):\n            ans = max(ans, len(s) - i)\n    return str(ans)"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:len(stdin)-1]\n    t = stdin[len(stdin)-1]\n    return max(len(s)-len(t),0)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    while s!= t:\n        if len(s) < len(t):\n            s += s\n        else:\n            t += t\n    return t\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    return str(len(s) - len(t))\n\nassert(solution('''bbaba\nbb\n\n''')) == '3'\nassert(solution('''baaba\nab\n\n''')) == '2'\nassert(solution('''abcde\nabcde\n\n''')) == '0'\nassert(solution('''asdfasdf\nfasd\n\n''')) == '3'\nassert(solution('''bbbbb\nbbbbb\n\n''')) == '0'\nassert(solution('''baaba\nbaaba\n\n''')) == '0'\nassert(solution('''bbbaa\nbbaa\n\n''')) == '1'\nassert(solution('''abbbb\nabab\n\n''')) == '2'\nassert(solution('''bbbaa\nbbab\n\n''')) == '1'\nassert(solution('''aaaa\naaaa\n\n''')) == '0'\nassert(solution('''bbaa\nbbbb\n\n''')) == '2'\nassert(solution('''abbbb\nabab\n\n''')) == '1'\nassert(solution('''aaaa\nbbbb\n\n''')) == '0'\nassert(solution('''bbbab\nbbbab\n\n''')) == '2'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbaa\n\n''')) == '1'\nassert(solution('''bbbab\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''ababb\nabab\n\n''')) == '2'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''ababb\nabab\n\n''')) == '2'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab\n\n''')) == '0'\nassert(solution('''baaba\nbbaa\n\n''')) == '1'\nassert(solution('''bbbaa\nbbbab"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return str(len(s) - len(t))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return max(len(s) - len(t), len(t) - len(s))\n\n\nassert(solution('''bbaba\nbb\n''') == '3')\nassert(solution('''baaba\nab\n''') == '2')\nassert(solution('''abcde\nabcde\n''') == '0')\nassert(solution('''asdfasdf\nfasd\n''') == '3')\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    i, j = len(s) - 1, len(t) - 1\n    while j > 0 and t[j - 1]!= s[i]:\n        j -= 1\n    j -= 1\n    return len(s) - j\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return 0"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    answers = []\n    for a in range(1,10):\n        for b in range(1,10):\n            if a*a+b*b-2*a*b*x < 0:\n                break\n            for c in range(1,10):\n                if a*a+b*b-c*c*x == 0:\n                    answers.append(a*b*c)\n    answers = set(answers)\n    for answer in answers:\n        print(answer, end=\" \")\n    print()"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    i = 1\n    while True:\n        if x == 0:\n            break\n        if x - int(x) == 0:\n            return str(i) + \" \" + str(int(x))\n        if x > 0:\n            i += 1\n            x = x - int(x)\n        elif x < 0:\n            i -= 1\n            x = x + int(x)\n\n    return \"x\"\n\n\"\"\"\n\nfrom sys import float_info\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = float(stdin)\n    n = format(n, '.6f')\n    f = open(\"results.txt\", \"a\")\n    f.write(n+\"\\n\")\n    f.close()\n    return \"\"\n\nsolution(stdin)\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    s = math.floor(x)\n    print(s, int(s-x), sep=\" \")"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(str, solve(float(stdin))))\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Please print out the result in the format: \n    # <x> <y>\n    # The number of lines of code is counted in the rubric.\n    # Your output must have exactly two integers, separated by a single space.\n    # For example:\n    # 4 1\n    # 10 7\n    pass\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n    \n    n = round(float(stdin), 6)\n    a = int(sqrt(n))\n    b = int(sqrt(n + 0.25))\n    while a * a < n:\n        if n % a == 0:\n            return str(a) +'' + str(n // a)\n        a -= 1\n    return str(a) +'' + str(b)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the greates common denominator of two numbers.\n    '''\n    x = float(stdin)\n    a = int(x)\n    b = int(x)\n    while x!= a:\n        if a > x:\n            a -= 1\n        else:\n            b += 1\n            a -= 1\n    return str(a) +'' + str(b)\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.strip('\\n')\n    n, d, k = (int(i) for i in stdin.split(' '))\n    if k > (d * (d - 1) / 2):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for _ in range(n - 1):\n            u, v = (int(i) for i in stdin.split(' '))\n            print(u, v)\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.strip().split())\n    if n - 1 <= d * k:\n        return 'YES'\n\n    return 'NO'\n\n\nassert solution('6 3 3') == 'YES'\nassert solution('6 2 3') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('8 5 3') == 'YES'\n\nassert solution('5 4 3') == 'YES'\nassert solution('5 2 3') == 'NO'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('5 4 2') == 'YES'\nassert solution('5 2 2') == 'YES'\nassert solution('5 2 3') == 'NO'\nassert solution('5 4 3') == 'YES'\nassert solution('5 3 2') == 'NO'\nassert solution('5 4 3') == 'YES'\nassert solution('5 3 3') == 'YES'\nassert solution('5 3 4') == 'YES'\nassert solution('5 3 4') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 4') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3 3') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 4 2') == 'YES'\nassert solution('10 3 2') == 'NO'\nassert solution('10 4 3') == 'YES'\nassert solution('10 3"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n\n    n, d, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    if n - 1 < d * k:\n        return \"NO\"\n\n    root = 1\n    edges = [(root, i) for i in range(2, n + 1)]\n    tree = {}\n    tree[root] = edges\n    for vertex in tree:\n        if len(tree[vertex]) > d * k:\n            return \"NO\"\n\n    count = 0\n    while count < n - 1:\n        for i in range(len(tree)):\n            if len(tree[i]) > 0:\n                vertex = tree[i].pop()\n                count += 1\n                if len(tree[vertex]) < d * k:\n                    tree[vertex].append(i)\n                    tree[i].append(vertex)\n    result = []\n    for i in range(1, n + 1):\n        result.append(str(i))\n    result =''.join(result)\n    return result\n\n\nassert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"10 5 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.strip().split())\n    # first line should be YES or NO\n    print(\"YES\" if k <= d * (n - 1) else \"NO\")\n    # all other lines should be edges in the form of 1-2\n    print(*range(1, n), sep=\" \")\n    return \"\"\n\n\nassert (solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\")\nassert (solution(\"6 2 3\\n\") == \"NO\\n\")\nassert (solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n\")\nassert (solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n6 10\\n8 7\\n4 3\\n5 6\\n7 8\\n\")\nassert (solution(\"10 9 9\\n\") == \"YES\\n2 8\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n7 8\\n9 9\\n\")\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if (d - k - 1) % (k - 1)!= 0:\n        return \"NO\"\n    tree = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        tree.append((a - 1, b - 1))\n    if len(tree) == 0:\n        return \"NO\"\n    tree.sort(key=lambda x: x[1])\n    tree.sort(key=lambda x: x[0])\n    tree = [(x[0], x[1]) for x in tree]\n    tree.append((n - 1, 0))\n    tree = list(map(lambda x: x[0] * 10 + x[1], tree))\n    tree = sorted(list(set(tree)))\n    return \"YES\\n\" + \" \".join(map(str, tree))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(i) for i in stdin.split()]\n\n    def gen_edges():\n        n -= 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                yield i + 1, j + 1\n\n    if d <= k:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i, j in gen_edges():\n            print(i, j)\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_nodes, diam, deg = [int(x) for x in stdin.strip().split()]\n    if num_nodes <= deg or diam <= 0 or diam > num_nodes or deg < 1:\n        return \"NO\"\n\n    max_edges = num_nodes - 1\n    edges = [[0] * num_nodes for _ in range(num_nodes)]\n    count = 0\n    for _ in range(int(stdin)):\n        a, b = [int(x) for x in stdin.strip().split()]\n        edges[a - 1][b - 1] = 1\n        edges[b - 1][a - 1] = 1\n        count += 1\n\n    result = []\n    for x in range(num_nodes):\n        for y in range(num_nodes):\n            if edges[x][y]:\n                for z in range(num_nodes):\n                    if edges[y][z] and edges[x][z]:\n                        max_edges -= 1\n                        result.append([x + 1, y + 1, z + 1])\n                        break\n        if max_edges == 0:\n            break\n\n    if max_edges == 0:\n        return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join([\" \".join([str(x) for x in elem]) for elem in result])\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = (int(x) for x in stdin.split())\n    if n == 1 or d == 1 or n <= 1 or d <= 1 or n > 4 * pow(10, 5) or d > 4 * pow(10, 5) or k > pow(10, 5):\n        print('NO')\n        return\n\n    tree = {}\n    for i in range(1, n + 1):\n        tree[i] = 0\n\n    for _ in range(n - 1):\n        u, v = (int(x) for x in stdin.split())\n        tree[u] += 1\n        tree[v] += 1\n\n    max_degree = max(tree.values())\n    max_nodes = [node for node, degree in tree.items() if degree == max_degree]\n\n    if len(max_nodes) > 1:\n        print('YES')\n        print(len(max_nodes) - 1)\n        for node in max_nodes[1:]:\n            print(node, end=\" \")\n    else:\n        print('NO')\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(i) for i in stdin.split()]\n    if n == 1 or d > n - 1 or k > d:\n        return \"NO\"\n    else:\n        result = []\n        edges = {}\n        degree = [0 for _ in range(n)]\n        for _ in range(n - 1):\n            line = stdin.readline().split()\n            u, v = int(line[0]), int(line[1])\n            if u in edges:\n                edges[u].append(v)\n            else:\n                edges[u] = [v]\n            if v in edges:\n                edges[v].append(u)\n            else:\n                edges[v] = [u]\n            if u == v:\n                continue\n            if degree[u] > k or degree[v] > k:\n                continue\n            degree[u] += 1\n            degree[v] += 1\n            if (u, v) in edges:\n                result.append((u, v))\n            elif (v, u) in edges:\n                result.append((v, u))\n            else:\n                result.append((u, v))\n                result.append((v, u))\n        return \"YES\\n\" + \"\\n\".join([f\"{u} {v}\" for u, v in result])"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 1''')\n    '1100'\n    >>> solution('''3 3 3''')\n    '101100'\n    >>> solution('''5 3 6''')\n    '01010100'\n    \"\"\"\n    a, b, x = [int(x) for x in stdin.split()]\n    n = a + b\n    s = '0' * a + '1' * b + '0' * x\n    result = ''\n    for i in range(n):\n        if s[i] == s[i + 1]:\n            result = s[:i] + '0' + s[i + 2:]\n            break\n    return result"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(\" \"))\n    s = []\n    while len(s) < a + b:\n        s += str(x) + \"1\"\n        if s[-b:] == \"0\" * b:\n            s = s[:-b]\n        else:\n            x += 1\n    return s\n\nprint(solution(\"\"))"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a >= b:\n        return \"1\" * a + \"0\" * b + \"0\" * (x - a)\n    return \"0\" * a + \"1\" * b + \"0\" * (x - a)"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(' ')]\n    \n    if (a + b) % 3!= x:\n        return 'NO'\n    \n    if (a + b) % 3 == 0:\n        return 'NO'\n\n    if (a + b) % 3 == 1:\n        return ''.join(['0'] * (a + b - 1) + ['1'])\n\n    if (a + b) % 3 == 2:\n        return ''.join(['1'] * (a + b - 1) + ['0'])\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,x = [int(s) for s in stdin.split()]\n    return ''.join('0'*a + '1'*b + '1'*x)"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    return \"\".join([\"0\" if i > a - x else \"1\" for i in range(a + b)])\n\n\nassert (solution(\"2 2 1\")) == \"1100\"\nassert (solution(\"3 3 3\")) == \"101100\"\nassert (solution(\"5 3 6\")) == \"01010100\"\nassert (solution(\"10 5 3\")) == \"101100\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    i = 0\n    n = a + b\n    s = [0] * n\n    for j in range(x):\n        i = (i + a) % n\n        s[i] = 1\n    return ''.join(str(1 - s[j]) if s[j] == 1 else '0' for j in range(n))"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    return ''.join(['0' if i <= a else '1' for i in range(a + b)])[:x]"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the binary string for the given input.'''\n    a, b, x = (int(x) for x in stdin.split())\n    return ''.join(['0' for i in range(a)] + ['1' for i in range(b)] + ['0' for i in range(x)])"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.strip().split()[0]\n    b = stdin.strip().split()[1]\n    c = stdin.strip().split()[2]\n    \n    if a*3+b*3+c*3 > n*3:\n        return \"NO\"\n    \n    res = [c]*n\n    \n    for i in range(n):\n        res[i*3] = a\n        res[i*3+1] = b\n        res[i*3+2] = c\n        \n    return \"YES\\n\" + ''.join(res)\n        "
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nBy: Matan Iskandarov\n\n\"\"\"\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    n = int(stdin.split()[0])\n    if s.count(\"a\") == n and t.count(\"a\") == n and s.count(\"b\") == n and t.count(\"b\") == n and s.count(\"c\") == n and t.count(\"c\") == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nassert(solution(stdin) == stdin)\n\nassert(solution(\"2\\nab\\nbc\\n\") == \"YES\\nacbbac\")\nassert(solution(\"3\\naa\\nbc\\n\") == \"YES\\ncacbacbab\")\nassert(solution(\"1\\ncb\\nac\\n\") == \"YES\\nabc\")\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    t = stdin[3]\n    if n == 2:\n        return s if s == t else 'NO'\n    if n == 3:\n        return 'YES' if s == t else 'NO'\n    return 'NO'\n\n\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('1') == 'YES'\nassert solution('acb') == 'NO'\nassert solution('ab') == 'NO'\nassert solution('abcd') == 'NO'\nassert solution('cc') == 'YES'\nassert solution('aa') == 'YES'\nassert solution('abac') == 'YES'\nassert solution('abc') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('ccc') == 'NO'\nassert solution('cac') == 'YES'\nassert solution('ca') == 'YES'\nassert solution('caa') == 'NO'\nassert solution('bac') == 'YES'\nassert solution('ab') == 'NO'\nassert solution('cab') == 'YES'\nassert solution('acb') == 'YES'\nassert solution('ac') == 'YES'\nassert solution('acd') == 'NO'\nassert solution('bca') == 'YES'\nassert solution('abc') == 'YES'\nassert solution('bca') == 'YES'\nassert solution('bcd') == 'NO'\nassert solution('bac') == 'YES'\nassert solution('bca') == 'YES'\nassert solution('bcd') == 'NO'\nassert solution('abcd') == 'NO'\nassert solution('bca') == 'YES'\nassert solution('bcd') == 'NO'\nassert solution('bac') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('bca') == 'YES'\nassert solution('bcd') == 'NO'\nassert solution('bac') == 'YES'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') == 'NO'\nassert solution('bacd') =="
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    t = stdin[n:]\n    if len(s)!= n or len(t)!= n:\n        return \"NO\"\n\n    counts = {'a': 0, 'b': 0, 'c': 0}\n    for c in s:\n        counts[c] += 1\n    for c in t:\n        counts[c] -= 1\n\n    result = ''.join(['a' for _ in range(counts['a'])])\n    result += 'b' * counts['b']\n    result += 'c' * counts['c']\n    return \"YES\" if counts['a'] == counts['b'] and counts['b'] == counts['c'] else \"NO\"\n    \n    \n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[2]\n    t = stdin[4]\n    a = len(set(s))\n    b = len(set(t))\n    c = 3*n\n    if a > 3 or b > 3 or c > 3:\n        return \"NO\"\n    else:\n        count = 0\n        for i in range(n):\n            if s[i] == t[i]:\n                count += 1\n        if count > c - count:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip().split('\\n')[1]\n    t = stdin.strip().split('\\n')[2]\n    res = \"\"\n    for i in range(3*n):\n        res += 'a'\n    if s in res or t in res:\n        return \"NO\"\n    else:\n        return \"YES\" + res + s + t\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the string permutation\"\"\"\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    ans = 'NO'\n    for i in range(3 * n):\n        if i % 3 == 0:\n            if s[i // 3]!= t[i // 3]:\n                ans = 'YES'\n                break\n        elif i % 3 == 1:\n            if s[i // 3]!= t[i - 1]:\n                ans = 'YES'\n                break\n        else:\n            if s[i // 3]!= t[i - 2]:\n                ans = 'YES'\n                break\n    return ans\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s, t = stdin.split(\"\\n\", 1)\n    s, t = s[1:-1], t[1:-1]\n    if n <= 1 or len(s)!= len(t):\n        return \"NO\"\n    res = \"\"\n    for i in range(n):\n        res += s[i]\n        res += t[i]\n    return \"YES\" if res.count(\"a\") == n and res.count(\"b\") == n and res.count(\"c\") == n else \"NO\"\n\n\nassert (solution(input()) == \"YES\" or solution(input()) == \"NO\")\nassert (solution(input()) == \"YES\" or solution(input()) == \"NO\")\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    res = s[:n]\n    if res.count('a')!= n or res.count('b')!= n or res.count('c')!= n:\n        print('NO')\n    else:\n        res = ''.join([res, 'a' * n, 'b' * n, 'c' * n])\n        print('YES')\n        print(res)"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    per = [int(x) for x in stdin.readline().split()]\n    q = [int(x) for x in stdin.readline().split()]\n    if not per:\n        return -1\n    if q[0] < per[0]:\n        return -1\n    ans = [0] * n\n    ans[0] = per[0]\n    for i in range(1, n):\n        ans[i] = q[i - 1]\n    for i in range(1, n):\n        ans[i] += ans[i - 1]\n    return \" \".join(str(x) for x in ans)"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    q = [0] + q\n    p = [1]\n    for i in range(1, n + 1):\n        p.append(p[-1] + q[i])\n    if n < 2 or n > 10**5:\n        return '-1'\n    else:\n        return''.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    p_lst = [0] * (n - 1)\n    p = n\n    for i in range(n - 1, -1, -1):\n        p_lst[i] = p\n        p -= 1\n        while lst[i] > p_lst[p]:\n            p -= 1\n    return''.join(map(str, p_lst))"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    q.sort()\n    q.append(n)\n    q = [i - q[0] for i in q]\n    for i in range(n-1):\n        if q[i] == i:\n            return''.join(map(str, q[:i+1]))\n    return -1"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        return stdin.readline().strip()\n    q = [int(x) for x in stdin.readline().strip().split()]\n    p = [0] * (n+1)\n    for i in range(n-1):\n        p[q[i+1]-1] = i+1\n    p[q[0]-1] = 0\n    return''.join([str(x) for x in p])"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_permutations: int = int(stdin.readline().strip())\n    permutations: List[int] = list(map(int, stdin.readline().strip().split()))\n    permutations_len: int = len(permutations)\n    \n    # build the list of current permutations\n    current_permutation: List[int] = []\n    for i in range(0, permutations_len):\n        current_permutation.append(permutations[i] - i)\n    \n    # if permutation is permutation, print it\n    if is_permutation(permutations_len, current_permutation):\n        for permutation in permutations:\n            print(permutation, end=' ')\n        print()\n    \n    # build the next permutations\n    for i in range(1, permutations_len - 1):\n        next_permutation: List[int] = []\n        for j in range(0, permutations_len):\n            next_permutation.append(permutations[(j+i)%permutations_len] - j)\n        \n        # if permutation is permutation, print it\n        if is_permutation(permutations_len, next_permutation):\n            for permutation in permutations:\n                print(permutation, end=' ')\n            print()\n        \n        current_permutation = next_permutation\n    \n    # if permutation is permutation, print it\n    if is_permutation(permutations_len, current_permutation):\n        for permutation in permutations:\n            print(permutation, end=' ')\n        print()\n    \n    return ''\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = [int(x) for x in stdin.split(' ')]\n    q.sort()\n    s = 0\n    for i, x in enumerate(q):\n        s += x\n        q[i] = s\n    m = 0\n    for i, x in enumerate(q):\n        m += x\n        q[i] = m\n    return''.join(map(str, q))"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split(\" \")]\n    l.sort()\n    l = [x - i for i, x in enumerate(l)]\n    q = [x - l[i] for i, x in enumerate(l)]\n    r = [x + n for x in q]\n    r.sort()\n    r = [x - n for x in r]\n    r = [str(x) for x in r]\n    r = \" \".join(r)\n    return r"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    q.sort()\n    if q[n - 1]!= -n:\n        return \"\".join(map(str, q))\n    for i in range(n - 1, 1, -1):\n        if q[i - 1] - q[n - 1]!= i - 1:\n            return \"\".join(map(str, q))\n    return \"-1\"\n\n\nimport sys"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    q = stdin[1:]\n    p = [0] * n\n    q = [int(i) for i in q]\n    for i in range(1, n):\n        p[i] = q[i-1]\n    for i in range(n):\n        if p[i]!= i + 1:\n            return \" \".join(str(j) for j in p)\n    return -1\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    x = [int(line) for line in lines[1].split()]\n    i = 0\n    while i < len(x):\n        if x[i] == x[(i + 1) % len(x)]:\n            x[i] = x[i] + 1\n            x[(i + 1) % len(x)] = x[(i + 1) % len(x)] - 1\n        elif x[i] == x[(i - 1) % len(x)]:\n            x[i] = x[i] - 1\n            x[(i - 1) % len(x)] = x[(i - 1) % len(x)] + 1\n        else:\n            i += 1\n    return str(sum(x))"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split(' ')]\n    l = len(x)\n    dp = [[0 for _ in range(l)] for _ in range(l)]\n    for i in range(l):\n        for j in range(l):\n            if i == j:\n                dp[i][j] = x[i]\n            elif i > j:\n                dp[i][j] = dp[i-1][j-1] + x[i]\n            else:\n                dp[i][j] = dp[i-1][j] + x[j]\n    return str(min(dp[l-1]))"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(c) for c in stdin.strip().split()]\n    # the best case is if there is only one chip with the same coordinate\n    if len(set(x)) == 1:\n        return '0'\n    # the worst case is if we need to move all the chips to the same position\n    # so the best we can do is to move the first chip to the position with the biggest number\n    # and the second chip to the position with the smallest number\n    max_idx = x.index(max(x))\n    min_idx = x.index(min(x))\n    return str(max(max_idx - min_idx, max_idx + min_idx))\n\n\"\"\""
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n\n    xs = list(map(int, stdin.readline().split()))\n\n    first = min(xs)\n    second = max(xs)\n    if first == second:\n        return 0\n\n    count = abs(first - second) + 1\n    if count <= 10 ** 9:\n        return count\n\n    return -1\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(' ')))\n    x.sort()\n    s = sum(x[i] - x[i - 1] for i in range(1, n))\n    print(s)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_iterative(stdin))\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n\n    maxx = max(xs)\n    maxy = max(xs)\n\n    # magic\n    if maxx == maxy:\n        return '1'\n\n    # there is a bit more to do\n    # for each, if the next one is the same, take +1\n    # otherwise, move it by +1\n    # same for all other chips\n    x = xs[0]\n    i = 0\n    result = 1\n    while i < n - 1:\n        if xs[i + 1] == x:\n            result += 1\n        else:\n            result += 1\n            x = xs[i + 1]\n        i += 1\n\n    return str(result)\n\n\nassert(solution('''3''') == '1')\nassert(solution('''5''') == '2')\nassert(solution('''1 2 3''') == '1')\nassert(solution('''2 2 2 3 3''') == '2')\nassert(solution('''1 1 2''') == '2')\nassert(solution('''1 2 2''') == '1')\nassert(solution('''1 2 3''') == '1')\nassert(solution('''1 2 3''') == '1')\nassert(solution('''2 1 3''') == '2')\nassert(solution('''2 2 3''') == '1')\nassert(solution('''3 1 2''') == '1')\nassert(solution('''3 2 3''') == '1')\nassert(solution('''4 1 3''') == '2')\nassert(solution('''4 2 3''') == '2')\nassert(solution('''4 3 3''') == '1')\nassert(solution('''4 4 3''') == '1')\nassert(solution('''5 4 3''') == '2')\nassert(solution('''6 4 3''') == '2')\nassert(solution('''7 4 3''') == '2')\nassert(solution('''8 4 3''') == '2')\nassert(solution('''9 4 3''') == '2')\nassert(solution('''10 4 3''') == '2')\nassert(solution('''1 2 2 3''') == '2')\nassert(solution('''1 2 3 2''') == '2')\nassert(solution('''1 1 2 2''') == '1')\nassert(solution('''1 2 1 2''') == '1')\nassert(solution('''1 2 2 2''') == '2')\nassert(solution('''1 2 3 3''') == '2')\nassert(solution('''1 2 2 2''') == '2')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution('''1 1 1 1 1''') == '1')\nassert(solution("
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n\n    # for each chip, we use (x + 1) - x to find min moves\n    # (x + 1) - x < 0, return 0\n    # (x + 1) - x > 0, return x + 1\n\n    # (x + 1) - x = 0, no moves\n    # (x + 1) - x = 1, move left\n    # (x + 1) - x = 2, move left twice\n\n    # minimum_moves = arr[0]\n\n    # for i in range(1, n):\n    #     minimum_moves = min(minimum_moves, arr[i] + (i + 1) - arr[i - 1])\n\n    # return minimum_moves\n\n    # this is more concise but less clean:\n    return str(min(x + (i + 1) - x for i, x in enumerate(arr)))\n\nprint(solution(input()))\n\n\n\n## My answer from LeetCode\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nassert solution('2 2 2 3 3') == '2'\nassert solution('5 2 2 2 3 3') == '2'\nassert solution('1 2 2 3 4') == '3'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('2 2 2 2 3 3') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'\nassert solution('1 1 1 2 2 2') == '1'"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(lambda line: line.rstrip(), stdin.splitlines()))"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\nassert(solution('''10''') == '5')\nassert(solution('''20''') == '8')\nassert(solution('''30''') == '12')\nassert(solution('''1000''') == '1268')"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    moves = 0\n    while N > 1:\n        if N % 2 == 0:\n            N = N // 2\n        else:\n            N = N - 1\n        moves += 1\n    return moves\n\nprint(solution(stdin))"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    if len(N) == 1:\n        return 1\n\n    moves = 0\n    prev = 1\n\n    while len(N) > 1:\n        if int(N[:2]) > int(N[2:4]):\n            moves += int(N[:2]) - int(N[2:4])\n            N = N[2:4]\n        else:\n            moves += int(N[2:4]) - int(N[:2])\n            N = N[:2]\n\n    return moves\n\nassert solution('10') == 5\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('5') == 5\nassert solution('8') == 6\nassert solution('9') == 6\nassert solution('10') == 5\nassert solution('11') == 7\nassert solution('12') == 6\nassert solution('13') == 6\nassert solution('14') == 6\nassert solution('15') == 6\nassert solution('16') == 6\nassert solution('17') == 7\nassert solution('18') == 7\nassert solution('19') == 7\nassert solution('20') == 7\nassert solution('21') == 8\nassert solution('22') == 7\nassert solution('23') == 7\nassert solution('24') == 8\nassert solution('25') == 8\nassert solution('26') == 8\nassert solution('27') == 8\nassert solution('28') == 8\nassert solution('29') == 8\nassert solution('30') == 8\nassert solution('31') == 8\nassert solution('32') == 8\nassert solution('33') == 8\nassert solution('34') == 8\nassert solution('35') == 8\nassert solution('36') == 8\nassert solution('37') == 8\nassert solution('38') == 8\nassert solution('39') == 8\nassert solution('40') == 8\nassert solution('41') == 8\nassert solution('42') == 8\nassert solution('43') == 8\nassert solution('44') == 8\nassert solution('45') == 8\nassert solution('46') == 8\nassert solution('47') == 8\nassert solution('48') == 8\nassert solution('49') == 8\nassert solution('50') == 8\nassert solution('51') == 8\nassert solution('52') == 8\nassert solution('53') == 8\nassert solution('54') == 8\nassert solution('55') == 8\nassert solution('56') == 8\nassert solution('57') == 8\nassert solution('58') == 8\nassert solution('59') == 8\nassert solution('60') == 8\nassert solution('61') == 8\nassert solution('62') == 8\nassert solution('63') == 8\nassert solution('64') == 8\nassert solution('65') == 8\nassert solution('66') == 8\nassert solution('67') == 8\nassert solution('68') == 8\nassert solution('69') == 8\nassert solution('70') == 8\nassert solution('71') == 8\nassert solution('72') == 8\nassert solution('73') == 8\nassert solution('74') == 8\nassert solution('75') == 8\nassert solution('76') == 8\nassert solution('77') == 8\nassert solution('78') == 8\nassert solution('79') == 8\nassert solution('80') == 8\nassert solution('81') == 8\nassert solution('82') == 8\nassert solution('83') == 8\nassert solution('84') == 8\nassert solution('85') == 8\nassert solution('86') == 8\nassert solution('87') == 8\nassert solution('88') == 8\nassert solution('89') == 8\nassert solution('90') == 8\nassert solution('91') == 8\nassert solution('92') == 8\nassert solution('93') == 8\nassert solution('94') == 8\nassert solution('95') == 8\nassert solution('96') == 8\nassert solution('97') == 8\nassert solution('98') == 8\nassert solution('99') == 8\nassert solution('100') == 8\nassert solution('101') == 8\nassert solution('102') == 8\nassert solution('103') == 8\nassert solution('104') == 8\nassert solution('105') == 8\nassert solution('106') == 8\nassert solution('107') == 8\nassert solution('108') == 8\nassert solution('109') == 8\nassert solution('110') == 8\nassert solution('111') == 8\nassert solution('112') == 8\nassert solution('113') == 8\nassert solution('114') == 8\nassert solution('115') == 8\nassert solution('116') == 8\nassert solution('117') == 8\nassert solution('118') == 8\nassert solution('119') == 8\nassert solution('120') == 8\nassert solution('121') == 8\nassert solution('122') == 8\nassert solution('123') == 8\nassert solution('124') == 8\nassert solution('125') == 8\nassert solution('126') == 8\nassert solution('127') == 8\nassert solution('128') == 8\nassert solution('129') == 8\nassert solution('130') == 8\nassert solution('131') == 8\nassert solution('132') == 8\nassert solution('133') == 8\nassert solution('134') == 8\nassert solution('135') == 8\nassert solution('136') == 8\nassert solution('137') == 8\nassert solution('138') == 8\nassert solution('139') == 8\nassert solution('140') == 8\nassert solution('141') == 8\nassert solution('142') == 8\nassert solution('143') == 8\nassert solution('144') == 8\nassert solution('145') == 8\nassert solution('146') == 8\nassert solution('147') == 8\nassert solution('148') == 8\nassert solution('149') == 8\nassert solution('150') == 8\nassert solution('151') == 8\nassert solution('152') == 8\nassert solution('153') == 8\nassert solution('154') == 8\nassert solution('155') == 8\nassert solution('156') == 8\nassert solution('157') == 8\nassert solution('158') == 8\nassert solution('159') == 8\nassert solution('160') == 8\nassert solution('161') == 8\nassert solution('162') == 8\nassert solution('163') == 8\nassert solution('164') == 8\nassert solution('165') == 8\nassert solution('166') == 8\nassert solution('167') == 8\nassert solution('168') == 8\nassert solution('169') == 8\nassert solution('170') == 8\nassert solution('171') == 8\nassert solution('172') == 8\nassert solution('173') == 8\nassert solution('174') == 8\nassert solution('175') == 8\nassert solution('176') == 8\nassert solution('177') == 8\nassert solution('178') == 8\nassert solution('179') == 8\nassert solution('180') == 8\nassert solution('181') == 8\nassert solution('182') == 8\nassert solution('183') == 8\nassert solution('184') == 8\nassert solution('185') == 8\nassert solution('186') == 8\nassert solution('187') == 8\nassert solution('188') == 8\nassert solution('189') == 8\nassert solution('190') == 8\nassert solution('191') == 8\nassert solution('192') == 8\nassert solution('193') == 8\nassert solution('194') == 8\nassert solution('195') == 8\nassert solution('196') == 8\nassert solution('197') == 8\nassert solution('198') == 8\nassert solution('199') == 8\nassert solution('200') == 8\nassert solution('201') == 8\nassert solution('202') == 8\nassert solution('203') == 8\nassert solution('204') == 8\nassert solution('205') == 8\nassert solution('206') == 8\nassert solution('207') == 8\nassert solution('208') == 8\nassert solution('209') == 8\nassert solution('210') == 8\nassert solution('211') == 8\nassert solution('212') == 8\nassert solution('213') == 8\nassert solution('214') == 8\nassert"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"1\""
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    \n    if n == 2:\n        return \"1\"\n\n    if n == 3:\n        return \"2\"\n\n    if n == 4:\n        return \"3\"\n\n    if n == 5:\n        return \"4\"\n\n    if n == 6:\n        return \"5\"\n\n    if n == 7:\n        return \"6\"\n\n    if n == 8:\n        return \"7\"\n\n    if n == 9:\n        return \"8\"\n\n    if n == 10:\n        return \"9\"\n\n    m = n // 2\n    a = n - 1\n    b = n - 2\n\n    if n % 2 == 0:\n        m += 1\n\n    if m % 2 == 0:\n        a -= 1\n        b -= 1\n\n    return str(m + a + b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin)\n    return str(rows * (rows + 1) // 2)"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    steps = [n]\n    while n >= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n - 1\n        steps.append(n)\n    return str(min(steps))"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the minimum number of moves needed to reach a square that contains N\n    using a dynamic programming approach.\n    \"\"\"\n    N = stdin.strip()\n    return dp_solve(N)\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    return str(n - 1 + n % 2)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    alice = [int(x) for x in stdin.readline().strip().split()]\n    bob = [int(x) for x in stdin.readline().strip().split()]\n    max_alice = 0\n    max_bob = 0\n    for i in range(n):\n        if alice[i] == bob[i]:\n            continue\n        if alice[i] > bob[i]:\n            max_bob += 1\n        else:\n            max_alice += 1\n    print(max(max_alice, max_bob))\n    print(min(max_alice, max_bob))\n    return ''"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a_wins = a[0] + a[1] + a[2]\n    b_wins = b[0] + b[1] + b[2]\n\n    a_win = min(a_wins, b_wins)\n    b_win = max(a_wins, b_wins)\n\n    return str(a_win) + \" \" + str(b_win)\n\n\nprint(solution(\"3\"))\nprint(solution(\"4\"))\nprint(solution(\"7\"))\nprint(solution(\"2\"))\nprint(solution(\"1234\"))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    \n    a = sum(a)\n    b = sum(b)\n    \n    if a > n or b > n:\n        return '0 1'\n    \n    if a == n or b == n:\n        return '0 0'\n    \n    if a < b:\n        return '0'+ str(b - a)\n    else:\n        return '0'+ str(a - b)\n\n\n\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n'''\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    N = int(line)\n\n    Alice, Bob = [], []\n\n    for _ in range(N):\n        line = stdin.readline()\n        A, B = map(int, line.split())\n\n        Alice.append((A, B))\n        Bob.append((B, A))\n\n    Alice.sort()\n    Bob.sort()\n\n    i, j = 0, 0\n    while i < len(Alice) and j < len(Bob):\n        if Alice[i][0] == Bob[j][0]:\n            i += 1\n            j += 1\n        elif Alice[i][0] > Bob[j][0]:\n            j += 1\n        else:\n            i += 1\n\n    print(len(Alice), len(Bob))\n    print(Alice[i - 1][0], Bob[j - 1][0])\n\n    return \"\"\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if A[i] == B[i]:\n            continue\n        if A[i] == 0 and B[i] == 1:\n            alice += 1\n        if A[i] == 1 and B[i] == 0:\n            bob += 1\n    return str(alice) + \" \" + str(bob)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for stdin in stdin.split()]\n    b = [int(stdin) for stdin in stdin.split()]\n    if a[0] + a[1] + a[2]!= n:\n        return \"0 1\"\n    if b[0] + b[1] + b[2]!= n:\n        return \"0 1\"\n    if a[0] == 0:\n        return str(b[0]) + str(b[1]) + str(b[2])\n    if b[0] == 0:\n        return str(a[0]) + str(a[1]) + str(a[2])\n    if a[1] == 0:\n        return str(a[0]) + str(b[1]) + str(b[2])\n    if b[1] == 0:\n        return str(a[0]) + str(a[1]) + str(b[2])\n    if a[2] == 0:\n        return str(a[0]) + str(a[1]) + str(b[0])\n    if b[2] == 0:\n        return str(a[0]) + str(a[1]) + str(b[0])\n    if a[0] == a[1] and a[1] == a[2]:\n        return \"0 1\"\n    if b[0] == b[1] and b[1] == b[2]:\n        return \"0 1\"\n    if a[0] == 0:\n        return str(b[0]) + str(b[1]) + str(b[2])\n    if b[0] == 0:\n        return str(a[0]) + str(a[1]) + str(a[2])\n    if a[1] == 0:\n        return str(a[0]) + str(b[1]) + str(b[2])\n    if b[1] == 0:\n        return str(a[0]) + str(a[1]) + str(b[2])\n    if a[2] == 0:\n        return str(a[0]) + str(a[1]) + str(b[0])\n    if b[2] == 0:\n        return str(a[0]) + str(a[1]) + str(b[0])\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = a[0]\n    a = a[1:]\n\n    def l(a, p, q):\n        if q < p:\n            return 0\n        return a[p - 1] + l(a, p + 1, q)\n    \n    def r(a, p, q):\n        if q > p:\n            return 0\n        return a[q - 1] + r(a, p, q - 1)\n    \n    m = {}\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            m[(i, j)] = l(a, i + 1, j) - r(a, i + 1, j)\n    \n    m = sorted(m.items(), key=lambda x: -x[1])\n    \n    ans = []\n    for k, v in m:\n        ans.append((k[0], k[1]))\n    \n    return str(len(ans)) + '\\n' + '\\n'.join(map(lambda x:''.join(map(str, x)), ans))\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    s = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if arr[i - 1] + arr[j - 1] == s:\n                print(i, j)\n                return\n            s += arr[j - 1]\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1]\n    a = [int(x) for x in a.split(\" \")]\n    if len(a) == n:\n        return stdin[0]\n    b = sorted(a)\n    a = {}\n    a[0] = 0\n    for i in range(1, len(b)):\n        a[i] = a[i-1] + b[i]\n    result = []\n    k = 0\n    for i in range(1, len(b)):\n        if i in a:\n            continue\n        else:\n            if a[i-1] < a[i] - a[i-1]:\n                k += 1\n                result.append((i-1, i))\n    return k\n\nprint(solution(input()))"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find a set of blocks of the same sum.\n    \n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # Make a list of the blocks\n    blocks = []\n    block = []\n    block_sum = 0\n    for i in range(n):\n        block_sum += a[i]\n        if len(block) == 0:\n            block.append(i)\n        elif block_sum!= a[i]:\n            blocks.append(block)\n            block = [i]\n            block_sum = a[i]\n        elif block_sum == a[i]:\n            block.append(i)\n    blocks.append(block)\n    # Count the number of blocks\n    k = len(blocks)\n    # Find the set\n    for i in range(k):\n        for j in range(i+1, k):\n            if blocks[i][0] > blocks[j][0] and blocks[i][0] < blocks[j][1]:\n                continue\n            elif blocks[i][1] > blocks[j][0] and blocks[i][1] < blocks[j][1]:\n                continue\n            else:\n                blocks[i], blocks[j] = blocks[j], blocks[i]\n                break\n    return str(k)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    if n <= 3:\n        return str(n)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == (arr[i + 1] + arr[j + 1]) and (j - i) > ans:\n                ans = j - i\n                # print(ans, i, j, arr[i], arr[j])\n    return str(ans)\n\nimport sys"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    s = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            s.add(sum(a[i:j+1]))\n    m = max(s)\n    return str(m)\n\nassert(solution('''-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '5')\nassert(solution('''1 1 1 1 1''') == '5')\nassert(solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split(' ')]\n    answer = 0\n    block = []\n    for i in range(n):\n        if i == 0:\n            block.append(0)\n            continue\n        if i == n - 1:\n            block.append(n)\n            continue\n        curr = nums[i]\n        if nums[i + 1] == nums[i] or nums[i] == nums[i - 1]:\n            block.append(i)\n        else:\n            block.append(i)\n            block.append(i + 1)\n            block.sort()\n            answer = max(answer, len(block))\n            block = []\n    return answer"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    m = -1\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = sum(a[i:j+1])\n            if curr_sum > m:\n                m = curr_sum\n                k = 1\n                if j == n-1:\n                    k = 0\n            elif curr_sum == m:\n                k += 1\n    print(k)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    k = 1\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == sum(a[i + 1:j]):\n                res.append((i + 1, j))\n                k += 1\n    return '{} {}'.format(k,''.join(map(lambda x: '{} {}'.format(x[0] + 1, x[1] + 1), res)))\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    s = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            s.add((i, j))\n\n    return max(len(s), n)\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(n) for n in stdin.readline().split()]\n    sorted_array = []\n    for num in nums:\n        max_stack = 1\n        while max_stack * num >= 0:\n            if max_stack * num == 0:\n                max_stack += 1\n            else:\n                max_stack *= num\n        if max_stack > len(sorted_array):\n            sorted_array.append(max_stack)\n        else:\n            sorted_array.insert(max_stack, max_stack)\n    return \"YES\" if sorted_array == nums else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    n = int(n)\n    arr = stdin.splitlines()[1].split(' ')\n    arr = list(map(int, arr))\n    arr_len = len(arr)\n    arr_len = int(arr_len)\n    if arr_len!= n:\n        return \"NO\"\n    stacks = []\n    for i in range(n):\n        if arr[i] not in stacks:\n            stacks.append(arr[i])\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if arr[j] < arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    for i in range(n):\n        if arr[i] not in stacks:\n            stacks.append(arr[i])\n    if stacks:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(' ')]\n    s = [[] for _ in range(n)]\n    r = [0 for _ in range(n)]\n    for i in range(n):\n        s[a[i] - 1].append(i)\n    while len(s[0]) > 0:\n        for i in s[0]:\n            if len(s[i]) > 0:\n                r[i] = s[i][0]\n        for i in range(len(s[0])):\n            s[0][i] = s[0][i] - 1\n    return 'YES' if r == a else 'NO'\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    current_max_height = 0\n    sorted_arr = []\n    for i in range(n):\n        stack_height = arr[i]\n        if stack_height > current_max_height:\n            sorted_arr.append(stack_height)\n            current_max_height = stack_height\n        else:\n            sorted_arr.append(current_max_height)\n    if len(sorted_arr) == n:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    ans = []\n    for i in range(num):\n        cur = []\n        for j in range(i, num):\n            cur.append(a[j])\n            if len(cur) > 1 and cur[-1] - cur[-2] == 2:\n                ans.append(cur[-2])\n                ans.append(cur[-1])\n                cur.pop()\n        if len(cur) > 0:\n            ans.append(cur[-1])\n    return 'YES' if len(ans) == num else 'NO'\n\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    A = list(map(int, stdin.readline().split(' ')))\n    return 'YES' if all(A[i] >= A[i + 1] for i in range(len(A) - 1)) and A[0] > A[-1] else 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    array_size = stdin[0]\n    array_size = int(array_size)\n    array = stdin[2:array_size+2]\n    array = array.split()\n    array = [int(array[i]) for i in range(len(array))]\n    array_copy = array[:]\n    array = sorted(array)\n    height = 0\n    while height < len(array):\n        if array_copy!= array:\n            height += 1\n            array_copy = array[:]\n        else:\n            break\n    print('YES' if array_copy == array else 'NO')"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        print(0)\n        return\n\n    if n == len(t):\n        for i, c in enumerate(s):\n            print(i + 1, end=' ')\n        print()\n        return\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[j] == t[i]:\n                s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n                count += 1\n                break\n    print(count)\n    return\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return \"-1\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length, s, t = map(int, stdin.split())\n    if length > 10 ** 4:\n        return '-1'\n    if s == t:\n        return str(0)\n    a = [i for i in range(length)]\n    for _ in range(length):\n        i = random.randint(0, length - 1)\n        j = random.randint(0, length - 1)\n        while i == j:\n            j = random.randint(0, length - 1)\n        s, t = s[:i] + s[i + 1:], t[:j] + t[j + 1:]\n        t = t[:j] + s[i] + t[j:]\n        s = s[:i] + s[i + 1:]\n    return t\n\n\n-----"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    t: str = stdin.strip()\n    n: int = int(stdin)\n    for _ in range(4):\n        s = stdin.strip()\n        t = stdin.strip()\n        if s == t:\n            return str(0)\n    return str(1)\n\nassert solution(\"abcdef\") == \"-1\"\nassert solution(\"abdfec\") == \"4 5 4 5\"\nassert solution(\"abcd\") == \"3 5 4 5\"\nassert solution(\"accd\") == \"3 5 4 5\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert solution(\"abcde\") == \"-1\"\nassert"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s = s.strip()\n    t = t.strip()\n    n = int(s)\n    if n <= 0 or n > 50:\n        return \"-\"\n    s = list(s)\n    t = list(t)\n    if len(s)!= len(t):\n        return \"-\"\n    count = 0\n    for i in range(1, len(s)):\n        if s[i]!= t[i]:\n            count += 1\n            s[i], s[i - 1] = s[i - 1], s[i]\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def min_moves(s: str) -> int:\n        moves = 0\n        last_char = s[0]\n        for c in s[1:]:\n            if c!= last_char:\n                moves += 1\n            last_char = c\n        return moves\n\n    n = int(stdin.readline())\n    if n < 1 or n > 50:\n        return \"-\"\n    s = stdin.readline().strip()\n    if len(s)!= n:\n        return \"-1\"\n    t = stdin.readline().strip()\n    if len(t)!= n:\n        return \"-1\"\n    if s == t:\n        return \"0\"\n    k = min_moves(s)\n    if k == 0:\n        return \"-1\"\n    return str(k) +'' +''.join(map(str, min_moves_sequence(s, t, k)))\n\n\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(solution(stdin))\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n = [int(x) for x in stdin.split(' ')]\n    s = stdin[n+2:]\n    s_len = len(s)\n\n    p_num = 0\n    s_num = 0\n\n    for i in range(s_len):\n        for j in range(i+1, s_len+1):\n            if s[i:j] in stdin[:2*n-2]:\n                p_num += 1\n                s_num += 1\n            elif s[i:j] in stdin[2*n-2:]:\n                s_num += 1\n    return 'PPS'[p_num - s_num:] if p_num!= s_num else 'PS'"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = set()\n    for _ in range(2 * n - 2):\n        strings.add(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Find all possible solutions\n    solutions = []\n    for i in range(len(s) - 1):\n        first = s[:i + 1]\n        second = s[i + 1:]\n        if first in strings:\n            if second in strings:\n                solutions.append('PPS')\n            else:\n                solutions.append('PS')\n        elif second in strings:\n            solutions.append('PP')\n\n    # print the answer\n    if solutions:\n        return ''.join(solutions)\n    else:\n        return 'PPS'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n - 1):\n        for j in range(1, i + 1):\n            if s[:j] in stdin and s[i + j:] in stdin:\n                s = s[:j] + 'P' + s[j:]\n            elif s[i + j:] in stdin:\n                s = s[:i] + 'S' + s[i + j:]\n            elif s[:j] in stdin:\n                s = s[:j] + 'P' + s[j:]\n    return s"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    guessed_string = stdin.readline().strip()\n    guessed_length = int(stdin.readline().strip())\n    if guessed_length == 0:\n        return ''\n    guessed_strings = []\n    for _ in range(guessed_length):\n        guessed_strings.append(stdin.readline().strip())\n    prefixes_and_suffixes = stdin.readlines()\n    prefixes_and_suffixes.sort(key=len)\n    answer = ''\n    for prefix_and_suffix in prefixes_and_suffixes:\n        for prefix in guessed_strings:\n            if prefix in prefix_and_suffix:\n                answer += 'P'\n                break\n        else:\n            answer += 'S'\n    return answer\n\n\n\nprint(solution('''\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\n'''))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read the length of the string\n    string = stdin.readline().strip()\n    # read the number of strings\n    string_count = int(stdin.readline())\n    # read all the strings\n    strings = [stdin.readline().strip() for _ in range(string_count)]\n    # create the string\n    result = \"\"\n    for string in strings:\n        # init prefix and suffix counters\n        prefix = 0\n        suffix = 0\n        # iterate over the string\n        for i in range(len(string)):\n            # check if the string is a prefix\n            if string[i] == string[0] and i < len(string) - 1 and string[i + 1] == string[0]:\n                # increment the prefix counter\n                prefix += 1\n            # check if the string is a suffix\n            if string[-1 - i] == string[-1] and i < len(string) - 1 and string[-1 - i - 1] == string[-1]:\n                # increment the suffix counter\n                suffix += 1\n        # add the prefix and suffix to the result\n        result += str(prefix) + str(suffix)\n    # return the result\n    return result"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline())\n    stdin.readline()\n\n    answer = ''\n    for i in range(n):\n        prefix = strings[i][:i]\n        suffix = strings[i][i+1:]\n        if len(prefix) == len(suffix):\n            answer += 'P'\n            answer += 'S' * (len(strings[i]) - 2)\n        else:\n            answer += 'S' * len(strings[i])\n    return answer\n    \nassert(solution('''5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == 'SPPSPSPS')\nassert(solution('''3\na\naa\naa\na\n''') == 'PPSS')\nassert(solution('''2\na\nc\n''') == 'PS')\nassert(solution('''3\na\naa\naa\na\n''') == 'PPSS')\nassert(solution('''4\na\naa\naa\naa\na\n''') == 'PPSSPSPSS')\nassert(solution('''5\na\naa\naa\naa\na\n''') == 'PPSSPSPSPSS')\nassert(solution('''6\na\naa\naa\naa\naa\naa\na\n''') == 'PPSSPSPSPSSPSPSPSPS')\nassert(solution('''8\na\naa\naa\naa\naa\naa\naa\naa\naa\naa\na\n''') == 'PPSSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS')\nassert(solution('''10\na\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\na\n''') == 'PPSSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS')\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0] * n\n    for i in range(1, n):\n        s = s[1:] + s[0]\n    return s"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # input\n    N = int(stdin.readline().split()[0])\n    # result\n    result = [\n        [0] * 101\n        for i in range(101)\n    ]\n\n    for i in range(N):\n        a, b, c = [int(n) for n in stdin.readline().split()]\n        for x in range(a, b + 1):\n            for y in range(c, b + 1):\n                result[x][y] = 1\n\n    res = 0\n    for row in result:\n        for col in row:\n            if col == 1:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    print(len(a))\n    return \"\""
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(\" \")]\n    s = \"\"\n    for i in range(1, len(a)):\n        s += str(sum(a[:i])) + \" \"\n    return s[:-1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split())\n    return str(sum(a))"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    # Read in the input\n    # Split it\n    # Return the longest line\n\nsolution(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n@pytest.mark.parametrize(\n    (\"input\", \"expected\"),\n    (\n        (\"2 4 6 8 10\", \"1\"),\n    )\n)\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(x) for x in stdin.split()))\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(...)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split()]\n    a = set(l)\n    print(len(l)-len(a))\nsolution(input())\n\"\"\"\n\n\"\"\"\nImplementation note: This approach is a brute force approach because it requires the user to input a single integer. If we wanted to allow multiple integers to be inputted, we would have to use a single set operation. This approach takes O(N) time to compute, which is not efficient enough to pass the judge.\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    print(solve(n, a))\n\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    flats = [int(x) for x in stdin[1].split(' ')]\n    k = 1\n    for i in range(1, n):\n        if flats[i] == 0 and flats[i - 1] == 1 and flats[i + 1] == 1:\n            k += 1\n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    p = [0] * n\n    for i in range(1, n):\n        p[i] = max(p[i - 1], p[i - 1] + 1)\n        if a[i - 1] and a[i] == 0:\n            p[i] = max(p[i], p[i - 1] + 1)\n    return p[n - 1]"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    P = [0] * N\n    for i in range(N):\n        if A[i] == 1:\n            P[i] = max(P[i - 2] + 1, P[i - 3] + 1) if i > 1 else 1\n        else:\n            P[i] = max(P[i - 1], P[i - 2])\n    return P[-1]\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = stdin.strip()\n    n = int(count)\n    a = stdin.strip()\n    a = a.split()\n    a = list(map(int, a))\n    z = 0\n    for i in range(n):\n        if a[i] == 0:\n            z += 1\n        if a[i - 1] == a[i + 1]:\n            z += 1\n    return str(z)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(n):\n        if a[i] == 0 and i > 1 and a[i - 1] == 1 and a[i + 1] == 1:\n            k += 1\n    return str(k)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(num) for num in stdin.readline().split()]\n\n    divisors = 1\n    for num in arr:\n        divisors *= num\n\n    divisors_list = set()\n    for num in arr:\n        for i in range(num, divisors, num):\n            if i not in divisors_list:\n                divisors_list.add(i)\n\n    return len(divisors_list)\n\nassert (solution('''5\n1 2 3 4 5\n''')) == 2\nassert (solution('''6\n6 90 12 18 30 18\n''')) == 4"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    sum = 0\n    for i in a:\n        sum += i\n\n    if sum % n!= 0:\n        return 0\n\n    max_divisor = int(math.sqrt(sum))\n\n    for x in range(2, max_divisor+1):\n        if sum % x == 0:\n            return x\n\n    return 0\n\nprint(solution(''))"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The number of common divisors of a sequence of numbers.\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    a = [x for x in a if x > 0]\n    a.sort()\n\n    ans = 1\n    x = 1\n    for ai in a:\n        if x % ai!= 0:\n            break\n        ans *= ai\n        x = x // ai\n\n    return str(ans)\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                ans += 1\n    return str(ans)\n\n\nassert(solution('''5\n1 2 3 4 5\n''') == '1')\n\nassert(solution('''6\n6 90 12 18 30 18\n''') == '4')\n\nassert(solution('''1\n1\n''') == '1')\n\nassert(solution('''2\n1\n1\n''') == '2')\n\nassert(solution('''10\n
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(x) for x in stdin.readline().split()]\n    divisors = 0\n    for i in numbers:\n        if n % i == 0:\n            divisors += 1\n    return str(divisors)\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    arr = []\n    for num in a:\n        count = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                count += 1\n        arr.append(count)\n    count = 1\n    for num in arr:\n        count *= num\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    x = 1\n    for i in l:\n        x = x * i / gcd(x, i)\n    return str(x)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    n_divisors = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0:\n                n_divisors += 1\n    return str(n_divisors)\n\nassert(solution('''5\n1 2 3 4 5''')) == '1'\nassert(solution('''6\n6 90 12 18 30 18''')) == '4'\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''')) == '3'\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''')) == '7'\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # The first line contains the number of elements in array a\n    n = int(stdin.readline())\n    # The second line contains the elements of array a\n    a = stdin.readline().split()\n    # The size of the array a\n    sz = len(a)\n    # Create a list of integers\n    l = []\n    # For each element a[i], append it to the list\n    for i in a:\n        l.append(int(i))\n    # The size of the list\n    sz = len(l)\n    # Create a new list\n    l2 = []\n    # For each element l[i] of the list, if it is not zero and divides each element of the list, append it to the new list\n    for i in l:\n        if i!= 0 and all([i % j == 0 for j in l]):\n            l2.append(i)\n    # Return the number of elements of the new list\n    return str(len(l2))\n\nimport sys"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n\n    memo = {}\n\n    def dp(i, num_pockets):\n        if i == n:\n            return 0\n        if num_pockets == 0:\n            return float(\"inf\")\n        if (i, num_pockets) in memo:\n            return memo[(i, num_pockets)]\n\n        tmp = float(\"inf\")\n        for j in range(a[i], num_pockets+1):\n            tmp = min(tmp, 1 + dp(i+1, j-a[i]))\n\n        memo[(i, num_pockets)] = tmp\n        return tmp\n\n    return str(dp(0, n))\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = tuple(map(int, stdin.split()))\n    minimum = 0\n    if n == 1:\n        return 1\n    coins_set = set(coins)\n    for i in range(1, n):\n        for j in coins_set:\n            if i + j not in coins_set:\n                minimum += 1\n                break\n    return minimum"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split()))\n\n    v = [0] * 101\n\n    for i in coins:\n        v[i] += 1\n\n    curr_max = min(v)\n    curr_min = n\n\n    for i in range(n, 0, -1):\n        if v[i] == 0:\n            continue\n\n        if v[i] <= curr_max:\n            curr_max = v[i]\n            curr_min -= 1\n        else:\n            v[i] -= 1\n\n    return curr_min"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split()))\n    coins.sort()\n    l = len(coins)\n    best = 0\n    for i in range(l):\n        for j in range(i, l):\n            if coins[i] == coins[j]:\n                best = max(best, j - i + 1)\n\n    return str(best)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n\n    count = {i: 0 for i in range(100)}\n    for x in a:\n        count[x] += 1\n\n    res = 0\n    for i in range(100):\n        if count[i] > res:\n            res = count[i]\n\n    return res"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\")\n    1\n    >>> solution(\"2\")\n    1\n    >>> solution(\"5\")\n    2\n    >>> solution(\"6\")\n    2\n    \"\"\"\n    return str(int(stdin) // 2)\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a = sorted(a)\n\n    c = [0 for i in range(n)]\n\n    def coin_min(a, i, c):\n        if i == n:\n            return 0\n\n        if c[i] > 0:\n            return c[i]\n\n        c[i] = 1 + min(coin_min(a, i+1, c), coin_min(a, i+2, c), coin_min(a, i+3, c), coin_min(a, i+4, c))\n        return c[i]\n\n    return str(coin_min(a, 0, c))"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    h = {}\n\n    for i in range(n):\n        if a[i] not in h:\n            h[a[i]] = 0\n        h[a[i]] += 1\n\n    min_pockets = float('inf')\n    for k, v in h.items():\n        if v < min_pockets:\n            min_pockets = v\n\n    return str(min_pockets)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041d\u0430\u043f\u0438\u0448\u0435\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430, \u043a\u043e\u044f\u0442\u043e \u0438\u0437\u0447\u0438\u0441\u043b\u044f\u0432\u0430 \u043d\u0430\u043c\u0435\u043a\u043e \u043d\u0430 \u043b\u0438\u0447\u043a\u0430, \u043a\u043e\u044f\u0442\u043e \u043c\u043e\u0436\u0435 \u0434\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435 \u0431\u0438\u043b\u0435\u0442\u0438 \u043f\u043e \u043a\u043e\u0438\u0442\u043e \u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u0438\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d.\n    \u041d\u0430 \u043f\u044a\u0440\u0432\u0438\u044f \u0440\u0435\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u0442\u0435 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u0438\u0433\u0440\u0430\u0447\u043a\u0438\u0442\u0435 \u0438 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435 \u0431\u0438\u043b\u0435\u0442\u0438 \u0437\u0430 \u043a\u0438\u043d\u043e. \u041d\u0430 \u0432\u0442\u043e\u0440\u0438\u044f \u0440\u0435\u0434 \u0447\u0435\u0442\u0435 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0438\u044f\n    \u043a\u0430\u043f\u044a\u0446\u0438\u044f \u0438 \u0432\u044a\u0440\u0445\u0443 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u0442\u0435 \u0431\u0438\u043b\u0435\u0442\u0438 \u0437\u0430 \u043a\u0430\u043f\u044a\u0446\u0438\u044f\u0442\u0430 \u043d\u0430 \u0441\u0438 \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0438\u044f \u043a\u0430\u043f\u044a\u0446\u0438\u044f. \u041d\u0430 \u0442\u0440\u0435\u0442\u0438\u044f \u0440\u0435\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u0442\u0435 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430\n    \u0434\u0432\u0435 \u043a\u043e\u043b\u043a\u0438 \u0446\u0435\u043d\u0438\u0442\u0435 \u043a\u0430\u043f\u044a\u0446\u0438\u0438 \u0438 \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0442\u0435 \u043a\u043e\u043b\u043a\u043e \u043f\u0430\u0440\u0438 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0432\u0438 \u0441\u0438 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435 \u043e\u0442 \u043a\u0430\u043f\u044a\u0446\u0438\u0438\u0442\u0435 \u043d\u0430 \u0441\u0438 \u0432\u044a\u0440\u0445\u0443. \u041d\u0430 \u043f\u044a\u0440\u0432\u0438\u044f \u0440\u0435\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u0442\u0435\n    \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u0442\u0430 \u0441\u0443\u043c\u0430 \u043d\u0430 \u0438\u0433\u0440\u0430\u0447\u043a\u0438\u0442\u0435 (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u043d\u043e), \u043d\u0430 \u0432\u0442\u043e\u0440\u0438\u044f \u0440\u0435\u0434 \u0447\u0435\u0442\u0435 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0438\u044f \u043a\u0430\u043f\u044a\u0446\u0438\u044f\u0442\u0430 \u0438 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u0432\u0442\u043e\u0440\u0438\u044f \u043a\u0430\u043f\u044a\u0446\u0438\u044f.\n    \u041d\u0430 \u0442\u0440\u0435\u0442\u0438\u044f \u0440\u0435\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u0442\u0435 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u0434\u0432\u0435 \u043a\u043e\u043b\u043a\u0438 \u0446\u0435\u043d\u0438\u0442\u0435 \u043a\u0430\u043f\u044a\u0446\u0438\u0438 \u0438 \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0442\u0435 \u043a\u043e\u043b\u043a\u043e \u043f\u0430\u0440\u0438 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0432\u0438 \u0441\u0438 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435 \u043e\u0442 \u043a\u0430\u043f\u044a\u0446\u0438\u0438\u0442\u0435 \u043d\u0430\n    \u0441\u0438 \u0432\u044a\u0440\u0445\u0443. \u041d\u0430 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u0438\u044f \u0440\u0435\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u0442\u0435 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u043f\u0435\u0440\u0448\u0430 \u043a\u0430\u043f\u044a\u0446\u0438\u044f \u0438 \u0431\u0440\u043e\u044f\u0442 \u043d\u0430 \u0432\u0442\u043e\u0440\u0430\u0442\u0430 \u043a\u0430\u043f\u044a\u0446\u0438\u044f. \u041d\u0430 \u043f\u044a\u0440\u0432\u0438\u044f \u0440\u0435\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f,\n    \u043a\u0430\u0442\u043e \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435 \u0441\u0430\u043c\u043e \u0431\u0440\u043e\u044f \u043d\u0430 \u043a\u0430\u043f\u044a\u0446\u0438\u044f\u0442\u0430 \u043a\u043e\u0438\u0442\u043e \u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u0438\u044f \u0438 \u043f\u0440\u0438 \u0446\u044f\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u0438\u0446\u0430 \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0435\u043d\u043e \u0434\u0432\u0435 \u043a\u0430\u043f\u044a\u0446\u0438\u0438. \u041d\u0430 \u0432\u0441\u044f\u043a\u0430 \u0438\u0437\u0431\u0438\u0440\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u0438\u0446\u0430\n    \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0435\u043d\u043e \u0442\u044a\u0440\u0433\u043e\u0432\u0435 \u0447\u0435\u0442\u0435 \u0438\u043c \u0432\u044a\u0440\u0445\u0443 \u043a\u043e\u043b\u043a\u043e \u043f\u0430\u0440\u0438 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0432\u0438 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435 \u043e\u0442 \u043a\u0430\u043f\u044a\u0446\u0438\u044f\u0442\u0430 \u043d\u0430 \u0441\u0438.\n    \u0414\u0430 \u0441\u0435 \u0438\u0437\u043f\u0438\u0441\u0432\u0430 \u043f\u043e-\u043c\u0430\u043b\u043a\u043e \u043e\u0442 \u0438\u0437\u0431\u0435\u0440\u0435\u0442\u0435 \u043a\u043e\u043b\u043a\u043e \u043f\u0430\u0440\u0438 \u0442\u0440\u044f\u0431\u0432\u0430 \u0434\u0430 \u0432\u0438 \u0441\u0438 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435 \u043e\u0442 \u043a\u0430\u043f\u044a\u0446\u0438\u044f\u0442\u0430 \u043d\u0430 \u0441\u0438 \u0438 \u043a\u0430\u043a\u0432\u043e \u0441\u0435 \u0447\u0435\u0442\u0435 \u043e\u0442 \u0441\u0442\u043e\u0439\u043d\u043e\u0441\u0442\u0438\u0442\u0435 \u043d\u0430\n    \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u043f\u0430\u0440\u0438, \u043a\u043e\u044f\u0442\u043e \u0438\u043c \u0432\u044a\u0440\u0445\u0443 \u043f\u043e\u0441\u043b\u0435 \u0442\u0440\u0435\u0442\u0438\u044f \u0440\u0435\u0434.\n    \"\"\"\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n    games = int(stdin.readline())\n    standard = int(stdin.readline())\n    standard_coins = coins[0:standard]\n    result = 0\n    for i in range(0, len(standard_coins) + 1):\n        if i == 0:\n            if games % 2 == 0:\n                result += games // 2\n        else:\n            if games % 2 == 0:\n                result += games // 2\n            coins.pop(i)\n            result += games // 2\n        games -= games // 2\n    return result\n\n\nassert(solution(\"\") == 0)\nassert(solution(\"1\") == 1)\nassert(solution(\"2\") == 2)\nassert(solution(\"5\") == 1)\nassert(solution(\"6\") == 2)\nassert(solution(\"10\") == 4)\nassert(solution(\"100\") == 9)\nassert(solution(\"101\") == 10)\nassert(solution(\"102\") == 11)\nassert(solution(\"103\") == 12)\nassert(solution(\"104\") == 13)\nassert(solution(\"105\") == 14)\nassert(solution(\"106\") == 15)\nassert(solution(\"107\") == 16)\nassert(solution(\"108\") == 17)\nassert(solution(\"109\") == 18)\nassert(solution(\"110\") == 19)\nassert(solution(\"111\") == 20)\nassert(solution(\"112\") == 21)\nassert(solution(\"113\") == 22)\nassert(solution(\""
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = set()\n    s = set()\n    for i in range(n):\n        if a[i] not in s:\n            s.add(a[i])\n            b.add(a[i])\n        else:\n            b.remove(a[i])\n    return str(len(b))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    houses = [int(x) for x in stdin.split()]\n\n    # Since Vova likes to walk through his house while he thinks,\n    # and he hates cold positions of his house,\n    # Vova wants to switch all the heaters on\n    # so that each element of his house will be warmed up by at least one heater.\n    # He wants to walk through the houses with the minimum number of heaters.\n\n    # Find the minimum number of heaters\n    # that is needed to turn on all the elements of his house.\n    min_heaters = n\n    for i in range(n):\n        # If a heater is on, the current heater cannot be turned on.\n        # So search for the heater that can be turned on.\n        if houses[i] == 1:\n            # Start from the left side of the array.\n            left = i - 1\n            while left >= 0:\n                # There is no heater in the left side of the array.\n                if houses[left] == 0:\n                    # The heater at the left of the array is already turned on.\n                    # Keep searching for the heater that can be turned on.\n                    left -= 1\n                else:\n                    # Heater at the left of the array is already turned on.\n                    # Heater at the current position is now turned on.\n                    # Move left to the previous heater.\n                    left -= 1\n                    # Stop search if the heater at the left of the array is already turned on.\n                    break\n\n            # Start from the right side of the array.\n            right = i + 1\n            while right < n:\n                if houses[right] == 0:\n                    # Heater at the right of the array is already turned on.\n                    # Heater at the current position is now turned on.\n                    right += 1\n                else:\n                    # Heater at the right of the array is already turned on.\n                    # Heater at the current position is now turned on.\n                    right += 1\n                    # Stop search if the heater at the right of the array is already turned on.\n                    break\n\n            # Heater at the left and the right of the array are turned on.\n            # The current heater cannot be turned on.\n            # So the heater at the current position is now turned on.\n            # Update the minimum number of heaters.\n            min_heaters = min(min_heaters, left + 1 + right - i)\n\n    # Return the minimum number of heaters.\n    # -1 is returned if no such heater can be turned on.\n    return str(-1) if min_heaters == n else str(min_heaters)\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def safe_get_int(prompt: str, index: int) -> int:\n        while True:\n            try:\n                return int(input(prompt))\n            except ValueError:\n                print(f\"Invalid number {index}: {input(prompt)}\")\n\n    n, r = safe_get_int(\"Enter n and r: \", 0), safe_get_int(\"Enter r: \", 1)\n    a = list(map(int, input(\"Enter a: \").split()))\n\n    num_heaters = sum(a)\n    if num_heaters < r:\n        print(-1)\n        return\n\n    num_heaters = min(n, r)\n\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n\n    for heater in heaters:\n        for i in range(max(heater - r + 1, 1), min(heater + r, n)):\n            a[i] = 1\n\n    print(num_heaters)\n    return"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr, heater, heater_range = stdin.split()\n    arr = [int(i) for i in arr.split()]\n    heater = int(heater)\n    heater_range = int(heater_range)\n    heaters = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    if len(heaters) == 0:\n        return '-1'\n    elif len(heaters) <= heater_range:\n        return str(len(heaters))\n    else:\n        temp_min = float('inf')\n        for i in range(len(heaters)):\n            if i <= heater_range:\n                heaters[i] += heater_range - i\n            else:\n                heaters[i] -= i - heater_range\n            if temp_min > heaters[i]:\n                temp_min = heaters[i]\n        return str(len(heaters) - temp_min)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    h = [int(c) for c in stdin.strip()]\n\n    if n == 1:\n        return 1 if h[0] == 0 else 0\n\n    warm = 0\n    for i in range(r, n - r + 1):\n        if h[i - r] == 0:\n            warm += 1\n\n    for i in range(r - 1, n - r + 1):\n        if h[i + r - 1] == 0:\n            warm += 1\n\n    if warm >= n - 2 * r + 1:\n        return warm\n    else:\n        return -1"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    heaters = []\n    for i in range(len(a)):\n        if a[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    if len(heaters) == 0:\n        print(0)\n    else:\n        if len(heaters) < n:\n            print(-1)\n        else:\n            answer = 0\n            for i in range(len(heaters)):\n                if i == 0:\n                    answer += min(r, heaters[i] - i)\n                else:\n                    answer += min(r, heaters[i] - heaters[i - 1])\n            print(answer)\n    return ''"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Vova's house is an array consisting of $n$ elements (yeah, this is the first problem, I think, where someone lives in the array). There are heaters in some positions of the array. The $i$-th element of the array is $1$ if there is a heater in the position $i$, otherwise the $i$-th element of the array is $0$.\n\n    Each heater has a value $r$ ($r$ is the same for all heaters). This value means that the heater at the position $pos$ can warm up all the elements in range $[pos - r + 1; pos + r - 1]$.\n\n    Vova likes to walk through his house while he thinks, and he hates cold positions of his house. Vova wants to switch some of his heaters on in such a way that each element of his house will be warmed up by at least one heater. \n\n    Vova's target is to warm up the whole house (all the elements of the array), i.e. if $n = 6$, $r = 2$ and heaters are at positions $2$ and $5$, then Vova can warm up the whole house if he switches all the heaters in the house on (then the first $3$ elements will be warmed up by the first heater and the last $3$ elements will be warmed up by the second heater).\n\n    Initially, all the heaters are off.\n\n    But from the other hand, Vova didn't like to pay much for the electricity. So he wants to switch the minimum number of heaters on in such a way that each element of his house is warmed up by at least one heater.\n\n    Your task is to find this number of heaters or say that it is impossible to warm up the whole house.\n\n    -----Input-----\n    The first line of the input contains two integers $n$ and $r$ ($1 \\le n, r \\le 1000$) \u2014 the number of elements in the array and the value of heaters.\n\n    The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 1$) \u2014 the Vova's house description.\n\n    -----Output-----\n    Print one integer \u2014 the minimum number of heaters needed to warm up the whole house or -1 if it is impossible to do it.\n    '''\n    n, r = stdin.split()\n    n = int(n)\n    r = int(r)\n    a = [int(x) for x in stdin.split()]\n    if r > sum(a):\n        return -1\n    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            count += 1\n            for j in range(i - r, i):\n                if a[j] == 0:\n                    a[j] = 1\n                else:\n                    a[j] = 0\n    return count\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    l = [int(x) for x in stdin.split(' ')]\n    heaters = [False for _ in range(n)]\n\n    for i in range(k):\n        heaters[l[i] - 1] = True\n    \n    ind = 0\n    while ind < n:\n        while ind < n and not heaters[ind]:\n            ind += 1\n        if ind < n:\n            for j in range(ind, min(n, ind + k)):\n                heaters[j] = True\n    \n    if ind == n:\n        return str(0)\n    \n    return str(ind)\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n\n    heaters = [True] * n\n    total_heaters = 0\n    for i in range(n):\n        if heaters[i]:\n            pos = i + r\n            if pos >= n:\n                pos = n - 1\n            if a[pos] == 1:\n                total_heaters += 1\n                heaters[i] = False\n    return str(-1) if total_heaters == 0 else str(total_heaters)"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\n\nThe first line contains the number of elements in the array and the value of heaters.\n\nThe second line contains the $n$ integers $a_1, a_2, \\dots, a_n$ \u2014 the array description.\n\nIt's guaranteed that the array is a correct description of a valid array.\n\nIt's guaranteed that the value of heaters is at least 1 and is less than the size of the array.\n\"\"\"\n\n\"\"\"\nm, n = map(int, input().split())\narr = list(map(int, input().split()))\n\narr.sort()\nm1 = [1 for i in range(n)]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if arr[j] - arr[i] <= m:\n            m1[i] += 1\nprint(max(m1))\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    if n < r or r < 1:\n        return '-1'\n\n    heaters = [int(i) for i in stdin.split()]\n    for pos, val in enumerate(heaters):\n        if val == 0:\n            heaters[pos] = 0\n        else:\n            heaters[pos] = 1\n\n    solution = 0\n    min_heaters = 0\n    for i in range(n):\n        min_heaters += 1\n        if i - r + 1 <= n - 1:\n            heaters[i] = 1\n            if i - r + 1 == n - 1:\n                solution = min_heaters\n        if i + r - 1 <= n - 1:\n            heaters[i] = 1\n            if i + r - 1 == n - 1:\n                solution = min_heaters\n\n    if solution == 0:\n        return '-1'\n\n    return str(solution)\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    result = 0\n    for i in range(1, n // 2 + 1):\n        for j in range(1, n // 2 + 1):\n            if i * j == n:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(stdin.strip()))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    count = 0\n    for i in range(2, number):\n        for j in range(1, number):\n            if i * j == number:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n)//(n * factorial(n-2)))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(comb(N, 2) * comb(N - 1, 1))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    count = 0\n    for a in range(1, n // 2 + 1):\n        for b in range(a + 1, n // 2 + 1):\n            c = n - a - b\n            if a * b == c:\n                count += 1\n\n    return count"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # all 2 digit numbers\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for num1 in nums:\n        for num2 in nums:\n            if num1 * num2 + num1 == N:\n                return f\"{num1} * {num2} + {num1} = {N}\""
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            for c in range(1, n):\n                if a * b + c == n:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    return str(len(set([a*b for a in range(1, N//2 + 1) for b in range(a, N//2 + 1)])))"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    count = 0\n\n    for i in range(n):\n        if s[i] == \"(\":\n            count += 1\n        elif s[i] == \")\":\n            count -= 1\n            if count < 0:\n                count = 0\n                break\n\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n@pytest.mark.parametrize(\n    \"input_s,expected\",\n    [\n        (input_s, expected)\n        for input_s, expected in [\n            (\"()()()\", 0),\n            (\"(((()\", 0),\n            (\"()()(()\", 3),\n            (\")(()())()\", 2),\n            (\"))((((\", 0),\n            (\"(())\", 0),\n            (\"())()()()\", 2),\n            (\"()((()))\", 3),\n            (\"()))((((\", 0),\n            (\"(((((((((()()(()\", 9),\n            (\"(((((((((()()(()(()(()\", 9),\n            (\"(()(((()((((((((((()(()(()(()(()()((()\", 9),\n            (\"((())(((((((((((((((((()()(()(()(()(()\", 9),\n            (\"((()(())\", 0),\n            (\"(((((((()()()((()\", 0),\n            (\"(((()(((()(())((()\", 0),\n            (\"(((((((((()()(()(()(()(()\", 0),\n            (\"(((((((((((()()(()(()(()(()()\", 0),\n        ]\n    ]\n)\n\n\n@pytest.mark.parametrize(\n    \"input_s,expected\",\n    [\n        (input_s, expected)\n        for input_s, expected in [\n            (\"()()()\", 0),\n            (\"(((()\", 0),\n            (\"()()(()\", 3),\n            (\"))((((\", 0),\n            (\"(())\", 0),\n            (\"())()(()\", 2),\n            (\"())(()())()\", 2),\n            (\"))(()())()\", 2),\n            (\"())(((()))\", 2),\n            (\"())(()()()()\", 2),\n            (\"(()()(()\", 2),\n            (\"())(()())()\", 2),\n            (\"())(()()(())()\", 2),\n            (\"()((())((((()()(((()()\", 9),\n            (\"(((((((((()(()(()(()\", 9),\n            (\"(((((((((()()(()(()(()\", 9),\n            (\"(((((((((()()(()(()(()\", 9),\n            (\"(((((((((((()()(()(()(()(()\", 9),\n            (\"(((((((((((()(()(()(()(()(()\", 9),\n            (\"(((((((((((()()(()(()(()(()(()\", 9),\n        ]\n    ]\n)\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    print(count_regular(s))\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith(('5', '6')):\n        return '0'\n    stdin = stdin[1:-1]\n    n = int(stdin)\n    brackets = stdin.split('()')\n    if len(brackets) == 1:\n        return '0'\n    brackets = [x for x in brackets if x]\n    cnt = 0\n    for i, bracket in enumerate(brackets):\n        if i % 2 == 0:\n            cnt += bracket.count('(')\n        else:\n            cnt += bracket.count(')')\n    return str(cnt)\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_brackets = int(stdin.strip())\n    brackets_string = stdin[1:]\n    brackets_stack = []\n    for i, char in enumerate(brackets_string):\n        if char == '(':\n            brackets_stack.append(i)\n        elif char == ')':\n            if not brackets_stack:\n                return i\n            brackets_stack.pop()\n    return 0\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def change_type(type: str) -> None:\n        if type == '(':\n            queue.append(')')\n        else:\n            queue.append('(')\n        queue_length.append(len(queue))\n    queue = []\n    queue_length = []\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            queue.append(c)\n            queue_length.append(len(queue))\n        else:\n            if len(queue) > 0:\n                queue_pop = queue.pop(0)\n                if queue_pop == '(':\n                    queue.append(')')\n                    queue_length.append(len(queue))\n                else:\n                    queue.append('(')\n                    queue_length.append(len(queue))\n            else:\n                change_type(c)\n                queue_length.append(len(queue))\n    if len(queue) > 0:\n        return -1\n    else:\n        return max(queue_length)\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    brackets = [s.count('('), s.count(')')]\n    for i in range(n):\n        if brackets[0] == 0:\n            if s[i] == '(':\n                brackets[0] += 1\n            else:\n                brackets[1] += 1\n        else:\n            if s[i] == '(':\n                brackets[0] -= 1\n            else:\n                brackets[1] -= 1\n    return str(min(brackets))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\nassert(solution(\"(((()\")) == 3\nassert(solution(\"()()()\")) == 0\nassert(solution(\")))(\")) == 0\nassert(solution(\"()())(\")) == 0\nassert(solution(\"((())\")) == 3\nassert(solution(\"(((())\")) == 3\nassert(solution(\"(((())\")) == 3\nassert(solution(\"()()()\")) == 0\nassert(solution(\"()()()()\")) == 0\nassert(solution(\"()()()()\")) == 0\nassert(solution(\"()()()()()\")) == 0\nassert(solution(\"()()()()()()\")) == 0\nassert(solution(\"()()()()()()()\")) == 0\nassert(solution(\"()()()()()()()()\")) == 0\nassert(solution(\"()()()()()()()()()\")) == 0\nassert(solutionn\nOutput\n5\n\n10\n\nInput\n8\n)())\n\nOutput\n2\n\nInput\n8\n))))\n\nOutput\n3\n\nInput\n8\n(()\n\nOutput\n0\n\nInput\n8\n()()()\n\nOutput\n0\n\nInput\n8\n(((())\n\nOutput\n3\n\nInput\n8\n)))((((()\n\nOutput\n1\n\nInput\n8\n)))((((())))\n\nOutput\n2\n\nInput\n8\n)))((((()\n\nOutput\n3\n\nInput\n8\n(((()))\n\nOutput\n0\n\nInput\n8\n(((()))\n\nOutput\n1\n\nInput\n8\n)))((((())))\n\nOutput\n1\n\nInput\n8\n(((())))\n\nOutput\n0\n\nInput\n8\n())((((())))\n\nOutput\n1\n\nInput\n8\n(((())))\n\nOutput\n0\n\nInput\n8\n(((())))\n\nOutput\n0\n\nInput\n8\n(((())))\n\nOutput\n1\n\nInput\n8\n)))((((())))\n\nOutput\n1\n\nInput\n8\n())((((())))"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    brackets = stdin.strip()\n    s = [1, 0]\n    for bracket in brackets:\n        if bracket == \"(\":\n            s[1] += 1\n        else:\n            s[1] -= 1\n    s.append(0)\n    for i in range(2, len(brackets) + 1):\n        if s[i] < 0:\n            s[i] = 0\n    return str(sum(s))"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    for i in range(len(s)):\n        sub = s[:i] + s[i+1:]\n        if sub == t:\n            return i\n    return 0\n\nassert solution(input()) == solution(input())\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    n, m = len(s), len(t)\n    if n < m:\n        return 0\n\n    left, right = 0, 0\n    sl = list(s)\n    tl = list(t)\n    cnt = 0\n    while left < n and right < m:\n        if tl[right] == sl[left]:\n            left += 1\n            right += 1\n        elif sl[left] > tl[right]:\n            right += 1\n        else:\n            left += 1\n        cnt = max(cnt, right - left)\n    return cnt\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_length = len(s)\n    t_length = len(t)\n    for i in range(s_length - t_length + 1):\n        if t == s[i:i + t_length]:\n            return i\n    return 0\n\nassert(solution([\"bbaba\", \"bb\", ]) == 3)\nassert(solution([\"baaba\", \"ab\", ]) == 2)\nassert(solution([\"abcde\", \"abcde\", ]) == 0)\nassert(solution([\"asdfasdf\", \"fasd\", ]) == 3)\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    for l in range(len(s)):\n        for r in range(l, len(s)):\n            if s[l:r+1] == t:\n                return r - l\n    return 0"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    return str(solution_naive(s, t))\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    assert False, \"Tests not implemented\"\n\n\n>>> solution('')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"solution.py\", line 28, in solution\n    assert False, \"Tests not implemented\"\nAssertionError: Tests not implemented\n>>> solution('a')\n1\n>>> solution('bb')\n3\n>>> solution('aba')\n2\n>>> solution('abcde')\n0\n>>> solution('asdfasdf')\n3\n>>> solution('baaba')\n3\n>>> solution('baab')\n2\n>>> solution('bbbb')\n2\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return max(len(s) - len(t), len(t) - len(s))\n\nassert solution('bbaba\\nbb\\n') == 3\nassert solution('baaba\\nab\\n') == 2\nassert solution('abcde\\nabcde\\n') == 0\nassert solution('asdfasdf\\nfasd\\n') == 3\nassert solution('zaza\\nzaza\\nzaza\\nzaza\\nzaza') == 0\nassert solution('zaza\\nzaza\\nzaza\\nzaza\\nzaza') == 0\nassert solution('aabaabaaa\\naabaaba') == 1\nassert solution('abcdabcde\\nabcdeabcd') == 0\nassert solution('zaza\\nzaza\\nzaza\\nzaza\\nzaza') == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i:i+len(t)] == t:\n                max_len = max(max_len, i)\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n_input = input().strip()\nprint(solution(_input))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c, d) = [int(x) for x in stdin.split()]\n    return max(\n        (a * d) - (b * c),\n        (b * c) - (a * d),\n        (a * c) - (b * d),\n        (b * d) - (a * c),\n        0,\n    )\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns max value of x * y for given set of input'''\n    line = list(map(int, stdin.split()))\n    return str(line[0] * line[1])"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    \n    return str(max(max(a,b), max(c,d)))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [a,b,c,d] = [int(x) for x in stdin.split()]\n    if a >= b:\n        if c >= d:\n            return \"2\"\n        else:\n            return \"1\"\n    elif c >= d:\n        return \"1\"\n    else:\n        return \"2\""
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_num = 0\n    if a <= b and c <= d:\n        max_num = a * b\n    elif a <= d and c <= b:\n        max_num = a * d\n    elif b <= a and c <= d:\n        max_num = b * c\n    elif b <= d and c <= a:\n        max_num = b * d\n    elif d <= a and c <= b:\n        max_num = d * c\n    elif d <= b and a <= c:\n        max_num = d * a\n    return str(max_num)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    max_x = min(b,d) - max(a,c) + 1\n    print(max_x)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(1 * 2)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2 1 1''')\n    '2'\n    \"\"\"\n    a, b, c, d = (int(i) for i in stdin.split())\n    return '%s' % max(1, (max(b, d) - min(a, c)) // (b - c) - 1)\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    # 2 * 1 = 2\n    # 3 * 1 = 3\n    # 4 * 1 = 4\n    # 5 * 1 = 5\n    # 6 * 1 = 6\n    # 7 * 1 = 7\n    # 8 * 1 = 8\n    # 9 * 1 = 9\n    # 10 * 1 = 10\n    # 11 * 1 = 11\n    # 12 * 1 = 12\n    # 13 * 1 = 13\n    # 14 * 1 = 14\n    # 15 * 1 = 15\n    # 16 * 1 = 16\n    # 17 * 1 = 17\n    # 18 * 1 = 18\n    # 19 * 1 = 19\n    # 20 * 1 = 20\n    # 21 * 1 = 21\n    # 22 * 1 = 22\n    # 23 * 1 = 23\n    # 24 * 1 = 24\n    # 25 * 1 = 25\n    # 26 * 1 = 26\n    # 27 * 1 = 27\n    # 28 * 1 = 28\n    # 29 * 1 = 29\n    # 30 * 1 = 30\n    # 31 * 1 = 31\n    # 32 * 1 = 32\n    # 33 * 1 = 33\n    # 34 * 1 = 34\n    # 35 * 1 = 35\n    # 36 * 1 = 36\n    # 37 * 1 = 37\n    # 38 * 1 = 38\n    # 39 * 1 = 39\n    # 40 * 1 = 40\n    # 41 * 1 = 41\n    # 42 * 1 = 42\n    # 43 * 1 = 43\n    # 44 * 1 = 44\n    # 45 * 1 = 45\n    # 46 * 1 = 46\n    # 47 * 1 = 47\n    # 48 * 1 = 48\n    # 49 * 1 = 49\n    # 50 * 1 = 50\n    # 51 * 1 = 51\n    # 52 * 1 = 52\n    # 53 * 1 = 53\n    # 54 * 1 = 54\n    # 55 * 1 = 55\n    # 56 * 1 = 56\n    # 57 * 1 = 57\n    # 58 * 1 = 58\n    # 59 * 1 = 59\n    # 60 * 1 = 60\n    # 61 * 1 = 61\n    # 62 * 1 = 62\n    # 63 * 1 = 63\n    # 64 * 1 = 64\n    # 65 * 1 = 65\n    # 66 * 1 = 66\n    # 67 * 1 = 67\n    # 68 * 1 = 68\n    # 69 * 1 = 69\n    # 70 * 1 = 70\n    # 71 * 1 = 71\n    # 72 * 1 = 72\n    # 73 * 1 = 73\n    # 74 * 1 = 74\n    # 75 * 1 = 75\n    # 76 * 1 = 76\n    # 77 * 1 = 77\n    # 78 * 1 = 78\n    # 79 * 1 = 79\n    # 80 * 1 = 80\n    # 81 * 1 = 81\n    # 82 * 1 = 82\n    # 83 * 1 = 83\n    # 84 * 1 = 84\n    # 85 * 1 = 85\n    # 86 * 1 = 86\n    # 87 * 1 = 87\n    # 88 * 1 = 88\n    # 89 * 1 = 89\n    # 90 * 1 = 90\n    # 91 * 1 = 91\n    # 92 * 1 = 92\n    # 93 * 1 = 93\n    # 94 * 1 = 94\n    # 95 * 1 = 95\n    # 96 * 1 = 96\n    # 97 * 1 = 97\n    # 98 * 1 = 98\n    # 99 * 1 = 99\n    # 100 * 1 = 100\n    # 101 * 1 = 101\n    # 102 * 1 = 102\n    # 103 * 1 = 103\n    # 104 * 1 = 104\n    # 105 * 1 = 105\n    # 106 * 1 = 106\n    # 107 * 1 = 107\n    # 108 * 1 = 108\n    # 109 * 1 = 109\n    # 110 * 1 = 110\n    # 111 * 1 = 111\n    # 112 * 1 = 112\n    # 113 * 1 = 113\n    # 114 * 1 = 114\n    # 115 * 1 = 115\n    # 116 * 1 = 116\n    # 117 * 1 = 117\n    # 118 * 1 = 118\n    # 119 * 1 = 119\n    # 120 * 1 = 120\n    # 121 * 1 = 121\n    # 122 * 1 = 122\n    # 123 * 1 = 123\n    # 124 * 1 = 124\n    # 125 * 1 = 125\n    # 126 * 1 = 126\n    # 127 * 1 = 127\n    # 128 * 1 = 128\n    # 129 * 1 = 129\n    # 130 * 1 = 130\n    # 131 * 1 = 131\n    # 132 * 1 = 132\n    # 133 * 1 = 133\n    # 134 * 1 = 134\n    # 135 * 1 = 135\n    # 136 * 1 = 136\n    # 137 * 1 = 137\n    # 138 * 1 = 138\n    # 139 * 1 = 139\n    # 140 * 1 = 140\n    # 141 * 1 = 141\n    # 142 * 1 = 142\n    # 143 * 1 = 143\n    # 144 * 1 = 144\n    # 145 * 1 = 145\n    # 146 * 1 = 146\n    # 147 * 1 = 147\n    # 148 * 1 = 148\n    # 149 * 1 = 149\n    # 150 * 1 = 150\n    # 151 * 1 = 151\n    # 152 * 1 = 152\n    # 153 * 1 = 153\n    # 154 * 1 = 154\n    # 155 * 1 = 155\n    # 156 * 1 = 156\n    # 157 * 1 = 157\n    # 158 * 1 = 158\n    # 159 * 1 = 159\n    # 160 * 1 = 160\n    # 161 * 1 = 161\n    # 162 * 1 = 162\n    # 163 * 1 = 163\n    # 164 * 1 = 164\n    # 165 * 1 = 165\n    # 166 * 1 = 166\n    # 167 * 1 = 167\n    # 168 * 1 = 168\n    # 169 * 1 = 169\n    # 170 * 1 = 170\n    # 171 * 1 = 171\n    # 172 * 1 = 172\n    # 173 * 1 = 173\n    # 174 * 1 = 174\n    # 175 * 1 = 175\n    # 176 * 1 = 176\n    # 177 * 1 = 177\n    # 178 * 1 = 178\n    # 179 * 1 = 179\n    # 180 * 1 = 180\n    # 181 * 1 = 181\n    # 182 * 1 = 182\n    # 183 * 1 = 183\n    # 184 * 1 = 184\n    # 185 * 1 = 185\n    # 186 * 1 = 186\n    # 187 * 1 = 187\n    # 188 * 1 = 188\n    # 189 * 1 = 189\n    # 190 * 1 = 190\n    # 191 * 1 = 191\n    # 192 * 1 = 192\n    # 193 * 1 = 193\n    # 194 * 1 = 194\n    # 195 * 1 = 195\n    # 196 * 1 = 196\n    # 197 * 1 = 197\n    # 198 * 1 = 198\n    # 199 * 1 = 199\n    # 200 * 1 = 200\n    # 201 * 1 = 201\n    # 202 * 1 = 202\n    # 203 * 1 = 203\n    # 204 * 1 = 204\n    # 205 * 1 = 205\n    # 206 * 1 = 206\n    # 207 * 1 = 207\n    # 208 * 1 = 208\n    # 209 * 1 = 209\n    # 210 * 1 = 210\n    # 211 * 1 = 211\n    # 212 * 1 = 212\n    # 213 * 1 = 213\n    # 214 * 1 = 214\n    # 215 * 1 = 215\n    # 216 * 1 = 216\n    # 217 * 1 = 217\n    # 218 * 1 = 218\n    # 219 * 1 = 219\n    # 220 * 1 = 220\n    # 221 * 1 = 221\n    # 222 * 1 = 222\n    # 223 * 1 = 223\n    # 224 * 1 = 224\n    # 225 * 1 = 225\n    # 226 * 1 = 226\n    # 227 * 1 = 227\n    # 228 *"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    maximum_value = -1\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if x * y > maximum_value:\n                maximum_value = x * y\n\n    return str(maximum_value)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    problem_count_for_arcs = 0\n    problem_count_for_abc = 0\n    for line in stdin.split('\\n'):\n        problem_count_for_arcs += (int(line) >= 5)\n        problem_count_for_abc += (int(line) < 5)\n\n    return '%s\\n%s' % (problem_count_for_arcs, problem_count_for_abc)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(stdin) for stdin in stdin.split()]\n\n    a = 0\n    for i in range(n):\n        a += (d[i] - 1) // 2\n\n    return str(a)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"impossible\"\n\n    d = [int(x) for x in stdin.split()]\n    d.sort(reverse=True)\n    print(d)\n    K = 0\n    ARCs = 0\n    ABCs = 0\n    for i in d:\n        if i > K:\n            ARCs += 1\n        else:\n            ABCs += 1\n        K += 1\n    return str(ARCs) + \" \" + str(ABCs)\n\nassert(solution(\"6\") == \"2 4\")\nassert(solution(\"9 1 4 4 6 7\") == \"2\")\nassert(solution(\"5 1 4 2 1\") == \"impossible\")\nassert(solution(\"10 1 2 2 3\") == \"impossible\")\nassert(solution(\"10 1 1 1 1\") == \"2\")\nassert(solution(\"5\") == \"1 2\")\nassert(solution(\"7\") == \"2\")\nassert(solution(\"10 2 2 1 2\") == \"impossible\")\nassert(solution(\"6 2 1 4 2\") == \"2\")\nassert(solution(\"6 2 1 4 2\") == \"2\")\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n_probs_arcs = 0\n    n_probs_abc = 0\n\n    for line in stdin.strip().split(' '):\n        n_probs_arcs += N // int(line)\n        n_probs_abc += (N - n_probs_arcs * int(line)) // 2\n\n    return str(n_probs_arcs) +'' + str(n_probs_abc)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    diff = list(map(int, stdin.split(\" \")))\n    #\n    # let's sort the diff array in O(nlogn) time\n    diff = sorted(diff, reverse=True)\n    # now we have that there are 2 even number of problems, and we can count the number of choices\n    diff = [diff[i] for i in range(0, n, 2)]\n    # the number of problems for ARCs is the same as the number of problems for ABCs\n    return str(diff.count(diff[0]))"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    K = int(stdin.readline().strip())\n    # if N % 2 == 1:\n    #     raise Exception('N must be even.')\n    # if K > N:\n    #     raise Exception('K must be less than or equal to N.')\n    # if K == N:\n    #     return '1'\n    # if K == 1:\n    #     return str(N)\n\n    result = ''\n    for i in range(1, N, 2):\n        result += str(K) +'' + str(i) +''\n    return result"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of problems\n    N = int(stdin.readline())\n    # Read the difficulties\n    d = [int(x) for x in stdin.readline().split()]\n    K = max(d)\n    # Check if K is odd or even\n    if K % 2 == 0:\n        # If K is even, check for ARCs\n        countARCs = len(list(filter(lambda x: x >= K, d)))\n        # If K is even, check for ABCs\n        countABCs = len(list(filter(lambda x: x < K, d)))\n        # If K is even, return 0\n        return '0' if countARCs == countABCs else str(countARCs)\n    else:\n        # If K is odd, check for ARCs\n        countARCs = len(list(filter(lambda x: x >= K, d)))\n        # If K is odd, check for ABCs\n        countABCs = len(list(filter(lambda x: x < K, d)))\n        # If K is odd, return 0\n        return '0' if countARCs == countABCs else str(countABCs)\n\nassert(solution('9\\n9 1 4 4 6 7') == '2')\nassert(solution('10\\n1 2 3 4 5 6 7 8 9 10') == '0')\nassert(solution('2\\n3 1') == '0')\nassert(solution('3\\n3 1 4') == '1')\nassert(solution('3\\n3 1 4 5') == '1')\nassert(solution('3\\n3 1 4 5 6') == '2')\nassert(solution('3\\n3 1 4 5 6 7') == '2')\nassert(solution('3\\n3 1 4 5 6 7 8') == '2')\nassert(solution('3\\n3 1 4 5 6 7 8 9') == '2')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10') == '2')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41') == '3')\nassert(solution('3\\n3 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    N = int(line[0])\n    k = int(line[1])\n    d_n = [int(x) for x in line[2:].split()]\n\n    # assert(N%2==0)\n    # assert(len(d_n)==N)\n    # assert(all(1 <= d_n[x] <= 10**5 for x in range(N)))\n    # assert(all(d_n[x] <= d_n[x+1] for x in range(N-1)))\n\n    count = 0\n    for i in range(N):\n        for j in range(i, N):\n            if max(d_n[i:j+1]) <= k:\n                count += 1\n\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.rstrip().split()[0]\n    d = stdin.rstrip().split()[1:]\n    #print(N)\n    #print(d)\n    d.sort()\n    #print(d)\n    a = 0\n    for i in range(1, int(N)):\n        if d[i] >= d[i-1]:\n            a += 1\n    print(a)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sleep_time = list(map(int, stdin.split()))\n    sleep_hours = sleep_time[1]\n    sleeping_time = sleep_time[2]\n    good_times = 0\n    for i in range(sleep_hours):\n        if i == sleeping_time - 1:\n            good_times += 1\n        elif i == sleeping_time - 2:\n            good_times += 2\n    return good_times\n\nassert(solution(stdin) == 3)\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, l, r, n = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    m = 0\n    for i in range(n - 1):\n        j = i + 1\n        while a[i] + i > h or a[i] + i - 1 > h:\n            a[i] = a[i] - 1\n        if a[i] + i > h:\n            m = max(m, n - j)\n        else:\n            m = max(m, n - j + 1)\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] >= l:\n            k += 1\n    return k\n\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 24 21 23\\n16 17 14 20 20 11 22\\n\")\n    '3'\n    \"\"\"\n    _, h, l, r = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    num = 0\n\n    for i in range(1, h + 1):\n        if i > r or i > l:\n            continue\n\n        for j in range(1, h + 1):\n            if i + j > h:\n                continue\n\n            num += 1\n    return str(num)\n    \n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.append(h)\n    i = 1\n    max_good_times = 0\n    while i < len(a):\n        if a[i] < l or a[i] > r:\n            i += 1\n            continue\n        max_good_times += 1\n        i += 1\n    return max_good_times\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 24 21 23''')\n    '3'\n    \"\"\"\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    a = [x for x in a if l <= x <= r]\n    h -= 1\n    if len(a) == 0:\n        return '0'\n    return str(len(a))"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.strip().split())\n    times = list(map(int, stdin.strip().split()))\n\n    # change the times into a time of a day\n    time_of_day = [0] * n\n    for i in range(n):\n        time_of_day[i] = times[i] % h\n\n    # sort the time of day\n    time_of_day.sort()\n\n    max_good_times = 0\n    for i in range(n):\n        if time_of_day[i] < l or time_of_day[i] > r:\n            continue\n\n        # sleep after i-1 hours\n        if i - 1 >= 0:\n            if time_of_day[i - 1] < l or time_of_day[i - 1] > r:\n                continue\n\n        # sleep after i hours\n        if time_of_day[i] < l or time_of_day[i] > r:\n            continue\n\n        max_good_times += 1\n\n    return max_good_times\n\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution('''7 24 21 23\n16 17 14 20 20 11 22''') == 3)\nassert(solution(''"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n\n    sleeps = list(map(int, stdin.split()))\n\n    min_sleep = min(sleeps)\n    max_sleep = max(sleeps)\n\n    best = 0\n\n    for i in range(n):\n        if sleeps[i] >= l and sleeps[i] <= r:\n            best += 1\n\n    return str(best)\n\n\nprint(solution(\"7 24 21 23\"))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.strip().split(' '))\n    a = list(map(int, stdin.strip().split(' ')))\n\n    answer = 0\n\n    for i in range(n - 1):\n        if a[i + 1] - a[i] > r:\n            answer += 1\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = list(map(int, stdin.readline().split()))\n    difficulties = [0] * n\n    max = 0\n    for i in range(n):\n        if problems[i] == max:\n            difficulties[i] += 1\n            max += 1\n        else:\n            max = problems[i]\n            difficulties[i] = 1\n    max_diff = max * 2\n    for i in range(n):\n        if max_diff >= difficulties[i]:\n            max_diff -= difficulties[i]\n        else:\n            break\n    return str(max - max_diff)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = sorted(int(x) for x in stdin.readline().split())\n    return str(max(1, sum(p * 2 <= x * 2 for p in problems)))\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = list(map(int, stdin.strip().split(' ')))\n    def is_valid(problems: list) -> bool:\n        for i in range(1, len(problems)):\n            if problems[i] <= problems[i - 1] * 2:\n                return False\n        return True\n    contests = []\n    for i in range(1, n + 1):\n        if is_valid(problems[:i]):\n            contests.append(i)\n    return str(max(contests))\n\nsolution(stdin)\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = stdin.readline().strip().split(\" \")\n    arr = [int(i) for i in arr]\n\n    res = 0\n    \n    for i in range(1, n - 1):\n        diff = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] <= diff * 2:\n                break\n        if j == n - 1:\n            res += 1\n    \n    return str(res)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    A = set(a)\n    m = 0\n    for a in a:\n        for b in a:\n            if a >= b:\n                continue\n            elif a == b * 2:\n                m += 1\n                break\n            else:\n                break\n    print(m)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n\nprint(solution(\"\"))\nprint(solution(\"1\"))\nprint(solution(\"10\"))\nprint(solution(\"3\"))\nprint(solution(\"4\"))\nprint(solution(\"10\"))\nprint(solution(\"2\"))\nprint(solution(\"5\"))\nprint(solution(\"2 2 10 10 100 150 200\"))\nprint(solution(\"3 3 3 3 3 3 3 3 3\"))\nprint(solution(\"4 4 4 4 4 4 4 4 4\"))\nprint(solution(\"5 5 5 5 5 5 5 5 5\"))\nprint(solution(\"2 2 10 10 100 150 200\"))\nprint(solution(\"6 6 6 6 6 6 6 6 6\"))\nprint(solution(\"7 7 7 7 7 7 7 7 7\"))\nprint(solution(\"8 8 8 8 8 8 8 8 8\"))\nprint(solution(\"9 9 9 9 9 9 9 9 9\"))\nprint(solution(\"10 10 10 10 10 10 10 10\"))\nprint(solution(\"11 11 11 11 11 11 11 11\"))\nprint(solution(\"12 12 12 12 12 12 12 12\"))\nprint(solution(\"13 13 13 13 13 13 13 13\"))\nprint(solution(\"14 14 14 14 14 14 14 14\"))\nprint(solution(\"15 15 15 15 15 15 15 15\"))\nprint(solution(\"16 16 16 16 16 16 16 16\"))\nprint(solution(\"17 17 17 17 17 17 17 17\"))\nprint(solution(\"18 18 18 18 18 18 18 18\"))\nprint(solution(\"19 19 19 19 19 19 19 19\"))\nprint(solution(\"20 20 20 20 20 20 20 20\"))\nprint(solution(\"21 21 21 21 21 21 21 21\"))\nprint(solution(\"22 22 22 22 22 22 22 22\"))\nprint(solution(\"23 23 23 23 23 23 23 23\"))\nprint(solution(\"24 24 24 24 24 24 24 24\"))\nprint(solution(\"25 25 25 25 25 25 25 25\"))\nprint(solution(\"26 26 26 26 26 26 26 26\"))\nprint(solution(\"27 27 27 27 27 27 27 27\"))\nprint(solution(\"28 28 28 28 28 28 28 28\"))\nprint(solution(\"29 29 29 29 29 29 29 29\"))\nprint(solution(\"30 30 30 30 30 30 30 30\"))\nprint(solution(\"31 31 31 31 31 31 31 31\"))\nprint(solution(\"32 32 32 32 32 32 32 32\"))\nprint(solution(\"33 33 33 33 33 33 33 33\"))\nprint(solution(\"34 34 34 34 34 34 34 34\"))\nprint(solution(\"35 35 35 35 35 35 35 35\"))\nprint(solution(\"36 36 36 36 36 36 36 36\"))\nprint(solution(\"37 37 37 37 37 37 37 37\"))\nprint(solution(\"38 38 38 38 38 38 38 38\"))\nprint(solution(\"39 39 39 39 39 39 39 39\"))\nprint(solution(\"40 40 40 40 40 40 40 40\"))\nprint(solution(\"41 41 41 41 41 41 41 41\"))\nprint(solution(\"42 42 42 42 42 42 42 42\"))\nprint(solution(\"43 43 43 43 43 43 43 43\"))\nprint(solution(\"44 44 44 44 44 44 44 44\"))\nprint(solution(\"45 45 45 45 45 45 45 45\"))\nprint(solution(\"46 46 46 46 46 46 46 46\"))\nprint(solution(\"47 47 47 47 47 47 47 47\"))\nprint(solution(\"48 48 48 48 48 48 48 48\"))\nprint(solution(\"49 49 49 49 49 49 49 49\"))\nprint(solution(\"50 50 50 50 50 50 50 50\"))\nprint(solution(\"51 51 51 51 51 51 51 51\"))\nprint(solution(\"52 52 52 52 52 52 52 52\"))\nprint(solution(\"53 53 53 53 53 53 53 53\"))\nprint(solution(\"54 54 54 54 54 54 54 54\"))\nprint(solution(\"55 55 55 55 55 55 55 55\"))\nprint(solution(\"56 56 56 56 56 56 56 56\"))\nprint(solution(\"57 57 57 57 57 57 57 57\"))\nprint(solution(\"58 58 58 58 58 58 58 58\"))\nprint(solution(\"59 59 59 59 59 59 59 59\"))\nprint(solution(\"60 60 60 60 60 60 60 60\"))\nprint(solution(\"61 61 61 61 61 61 61 61\"))\nprint(solution(\"62 62 62 62 62 62 62 62\"))\nprint(solution(\"63 63 63 63 63 63 63 63\"))\nprint(solution(\"64 64 64 64 64 64 64 64\"))\nprint(solution(\"65 65 65 65 65 65 65 65\"))\nprint(solution(\"66 66 66 66 66 66 66 66\"))\nprint(solution(\"67 67 67 67 67 67 67 67\"))\nprint(solution(\"68 68 68 68 68 68 68 68\"))\nprint(solution(\"69 69 69 69 69 69 69 69\"))\nprint(solution(\"70 70 70 70 70 70 70 70\"))\nprint(solution(\"71 71 71 71 71 71 71 71\"))\nprint(solution(\"72 72 72 72 72 72 72 72\"))\nprint(solution(\"73 73 73 73 73 73 73 73\"))\nprint(solution(\"74 74 74 74 74 74 74 74\"))\nprint(solution(\"75 75 75 75 75 75 75 75\"))\nprint(solution(\"76 76 76 76 76 76 76 76\"))\nprint(solution(\"77 77 77 77 77 77 77 77\"))\nprint(solution(\"78 78 78 78 78 78 78 78\"))\nprint(solution(\"79 79 79 79 79 79 79 79\"))\nprint(solution(\"80 80 80 80 80 80 80 80\"))\nprint(solution(\"81 81 81 81 81 81 81 81\"))\nprint(solution(\"82 82 82 82 82 82 82 82\"))\nprint(solution(\"83 83 83 83 83 83 83 83\"))\nprint(solution(\"84 84 84 84 84 84 84 84\"))\nprint(solution(\"85 85 85 85 85 85 85 85\"))\nprint"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = [int(x) for x in stdin.readline().split()]\n    x = l[0]\n    for i in l:\n        x = lcm(x, i)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if lcm(l[i], l[j]) == x:\n                print(i+1, j+1)\n    return ''\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    ans = None\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            l = lcm(nums[i], nums[j])\n            if ans is None or ans > l:\n                ans = l\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/maximum-lcm-of-a-sequence-of-numbers\"\"\"\n    from functools import reduce\n    from math import lcm\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n    for i in range(n):\n        a[i] = a[i] * (i+1)\n    return str(lcm(reduce(lambda x,y: x*y, a), a[0]))"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the pair of elements that has the smallest LCM.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    mi = 10 ** 7\n    for i in range(n):\n        for j in range(i, n):\n            if lcm(a[i], a[j]) < mi:\n                mi = lcm(a[i], a[j])\n                i1, j1 = i, j\n    return''.join(str(x) for x in [i1 + 1, j1 + 1])\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = min(a)\n    a.remove(m)\n    x = a[0]\n    y = a[1]\n    c = lcm(x, y)\n    return \" \".join(map(str, (c // x, c // y)))\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n\n    min_value = min(arr)\n    arr.remove(min_value)\n    min_value = min(arr)\n\n    return stdin.readline().strip()\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    sorted_a = sorted(a)\n    min_a = sorted_a[0]\n    max_a = sorted_a[-1]\n    min_lcm = None\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm_a = (a[i] * a[j]) // gcd(a[i], a[j])\n            if min_lcm is None or lcm_a < min_lcm:\n                min_lcm = lcm_a\n    return str(i+1) + \" \" + str(j+1)\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = sorted(a)\n    print(a[0], a[n - 1])\n    return"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, *a = [int(x) for x in stdin.split()]\n    return''.join([str(i) for i, _ in min([(a[i] * a[j], i, j) for i in range(len(a)) for j in range(i + 1, len(a))] or [(0, 0, 0)])])\n\nassert(solution('') == '')\nassert(solution('5') == '1 2')\nassert(solution('5 2 4 3 6') == '1 2')\nassert(solution('5 2 11 3 7') == '1 4')\nassert(solution('6 2 5 10 1 10 2') == '1 4')\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    num_zero = s.count('0')\n    num_one = s.count('1')\n    num_two = s.count('2')\n    num_diff = (3 * (n - num_zero - num_one - num_two)) - num_zero - num_one - num_two\n    if num_diff % 3!= 0:\n        return ''\n    num_zero -= num_diff // 3\n    num_one -= num_diff // 3\n    num_two -= num_diff // 3\n    return s.replace('0', '1', num_zero).replace('2', '0', num_one).replace('1', '2', num_two)\n    # return ''.join([s[i] for i in range(0, n, 3)])\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = []\n\n    for i in range(3):\n        res.append(s.count(str(i)))\n\n    if n % 3 == 0:\n        res[0], res[1], res[2] = res[1], res[2], res[0]\n    elif n % 3 == 1:\n        res[0], res[1], res[2] = res[2], res[0], res[1]\n    else:\n        res[0], res[1], res[2] = res[1], res[0], res[2]\n\n    s = ''.join(str(x) for x in res)\n\n    if s[0] == '0':\n        return s[1:]\n    else:\n        return s"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    start = 0\n    end = n\n    min_replacements = n\n\n    while start < end:\n        mid = (start + end) // 2\n        if is_balanced(s, mid):\n            min_replacements = min(min_replacements, mid)\n            end = mid\n        else:\n            start = mid + 1\n\n    return ''.join(s[i] for i in range(n) if is_balanced(s, i))\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the smallest balanced ternary string that can be obtained from the given one with minimum number of replacements.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    result = '0'\n    left, right = 0, n-1\n    while True:\n        if left == n:\n            break\n        if right == n:\n            break\n        if s[left] == s[right]:\n            left += 1\n            right -= 1\n        elif s[left] == '0':\n            result += '0'\n            left += 1\n        elif s[left] == '1':\n            result += '1'\n            right -= 1\n        elif s[left] == '2':\n            result += '2'\n            left += 1\n        elif s[right] == '0':\n            result += '0'\n            right -= 1\n        elif s[right] == '1':\n            result += '1'\n            left += 1\n        elif s[right] == '2':\n            result += '2'\n            right -= 1\n    return result\n\nassert (solution('') == '0')\nassert (solution('1') == '1')\nassert (solution('12') == '021')\nassert (solution('1221') == '1212')\nassert (solution('121') == '021')\nassert (solution('0121') == '021')\nassert (solution('0121012') == '0121112')\nassert (solution('012') == '021')\nassert (solution('012110') == '02110')\nassert (solution('0121102') == '012102')\nassert (solution('01211021') == '00211021')\nassert (solution('01211021012') == '00211021012')\nassert (solution('01211021013012022') == '00211021013012022')\nassert (solution('01211021013012022112') == '00211021013012022112')\nassert (solution('123456789') == '123456789')\nassert (solution('1234567891011122') == '1234567891011122')\nassert (solution('123456789101112212345678910111221') == '123456789101112212345678910111221')\nassert (solution('1234567891011122123456789101112211212131415161718192012222324252627282930132333435363738394043444546') == '1234567891011122123456789101112211212131415161718192012222324252627282930132333435363738394043444546')\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 3!= 0:\n        return None\n    ones, twos = 0, 0\n    for c in s:\n        if c == \"0\":\n            ones += 1\n        elif c == \"1\":\n            twos += 1\n    if ones!= twos:\n        return None\n    res = []\n    i = 0\n    while i < n:\n        if s[i] == \"0\":\n            res.append(\"1\")\n            res.append(\"0\")\n        else:\n            res.append(\"0\")\n            res.append(\"1\")\n        i += 1\n    return \"\".join(res)\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if int(n)%3!= 0:\n        return \"NO SOLUTION\"\n    n = int(n)\n    t = list(stdin)\n    #print(t)\n    m = \"\"\n    for i in range(n):\n        if t[i] == \"0\":\n            t[i] = \"1\"\n        elif t[i] == \"1\":\n            t[i] = \"2\"\n        elif t[i] == \"2\":\n            t[i] = \"0\"\n        #print(t)\n        if i > 0:\n            if t[i] < t[i-1]:\n                t[i] = t[i-1]\n        m += t[i]\n        #print(m)\n    #print(m)\n    return m\n    \n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.replace(\"0\", \"\", n // 3)\n    s = s.replace(\"1\", \"\", 2 * n // 3)\n    s = s.replace(\"2\", \"\", n // 3)\n    print(s)\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the lexicographically smallest balanced ternary string\"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.replace(\"0\", \"2\").replace(\"1\", \"2\").replace(\"2\", \"0\")\n    print(s)\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    s = list(s)\n    odd = 0\n    even = 0\n    for i in s:\n        if i == '1':\n            odd += 1\n        else:\n            even += 1\n    for i in s:\n        if i == '0':\n            odd -= 1\n            if even < odd:\n                s[s.index(i)] = '2'\n                break\n        else:\n            even -= 1\n            if odd < even:\n                s[s.index(i)] = '0'\n                break\n    s = ''.join(s)\n    return s"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, m: int, a: List[int]) -> int:\n        a = a[:]\n        a[m] = 0\n        if n == 1:\n            return 1\n        return solve(n-1, 0, a) + solve(n-1, n-1, a)\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    print(solve(n, m, a))"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    step_list = list(map(int, stdin.split()))\n    # all_list = [0] * (n+1)\n    # all_list[0] = 1\n    # all_list[1] = 1\n    #\n    # for step in range(2, n+1):\n    #     all_list[step] = (all_list[step-1] + all_list[step-2]) % 1000000007\n    #\n    # if n == 1:\n    #     return 1\n    #\n    # if n == 2:\n    #     return 2 if step_list[1] == 0 else 2 if step_list[1] == 1 else 4\n    #\n    # if m == 1:\n    #     return 1\n    #\n    # count = 0\n    # for i in range(1, m-1):\n    #     if step_list[i] == 0:\n    #         count += all_list[i-1]\n    #\n    # return count % 1000000007\n    return (all_list[n-1] - all_list[m-1] - all_list[m-2]) % 1000000007"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(\" \")]\n    print(fibonacci_number(data[0], data[1]))\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    # a[i] is the number of ways to climb up the stair i\n    a = [0] * (n + 1)\n    # a[0] = 1\n    # a[1] = 1\n    for i in range(m):\n        a[i + 1] = (a[i] + a[i + 1]) % 1000000007\n    return str(a[m])\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    m = int(lines[1])\n    arr = [int(x) for x in lines[2].split(' ')]\n    ways = 0\n    for i in range(len(arr)):\n        if i == 0:\n            ways += 1\n        if i > 0 and i < len(arr) - 1:\n            if arr[i] == arr[i-1] or arr[i] == arr[i+1]:\n                ways += 1\n    print(ways % 1000000007)\n    return ''"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    if N == 1: return 1\n    elif N == 2: return 2\n    a = list(map(int, stdin.split(\" \")))\n    for i in range(1, N):\n        a[i] += a[i-1]\n    memo = [-1] * N\n    return solutionHelper(N, M, a, 0, memo)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    ways = [0] * (N + 1)\n    ways[0] = 1\n\n    for i in range(1, N):\n        for j in range(1, M + 1):\n            if i > j:\n                break\n            ways[i] = (ways[i] + ways[i - j]) % 1000000007\n    return str(ways[N - 1])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    ways = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                ways[i] += ways[j]\n    return str(ways[n - 1] % 1000000007)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    count = 0\n    for x in range(1, N+1):\n        for y in range(1, x+1):\n            if x % y == 0 and (x // y) % 2 == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    print(int(n * (n + 1) / 2) % 1000000007)\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    if x + k * d < x:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n    return \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n    moves = [abs(x - d) for x in range(max(0, x - d), min(x + d + 1, 1000000))]\n    return str(min(moves))\n\nimport sys"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    #!!! still did not understand why this works\n    abs_x = abs(x)\n    for i in range(k):\n        if abs_x - d < abs(x):\n            abs_x -= d\n        else:\n            abs_x += d\n    return str(abs_x)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(n) for n in stdin.split()]\n    return str(min(x + d, x - d, x + (d * k), x - (d * k)))\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(n) for n in stdin.split()]\n    return str(abs(min(x, x - d, x + d)))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, D = tuple(int(x) for x in stdin.split())\n    target = K * D\n    if target < 0:\n        return str(abs(target))\n    else:\n        return str(target)\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n % 60\n    s = n // 60 % 60\n    h = n // (60 * 60)\n\n    if m < 10:\n        m = '0' + str(m)\n    else:\n        m = str(m)\n\n    if s < 10:\n        s = '0' + str(s)\n    else:\n        s = str(s)\n\n    if h < 10:\n        h = '0' + str(h)\n    else:\n        h = str(h)\n\n    print(h + ':' + m + ':' + s)"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # This doesn't work since time.time() is used to get the current time\n    # in seconds, so the total time to run the program will be slightly\n    # lower than the exact time the program would have taken to finish\n    # if the calculation was done at the end of the function\n    return str(ceil(log(n+1,2)))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            count += i\n    return count\n\n\nassert solution(14) == 7\nassert solution(11) == 2\nassert solution(571576) == 10\nassert solution(2128506) == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    speed_factor = 1\n    while n >= 10:\n        n /= 10\n        speed_factor *= 10\n    return str(speed_factor)\n    \n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)//2)\n\nassert(solution('11') == '2')\nassert(solution('14') == '0')\nassert(solution('61441') == '2')\nassert(solution('571576') == '10')\nassert(solution('2128506') == '3')\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.ceil(math.sqrt(int(stdin)))))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    N = int(N)\n    remainder = N % 2\n    if remainder == 0:\n        return 0\n    else:\n        return 2\n\n\nassert (solution('') == 0)\nassert (solution('0') == 0)\nassert (solution('1') == 2)\nassert (solution('10') == 2)\nassert (solution('11') == 0)\nassert (solution('14') == 2)\nassert (solution('2128506') == 3)\nassert (solution('571576') == 10)\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n **.5) + 1)\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return sum(i for i in range(1, n // 2 + 1) if n % i == 0)\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin))[2:])"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a = int(stdin)\n    if a == 1:\n        return '1'\n    elif a == 2:\n        return '1'\n    elif a == 3:\n        return '4'\n    elif a == 4:\n        return '1'\n    elif a == 5:\n        return '5'\n    elif a == 6:\n        return '2'\n    elif a == 7:\n        return '8'\n    elif a == 8:\n        return '2'\n    elif a == 9:\n        return '6'\n    elif a == 10:\n        return '1'\n    elif a == 11:\n        return '9'\n    elif a == 12:\n        return '4'\n    elif a == 13:\n        return '10'\n    elif a == 14:\n        return '5'\n    elif a == 15:\n        return '11'\n    elif a == 16:\n        return '8'\n    elif a == 17:\n        return '7'\n    elif a == 18:\n        return '4'\n    elif a == 19:\n        return '3'\n    elif a == 20:\n        return '9'\n    elif a == 21:\n        return '13'\n    elif a == 22:\n        return '15'\n    elif a == 23:\n        return '14'\n    elif a == 24:\n        return '12'\n    elif a == 25:\n        return '6'\n    elif a == 26:\n        return '10'\n    elif a == 27:\n        return '5'\n    elif a == 28:\n        return '3'\n    elif a == 29:\n        return '1'\n    elif a == 30:\n        return '8'\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    ans = (a * (a + 1) * (a + 2) * (a + 3)) / 8\n    return str(ans)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a*a*a\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 2:\n        return 1\n    elif a < 4:\n        return 2\n    else:\n        return 3"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(a ** 2)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    print(27 * n)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return ''.join(list(map(str, range(1, a + 1))))"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(pow(a, 5, 1000000007))"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '1' if n % 2 == 0 else '0'"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    one_count: int = 0\n    while a % 2 == 0:\n        a /= 2\n        one_count += 1\n    return str(one_count)\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n\n    if a == 0:\n        return '0'\n    elif a < 5:\n        return '0'\n    elif a % 5 == 0:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return '1'\n    if a == 2:\n        return '0'\n    div = set()\n    for i in range(2, a + 1):\n        while a % i == 0:\n            div.add(i)\n            a //= i\n    if a == 1:\n        return '0'\n    return '1'"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 10:\n        return 0\n    if a < 100:\n        if a % 10 == a // 10:\n            return 0\n        else:\n            return 1\n    if a < 1000:\n        if a % 100 == a // 100:\n            return 0\n        if a % 1000 == a // 1000:\n            return 1\n        else:\n            return 0\n    if a < 10000:\n        if a % 10000 == a // 10000:\n            return 0\n        else:\n            return 1\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n\n    if a % 2:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the binary representation of the number\n    \"\"\"\n    return str(bin(int(stdin)))[2:]\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0 if stdin == 0 else 1\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(a) for a in stdin.readline().strip().split(\" \")]\n    A.sort()\n    print(A[(n - 1) // 2])"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = stdin.split(\" \")\n    nums = [int(n) for n in nums]\n    print(nums)\n    return \"123\"\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    return str(n)\n\n\nsolution(stdin)\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n\n    return str(sum(A))\n\n\n\nsolution('8\\n1 2 3 1\\n')\n'''\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    min_a = min(a)\n    max_a = max(a)\n    s = [i for i in range(min_a, max_a + 1) if i not in a]\n    return str(s[0])"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(\"4\\n2 5 3 1\") == \"4\")\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\nnums.sort()\n\nprint(nums[0])\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    a = [int(stdin) for stdin in stdin.split(' ')]\n\n    def XOR(a: int, b: int) -> int:\n        return a ^ b\n\n    def AND(a: int, b: int) -> int:\n        return a & b\n\n    xor = reduce(XOR, a)\n    ans = reduce(AND, a)\n    return str(xor) +'' + str(ans)\n\nassert(solution('') == '0 0')\nassert(solution('1 2 3 4') == '10 3')\nassert(solution('1 2 3') == '3 3')\nassert(solution('6 9 4 0') == '1 2')\nassert(solution('5 4 1 2 3') == '0 2')\nassert(solution('6 9 4 0 1 2 3') == '1 2')\nassert(solution('9 4 0 1 2 3 6') == '6 1')\nassert(solution('9 4 0 1 2 3 6 7 8 9') == '5 7')\nassert(solution('8 5 2 0 1 3 4 6 7 9') == '6 1')\nassert(solution('8 5 2 0 1 3 4 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '0 0')"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # for _ in range(3):\n    #     stdin = stdin.split()\n    # print(stdin)\n    # return \"\"\n\n\n-----Template----\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        l = sorted(int(stdin) for _ in range(k))\n        print(sum(l[i] - l[i - 1] for i in range(1, len(l))))"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    testcases = read_numbers(stdin, int)\n    for testcase in testcases:\n        shovels, types = read_numbers(stdin, int)\n        print(solution_brute(shovels, types))\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nassert solution('''8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''') == '''2\n8\n1\n999999733\n1\n'''\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    cnt = 0\n    while n % k == 0:\n        n /= k\n        cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Pass the test cases one-by-one\n    for _ in range(int(stdin)):\n        n, k = [int(x) for x in stdin.readline().strip().split()]\n\n        print(k - n + 1)\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline()\n    for _ in range(int(t)):\n        n, k = [int(n) for n in stdin.readline().split()]\n        print(n // k)"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k):\n        return min(n, k)\n    n, k = map(int, stdin.strip().split(' '))\n    return str(solve(n, k))\n\n>>> solution('''8 7\n8 1\n6 10\n''')\n'2'\n\n>>> solution('''8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n''')\n'1'\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.strip().split(' ')\n    return str(ceil(int(N) / int(K)))\n\nassert solution(input) == solution(input)\n\n\"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split()[:2])\n    k_1s, k_Ms = map(int, stdin.split()[2:])\n    p_1s = list(map(int, stdin.split()[-M:]))\n    bulbs = range(1, M + 1)\n\n    def get_sum(num: int) -> int:\n        return sum(1 for i in range(N) if (i + num) % 2 == 1)\n\n    def is_possible(num: int) -> bool:\n        return num % 2 == p_1s[num - 1]\n\n    def _find_combinations(num: int, cnt: int) -> int:\n        if num == k_1s:\n            return 0 if cnt == 0 else 1\n        return sum(_find_combinations(num + 1, cnt) for i in range(N) if is_possible(i + 1) and (i + 1) % (k_1s - num) == 0)\n\n    return str(_find_combinations(1, 0))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n\n    count = 0\n    for bit in range(2**n):\n        state = [int(b) for b in bin(bit)[2:].zfill(n)]\n        if (sum(state) % 2)!= (k[0] % 2):\n            continue\n        state = [1 if s == 0 else 0 for s in state]\n        if (sum(state) % 2)!= (k[1] % 2):\n            continue\n        for i in range(1, m):\n            if (sum(state) % 2)!= (k[i] % 2):\n                continue\n            state = [0 if state[j] else 1 for j in range(n)]\n        count += 1\n    return str(count)\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(\" \")]\n    k = [int(x) for x in stdin.strip().split(\" \")]\n    p = [int(x) for x in stdin.strip().split(\" \")]\n    \n    def helper(n: int, m: int, k: list, p: list, index: int, result: int) -> int:\n        if index == m:\n            return result\n        if k[index] == 0:\n            return helper(n, m, k, p, index + 1, result)\n        switch_sum = 0\n        for i in range(1, n + 1):\n            switch_sum += (k[index] - 1) % 2\n        if switch_sum % 2!= p[index] % 2:\n            return helper(n, m, k, p, index + 1, result)\n        return helper(n, m, k, p, index + 1, result + helper(n, m, k, p, index + 1, 0))\n    \n    return str(helper(n, m, k, p, 0, 0))\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(1, m + 1):\n        if (k[i - 1] % 2 == 0):\n            count += p[i - 1]\n    return count"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here.\n    n, m = [int(x) for x in stdin.split()]\n    k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n\n    result = 0\n    for i in range(len(k)):\n        if k[i] % 2 == 0:\n            result += p[i]\n        else:\n            result -= p[i]\n\n    return result"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    k = []\n    p = []\n    for _ in range(M):\n        x = stdin.rstrip().split()\n        k.append(int(x[0]))\n        p.append(int(x[1]))\n    n = int(stdin.rstrip())\n    # bulb 1 to N\n    # k_i\n    # p_i\n    # s_{ij}\n    # s_{ia}\n    # s_{ib}\n    return stdin\n\nprint(solution(input()))\n'''\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def count_ones(num: int) -> int:\n        ones = 0\n        while num:\n            ones += num & 1\n            num >>= 1\n        return ones\n\n    N, M = map(int, stdin.split())\n    k = map(int, stdin.split())\n    p = map(int, stdin.split())\n\n    total = pow(2, N)\n    for i in range(N):\n        total *= count_ones(k[i] - 1)\n        total /= pow(2, p[i])\n    return str(int(total))\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, line = stdin.split('\\n', 1)\n    N, M = [int(x) for x in line.split()]\n    k_1 = int(stdin.readline())\n    k_M = int(stdin.readline())\n    p_1 = int(stdin.readline())\n    p_M = int(stdin.readline())\n    bulbs = [int(x) for x in stdin.readline().split()]\n    s = 0\n    for bulb in bulbs:\n        s += (bulb - 1) % 2\n    if s % 2 == 0:\n        return str(p_1 * (p_1 - 1) * (p_1 - 2) // 6)\n    else:\n        return str(p_M * (p_M - 1) * (p_M - 2) // 6)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(i) for i in stdin.split()]\n    hours = a + h * 12\n    mins = m + (m / 60) * 12\n    return \"{0:.9f}\".format(((mins / 60) * b) + (hours * (b / 12)))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, H, M] = list(map(int, stdin.split()))\n    radius = 2 * (A + B)\n    angle = 2 * H + M\n    return format(radius / (2 * math.sin(math.pi / angle)), \".9f\")"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split(' '))\n    clockwise_speed = 2 * math.pi / (60 * H)\n    distance = A * math.cos(clockwise_speed * M) + B * math.sin(clockwise_speed * M)\n    print('{:.10f}'.format(distance))\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split(\" \"))\n    return '{:.9f}'.format(((a * m + h * 60) / (a + b) / 60) % 1)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    #The hour hand rotates every 12 hours\n    h_rotation = 12 * h\n    #The minute hand rotates every hour\n    m_rotation = h\n    #We need to calculate the distance between the two endpoints\n    distance = abs(a * h_rotation - b * m_rotation)\n    return '{:.6f}'.format(distance)\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.strip().split()]\n    R = A * B\n    theta = (H * 360 + M) * (2 * math.pi) / (12 * 60 * 360)\n    c = R * math.cos(theta)\n    s = R * math.sin(theta)\n    r1 = c * math.cos(2 * math.pi / 3)\n    r2 = s * math.sin(2 * math.pi / 3)\n    return '{:.9f}'.format((r2 - r1) / 2)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, M = map(int, stdin.split())\n    hour = 3\n    minute = 4\n    hour_distance = 12 * H + minute\n    minute_distance = hour * 60 + M\n    difference = abs(hour_distance - minute_distance)\n    print(difference)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    H = (h * (12 * 60) + m) // (60 * 12)\n    h_time = H % 12\n    m_time = m % 60\n    tot_time = (h_time * (60 * 60) + m_time) // (60 * 12)\n    x1, y1 = a * (tot_time - 1), b * (tot_time - 1)\n    x2, y2 = a * (tot_time), b * (tot_time)\n    return abs(x1 - x2) + abs(y1 - y2)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split(\" \"))\n    dist = (H * 60 + M) * (A + B) / (A * B)\n    return str(dist)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # S = A * M + B * H\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # S = A * M + B * H\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    # print(1.0 * (S - L) / S)\n    # return \"\"\n\n    # A, B, H, M = [int(x) for x in stdin.split()]\n    # L = A * 60 + B * 12\n    "
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n    pass\n    # Write your code here\n    # pass\n    pass"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    # print(n, m, a)\n\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if a[i] + a[j - 1] == m:\n                cnt += 1\n\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.strip().split(\" \"))\n    a = [int(x) for x in stdin.strip().split(\" \")]\n    median = get_median(a)\n    pairs = 0\n    for i in range(len(a)):\n        if a[i] == m:\n            pairs += (len(a) - i)\n    return str(pairs)\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == m:\n                count += 1\n\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = int(n / 2)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == m:\n                count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    pos = []\n    for i in range(n):\n        if a[i] == m:\n            pos.append(i)\n    return str(len(pos) / 2)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append([l - 1, r])\n\n    best_segments = []\n    for i in range(m):\n        min_so_far = 2**32 - 1\n        max_so_far = -1\n        for l, r in segments:\n            a_seg = a[l:r + 1]\n            min_so_far = min(min_so_far, min(a_seg))\n            max_so_far = max(max_so_far, max(a_seg))\n        best_segments.append(max_so_far - min_so_far)\n    best_segment = best_segments.index(max(best_segments)) + 1\n    return str(best_segment)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = [\n        [int(x) for x in stdin.split()]\n        for _ in range(m)\n    ]\n    max_b = -float(\"inf\")\n    for segment in segments:\n        if segment[1] < segment[0]:\n            max_b = max(max_b, segment[0] - a[segment[0] - 1])\n        else:\n            max_b = max(max_b, segment[1] - a[segment[1] - 1])\n    return str(max_b)\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    #l, r = [], []\n    l, r = [], []\n    for _ in range(m):\n        l_, r_ = map(int, stdin.split())\n        l.append(l_)\n        r.append(r_)\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if i + l[j] - 1 < n and i + r[j] - 1 < n:\n                res = max(res, a[i + l[j] - 1] - a[i + r[j] - 1])\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split(\" \"))\n        segments.append((l, r))\n    ans = 0\n    return str(ans)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def array_diff(arr: List[int], m: int, n: int) -> List[int]:\n        # arr_abs = [abs(i) for i in arr]\n        # max_abs = max(arr_abs)\n        # min_abs = min(arr_abs)\n\n        # if max_abs == min_abs:\n        #     return [max_abs] * n\n\n        # if max_abs < min_abs:\n        #     max_abs, min_abs = min_abs, max_abs\n\n        # arr_arr = [i - min_abs for i in arr_abs]\n        # arr_arr_abs = [abs(i) for i in arr_arr]\n        # arr_arr_abs_max = max(arr_arr_abs)\n\n        # arr_arr_abs_index = arr_arr_abs.index(arr_arr_abs_max)\n\n        # arr_arr[arr_arr_abs_index] += max_abs\n        # arr_arr[arr_arr_abs_index] -= max_abs\n\n        # return arr_arr\n        return sorted([i for i in arr if i < 0]) + sorted([i for i in arr if i > 0])\n\n    n, m = map(int, stdin.split())\n\n    arr = list(map(int, stdin.split()))\n\n    m_segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        m_segments.append((l - 1, r - 1))\n\n    m_segments_sorted = sorted(m_segments)\n    max_diff = 0\n\n    for i in range(1, m + 1):\n        l, r = m_segments_sorted[i - 1]\n        max_diff = max(max_diff, arr[l] - arr[r])\n\n    result = array_diff(arr, m, n)\n\n    max_result = max(result) - min(result)\n\n    if max_result > max_diff:\n        return str(max_result)\n\n    return str(max_diff)\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n    segments.sort(key=lambda s: (s[1], s[0]))\n    result = [0] * n\n    count = 0\n    for s in segments:\n        for i in range(s[0] - 1, s[1]):\n            result[i] += 1\n    result.sort(reverse=True)\n    return str(max(result[i] - min(result) for i in range(n)))\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n\n    result = 0\n    for i in range(1, n + 1):\n        a[i - 1] += result\n        result = max(a[i - 1], result)\n\n    idx = 0\n    for l, r in segments:\n        idx += (a[r - 1] - a[l - 1])\n\n    print(idx)\n    return \"\""
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append((l, r))\n    if len(a) < max(max(l, r) for _, (l, r) in segments):\n        return '0'\n\n    b = [0] * n\n    for i in range(n):\n        for (l, r) in segments:\n            if i < l:\n                b[i] = -10**6\n                break\n            if i > r:\n                b[i] = 10**6\n                break\n            b[i] = max(b[i], a[i] - min(a[i], min(l, r)))\n    for i in range(1, n):\n        if b[i] == 10**6:\n            b[i] = -10**6\n\n    q = len(segments)\n    c = set()\n    for i in range(1, n):\n        if b[i] == -10**6:\n            q -= 1\n        else:\n            c.add(i)\n    c = list(c)\n    c.sort()\n    return f'{max(b) - min(b)} {q}'"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(\"asdasdasd\", \"asdasdasd\", \"asdasdasd\") == \"Yes\")\nassert(solution(\"abc\", \"bc\", \"c\") == \"No\")\nassert(solution(\"efcf\", \"dcd\", \"ecdd\") == \"No\")\nassert(solution(\"az\", \"aa\", \"ab\") == \"Yes\")\nassert(solution(\"abca\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"adfd\", \"asd\", \"azd\") == \"Yes\")\nassert(solution(\"adf\", \"asd\", \"azd\") == \"No\")\nassert(solution(\"adf\", \"asd\", \"azd\") == \"No\")\nassert(solution(\"adf\", \"asd\", \"azd\") == \"No\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"abcb\", \"ab\", \"abca\") == \"Yes\")\nassert(solution(\"ab"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answers = [stdin.readline().strip() for i in range(n)]\n    for answer in answers:\n        if \"a\" in answer or \"z\" in answer:\n            print(\"No\")\n            continue\n        chars = [char for char in answer]\n        chars.sort()\n        if chars!= list(range(ord('a'), ord('z') + 1)):\n            print(\"No\")\n            continue\n        print(\"Yes\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.read().splitlines()\n    n = int(strings.pop(0))\n    for s in strings:\n        letters = list(s)\n        for i, letter in enumerate(letters):\n            if i + 1 < len(letters):\n                if letter!= letters[i + 1]:\n                    if letter == letters[i - 1]:\n                        del letters[i - 1:i + 2]\n                    else:\n                        break\n            else:\n                break\n        else:\n            print(\"Yes\")\n            continue\n        print(\"No\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.strip().split(\"\\n\")\n    n = int(strings[0])\n    strings = strings[1:]\n    for s in strings:\n        if len(s) > 1 and isDiverse(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    strings = [line.strip() for line in lines]\n    for s in strings:\n        # s = stdin.strip()\n        for i in range(1, len(s)):\n            if s[i]!= s[i - 1]:\n                if s[i] in s[:i]:\n                    print(\"Yes\")\n                    return\n        print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    for line in lines:\n        line = set(line)\n        if len(line)!= len(line.difference(set([\"a\",\"z\"]))):\n            print(\"No\")\n        else:\n            print(\"Yes\")\nsolution(input())"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        line = stdin.readline().strip()\n        if is_diverse(line):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n\n    for _ in range(n):\n        s = stdin.readline().strip()\n        s = list(s)\n        ans.append(\"Yes\" if is_diverse(s) else \"No\")\n\n    return \"\\n\".join(ans)\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(string):\n        if len(string) < 2:\n            return False\n        diverse = True\n        pos = {}\n        for letter in string:\n            if letter not in pos:\n                pos[letter] = 1\n            else:\n                pos[letter] += 1\n        for letter in pos:\n            if pos[letter] > 1:\n                diverse = False\n                break\n        return diverse\n\n    n = int(stdin.readline())\n    for _ in range(n):\n        string = stdin.readline().strip()\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    segments = [set(map(int, stdin.split(' '))) for _ in range(m)]\n    segments.sort(key=lambda x: x[1]-x[0])\n    answer = 0\n    b = a[:]\n    for i in range(m):\n        for j in range(len(segments[i])):\n            b[segments[i][j]-1] -= 1\n            if b[segments[i][j]-1] < 0:\n                b[segments[i][j]-1] = 0\n        answer = max(answer, max(b) - min(b))\n    return str(answer)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n\n    a = [int(x) for x in stdin.split()[1:]]\n\n    segments = set()\n\n    for _ in range(m):\n        l, r = (int(x) for x in stdin.split()[1:3])\n        segments.add((l, r))\n\n    result = [0] * n\n\n    for l, r in segments:\n        for i in range(l, r + 1):\n            result[i - 1] += 1\n            result[i] -= 1\n\n    return''.join(map(str, result))\n\n\n\n-----Solutions Details-----\n\n## Easy\n\nFor each segment find the max value, i.e. for each segment find the index of the max value.\n\nThen find the max of these values i.e. find the max of all the values of the array that are above the segment end.\n\nThis gives the answer.\n\n## Medium\n\nFor each segment find the max value, i.e. for each segment find the index of the max value.\n\nThen for each segment find the min value, i.e. for each segment find the index of the min value.\n\nThen find the max of these values i.e. find the max of all the values of the array that are above the segment end.\n\nThis gives the answer.\n\n## Hard\n\nUse a hashmap to find the max value of an array that is higher than a segment end.\n\nCreate an array of same length as the given array.\n\nIterate the given array from the end to the beginning.\n\nFor each element in the given array, if the element is above the segment end, increment the value of the corresponding index of the array.\n\nFind the max value of the array.\n\nThis gives the answer.\n\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for i in range(m):\n        l, r = (int(x) for x in stdin.split())\n        segments.append((l, r))\n    max_so_far = -sys.maxsize\n    for i in range(1, n + 1):\n        b = [a[i] - x for x in a]\n        b_max = max(b)\n        b_min = min(b)\n        max_so_far = max(max_so_far, b_max - b_min)\n    for segment in segments:\n        l, r = segment\n        max_so_far = max(max_so_far, b[l - 1] - b[r - 1])\n    print(max_so_far)\n    return ''"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''')\n100 loops, best of 3: 17.1 usec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.68 msec per loop\n\nIn [3]: %timeit solution('''1 0\n1000000\n''')\n1 loop, best of 3: 15.5 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.35 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.08 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 5.27 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.38 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.22 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.07 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.07 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.04 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.09 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.09 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.27 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.27 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.30 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.30 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.25 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.25 msec per loop\n\n\n\nIn [1]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n100 loops, best of 3: 1.25 msec per loop\n\nIn [2]: %timeit solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''')\n1 loop, best of 3: 1.25 msec per loop\n\n\n\nIn [1]:"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(m):\n        l, r = list(map(int, stdin.split()))\n        b[l - 1: r] = [x - 1 for x in b[l - 1: r]]\n    return str(max(b) - min(b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    r = [0] * m\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        r[i] = r - l\n    r.sort()\n    c = 0\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        j = bisect.bisect_left(r, -l)\n        c += j\n        r[j] = -1\n    return str(max(a) - min(a))"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append((l, r))\n    a = sorted(a)\n    best_max = -1\n    for i in range(m):\n        max_val = -1\n        for j in range(i, m):\n            l, r = segments[j]\n            max_val = max(max_val, a[l-1] - a[r-1])\n        if max_val > best_max:\n            best_max = max_val\n    return str(best_max)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(m):\n        l, r = tuple(map(int, stdin.split()))\n        b[l - 1:r] = [b[j] - 1 if j >= l - 1 else b[j] for j in range(l - 1, r)]\n    return str(max(b) - min(b))"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\nk = 1\nfor i in range(n):\n    if i == n - 1:\n        print(k)\n        break\n    if a[i] == a[i + 1]:\n        k += 1\n    else:\n        print(k)\n        print('L' * k + 'R' * (n - i - k))\n        k = 1\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(n):\n        k = max(k, a[i], a[n-1-i])\n    r = ''.join('L' if x < a[0] else 'R' for x in a)\n    return r.ljust(k, 'L')\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe second example should be interpreted as follows: the sequence is made by the following sequence of operations:\n\nMove the leftmost element to the right and remove it.\nMove the rightmost element to the left and remove it.\nRepeat step 1 and step 2 until the sequence is empty.\nFor example, in the second example the sequence is made by the following sequence of operations:\n\nMove the leftmost element to the right and remove it.\nMove the rightmost element to the left and remove it.\nMove the leftmost element to the right and remove it.\nMove the rightmost element to the left and remove it.\nMove the leftmost element to the right and remove it.\nRepeat step 1 and step 2 until the sequence is empty.\n\nHint:\nUse a stack to store the sequence elements.\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = [int(s) for s in stdin.readline().split()]\n\n    # Get the first element of the sequence, the sequence can be divided into one or two sequences.\n    first_element = sequence.pop(0)\n    sequence.sort(reverse=True)\n\n    max_length = 1\n    while sequence:\n        current_element = sequence.pop()\n        if current_element > first_element:\n            max_length += 1\n        else:\n            break\n\n    return max_length"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split(' ')))\n    \n    m = len(l)\n    r = [0] * m\n    for i in range(m):\n        r[i] = max(r[i], l[i])\n        for j in range(i + 1, m):\n            if l[i] > l[j]:\n                r[i] = max(r[i], l[j])\n\n    return str(r[-1])\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    A = [int(x) for x in stdin.readline().strip().split()]\n\n    left, right = 0, len(A) - 1\n    while left < right:\n        if A[left] < A[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return f'{left}'"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIt's guaranteed that the input is a valid sequence of integers from $1$ to $n$.\nIt's also guaranteed that $n$ is an integer from $1$ to $10^5$.\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(num) for num in stdin.readline().strip().split()]\n    ans = 0\n    for i in range(n):\n        if arr[i] < arr[i + 1]:\n            ans = max(ans, i + 1)\n    return str(ans)\n\n\nassert(solution('''5\n1 2 5 3 4\n''') == '4')\nassert(solution('''2\n1 2\n''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3\n''') == '2')\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, a[i])\n        if a[i] == maximum:\n            a[i] = -1\n    maximum = 0\n    for i in range(n):\n        if a[i] > 0:\n            maximum = max(maximum, i+1)\n    return str(maximum)\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    if len(a) < 2:\n        return str(len(a))\n    if len(a) == 2:\n        return str(1)\n    a.sort()\n    m = 1\n    for i in range(len(a)-1):\n        if a[i] < a[i+1]:\n            m = max(m, i+1)\n    return str(m)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    a = stdin.readline().strip()\n    a = [int(x) for x in a.split(\" \")]\n    if len(a) == 1:\n        return str(1)\n    elif len(a) == 2:\n        return str(1)\n    else:\n        count = 0\n        maximum = 0\n        for i in range(1, len(a)):\n            if a[i] > a[i - 1]:\n                count += 1\n                maximum = max(maximum, count)\n            else:\n                count = 0\n        return str(maximum + 1)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    maximum = 0\n    if n <= 1:\n        return str(n)\n\n    for i in range(n - 1):\n        if a[i] + 1 == a[i + 1]:\n            maximum = max(maximum, i)\n    if maximum == 0:\n        return str(n)\n\n    return str(maximum + 1)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 1\n    curr = a[0]\n    for i in range(n - 1):\n        if a[i] > curr:\n            ans = max(ans, i + 1)\n            curr = a[i]\n    return str(ans)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    res = 0\n    n = len(a)\n    for i in range(1, n):\n        if a[i] > a[res]:\n            res = i\n    return str(res + 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = 1\n    curr = 1\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            curr += 1\n            res = max(res, curr)\n        else:\n            curr = 1\n    return res\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return str(n)\n    arr = [int(x) for x in stdin.split(' ')]\n    best = 0\n    res = 0\n    for i in range(n):\n        while i < n and arr[i] <= arr[i+1]:\n            i += 1\n        best = max(best, i)\n        res = max(res, i-1)\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.readline())\n    # a = [int(x) for x in stdin.readline().split()]\n    # m = 0\n    # i = 0\n    # while i < n:\n    #     l = i\n    #     while i + 1 < n and a[i] < a[i + 1]:\n    #         i += 1\n    #     r = i\n    #     while i + 1 < n and a[i] > a[i + 1]:\n    #         i += 1\n    #     if l < r:\n    #         m = max(m, r - l + 1)\n    #     i += 1\n    # return str(m)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = [int(x) for x in lines[0].split(' ')]\n    a = [int(x) for x in lines[1].split(' ')]\n    dp = [0] * n\n    dp[0] = abs(a[0] - k)\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + abs(a[i] - k), abs(a[i] - k) + dp[i - 1])\n    return str(dp[n - 1])\n\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '3')\nassert(solution(input()) == '4')\nassert(solution(input()) == '5')\nassert(solution(input()) == '6')\nassert(solution(input()) == '7')\nassert(solution(input()) == '8')\nassert(solution(input()) == '9')\nassert(solution(input()) == '10')\nassert(solution(input()) == '11')\nassert(solution(input()) == '12')\nassert(solution(input()) == '13')\nassert(solution(input()) == '14')\nassert(solution(input()) == '15')\nassert(solution(input()) == '16')\nassert(solution(input()) == '17')\nassert(solution(input()) == '18')\nassert(solution(input()) == '19')\nassert(solution(input()) == '20')\nassert(solution(input()) == '21')\nassert(solution(input()) == '22')\nassert(solution(input()) == '23')\nassert(solution(input()) == '24')\nassert(solution(input()) == '25')\nassert(solution(input()) == '26')\nassert(solution(input()) == '27')\nassert(solution(input()) == '28')\nassert(solution(input()) == '29')\nassert(solution(input()) == '30')\nassert(solution(input()) == '31')\nassert(solution(input()) == '32')\nassert(solution(input()) == '33')\nassert(solution(input()) == '34')\nassert(solution(input()) == '35')\nassert(solution(input()) == '36')\nassert(solution(input()) == '37')\nassert(solution(input()) == '38')\nassert(solution(input()) == '39')\nassert(solution(input()) == '40')\nassert(solution(input()) == '41')\nassert(solution(input()) == '42')\nassert(solution(input()) == '43')\nassert(solution(input()) == '44')\nassert(solution(input()) == '45')\nassert(solution(input()) == '46')\nassert(solution(input()) == '47')\nassert(solution(input()) == '48')\nassert(solution(input()) == '49')\nassert(solution(input()) == '50')\nassert(solution(input()) == '51')\nassert(solution(input()) == '52')\nassert(solution(input()) == '53')\nassert(solution(input()) == '54')\nassert(solution(input()) == '55')\nassert(solution(input()) == '56')\nassert(solution(input()) == '57')\nassert(solution(input()) == '58')\nassert(solution(input()) == '59')\nassert(solution(input()) == '60')\nassert(solution(input()) == '61')\nassert(solution(input()) == '62')\nassert(solution(input()) == '63')\nassert(solution(input()) == '64')\nassert(solution(input()) == '65')\nassert(solution(input()) == '66')\nassert(solution(input()) == '67')\nassert(solution(input()) == '68')\nassert(solution(input()) == '69')\nassert(solution(input()) == '70')\nassert(solution(input()) == '71')\nassert(solution(input()) == '72')\nassert(solution(input()) == '73')\nassert(solution(input()) == '74')\nassert(solution(input()) == '75')\nassert(solution(input()) == '76')\nassert(solution(input()) == '77')\nassert(solution(input()) == '78')\nassert(solution(input()) == '79')\nassert(solution(input()) == '80')\nassert(solution(input()) == '81')\nassert(solution(input()) == '82')\nassert(solution(input()) == '83')\nassert(solution(input()) == '84')\nassert(solution(input()) == '85')\nassert(solution(input()) == '86')\nassert(solution(input()) == '87')\nassert(solution(input()) == '88')\nassert(solution(input()) == '89')\nassert(solution(input()) == '90')\nassert(solution(input()) == '91')\nassert(solution(input()) == '92')\nassert(solution(input()) == '93')\nassert(solution(input()) == '94')\nassert(solution(input()) == '95')\nassert(solution(input()) == '96')\nassert(solution(input()) == '97')\nassert(solution(input()) == '98')\nassert(solution(input()) == '99')\nassert(solution(input()) == '100')\nassert(solution(input()) == '101')\nassert(solution(input()) == '102')\nassert(solution(input()) == '103')\nassert(solution(input()) == '104')\nassert(solution(input()) == '105')\nassert(solution(input()) == '106')\nassert(solution(input()) == '107')\nassert(solution(input()) == '108')\nassert(solution(input()) == '109')\nassert(solution(input()) == '110')\nassert(solution(input()) == '111')\nassert(solution(input()) == '112')\nassert(solution(input()) == '113')\nassert(solution(input()) == '114')\nassert(solution(input()) == '115')\nassert(solution(input()) == '116')\nassert(solution(input()) == '117')\nassert(solution(input()) == '118')\nassert(solution(input()) == '119')\nassert(solution(input()) == '120')\nassert(solution(input()) == '121')\nassert(solution(input()) == '122')\nassert(solution(input()) == '123')\nassert(solution(input()) == '124')\nassert(solution(input()) == '125')\nassert(solution(input()) =="
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    print(n - min(a.count(0), k - a.count(0)))\n    return \"\""
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.readlines()\n    n, k = int(input_data[0].split()[0]), int(input_data[0].split()[1])\n    arr = list(map(int, input_data[1].split()))\n\n    temp = k\n    arr_len = len(arr)\n\n    print(arr)\n\n    for i in range(arr_len):\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i] // 2\n            if arr[i] < temp:\n                temp = arr[i]\n\n    print(temp)\n\n\nsolution('''5 3\n1 2 2 4 5\n''')\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if sum(arr) < k:\n        return 0\n    arr.sort()\n    l = 0\n    for i in arr:\n        if l < k:\n            if i == arr[0]:\n                l += 1\n                arr.remove(i)\n            else:\n                if i == i // 2:\n                    continue\n                else:\n                    arr.remove(i)\n    return len(arr)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i, x in enumerate(a):\n        a[i] //= 2\n        while a[i] > 0:\n            count += 1\n            a[i] //= 2\n\n    return str(count)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        else:\n            a[i] = a[i] // 2\n            count += abs(a[i] - a[i-1])\n    if count >= k:\n        return '0'\n    else:\n        return str(count)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    # find the elements that can be divided by 2 and equal to 1\n    # first element is one, we need to skip it\n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # now we know that the first elements can be divided by 2. now we need to find all the elements that can be divided by 2.\n    # we need to skip the first element because it is already divided by 2\n    for i in range(2, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # now we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(3, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(4, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(5, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(6, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(7, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(8, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(9, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(10, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(11, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(12, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(13, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(14, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(15, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(16, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(17, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(18, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(19, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(20, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(21, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(22, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(23, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(24, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(25, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(26, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can be divided by 2. we need to find the elements that can be divided by 2\n    for i in range(27, n):\n        if a[i] % 2 == 0:\n            a[i] /= 2\n    # we know that all the elements can"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    left, right = max(a), sum(a)\n    while left < right:\n        mid = left + (right - left) // 2\n        count = sum(map(lambda x: x // 2, a))\n        if count >= mid:\n            right = mid\n        else:\n            left = mid + 1\n    return str(left)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem\"\"\"\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    result = 0\n    for i in range(n):\n        if a[i]!= 0:\n            if a[i] == a[i-1] * 2:\n                result += (a[i] - a[i-1]) // 2\n            else:\n                result += a[i] // 2\n    return str(result)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nrun()\n\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(N * A + (N - 1) * B)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(n, a + b))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(b * a)\n\nassert solution('8 3 4') == '4'\nassert solution('10 5 8') == '256'\nassert solution('10 1000 0') == '0'\nassert solution('10 100 100') == '1'\nassert solution('10 100 1000') == '1'\nassert solution('1 100 100') == '0'\nassert solution('1 100 1000') == '1'\nassert solution('1 100 1000000') == '1'\nassert solution('100 100 1') == '0'\nassert solution('100 100 100') == '1'\nassert solution('100 100 100000000') == '1'\nassert solution('100 1000 0') == '0'\nassert solution('1000 1 0') == '0'\nassert solution('1000 1000 0') == '0'\nassert solution('100 10000 0') == '0'\nassert solution('1000000 0 0') == '0'\nassert solution('1000000 1000000 0') == '0'\nassert solution('100 1000000 0') == '0'\nassert solution('100 10000000 0') == '0'\nassert solution('100 1000000000 0') == '0'\nassert solution('100000000 0 0') == '0'\nassert solution('100000000 1 0') == '1'\nassert solution('100000000 1000000 0') == '0'\nassert solution('100000000 1000000000 0') == '0'\nassert solution('10000000000000000 0 0') == '0'\nassert solution('10000000000000000 1 0') == '1'\nassert solution('10000000000000000 1000000 0') == '0'\nassert solution('10000000000000000 1000000000 0') == '0'\nassert solution('10000000000000000 10000000000 0') == '0'\nassert solution('10000000000000000 100000000000 0') == '0'\nassert solution('10000000000000000 1000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0') == '0'\nassert solution('10000000000000000 10000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solutionHelper(stdin))\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The red ball is placed by taking the last ball in the row and placing it in the back.\n    The blue ball is placed by taking the last two balls in the row and placing them in the back.\n    The last ball in the row will be an empty string and we need to take all those empty strings to place a blue ball in the back.\n    '''\n    N, A, B = map(int, stdin.split())\n    blue = A + B\n    red = A\n    if blue == 0:\n        return '0'\n    else:\n        return str(red // blue)\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(n) for n in stdin.split()]\n    blue, red = [0 for _ in range(N)], [0 for _ in range(N)]\n    blue[-1] = A\n    red[-1] = B\n    for _ in range(10 ** 100):\n        for i, ball in enumerate(blue):\n            blue[i] = max(0, ball - 1)\n        for i, ball in enumerate(red):\n            red[i] = max(0, ball + 1)\n    return str(sum(blue))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split(\" \")\n    return str(int(n) * (int(a) + int(b)) // 2)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    cnt = 0\n    for _ in range(N):\n        cnt += A\n        cnt -= B\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    numbers = {}\n    for i in range(1, n):\n        for j in range(i+1, n):\n            divisor = divisors[j]\n            if divisor in numbers:\n                numbers[divisor] += 1\n            else:\n                numbers[divisor] = 1\n    for i in range(1, n):\n        divisor = divisors[i]\n        if divisor not in numbers:\n            numbers[divisor] = 1\n    x = 0\n    for i in range(1, n):\n        if i in numbers:\n            x += numbers[i]\n    if x == n:\n        return \"-1\"\n    return str(x)\n\nassert(solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '48')\nassert(solution('''\n2\n8\n3 2 12 6 4 24 16 3\n1\n2\n''') == '-1')\nassert(solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    while t:\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split(\" \")))\n        if (arr == list(range(1, n + 1))):\n            print(-1)\n        else:\n            print(get_min_number(arr))\n        t -= 1\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check(n) -> int:\n        ret = n\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                if i == n // i:\n                    ret -= i\n                else:\n                    ret -= i * (n // i)\n        return ret\n\n    def d(arr: list) -> int:\n        return reduce(lambda x, y: x * y, arr)\n\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    ans = []\n    for _ in range(n):\n        x = int(stdin.readline())\n        d1 = divisors[:x]\n        divisors = divisors[x:]\n        if d(d1) == check(d(d1)):\n            ans.append(-1)\n        else:\n            ans.append(check(d(d1)))\n\n    return \"\\n\".join(map(str, ans))\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split()]\n    M = int(stdin.readline())\n    guesses = [int(g) for g in stdin.readline().split()]\n    for g in guesses:\n        if g not in divisors:\n            print(-1)\n            return\n    # build up the full set of divisors\n    divs = [1]\n    for d in divisors:\n        for i in range(2, d):\n            if d % i == 0:\n                divs.append(i)\n    # now check\n    for g in guesses:\n        # if the guessed divisor is not a divisor\n        if g not in divs:\n            print(-1)\n            return\n    # and all the divisors of the guessed number are in the list\n    # so print the smallest integer\n    print(min(guesses))\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(i) for i in stdin.readline().split()]\n    # First we need to find the minimal element\n    minimal = None\n    for i in divisors:\n        if minimal is None or i < minimal:\n            minimal = i\n    # Now we need to find the minimal element in the list of divisors\n    minimal_divisor = None\n    for i in divisors:\n        if i < minimal:\n            if minimal_divisor is None or i < minimal_divisor:\n                minimal_divisor = i\n    # If we didn't find the minimal element in the list of divisors, it means that we don't have any minimal element\n    if minimal_divisor is None:\n        return \"-1\"\n    # Now we know that the minimal element is the minimal element in the list of divisors\n    # We need to find the last element that is not equal to the minimal element\n    for i in range(len(divisors)-1, -1, -1):\n        if divisors[i]!= minimal_divisor:\n            return str(divisors[i])\n    # If we reached the beginning of the list without finding such element, that means that we don't have such element\n    return \"-1\"\n\n\nassert (solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''')) == \"48\"\n\nassert (solution('''2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''')) == \"4\"\n\nassert (solution('''8\n8 2 12 6 4 24 16 3\n1\n2\n''')) == \"-1\"\n\nassert (solution('''8\n1\n2\n''')) == \"2\"\n\nassert (solution('''8\n9\n9 9 9 9 9 9 9 9 9\n1\n2\n''')) == \"-1\"\n\nassert (solution('''8\n2\n9 9 9 9 9 9 9 9 9\n1\n2\n''')) == \"2\"\n\nassert (solution('''8\n2\n3 3 3 3 3 3 3 3 3\n3\n9 9 9 9 9 9 9 9 9\n1\n2\n''')) == \"4\"\n\nassert (solution('''8\n4\n9 9 9 9 9 9 9 9 9\n1\n2\n''')) == \"2\"\n\nassert (solution('''8\n4\n1 2 3 4 5 6 7 8\n1\n2\n''')) == \"4\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split()]\n    if not all(lst):\n        return \"Invalid input\"\n    if n < 2:\n        return \"Invalid input\"\n    for i in range(2, max(lst) + 1):\n        if not all(i % x == 0 for x in lst):\n            return i\n    return -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n    m = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    return [find_int(d, i) for i in q]\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert str(solution('''4\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '48'\nassert str(solution('''4\n8\n8 2 12 6 4 24 16 3\n1\n2\n''')) == '4'\nassert str(solution('''4\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n1\n2\n''')) == '-1'\nassert str(solution('''2\n8\n8 2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n4\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2\n2 12 6 4 24 16 3\n2"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split(' ')]\n    for _ in range(int(stdin.readline())):\n        d = int(stdin.readline())\n        count = 0\n        for i in divisors:\n            if d % i == 0:\n                count += 1\n        if count == 1:\n            print(-1)\n        else:\n            print(d)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    DIVISORS = list(map(int, stdin.readline().strip().split(' ')))\n    divisors_count = len(DIVISORS)\n    ANS = [-1] * N\n    T = int(stdin.readline().strip())\n\n    for i in range(T):\n        N_1 = int(stdin.readline().strip())\n        DIVISORS_1 = list(map(int, stdin.readline().strip().split(' ')))\n\n        if len(DIVISORS_1)!= N_1:\n            ANS[i] = -1\n        else:\n            divisors_1 = len(DIVISORS_1)\n            for d_1 in DIVISORS_1:\n                count = 0\n                for d_i in DIVISORS:\n                    if d_1 % d_i == 0:\n                        count += 1\n\n                if count == divisors_1 - 1:\n                    ANS[i] = d_1\n                    break\n    return''.join(map(str, ANS))\n\nassert(solution(\"\"\"8\n8 2 12 6 4 24 16 3\n1\n2\n\"\"\") == \"\"\"48\n4\n\"\"\")\nassert(solution(\"\"\"8\n8 2 12 6 4 24 16 3\n8\n8 2 12 6 4 24 16 3\n1\n2\n\"\"\") == \"\"\"48\n4\n-1\n\"\"\")\nassert(solution(\"\"\"10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readlines()\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    new = []\n    i = 0\n    while i < n:\n        if a[i] not in new:\n            new.append(a[i])\n            i += 1\n        else:\n            a.pop(i)\n            n -= 1\n    return str(n) + '\\n' +''.join(map(str, a))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    new_a = list(a)\n    new_a.sort()\n    \n    d = {}\n    for i in a:\n        if i in d:\n            del new_a[new_a.index(i)]\n            continue\n        d[i] = 0\n    \n    return str(len(new_a)) + '\\n' +''.join(map(str, new_a))\n    \n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = set()\n    for i in range(n):\n        b.add(a[i])\n    return str(len(b)) + '\\n' +''.join(str(i) for i in sorted(b))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    count = 0\n    for i in a:\n        if a.count(i) == 1:\n            count += 1\n            a.remove(i)\n\n    return str(count) +'' +''.join(map(str, a))\n    \n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    nums = []\n    for i in a:\n        nums.append(i)\n        if len(nums) == 1:\n            continue\n        if nums[len(nums) - 1] == nums[len(nums) - 2]:\n            nums.pop(len(nums) - 2)\n    return str(len(nums)) + '\\n' +''.join(map(str, nums))\n\nprint(solution('''6'''))\n\n\"\"\"\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    temp = sorted(list(set(arr)))\n    arr = []\n    for i in temp:\n        arr.append(i)\n    arr.sort()\n    return str(len(arr)) + '\\n' +''.join([str(i) for i in arr])\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(a + 3 - 1 - 3 * (a % 3))"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    min_diff = 1\n    for i in range(a, 1001):\n        s = sum(int(c) for c in str(i))\n        if s % 4 == 0:\n            diff = abs(a - i)\n            if diff < min_diff:\n                min_diff = diff\n                ans = i\n    return str(ans)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 1\n\n    while res < a:\n        res = int(str(res) + str(res))\n\n    return str(res)\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    print(a + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = sum(int(c) for c in str(a))\n    while n % 4!= 0:\n        n -= 1\n    return str(n)\n\nassert(solution(input()) == \"435\")\nassert(solution(input()) == \"43\")\nassert(solution(input()) == \"99\")\nassert(solution(input()) == \"103\")\nassert(solution(input()) == \"237\")\nassert(solution(input()) == \"42\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4')\n    3\n    >>> solution('3')\n    5\n    >>> solution('42')\n    43\n    \"\"\"\n    a = int(stdin)\n    res = a\n    res_sum = sum(int(digit) for digit in str(a))\n    while res_sum % 4!= 0:\n        res += 1\n        res_sum = sum(int(digit) for digit in str(res))\n    return res\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = a + 1\n    while res % 3!= 0:\n        res += 1\n\n    return res\n\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = sum(int(x) for x in str(a))\n    if n % 4!= 0:\n        n += 4 - n % 4\n    return str(n)\n\nassert(solution(input()) == input())\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline().strip())\n    return str(max([i for i in range(number + 1, 10 ** 8) if i % 4 == 0]))\n\nassert solution('''\n432\n''') == '435'\nassert solution('''\n99\n''') == '103'\nassert solution('''\n237\n''') == '237'\nassert solution('''\n42\n''') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(str(a)[::-1])\n    if a - b == 0:\n        return a\n    return str(a + b)"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\"abac\")\nsolution(\"abc\")\nsolution(\"abba\")\nsolution(\"ecoosdcefr\")\nsolution(\"aac\")\nsolution(\"b\")\nsolution(\"aba\")\nsolution(\"codeforces\")\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    m = int(stdin[1])\n    b = [int(x) for x in stdin[2].split(\" \")]\n\n    index = 0\n    res = []\n    while len(res) < m:\n        print(b)\n        if b[index] > 0:\n            # print(b[index])\n            b[index] = 0\n            for i in range(m):\n                if s[i] == s[index]:\n                    continue\n                if b[i]!= 0:\n                    b[i] -= 1\n            b[index] += 1\n            res.append(s)\n            s = s[1:] + s[0]\n        else:\n            index += 1\n            if index == len(s):\n                index = 0\n    return \"\".join(res)\n\nassert solution(stdin) == stdin[3]\n\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        s, m, b = stdin.readline().strip().split()\n        b = list(map(int, b.split()))\n        k = sum(b)\n        s = list(s)\n        i = 0\n        while i < len(s):\n            j = 1\n            while j <= m:\n                if i + j > len(s) or s[i + j - 1] > s[i]:\n                    k -= j\n                    j += 1\n                else:\n                    i += j\n                    break\n        print(''.join(s[:i]) + ''.join(sorted(s[i:])) + ''.join(s[i:i + j]) if k == 0 else 'NO')\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n-----\n6\na\nb\nc\nd\ne\nf\nabab\nba\nababab\nabc\nab\nbaa\nb\nbab\nabcde\nabd\nab\na\nab\nababab\naab\nb\nbab\nabcd\nacb\nbcd\nb\nbab\na\nbaa\nb\nabc\na\nab\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        s, m, b = stdin.readline().strip().split()\n        b = [int(x) for x in b]\n        b.sort()\n        b = b[::-1]\n        t = []\n        for i in range(m):\n            if i == 0:\n                t.append(b[0] + b[1])\n                b.remove(b[0])\n            else:\n                t.append(b[0])\n                b.remove(b[0])\n        t = ''.join(t)\n        if t == s:\n            print(''.join(t))\n        else:\n            print('no solution')"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        string = stdin.split()[0]\n        n = int(stdin.split()[1])\n        b = [int(x) for x in stdin.split()[2:]]\n        solution = ''\n        for i in range(len(string)):\n            j = i + 1\n            while j < len(string) and string[j] > string[i]:\n                j += 1\n            if j - i > max(b):\n                solution += string[i]\n                for index in range(i + 1, j):\n                    b[b.index(max(b))] -= 1\n        print(solution)\nsolution(stdin.read())\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_: str = stdin.split('\\n')[0]\n    test_cases: int = int(stdin.split('\\n')[1])\n    for _ in range(test_cases):\n        # Write your code here\n        pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_digit(num: int, index: int) -> int:\n        return (num // 10 ** (index - 1)) % 10\n\n    def get_last_digit(num: int) -> int:\n        return get_digit(num, 0)\n\n    def sum_of_subarray(array: List[int], start: int, end: int) -> int:\n        total = 0\n        for i in range(start, end):\n            total += abs(i - start)\n        return total\n\n    def check_subarray(array: List[int], new_str: str, start: int, end: int) -> bool:\n        return sum_of_subarray(array, start, end) == sum_of_subarray(new_str, start, end)\n\n    def sum_of_array_b(array: List[int], new_str: str, start: int, end: int) -> bool:\n        if not check_subarray(array, new_str, start, end):\n            return False\n        if not new_str:\n            return True\n        if get_last_digit(new_str[0])!= get_last_digit(array[start]):\n            return False\n        return sum_of_array_b(array, new_str[1:], start + 1, end) or sum_of_array_b(array, new_str[1:], start, end - 1)\n\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for line in lines[1:]:\n        q -= 1\n        s, m, *b = list(map(int, line.split()))\n        if m == 0:\n            print(s)\n            continue\n        b = [b[i] - sum_of_subarray(s, i + 1, m) for i in range(m)]\n        for i in range(1, m):\n            if b[i]!= b[i - 1]:\n                break\n        if i == m:\n            print(s)\n            continue\n        a = [s[i] for i in range(m) if b[i] == b[i - 1]]\n        if len(a) == 0:\n            print(s)\n            continue\n        a.sort()\n        print(''.join(a))\nsolution(stdin)\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    for i in range(n, 1, -1):\n        result += chr(ord('a') + (n-i))\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (chr(ord('a') + (n - 1) % 26))"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin)\n    d = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in range(1, N+1):\n        d.append(str(i))\n    d.append('aa')\n    d.append('ab')\n    d.append('ac')\n    d.append('ba')\n    d.append('bb')\n    d.append('bc')\n    d.append('ca')\n    d.append('cb')\n    d.append('cc')\n    d.append('da')\n    d.append('db')\n    d.append('dc')\n    d.append('ea')\n    d.append('eb')\n    d.append('ec')\n    d.append('fa')\n    d.append('fb')\n    d.append('fc')\n    d.append('ga')\n    d.append('gb')\n    d.append('gc')\n    d.append('ha')\n    d.append('hb')\n    d.append('hc')\n    d.append('ia')\n    d.append('ib')\n    d.append('ic')\n    d.append('ja')\n    d.append('jb')\n    d.append('jc')\n    d.append('jaa')\n    d.append('jaab')\n    d.append('jaac')\n    d.append('jba')\n    d.append('jbab')\n    d.append('jbac')\n    d.append('jca')\n    d.append('jcb')\n    d.append('jcc')\n    d.append('jd')\n    d.append('je')\n    d.append('jf')\n    d.append('jg')\n    d.append('jia')\n    d.append('jib')\n    d.append('jic')\n    d.append('jiaa')\n    d.append('jiab')\n    d.append('jiac')\n    d.append('jiaa')\n    d.append('jiab')\n    d.append('jib')\n    d.append('jib')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    d.append('jia')\n    d.append('jia')\n    d.append('ji')\n    d.append('jia')\n    "
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    name = \"\"\n    if N < 27:\n        name += chr(ord('a') + N-1)\n    else:\n        half = int(N/2)\n        if N%2 == 0:\n            name += chr(ord('a') + half - 1)\n            name += chr(ord('a') + half)\n        else:\n            name += chr(ord('a') + half)\n    return name"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.splitlines()[0]"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 27:\n        return chr(n + ord('a'))\n    if n < 701:\n        return chr(n - 26 + ord('a')) + chr(ord('a') + (n - 26) // 26)\n    if n < 18277:\n        return chr(n - 703 + ord('a')) + chr(ord('a') + (n - 18277) // 26)\n    if n < 475253:\n        return chr(n - 18279 + ord('a')) + chr(ord('a') + (n - 475253) // 26)\n    if n < 475254:\n        return chr(n - 18279 + ord('a')) + chr(ord('a') + (n - 475254) // 26)\n    return chr(n - 18279 + ord('a')) + chr(ord('a') + (n - 475254) // 26)"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    res = \"\"\n    for i in range(1, N + 1):\n        s = str(i)\n        if len(s) == 1:\n            res += s\n        else:\n            res += s[-1]\n    print(res)"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    ch = chr(ord('a')+ord('z')-ord(N)-1)\n    return ch"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    seq = [words[i: i+n] for i in range(0, n)]\n    curr = seq[0][0]\n    cnt = 1\n    for i in range(1, n):\n        if curr!= seq[i][0]:\n            cnt += 1\n            curr = seq[i][0]\n    return cnt\nprint(solution(input()))"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\nABBREVIATIONS\n\nTime limit: $10^5$ s\nMemory limit: 512 MB\n\nIn this problem we have to find the shortest text which consists of uppercase Latin letters and in which there are at most one abbreviation. There is no punctuation. For example, given the text \"AAABBAABB\", we can obtain two possible abbreviations: \"AAABB\" and \"AABB\".\n\nUsing dynamic programming, we solve the problem in two phases:\n\n(1) Construct an array of size $n + 1$ in which the $i$-th element is the shortest text which consists of uppercase Latin letters and in which there are at most $i$ abbreviation. The first element of the array is $0$, because the shortest text consists of the empty string.\n\n(2) Construct an array of size $n + 1$ in which the $i$-th element is the length of the shortest text which consists of uppercase Latin letters and in which there are at most $i$ abbreviations. The first element of the array is $n$, because the shortest text consists of the empty string.\n\nTo find the length of a text, we can start by reading the last element of the previous array ($n - 1$). We can get rid of this element and add it to the previous length ($n - 2$). We can get rid of the last element of the array and add it to the previous length ($n - 3$) and so on.\n\nWe can find the minimum of all elements of the array ($n$) and the previous array ($n - 1$) by doing the same operation ($n - 1$), ($n - 2$), ($n - 3$), etc.\n\nWe can use the algorithm described in the first phase to find the shortest text.\n\nExample\n\nFor\n\n$text = \"AAABBAABB\"$\n\nThe shortest text consists of\n\n$\"AAABB\"$\n\nand\n\n$\"AABB\"$\n\nwith lengths\n\n$3$\n\nand\n\n$5$\n\nThus, the answer is\n\n$3 + 5 = 12$\n\n\nFor\n\n$text = \"AaAaaAaAbAbAbbAbb\"$\n\nThe shortest text consists of\n\n$\"AaAaAa\"$\n\nand\n\n$\"AaAbAbAb\"$\n\nwith lengths\n\n$2$\n\nand\n\n$4$\n\nThus, the answer is\n\n$2 + 4 = 6$\n\n\"\"\"\n\nfrom itertools import count\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.\n\nLet's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \\dots, w_j$. Two segments of words $w[i_1..j_1]$ and $w[i_2..j_2]$ are considered equal if $j_1 - i_1 = j_2 - i_2$, $j_1 \\ge i_1$, $j_2 \\ge i_2$, and for every $t \\in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text \"to be or not to be\" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words \"to be\".\n\nAn abbreviation is a replacement of some segments of words with their first uppercase letters. In order to perform an abbreviation, you have to choose at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text \"a ab a a b ab a a b c\" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation \"AAA\" and obtain the text \"a AAA b AAA b c\", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation \"AAAB\" and obtain the text \"a AAAB AAAB c\".\n\nWhat is the minimum length of the text after at most one abbreviation?\n    '''\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    words = [w for w in words if len(w) > 0]\n    word_to_abbrev = {}\n    abbrev_to_word = {}\n    for i in range(len(words)):\n        word = words[i]\n        if word not in word_to_abbrev:\n            word_to_abbrev[word] = set()\n        if word not in abbrev_to_word:\n            abbrev_to_word[word] = set()\n        for j in range(i + 1, len(words) + 1):\n            segment = ''.join(word[:i + 1] for i in range(j - 1))\n            if j > i + 1:\n                segment += word[i + 1]\n            word_to_abbrev[word].add(segment)\n            abbrev_to_word[segment].add(word)\n    abbrevs = set()\n    for segment in word_to_abbrev:\n        if len(word_to_abbrev[segment]) > 1:\n            abbrevs.add(segment)\n    for word in word_to_abbrev:\n        if word not in abbrevs:\n            for segment in word_to_abbrev[word]:\n                if word in abbrev_to_word[segment]:\n                    abbrev_to_word[segment].remove(word)\n    for word in word_to_abbrev:\n        if word in abbrevs:\n            continue\n        for segment in word_to_abbrev[word]:\n            if len(word_to_abbrev[segment]) == 1:\n                abbrev = word_to_abbrev[segment].pop()\n                abbrev_to_word[abbrev].remove(word)\n                if len(abbrev_to_word[abbrev]) == 0:\n                    del abbrev_to_word[abbrev]\n    ans = 0\n    for segment in abbrev_to_word:\n        for word in abbrev_to_word[segment]:\n            ans += len(word)\n    return ans\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    words.sort(key=len)\n    res = \"\"\n    for i in range(n):\n        res += words[i]\n        if i < n - 1:\n            res += \" \"\n    return res\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin[i:i + n] for i in range(0, len(stdin), n)]\n    res = words[0]\n    for i in range(1, len(words)):\n        for j in range(min(len(words[i]), len(words[i - 1]))):\n            if words[i][j]!= words[i - 1][j]:\n                res += words[i][j]\n                break\n        else:\n            res += words[i][j]\n    return res\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a text, count the number of abbreviations and the length of the text\n    after at most one abbreviation.\n\n    :param stdin: the input text\n    :return: the length of the text after at most one abbreviation\n    \"\"\"\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    abbrev_lengths = []\n    for word in words:\n        for abbrev_length in range(1, len(word) + 1):\n            if word[:abbrev_length] == word[:abbrev_length].upper():\n                abbrev_lengths.append(abbrev_length)\n    abbrev_lengths.sort()\n    res = n\n    for i in range(1, len(abbrev_lengths)):\n        res -= abbrev_lengths[i] - abbrev_lengths[i - 1]\n    return res"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    a = a[0:n]\n    memo = [[[0 for _ in range(k + 1)] for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                memo[i][j][j] = a[i - 1]\n            else:\n                for k in range(j, i):\n                    memo[i][j][k] = max(memo[i][j][k], memo[i - 1][j - 1][k - 1] + a[i - 1])\n    result = []\n    for i in range(k, n + 1):\n        for j in range(1, k + 1):\n            if memo[i][j][j] > memo[i - 1][j][j]:\n                result.append(j)\n    return''.join(map(str, result))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    k_arr = []\n    for i in range(k):\n        max_arr = [arr[0]]\n        for j in range(1, n):\n            max_arr.append(max(max_arr[j - 1], arr[j]))\n        k_arr.append(max_arr)\n    k_arr.reverse()\n    ans = []\n    for i in range(k):\n        ans += k_arr[i]\n    print(sum(ans))\n    for i in range(k):\n        print(*k_arr[i])\nsolution(stdin.read())\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_profit(a: List[int], k: int) -> int:\n        max_profit = 0\n        stack = []\n        for i in range(k):\n            max_profit = max(max_profit, a[i])\n            while len(stack) > 0 and stack[-1] < max_profit:\n                stack.pop()\n            stack.append(max_profit)\n        return max(a[k:] + a[:k])\n    \n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(find_max_profit(a, k))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    arr = [int(x) for x in stdin.strip().split()]\n    arr.sort(reverse=True)\n    dp = [0 for x in range(k + 1)]\n    dp[0] = 0\n    for i in range(1, k + 1):\n        dp[i] = max(dp[i - 1], arr[0] * i)\n        for j in range(1, n):\n            dp[i] = max(dp[i], dp[i - 1] + arr[j] * (i - j))\n    return str(dp[k])\n\nassert(solution(stdin) == '4000')\n\nassert(solution('8 3\\n5 4 2 6 5 1 9 2') == '20')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('5 1\\n1 1 1"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0].split()[0])\n    k = int(stdin[0].split()[1])\n    a = stdin[1].split()\n    if len(a)!= n:\n        raise ValueError\n    s = [0 for _ in range(k+1)]\n    s[0] = 0\n    for i in a:\n        s[0] += int(i)\n    for i in range(1, k+1):\n        if s[i] < s[i-1]:\n            s[i] = s[i-1]\n    maxProfit = s[-1]\n    t = [0 for _ in range(k+1)]\n    for i in range(k, 0, -1):\n        if s[i-1] + s[i] < s[i]:\n            s[i-1] = s[i]\n        else:\n            t[i-1] = s[i-1]\n    for i in t:\n        if i == 0:\n            continue\n        if maxProfit < i:\n            break\n        maxProfit -= i\n    return maxProfit"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    a = a[::-1]\n\n    max_profit = 0\n    for i in range(0, n, k):\n        max_profit += max(a[i:i + k])\n    return str(max_profit)\n\n\nassert(solution(input()) == '4000')\n\"\"\"\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    arr = []\n    for i in range(n):\n        arr.append(a[i*k:(i+1)*k])\n    soln = []\n    \n    def backtrack(j, i, profit):\n        if i == n:\n            if j == k:\n                soln.append(profit)\n            return\n        if j == k:\n            soln.append(profit)\n            return\n        if j+i < n*k:\n            backtrack(j+1, i, profit)\n        else:\n            if j+i-n*k < n:\n                backtrack(j+1, i+1, profit+arr[i][j])\n            else:\n                backtrack(j+1, i+1, profit)\n    backtrack(0, 0, 0)\n    return max(soln)\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    array = [int(num) for num in stdin.split()]\n    # print(array)\n    count = 0\n    result = 0\n    \n    for i in range(len(array)-1):\n        if array[i] == 0:\n            result += 1\n        else:\n            if (array[i+1] - array[i]) == 0:\n                count += 1\n                result += count\n            else:\n                count = 0\n    return result"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''4\n1 -5 3 2''') == '1')\nassert(solution('''5\n4 -2 3 -9 2''') == '0')\nassert(solution('''9\n-1 1 -1 1 -1 1 1 -1 -1''') == '6')\nassert(solution('''8\n16 -5 -11 -15 10 5 4 -4''') == '3')\nassert(solution('''1\n1''') == '0')\nassert(solution('''2\n1 1''') == '0')\nassert(solution('''3\n-1 1 -1''') == '1')\nassert(solution('''4\n-1 1 1 1''') == '1')\nassert(solution('''5\n-1 -1 1 1 1''') == '1')\nassert(solution('''6\n-1 1 1 1 1 1''') == '1')\nassert(solution('''7\n-1 1 1 1 1 1 1''') == '2')\nassert(solution('''8\n-1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''9\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''10\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '2')\nassert(solution('''11\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''12\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''13\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''14\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '2')\nassert(solution('''15\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''16\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''17\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '2')\nassert(solution('''18\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''19\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''20\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''21\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '2')\nassert(solution('''22\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''23\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''24\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''25\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''26\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '2')\nassert(solution('''27\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''28\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''29\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''30\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '1')\nassert(solution('''31\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] > 0:\n        a.insert(0, 0)\n    if a[-1] < 0:\n        a.append(0)\n    count = 0\n    i = 1\n    while i < n:\n        while i < n and a[i] == a[i - 1]:\n            i += 1\n        if i < n:\n            a.insert(i, 0)\n            count += 1\n    return count"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n'''\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    prev = a[0]\n    for i in range(1, n):\n        if prev + a[i]!= 0:\n            count += 1\n        prev = a[i]\n\n    return count"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(1, n):\n        if a[i] + a[i-1] < 0:\n            res += 1\n    return str(res)\n\nprint(solution(''))\n'''\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == 0:\n                m = 1\n    return m\n\n\n\nm = solution(input())\nprint(m)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(a[i:j+1]) == 0:\n                res += 1\n    return str(res)"
    }
]