[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n\"\"\"\n\nimport sys\nsys.path.append('../')\nfrom math import floor\nfrom math import log\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(int(num) for num in stdin.readline().split()) for _ in range(n - 1)]\n    tree = Graph(n)\n    for a, b in edges:\n        tree.add_edge(a, b)\n    return str(tree.max_simple_paths())\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tree = [set() for _ in range(n)]\n    for i in range(n - 1):\n        a, b = stdin.readline().split()\n        tree[int(a) - 1].add(int(b) - 1)\n        tree[int(b) - 1].add(int(a) - 1)\n    \n    for i in range(n):\n        for j in tree[i]:\n            tree[j] = tree[i] | tree[j]\n    \n    res = 0\n    for i in range(n - 1):\n        for j in tree[i]:\n            res = max(res, len(tree[i]) - len(tree[j]) - 1)\n    \n    return str(res)"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    nodes = [[] for _ in range(T)]\n    for _ in range(T - 1):\n        a, b = stdin.split()\n        a, b = int(a), int(b)\n        if a not in nodes[b]:\n            nodes[a].append(b)\n        if b not in nodes[a]:\n            nodes[b].append(a)\n    nodes = [len(nodes[node]) for node in nodes]\n    max_edges = max(nodes)\n    return max_edges\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [stdin.readline().strip().split(' ') for _ in range(n - 1)]\n    edges = {(int(a), int(b)) for a, b in edges}\n    return''.join(str(max(sum(set(x) for x in edges if a in x) for a in range(1, n + 1))),''.join(str(x) for x in max(edges, key=len)))\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    vertices_count, edges_count = list(map(int, stdin.split()))\n    edges = []\n    for edge in stdin.strip().split(\"\\n\"):\n        edges.append(list(map(int, edge.split())))\n\n    nodes = [{} for i in range(vertices_count)]\n    for edge in edges:\n        nodes[edge[0]][edge[1]] = 1\n        nodes[edge[1]][edge[0]] = 1\n\n    # find all simple paths\n    simple_paths = []\n    for i in range(vertices_count):\n        simple_paths.extend(simple_paths_util(i, nodes, vertices_count))\n\n    # sort paths by len\n    simple_paths.sort(key=lambda x: len(x))\n\n    # find all maximal edges\n    edges = []\n    for path in simple_paths:\n        edges.append(maximal_edges(path, nodes, vertices_count))\n\n    # sort by len and max value\n    edges.sort(key=lambda x: (len(x), max(x)))\n\n    return str(edges[0][1]) + \" \" + str(edges[0][2]) + \" \" + str(edges[0][3])\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function returns a string with the maximum number of edges which belong to at least one of the simple paths between two vertices.\n    \"\"\"\n    res = 0\n    v = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    for a, b in edges:\n        res = max(res, a, b, v - a, v - b)\n    return str(res)\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(el) for el in stdin.split()]\n    lst.sort()\n    div = [1, n]\n    for i in range(2, n):\n        if lst[i] % n == 0:\n            div.append(n)\n        else:\n            div.append(lst[i])\n    return''.join([str(el) for el in div])"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    divisors = list(map(int, stdin.split()))\n    \n    length = len(divisors)\n    pairs = []\n    \n    for i in range(0, length, 2):\n        pairs.append((divisors[i], divisors[i + 1]))\n    \n    for i in range(length):\n        if i % 2 == 0:\n            continue\n        \n        for pair in pairs:\n            divisor = pair[0]\n            if divisor in divisors[i:]:\n                divisors[i:].remove(divisor)\n                divisors[i + 1:].remove(divisor)\n                divisors[i:].append(divisors[i + 1:][0])\n                \n                break\n    \n    for i in range(0, len(divisors), 2):\n        if divisors[i]!= divisors[i + 1]:\n            return \"NO SOLUTION\"\n    \n    return \" \".join(map(str, divisors))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [int(x) for x in stdin.split()]\n\n    x, y = [], []\n    for d in divisors:\n        if d in x:\n            x.remove(d)\n        else:\n            y.append(d)\n            x.append(d)\n    return''.join(map(str, x)) +'' +''.join(map(str, y))\n\nassert solution('''10''') == '20 8'\nassert solution('''10 2 8 1 2 4 1 20 4 5''') == '20 8'\nassert solution('''10 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 2 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''10 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 1 2 2 1 1 1''') == '20 8'\nassert solution('''20 10 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''10 10 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 1''') == '20 8'\nassert solution('''100 200 2 2 8 1 2 2 1 2 4 1 2 2 1 2 1 1 2 1 1 2 2"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(x) for x in stdin.split()]\n    d.sort()\n    d_count = {}\n    for i in d:\n        if i in d_count:\n            d_count[i] += 1\n        else:\n            d_count[i] = 1\n\n    for i in d:\n        if d_count[i] == 2:\n            if i in d_count:\n                d_count.pop(i)\n            else:\n                d_count[i] = 1\n\n    if len(d_count) == 0:\n        x = y = 1\n    else:\n        x = max(d_count.keys())\n        y = d_count[x]\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    \n    data = list(map(int, stdin.readline().strip().split()))\n    \n    counts = [0] * 11\n    \n    for d in data:\n        counts[d] += 1\n        \n    for i in range(1, 11):\n        counts[i] += counts[i-1]\n    \n    # print(counts)\n    \n    x, y = 0, 0\n    \n    for d in data:\n        x += counts[d] * d\n        y += counts[d] * d\n    \n    if x == y:\n        x, y = sorted(data)\n    \n    if x < y:\n        x, y = y, x\n    \n    return''.join(map(str, [x, y]))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [int(stdin) for i in range(n)]\n    divisors.sort()\n    divisors = set(divisors)\n    res = []\n    for div in divisors:\n        if div < 10:\n            res.append(div)\n            continue\n        x = div\n        y = n // div\n        # print(x, y)\n        if x in divisors and y in divisors:\n            divisors.remove(x)\n            divisors.remove(y)\n            res.append(x)\n            res.append(y)\n    res.sort()\n    return''.join(map(str, res))\n    # return '\\n'.join(map(str, res))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, Merge(list(map(int, stdin.split())))))\n\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    divisors = set(int(divisor) for divisor in stdin.split())\n    for a, b in combinations(divisors, 2):\n        if a * b == int(stdin):\n            return f'{a} {b}'\n    return ''"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    if not d:\n        return \"1 1\"\n    m = d[0]\n    for i in d[1:]:\n        if i < m:\n            m = i\n    # m = min(d)\n    for i in range(2, m):\n        if m % i == 0:\n            m //= i\n            if i!= m:\n                d[d.index(i)] = m\n    d = [str(i) for i in d]\n    return \" \".join(d)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                print(a[i], a[j])\n                return"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    lines = [[int(x) for x in stdin.split()] for _ in range(n)]\n    best = [0] * n\n    best_sum = 0\n\n    for i in range(m):\n        for j in range(n):\n            best[j] = max(best[j], lines[j][i])\n\n        for j in range(n):\n            if (k - (best[j] % k)) % k == 0 and best[j] > 0:\n                best_sum = max(best_sum, best[j] * (k // k))\n\n    return str(best_sum)\n\nassert(solution(input()) == '24')"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split('\\n')]\n    n, m, k = [int(i) for i in lines[0].split()]\n    matrix = [[int(i) for i in line.split()] for line in lines[1:n+1]]\n    max_sum = 0\n    rows = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] < matrix[i][j-1]:\n                rows[j] += 1\n    for i in range(m):\n        if (k - rows[i]) % 2 == 0:\n            max_sum += matrix[n-1][i]\n    return max_sum\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for i in range(n)]\n    res = 0\n\n    for row in range(n):\n        cnt = 0\n        for col in range(m):\n            cnt += matrix[row][col]\n            if cnt % k!= 0:\n                break\n\n        res = max(res, cnt)\n\n    return str(res)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    best = 0\n\n    for i in range(n):\n        for j in range(m//2):\n            s = sum(a[i][j:j+k])\n            if s % k == 0:\n                best = max(s, best)\n\n    return str(best)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    a = [[int(i) for i in stdin.split()] for _ in range(m)]\n    res = 0\n    for i in range(m):\n        res += a[i][i]\n        tmp = a[i][i]\n        for j in range(i+1, m):\n            if tmp + a[j][i] <= k:\n                res += a[j][i]\n                tmp += a[j][i]\n            else:\n                break\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [map(int, stdin.split()) for _ in range(n)]\n    sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, min(m, i) + 1):\n            sums[i] += a[i - 1][j - 1]\n    return max(sums) if k % sum(sums) == 0 else -1\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.split())))\n    result = 0\n    for i in range(n):\n        for j in range(m//2):\n            if sum(arr[i][j:j+2]) % k == 0:\n                result = max(result, sum(arr[i][j:j+2]))\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split('\\n')[0]\n    a = stdin.strip().split('\\n')[1].split()\n    print(a)\n    stack = []\n    for i in range(int(n)):\n        stack.append(int(a[i]))\n    max = -1\n    n = int(n)\n    while (n > 1):\n        x = stack.pop()\n        y = stack.pop()\n        if x <= y:\n            max = n - 1\n        else:\n            max = n\n        if max > n:\n            max = max\n        else:\n            max = n\n        stack.append(y)\n        stack.append(x)\n        n -= 2\n    s = \"\"\n    for i in range(max):\n        s += \"L\"\n    return s\n\n'''\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max_count = 0\n    max_seq = []\n\n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                max_seq.append(a[i - j])\n\n    return str(max_seq)\n\nprint(solution(\"\"))\n\"\"\"\n\n\"\"\"\nA. DNA Segment\ntime limit per test2 seconds\nmemory limit per test256 megabytes\ninputstandard input\noutputstandard output\nThe DNA sequence is a string consisting of the letters A, C, G and T.\n\nWrite a program that computes the length of the longest substring of the sequence which consists of the same set of letters.\n\nInput\nThe first line contains an integer n (1\u2009\u2264\u2009n\u2009\u2264\u200910), the length of the sequence. The second line contains a string s consisting of the DNA sequence.\n\nOutput\nOutput one integer: the length of the longest substring.\n\nConstraints\n1\u2009\u2264\u2009n\u2009\u2264\u200910\n1\u2009\u2264\u2009s\u2009\u2264\u2009100\ns\u2009contains\u2009only\u2009letters\u2009in\u2009{\u2009A\u2009,\u2009C\u2009,\u2009G\u2009,\u2009T\u2009}\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The task\n    \"\"\"\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]\n\n\"\"\"\nYou have to write a function that returns the length of the longest increasing sequence in a\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1:]\n    a = [int(x) for x in a]\n    L = 0\n    R = len(a) - 1\n    maxL = 0\n    res = \"\"\n    while L < R:\n        if a[L] < a[R]:\n            if maxL < L:\n                maxL = L\n            R = L\n        elif a[L] > a[R]:\n            if maxL < R:\n                maxL = R\n            L = R\n        else:\n            L += 1\n            R -= 1\n    if maxL == 0:\n        res = \"L\"\n    elif maxL == len(a) - 1:\n        res = \"R\"\n    else:\n        res = \"LR\"\n    return res\n\nprint(solution(\"5\\n1 2 4 3 2\"))\nprint(solution(\"7\\n1 3 5 6 5 4 2\"))\nprint(solution(\"3\\n2 2 2\"))\nprint(solution(\"4\\n1 2 4 3\"))\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nA simple solution is the following:\n\n1. Read $n = \\text{int}\\left(\\text{stdin.readline()}\\right)$.\n2. Read $a = \\text{stdin.readline()}\\left(\\text{list(map(int,stdin.readline().split()))}\\right)$.\n3. Create an array $a$ of size $n$ and initialize it with all values $1$.\n4. For each element in $a$, go to the left, if the element is smaller than the previous element, then you can take it and remove it from the array.\n5. For each element in $a$, go to the right, if the element is greater than the previous element, then you can take it and remove it from the array.\n6. Print the length of the array.\n7. Print the array.\n\nHow to solve this problem?\n\n---\n\n### Notes\n\n**Hint:**\n\nIn this problem the objective is to obtain a strictly increasing sequence. The objective is to find the longest sequence. The sequence should contain at least two elements.\n\n**Possible solution ideas:**\n\n* Get the middle element.\n* If the middle element is less than the previous element, take the right most element.\n* If the middle element is greater than the previous element, take the left most element.\n\n**Another possible solution:**\n\n* Reverse the array.\n* Remove the first and last elements.\n* Get the middle element.\n* If the middle element is less than the previous element, take the right most element.\n* If the middle element is greater than the previous element, take the left most element.\n* Reverse the array again.\n\n**Note:**\n\nYou should take the longest sequence, not the shortest.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nThe time limit for this problem has been reduced to 10 seconds. If you finish the problem within that time limit, the auto-grader will automatically mark your submission as not enough, and we'll add another 5 points.\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe tests for this task are described below:\n\nTests:\n\n*Example 1:*\n\nInput:\n\n5\n1 2 4 3 2\n\nOutput:\n\n4\n\nExplanation:\n\nWhen you take the leftmost element, the sequence becomes $[1, 2, 4, 3]$,\nthen you take the rightmost element, $2$, and the sequence becomes $[1, 4, 3]$,\nthen you take the leftmost element, $4$, and the sequence becomes $[1, 3]$.\nThen you take the rightmost element, $3$, and the sequence becomes $[1]$,\nthen you take the leftmost element, $1$ and the sequence becomes empty.\nTherefore, we can see that the length of the sequence is 4.\n\n*Example 2:*\n\nInput:\n\n7\n1 3 5 6 5 4 2\n\nOutput:\n\n6\n\nExplanation:\n\nWhen you take the leftmost element, the sequence becomes $[1, 3, 5, 6, 5, 4, 2]$,\nthen you take the rightmost element, $2$, and the sequence becomes $[1, 3, 5, 6, 5]$,\nthen you take the leftmost element, $5$, and the sequence becomes $[1, 3, 6, 5]$.\nThen you take the rightmost element, $6$, and the sequence becomes $[1, 3, 5]$,\nthen you take the leftmost element, $3$, and the sequence becomes $[1, 5]$.\nThen you take the rightmost element, $5$, and the sequence becomes $[1, 5]$.\nThen you take the leftmost element, $1$, and the sequence becomes $[5]$.\nThen you take the rightmost element, $5$, and the sequence becomes $[5]$.\nFinally, you take the leftmost element, $5$, and the sequence becomes empty.\nTherefore, we can see that the length of the sequence is 6.\n\n*Example 3:*\n\nInput:\n\n3\n2 2 2\n\nOutput:\n\n1\n\nExplanation:\n\nWhen you take the leftmost element, the sequence becomes $[2, 2]$,\nthen you take the rightmost element, $2$, and the sequence becomes $[2]$,\nthen you take the leftmost element, $2$, and the sequence becomes empty.\nThus, we can see that the length of the sequence is 1.\n\n*Example 4:*\n\nInput:\n\n4\n1 2 4 3\n\nOutput:\n\n4\n\nExplanation:\n\nWhen you take the leftmost element, the sequence becomes $[1, 2, 4, 3]$,\nthen you take the rightmost element, $3$, and the sequence becomes $[1, 2, 4]$,\nthen you take the leftmost element, $4$, and the sequence becomes $[1, 2]$,\nthen you take the rightmost element, $2$, and the sequence becomes $[1]$,\nthen you take the leftmost element, $1$, and the sequence becomes empty.\nThus, we can see that the length of the sequence is 4.\n\n\"\"\"\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You have been given a sequence of integers $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\n\nYou can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n\n  add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \n\nIt is possible that after an operation the value $a_i$ becomes negative.\n\nYour goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\n\nPrint the required $D$ or, if it is impossible to choose such value $D$, print -1.\n\nFor example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the sequence $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\n\nIf it is impossible to choose such value $D$, print -1.\n\n\n-----Examples-----\nInput\n6\n1 4 4 7 4 1\n\nOutput\n3\n\nInput\n5\n2 2 5 2 5\n\nOutput\n3\n\nInput\n4\n1 3 3 7\n\nOutput\n-1\n\nInput\n2\n2 8\n\nOutput\n3\n\n\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    D = 0\n    if n <= 2:\n        return 0\n    for i in range(n):\n        if a[i] < 0:\n            D += a[i]\n    for i in range(n):\n        if a[i] < 0:\n            a[i] += D\n    a = set(a)\n    if len(a) == 1:\n        return 0\n    elif len(a) == 2:\n        if a.pop() == a.pop():\n            return 0\n        elif a.pop() < a.pop():\n            return a.pop() - a.pop()\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a = stdin.readline().split()\n    a = list(map(int, a))\n\n    answer = []\n\n    for i in range(1, n):\n        if a[i] >= 0:\n            answer.append(a[i])\n        else:\n            break\n\n    min_d = float('inf')\n    min_d_a = -1\n    for d in range(1, n + 1):\n        s = sum(a)\n        a = a[1:] + [0]\n        s2 = sum(a)\n        if s == s2:\n            if min_d > d:\n                min_d = d\n                min_d_a = d\n    return str(min_d_a)\n\nassert solution('''6\n1 4 4 7 4 1\n''') == '3'\nassert solution('''5\n2 2 5 2 5\n''') == '3'\nassert solution('''4\n1 3 3 7\n''') == '-1'\nassert solution('''2\n2 8\n''') == '3'\nassert solution('''8\n17 0 17 2 17 0 17\n''') == '-1'\nassert solution('''1\n7\n7\n''') == '-1'\nassert solution('''2\n6\n7\n8\n''') == '3'\nassert solution('''3\n1 1 1 1 1\n''') == '-1'\nassert solution('''4\n1 1 1 1\n''') == '-1'\nassert solution('''6\n9 9 9 9 9 9\n''') == '9'\nassert solution('''4\n1 1 1 1\n''') == '-1'\nassert solution('''5\n2 2 5 2 5\n''') == '3'\nassert solution('''4\n1 1 1 1\n''') == '-1'\nassert solution('''8\n17 7 17 7 17 7\n''') == '-1'\nassert solution('''4\n1 1 1 1\n''') == '-1'\nassert solution('''5\n2 2 5 2 5\n''') == '3'\nassert solution('''4\n1 1 1 1\n''') == '-1'\nassert solution('''6\n1 1 1 1 1\n''') == '-1'\nassert solution('''7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: str = stdin.strip()\n    n = int(stdin.readline().strip())\n    # a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a = stdin.readline().strip().split(' ')\n    a = [int(x) for x in a]\n\n    result = -1\n    for d in range(max(a)+1):\n        if d == 0 or all([a[i] + d == a[i] for i in range(n)]):\n            result = d\n            break\n\n    return str(result)\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve() -> None:\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        left = a[0]\n        for right in a[1:]:\n            if left == right:\n                continue\n            if left < right:\n                left += 1\n            elif left > right:\n                left -= 1\n        print(left)\n    return solve()\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split(' ')))\n    l2 = [l[0]] * n\n    for i in range(1, n):\n        d = 0\n        while d <= l[i]:\n            d += 1\n            for j in range(n):\n                l2[j] = max(l2[j] - d, l[j])\n    res = 0\n    for i in range(n):\n        res = max(res, l2[i])\n    return str(res)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    # sum of a[0] to a[n-1]\n    sum_a = sum(a)\n\n    # get the first value that's not 0\n    for i in range(n):\n        if a[i]!= 0:\n            break\n\n    # if sum is the same then all elements are the same\n    if sum_a == a[i]:\n        return str(0)\n\n    # if the sum is greater than the sum of a[i], we can\n    # split it by i-th value\n    if sum_a > a[i]:\n        return str(i - 1)\n\n    # if the sum is less than the sum of a[i], we can\n    # split it by i-th value and add it back to the sum\n    return str(i)\n\nimport sys"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.strip().split()))\n\n    D = 0\n    for x in range(1, n + 1):\n        if A[x - 1] <= 0:\n            D += 1\n        else:\n            break\n    if D > 0:\n        A = [y - D for y in A]\n    else:\n        print(-1)\n        return\n\n    for x in range(1, n):\n        if A[x]!= A[x - 1]:\n            D += 1\n            A = [y - D for y in A]\n            break\n    else:\n        print(-1)\n        return\n\n    print(D)\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = list(map(int, stdin.split()))\n    print(solution1(stdin[1:]))\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    assert len(a) == n\n    numbers = [a[0]]\n    for i in range(1, n):\n        if a[i] in numbers:\n            numbers.remove(a[i])\n        else:\n            numbers.append(a[i])\n    if numbers:\n        return numbers[0]\n    else:\n        return -1"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    result = -1\n    for d in range(1, max(a) + 1):\n        temp = list(a)\n        for i in range(n):\n            temp[i] += d if temp[i] > 0 else -d\n            temp[i] -= d if temp[i] < 0 else -d\n            temp[i] = max(0, temp[i])\n        if temp == a:\n            result = d\n            break\n\n    return result\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    x3, y3, x4, y4 = map(int, stdin.split(' '))\n    x5, y5, x6, y6 = map(int, stdin.split(' '))\n\n    if x1 == x2 or y1 == y2 or x3 == x4 or y3 == y4 or x5 == x6 or y5 == y6:\n        return 'NO'\n\n    if x1 < x3 < x5 < x2 and y1 < y3 < y5 < y2:\n        return 'YES'\n\n    return 'NO'\n\nprint(solution('2 2 4 4'))\nprint(solution('3 1 5 5'))\nprint(solution('8 1 11 7'))\nprint(solution('0 0 1000000 1000000'))\nprint(solution('0 0 499999 1000000'))\nprint(solution('500000 0 1000000 1000000'))\nprint(solution('0 0 1000000000 1000000000'))\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    xs = set([x[0] for x in nums])\n    ys = set([x[1] for x in nums])\n    return \"YES\" if max(xs) > min(ys) and max(ys) > min(xs) else \"NO\"\n\nimport sys"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # x1, y1, x2, y2 = map(int, stdin.split(' '))\n    # x3, y3, x4, y4 = map(int, stdin.split(' '))\n    # x5, y5, x6, y6 = map(int, stdin.split(' '))\n    #\n    # if (x1, y1) == (x3, y3) or (x1, y1) == (x5, y5) or (x2, y2) == (x4, y4) or (x2, y2) == (x6, y6):\n    #     return \"YES\"\n    #\n    # if (x1, y1) > (x3, y3) and (x1, y1) < (x3, y3) and (x2, y2) > (x4, y4) and (x2, y2) < (x4, y4):\n    #     return \"YES\"\n    #\n    # if (x1, y1) < (x5, y5) and (x1, y1) > (x5, y5) and (x2, y2) > (x6, y6) and (x2, y2) < (x6, y6):\n    #     return \"YES\"\n    #\n    # if (x1, y1) > (x5, y5) and (x1, y1) < (x5, y5) and (x2, y2) < (x6, y6) and (x2, y2) > (x6, y6):\n    #     return \"YES\"\n    #\n    # return \"NO\"\n\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    x3, y3, x4, y4 = map(int, stdin.split(' '))\n    x5, y5, x6, y6 = map(int, stdin.split(' '))\n\n    if (x1, y1) == (x3, y3) or (x1, y1) == (x5, y5) or (x2, y2) == (x4, y4) or (x2, y2) == (x6, y6):\n        return \"YES\"\n\n    if (x1, y1) > (x3, y3) and (x1, y1) < (x3, y3) and (x2, y2) > (x4, y4) and (x2, y2) < (x4, y4):\n        return \"YES\"\n\n    if (x1, y1) < (x5, y5) and (x1, y1) > (x5, y5) and (x2, y2) > (x6, y6) and (x2, y2) < (x6, y6):\n        return \"YES\"\n\n    if (x1, y1) > (x5, y5) and (x1, y1) < (x5, y5) and (x2, y2) < (x6, y6) and (x2, y2) > (x6, y6):\n        return \"YES\"\n\n    return \"NO\"\n\n\nassert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"2 2 4 4\\n1 1 3 5\") == \"YES\"\nassert solution(\"3 1 5 5\\n0 0 4 6\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n0 0 499999 1000000\\n0 0 499999 1000000\") == \"YES\"\nassert solution(\"2 2 4 4\\n3 1 7 5\") == \"NO\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"NO\"\nassert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n0 0 499999 1000000\\n0 0 499999 1000000\") == \"NO\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n0 0 499999 1000000\\n0 0 499999 1000000\") == \"NO\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n0 0 499999 1000000\\n0 0 499999 1000000\") == \"NO\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\\n0 0 499999 1000000\\n0 0 499999 1000000\") == \"NO\"\nassert solution(\"2 2 4 4\\n3 1 7 5\\n3 1 7 5\") == \"NO\"\nassert solution(\"1 1 3 5\\n3 1 5 5\") == \"YES\"\nassert solution(\"1 1 3 5\\n3 1 5 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"1 1 3 5\\n3 1 5 5\\n3 1 5 5"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 4 4\n1 1 3 5\n3 1 5 5\n\n2 1 6 6\n0 0 4 6\n0 0 7 4\n\n2 1 6 6\n0 0 4 6\n0 0 7 4\n    ''')\n    'NO'\n    >>> solution('''0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n\n0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n    ''')\n    'YES'\n    \"\"\"\n    x1, y1, x2, y2 = [int(s) for s in stdin.split()]\n    x3, y3, x4, y4 = [int(s) for s in stdin.split()]\n    x5, y5, x6, y6 = [int(s) for s in stdin.split()]\n    x_max = max(x1, x2, x3, x4, x5, x6)\n    x_min = min(x1, x2, x3, x4, x5, x6)\n    y_max = max(y1, y2, y3, y4, y5, y6)\n    y_min = min(y1, y2, y3, y4, y5, y6)\n    if (x_max < x_min or y_max < y_min) or (x_max < x3 or x_min > x4 or y_max < y3 or y_min > y4) or (x_max < x5 or x_min > x6 or y_max < y5 or y_min > y6):\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(num) for num in stdin.split()]\n    x3, y3, x4, y4 = [int(num) for num in stdin.split()]\n    if max(x1, x2) < x3 or max(x3, x4) < x1 or max(y1, y2) < y3 or max(y3, y4) < y1:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    return \"YES\" if (x_1 < x_3 and y_1 < y_3) or (x_1 < x_4 and y_1 < y_4) or (x_1 < x_5 and y_1 < y_5) or (x_1 < x_6 and y_1 < y_6) or (x_2 > x_3 and y_2 > y_3) or (x_2 > x_4 and y_2 > y_4) or (x_2 > x_5 and y_2 > y_5) or (x_2 > x_6 and y_2 > y_6) else \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    x1, y1, x2, y2 = map(int, lines[0].split())\n    x3, y3, x4, y4 = map(int, lines[1].split())\n    x5, y5, x6, y6 = map(int, lines[2].split())\n\n    if min(x3, x4) < max(x1, x2) and min(y3, y4) < max(y1, y2):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    return \"YES\" if x1 <= x3 and x4 <= x6 and y1 <= y3 and y4 <= y6 else \"NO\""
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    return str(len(set(x for x in range(1, n + 1) if x in (f(x) for f in (lambda x: x + 1, lambda x: x - 1))))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = {1: 1}\n    for i in range(2, n + 1):\n        if i in d:\n            continue\n        d[i] = i + 1\n        while i % 2 == 0:\n            i //= 2\n            d[i] = i + 1\n        while i % 5 == 0:\n            i //= 5\n            d[i] = i + 1\n        while i % 3 == 0:\n            i //= 3\n            d[i] = i + 1\n        while i % 7 == 0:\n            i //= 7\n            d[i] = i + 1\n        while i % 11 == 0:\n            i //= 11\n            d[i] = i + 1\n        while i % 13 == 0:\n            i //= 13\n            d[i] = i + 1\n        while i % 17 == 0:\n            i //= 17\n            d[i] = i + 1\n        while i % 19 == 0:\n            i //= 19\n            d[i] = i + 1\n    return str(len(d))"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(set(solution2(n))))\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def next_num(n):\n        if n < 10:\n            return n + 1\n        return n // 10 + (n % 10) + 10\n    \n    counter = 0\n    for i in range(1, 10):\n        n = i\n        while n >= 10:\n            n = next_num(n)\n        if n == i:\n            counter += 1\n    return str(counter)\n\nprint(solution(stdin))\n\n'''\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [1, 2]\n    fib_len = 2\n    n_len = 1\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n        fib_len += 1\n        n_len += 1\n    fib.sort()\n    print(fib_len - n_len)\n    return \"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    visited = {n: False}\n    count = 0\n    while True:\n        for x in numbers:\n            if n == x:\n                return count\n            if not visited.get(n - x, False) and n % x == 0:\n                visited[n - x] = True\n                n = n - x\n        count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\"\n    if n == 1:\n        return \"2\"\n    else:\n        return str(n * (n - 1) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(solution_2(int(stdin.split()[0]))))\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    res = [0]\n    for i in range(1, n + 1):\n        if i in res:\n            continue\n        else:\n            res.append(i)\n            for j in range(len(str(i))):\n                if int(str(i)[j:]) in res:\n                    break\n    return str(len(res))\n\n\n\nprint(solution(input()))\n\n\n\n\n\n\"\"\"\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def ints():\n        return map(int, stdin.split())\n\n    N = ints()[0]\n    s = set(ints())\n    friends = list(s)\n\n    res = []\n\n    for i in range(N):\n        if i not in s:\n            res.append(0)\n        else:\n            res.append(friends.index(i)+1)\n\n    return \" \".join(map(str, res))\n\nassert(solution(stdin) == stdin)\nassert(solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\\n\")\nassert(solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\\n\")\nassert(solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\\n\")\nassert(solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\\n\")\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = stdin[1].split(' ')\n    a = list(map(int, a))\n    a = sorted(a)\n    d = {}\n    for i in range(len(a)):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    #print(d)\n    out = ''\n    for i in range(len(a)):\n        if a[i] == i:\n            if d[i] == 0:\n                out += '0'\n            else:\n                out += str(d[i])\n        else:\n            out += str(i)\n    return out\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n    unpack = lambda x: (x[0], *x[1:])\n    gift_nodes = defaultdict(list)\n    for i, friend in enumerate(friends):\n        gift_nodes[friend].append(i)\n\n    visited = set()\n    for f, friends in gift_nodes.items():\n        if f not in visited and len(friends) == 1:\n            visited.add(f)\n\n    answers = sorted(visited)\n    if len(answers) == 1:\n        return''.join(map(str, answers))\n    else:\n        return''.join(map(str, answers))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    # Friend knows whom he wants to give the gift to.\n    known = list(map(int, stdin.readline().split()))\n    # Friend doesn't know whom he wants to give the gift to.\n    unknown = set(range(n)) - set(known)\n    # The final result.\n    ans = []\n    while len(unknown) > 1:\n        # The value f_i we want to give to a friend.\n        i = known.pop()\n        ans.append(i)\n        # The value f_i we don't want to give to a friend.\n        for j in range(n):\n            if j == i:\n                continue\n            if j in unknown:\n                unknown.remove(j)\n                known.append(j)\n    if len(unknown) == 0:\n        return''.join(str(i) for i in ans)\n    else:\n        return''.join(str(ans[0]) if i in unknown else str(ans[1]) for i in range(n))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(n):\n        a[i] = 1 if a[i] == 0 else a[i]\n\n    if a[0]!= 1:\n        return \"NO\"\n    if a[1]!= 0:\n        a[1] = 1\n    elif a[2]!= 0:\n        a[2] = 1\n    else:\n        return \"NO\"\n\n    for i in range(3, n):\n        a[i] = min(a[i], i)\n\n    for i in range(n):\n        if a[i]!= i:\n            return str(i) + \" \" + str(a[i])\n\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] == 0:\n        print(0)\n        return\n    if a[-1] == 1:\n        print(n)\n        return\n    if a[0] == 1:\n        print(1)\n        return\n    for i in range(1, n):\n        if a[i] == a[i-1] + 1:\n            continue\n        else:\n            a[i] = a[i-1] + 1\n    print(*a)\n    return \"\""
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_friends = int(stdin.readline())\n    friends = [int(friend) for friend in stdin.readline().split()]\n    no_friends = {i: friends[i] for i in range(number_of_friends) if friends[i] == 0}\n    one_friends = {i: friends[i] for i in range(number_of_friends) if i not in no_friends}\n    if len(one_friends) == 1:\n        return \" \".join(map(str, one_friends.keys()))\n    for i in range(number_of_friends):\n        if i not in no_friends:\n            if friends[i] == 1:\n                one_friends[i] = i + 1\n            else:\n                one_friends[i] = friends[i]\n    return \" \".join(map(str, one_friends.values()))\n\nassert solution(\"5\") == \"5 3 1 2 4\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\") == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f_values = list(map(int, stdin.readline().split()))\n    return''.join(map(str, dp(n, f_values)))\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split(' ')))\n    # friends = [0] * n\n\n    res = []\n    for i in range(n):\n        if friends[i] == 0:\n            friends[i] = i\n            res.append(i)\n        else:\n            res.append(friends[i])\n\n    return''.join(map(str, res))"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1 or n > 5000:\n        raise ValueError()\n    a = list(map(int, stdin.split()))\n    if len(a)!= n:\n        raise ValueError()\n\n    colors = [0] * k\n\n    for i in a:\n        if colors[i - 1] >= 0:\n            raise ValueError()\n        else:\n            colors[i - 1] = i\n\n    for color in colors:\n        if color == 0:\n            continue\n        else:\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    counter = [0] * k\n    unique = [False] * k\n    for ai in a:\n        counter[ai - 1] += 1\n        if counter[ai - 1] == 1:\n            unique[ai - 1] = True\n    if max(counter) > k:\n        return \"NO\"\n    for c in range(k):\n        if unique[c]:\n            ans = []\n            for i in range(n):\n                ans.append(c + 1)\n            return \"YES \" + \" \".join(map(str, ans))\n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    colors = set()\n    for i in range(n):\n        if a[i] in colors:\n            return \"NO\"\n        colors.add(a[i])\n        if len(colors) == k:\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n    \n    colors = set()\n    for num in a:\n        if num in colors:\n            return \"NO\"\n        colors.add(num)\n        if len(colors) >= k:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    c = {}\n    for i in range(n):\n        if a[i] in c:\n            c[a[i]] = 0\n        else:\n            c[a[i]] = 1\n\n    print(\"YES\") if len(c) == k else print(\"NO\")\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()[0].split(' ')\n    n, x, y = int(line[0]), int(line[1]), int(line[2])\n\n    nums = []\n    for i in range(n):\n        nums.append(int(stdin.splitlines()[1][i]))\n\n    remainder = 10 ** y\n    return min(x, n - y)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = list(map(int, stdin.split()[1]))\n\n    operations = 0\n    while number[y] == 1:\n        operations += 1\n        number[y] = 0\n        if x!= 1:\n            x -= 1\n\n    for i in range(n):\n        if number[i] == 1:\n            number[i] = 0\n            if x!= 1:\n                x -= 1\n    return str(operations)\n\nimport sys"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.strip().split(' '))\n    array = [int(i) for i in stdin.strip()]\n    counter = 0\n    res = 0\n    for i in range(0, len(array)):\n        if array[i] == 0:\n            array[i] = 1\n        else:\n            array[i] = 0\n        if array[i] == 1:\n            counter += 1\n        if counter % x == y:\n            res += 1\n            counter = 0\n    return str(res)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    a = list(map(int, stdin[0:n]))\n    m = len(str(a[x]))\n    k = 0\n    for i in range(x, n):\n        if a[i] == 1:\n            k += 1\n    if k > 0:\n        a[x] = 0\n    else:\n        a[x] = 1\n    b = ''.join(map(str, a))\n    y = y % m\n    while b[-y:]!= '0' * y:\n        b = b[:-1]\n    return b[-y:]\n\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '6')\nassert(solution(input()) == '1')\nassert(solution(input()) == '4')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution(input()) == '7')\nassert(solution(input()) == '6')\nassert(solution(input()) == '5')\nassert(solution(input()) == '4')\nassert(solution(input()) == '3')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '9')\nassert(solution(input()) == '8')\nassert(solution("
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(s) for s in stdin.strip().split(' '))\n    return str(n - (x + y - 1) % n)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num, x, y = map(int, stdin.split())\n    n = 0\n    while num % 10 == 0:\n        num //= 10\n        n += 1\n    if n > y:\n        return '-1'\n    return str(n + (num - x) % (y - n))\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 0\n\n    b = n - x\n    if y >= b:\n        return b\n    if y == 0:\n        return 0\n    a = x - (b - 1) - (10 ** (y - 1))\n\n    if y % 2 == 0:\n        return a\n    else:\n        return a + 1\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        arr = list(map(int, stdin.split()))\n        for i in range(n - 2):\n            if arr[i] == arr[i + 1] == arr[i + 2] and arr[i]!= arr[n - i - 3]:\n                print('YES')\n                return\n        print('NO')\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\nimport sys\n\nnum_tests = int(sys.stdin.readline())\n\nfor i in range(num_tests):\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split()]\n\n    if len(a) >= 3:\n        if a == a[::-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        if is_palindrome(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(stdin.readline()) for _ in range(n)]\n    for _ in range(n):\n        n = int(stdin.readline())\n        numbers = [int(stdin.readline()) for _ in range(n)]\n        if has_palindrome(numbers):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(c) for c in stdin.readline().split()]\n\n        found = False\n        for i in range(2, n):\n            if a[i] == a[i - 1] and a[i] == a[i - 2] and a[i] == a[i - 2]:\n                found = True\n        if found:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def checkPalindrome(s):\n        for i in range(0, len(s) // 2):\n            if s[i]!= s[-i - 1]:\n                return False\n        return True\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = stdin.readline().strip().split(\" \")\n        if checkPalindrome(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = [int(stdin) for _ in range(n)]\n        if is_palindrome(a):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        answer = 'YES' if is_palindrome(a, n) else 'NO'\n        print(answer)\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().split()))\n        print('YES' if is_palindrome(a, n) else 'NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = int(stdin[1:])\n    f = [int(x) for x in stdin[2:]]\n    \n    # print(n, a, f)\n    \n    ret = ''\n    while n > 0:\n        # print(n, a)\n        tmp = (a // 10 ** (n - 1)) % 10\n        a = (a - tmp * (10 ** (n - 1))) // 10 ** (n - 1)\n        ret = str(f[tmp - 1]) + ret\n        n -= 1\n    \n    return str(ret)\n\nassert(solution(input()) == '123456789')\nassert(solution(input()) == '999999999')\nassert(solution(input()) == '33')\nassert(solution(input()) == '9')\nassert(solution(input()) == '1')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input()) == '9')\nassert(solution(input"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split(' ')))\n    \n    for i in range(10):\n        f[i] = i if f[i] == i else a.index(str(i))\n    \n    ans = int(''.join(map(str, f)))\n    \n    for i in range(2, n):\n        a = a[:i] + str(f[int(a[i])]) + a[i + 1:]\n        ans = max(ans, int(''.join(map(str, f))))\n    \n    return str(ans)\n\nassert(solution('''4\n1337\n1 2 5 4 6 6 3 1 9\n''') == '1557')\nassert(solution('''5\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999')\nassert(solution('''2\n33\n1 1 1 1 1 1 1 1\n''') == '33')\nassert(solution('''2\n11111\n9 8 7 6 5 4 3 2 1\n''') == '999999999')\nassert(solution('''2\n1 2 3 4 5 6 7 8 9\n''') == '123456789')\nassert(solution('''2\n1 2 3 4 5 6 7 8 9\n''') == '123456789')\nassert(solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = stdin.readline().strip().split()\n    # TODO: fix the input\n    b = ''\n    for i in range(n):\n        if f[i] == a[i]:\n            b += a[i]\n        else:\n            b += str(int(a[i]) ^ int(f[i]))\n    return b\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    fs = [int(s) for s in stdin.readline().strip()]\n    a = list(a)\n    for i in range(n):\n        x = a[i]\n        if x == '9':\n            a[i] = str(fs[9])\n        else:\n            a[i] = str(fs[int(x)])\n    return ''.join(a)\n\n\nassert solution('''4\n1337\n1 2 5 4 6 6 3 1 9\n''') == '1557'\nassert solution('''5\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999'\nassert solution('''2\n33\n1 1 1 1 1 1 1 1 1\n''') == '33'\n\nprint(solution('''3\n14\n6 7 3\n'''))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    a = stdin.splitlines()[1]\n    f = [int(x) for x in stdin.splitlines()[2]]\n    a = [int(x) for x in a]\n    print(a)\n    print(f)\n    print(list(itertools.accumulate(a)))\n    print(list(itertools.accumulate(a, func=max)))\n    print(list(itertools.accumulate(a, func=min)))"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin.strip())))"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum number you can get after applying the operation described in the statement no more than once.\n    \"\"\"\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    res = ''\n    for i in range(n):\n        d = f[i]\n        t = a[i]\n        while d > 0:\n            t = str(f[d % 10]) + t\n            d //= 10\n        res += t\n    return res\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin[:stdin.index(\"\\n\")]\n    num = [int(i) for i in stdin[stdin.index(\"\\n\") + 1 :]]\n    for i in range(len(num)):\n        num[i] = num[i] + 1\n    max_num = 0\n    for i in range(1, 10):\n        for j in range(i, len(num)):\n            test = number[:j]\n            for k in range(len(num) - j):\n                test += str(num[k + j])\n            if is_prime(int(test)):\n                max_num = int(test) if max_num < int(test) else max_num\n    return str(max_num)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    \n    # Calculate maximum possible number by performing one operation\n    # at a time\n    max_possible = 0\n    for i in range(1, 10):\n        max_possible = max(max_possible, int(str(i) * n) + a * f[i - 1])\n    return str(max_possible)\n\nimport sys"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b, c = [int(x) for x in stdin.split()]\n        if a > b:\n            a, b = b, a\n        if b % a == 0 and c % b == 0:\n            print(min(a, b, c))\n            print(a, b)\n        else:\n            print(2)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n\n    for i in range(a):\n        a, b, c = map(int, stdin.readline().strip().split())\n        if b % a == 0 and c % b == 0:\n            print(a, b, c)\n        else:\n            print(-1)\n\n    return ''"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(a: int, b: int) -> int:\n        \"\"\"\n        return the minimum number of operations to obtain $b$ from $a$\n        \"\"\"\n        if a == b:\n            return 0\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n\n        # Since we know that $b$ is divisible by $a$, we can divide $a$ by $b$ and do this repeatedly\n        # The last result is a valid triple\n        if a < b:\n            return calculate(a, a % b) + b\n        else:\n            return calculate(a, a % b) + a\n\n    res = []\n    for line in stdin:\n        a, b, c = [int(x) for x in line.split()]\n        res.append(calculate(a, b))\n\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        a, b, c = stdin.readline().split()\n        a, b, c = int(a), int(b), int(c)\n        res = abs(b - a) % c\n        if res!= 0:\n            print(res)\n            print(a, b, c)\n        else:\n            if b < a:\n                print(-1)\n                print(b, a, c)\n            else:\n                print(1)\n                print(a, b, c)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = [int(x) for x in stdin.readline().strip().split(\" \")]\n        x = (b - a) // (a - 1)\n        y = (c - b) // (b - 1)\n        if y % x == 0:\n            return str(x) + \" \" + str(y) + \" \" + str(b)\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n\nnum_cases = int(sys.stdin.readline())\n\nfor _ in range(num_cases):\n    a, b, c = [int(x) for x in sys.stdin.readline().split()]\n    div_by_a = b % a\n    div_by_b = c % b\n    if div_by_a == 0:\n        print(div_by_a)\n        print(a, b)\n    elif div_by_b == 0:\n        print(div_by_b)\n        print(b, c)\n    else:\n        print(div_by_b)\n        print(c, b)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(stdin.strip()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using the greedy algorithm, we can always add a 1 or a -1. So we take the highest possible number and then we add 1 and -1 to it to make the number divisible by the lowest number.\n    In this approach, we iterate over the divisors in reverse order and add 1 and -1 to the current number if the number is not divisible by the current divisor.\n    \"\"\"\n    # read in input\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c = [int(x) for x in stdin.readline().split(' ')]\n        print(b % a)\n    return ''\n\nassert(solution('''8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46''')) == '''1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48'''\n\nassert(solution('''\n1\n1 2 3\n1 2 1\n1 3 2\n1 2 2\n2 2 3\n1 2 2\n2 3 3\n1 1 1\n2 2 2\n1 2 1\n3 1 2\n1 1 1\n2 2 2\n1 1 1\n3 1 3\n1 1 1\n1 1 2\n1 1 1\n1 3 3\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1 3 1\n1"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    min_instability = 0\n    for i in range(n):\n        min_instability = max(min_instability, a[i] - min(a))\n    return str(min_instability)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split(' ')))\n    s = sum(l)\n    s1 = 0\n    s2 = 0\n    for i in l:\n        s1 += i\n        s2 += i * i\n    m = s2 - s1\n    if n == 1:\n        return 0\n    m = m / (n - 1)\n    m = math.sqrt(m)\n    return int(m)\n\nimport sys\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = list(map(int, stdin[2:].split(\" \")))\n    max_value = max(a)\n    min_value = min(a)\n    return \"0\" if (max_value - min_value) == 0 else str(max_value - min_value)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split(' ')))\n    min_instalability = None\n    for i in range(0, n - 1):\n        min_instalability = max(a[i], a[n - 1]) - min(a[i], a[n - 1])\n    print(min_instalability)\n    return ''\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n\nimport sys"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return stdin.readline()\n    numbers = [int(x) for x in stdin.readline().split()]\n    maximum_dif = -10**9\n    for i in range(n-1):\n        dif = abs(numbers[i] - numbers[i+1])\n        if maximum_dif < dif:\n            maximum_dif = dif\n    return str(maximum_dif)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    return str(min(a) - max(a))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split('\\n')[0]\n    n = int(n)\n    a = list(map(int, stdin.strip().split('\\n')[1].split(' ')))\n\n    min_value = a[0] - a[-1]\n    for i in range(1, n):\n        min_value = min(min_value, a[i] - a[-i - 1])\n\n    return min_value"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''5 2\n1 3 1\n1 5 1''') == '1 2 3 0 3')\nassert(solution('''3 2\n1 3 1\n1 2 1''') == '-1')\nassert(solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4')"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    days = [int(n) for n in stdin.split()]\n    preparations = [int(n) for n in stdin.split()]\n    day = 0\n    max_number_of_preparations = 0\n    while day < n:\n        for exam_number in range(1, m + 1):\n            if exam_number == 1:\n                day += 1\n            if day < days[exam_number - 1]:\n                if exam_number > 1:\n                    max_number_of_preparations = max(max_number_of_preparations, 1)\n                else:\n                    max_number_of_preparations = max(max_number_of_preparations, preparations[exam_number - 1])\n            elif day == days[exam_number - 1]:\n                if exam_number > 1:\n                    max_number_of_preparations += 1\n                else:\n                    max_number_of_preparations = max(max_number_of_preparations, preparations[exam_number - 1])\n        day += 1\n    if max_number_of_preparations < m + 1:\n        return str(-1)\n    preparations_indices = []\n    preparations_in_day = 0\n    for i in range(m):\n        if max_number_of_preparations < preparations[i]:\n            preparations_indices.append(-1)\n        else:\n            preparations_indices.append(preparations_in_day)\n            preparations_in_day += 1\n            max_number_of_preparations -= preparations[i]\n    preparations_indices.append(preparations_in_day)\n    return''.join([str(preparations_indices[i]) for i in range(m)])\n\nassert(solution('''5 2\n1 3 1\n1 5 1''') == '1 2 3 0 3'\nassert(solution('''3 2\n1 3 1\n1 2 1''') == '-1'\nassert(solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4'\n\n\n\nTest.describe(\"Basic tests\")\nTest.assert_equals(solution('''5 2\n1 3 1\n1 5 1'''), '1 2 3 0 3')\nTest.assert_equals(solution('''3 2\n1 3 1\n1 2 1'''), '-1')\nTest.assert_equals(solution('''10 3\n4 7 2\n1 10 3\n8 9 1'''), '2 2 2 1 1 0 4 3 4 4')\nTest.assert_equals(solution('''5 2\n5 3 2\n1 4 3\n1 4 1'''), '-1')\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_days, number_of_exams = map(int, stdin.split())\n    if number_of_exams > number_of_days:\n        return '-1'\n    schedule = [0] * number_of_days\n    for _ in range(number_of_exams):\n        day, exam_day, preparation_days = map(int, stdin.split())\n        schedule[day - 1] += (exam_day - 1) * preparation_days\n    for i in range(number_of_days):\n        if schedule[i] > 0:\n            return''.join(map(str, schedule[i:] + schedule[:i]))\n    return '-1'\n\nimport sys\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = (int(x) for x in stdin.split())\n    # exams = (int(x) for x in stdin.split())\n    # exams = sorted(exams)\n    # res = [-1 for _ in range(n + 1)]\n    # for i, e in enumerate(exams):\n    #     for j in range(e, n + 1):\n    #         res[j] = max(res[j], i + 1)\n    # return''.join(map(str, res[1:]))\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a = sorted(a)\n    res = [-1 for _ in range(n + 1)]\n    for i, e in enumerate(a):\n        for j in range(e, n + 1):\n            res[j] = max(res[j], i + 1)\n    return''.join(map(str, res[1:]))\n\na = [int(x) for x in stdin.split()]\na = sorted(a)\nres = [-1 for _ in range(len(a) + 1)]\nfor i, e in enumerate(a):\n    for j in range(e, len(a) + 1):\n        res[j] = max(res[j], i + 1)\nprint(res)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    exam_days = map(int, lines[1].split())\n    preparations = list(map(int, lines[2].split()))\n    exams = [set() for _ in range(m)]\n    for i in range(len(preparations)):\n        exams[preparations[i] - 1].add(i + 1)\n    for i in range(m):\n        exams[i] = sorted(list(exams[i]))\n    last = len(exams) + 1\n    result = [-1 for _ in range(n + 1)]\n    if not check(exam_days, preparations, exams):\n        return result\n    else:\n        result[0] = 0\n        for i in range(n):\n            p = i + 1\n            for j in range(last):\n                if (i + 1) in exam_days:\n                    if result[i + 1] == -1:\n                        result[i + 1] = j\n                else:\n                    if result[i + 1] == -1:\n                        result[i + 1] = j\n                    else:\n                        result[i + 1] = j + 1\n        for i in range(n):\n            print(result[i], end ='')\n        return result\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    data = stdin.strip()\n    data = [int(x) for x in data.split()]\n    \n    data = sorted(data)\n    \n    prepared = []\n    for i in range(m):\n        cur = data[0]\n        data.remove(cur)\n        for j in range(cur):\n            prepared.append(j+1)\n    \n    return''.join([str(x) for x in prepared])\n\nsolution('5 2')\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    s = [int(x) for x in stdin.split(\" \")]\n    d = [int(x) for x in stdin.split(\" \")]\n    s.sort()\n    d.sort()\n    passed = [0] * m\n    for i in range(m):\n        passed[i] = -1\n    for i in range(m):\n        for j in range(s[i], d[i]):\n            passed[i] = j\n    if all(passed[i] == -1 for i in range(m)):\n        return \"-1\"\n    for i in range(1, m + 1):\n        if passed[i - 1] == -1:\n            passed[i - 1] = i\n    return \" \".join(str(x) for x in passed)\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = [list(map(int, stdin.split())) for _ in range(m)]\n    for i, (s, d, c) in enumerate(exams, start=1):\n        if d < s:\n            print(-1)\n            return\n    P = [0] * (n + 1)\n    for s, d, c in exams:\n        for i in range(s, d):\n            P[i] += c\n    for i in range(1, n + 1):\n        if P[i] == 0:\n            print(i)\n            return\n    print(-1)\n    return"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdout.rstrip()"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m: return 0\n    while n!= m:\n        if m % n == 0:\n            m //= n\n        elif n % m == 0:\n            n //= m\n        else:\n            return -1\n    return m"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split input\n    n, m = [int(i) for i in stdin.strip().split(' ')]\n    # Create a 2D matrix to store the result\n    # Note: We know that the result is always a power of 2, so we can initialize\n    # the array with 1s.\n    steps = [([1] * (2 ** i)) for i in range(len(str(n)))]\n    # Start with the goal number\n    goal = n\n    # While the goal is not the target number\n    while goal!= m:\n        # Get the next step\n        next_step = steps[len(str(goal)) - 1]\n        # If it is a power of 2, it is the goal\n        if next_step[-1]:\n            return len(str(goal)) - 1\n        # Get the position of the zero in the last step\n        zero_pos = len(next_step) - 1 - next_step[::-1].index(0)\n        # If the zero is the leftmost,\n        # then we can multiply the last number by 2\n        if zero_pos == 0:\n            next_step[-1] = 2\n        # If the zero is the rightmost,\n        # then we can multiply the last number by 3\n        elif zero_pos == len(next_step) - 1:\n            next_step[zero_pos - 1] = 3\n        # Else we have to multiply it by 2 and by 3\n        else:\n            next_step[zero_pos - 1] = 3\n            next_step[zero_pos] = 2\n        # Update the steps\n        steps.append(next_step)\n        # Update the goal\n        goal = int(''.join(str(i) for i in next_step))\n    # If we have reached this point, the goal is the target number,\n    # thus we can return the number of moves.\n    return steps"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    # math here\n    return str(n-m)"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_super(stdin))\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if n == m:\n        return '0'\n    elif n > m:\n        return '-1'\n    else:\n        res = 0\n        while n!= m:\n            if n % 2 == 0:\n                n /= 2\n            elif n % 3 == 0:\n                n /= 3\n            res += 1\n        return str(res)\n\nassert(solution('''120 51840''') == '7')\nassert(solution('''42 42''') == '0')\nassert(solution('''48 72''') == '-1')\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return \"0\" if m == n else str(abs(m - n) // 2)\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a == b:\n        return \"0\"\n    elif a == 1:\n        return \"-1\"\n    else:\n        b -= a\n        c = (b - 1) // 3\n        if b == 3 * c * (c + 1):\n            return str(c)\n        else:\n            return \"-1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.rstrip()\n\n    # if there are less than k distinct substring of t\n    if n < k:\n        return t * k\n\n    # if there are exactly k distinct substring of t\n    if n == k:\n        return t\n\n    # if there are more than k distinct substring of t\n    for i in range(1, n - k + 1):\n        t = t[1:] + t[0]\n        if len(set(t)) == k:\n            return t\n\n    return t\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, k = map(int, stdin.split())\n    n = int(stdin)\n    t = stdin\n    \n    c = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        c[i] = c[i + 1] + (1 if t[i] == t[i + 1] else 0)\n        \n    l, r = 0, 0\n    while l <= n and r < n:\n        if c[r] - c[l] == k:\n            print(t[l : r + 1])\n            l += 1\n        elif c[r] - c[l] < k:\n            r += 1\n        else:\n            l += 1\n    return \"\""
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length, n = (int(x) for x in stdin.split())\n    t = stdin.strip()\n\n    count = 0\n    s = \"\"\n    for i in range(len(t) - n + 1):\n        s = t[i:i + n]\n        if s * (n // len(s)) == t:\n            count += 1\n    return s * (count)\n    # print(s)"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    t = stdin[0]\n    if n > k:\n        return t\n    for i in range(n):\n        s = t[i:]\n        s += s\n    return s\n\nprint(solution(input()))\n\n\"\"\"\n\n__author__ = 'https://github.com/vavouti'\n\nfrom functools import lru_cache\nfrom typing import Callable\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline().strip()\n    n, k = map(int, stdin.readline().strip().split())\n    chars = stdin.readline().strip()\n    return chars[:n-k] + ''.join(t[i] for i in range(n-k))\n\nassert solution('''aba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba\naba"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    t = stdin[:-1]\n    l = 0\n    r = n\n    s = []\n    for i in range(n):\n        s.append(t[i])\n        while len(s) > k:\n            s.pop(0)\n        if len(s) == k:\n            break\n\n    result = \"\"\n    for c in s:\n        result += c\n    return result"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: output\n    \"\"\"\n    n, k = tuple(map(int, stdin.split()))\n    t = stdin.strip()\n    s = ''\n\n    def helper(l, r, dp, k):\n        nonlocal s\n        if dp[l][r]:\n            return\n        if l == r:\n            s += t[l]\n            dp[l][r] = True\n            return\n\n        for i in range(l + 1, r):\n            if t[l:i] == t[i:r]:\n                s += t[l:i]\n                helper(l, i, dp, k)\n                helper(i, r, dp, k)\n                dp[l][r] = True\n                break\n\n    dp = [[False] * n for _ in range(n)]\n    helper(0, n - 1, dp, k)\n    return s\n\n\nassert(solution('aba') == 'ababababa')\nassert(solution('cat') == 'catcat')\nassert(solution('abcba') == 'ababababa')\nassert(solution('abcdabcd') == 'abcdabcdabcd')\nassert(solution('abcdefghi') == 'abcdefghijabcdefghi')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcd') == 'abcd')\nassert(solution('abcde') == 'abcde')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\nassert(solution('abcdefghijkl"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, k = (int(x) for x in stdin.split())\n    s = stdin[0]\n    while len(s) < k:\n        s += stdin[0]\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.splitlines()[1]\n    res = \"\"\n    for i in range(n-k+1):\n        res += t[i:i+k]\n        if not res:\n            break\n    print(res)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    sums = sum(a)\n    result = 0\n    for i in range(n):\n        if sums - a[i] >= 0:\n            sums -= a[i]\n            result += 1\n    if result == 0:\n        print(0)\n        print(\"\")\n    else:\n        print(result)\n        print(\" \".join(map(str, a[result:])))\n    return \"\""
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    res = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j:\n                a[i] -= a[j]\n                if a[i] >= 0:\n                    res += 1\n                    break\n    return str(res)\n\nprint(solution('''5\n2 5 1 2 2\n'''))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split()]\n    result = 0\n    for i in range(n):\n        temp = nums[:]\n        del temp[i]\n        if sum(temp) == sum(nums):\n            result += 1\n    return str(result)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    k = 0\n    for i in range(len(a)):\n        if sum(a) - a[i] < a[i]:\n            k += 1\n    print(k)\n    print(' '.join([str(x) for x in a if x!= a[i]]))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def is_good(arr):\n        if sum(arr) == 0:\n            return False\n        s = 0\n        for x in arr:\n            s += x\n            if s == 0:\n                return True\n        return False\n\n    res = 0\n\n    for i in range(n):\n        if is_good(a[:i] + a[i + 1:]):\n            res += 1\n    print(res)\n\n    if res == 0:\n        print(0)\n        return \"\"\n    res = set()\n    for i in range(n):\n        if is_good(a[:i] + a[i + 1:]):\n            res.add(i)\n    res = sorted(list(res))\n    print(*res)\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    good_indices = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] == sum(nums) - nums[j]:\n                good_indices.append(j)\n    if len(good_indices) == 0:\n        print(0)\n    else:\n        print(len(good_indices))\n        print(*good_indices)\n    return str()\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    result = -1\n    if k > n:\n        return str(result)\n    if k == 1:\n        return str(k)\n    if k == n:\n        return str(0)\n\n    # sort s\n    s = sorted(s)\n    cost = 0\n    left = 0\n    for i in range(1, n):\n        if s[i]!= s[i - 1]:\n            left = i\n            break\n    s = s[:left]\n\n    # 2-s algorithm\n    start = 0\n    end = left\n    while start < left and end < n:\n        cost += left - start\n        end += 1\n        while end < n and s[start] == s[end]:\n            end += 1\n        start += 1\n    cost += end - left\n    if end < n:\n        cost += n - end\n    return str(cost)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''solution\n\n    description\n\n    parameters\n    ----------\n    param1 : type\n        description\n    param2 : type\n        description\n\n    returns\n    -------\n    type\n        description\n    '''\n    return str(min_cost(stdin))\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.rstrip()\n    if k == len(s):\n        return \"0\"\n    if k > n:\n        return \"-1\"\n    seen = set()\n    min_cost = -1\n    for i in range(len(s) - k + 1):\n        seen.add(s[i: i + k])\n        if len(seen) == k:\n            min_cost = i\n            break\n    if min_cost == -1:\n        return \"-1\"\n    return str(min_cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n\n    def dfs(curr_cost, idx, s, k, res):\n        if curr_cost + len(s) - idx <= k:\n            res.add(s)\n        if len(s) == idx:\n            return\n\n        for i in range(idx, len(s)):\n            dfs(curr_cost + len(s) - i, i + 1, s[:i] + s[i + 1:], k, res)\n\n    res = set()\n    dfs(0, 0, s, k, res)\n\n    if len(res) < k:\n        return -1\n\n    return sum(len(x) for x in res)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n    \"\"\"\n    pass\n\nassert solution(stdin) == \"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    min_cost = float('inf')\n    for i in range(1, n + 1):\n        cost = n - i\n        for j in range(1, k + 1):\n            if i * j > n:\n                continue\n            subs = s[:i]\n            curr_cost = cost - i\n            for letter in subs:\n                curr_cost += 1\n            if curr_cost >= min_cost:\n                continue\n            if len(subs) == k:\n                min_cost = min(min_cost, curr_cost)\n    return str(min_cost)"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    ..."
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    l = len(s)\n    if n < k:\n        return -1\n    cost = 0\n    S = set()\n    for i in range(l):\n        if s[i] in S:\n            cost += 1\n            S.remove(s[i])\n        else:\n            S.add(s[i])\n        cost -= i\n    return cost"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    4 5\n    asdf\n\n    Output:\n    4\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if k > n:\n        return -1\n    s = stdin[len(stdin) - n:]\n    return len(s) * (n - len(s))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    for _ in range(k):\n        s = next_permutation(s)\n    return s\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    g = defaultdict(set)\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        g[v].add(u)\n        g[u].add(v)\n\n    #g = defaultdict(list)\n    #for _ in range(m):\n    #    v, u = map(int, stdin.split())\n    #    g[v].append(u)\n\n    def kd(start):\n        nonlocal g\n        if start in g:\n            return 0\n        visited = set()\n        def dfs(v):\n            nonlocal visited, g\n            if v in visited:\n                return 0\n            visited.add(v)\n            for u in g[v]:\n                dfs(u)\n            return 1\n        return dfs(start)\n\n    ans = []\n    for v in range(1, n):\n        d = d - kd(v)\n        if d == 0:\n            break\n    if d!= 0:\n        return \"NO\"\n    for v in range(1, n):\n        ans.append(v)\n    return \"YES\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    u = [int(x) for x in stdin.split()]\n    dic = {}\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split()]\n        if v not in dic:\n            dic[v] = [u]\n        else:\n            dic[v].append(u)\n        if u not in dic:\n            dic[u] = [v]\n        else:\n            dic[u].append(v)\n    a = [1]\n    visit = [0 for _ in range(n)]\n    while len(a)!= 0:\n        num = a.pop(0)\n        visit[num - 1] = 1\n        if num in dic:\n            for x in dic[num]:\n                if visit[x - 1] == 0:\n                    if x not in a:\n                        a.append(x)\n                    else:\n                        a.remove(x)\n    if len(a)!= n - 1:\n        return \"NO\"\n    for i in range(len(a)):\n        if u[i] not in dic[a[i]]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(s) for s in stdin.split()]\n    edges = [[int(s) for s in stdin.split()] for _ in range(m)]\n    start = 0\n    for _ in range(m):\n        if edges[start][0]!= edges[start][1]:\n            start += 1\n        else:\n            start += 2\n    if start >= m:\n        print(\"NO\")\n        return\n    if edges[start][0]!= edges[start][1]:\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n        edges = sorted(edges, key=lambda x: x[0])\n        print(n - 1)\n        for i in range(1, n):\n            print(edges[i][0], edges[i][1])\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = [int(i) for i in stdin.split()]\n        graph[v - 1].append(u - 1)\n        graph[u - 1].append(v - 1)\n    return \"YES\" if d is n - 1 else \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read number of vertices, edges and required degree\n    n, m, D = map(int, stdin.split())\n\n    # read edges as a list of tuples, where each tuple represents a vertex pair (vertex, neighbor)\n    edges = [tuple(map(int, e.split())) for e in stdin.readlines()]\n\n    # build graph from edges\n    graph = [[] for _ in range(n)]\n    for (v, u) in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n\n    # pick the starting vertex\n    start = 1\n\n    # build a dictionary of degrees\n    degrees = {v: 0 for v in range(n)}\n    for v in graph[start]:\n        degrees[v] += 1\n\n    # check if we can find a spanning tree with degree D\n    for v in degrees.keys():\n        if degrees[v] == D:\n            # no spanning tree possible\n            return \"NO\"\n\n    # find a spanning tree\n    tree = [start]\n    to_visit = graph[start]\n    while to_visit:\n        # pick a vertex with the smallest degree\n        smallest = min(to_visit, key=lambda v: degrees[v])\n        # add it to the tree\n        tree.append(smallest)\n        # remove it from the graph\n        to_visit.remove(smallest)\n        # update degrees\n        for v in graph[smallest]:\n            degrees[v] -= 1\n\n    # print the edges of the tree\n    return \"\\n\".join(\" \".join(map(str, e)) for e in edges if e in set(tree))"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split(' '))\n\n    graph = defaultdict(set)\n    for _ in range(m):\n        u, v = map(int, stdin.split(' '))\n        graph[u].add(v)\n        graph[v].add(u)\n\n    # the k-out of n can be used for the first vertex (with label 1)\n    for k in range(2, n + 1):\n        to_visit = set()\n        for vertex in range(1, n + 1):\n            if k == len(graph[vertex]):\n                to_visit.add(vertex)\n        if len(to_visit) == 0:\n            break\n\n        while len(to_visit) > 0:\n            vertex = to_visit.pop()\n            d = len(graph[vertex])\n            if d == k:\n                for v in graph[vertex]:\n                    graph[v].remove(vertex)\n                continue\n            elif d < k:\n                for v in graph[vertex]:\n                    graph[v].remove(vertex)\n                graph[vertex].add(k)\n                to_visit.add(k)\n\n    for vertex in range(1, n + 1):\n        if len(graph[vertex]) == d:\n            return 'YES'\n\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.strip().split()]\n    graph = [[] for i in range(n)]\n    for _ in range(m):\n        v, u = [int(i) - 1 for i in stdin.strip().split()]\n        graph[v].append(u)\n        graph[u].append(v)\n    return \"YES\" if spanning_tree(graph, n, d) else \"NO\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m, d = [int(i) for i in stdin[0].split()]\n    edges = [[int(i) for i in line.split()] for line in stdin[1:]]\n    n_edges = len(edges)\n    graph = {}\n    for edge in edges:\n        v = edge[0]\n        u = edge[1]\n        if v in graph:\n            graph[v].append(u)\n        else:\n            graph[v] = [u]\n        if u in graph:\n            graph[u].append(v)\n        else:\n            graph[u] = [v]\n    current_degree = 0\n    for v in graph:\n        current_degree += len(graph[v])\n    if current_degree == d and n_edges >= (n * (n - 1) / 2):\n        return 'YES'\n    elif current_degree == d + 1 and n_edges >= (n * (n - 1) / 2):\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = [int(x) for x in stdin.split()]\n    return \"%02d:%02d\" % (\n        (h2 * 60 + m2) // 2 + h1 * 60 + m1,\n        (h2 * 60 + m2) // 2,\n    )"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get the hour and minutes of the contest\n    start, end = map(int, stdin.split())\n    start = start % 2 == 0\n    end = end % 2 == 0\n    if start ^ end:\n        end = True\n    # calculate the midpoint\n    midpoint = start and (end and end - 1) or (end and end) or end - 1\n    # return the formatted output\n    return \"{0:02d}:{1:02d}\".format(*divmod(midpoint * 60, 60))\n\n\nassert(solution(input()) == \"10:30\")\nassert(solution(input()) == \"11:11\")\nassert(solution(input()) == \"02:02\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the time of the contest midpoint rounded to the nearest minute.\n\n    [h_1, m_1], [h_2, m_2] = [hh:mm]\n    \"\"\"\n    h_1, m_1 = map(int, stdin.split(\" \"))\n    h_2, m_2 = map(int, stdin.split(\" \"))\n\n    if m_1 % 2 == 1:\n        h_1 += 1\n    if m_2 % 2 == 1:\n        h_2 += 1\n\n    return f\"{h_1:02d}:{m_1:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    h1, m1 = stdin[0].split(':')\n    h2, m2 = stdin[1].split(':')\n\n    h1 = int(h1)\n    h2 = int(h2)\n\n    m1 = int(m1)\n    m2 = int(m2)\n\n    mid_h = (h1 + h2) // 2\n\n    mid_m = (m1 + m2) // 2\n\n    return \"{0:02d}:{1:02d}\".format(mid_h, mid_m)\n\nassert (solution(\n'''10:00\n11:00''')) == '10:30'\n\nassert (solution(\n'''11:10\n11:12''')) == '11:11'\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\"\nassert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\""
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(\":\"))\n    h2, m2 = map(int, stdin.strip().split(\":\"))\n    if (h1 + m1) % 2 == 0 and (h2 + m2) % 2 == 0:\n        return \"{}:{}\".format((h1 + h2) // 2, (m1 + m2) // 2)\n    elif (h1 + m1) % 2!= 0 and (h2 + m2) % 2!= 0:\n        return \"{}:{}\".format((h1 + h2 + 1) // 2, (m1 + m2 + 1) // 2)\n    elif (h1 + m1) % 2 == 0 and (h2 + m2) % 2!= 0:\n        return \"{}:{}\".format((h1 + h2 + 1) // 2, (m1 + m2 + 1) // 2)\n    else:\n        return \"{}:{}\".format((h1 + h2) // 2, (m1 + m2 + 1) // 2)\n\nimport sys"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.strip().split()))\n    print(*divmod(data[1] * 60 + data[0], 60), sep=':')"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(' '))\n    h2, m2 = map(int, stdin.strip().split(' '))\n    h3 = (h2 + h1) // 2\n    m3 = (m1 + m2) // 2\n    h3 = '{:02}'.format(h3)\n    m3 = '{:02}'.format(m3)\n    return f'{h3}:{m3}'\n\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '11:00')\nassert(solution('01:02') == '02:02')\nassert(solution('03:02') == '02:02')\nassert(solution('10:32') == '10:02')\nassert(solution('11:32') == '11:02')\nassert(solution('18:32') == '20:00')\nassert(solution('18:42') == '18:42')\nassert(solution('18:46') == '18:42')\nassert(solution('18:50') == '18:43')\nassert(solution('18:52') == '18:43')\nassert(solution('18:54') == '18:44')\nassert(solution('18:56') == '18:44')\nassert(solution('18:58') == '18:45')\nassert(solution('18:60') == '18:45')\nassert(solution('18:62') == '18:46')\nassert(solution('18:64') == '18:46')\nassert(solution('18:66') == '18:46')\nassert(solution('18:68') == '18:46')\nassert(solution('18:70') == '18:47')\nassert(solution('18:72') == '18:47')\nassert(solution('18:74') == '18:47')\nassert(solution('18:76') == '18:47')\nassert(solution('18:78') == '18:47')\nassert(solution('18:80') == '18:47')\nassert(solution('18:82') == '18:47')\nassert(solution('18:84') == '18:47')\nassert(solution('18:86') == '18:47')\nassert(solution('18:88') == '18:47')\nassert(solution('18:90') == '18:47')\nassert(solution('18:92') == '18:47')\nassert(solution('18:94') == '18:47')\nassert(solution('18:96') == '18:47')\nassert(solution('18:98') == '18:47')\nassert(solution('18:100') == '18:47')\nassert(solution('18:102') == '18:47')\nassert(solution('18:104') == '18:47')\nassert(solution('18:106') == '18:47')\nassert(solution('18:108') == '18:47')\nassert(solution('18:110') == '18:47')\nassert(solution('18:112') == '18:47')\nassert(solution('18:114') == '18:47')\nassert(solution('18:116') == '18:47')\nassert(solution('18:118') == '18:47')\nassert(solution('18:120') == '18:47')\nassert(solution('18:122') == '18:47')\nassert(solution('18:124') == '18:47')\nassert(solution('18:126') == '18:47')\nassert(solution('18:128') == '18:47')\nassert(solution('18:130') == '18:47')\nassert(solution('18:132') == '18:47')\nassert(solution('18:134') == '18:47')\nassert(solution('18:136') == '18:47')\nassert(solution('18:138') == '18:47')\nassert(solution('18:140') == '18:47')\nassert(solution('18:142') == '18:47')\nassert(solution('18:144') == '18:47')\nassert(solution('18:146') == '18:47')\nassert(solution('18:148') == '18:47')\nassert(solution('18:150') == '18:47')\nassert(solution('18:152') == '18:47')\nassert(solution('18:154') == '18:47')\nassert(solution('18:156') == '18:47')\nassert(solution('18:158') == '18:47')\nassert(solution('18:160') == '18:47')\nassert(solution('18:162') == '18:47')\nassert(solution('18:164') == '18:47')\nassert(solution('18:166') == '18:47')\nassert(solution('18:168') == '18:47')\nassert(solution('18:170') == '18:47')\nassert(solution('18:172') == '18:47')\nassert(solution('18:174') == '18:47')\nassert(solution('18:176') == '18:47')\nassert(solution('18:178') == '18:47')\nassert(solution('18:180') == '18:47')\nassert(solution('18:182') == '18:47')\nassert(solution('18:184') == '18:47')\nassert(solution('18:186') == '18:47')\nassert(solution('18:188') == '18:47')\nassert(solution('18:190') == '18:47')\nassert(solution('18:192') == '18:47')\nassert(solution('18:194') == '18:47')\nassert(solution('18:196') == '18:47')\nassert(solution('18:198') == '18:47')\nassert(solution('18:200') == '18:47')\nassert(solution('18:202') == '18:47')\nassert(solution('18:204') == '18:47')\nassert(solution('18:206') == '18:47')\nassert("
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    factors = getFactors(a)\n    print(len(factors))\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a % 2)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    a = int(stdin)\n    if a == 1:\n        return 1\n    elif a == 2:\n        return 2\n    elif a == 3:\n        return 4\n    elif a == 4:\n        return 7\n    elif a == 5:\n        return 11\n    elif a == 6:\n        return 19\n    elif a == 7:\n        return 37\n    elif a == 8:\n        return 59\n    elif a == 9:\n        return 79\n    elif a == 10:\n        return 97\n    elif a == 11:\n        return 109\n    elif a == 12:\n        return 121\n    elif a == 13:\n        return 131\n    elif a == 14:\n        return 143\n    elif a == 15:\n        return 155\n    elif a == 16:\n        return 167\n    elif a == 17:\n        return 179\n    elif a == 18:\n        return 193\n    elif a == 19:\n        return 209\n    elif a == 20:\n        return 223\n    elif a == 21:\n        return 227\n    elif a == 22:\n        return 233\n    elif a == 23:\n        return 239\n    elif a == 24:\n        return 247\n    elif a == 25:\n        return 251\n    elif a == 26:\n        return 257\n    elif a == 27:\n        return 263\n    elif a == 28:\n        return 269\n    elif a == 29:\n        return 271\n    elif a == 30:\n        return 277\n    elif a == 31:\n        return 281\n    elif a == 32:\n        return 283\n    elif a == 33:\n        return 293\n    elif a == 34:\n        return 307\n    elif a == 35:\n        return 311\n    elif a == 36:\n        return 313\n    elif a == 37:\n        return 317\n    elif a == 38:\n        return 319\n    elif a == 39:\n        return 331\n    elif a == 40:\n        return 337\n    elif a == 41:\n        return 347\n    elif a == 42:\n        return 353\n    elif a == 43:\n        return 359\n    elif a == 44:\n        return 367\n    elif a == 45:\n        return 373\n    elif a == 46:\n        return 379\n    elif a == 47:\n        return 383\n    elif a == 48:\n        return 389\n    elif a == 49:\n        return 397\n    elif a == 50:\n        return 401\n    elif a == 51:\n        return 409\n    elif a == 52:\n        return 419\n    elif a == 53:\n        return 431\n    elif a == 54:\n        return 433\n    elif a == 55:\n        return 439\n    elif a == 56:\n        return 443\n    elif a == 57:\n        return 449\n    elif a == 58:\n        return 457\n    elif a == 59:\n        return 461\n    elif a == 60:\n        return 467\n    elif a == 61:\n        return 479\n    elif a == 62:\n        return 487\n    elif a == 63:\n        return 491\n    elif a == 64:\n        return 497\n\n\nprint(solution(\"2\"))\nprint(solution(\"4\"))\nprint(solution(\"27\"))\nprint(solution(\"42\"))\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the next number in the series for the given a.\n\n    >>> solution('2')\n    '1'\n    >>> solution('27')\n    '5'\n    >>> solution('42')\n    '6'\n    '''\n    return str(int(stdin) + int(stdin[-1]) + int(stdin[-2]) + int(stdin[-3]))"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    return str(a // 3)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(bin(a).count('1'))"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    return str(len(str(a)))"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a - a % 3)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a*(a+1)//2)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.readline().strip().split()]\n        segments.append((l, r))\n    segments.sort(key=lambda s: s[0])\n    best = 0\n    for i in range(n - 1):\n        l, r = segments[i]\n        for j in range(i + 1, n):\n            l2, r2 = segments[j]\n            if l2 <= r and l <= r2:\n                best = max(best, r2 - l + 1)\n    return str(best)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    segments.sort(key=lambda s: s[1])\n    intersections = [0] * (N + 1)\n    for i, s1 in enumerate(segments):\n        if i == 0:\n            intersections[i + 1] = s1[1]\n            continue\n        intersections[i + 1] = max(intersections[i], s1[0])\n\n    min_intersections = N - 1\n    for i in range(N):\n        curr = intersections[i]\n        for j in range(i + 1, N + 1):\n            if intersections[j] < curr + 1:\n                break\n            curr = intersections[j]\n        min_intersections = min(min_intersections, j - i)\n\n    return str(min_intersections)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [tuple(map(int, stdin.split(' '))) for _ in range(n)]\n    intersections = [intersection(x[1], x[2], y[1], y[2]) for x, y in zip(segments, segments[1:])]\n    return max(intersections, default=0)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    points = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n\n    result = 0\n    for i in range(n - 1):\n        if points[i][1] > points[i + 1][0]:\n            result = max(result, points[i][1] - points[i + 1][0])\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    segments.sort()\n    max_length = 0\n    for i, segment in enumerate(segments):\n        if i == 0:\n            max_length = max(max_length, segment[1] - segment[0])\n        else:\n            intersection = segment[1] - segment[0]\n            if i > 0:\n                for other_segment in segments[:i]:\n                    other_intersection = other_segment[1] - other_segment[0]\n                    if intersection == other_intersection:\n                        max_length = max(max_length, intersection)\n                        break\n            else:\n                max_length = max(max_length, intersection)\n    return str(max_length)\n\nassert(solution('''4\n1 3\n2 6\n0 4\n3 3\n''') == '1')\nassert(solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2')\nassert(solution('''3\n4 5\n1 2\n9 20\n''') == '0')\nassert(solution('''2\n3 10\n1 5\n''') == '7')\nassert(solution('''2\n3 10\n1 5\n2 6\n''') == '4')\nassert(solution('''3\n3 10\n1 5\n2 6\n3 3\n''') == '1')\nassert(solution('''2\n2 6\n1 3\n0 4\n1 20\n0 4\n''') == '2')\nassert(solution('''2\n3 10\n1 5\n2 6\n3 3\n1 10\n0 4\n''') == '0')\nassert(solution('''2\n3 10\n1 5\n2 6\n3 3\n1 10\n0 4\n1 10\n0 4\n''') == '2')\n\n'''\n    if len(segments) == 1:\n        return '0'\n    else:\n        segments.sort(key = lambda segment: segment[0])\n        segments = list(reversed(segments))\n        max_length = 0\n        for i in range(len(segments)):\n            intersection = segments[i][1] - segments[i][0]\n            if i > 0:\n                for j in range(i):\n                    if intersection == segments[j][1] - segments[j][0]:\n                        if segments[j][0] >= segments[i][0]:\n                            max_length = max(max_length, intersection)\n                            break\n            else:\n                max_length = max(max_length, intersection)\n        return str(max_length)\n'''"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.readline().split()]\n        segments.append((l, r))\n    \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            s1, s2 = segments[i], segments[j]\n            intersection = segments[i][0] if s1[1] < s2[0] < s1[1] else segments[j][0]\n            if intersection < s1[1]:\n                intersection = s2[0]\n            if intersection < s2[1]:\n                intersection = s1[1]\n            length = abs(s1[1] - intersection) + abs(s2[1] - intersection)\n            if length > 1:\n                length = 1\n            if length > 0:\n                return str(length)\n    return str(0)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    assert 2 <= n <= 3 * (10 ** 5)\n\n    segments = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        segments.append((x, y))\n\n    # sort segments by x-coordinate\n    segments.sort()\n    assert len(segments) == n\n\n    # length of the longest common substring\n    longest_common_substring = 0\n\n    # upper bound on the length of the intersection\n    intersection_length = 0\n\n    # loop over segments\n    for i, (x1, y1) in enumerate(segments):\n        # loop over segments to the right of the current segment\n        for j, (x2, y2) in enumerate(segments[i + 1 :]):\n            # calculate the length of the intersection\n            intersection_length = max(intersection_length,\n                                      bisect_right(range(x1, y1), range(x2, y2)) - i - 1)\n\n        # update the longest common substring\n        longest_common_substring = max(longest_common_substring,\n                                       intersection_length)\n\n    # return the length of the intersection or 0 if the intersection is empty\n    return str(longest_common_substring)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [list(map(int, line.split(' '))) for line in stdin.strip().split('\\n')]\n    segments = sorted(segments, key=lambda s: s[0] + s[1])\n    endpoints = set()\n    length = 0\n    for start, end in segments:\n        if start not in endpoints:\n            endpoints.add(start)\n            length += end - start + 1\n        if end not in endpoints:\n            endpoints.add(end)\n            length += end - end + 1\n    return str(length - 1)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return 0\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments = sorted(segments, key=lambda s: s[0])\n    max_len = 0\n    for i in range(1, n):\n        if segments[i][0] < segments[i - 1][1]:\n            max_len += segments[i - 1][1] - segments[i][0]\n    return max_len\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    print('YES' if a[-1] == a[-2] == a[-3] else 'NO')\nsolution(stdin.read())\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = stdin.readline().strip().split()\n    a = [int(x) for x in a]\n    if len(a) < 2:\n        return \"NO\"\n\n    last = a[-1]\n    m = len(a)\n    if m % 2!= 0:\n        return \"NO\"\n    else:\n        h = [0] * m\n        for i in range(m):\n            if i % 2 == 0:\n                h[i] = max(last - a[i], 0)\n            else:\n                h[i] = a[i]\n\n        h[0] = max(h[0] - a[0], 0)\n        h[-1] = max(h[-1] - a[-1], 0)\n        for i in range(1, m-1):\n            h[i] = max(h[i] - a[i], 0)\n\n        if h == a:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = [int(stdin) for _ in range(n)]\n    left_max = 0\n    right_max = 0\n    left_heights = [0 for _ in range(n)]\n    right_heights = [0 for _ in range(n)]\n    for i in range(n):\n        left_max = max(left_max, heights[i])\n        left_heights[i] = left_max\n        right_max = max(right_max, heights[n-1-i])\n        right_heights[n-1-i] = right_max\n    for i in range(n):\n        if left_heights[i] == right_heights[i]:\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(n) for n in stdin.split()]\n    if n == 1:\n        return 'YES'\n    if a[0]!= a[1]:\n        return 'NO'\n    for i in range(1, n-1):\n        if a[i]!= a[i-1] and a[i]!= a[i+1]:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    parts = [int(x) for x in stdin.readline().strip().split()]\n\n    # max height of wall\n    max_height = max(parts)\n    if parts == sorted(parts):\n        return \"YES\"\n    for i in range(1, max_height):\n        for j in range(n):\n            if parts[j] == i:\n                if (j == 0 or parts[j - 1] == i) and (j == n - 1 or parts[j + 1] == i):\n                    continue\n                elif parts[j]!= i and parts[j + 1]!= i and parts[j - 1]!= i:\n                    return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_parts = int(stdin)\n    initial_heights = [int(stdin) for _ in range(number_of_parts)]\n    \n    for i in range(number_of_parts):\n        if i == 0:\n            current_height = initial_heights[i]\n        elif current_height!= initial_heights[i]:\n            return \"NO\"\n        \n    return \"YES\"\n\n\nimport sys\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    cnt = 0\n    for i in range(len(a)):\n        if a[i] == a[i+1]:\n            cnt += 1\n        else:\n            cnt = 0\n        if cnt == 2:\n            return \"NO\"\n    return \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    # print(n)\n    h = list(map(int, stdin.readline().strip().split()))\n    # print(h)\n    if n == 1:\n        return \"YES\"\n    elif n == 2:\n        return \"YES\" if h[0] == h[1] else \"NO\"\n    elif n == 3:\n        return \"YES\" if h[0] == h[2] else \"NO\"\n    elif n == 4:\n        return \"YES\" if h[0] == h[3] else \"NO\"\n    else:\n        m = max(h)\n        if m % 2!= 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    if n == 1:\n        return 'NO'\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] == prev:\n            return 'NO'\n        else:\n            prev = a[i]\n    return 'YES'"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[0:n]\n    if len(set(s)) < k:\n        return -1\n    res = 0\n    for i in range(n - k + 1):\n        res += (n - i - 1)\n    return res"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100\", 100))\n\n'''\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.rstrip()\n    if k == len(s):\n        return '0'\n    if n - k == len(s):\n        return '-1'\n    ans = 0\n    for i in range(1, len(s)):\n        ans += i - len(s[:i])\n    return str(ans)\n\nassert(solution('4 5\\nasdf') == '4')\nassert(solution('5 6\\naaaihda') == '15')\nassert(solution('5 7\\naaaihda') == '-1')\nassert(solution('10 100\\naaaihda') == '233')\nassert(solution('1 1\\n') == '1')\nassert(solution('1 3\\n') == '-1')\nassert(solution('0 0\\n') == '0')\nassert(solution('0 1\\n') == '-1')\nassert(solution('0 2\\n') == '-1')\nassert(solution('0 3\\n') == '-1')\nassert(solution('1 4\\n') == '4')\nassert(solution('1 5\\n') == '-1')\nassert(solution('1 6\\n') == '-1')\nassert(solution('1 7\\n') == '-1')\nassert(solution('1 8\\n') == '-1')\nassert(solution('1 9\\n') == '-1')\nassert(solution('2 10\\nasdf\\nasdfasdasd') == '0')\nassert(solution('1 11\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('0 12\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 13\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 14\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 15\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('2 16\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 17\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 18\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 19\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 20\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 21\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 22\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 23\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 24\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 25\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 26\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 27\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 28\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 29\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 30\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 31\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 32\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 33\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 34\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 35\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 36\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 37\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 38\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 39\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 40\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 41\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 42\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 43\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 44\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 45\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 46\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 47\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 48\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 49\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 50\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 51\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 52\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 53\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 54\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 55\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 56\\nasdf\\nasdfasdasd') == '-1')\nassert(solution('1 57\\nasdf\\nasdfasdasd') == '-1')\nassert(s"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k == 0:\n        return \"0\"\n    if k == 1:\n        return str(min(n, 1))\n\n    s = stdin.strip()\n    cost = 0\n    for i in range(1, n):\n        cost += i\n        if i > 1:\n            cost += (n - i - 1) * (i - 1) // 2\n    if cost > k:\n        return \"-1\"\n    return str(cost)"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = -1\n    stdin = stdin.strip()\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[len(stdin) - n:]\n    cost = 0\n    for i in range(n):\n        if s[i]!= s[n - 1 - i]:\n            cost += 1\n    if k > n - 1:\n        return -1\n    if cost > k - 1:\n        return -1\n    if cost == k - 1:\n        return cost\n    for i in range(k - 1):\n        if s[i]!= s[k - 1 - i]:\n            cost += 1\n    return cost\n\nassert solution(\"4 5\") == 4\nassert solution(\"5 6\") == -1\nassert solution(\"5 7\") == -1\nassert solution(\"10 100\") == 233\n\nassert solution(\"ajihiushda\") == 15\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\nassert solution(\"aaaaa\") == 0\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split(' ')]\n    s = stdin.strip()\n\n    d = {s[:i]:0 for i in range(len(s)+1)}\n    d[s] = 0\n\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            sub = s[i:j]\n            if d.get(sub, -1) == -1:\n                d[sub] = len(sub)\n            else:\n                d[sub] = min(d[sub], len(sub))\n\n    if k > len(d):\n        return '-1'\n\n    cost = 0\n    for key in d:\n        cost += d[key]\n\n    return str(cost)\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    s = stdin.strip()\n    solution = [-1]\n\n    for i in range(len(s)):\n        if len(solution) == k:\n            break\n\n        t = s[i:i+n]\n        if len(t)!= n:\n            continue\n\n        solution.append(t)\n\n    return str(sum(solution))\n\nassert(solution('''4 5\nasdf''') == '4')\nassert(solution('''5 6\naaaaa''') == '15')\nassert(solution('''10 100\najihiushda''') == '233')\nassert(solution('''10 100\najihiushda''') == '233')\nassert(solution('''8 10\nxwelsmgk''') == '13')\nassert(solution('''5 3\nbdpzkpbqkg''') == '15')\nassert(solution('''10 15\nhvfnuwctgvmepjvhkfn''') == '26')\nassert(solution('''5 7\nhgvfzjhvfzvfgvfzvf''') == '17')\nassert(solution('''9 10\nvhqcxjbkgbrxqxkcx''') == '9')\nassert(solution('''5 4\ncjrqztqkue''') == '4')\nassert(solution('''5 10\nkfhvzgfadlozfizbq''') == '2')\nassert(solution('''7 10\najdfkzjpfbsa''') == '4')\nassert(solution('''5 5\nlzjybqzwjhqhqbz''') == '5')\nassert(solution('''3 3\naab''') == '1')\nassert(solution('''3 3\nbaa''') == '0')\nassert(solution('''10 10\naaaaa''') == '0')\nassert(solution('''3 3\nbbb''') == '1')\nassert(solution('''5 7\nahdjshuii''') == '15')\nassert(solution('''3 3\nfkpqwqjb''') == '1')\nassert(solution('''10 10\nffvkpvhkhsdfsdf''') == '0')\nassert(solution('''10 10\nkweqbgvfvqnaj''') == '0')\nassert(solution('''5 7\nkzwcafzgqnfhg''') == '8')\nassert(solution('''10 10\nakqgvyuvqwru''') == '0')\nassert(solution('''6 6\nqqqqqqqqqqq''') == '0')\nassert(solution('''5 7\nbeqbrnkqe''') == '6')\nassert(solution('''10 10\nljxkvgizgxzvxlzf''') == '0')\nassert(solution('''10 10\nzjkpfvzrkzkpfzkf''') == '0')\nassert(solution('''5 7\ngvfkzfkqjzkf''') == '7')\nassert(solution('''7 7\nayimqwsxftg''') == '5')\nassert(solution('''10 10\nxwelsmgk''') == '4')\nassert(solution('''10 10\nxwelsmgk''') == '4')\nassert(solution('''5 7\nhvfnuwctgvmepjvhkfn''') == '13')\nassert(solution('''10 15\nhgvfzjhvfzvfgvfzvf''') == '26')\nassert(solution('''5 4\ncjrqztqkue''') == '5')\nassert(solution('''5 6\nbdpzkpbqkg''') == '15')\nassert(solution('''10 15\nhgvfzjhvfzvfgvfzvf''') == '26')\nassert(solution('''5 7\nhgvfzjhvfzvfgvfzvf''') == '26')\nassert(solution('''5 7\nhgvfzjhvfzvfgvfzvf''') == '26')\nassert(solution('''9 10\nvhqcxjbkgbrxqxkcx''') == '9')\nassert(solution('''5 3\nbdpzkpbqkg''') == '15')\nassert(solution('''5 3\nbdpzkpbqkg''') == '15')\nassert(solution('''3 3\naab''') == '1')\nassert(solution('''3 3\nbaa''') == '0')\nassert(solution('''10 10\naaaaa''') == '0')\nassert(solution('''3 3\nbbb''') == '1')\nassert(solution('''5 7\nahdjshuii''') == '15')\nassert(solution('''3 3\nfkpqwqjb''') == '1')\nassert(solution('''10 10\nffvkpvhkhsdfsdf''') == '0')\nassert(solution('''10 10\nkweqbgvfvqnaj''') == '0')\nassert(solution('''5 7\nkzwcafzgqnfhg''') == '8')\nassert(solution('''3 3\nkzwcafzgqnfhg''') == '8')\nassert(solution('''10 10\nakqgvyuvqwru''') == '0')\nassert(solution('''6 6\nqqqqqqqqqqq''') == '0')\nassert(solution('''5 7\nbeqbrnkqe''') == '6')\nassert(solution('''10 10\nljxkvgizgxzvxlz"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.strip()\n    if n < k:\n        return '-1'\n\n    result = 0\n\n    for i in range(n - k + 1):\n        cost = 0\n        for j in range(k):\n            if s[i + j]!= s[i]:\n                cost += 1\n\n        result = min(cost, result)\n\n    return str(result)"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    if k > len(s):\n        return -1\n    cache = {}\n    n = 0\n    cost = 0\n    for c in s:\n        cost += 1\n        n += 1\n        if n in cache:\n            if cost > cache[n]:\n                cache[n] = cost\n        else:\n            cache[n] = cost\n    return cache[k]"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Polycarps plans to go on a trip and already packed his backpack. His backpack contains:\n    $a$ daily rations of fish food;\n    $b$ daily rations of rabbit stew;\n    $c$ daily rations of chicken stakes.\n    '''\n    a, b, c = [int(s) for s in stdin.strip().split()]\n    days = [0, 1, 2, 3, 4, 5, 6]\n    week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    for i in range(7):\n        if a >= b and a >= c:\n            days[i] = i\n        elif b >= a and b >= c:\n            days[i] = i\n        elif c >= a and c >= b:\n            days[i] = i\n    return week[days[0]] + ','+ week[days[1]] + ','+ week[days[2]]\n\n\n\nassert(solution(input()) == 'Sunday, Monday, Tuesday')\nassert(solution(input()) == 'Wednesday, Thursday, Friday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday')\nassert(solution(input()) == 'Saturday, Sunday, Monday"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n > m or n > k:\n        print(m)\n    elif n == m and n == k:\n        print(m * 3)\n    elif m == k:\n        print(m + n * 2)\n    else:\n        print(m + n * 2 - 1)"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split()\n    return days\n\nprint(solution(\"3 2 2\"))\n\n\n'''\n\ndays = [int(d) for d in stdin.split()]\na, b, c = days\n\nf, r, c = a // 7, b // 7, c // 7\n\nprint(7 * f + f + 6 * r + r + 7 * c + c + 6 * f + f)\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '8'\n\n\n\"\"\"\n\nfrom functools import lru_cache\nimport itertools\nimport sys\nsys.setrecursionlimit(15000)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    m, n, k = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    if m + n + k == 0 or m > 7 * 10**8 or n > 7 * 10**8 or k > 7 * 10**8:\n        return '0'\n    elif m == n == k:\n        return '3'\n    elif m == n or m == k or n == k:\n        return '2'\n    elif m >= 3*n and m >= n + k:\n        return '2'\n    elif n >= 3*m and n >= m + k:\n        return '2'\n    elif k >= 3*m and k >= m + n:\n        return '2'\n    else:\n        return '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split(' ')\n\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n\n    fish = 1\n    rabbit = 1\n    chicken = 1\n\n    day = 0\n\n    while True:\n        day += 1\n\n        if day == 1:\n            fish = a\n            rabbit = b\n            chicken = c\n\n        if day == 4:\n            fish = a - 1\n            rabbit = b - 1\n            chicken = c - 1\n\n        if day == 7:\n            fish = a - 2\n            rabbit = b - 2\n            chicken = c - 2\n\n        if day == 10:\n            fish = a - 3\n            rabbit = b - 3\n            chicken = c - 3\n\n        if day == 13:\n            fish = a - 4\n            rabbit = b - 4\n            chicken = c - 4\n\n        if fish < 0 or rabbit < 0 or chicken < 0:\n            break\n\n        fish = fish - 1\n        rabbit = rabbit - 1\n        chicken = chicken - 1\n\n    return str(day)\n\nassert(solution(\"1 2 1\") == \"4\")\nassert(solution(\"3 2 2\") == \"7\")\nassert(solution(\"30 20 10\") == \"39\")\nassert(solution(\"2 1 1\") == \"4\")\nassert(solution(\"3 2 2\") == \"7\")\nassert(solution(\"2 3 2\") == \"8\")\nassert(solution(\"5 2 1\") == \"2\")\nassert(solution(\"2 2 2\") == \"5\")\nassert(solution(\"3 3 3\") == \"8\")\nassert(solution(\"5 3 2\") == \"4\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 4 1\") == \"5\")\nassert(solution(\"2 4 1\") == \"6\")\nassert(solution(\"7 4 1\") == \"3\")\nassert(solution(\"1 4 1\") == \"7\")\nassert(solution(\"4 1 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"5 4 1\") == \"6\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"3 2 1\") == \"4\")\nassert(solution(\"4 2 1\") == \"5\")\nassert(solution(\"4 1 1\") == \"7\")\nassert(solution(\"1 1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"2"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    tiles = [int(x) for x in stdin.split()]\n    \n    s = [[0] * m for _ in range(m)]\n    \n    for i in range(n):\n        s[i // 2][i % 2] = tiles[i]\n        s[i % 2][i // 2] = tiles[i]\n        \n    result = \"YES\"\n    \n    for i in range(m):\n        for j in range(m):\n            if s[i][j]!= s[j][i]:\n                result = \"NO\"\n    \n    return result"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nYou are given a description of the tiles of each type, each line describes the tile of one type.\n\nThe first line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\n\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    \n    lines = stdin.splitlines()\n    t = int(lines[0])\n    \n    for i in range(1, t+1):\n        n, m = list(map(int, lines[i].split()))\n        tiles = []\n        \n        for j in range(n*2):\n            tiles.append(list(map(int, lines[i+j+1].split())))\n        \n        m, n = len(tiles), len(tiles[0])\n        \n        start = [0] * (m+1)\n        end = [0] * (m+1)\n        \n        for j in range(n):\n            start[j] = min(start[j], min(tiles[i][j], tiles[i+n][j]))\n            end[j] = max(end[j], max(tiles[i][j], tiles[i+n][j]))\n        \n        for j in range(n):\n            start[j+n] = min(start[j+n], min(tiles[i][j], tiles[i+n][j]))\n            end[j+n] = max(end[j+n], max(tiles[i][j], tiles[i+n][j]))\n            \n        for j in range(n):\n            for k in range(n):\n                if start[j] < start[k] and end[j] < end[k]:\n                    start[j+n] = min(start[j+n], start[k])\n                    end[j+n] = max(end[j+n], end[k])\n                    \n        for j in range(n):\n            for k in range(n):\n                if start[j] < start[k] and end[j] < end[k]:\n                    start[j+n] = min(start[j+n], start[k])\n                    end[j+n] = max(end[j+n], end[k])\n                    \n        for j in range(n):\n            if start[j] >= start[j+n] and end[j] >= end[j+n]:\n                print(\"YES\")\n                return\n        \n        print(\"NO\")\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, s = [int(x) for x in stdin.split()]\n    d = {}\n    for i in range(t):\n        d[i+1] = [int(x) for x in stdin.split()[1:3]]\n    if not is_symmetric(d, s):\n        return \"NO\"\n    return \"YES\"\n\n\n\n### Test case 1\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    from itertools import zip_longest\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split(' '))\n    tiles = {}\n    for i, line in enumerate(lines[1:n*n+1], start=1):\n        tiles[i] = collections.deque(map(int, line.split(' ')))\n    result = 0\n    for line in lines[n*n+1:]:\n        x, y = map(int, line.split(' '))\n        for i, j in zip_longest(range(n), range(n, 2*n)):\n            for tile in tiles.values():\n                if tile[i]!= x or tile[j]!= y:\n                    break\n            else:\n                result += 1\n    return 'YES' if result == m*m else 'NO'\n\nprint(solution('''1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10'''))\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    tiles = [int(x) for x in stdin.split()]\n    count = Counter(tiles)\n    x = 0\n    y = 0\n    while x < n and y < n:\n        max_x = min(n-1-y, tiles[x])\n        max_y = min(n-1-x, tiles[y])\n        if max_x + max_y <= n:\n            x += 1\n            y += 1\n            if count[max_x] <= count[max_y]:\n                return 'NO'\n        else:\n            return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe second test case of the input has three types of tiles, they are shown on the picture below. [Image]\n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline {1} & {2} & {3} & {4} \\\\ \\hline 2 & {1} & {3} & {4} \\\\ \\hline 3 & {1} & {2} & {4} \\\\ \\hline 4 & {1} & {2} & {3} \\\\ \\hline \\end{array} \\right.$\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin.split('\\n')[0]\n    n = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2:]\n\n    #print(m, n, t)\n\n    def isSymmetric(a,b):\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if a[i][j]!= b[j][i]:\n                    return False\n        return True\n\n\n    c = 0\n    for s in t:\n        if isSymmetric(s, s):\n            c += 1\n\n    if c == len(t):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe second test case of the input has three types of tiles, they are shown on the picture below. [Image]\n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {6} & {7} & {8} \\\\ \\hline 6 & {4} & {7} & {8} \\\\ \\hline 7 & {8} & {5} & {6} \\\\ \\hline 8 & {9} & {4} & {5} \\\\ \\hline 9 & {8} & {5} & {4} \\\\ \\hline \\end{array} \\right.$\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = [int(x) for x in stdin.readline().strip().split()]\n        tiles = [x for x in stdin.readline().strip().split()]\n        tiles = [[int(tiles[j][i]) for i in range(len(tiles[j]))] for j in range(n)]\n        if n!= m:\n            continue\n        if n == 1:\n            print(\"YES\")\n            continue\n        if n == 2:\n            if tiles[0][0] == tiles[1][1]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 3:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][0]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 4:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][2] and tiles[2][2] == tiles[3][0]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 5:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][2] and tiles[2][2] == tiles[3][0] and tiles[3][0] == tiles[4][1]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 6:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][2] and tiles[2][2] == tiles[3][0] and tiles[3][0] == tiles[4][1] and tiles[4][1] == tiles[5][2]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 7:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][2] and tiles[2][2] == tiles[3][0] and tiles[3][0] == tiles[4][1] and tiles[4][1] == tiles[5][2] and tiles[5][2] == tiles[6][0]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 8:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][2] and tiles[2][2] == tiles[3][0] and tiles[3][0] == tiles[4][1] and tiles[4][1] == tiles[5][2] and tiles[5][2] == tiles[6][0] and tiles[6][0] == tiles[7][1]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 9:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][2] and tiles[2][2] == tiles[3][0] and tiles[3][0] == tiles[4][1] and tiles[4][1] == tiles[5][2] and tiles[5][2] == tiles[6][0] and tiles[6][0] == tiles[7][1] and tiles[7][1] == tiles[8][2]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\n        if n == 10:\n            if tiles[0][0] == tiles[1][1] and tiles[1][1] == tiles[2][2] and tiles[2][2] == tiles[3][0] and tiles[3][0] == tiles[4][1] and tiles[4][1] == tiles[5][2] and tiles[5][2] == tiles[6][0] and tiles[6][0] == tiles[7][1] and tiles[7][1] == tiles[8][2] and tiles[8][2] == tiles[9][0]:\n                print(\"YES\")\n                continue\n            else:\n                print(\"NO\")\n                continue\nsolution(sys.stdin)\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    A = []\n    B = []\n    sum_A = 0\n    sum_B = 0\n    for i in range(1, n+1):\n        sum_A += i\n        if sum_A - sum_B > 0:\n            A.append(i)\n        else:\n            B.append(i)\n    return str(max(len(A), len(B)))\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return '0'\n\n    nums = [int(i) for i in stdin.split(' ')]\n\n    result = []\n    for i in range(1, len(nums)):\n        if i == 1:\n            result.append(nums[i])\n        else:\n            result.append(nums[i] - nums[i - 1])\n\n    return str(max(result))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sums = [int(stdin.readline()) for _ in range(n)]\n    ans = min([abs(sum(sums[:i]) - sum(sums[i:])) for i in range(n // 2, n)])\n    return str(ans)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(n, abs(n - (sum(range(2, n + 1, 2)) - sum(range(1, n + 1, 2))))))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 2:\n        return str(n//2)\n    else:\n        return str(n//2 - 1)\n    \n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 1 2')\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    sum_a = sum_b = 0\n    for i in range(1, n + 1):\n        sum_a += i\n        sum_b += -i\n    return abs(sum_a - sum_b)\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    res = 1\n    for i in range(1, n):\n        b = a[:i] + a[i+1:]\n        print(b)\n        res = min(res, abs(sum(b) - sum(a)))\n    return res\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num > 2 * 10 ** 9:\n        return '-1'\n    return str(abs(num - (sum(range(1, num + 1)) / 2)))\n\n\"\"\"\n\nN = int(input())\nres = abs(N - (sum(range(1, N + 1)) / 2))\nprint(res)\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    \n    for i in range(1, n+1):\n        res += abs(n - 2 * i)\n    \n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(stdin) for _ in range(n)]\n    min_value = abs(sum(arr[:n//2])-sum(arr[n//2:]))\n    for i in range(1, n//2+1):\n        min_value = min(min_value, abs(sum(arr[:i])-sum(arr[n-i:])))\n    return str(min_value)\n\nassert(solution(\"3\") == \"0\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"6\") == \"1\")\nassert(solution(\"6\") == \"1\")\nassert(solution(\"1\") == \"0\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"6\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution(\"5\") == \"1\")\nassert(solution"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    0\n    >>> solution(\"(\")\n    0\n    >>> solution(\"(()\")\n    0\n    >>> solution(\"(()(\")\n    0\n    >>> solution(\"(()())\")\n    0\n    >>> solution(\"(()()()(()))\")\n    0\n    >>> solution(\"(()(()))()\")\n    0\n    >>> solution(\"(()(()())()())\")\n    0\n    >>> solution(\"(((()))())\")\n    0\n    >>> solution(\"(((()(())(()))()(()))()(((((((((((((()))))))))))))))\")\n    0\n    >>> solution(\"(((()(())(()))()(()))()(((((((((((((()))))))))))))))\")\n    0\n    >>> solution(\"((()(()())())((((((((((((((((((((((((((((((())))))))))))))))))))))))))())(())))()())((()(()(()))()()(())()))()(()(()()))()(()))(())()())(())(()(()))()()(()()()())(()((()())(())((())))(()(((()))()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    counter = 0\n    for i in range(1, n):\n        for j in range(n - i + 1):\n            if s[j:j + i] == s[j] * i:\n                counter += 1\n    return counter % 1000000007\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    # we will use a lookup table to store the number of all regular bracket sequences of length 2n\n    lookup = [0] * (n+1)\n    lookup[0] = 1\n    lookup[1] = 1\n    lookup[2] = 1\n    lookup[3] = 1\n    for i in range(4, n+1):\n        lookup[i] = (lookup[i-1] +\n                     lookup[i-2] +\n                     lookup[i-3] +\n                     lookup[i-4])\n    # we will use a lookup table to store the number of regular bracket sequences of length 2n - s as a substring\n    lookup_sub = [0] * (n + 1)\n    lookup_sub[0] = 1\n    lookup_sub[1] = 1\n    lookup_sub[2] = 1\n    lookup_sub[3] = 1\n    for i in range(4, n+1):\n        lookup_sub[i] = (lookup_sub[i-1] +\n                         lookup_sub[i-2] +\n                         lookup_sub[i-3] +\n                         lookup_sub[i-4])\n    result = 0\n    for i in range(0, n):\n        if s[i] == ')':\n            result += lookup_sub[n-1]\n        elif s[i] == '(':\n            result += lookup[n-1]\n    return str(result)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nsolution(\"\")\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return str(solution_naive(s, n))\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    print(solution_dynamic(s))\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # map 0 to 25 and 1 to 25\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n\n    # keep only the first part of the number\n    # and reverse it\n    number = [int(digit) for digit in str(n)[:len(str(n)) // 2][::-1]]\n\n    # count the number of swaps\n    count = 0\n\n    # find out if the number is divisible by 25\n    while True:\n        if nums[number[0]] * nums[number[1]] % 25 == 0:\n            # if so, we can just print the number and stop the loop\n            print(count)\n            break\n\n        # if not, check if the number is divisible by 25\n        else:\n            # if not, we look for the first occurrence of a number which is divisible by 25\n            # we then swap the two adjacent digits and keep doing this until we find a number divisible by 25\n            for i in range(len(number) - 1):\n                if nums[number[i]] * nums[number[i + 1]] % 25 == 0:\n                    number[i], number[i + 1] = number[i + 1], number[i]\n                    count += 1\n                    break\n\n    # if we didn't find a number divisible by 25, print -1\n    if count == 0:\n        print(\"-1\")"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        if i % 25 == 0:\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - 1] + 1\n            if dp[i] > dp[i // 25]:\n                dp[i] = dp[i // 25] + 1\n    return dp[n]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return next(int(stdin) for line in stdin.splitlines() if line)\n\nsolution(input())"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    for i in range(1, 9):\n        nums.append(n // 10 ** i % 10)\n    if not nums[0] or not nums[2] or not nums[4]:\n        return -1\n    moves = 0\n    while nums[0]!= 0 or nums[2]!= 0 or nums[4]!= 0:\n        temp = [0, 0, 0, 0]\n        temp[0] = nums[1]\n        temp[1] = nums[3]\n        temp[2] = nums[5]\n        temp[3] = nums[7]\n        moves += 1\n        for i in range(0, 4):\n            nums[i + 1] = temp[i]\n        nums[0] = 0\n        nums[2] = 0\n        nums[4] = 0\n    return moves\n\n\n\nassert(solution(\"5071\") == 4)\nassert(solution(\"705\") == 1)\nassert(solution(\"1241367\") == -1)\nassert(solution(\"12345678\") == -1)\nassert(solution(\"58981584\") == 1)\nassert(solution(\"999999999\") == -1)\nassert(solution(\"500001\") == -1)\nassert(solution(\"1023456789\") == -1)\nassert(solution(\"0\") == -1)\nassert(solution(\"0\") == -1)\nassert(solution(\"10\") == -1)\nassert(solution(\"1\") == -1)\nassert(solution(\"2\") == -1)\nassert(solution(\"3\") == -1)\nassert(solution(\"4\") == -1)\nassert(solution(\"5\") == -1)\nassert(solution(\"6\") == -1)\nassert(solution(\"7\") == -1)\nassert(solution(\"8\") == -1)\nassert(solution(\"9\") == -1)\nassert(solution(\"0\") == -1)\nassert(solution(\"1\") == -1)\nassert(solution(\"2\") == -1)\nassert(solution(\"3\") == -1)\nassert(solution(\"4\") == -1)\nassert(solution(\"5\") == -1)\nassert(solution(\"6\") == -1)\nassert(solution(\"7\") == -1)\nassert(solution(\"8\") == -1)\nassert(solution(\"9\") == -1)\nassert(solution(\"0\") == -1)\nassert(solution(\"1\") == -1)\nassert(solution(\"2\") == -1)\nassert(solution(\"3\") == -1)\nassert(solution(\"4\") == -1)\nassert(solution(\"5\") == -1)\nassert(solution(\"6\") == -1)\nassert(solution(\"7\") == -1)\nassert(solution(\"8\") == -1)\nassert(solution(\"9\") == -1)\nassert(solution(\"10\") == -1)\nassert(solution(\"1\") == -1)\nassert(solution(\"2\") == -1)\nassert(solution(\"3\") == -1)\nassert(solution(\"4\") == -1)\nassert(solution(\"5\") == -1)\nassert(solution(\"6\") == -1)\nassert(solution(\"7\") == -1)\nassert(solution(\"8\") == -1)\nassert(solution(\"9\") == -1)\nassert(solution(\"10\") == -1)\nassert(solution(\"11\") == -1)\nassert(solution(\"12\") == -1)\nassert(solution(\"13\") == -1)\nassert(solution(\"14\") == -1)\nassert(solution(\"15\") == -1)\nassert(solution(\"16\") == -1)\nassert(solution(\"17\") == -1)\nassert(solution(\"18\") == -1)\nassert(solution(\"19\") == -1)\nassert(solution(\"20\") == -1)\nassert(solution(\"21\") == -1)\nassert(solution(\"22\") == -1)\nassert(solution(\"23\") == -1)\nassert(solution(\"24\") == -1)\nassert(solution(\"25\") == -1)\nassert(solution(\"26\") == -1)\nassert(solution(\"27\") == -1)\nassert(solution(\"28\") == -1)\nassert(solution(\"29\") == -1)\nassert(solution(\"30\") == -1)\nassert(solution(\"31\") == -1)\nassert(solution(\"32\") == -1)\nassert(solution(\"33\") == -1)\nassert(solution(\"34\") == -1)\nassert(solution(\"35\") == -1)\nassert(solution(\"36\") == -1)\nassert(solution(\"37\") == -1)\nassert(solution(\"38\") == -1)\nassert(solution(\"39\") == -1)\nassert(solution(\"40\") == -1)\nassert(solution(\"41\") == -1)\nassert(solution(\"42\") == -1)\nassert(solution(\"43\") == -1)\nassert(solution(\"44\") == -1)\nassert(solution(\"45\") == -1)\nassert(solution(\"46\") == -1)\nassert(solution(\"47\") == -1)\nassert(solution(\"48\") == -1)\nassert(solution(\"49\") == -1)\nassert(solution(\"50\") == -1)\nassert(solution(\"51\") == -1)\nassert(solution(\"52\") == -1)\nassert(solution(\"53\") == -1)\nassert(solution(\"54\") == -1)\nassert(solution(\"55\") == -1)\nassert(solution(\"56\") == -1)\nassert(solution(\"57\") == -1)\nassert(solution(\"58\") == -1)\nassert(solution(\"59\") == -1)\nassert(solution(\"60\") == -1)\nassert(solution(\"61\") == -1)\nassert(solution(\"62\") == -1)\nassert(solution(\"63\") == -1)\nassert(solution(\"64\") == -1)\nassert(solution(\"65\") == -1)\nassert(solution(\"66\") == -1)\nassert(solution(\"67\") == -1)\nassert(solution(\"68\") == -1)\nassert(solution(\"69\") == -1)\nassert(solution(\"70\") == -1)\nassert(solution(\"71\") == -1)\nassert(solution(\"72\") == -1)\nassert(solution(\"73\") == -1)\nassert(solution(\"74\") == -1)\nassert(solution(\"75\") == -1)\nassert(solution(\"76\") == -1)\nassert(solution(\"77\") == -1)\nassert(solution(\"78\") == -1)\nassert(solution(\"79\") == -1)\nassert(solution(\"80\") == -1)\nassert(solution(\"81\") == -1)\nassert(solution(\"82\") == -1)\nassert(solution(\"83\") =="
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dp = [None] * (n+1)\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, n+1):\n        if i % 25 == 0:\n            dp[i] = -1\n        else:\n            dp[i] = dp[i - 1] + 1\n            for j in range(1, len(str(i))):\n                for k in range(j + 1):\n                    dp[i] = min(dp[i], dp[i - int(str(i)[j:j + k])] + k)\n    return str(dp[n])\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25!= 0:\n        n = (n % 1000) * 10 + (n % 100) % 10\n        count += 1\n    if n % 25!= 0:\n        return -1\n    else:\n        return count\n\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(str(int(char) - 1) for char in stdin)\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 25!= 0:\n        n -= 9\n        moves += 1\n    return moves - 1 if n % 25!= 0 else -1"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    elif n % 25!= 0:\n        return -1\n    else:\n        return sum(int(c) for c in str(n)) - 1"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n % 25 == 0:\n        return str(n)\n    if n % 25 == 25:\n        return '-1'\n    if n % 25 == 10:\n        return '1'\n    n = str(n)\n    if n[0] == '1':\n        return '-1'\n    else:\n        curr = 0\n        prev = n[0]\n        # forward\n        for i in range(1, len(n)):\n            curr += int(n[i])\n            if curr == 25:\n                if prev == '9':\n                    curr = 0\n                    prev = '1'\n                else:\n                    curr = 0\n                    prev = str(int(prev) + 1)\n                    # backward\n            else:\n                prev = n[i]\n                curr = int(n[i])\n        # backward\n        curr += int(n[-1])\n        if curr == 25:\n            if prev == '9':\n                curr = 0\n                prev = '1'\n            else:\n                curr = 0\n                prev = str(int(prev) + 1)\n        else:\n            prev = n[-1]\n        return prev + str(curr)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    s = ''.join(sorted(s))\n    result = {}\n    for i in range(len(s)):\n        result[s[i]] = i\n    c = [0] * n\n    for i in range(len(s)):\n        c[result[s[i]]] = i\n    return str(c).strip('[]')"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = 1\n    for i in range(n):\n        min_colors = 1\n        for j in range(n - i):\n            if s[j]!= s[j + 1]:\n                min_colors += 1\n        res = min(res, min_colors)\n    return res, ''.join([str(i + 1) for i in range(n) if s[i] == s[i + 1]])\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    nums = [0]*n\n    res = 0\n    for i in range(n):\n        if s[i]!= 'a':\n            nums[i] = 1\n            res += 1\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j]!= nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    res = len(s)\n    colors = len(set(s))\n    if colors > res:\n        return str(res)\n    colors_list = [0] * len(s)\n    for c in s:\n        for i in range(len(colors_list)):\n            if colors_list[i] == 0 and s[i] == c:\n                colors_list[i] = c\n                break\n    s = ''.join(colors_list)\n    c = [0] * len(s)\n    c[0] = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= c[i - 1]:\n            c[i] = s[i]\n    res = [0] * len(c)\n    if c[-1]!= c[0]:\n        res[0] = c[-1]\n        for i in range(1, len(c)):\n            res[i] = c[i - 1]\n    else:\n        for i in range(1, len(c) - 1):\n            if c[i - 1]!= c[i] and c[i]!= c[i + 1]:\n                res[i] = c[i - 1]\n                for j in range(i + 1, len(c)):\n                    if c[j]!= c[i]:\n                        res[j] = c[i]\n                        break\n                break\n    s = ''.join(res)\n    return str(len(s)) + '\\n' + s\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    string = input[1]\n    n = int(input[0])\n\n    # create a bit vector\n    bit_vector = BitVector(n)\n\n    # mark every character as a color\n    bit_vector.set_bit(0)\n    bit_vector.set_bit(1)\n    bit_vector.set_bit(2)\n\n    count = 0\n\n    while True:\n        # count number of colors in a bit vector\n        count = bit_vector.count_bits()\n\n        # If there is one color, that means that the string is sorted\n        if count == 1:\n            break\n\n        # Create a new bit vector to store the color of each character\n        bit_vector = BitVector(n)\n\n        # Use a dictionary to store the color of each character\n        color_dict = {}\n\n        # Iterate over the string\n        for i in range(len(string)):\n\n            # If the character has not been colored yet\n            if bit_vector[i] == 0:\n                # Check if the color of the next character is already in the dictionary\n                if string[i + 1] in color_dict:\n                    # If the color is already in the dictionary, we can swap them\n                    bit_vector.set_bit(color_dict[string[i + 1]])\n                    color_dict[string[i + 1]] = bit_vector[i + 1]\n                else:\n                    # If the color of the next character is not in the dictionary, we put it in the dictionary\n                    color_dict[string[i + 1]] = bit_vector[i + 1]\n\n        # If the color vector is sorted, we can return it\n        if bit_vector.is_sorted():\n            break\n\n    return str(count)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    c = [None] * len(s)\n    c = [i for i in range(len(s))]\n    c = []\n    return str(len(c)) + '\\n' +''.join(map(str, c))\n\n\n@check\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin.strip()\n\n    res = 0\n    colors = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i]!= s[j]:\n                if s[j] < s[i]:\n                    colors[i] += 1\n                else:\n                    colors[j] += 1\n                res = max(res, colors[i], colors[j])\n\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return ''\n\n    s = stdin.strip()\n    res = sorted(list(set(s)))\n    c = []\n    i = 0\n    while i < n:\n        c.append(res.index(s[i]) + 1)\n        i += 1\n\n    return''.join(map(str, c))\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = 1\n    colors = [0] * n\n    for i in range(n):\n        if s[i] == s[i-1]:\n            res += 1\n        else:\n            colors[i] = res\n            res += 1\n    print(res)\n    print(' '.join(map(str, colors)))\n    return ''\n\nimport sys"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n@do_cprofile\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    strings = []\n    for _ in range(int(n)):\n        strings.append(stdin.readline())\n    words = sorted(strings)\n    result = \"YES\"\n    for i in range(len(words)):\n        if words[i]!= strings[i]:\n            result = \"NO\"\n    return result\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.splitlines()\n    n = int(strings[0])\n    strings = strings[1:]\n\n    def is_substring(a: str, b: str) -> bool:\n        index_a = 0\n        index_b = 0\n        while index_a < len(a) and index_b < len(b):\n            if a[index_a] == b[index_b]:\n                index_a += 1\n                index_b += 1\n            elif index_a < len(a) and a[index_a] > b[index_b]:\n                index_b += 1\n            elif index_b < len(b) and b[index_b] > a[index_a]:\n                index_a += 1\n        if index_a < len(a) and index_b < len(b):\n            return False\n        return True\n\n    min_length = len(strings[0])\n    for string in strings:\n        if len(string) < min_length:\n            min_length = len(string)\n\n    result = []\n    for i in range(min_length):\n        char_set = set()\n        for string in strings:\n            if len(string) > i:\n                char_set.add(string[i])\n        if len(char_set) == n:\n            for string in strings:\n                if len(string) > i:\n                    result.append(string[i])\n            break\n\n    if len(result) == n:\n        return \"YES\\n\" + \"\\n\".join(result)\n    else:\n        return \"NO\\n\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    for _ in range(n):\n        s = stdin()\n        print('NO' if not possible(s) else 'YES')\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [stdin[i].strip() for i in range(n)]\n    m = len(strings[0])\n    for i in range(m):\n        all_string_of_length_i = set([string[i] for string in strings])\n        if len(all_string_of_length_i)!= 1:\n            return \"NO\"\n\n    return \"YES\"\n\n\nassert solution('''\\\n1\nab\naba\n''') == \"YES\"\nassert solution('''\\\n1\nabc\nabacaba\n''') == \"NO\"\nassert solution('''\\\n4\nabcdefgh\nabc\nd\nef\ngh\n''') == \"NO\"\nassert solution('''\\\n4\nabcdefgh\nabcdefgh\nghi\n''') == \"YES\"\nassert solution('''\\\n5\na\naba\nabacaba\nba\naba\n''') == \"YES\"\nassert solution('''\\\n5\na\nabacaba\nba\naba\nabab\n''') == \"NO\"\nassert solution('''\\\n4\na\nabacaba\nba\naba\nabab\n''') == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    strings = sorted(strings)\n    for i in range(n):\n        if strings[i] not in strings[:i]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 0:\n        return \"YES\"\n\n    string_list = []\n    for _ in range(n):\n        string = stdin.split()[1]\n        string_list.append(string)\n\n    string_list.sort()\n    string_list.sort(key=len)\n\n    if len(string_list)!= len(set(string_list)):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    n_max = 0\n\n    for i in range(n):\n        left, right = 0, 0\n        if a[i] > k:\n            break\n        for j in range(i, n):\n            if a[j] > k:\n                break\n            left += 1\n        for j in range(n - 1, i, -1):\n            if a[j] > k:\n                break\n            right += 1\n\n        n_max = max(n_max, left + right)\n\n    return str(n_max)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    problems = [int(x) for x in stdin.split()]\n    if k == 0:\n        return str(len(problems))\n\n    max_problems = max(problems)\n    if max_problems >= k:\n        return '0'\n\n    # let's solve the problem starting from the left\n    num_solved = 0\n    for problem in problems:\n        if problem >= k:\n            break\n        num_solved += 1\n\n    return str(num_solved)\n\nassert(solution('8 4') == '5')\nassert(solution('5 2') == '0')\nassert(solution('5 100') == '5')\nassert(solution('12 34 55 43 21') == '5')\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    problems = [int(n) for n in stdin.split()]\n\n    for i in range(1, n):\n        if problems[i] < k:\n            break\n\n    return i - 1\n\n\n\nassert(solution('5 2') == 5)\nassert(solution('5 3') == 0)\nassert(solution('3 1 2 1 3') == 0)\nassert(solution('5 100') == 5)\nassert(solution('12 34 55 43 21') == 5)\nassert(solution('100 100') == 0)\nassert(solution('4 2 3 1 5 1 6 4') == 5)\nassert(solution('1000 1001') == 0)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    l = list(map(int, stdin[1].split(' ')))\n    count = 0\n    for i in range(n):\n        if l[i] > k:\n            break\n        else:\n            count += 1\n    return count\n\nassert solution('4 2\\n4 2 3 1\\n') == 5\nassert solution('5 2\\n3 1 2 1 3\\n') == 0\nassert solution('5 100\\n12 34 55 43 21\\n') == 5"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('4 2 3 1 5 1 6 4') == '5')\nassert(solution('5 2') == '0')\nassert(solution('12 34 55 43 21') == '5')\nassert(solution('5 100') == '5')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9') == '9')\nassert(solution('1 2 3 4 5 6 7 8') == '9')\nassert(solution('1 2 3 4 5 6 7') == '9')\nassert(solution('1 2 3 4 5') == '9')\nassert(solution('1 2 3 4') == '9')\nassert(solution('1 2 3') == '9')\nassert(solution('1 2') == '9')\nassert(solution('1') == '9')\nassert(solution('') == '0')\nassert(solution('1') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9') == '9')\nassert(solution('1 2 3 4 5 6 7 8') == '9')\nassert(solution('1 2 3 4 5 6 7') == '9')\nassert(solution('1 2 3 4 5') == '9')\nassert(solution('1 2 3 4') == '9')\nassert(solution('1 2 3') == '9')\nassert(solution('1 2') == '9')\nassert(solution('1') == '9')\nassert(solution('') == '0')\nassert(solution('1') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9') == '9')\nassert(solution('1 2 3 4 5 6 7 8') == '9')\nassert(solution('1 2 3 4 5 6 7') == '9')\nassert(solution('1 2 3 4 5') == '9')\nassert(solution('1 2 3 4') == '9')\nassert(solution('1 2 3') == '9')\nassert(solution('1 2') == '9')\nassert(solution('1') == '9')\nassert(solution('') == '0')\nassert(solution('1') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9') == '9')\nassert(solution('1 2 3 4 5 6 7 8') == '9')\nassert(solution('1 2 3 4 5 6 7') == '9')\nassert(solution('1 2 3 4 5') == '9')\nassert(solution('1 2 3 4') == '9')\nassert(solution('1 2 3') == '9')\nassert(solution('1 2') == '9')\nassert(solution('1') == '9')\nassert(solution('') == '0')\nassert(solution('1') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9') == '9')\nassert(solution('1 2 3 4 5 6 7 8') == '9')\nassert(solution('1 2 3 4 5 6 7') == '9')\nassert(solution('1 2 3 4 5') == '9')\nassert(solution('1 2 3 4') == '9')\nassert(solution('1 2 3') == '9')\nassert(solution('1 2') == '9')\nassert(solution('1') == '9')\nassert(solution('') == '0')\nassert(solution('1') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9') == '9')\nassert(solution('1 2 3 4 5 6 7 8') == '9')\nassert(solution('1 2 3 4 5 6 7') == '9')\nassert(solution('1 2 3 4 5') == '9')\nassert(solution('1 2 3 4') == '9')\nassert(solution('1 2 3') == '9')\nassert(solution('1 2') == '9')\nassert(solution('1') == '9')\nassert(solution('') == '0')\nassert(solution('1') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '9')\nassert(solution"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(stdin) for stdin in stdin.split()]\n    left, right = 0, n-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] > k:\n            right = mid-1\n        else:\n            left = mid+1\n    return left"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    probs = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(len(probs)):\n        prob = probs[i]\n        if prob >= k:\n            count += 1\n        else:\n            probs.pop(i)\n    return str(count)\n\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution(input()) == '5')\nassert(solution(input()) == '0')\nassert(solution"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(\" \")]\n    A = [int(x) for x in stdin.strip().split(\" \")]\n    A.sort(reverse=True)\n    solved = 0\n    for i in range(n):\n        if A[i] > k:\n            break\n        solved += 1\n    return str(solved)\n\nn, k = [int(x) for x in stdin.strip().split(\" \")]\nA = [int(x) for x in stdin.strip().split(\" \")]\nA.sort(reverse=True)\nsolved = 0\nfor i in range(n):\n    if A[i] > k:\n        break\n    solved += 1\nprint(solved)\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    a = list(map(int, stdin.strip().split(' ')))\n    print(solve(a, k, n))\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(int(x) for x in stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, tiles = stdin.strip().split()\n    a, b = map(int, tiles.split(\" \"))\n    return str(a + b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return ''.join(map(str, [1, 3] * (x + y - 1) // 2))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(map(int, stdin.split(\" \"))))\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * (a + 1) + (b - 1) * b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a * b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a * 2 + b * 2!= 10 ** 14:\n        return '0'\n    return str(min(a + b, b + a, a * 2, b * 2))\n\n\nassert(solution('') == '0')\nassert(solution('1 2') == '2')\nassert(solution('0 0') == '0')\nassert(solution('3 4') == '14')\nassert(solution('1 3') == '14')\nassert(solution('6 9') == '18')\nassert(solution('9 3') == '14')\nassert(solution('999 10') == '52')\nassert(solution('99 9') == '28')\nassert(solution('50 598') == '876')\nassert(solution('50 599') == '876')\nassert(solution('499 999') == '2720')\nassert(solution('499 998') == '2720')\nassert(solution('499 999') == '2720')\nassert(solution('4 9') == '14')\nassert(solution('4 10') == '0')\nassert(solution('100 9') == '52')\nassert(solution('100 10') == '0')\nassert(solution('9 9') == '28')\nassert(solution('9 10') == '0')\nassert(solution('10 9') == '0')\nassert(solution('999 10') == '52')\nassert(solution('99 9') == '28')\nassert(solution('999 100') == '52')\nassert(solution('999 101') == '52')\nassert(solution('999 1000') == '52')\nassert(solution('998 999') == '52')\nassert(solution('998 998') == '52')\nassert(solution('998 999') == '52')\nassert(solution('9999 99') == '52')\nassert(solution('9999 98') == '52')\nassert(solution('9999 99') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 998') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('999 999') == '52')\nassert(solution('999 998') == '52')\nassert(solution('999 999') == '52')\nassert(solution('9999 998') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 998') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert(solution('9999 999') == '52')\nassert("
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a * b, a + b) * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a*b*3)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return..."
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    colors = [0 for i in range(n)]\n    for i, c in enumerate(s):\n        if c == s[i-1]:\n            colors[i] = 1\n        elif colors[i-1] == 1:\n            colors[i] = 0\n        else:\n            colors[i] = 1\n    if colors == [0 for i in range(n)]:\n        return 'YES'\n    return 'NO'\n\nimport sys"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 200:\n        return \"NO\"\n    s = stdin.strip()\n    if len(s)!= n:\n        return \"NO\"\n\n    # Find the first increasing substring\n    i = 0\n    for j in range(n - 1):\n        if s[j] < s[j + 1]:\n            i = j\n            break\n    if i == 0:\n        return \"YES\"\n\n    # Find the last increasing substring\n    l = i\n    for j in range(i + 1, n):\n        if s[j] < s[j - 1] or s[j] > s[l]:\n            l = j\n            break\n    if l == n:\n        return \"YES\"\n\n    # If we found the increasing substring, color the first and last characters and then the middle ones\n    for j in range(i, l):\n        s = s[:j] + '1' + s[j + 1:]\n    s = s[:i] + '0' + s[i + 1:]\n\n    # Sort the string\n    s = \"\".join(sorted(s))\n\n    # If the string is sorted, return \"YES\"\n    if s == s[::-1]:\n        return \"YES\"\n\n    # Else, return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 200:\n        return \"NO\"\n\n    s = stdin.strip()\n    if len(s)!= n:\n        return \"NO\"\n\n    for i in range(n):\n        if ord(s[i]) < 97:\n            return \"NO\"\n\n    is_sorted = True\n    for i in range(n - 1):\n        if ord(s[i]) > ord(s[i + 1]):\n            is_sorted = False\n            break\n\n    if is_sorted:\n        return \"YES\"\n\n    # sort the string\n    s = \"\".join(sorted(s))\n\n    # count number of different characters\n    characters = [0] * 26\n    for i in range(n):\n        characters[ord(s[i]) - 97] += 1\n\n    # get the most frequent character\n    most_frequent_character = None\n    most_frequent_character_count = 0\n    for i in range(26):\n        if characters[i] > most_frequent_character_count:\n            most_frequent_character_count = characters[i]\n            most_frequent_character = chr(i + 97)\n\n    solution = [\"0\"] * n\n    for i in range(n):\n        solution[i] = chr(ord(s[i]) - ord(most_frequent_character) + 97)\n\n    return \"YES\\n\" + \"\".join(solution)\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    sorted = True\n    colored = [False for _ in range(n)]\n    for i in range(n):\n        if colored[i]:\n            continue\n        is_correct = True\n        for j in range(i + 1, n):\n            if s[i] > s[j]:\n                is_correct = False\n                break\n        if not is_correct:\n            sorted = False\n            colored[i] = True\n            break\n\n    if sorted:\n        return \"YES\"\n\n    colored = [False for _ in range(n)]\n    for i in range(n):\n        if colored[i]:\n            continue\n        is_correct = True\n        for j in range(i + 1, n):\n            if s[i] < s[j]:\n                is_correct = False\n                break\n        if not is_correct:\n            sorted = False\n            colored[i] = True\n            break\n\n    if sorted:\n        return \"YES\"\n\n    colored = [False for _ in range(n)]\n    for i in range(n):\n        if colored[i]:\n            continue\n        is_correct = True\n        for j in range(i + 1, n):\n            if s[i] > s[j]:\n                is_correct = False\n                break\n        if not is_correct:\n            sorted = False\n            colored[i] = True\n            break\n\n    if sorted:\n        return \"YES\"\n\n    colored = [False for _ in range(n)]\n    for i in range(n):\n        if colored[i]:\n            continue\n        is_correct = True\n        for j in range(i + 1, n):\n            if s[i] < s[j]:\n                is_correct = False\n                break\n        if not is_correct:\n            sorted = False\n            colored[i] = True\n            break\n\n    if sorted:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Keep track of colors we've seen and the current index we're on\n    colors = {0: 0, 1: 0}\n    curr_index = 0\n\n    # Track number of swaps we do, and what color we're on\n    swaps = 0\n    curr_color = 0\n\n    # Iterate over the string\n    for letter in s:\n        # If the current letter is not the same as the previous, we've crossed a letter boundary\n        if letter!= s[curr_index - 1]:\n            # We can swap with anything\n            if (curr_color + 1) % 2 == 0:\n                curr_color = 1\n            else:\n                curr_color = 0\n            # Update the number of swaps, and increment the current index\n            swaps += 1\n            curr_index += 1\n\n        # If we're on the same letter, then we can swap with anything\n        else:\n            if (curr_color + 1) % 2 == 0:\n                curr_color = 1\n            else:\n                curr_color = 0\n\n        # Update the colors we've seen\n        colors[letter] = curr_color\n        \n    # Check if the string is sorted\n    for i in range(1, n):\n        if colors[i] > colors[i - 1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1:]\n    nums = [0] * n\n    for i in range(n):\n        nums[i] = int(s[i])\n    i = 0\n    while i < n:\n        if nums[i]!= i:\n            if i < n - 1:\n                nums[i], nums[n - 1] = nums[n - 1], nums[i]\n            else:\n                break\n            i = 0\n            nums[i] = i\n        else:\n            i += 1\n    if i == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    string = stdin.readline().strip()\n\n    colored = [False] * length\n    swaps = 0\n\n    while not (colored == sorted(colored) and string == sorted(string, reverse=True)):\n        for i in range(len(string)):\n            if colored[i] == True:\n                continue\n\n            for j in range(i, len(string)):\n                if string[j] < string[i]:\n                    swaps += 1\n                    colored[j] = True\n                    colored[i] = not colored[i]\n                    break\n            else:\n                continue\n\n            break\n\n    return \"YES\" if not swaps else \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 200:\n        raise ValueError(\"n should be less than 200\")\n    if n == 0:\n        return \"NO\"\n    s = stdin[:-1]\n    curr_pos = 0\n    prev_color = None\n    colors = 0\n    for pos, c in enumerate(s):\n        if c!= prev_color:\n            if prev_color is not None:\n                if prev_color == '0':\n                    colors += 1\n            curr_pos = pos\n            prev_color = c\n    if prev_color == '0':\n        colors += 1\n    if colors > n:\n        return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    for i in range(1, size):\n        if s[i] < s[i - 1]:\n            break\n    else:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = -1\n    for i in range(a, b+1):\n        c = i * 0.1\n        if i - c >= 0 and (i - c) % 1 == 0:\n            ans = i - c\n    return str(ans)\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    print(min(int(A * 0.08), int(A * 0.1), int(B * 0.08), int(B * 0.1)))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(' ')\n    a = int(lines[0])\n    b = int(lines[1])\n    print(int(a * 0.08))\n    print(int(a * 0.1))\n    return ''"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A == 1:\n        print('-1')\n        return\n    elif A == B:\n        print('-1')\n        return\n    elif A > B:\n        print('-1')\n        return\n    \n    for price in range(1, B + 1):\n        consumption_tax_rate = price / A\n        if consumption_tax_rate % 1 < 0.5:\n            consumption_tax_rate = int(consumption_tax_rate)\n        else:\n            consumption_tax_rate = int(consumption_tax_rate) + 1\n        \n        if price * 0.1 < consumption_tax_rate * 0.8 < price * 1.0:\n            print(price)\n            return\n    \n    print('-1')\n    return"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    # calculate the amount of consumption tax that must be deducted.\n    rate = (B - A) / 100\n    total_tax = int(rate * A)\n    \n    # calculate the price that is the closest to the amount of consumption tax deducted.\n    price = A - total_tax\n    \n    # print the price\n    print(price)\n    \n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 0 or b <= 0:\n        return -1\n\n    price = 1\n    while True:\n        price += 1\n        tax = price * (a + b)\n        if tax < price:\n            break\n    return str(price)\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = [int(x) for x in stdin.split()]\n    if A > B:\n        A, B = B, A\n    A = A * 0.1\n    B = B * 0.1\n    if A < 1.0:\n        A = 1\n    elif A >= 1.0 and B >= 1.0:\n        return str(int(A))\n    elif A <= B:\n        return '-1'\n    return str(int(B))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    for price in range(A, B + 1):\n        if price % 1 == 0:\n            return str(price)\n    return '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    amount, tax_rate = map(int, stdin.split())\n    price = 0\n    if tax_rate == 8:\n        price = amount // 2\n    elif tax_rate == 10:\n        price = amount // 2.5\n    return str(price)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(\" \"))\n    if A == B:\n        return str(A)\n    elif A < B:\n        return str(A)\n    else:\n        return str(-1)"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n // 2:\n        return \"NO\"\n    a = [0] * (k + 1)\n    a[1] = n - 1\n    for i in range(1, k):\n        a[i + 1] = (n - 1) - a[i]\n        if a[i + 1] > 2 * a[i]:\n            return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, a))\n\nassert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\\n\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\\n\"\nassert solution(\"9 4\") == \"NO\\n\"\n\"\"\"\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n\n    # The answer for the first problem should be 1, but, due to the rule, the answer is not 1, not 0.\n    # We can solve this problem by adding 1 to the number of problems solved.\n    ans = [1]\n    for _ in range(1, k):\n        ans.append(1 + ans[-1])\n        ans[-2] = max(ans[-2], 1 + ans[-1])\n    ans = list(map(str, ans))\n\n    if ans[-1] < n:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(ans)\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_problems, training_days = [int(x) for x in stdin.split(' ')]\n    if not 1 <= number_of_problems <= 10 ** 9 or not 1 <= training_days <= 10 ** 5:\n        return 'NO'\n    result = []\n    for _ in range(training_days):\n        solved_problems = int(stdin.readline())\n        if not 1 <= solved_problems <= 10 ** 5:\n            return 'NO'\n        if solved_problems > number_of_problems:\n            return 'NO'\n        result.append(solved_problems)\n        if len(result) >= 2:\n            if result[-1] > result[-2] + 1:\n                return 'NO'\n            if result[-1] + 1 > result[-2] * 2:\n                return 'NO'\n    return 'YES' + '\\n' +''.join([str(x) for x in result])\n\nassert solution('''6 3''') == 'YES\\n3 6 1 5\\n'\nassert solution('''8 3''') == 'NO\\n'\nassert solution('''1 1''') == 'YES\\n1\\n'\nassert solution('''9 4''') == 'NO\\n'\nassert solution('''7 3''') == 'NO\\n'\nassert solution('''7 4''') == 'NO\\n'\nassert solution('''4 1''') == 'NO\\n'\nassert solution('''9 8''') == 'NO\\n'\nassert solution('''3 2''') == 'NO\\n'\nassert solution('''10 7''') == 'NO\\n'\nassert solution('''10 9''') == 'NO\\n'\nassert solution('''13 2''') == 'YES\\n2 4 3 5 6\\n'\nassert solution('''5 2''') == 'NO\\n'\nassert solution('''14 1''') == 'YES\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n'\nassert solution('''7 2''') == 'NO\\n'\nassert solution('''7 3''') == 'NO\\n'\nassert solution('''8 4''') == 'NO\\n'\nassert solution('''8 5''') == 'NO\\n'\nassert solution('''6 1''') == 'NO\\n'\nassert solution('''14 2''') == 'YES\\n2 4 3 5 6 7 8 9 10 11 12 13 14\\n'\nassert solution('''9 4''') == 'NO\\n'\nassert solution('''3 1''') == 'NO\\n'\nassert solution('''7 3''') == 'NO\\n'\nassert solution('''8 5''') == 'NO\\n'\nassert solution('''13 2''') == 'YES\\n2 4 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\\n'\nassert solution('''5 2''') == 'NO\\n'\nassert solution('''14 2''') == 'YES\\n
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = 0\n    for i in range(1, k + 1):\n        a += i\n        a *= 2\n    a //= n\n    if a < k:\n        return \"NO\"\n    else:\n        return \"YES\" + '\\n' +''.join(map(str, range(1, a + 1)))\n\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(None)\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = [0] * k\n    for i in range(k):\n        a[i] = int(stdin.readline().strip())\n    for i in range(k):\n        if a[i] > n:\n            return \"NO\"\n        for j in range(i + 1, k):\n            if a[j] > 2 * a[i]:\n                return \"NO\"\n    return \"YES\" + ''.join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    if n <= k:\n        return \"NO\"\n\n    cnt = 0\n    for i in range(1, k + 1):\n        cnt += i\n        if cnt == n:\n            return \"YES\"\n        if cnt > n:\n            return \"NO\"\n        if i + 1 == k:\n            cnt += 1\n\n    return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.splitlines()\n    n, k = int(n), int(k)\n\n    if n > 10 ** 9:\n        return \"NO\"\n\n    if k > 10 ** 5:\n        return \"NO\"\n\n    if n == 0:\n        return \"NO\"\n\n    arr = [1] * k\n    for _ in range(k):\n        arr[_] = int(n)\n        n -= 1\n\n    for _ in range(1, k - 1):\n        arr[_] = int(n)\n        n -= 1\n        if arr[_] > arr[_ + 1]:\n            return \"NO\"\n\n    return \"YES\" + ''.join(map(str, arr))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Getting input \n    n, k = map(int, stdin.split())\n    \n    # Finding possible numbers\n    s = n\n    possible = []\n    for i in range(1, k):\n        s += 1\n        if s % i == 0:\n            possible.append(s // i)\n    \n    # Find solution\n    if sum(possible)!= n:\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n        print(*possible)\n    return"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = []\n    for _ in range(k):\n        t.append(int(stdin.readline()))\n    return \"YES\" if sum(t) == n and all(t[i] > t[i - 1] for i in range(1, k)) else \"NO\"\n\n\n\nassert(solution(r'26 6\\n')) == r'YES\\n1 2 4 5 6 8'\nassert(solution(r'8 3\\n')) == r'NO\\n'\nassert(solution(r'9 4\\n')) == r'NO\\n'\nassert(solution(r'1 1\\n')) == r'YES\\n1'\nassert(solution(r'2 5\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    if n > 10**9:\n        return \"NO\"\n    if n % (k + 1)!= 0:\n        return \"NO\"\n    ans = [0] * k\n    for i in range(k):\n        ans[i] = n - i * (n // (k + 1))\n        if ans[i] < 0:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(n: int, rating: int) -> int:\n        \"\"\"\n        Time: O(n * rating)\n        Space: O(n)\n        \"\"\"\n        solutions = [0] * (n + 1)\n        solutions[0] = 1\n        for _ in range(rating):\n            solutions = [solutions[i] + solutions[i - 1] for i in range(1, n + 1)]\n        return solutions[-1]\n\n    n, rating = map(int, stdin.split())\n    projects = [map(int, line.split()) for line in stdin.split('\\n')[1:]]\n    projects.sort(key=lambda x: x[0], reverse=True)\n    print(calculate(n, rating))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    projects = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        projects.append((a, b))\n    projects = sorted(projects)\n    best_size = 0\n    current_size = 0\n    for project in projects:\n        rating_change = project[1]\n        if rating_change < 0:\n            current_size += 1\n        else:\n            current_size -= 1\n            rating_change = -rating_change\n            if rating_change > 0:\n                if best_size < current_size:\n                    best_size = current_size\n                current_size = 0\n    if current_size > 0:\n        best_size += current_size\n    return str(best_size)\n\nimport sys\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_money(rating, changes, i, profit, profit_after_completion):\n        if i == len(changes):\n            return profit_after_completion\n        profit_after_changing = profit_after_completion + changes[i][1]\n        if rating + changes[i][0] < 0:\n            return get_money(rating, changes, i + 1, profit, profit_after_changing)\n        return get_money(rating + changes[i][0], changes, i + 1, profit + profit_after_changing, profit_after_changing)\n\n    n, r = [int(x) for x in stdin.split()]\n    ratings = [int(x) for x in stdin.split()]\n    print(get_money(r, zip(ratings, [0] * n), 0, 0, 0))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = sorted(a, reverse=True)\n    return str(a[n-1])"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, r = map(int, stdin[0].split())\n    a = [map(int, x.split()) for x in stdin[1:n+1]]\n    b = [x[1] for x in a]\n    a = [x[0] for x in a]\n    s = 0\n    p = max(a)\n    while p < r:\n        a = sorted(a)\n        for i in range(n):\n            if a[i] < r:\n                s += 1\n                a[i] += b[i]\n        p = max(a)\n    return str(s)\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    polycarp_rating, rating_change = [int(num) for num in stdin.split()]\n\n    projects = [int(num) for num in stdin.split()]\n    projects.sort(reverse=True)\n    results = []\n    polycarp_rating = min(polycarp_rating, rating_change)\n    for i in range(1, len(projects) + 1):\n        size = i\n        for j in range(1, i):\n            if (polycarp_rating - projects[j - 1]) <= rating_change:\n                size += 1\n        results.append(size)\n\n    return str(max(results))"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    projects = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        projects.append([a, b])\n    projects.sort(key=lambda x: x[0])\n    best = 0\n    for i in range(n):\n        project = projects[i]\n        rating = project[0]\n        best += project[1]\n        if rating > r:\n            best -= project[1]\n            break\n    return str(best)\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = [int(x) for x in stdin.split()]\n    projects = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(n):\n        rating += projects[i]\n        if rating < 0:\n            result += 1\n            rating = 0\n    return str(result)"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return 'NO'\n\n    if n == 1:\n        return 'YES'\n\n    arr = [int(x) for x in stdin.split()]\n    if len(arr)!= (n * n):\n        return 'NO'\n    \n    rows = []\n    for i in range(0, n):\n        rows.append(arr[i * n: (i + 1) * n])\n\n    nums = list(range(1, n * n + 1))\n    nums.reverse()\n    for i in range(0, n):\n        rows[i].reverse()\n\n    for i in range(n - 1, -1, -1):\n        for j in range(0, n):\n            if rows[j][i]!= nums[i]:\n                return 'NO'\n\n    return 'YES'\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return 'NO'\n    a = list(map(int, stdin.split()))\n    if not is_palindromic(n, a):\n        return 'NO'\n    else:\n        return 'YES'\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = n\n    c = n\n    m = []\n    for i in range(r * c):\n        m.append(int(stdin))\n    m.sort()\n    m.reverse()\n    # print(m)\n    for i in range(r):\n        for j in range(c):\n            if i * c + j < len(m):\n                if m[i * c + j]!= m[i * c + j - c]:\n                    break\n            else:\n                print(\"YES\")\n                for k in range(r):\n                    for l in range(c):\n                        print(m[i * c + l])\n                    print(\"\")\n                return\n    print(\"NO\")\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    matrix = [[None] * n for i in range(n)]\n    for i in range(len(arr)):\n        matrix[i % n][i // n] = arr[i]\n    if check(matrix):\n        return '\\n'.join(' '.join(str(x) for x in row) for row in matrix)\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    rows = int(math.sqrt(len(arr)))\n    if rows * rows!= len(arr):\n        return \"NO\"\n    arr = [arr[i:i + rows] for i in range(0, len(arr), rows)]\n    for row in arr:\n        row.sort()\n    for i in range(rows):\n        for j in range(i + 1, rows):\n            if row[i]!= row[j]:\n                return \"NO\"\n    return \"YES\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    matrix = [int(stdin.readline().strip()) for _ in range(n**2)]\n    row_table, column_table = [0 for _ in range(n)], [0 for _ in range(n)]\n\n    for index, i in enumerate(matrix):\n        row_table[i % n] += 1\n        column_table[i // n] += 1\n\n    if row_table == column_table:\n        print(\"YES\")\n\n        for row in range(n):\n            print(*matrix[row * n: (row + 1) * n])\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return \"YES\" if palindromic(matrix) else \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n## Testcases\nTestcase 1: \"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\"\nTestcase 2: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 3: \"4\\n1 1 1 1 1 3 3 3 3 3\"\nTestcase 4: \"4\\n1 1 1 1 1 3 3 3 3 3\"\nTestcase 5: \"10\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 6: \"10\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 7: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 8: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 9: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 10: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 11: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 12: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 13: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 14: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 15: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 16: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 17: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 18: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 19: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\nTestcase 20: \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\"\n'''\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for _ in range(n**2)]\n    #construct n x n matrix, if there are duplicates, it's not palindromic\n    matrix = []\n    for i in range(n):\n        new_row = []\n        for j in range(n):\n            new_row.append(arr[i + j * n])\n        matrix.append(new_row)\n    #check if matrix is palindromic\n    is_palindromic = True\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[i][n - 1 - j]:\n                is_palindromic = False\n    if is_palindromic:\n        #create n x n matrix, reorder rows and columns\n        reordered_matrix = []\n        for i in range(n):\n            new_row = []\n            for j in range(n):\n                new_row.append(matrix[j][i])\n            reordered_matrix.append(new_row)\n        for line in reordered_matrix:\n            print(' '.join([str(el) for el in line]))\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = [int(x) for x in stdin.split()]\n    projects = []\n    for i in range(n):\n        project = [int(x) for x in stdin.split()]\n        projects.append(project)\n    if sum(project[1] for project in projects) < rating:\n        return \"NO\"\n    for i in range(n):\n        current_rating = rating\n        project = projects[i]\n        current_rating -= project[1]\n        if current_rating < 0:\n            return \"NO\"\n        current_rating += project[0]\n        for j in range(i+1, n):\n            project = projects[j]\n            current_rating += project[1]\n            if current_rating < 0:\n                return \"NO\"\n            current_rating -= project[0]\n        if current_rating < 0:\n            return \"NO\"\n    return \"YES\"\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return ''"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(project_rating: int, change: int) -> bool:\n        if project_rating < 0:\n            return False\n        if change < 0:\n            return False\n        return True\n\n    def is_valid_1(project_rating: int, change: int) -> bool:\n        if project_rating >= 0:\n            return False\n        if change > 0:\n            return False\n        return True\n\n    n, r = [int(x) for x in stdin.split()]\n    projects = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        projects.append((a, b))\n\n    projects = sorted(projects, key=lambda x: x[1], reverse=True)\n\n    for a, b in projects:\n        if not is_valid(r, b):\n            return \"NO\"\n        if not is_valid_1(r + a, -b):\n            return \"NO\"\n\n    return \"YES\"\n\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    a, b = map(int, data[0].split())\n    N = int(data[1])\n    rating = map(int, data[2].split())\n    assert a > 0 and a <= 30000\n    assert b >= -300 and b <= 300\n    assert 1 <= N <= a\n    assert len(rating) == N\n    return 'YES' if (b > 0 and rating[0] >= 0) else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rating = 0\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        rating += a\n        if rating < r:\n            rating += b\n        else:\n            break\n    if rating < r:\n        return 'NO'\n    else:\n        return 'YES'\n\nassert solution('''4 6\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0\n''') == 'NO'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2\n''') == 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        projects.append(tuple(map(int, stdin.split())))\n    projects.sort(key = lambda x: x[0])\n    rating = [r]\n    for a, b in projects:\n        if b < 0:\n            return \"NO\"\n        rating.append(max(0, min(rating[-1] - b, a)))\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Reads a line with four integers, $n$ and $r$ and two integers, $a_1$ and $b_1$, $a_2$ and $b_2$, $a_3$ and $b_3$ and $a_4$ and $b_4$ \u2014 the number of projects, the initial rating of Polycarp, and a, b, c, and d, respectively \u2014 Polycarp's rating for each project. Then prints \"YES\" or \"NO\".\n    '''\n    n, r = map(int, stdin.split())\n    a, b, c, d = map(int, stdin.split())\n    rating = 0\n    for i in range(n):\n        rating += a * i + b\n    if rating < 0:\n        print(\"NO\")\n    elif rating > r:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(n) for n in stdin.strip().split(\" \")]\n    c = [int(c) for c in stdin.strip().split(\" \")]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    res[0] = 1\n    res[n + 1] = 1\n    for i in range(1, len(c)):\n        # res[i] = c[i - 1]\n        res[i] = c[i - 1] + i\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    # res = [0] * (n + 2)\n    # for i in range(1, len(c)):\n    #     res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res[i] = c[i - 1]\n    res = [0] * (n + 2)\n    for i in range(1, len(c)):\n        res"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    for i in range(m):\n        if c[i] > n:\n            return \"NO\"\n    for i in range(m):\n        if c[i] == 0:\n            continue\n        elif c[i] == 1:\n            for j in range(i+1, m):\n                if c[j] < c[i]:\n                    break\n            else:\n                return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split()]\n    c = [int(i) for i in stdin.split()]\n\n    if n + 1 == m:\n        return \"YES\"\n    else:\n        if n + 1 > m:\n            return \"NO\"\n        a = [0] * (n + 2)\n        i = 0\n        j = 0\n        while j < m:\n            a[j + 1] = c[j]\n            j += 1\n        for k in range(n + 1, n + d + 1):\n            if a[i]!= 1:\n                a[k] = 0\n            else:\n                a[k] = a[i]\n            i += 1\n\n        return \"YES\" + \" \".join(map(str, a))\n\n\nassert solution(input) == input\nprint(solution(input))\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i]] = i + 1\n    return 'YES' if a[n + 1] == n + 1 else 'NO'"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = [0] * n\n    c = list(map(int, stdin.split()))\n    a[0] = c[0]\n    for i in range(1, m):\n        a[i] = c[i] + a[i - 1]\n    if a[n - 1] < n + 1:\n        return 'NO'\n    a = [0] + a\n    for i in range(m, len(a)):\n        a[i] += a[i - m]\n    return 'YES\\n' +''.join(map(str, a))\n\nn, m, d = map(int, stdin.split())\na = [0] * n\nc = list(map(int, stdin.split()))\na[0] = c[0]\nfor i in range(1, m):\n    a[i] = c[i] + a[i - 1]\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if n + 2 < sum(a) or n + 1 < m:\n        return \"NO\"\n    d = [[x, y] for x, y in zip(a, a[1:] + [a[0]])]\n    for i in range(n + 2):\n        for j in range(m):\n            if i in [0, n + 1]:\n                d[j][0] = 0\n                continue\n            d[j][0] = j + 1\n    result = [0] * (n + 2)\n    result[n + 1] = 1\n    for i in range(n + 1):\n        for j in range(m):\n            if d[j][0] < d[j][1]:\n                result[d[j][0]] = j + 1\n    return \"YES\" if result == a else \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] + [0] * m\n    \n    for i in range(1, m + 1):\n        c[i] = a[i - 1] + c[i - 1]\n    \n    a = [0] + a + [0]\n    \n    def is_possible(x):\n        if x > n:\n            return False\n        \n        for i in range(m + 1):\n            if a[x + i]!= i + 1:\n                return False\n        \n        return True\n    \n    for _ in range(d):\n        if not is_possible(n):\n            return 'NO'\n        \n        # move the platforms and check if they are still valid\n        for i in range(m + 1):\n            a[i] = (a[i] + c[i]) % (n + 1)\n            if not is_possible(a[i]):\n                return 'NO'\n    \n    return 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split('\\n')\n\n    n, m, d = list(map(int, inputs[0].strip().split()))\n    arr = list(map(int, inputs[1].strip().split()))\n\n    arr = [0] + arr + [n+1]\n\n    plat_to_idx = {i: x for i, x in enumerate(arr)}\n\n    indices = []\n    curr = 0\n    for x in arr:\n        for i in range(curr, x):\n            indices.append(i)\n        curr = x\n\n    res = [-1] * (n+2)\n    for i in indices:\n        res[i] = plat_to_idx[i]\n\n    return 'YES' if res[-1] == n+1 else 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i] + 1] = i + 1\n    for i in range(n):\n        if a[i + 1] == 0:\n            a[i + 1] = 0\n        else:\n            a[i + 1] = a[i] + 1\n    if a[n + 1] == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nsolution(\"7 3 2\") == \"YES\"\nsolution(\"10 1 11\") == \"YES\"\nsolution(\"10 1 5\") == \"YES\"\nsolution(\"100 1 1001\") == \"YES\"\nsolution(\"1 1 1 1 1 1 1 1 1 1\") == \"YES\"\nsolution
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    while True:\n        if s == t:\n            return 0\n        if len(s) > len(t):\n            s = s[1:]\n        else:\n            t = t[1:]"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def lcs(s1, s2):\n        n1, n2 = len(s1), len(s2)\n        dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n        max_len = 0\n        for i in range(n1):\n            for j in range(n2):\n                if s1[i] == s2[j]:\n                    dp[i + 1][j + 1] = dp[i][j] + 1\n                    max_len = max(max_len, dp[i + 1][j + 1])\n        return max_len\n\n    s = stdin.strip()\n    t = stdin.strip()\n\n    return max(lcs(s, t), lcs(t, s))\n\n\nassert solution(\"bbaba\", \"bb\") == 3\nassert solution(\"baaba\", \"ab\") == 2\nassert solution(\"abcde\", \"abcde\") == 0\nassert solution(\"asdfasdf\", \"fasd\") == 3\nassert solution(\"abcdda\", \"abcdd\") == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\", 2)[0], stdin.split(\"\\n\", 2)[1]\n    i, j, m = 0, 0, 0\n\n    while j < len(s):\n        if s[j]!= t[i]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n            i += 1\n\n        if i == len(t):\n            i = 0\n            m = max(m, j - i)\n\n    return m\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for j in range(1, m + 1):\n        for i in range(1, n + 1):\n            if t[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return str(solution_bf(s, t))\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert (solution('''bbaba\nbb\n''') == '3')\nassert (solution('''baaba\nab\n''') == '2')\nassert (solution('''abcde\nabcde\n''') == '0')\nassert (solution('''asdfasdf\nfasd\n''') == '3')\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a substring that is the longest subsequence of s that is a subsequence of t,\n    that is the longest substring that is a substring of s that is a subsequence of t.\n    \"\"\"\n    text = stdin.strip()\n    target = stdin.strip()\n    max_len = 0\n    max_len_index = 0\n\n    for i in range(1, len(text) + 1):\n        for j in range(len(text) - i + 1):\n            if text[j:j + i] == target:\n                if j > max_len_index:\n                    max_len_index = j\n                    max_len = i\n    return max_len\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = float(stdin.strip())\n    count = 0\n    while num >= 0:\n        num -= 1\n        count += 1\n    return str(count) + \" \" + str(count)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    # TODO: your code here\n    return \"\""
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n    x = float(stdin.strip())\n    n = int(sqrt(x))\n    for i in range(1, n + 1):\n        if x % i == 0:\n            a = i\n            b = x // i\n            if a < b:\n                return str(a) + \" \" + str(b)\n            return str(b) + \" \" + str(a)\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string representation of a solution to the given puzzle\"\"\"\n    return str(2) +'' + str(3)\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdout = \"\"\n    x = float(stdin)\n    if x < 1.0 or x > 4.0:\n        return stdout\n    for a in range(1, 10):\n        for b in range(1, 10):\n            if x == a / b:\n                stdout += \"{0} {1}\\n\".format(a, b)\n    return stdout"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin.replace(\",\", \".\"))\n    if (x > 4.0):\n        return str(10) + \" \" + str(10)\n    else:\n        f = 1.0\n        g = 1.0\n        h = 1.0\n        i = 1.0\n        while (i < x):\n            j = 1.0\n            k = 1.0\n            l = 1.0\n            m = 1.0\n            while (j < x):\n                m = m + 2.0\n                j = j * f\n            while (k < x):\n                l = l + 2.0\n                k = k * f\n            while (l < x):\n                m = m + 2.0\n                l = l * f\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n                m = m + 2.0\n                if (m < x):\n                    n = 1.0\n                    while (n < x):\n                        n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):\n                n = 1.0\n                while (n < x):\n                    n = n * g\n            while (m < x):"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(n) + \" \" + str(n*n)\n\n\nassert(solution('') == '')\nassert(solution('-1.0') == '1 0')\nassert(solution('1.5') == '1 3')\nassert(solution('1.83589') == '9 9')\nassert(solution('2.0') == '3 2')\nassert(solution('3.14159') == '10 9')\nassert(solution('4.0') == '9 9')\nassert(solution('5.0') == '4 4')\nassert(solution('6.0') == '6 6')\nassert(solution('7.0') == '9 3')\nassert(solution('8.0') == '9 1')\nassert(solution('9.0') == '2 1')\nassert(solution('10.0') == '3 2')\nassert(solution('11.0') == '4 4')\nassert(solution('12.0') == '5 5')\nassert(solution('13.0') == '6 6')\nassert(solution('14.0') == '9 3')\nassert(solution('15.0') == '9 1')\nassert(solution('16.0') == '2 1')\nassert(solution('17.0') == '3 2')\nassert(solution('18.0') == '4 4')\nassert(solution('19.0') == '5 5')\nassert(solution('20.0') == '6 6')\nassert(solution('21.0') == '7 7')\nassert(solution('22.0') == '8 8')\nassert(solution('23.0') == '9 9')\nassert(solution('24.0') == '10 10')\nassert(solution('25.0') == '11 11')\nassert(solution('26.0') == '12 12')\nassert(solution('27.0') == '13 13')\nassert(solution('28.0') == '14 14')\nassert(solution('29.0') == '15 15')\nassert(solution('30.0') == '16 16')\nassert(solution('31.0') == '17 17')\nassert(solution('32.0') == '18 18')\nassert(solution('33.0') == '19 19')\nassert(solution('34.0') == '20 20')\nassert(solution('35.0') == '21 21')\nassert(solution('36.0') == '22 22')\nassert(solution('37.0') == '23 23')\nassert(solution('38.0') == '24 24')\nassert(solution('39.0') == '25 25')\nassert(solution('40.0') == '26 26')\nassert(solution('41.0') == '27 27')\nassert(solution('42.0') == '28 28')\nassert(solution('43.0') == '29 29')\nassert(solution('44.0') == '30 30')\nassert(solution('45.0') == '31 31')\nassert(solution('46.0') == '32 32')\nassert(solution('47.0') == '33 33')\nassert(solution('48.0') == '34 34')\nassert(solution('49.0') == '35 35')\nassert(solution('50.0') == '36 36')\nassert(solution('51.0') == '37 37')\nassert(solution('52.0') == '38 38')\nassert(solution('53.0') == '39 39')\nassert(solution('54.0') == '40 40')\nassert(solution('55.0') == '41 41')\nassert(solution('56.0') == '42 42')\nassert(solution('57.0') == '43 43')\nassert(solution('58.0') == '44 44')\nassert(solution('59.0') == '45 45')\nassert(solution('60.0') == '46 46')\nassert(solution('61.0') == '47 47')\nassert(solution('62.0') == '48 48')\nassert(solution('63.0') == '49 49')\nassert(solution('64.0') == '50 50')\nassert(solution('65.0') == '51 51')\nassert(solution('66.0') == '52 52')\nassert(solution('67.0') == '53 53')\nassert(solution('68.0') == '54 54')\nassert(solution('69.0') == '55 55')\nassert(solution('70.0') == '56 56')\nassert(solution('71.0') == '57 57')\nassert(solution('72.0') == '58 58')\nassert(solution('73.0') == '59 59')\nassert(solution('74.0') == '60 60')\nassert(solution('75.0') == '61 61')\nassert(solution('76.0') == '62 62')\nassert(solution('77.0') == '63 63')\nassert(solution('78.0') == '64 64')\nassert(solution('79.0') == '65 65')\nassert(solution('80.0') == '66 66')\nassert(solution('81.0') == '67 67')\nassert(solution('82.0') == '68 68')\nassert(solution('83.0') == '69 69')\nassert(solution('84.0') == '70 70')\nassert(solution('85.0') == '71 71')\nassert(solution('86.0') == '72 72')\nassert(solution('87.0') == '73 73')\nassert(solution('88.0') == '74 74')\nassert(solution('89.0') == '75 75')\nassert(solution('90.0') == '76 76')\nassert(solution('91.0') == '77 77')\nassert(solution('92.0') == '78 78')\nassert(solution('93.0') == '79 79')\nassert(solution('94.0') == '80 80')\nassert(solution('95.0') == '81 81')\nassert(solution('96.0') == '82 82')\nassert(solution('97.0') == '83 83')\nassert(solution('98.0') == '84 84')\nassert(solution('99.0') == '85 85')\nassert(solution('100.0') == '86 86')\nassert(solution('101.0') == '87 87')\nassert(solution('102.0') == '88 88')\nassert(solution('103.0') == '89 89')\nassert(solution('104.0') == '90 90')\nassert(solution('105.0') == '91 91')\nassert(solution('106.0') == '92 92')\nassert(solution('107.0') == '93 93')\nassert(solution('108.0') == '94 94')\nassert(solution('109.0') == '95 95')\nassert(solution('110.0') == '96 96')\nassert(solution('111.0') == '97 97')\nassert(solution('112.0') == '98 98')\nassert(solution('113.0') == '99 99')\nassert(solution('114.0') == '100 100')\nassert(solution('115.0') == '101 101')\nassert(solution('116.0') == '102 102')\nassert(solution('117.0') == '103 103')\nassert(solution('118.0') == '104 104')\nassert(solution('119.0') == '105 105')\nassert(solution('120.0') == '106 106')\nassert(solution('121.0') == '107 107')\nassert(solution('122.0') == '108 108')\nassert(solution('123.0') == '109 109')"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    for a in range(1,10):\n        for b in range(1,10):\n            if a**2 + b**2 == x:\n                return \"%d %d\" % (a,b)\n    return \"\"\n\nassert(solution(\"1.200000\") == \"3 2\")\nassert(solution(\"2.572479\") == \"10 3\")\nassert(solution(\"4.024922\") == \"9 9\")\nassert(solution(\"3.141592\") == \"2 1\")\nassert(solution(\"2.029932\") == \"2 1\")\nassert(solution(\"9.077547\") == \"3 1\")\nassert(solution(\"0.999999\") == \"2 1\")\nassert(solution(\"5.999123\") == \"2 2\")\nassert(solution(\"0.9999999\") == \"1 1\")\nassert(solution(\"-1.000001\") == \"1 1\")\nassert(solution(\"-5.999999\") == \"2 1\")\nassert(solution(\"-1.000001\") == \"1 1\")\nassert(solution(\"0.9999999\") == \"1 1\")\nassert(solution(\"0.999999\") == \"1 1\")\nassert(solution(\"0.9999\") == \"1 1\")\nassert(solution(\"0.5\") == \"1 1\")\nassert(solution(\"1.0\") == \"1 1\")\nassert(solution(\"5.0\") == \"2 2\")\nassert(solution(\"2.0\") == \"2 1\")\nassert(solution(\"5.99982\") == \"2 2\")\nassert(solution(\"4.0\") == \"9 9\")\nassert(solution(\"1.25\") == \"3 1\")\nassert(solution(\"1.0\") == \"1 1\")\nassert(solution(\"0.0\") == \"1 1\")\nassert(solution(\"-1.0\") == \"1 1\")\nassert(solution(\"-0.0\") == \"1 1\")\nassert(solution(\"0.1\") == \"1 1\")\nassert(solution(\"0.5\") == \"1 1\")\nassert(solution(\"1.5\") == \"2 2\")\nassert(solution(\"0.999999\") == \"1 1\")\nassert(solution(\"-0.999999\") == \"1 1\")\nassert(solution(\"0.9999999\") == \"1 1\")\nassert(solution(\"0.99999\") == \"1 1\")\nassert(solution(\"0.99998\") == \"1 1\")\nassert(solution(\"0.9998\") == \"1 1\")\nassert(solution(\"0.9997\") == \"1 1\")\nassert(solution(\"0.9996\") == \"1 1\")\nassert(solution(\"0.999\") == \"1 1\")\nassert(solution(\"0.998\") == \"1 1\")\nassert(solution(\"0.997\") == \"1 1\")\nassert(solution(\"0.996\") == \"1 1\")\nassert(solution(\"0.995\") == \"1 1\")\nassert(solution(\"0.9934\") == \"1 1\")\nassert(solution(\"0.99\") == \"1 1\")\nassert(solution(\"0.98\") == \"1 1\")\nassert(solution(\"0.9\") == \"1 1\")\nassert(solution(\"0.8\") == \"1 1\")\nassert(solution(\"0.7\") == \"1 1\")\nassert(solution(\"0.6\") == \"1 1\")\nassert(solution(\"0.5\") == \"1 1\")\nassert(solution(\"0.4\") == \"1 1\")\nassert(solution(\"0.3\") == \"1 1\")\nassert(solution(\"0.2\") == \"1 1\")\nassert(solution(\"0.1\") == \"1 1\")\nassert(solution(\"0.0\") == \"1 1\")\nassert(solution(\"-0.1\") == \"1 1\")\nassert(solution(\"-0.2\") == \"1 1\")\nassert(solution(\"-0.3\") == \"1 1\")\nassert(solution(\"-0.4\") == \"1 1\")\nassert(solution(\"-0.5\") == \"1 1\")\nassert(solution(\"-0.6\") == \"1 1\")\nassert(solution(\"-0.7\") == \"1 1\")\nassert(solution(\"-0.8\") == \"1 1\")\nassert(solution(\"-0.9\") == \"1 1\")\nassert(solution(\"-0.99\") == \"1 1\")\nassert(solution(\"-0.99999\") == \"1 1\")\nassert(solution(\"-0.99998\") == \"1 1\")\nassert(solution(\"-0.9998\") == \"1 1\")\nassert(solution(\"-0.9997\") == \"1 1\")\nassert(solution(\"-0.9996\") == \"1 1\")\nassert(solution(\"-0.999\") == \"1 1\")\nassert(solution(\"-0.998\") == \"1 1\")\nassert(solution(\"-0.997\") == \"1 1\")\nassert(solution(\"-0.996\") == \"1 1\")\nassert(solution(\"-0.995\") == \"1 1\")\nassert(solution(\"-0.9934\") == \"1 1\")\nassert(solution(\"-0.99\") == \"1 1\")\nassert(solution(\"-0.98\") == \"1 1\")\nassert(solution(\"-0.9\") == \"1 1\")\nassert(solution(\"-0.8\") == \"1 1\")\nassert(solution(\"-0.7\") == \"1 1\")\nassert(solution(\"-0.6\") == \"1 1\")\nassert(solution(\"-0.5\") == \"1 1\")\nassert(solution(\"-0.4\") == \"1 1\")\nassert(solution(\"-0.3\") == \"1 1\")\nassert(solution(\"-0.2\") == \"1 1\")\nassert(solution(\"-0.1\") == \"1 1\")\nassert(solution(\"-0.0\") == \"1 1\")\nassert(solution(\"-1.0\") == \"1 1\")\nassert(solution(\"-0.99999\") == \"1 1\")\nassert(solution(\"-0.99998\") == \"1 1\")\nassert(solution(\"-0.9998\") == \"1 1\")\nassert(solution(\"-0.9997\") == \"1 1\")\nassert(solution(\"-0.9996\") == \"1 1\")\nassert(solution(\"-0.999\") == \"1 1\")\nassert(solution(\"-0.998\") == \"1 1\")\nassert(solution(\"-0.997\") == \"1 1\")\nassert(solution(\"-0.996\") == \"1 1\")\nassert(solution(\"-0.995\") == \"1 1\")\nassert(solution(\"-0.9934\") == \"1 1\")\nassert(solution(\"-0.99\") == \"1 1\")\nassert(solution(\"-0.98\") == \"1 1\")\nassert(solution(\"-0.9\") == \"1 1\")\nassert(solution(\"-0.8\") == \"1 1\")\nassert(solution(\"-0.7\") == \"1 1\")\nassert(solution(\"-0.6\") == \"1 1\")\nassert(solution(\"-0.5\") == \"1 1\")\nassert(solution(\"-0.4\") == \"1 1\")\nassert(solution(\"-0.3\") == \"1 1\")\nassert(solution(\"-0.2\") == \"1 1\")\nassert(solution(\"-0.1\") == \"1 1\")\nassert(solution(\"-0.0\") == \"1 1\")\nassert(solution(\"0.0\") == \"1 1\")\nassert(solution(\"0.1\") == \"1 1\")\nassert(solution(\"0.2\") == \"1 1\")\nassert(solution(\"0.3\") == \"1 1\")\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    return str(x//1) +'' + str(x % 1)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The key to this problem is to go to the top of the triangle. Then, find the next'step' and solve it, and repeat.\n\n    We can move down by taking the value of the current'step' and the next'step' (in the next column). \n    For example, if we are at A, we can move down by A + A/2, or A/2 + A/4 = A/2 + A/4. \n    \"\"\"\n    x = float(stdin)\n    rows = int(x ** 0.5) + 1\n    cols = (rows + 1) // 2\n    if rows % 2 == 0:\n        cols -= 1\n\n    last_col = 1\n    for row in range(1, rows):\n        col = row + last_col\n        step = col / 2\n        if col == cols:\n            step += last_col\n            last_col = step\n        elif col == last_col:\n            last_col = step\n        else:\n            last_col = step\n    return f'{last_col:d} {step:d}'"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"NO\"\n    elif d <= 3:\n        return \"NO\"\n    else:\n        result = [0] * (n + 1)\n        for _ in range(n - 1):\n            a, b = [int(x) for x in stdin.split()]\n            if result[a] < k and result[b] < k:\n                result[a] += 1\n                result[b] += 1\n                result[a + 1] = max(result[a + 1], result[a] + result[b])\n                result[b + 1] = max(result[b + 1], result[b] + result[a])\n            elif result[a] >= k and result[b] >= k:\n                return \"NO\"\n    return \"YES\"\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split(\" \"))\n    if n - 1 > k * (d - 1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        tree = [0] * (n - 1)\n        for i in range(1, n - 1):\n            tree[i - 1] = [i, i + 1]\n        print(n - 1, end=\" \")\n        print(*tree, sep=\" \")\n        print(*tree[::-1], sep=\" \")\n        print(n - 1, end=\" \")\n        print(*tree[::-1], sep=\" \")\n        print(*tree[::-1], sep=\" \")\n        print(*tree[::-1], sep=\" \")\n        print(*tree[::-1], sep=\" \")\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = (int(i) for i in stdin.split())\n    if d > 4 * 10 ** 5 or k > 4 * 10 ** 5 or n - 1 > 4 * 10 ** 5:\n        return \"NO\"\n\n    trees = []\n    visited = [False] * n\n\n    def dfs(u):\n        visited[u] = True\n\n        for v in range(n):\n            if not visited[v] and (u, v) in edges:\n                dfs(v)\n\n    edges = []\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if (i, j) in edges or (j, i) in edges:\n                continue\n\n            edges.append((i, j))\n            if len(edges) == d - 1:\n                break\n            if len(edges) == k - 1:\n                break\n\n    for i in range(n):\n        dfs(i)\n        if visited[i]:\n            trees.append(i)\n\n    if len(trees)!= n - 1:\n        return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(f\"{i} {j}\" for i, j in edges)"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(n) for n in stdin.split()]\n    graph = [[] for _ in range(n)]\n    vertices = [set() for _ in range(n + 1)]\n    for _ in range(n - 1):\n        v1, v2 = [int(n) for n in stdin.split()]\n        graph[v1 - 1].append(v2)\n        graph[v2 - 1].append(v1)\n        vertices[v1].add(v2)\n        vertices[v2].add(v1)\n    if n - 1 < d <= 4 * 10 ** 5:\n        if k <= d + 1:\n            for v in range(n - 1):\n                if len(graph[v]) <= k:\n                    print(f'{v + 1} {n}')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, d, k = map(int, lines[0].split())\n    print('NO' if d > (n - 1) * (n - 2) // 2 else 'YES')\n    if d > (n - 1) * (n - 2) // 2:\n        return 'NO'\n    edges = []\n    for i in range(1, n):\n        edges.append((i, i + 1))\n    d = 1\n    while edges:\n        u, v = edges.pop(0)\n        d += 1\n        if d > k:\n            break\n        edges.append((v, u))\n    print(' '.join(map(str, edges)))\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n > 2 * d:\n        return \"NO\"\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        if u == v:\n            continue\n        edges.append((u, v))\n    result = check_tree(edges, n, d, k)\n    if result:\n        print(\"YES\")\n        for u, v in edges:\n            print(u, v)\n    else:\n        print(\"NO\")\n    return None\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the question.\n    \"\"\"\n    lines = stdin.strip().split('\\n')\n    n, d, k = map(int, lines[0].split())\n    if n - 1 > d * (k - 1):\n        return 'NO'\n    n -= 1\n    result = [n, ]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        if u > v:\n            u, v = v, u\n        if u == result[0] and v == result[-1]:\n            result.pop()\n            result.append(u)\n        else:\n            result.append(v)\n            result.append(u)\n    return 'YES\\n' + '\\n'.join(map(str, result))"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, d, k) = list(map(int, stdin.split()))\n    if n - 1 > d * k:\n        return \"NO\"\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = list(map(int, stdin.split()))\n        tree[u - 1].append(v - 1)\n        tree[v - 1].append(u - 1)\n    for i in range(n):\n        if len(tree[i]) > d - 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.strip().split(' '))\n    edges = []\n    if n == d:\n        return \"NO\"\n    for _ in range(n - 1):\n        i, j = map(int, stdin.strip().split(' '))\n        edges.append((i, j))\n    if d == 1:\n        return \"YES\"\n    if n - 1 <= k * (k - 1) / 2:\n        return \"NO\"\n    if n - 1 <= k:\n        return \"YES\"\n    max_n = (d - 1) / 2\n    if max_n <= k:\n        return \"YES\"\n    max_n = (max_n + k - 1) / k\n    if max_n <= k:\n        return \"YES\"\n    max_n = (max_n + k - 1) / k\n    if max_n <= k:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if (d - 2 * k) % (n - 1)!= 0:\n        return \"NO\"\n    result = []\n    v = list(range(1, n + 1))\n    for i in range(1, n):\n        for j in range(1, i):\n            if (i + j) % 2 == 0:\n                result.append((i, j))\n    if len(result) == n - 1:\n        return \"YES\\n{}\".format('\\n'.join(map(str, result)))\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = [int(x) for x in stdin.split()]\n    a = m - n\n    b = n - x\n    string = ''\n    if a > 0:\n        string = '0' * a + '1' * b\n    else:\n        string = '1' * a + '0' * b\n    return string"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The example in the problem is shown below.\n    010000\n    010100\n    101100\n    110100\n    \"\"\"\n    (a, b, x) = tuple(map(int, stdin.split()))\n    m = max(a, b)\n    result = ['0'] * a + ['1'] * b\n    for i in range(1, m):\n        if x == 0:\n            if result[i - 1] == '1':\n                result[i] = '0'\n                x = 1\n            else:\n                result[i] = '1'\n                x = 0\n        else:\n            if result[i - 1] == '1':\n                result[i] = '0'\n                x -= 1\n            else:\n                result[i] = '1'\n                x -= 1\n    return ''.join(result)\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(x) for x in stdin.split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if i < a:\n            s += '0'\n        elif i < a + b:\n            s += '1'\n        else:\n            s += '0'\n    return s\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\na,b,x = map(int, stdin.split())\n\ns = '0' * a + '1' * b + '0' * x\n\nprint(s)\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x > a + b:\n        return \"\"\n    ans = \"0\" * a + \"1\" * b + \"0\" * (x - a - b)\n    return \"\".join([ans[i] for i in range(len(ans)) if i % 2 == 0])"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    s = \"\"\n    if a + b < x:\n        return s\n    s = \"1\" * a\n    while len(s) < x:\n        s += \"0\"\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert solution(\"1 1 1\") == \"1100\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\nassert solution(\"5 3 9\") == \"1111111\"\nassert solution(\"5 2 6\") == \"1110110\"\nassert solution(\"5 2 8\") == \"1110110\"\nassert solution(\"5 3 5\") == \"1110010\"\nassert solution(\"5 3 7\") == \"1110010\"\nassert solution(\"5 2 0\") == \"1110010\"\nassert solution(\"5 2 1\") == \"1110010\"\nassert solution(\"5 2 2\") == \"1110010\"\nassert solution(\"5 2 3\") == \"1110010\"\nassert solution(\"5 2 4\") == \"1110010\"\nassert solution(\"5 2 5\") == \"1110010\"\nassert solution(\"5 2 6\") == \"1110010\"\nassert solution(\"5 2 7\") == \"1110010\"\nassert solution(\"5 2 8\") == \"1110010\"\nassert solution(\"5 2 9\") == \"1110010\"\nassert solution(\"5 2 10\") == \"1110010\"\nassert solution(\"5 3 6\") == \"11010100\"\nassert solution(\"5 3 9\") == \"11101100\"\nassert solution(\"5 3 10\") == \"11101100\"\nassert solution(\"5 3 11\") == \"11101100\"\nassert solution(\"5 2 0\") == \"11101100\"\nassert solution(\"5 2 1\") == \"11101100\"\nassert solution(\"5 2 2\") == \"11101100\"\nassert solution(\"5 2 3\") == \"11101100\"\nassert solution(\"5 2 4\") == \"11101100\"\nassert solution(\"5 2 5\") == \"11101100\"\nassert solution(\"5 2 6\") == \"11101100\"\nassert solution(\"5 2 7\") == \"11101100\"\nassert solution(\"5 2 8\") == \"11101100\"\nassert solution(\"5 2 9\") == \"11101100\"\nassert solution(\"5 2 10\") == \"11101100\"\nassert solution(\"5 3 6\") == \"11010100\"\nassert solution(\"5 3 9\") == \"11101100\"\nassert solution(\"5 3 10\") == \"11101100\"\nassert solution(\"5 3 11\") == \"11101100\"\nassert solution(\"5 2 0\") == \"11101100\"\nassert solution(\"5 2 1\") == \"11101100\"\nassert solution(\"5 2 2\") == \"11101100\"\nassert solution(\"5 2 3\") == \"11101100\"\nassert solution(\"5 2 4\") == \"11101100\"\nassert solution(\"5 2 5\") == \"11101100\"\nassert solution(\"5 2 6\") == \"11101100\"\nassert solution(\"5 2 7\") == \"11101100\"\nassert solution(\"5 2 8\") == \"11101100\"\nassert solution(\"5 2 9\") == \"11101100\"\nassert solution(\"5 2 10\") == \"11101100\"\nassert solution(\"5 3 6\") == \"11010100\"\nassert solution(\"5 3 9\") == \"11101100\"\nassert solution(\"5 3 10\") == \"11101100\"\nassert solution(\"5 3 11\") == \"11101100\"\nassert solution(\"5 2 0\") == \"11101100\"\nassert solution(\"5 2 1\") == \"11101100\"\nassert solution(\"5 2 2\") == \"11101100\"\nassert solution(\"5 2 3\") == \"11101100\"\nassert solution(\"5 2 4\") == \"11101100\"\nassert solution(\"5 2 5\") == \"11101100\"\nassert solution(\"5 2 6\") == \"11101100\"\nassert solution(\"5 2 7\") == \"11101100\"\nassert solution(\"5 2 8\") == \"11101100\"\nassert solution(\"5 2 9\") == \"11101100\"\nassert solution(\"5 2 10\") == \"11101100\"\nassert solution(\"5 3 6\") == \"11010100\"\nassert solution(\"5 3 9\") == \"11101100\"\nassert solution(\"5 3 10\") == \"11101100\"\nassert solution(\"5 3 11\") == \"11101100\"\nassert solution(\"5 2 0\") == \"11101100\"\nassert solution(\"5 2 1\") == \"11101100\"\nassert solution(\"5 2 2\") == \"11101100\"\nassert solution(\"5 2 3\") == \"11101100\"\nassert solution(\"5 2 4\") == \"11101100\"\nassert solution(\"5 2 5\") == \"11101100\"\nassert solution(\"5 2 6\") == \"11101100\"\nassert solution(\"5 2 7\") == \"11101100\"\nassert solution(\"5 2 8\") == \"11101100\"\nassert solution(\"5 2 9\") == \"11101100\"\nassert solution(\"5 2 10\") == \"11101100\"\nassert solution(\"5 3 6\") == \"11010100\"\nassert solution(\"5 3 9\") == \"11101100\"\nassert solution(\"5 3 10\") == \"11101100\"\nassert solution(\"5 3 11\") == \"11101100\"\nassert solution(\"5 2 0\") == \"11101100\"\nassert solution(\"5 2 1\") == \"11101100\"\nassert solution(\"5 2 2\") == \"11101100\"\nassert solution(\"5 2 3\") == \"11101100\"\nassert solution(\"5 2 4\") == \"11101100\"\nassert solution(\"5 2 5\") == \"11101100\"\nassert solution(\"5 2 6\") == \"11101100\"\nassert solution(\"5 2 7\") == \"11101100\"\nassert solution(\"5 2 8\") == \"11101100\"\nassert solution(\"5 2 9\") == \"11101100\"\nassert solution(\"5 2 10\") == \"11101100\"\nassert solution(\"5 3 6\") == \"11010100\"\nassert solution(\"5 3 9\") == \"11101100\"\nassert solution(\"5 3 10\") == \"11101100\"\nassert solution(\"5 3 11\") == \"11101100\"\nassert solution(\"5 2 0\") == \"11101100\"\nassert solution(\"5 2 1\") == \"11101100\"\nassert solution(\"5 2 2\") == \"11101100\"\nassert solution(\"5 2 3\") == \"11101100\"\nassert solution(\"5 2 4\") == \"11101100\"\nassert solution(\"5 2 5\") == \"11101100\"\nassert solution(\"5 2 6\") == \"11101100\"\nassert solution(\"5 2 7\") == \"11101100\"\nassert solution(\"5 2 8\") == \"11101100\"\nassert solution(\"5 2 9\") == \"11101100\"\nassert solution(\"5 2 10\") == \"11101100\"\nassert solution(\"5 3 6\") == \"11010100\"\nassert solution(\"5 3 9\") == \"11101100\"\nassert solution(\"5 3 10\") == \"11101100\"\nassert solution(\"5 3 11\") == \"11101100\"\nassert solution(\"5 2 0\") == \"11101100\"\nassert solution(\"5 2 1\") == \"11101100\"\nassert solution(\"5 2 2\") == \"11101100\"\nassert solution(\"5 2 3\")"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n\n    ones = a - (b + 1)\n    zeros = b - ones\n\n    s = \"\"\n\n    for i in range(ones):\n        s += \"0\"\n    for i in range(zeros):\n        s += \"1\"\n    for i in range(x):\n        s += \"0\"\n\n    return s"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n = int(s)\n\n    s = set(s)\n    t = set(t)\n\n    if len(s)!= 1 or len(t)!= 1:\n        return \"NO\"\n\n    if \"a\" not in s or \"a\" not in t or \"b\" not in s or \"b\" not in t or \"c\" not in s or \"c\" not in t:\n        return \"NO\"\n\n    if len(s) + len(t) > 3 * n:\n        return \"NO\"\n\n    res = [\"a\", \"b\", \"c\"] * n\n    i = 0\n    while i < n:\n        if res[i] == \"a\":\n            res[i] = s.pop()\n        elif res[i] == \"b\":\n            res[i] = t.pop()\n        elif res[i] == \"c\":\n            res[i] = \"a\"\n            res[i+1] = \"b\"\n            res[i+2] = \"c\"\n        i += 1\n    return \"YES\\n\".join(res)"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Getting input\n    n = stdin.readline()\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # Getting lengths\n    n = int(n)\n    s_length = len(s)\n    t_length = len(t)\n    if n == 1:\n        return \"YES\"\n\n    # Creating the space\n    space = [0] * n\n    for i in range(n):\n        space[i] = [0] * n\n\n    # Creating the cost\n    cost = [0] * n\n    for i in range(s_length):\n        if s[i] == 'a':\n            cost[0][i] = space[0][i] + 1\n        else:\n            cost[0][i] = space[0][i]\n\n    for i in range(1, n):\n        for j in range(s_length):\n            if s[j] == 'a':\n                cost[i][j] = max(cost[i - 1][j], space[i - 1][j] + 1)\n            else:\n                cost[i][j] = max(cost[i - 1][j], space[i - 1][j])\n\n    for i in range(t_length):\n        if t[i] == 'a':\n            cost[n - 1][i] = space[n - 1][i] + 1\n        else:\n            cost[n - 1][i] = space[n - 1][i]\n\n    for i in range(n - 2, -1, -1):\n        for j in range(t_length):\n            if t[j] == 'a':\n                cost[i][j] = max(cost[i + 1][j], space[i + 1][j] + 1)\n            else:\n                cost[i][j] = max(cost[i + 1][j], space[i + 1][j])\n\n    for i in range(n):\n        for j in range(n):\n            if cost[i][j] <= n:\n                space[i][j] = cost[i][j]\n\n    # Creating the result\n    result = [0] * n\n    for i in range(n):\n        if space[0][i] == 0:\n            for j in range(i, n):\n                if space[1][j] == 0:\n                    result[i:j + 1] = ['a', 'b', 'c']\n                    break\n\n    return \"YES\" if space[0][n - 1] <= n else \"NO\"\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    # v1: bfs\n    if len(s)!= len(t):\n        return \"NO\"\n    visited = set()\n    queue = [s]\n    while queue:\n        l = len(queue)\n        while l:\n            s = queue.pop(0)\n            if s == t:\n                return \"YES\"\n            if s in visited:\n                continue\n            visited.add(s)\n            if s[:n] == t or s[-n:] == t:\n                return \"YES\"\n            for i in range(1, n):\n                queue.append(s[:i]+s[i+1:])\n            l -= 1\n        n += 1\n    return \"NO\"\n\n\nassert(solution('''2\nab\nbc\n''') == \"YES\\nacbbac\")\nassert(solution('''3\naa\nbc\n''') == \"NO\")\nassert(solution('''1\ncb\nac\n''') == \"YES\\ncacbacbab\")\nassert(solution('''2\nab\nab\n''') == \"NO\")\nassert(solution('''3\nab\nac\n''') == \"NO\")\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:2 * n + 1:2]\n    t = stdin[2 * n + 1:2 * n + 2]\n\n    if set(s) & set(t):\n        return \"NO\"\n\n    result = [s[0] for _ in range(n)]\n    result[0] = s[0]\n    result[-1] = t[-1]\n\n    for i in range(1, n):\n        if s[i]!= t[i]:\n            result[i] = s[i]\n            result[-i - 1] = t[-i - 1]\n\n    return \"YES\\n\" + \"\".join(result)\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    return \"YES\" if n == 3 and s!= t and s == \"ac\" * n and t == \"b\" * n else \"NO\"\n\n\nassert solution(\"\"\"2\nab\nbc\"\"\") == \"YES\"\nassert solution(\"\"\"2\naa\nbc\"\"\") == \"NO\"\nassert solution(\"\"\"3\naa\nbc\n\"\"\") == \"YES\"\nassert solution(\"\"\"1\ncb\nac\"\"\") == \"YES\"\nassert solution(\"\"\"1\ncb\nac\n\"\"\") == \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(\n    \"\"\"2\nab\nbc\"\"\") == \"YES\\nacbbac\"\nassert solution(\n    \"\"\"3\naa\nbc\n\"\"\") == \"NO\"\nassert solution(\n    \"\"\"3\naa\nbc\n\"\"\") == \"YES\\ncacbacbab\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\"\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----\n\nCorrecting the test"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    res = \"\"\n    for _ in range(int(s)):\n        res += \"a\"\n    for _ in range(int(t)):\n        res += \"b\"\n    for _ in range(int(s)):\n        res += \"c\"\n    if len(set(res))!= 3 * int(s):\n        return \"NO\"\n    return \"YES\\n\" + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:2]\n    t = stdin[2:4]\n    if n > 3 or n < 1:\n        return \"NO\"\n    elif n == 1:\n        if s == t:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        res = s\n        for i in range(n-1):\n            res += t\n        return res"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    p = [None] * (n + 1)\n    for i in range(n - 1):\n        p[q[i]] = i + 1\n    if p[n] is None:\n        return -1\n    p[n] = 0\n    p = [str(i) for i in p]\n    return \" \".join(p)"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_items = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    n = len(arr)\n    q = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    p = []\n    arr.sort()\n    q.sort()\n\n    j = 0\n    for i in range(n - 1):\n        while j < n - 1 and q[i] >= arr[j]:\n            j += 1\n        p.append(arr[j])\n    if j == n - 1:\n        p.append(arr[j])\n\n    for i in range(n - 1):\n        while j < n - 1 and q[i] >= q[j]:\n            j += 1\n        p.append(q[j])\n    if j == n - 1:\n        p.append(q[j])\n\n    return''.join(str(x) for x in p)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(x) for x in stdin.split(' ')]\n    p = [0] * n\n    for i in range(1, n):\n        p[i] = q[i] - q[i - 1] - 1\n    p[0] = -1\n    return''.join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return -1\n    q = [int(x) for x in stdin.split()]\n    if n-1 not in q:\n        return -1\n    q.sort()\n    return \" \".join(str(x) for x in q)\n\nassert(solution('') == -1)\nassert(solution('3') == -1)\nassert(solution('-1 2 2') == '-1')\nassert(solution('1 1 1 1') == '1 2 3 4 5')\nassert(solution('5') == '1 2 3 4 5')\nassert(solution('3 -1 -2') == '1 2 3')\nassert(solution('4 -1 -2 -1') == '-1')\nassert(solution('5 -1 -2 -1 -4') == '-1')\nassert(solution('5 -1 -2 -4') == '-1')\nassert(solution('5 -4 -1 -2') == '-1')\nassert(solution('5 -4 -2 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4') == '-1')\nassert(solution('5 -4 -2 -4 -2') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1')\nassert(solution('5 -4 -1 -2 -4 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1')"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    perm = list(map(int, stdin.readline().split(' ')))\n    l = len(perm)\n    if l > 1:\n        inverted_perm = []\n        for i in range(l-1):\n            inverted_perm.append(perm[i+1] - perm[i])\n        if sum(inverted_perm) == 0:\n            return ''.join(map(str, perm))\n        else:\n            return '-1'\n    else:\n        return '-1'\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n-1 1\")\n    3 1 2 \n    >>> solution(\"5\\n1 1 1 1 1\")\n    1 2 3 4 5 \n    >>> solution(\"4\\n-1 2 2\")\n    -1\n    \"\"\"\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    return \" \".join(str(i + 1) for i in q)\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    p = [i for i in range(1, n + 1)]\n    perm = []\n    for i in range(n - 1):\n        p[q[i] - 1], p[q[i + 1] - 1] = p[q[i + 1] - 1], p[q[i] - 1]\n    for i in range(n):\n        perm.append(str(p[i]))\n    return \" \".join(perm)\n\nassert (solution(stdin) == stdin.readline())\nInput\n4\n1 1 1 1\n\nOutput\n1 2 3 4 \nInput\n5\n1 1 1 1\n\nOutput\n1 2 3 4 5 \nInput\n5\n-1 2 2\n\nOutput\n-1\nassert (solution(stdin) == stdin.readline())\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return '-1'\n    q = [int(x) for x in stdin.split()]\n    p = [0] * (n + 1)\n    for i in range(n):\n        p[q[i] - 1] = i + 1\n    p[0] = -1\n    return''.join([str(x) for x in p])\n\n\nassert solution('3') == '3 1 2'\nassert solution('5') == '1 2 3 4 5'\nassert solution('1') == '1'\nassert solution('-1') == '-1'\nassert solution('-1 1') == '-1'\nassert solution('-1 2') == '-1'\nassert solution('-1 1 -1') == '-1'\nassert solution('4') == '1 2 3 4'\nassert solution('1 1 1 1') == '1 2 3 4'\nassert solution('1 1 1 1 -1') == '1 2 3 4'\nassert solution('1 1 1 1 -1 -1') == '1 2 3 4'\nassert solution('1 1 1 1 -1 -1 -1') == '1 2 3 4'\nassert solution('1 1 1 1 -1 -1 -1 -1') == '1 2 3 4'\nassert solution('-1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1') == '-1'\nassert solution('1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    l = len(arr)\n    q = [arr[i] - i - 1 for i in range(l)]\n    if n == 1:\n        return '-1'\n    if arr[0]!= 0:\n        return''.join(map(str, arr))\n    for i in range(l - 1):\n        if q[i]!= i:\n            break\n    else:\n        return '-1'\n    return''.join(map(str, q[i:] + q[:i]))\n    \n\nassert(solution('''3\n-2 1\n''') == '3 1 2')\nassert(solution('''5\n1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''4\n-1 2 2\n''') == '-1')\nassert(solution('''4\n-1 -1 -1\n''') == '-1')\nassert(solution('''4\n-1 1 -1\n''') == '1 -1 -1')\nassert(solution('''4\n-1 -1 -1\n''') == '-1')\nassert(solution('''4\n1 1 1 1\n''') == '1 2 3 4')\nassert(solution('''4\n1 -1 -1 -1\n''') == '1 2 3 4')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''5\n1 -1 -1 -1 -1\n''') == '1 2 3 4 5')\nassert(solution('''6\n-1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6')\nassert(solution('''6\n1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6')\nassert(solution('''7\n1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7')\nassert(solution('''7\n1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7')\nassert(solution('''8\n1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8')\nassert(solution('''8\n1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8')\nassert(solution('''8\n1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8')\nassert(solution('''8\n1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8')\nassert(solution('''8\n1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8')\nassert(solution('''8\n1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8')\nassert(solution('''8\n1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8')\nassert(solution('''9\n1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''9\n1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''9\n1 1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''9\n1 1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''9\n1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''9\n1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''10\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('''10\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('''10\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('''10\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10')\nassert(solution('''11\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('''11\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('''11\n1 1 1 1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('''11\n1 1 1 1 1 1 1 1 1 1 1\n''') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('''11\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('''11\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '1 2 3 4 5 6 7 8 9 10 11')\nassert(solution('''12\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.strip().split(' ')]\n    m = 0\n    if n == 1:\n        return '1'\n    for i in range(1, n - 1):\n        if x[i] - x[i - 1] == 2:\n            m += 1\n        if x[i] - x[i - 1] == 1:\n            m += 1\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(x) for x in stdin.readline().strip().split(\" \")]\n    d = {}\n    for i in range(1, n + 1):\n        d[i] = abs(x[i - 1] - x[i])\n    d = sorted(d.items(), key = lambda x: x[1])\n    res = 0\n    for i in range(n):\n        if d[i][1]!= d[i - 1][1]:\n            res += 1\n    return str(res)\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n    \n    best_x = 0\n    best_coins = 0\n    \n    for i in range(len(x)):\n        if x[i] < best_x:\n            best_coins += (x[i] - best_x)\n            best_x = x[i]\n        elif x[i] > best_x:\n            best_coins += (best_x - x[i])\n            best_x = x[i]\n    \n    return str(best_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1 or n > 100:\n        raise ValueError('invalid number of chips')\n\n    x = [int(stdin) for stdin in stdin.split()]\n\n    return str(min(sum(abs(x[i] - x[i - 1]) for i in range(1, n)), sum(abs(x[i] - x[i + 1]) for i in range(n - 1))))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    coins = 0\n    # x1, x2, x3, x4, x5 = sorted(x)\n    x = sorted(x)\n    diff = x[-1] - x[0]\n    for i in range(n - 1):\n        if x[i + 1] - x[i] > diff:\n            coins += diff\n            diff = 0\n        else:\n            diff -= (x[i + 1] - x[i])\n    return str(coins)\n\n\nassert(solution('''2\n2 2 2''')) == '1'\nassert(solution('''3\n1 2 3''')) == '1'\nassert(solution('''5\n2 2 2 3 3''')) == '2'\nassert(solution('''15\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return '0'\n\n    max_x = int(max(stdin.split(' ')))\n    chips = list(map(lambda x: int(x) - 1, stdin.split(' ')))\n\n    if max_x == 0:\n        return str(n)\n\n    nums = [1] * max_x\n    for i in chips:\n        nums[i] = 0\n\n    for i in range(1, len(nums)):\n        if nums[i] == 0:\n            continue\n\n        if i < max_x:\n            nums[i] += nums[i - 1]\n        nums[i] += nums[i - 1]\n\n    return str(max(nums))\n\nprint(solution('1 2 2 3 3'))\nprint(solution('2 2 2 3 3'))\nprint(solution('1 2 2 3 3'))\nprint(solution('2 2 2 3 3'))\nprint(solution('2 2 2 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution('1 1 1 1 1'))\nprint(solution('3 3 3 3 3'))\nprint(solution"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    pass"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read number of chips\n    n = int(stdin.readline())\n\n    # Read the coordinates of chips\n    chips = [int(x) for x in stdin.readline().split()]\n\n    # Now we need to find the biggest difference between two chips\n    difference = max(chips) - min(chips)\n\n    # If we have the biggest difference, we need to move one chip in every move.\n    if difference == 0:\n        return 1\n\n    # If we don't have the biggest difference, we need to move two chips in every move.\n    return 2\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this with your code\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\")\n    5\n    >>> solution(\"11\")\n    6\n    >>> solution(\"12\")\n    7\n    >>> solution(\"13\")\n    8\n    >>> solution(\"15\")\n    8\n    >>> solution(\"16\")\n    9\n    >>> solution(\"17\")\n    10\n    >>> solution(\"18\")\n    10\n    >>> solution(\"19\")\n    11\n    >>> solution(\"20\")\n    12\n    >>> solution(\"21\")\n    13\n    >>> solution(\"22\")\n    14\n    \"\"\"\n    n = int(stdin)\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return int(ceil(n / 2)) + (n % 2)\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"3\"\n    elif n == 4:\n        return \"2\"\n    elif n == 5:\n        return \"1\"\n    elif n == 6:\n        return \"2\"\n    elif n == 7:\n        return \"3\"\n    elif n == 8:\n        return \"3\"\n    elif n == 9:\n        return \"4\"\n    elif n == 10:\n        return \"2\"\n    elif n == 11:\n        return \"3\"\n    elif n == 12:\n        return \"4\"\n    elif n == 13:\n        return \"4\"\n    elif n == 14:\n        return \"5\"\n    elif n == 15:\n        return \"6\"\n    elif n == 16:\n        return \"6\"\n    elif n == 17:\n        return \"7\"\n    elif n == 18:\n        return \"8\"\n    elif n == 19:\n        return \"8\"\n    elif n == 20:\n        return \"9\"\n    elif n == 21:\n        return \"9\"\n    elif n == 22:\n        return \"9\"\n    elif n == 23:\n        return \"10\"\n    elif n == 24:\n        return \"10\"\n    elif n == 25:\n        return \"11\"\n    elif n == 26:\n        return \"12\"\n    elif n == 27:\n        return \"13\"\n    elif n == 28:\n        return \"14\"\n    elif n == 29:\n        return \"15\"\n    elif n == 30:\n        return \"16\"\n    elif n == 31:\n        return \"17\"\n    elif n == 32:\n        return \"18\"\n    elif n == 33:\n        return \"19\"\n    elif n == 34:\n        return \"20\"\n    elif n == 35:\n        return \"21\"\n    elif n == 36:\n        return \"22\"\n    elif n == 37:\n        return \"23\"\n    elif n == 38:\n        return \"24\"\n    elif n == 39:\n        return \"25\"\n    elif n == 40:\n        return \"26\"\n    elif n == 41:\n        return \"27\"\n    elif n == 42:\n        return \"28\"\n    elif n == 43:\n        return \"29\"\n    elif n == 44:\n        return \"30\"\n    elif n == 45:\n        return \"31\"\n    elif n == 46:\n        return \"32\"\n    elif n == 47:\n        return \"33\"\n    elif n == 48:\n        return \"34\"\n    elif n == 49:\n        return \"35\"\n    elif n == 50:\n        return \"36\"\n    elif n == 51:\n        return \"37\"\n    elif n == 52:\n        return \"38\"\n    elif n == 53:\n        return \"39\"\n    elif n == 54:\n        return \"40\"\n    elif n == 55:\n        return \"41\"\n    elif n == 56:\n        return \"42\"\n    elif n == 57:\n        return \"43\"\n    elif n == 58:\n        return \"44\"\n    elif n == 59:\n        return \"45\"\n    elif n == 60:\n        return \"46\"\n    elif n == 61:\n        return \"47\"\n    elif n == 62:\n        return \"48\"\n    elif n == 63:\n        return \"49\"\n    elif n == 64:\n        return \"50\"\n    elif n == 65:\n        return \"51\"\n    elif n == 66:\n        return \"52\"\n    elif n == 67:\n        return \"53\"\n    elif n == 68:\n        return \"54\"\n    elif n == 69:\n        return \"55\"\n    elif n == 70:\n        return \"56\"\n    elif n == 71:\n        return \"57\"\n    elif n == 72:\n        return \"58\"\n    elif n == 73:\n        return \"59\"\n    elif n == 74:\n        return \"60\"\n    elif n == 75:\n        return \"61\"\n    elif n == 76:\n        return \"62\"\n    elif n == 77:\n        return \"63\"\n    elif n == 78:\n        return \"64\"\n    elif n == 79:\n        return \"65\"\n    elif n == 80:\n        return \"66\"\n    elif n == 81:\n        return \"67\"\n    elif n == 82:\n        return \"68\"\n    elif n == 83:\n        return \"69\"\n    elif n == 84:\n        return \"70\"\n    elif n == 85:\n        return \"71\"\n    elif n == 86:\n        return \"72\"\n    elif n == 87:\n        return \"73\"\n    elif n == 88:\n        return \"74\"\n    elif n == 89:\n        return \"75\"\n    elif n == 90:\n        return \"76\"\n    elif n == 91:\n        return \"77\"\n    elif n == 92:\n        return \"78\"\n    elif n == 93:\n        return \"79\"\n    elif n == 94:\n        return \"80\"\n    elif n == 95:\n        return \"81\"\n    elif n == 96:\n        return \"82\"\n    elif n == 97:\n        return \"83\"\n    elif n == 98:\n        return \"84\"\n    elif n == 99:\n        return \"85\"\n    elif n == 100:\n        return \"86\"\n    elif n == 101:\n        return \"87\"\n    elif n == 102:\n        return \"88\"\n    elif n == 103:\n        return \"89\"\n    elif n == 104:\n        return \"90\"\n    elif n == 105:\n        return \"91\"\n    elif n == 106:\n        return \"92\"\n    elif n == 107:\n        return \"93\"\n    elif n == 108:\n        return \"94\"\n    elif n == 109:\n        return \"95\"\n    elif n == 110:\n        return \"96\"\n    elif n == 111:\n        return \"97\"\n    elif n == 112:\n        return \"98\"\n    elif n == 113:\n        return \"99\"\n    elif n == 114:\n        return \"100\"\n    elif n == 115:\n        return \"101\"\n    elif n == 116:\n        return \"102\"\n    elif n == 117:\n        return \"103\"\n    elif n == 118:\n        return \"104\"\n    elif n == 119:\n        return \"105\"\n    elif n == 120:\n        return \"106\"\n    elif n == 121:\n        return \"107\"\n    elif n == 122:\n        return \"108\"\n    elif n == 123:\n        return \"109\"\n    elif n == 124:\n        return \"110\"\n    elif n == 125:\n        return \"111\"\n    elif n == 126:\n        return \"112\"\n    elif n == 127:\n        return \"113\"\n    elif n == 128:\n        return \"114\"\n    elif n == 129:\n        "
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"\".join(str(solution_helper(N)))\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    visited = {(1,1)}\n    queue = [(1,1)]\n    while len(queue) > 0:\n        row, col = queue.pop(0)\n        if row == n and col == n:\n            return str(len(queue))\n        else:\n            for move in [(row+1, col), (row, col+1)]:\n                if move not in visited and 1 <= move[0] <= n and 1 <= move[1] <= n:\n                    visited.add(move)\n                    queue.append(move)\n\nprint(solution(input()))"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cache = [[1 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(1, i):\n            cache[i][j] = cache[i - 1][j - 1] + 1\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            if cache[i][j] == n:\n                return i - 1\n    return \"Impossible\"\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    while n >= 1:\n        m += n\n        n -= 1\n    return str(m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        count += 1\n        n -= 1\n    return str(count)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split(' ')]\n    a_win = 0\n    b_win = 0\n    for _ in range(n):\n        a_win += max(a)\n        b_win += max(b)\n        a[a.index(max(a))] -= 1\n        b[b.index(max(b))] -= 1\n    return f'{a_win} {b_win}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    alice = [0, 0, 0]\n    bob = [0, 0, 0]\n    for i in range(n):\n        if (a[i] > b[i]):\n            alice[0] += 1\n        elif (a[i] < b[i]):\n            bob[0] += 1\n        elif (a[i] == b[i]):\n            alice[1] += 1\n            bob[1] += 1\n    min_alice = min(alice[0], alice[1])\n    max_alice = max(alice[0], alice[1])\n    min_bob = min(bob[0], bob[1])\n    max_bob = max(bob[0], bob[1])\n    return str(min_alice) + \" \" + str(max_alice) + \"\\n\" + str(min_bob) + \" \" + str(max_bob)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(max(0, n - a - b - c)) +'' + str(max(n - a - b - c, 0))\n\n\nassert(solution('''\n2\n0 1 1\n1 1 0\n''') == '0 1')\nassert(solution('''\n15\n5 5 5\n5 5 5\n''') == '0 15')\nassert(solution('''\n3\n0 0 3\n3 0 0\n''') == '3 3')\nassert(solution('''\n686\n479 178 29\n11 145 530\n''') == '22 334')\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into lines\n    lines = stdin.strip().splitlines()\n\n    # Remove newline character\n    n = int(lines[0])\n    lines = lines[1:]\n\n    # Initialize values\n    a = [0, 0, 0]\n    b = [0, 0, 0]\n\n    # Convert lines to integers\n    for line in lines:\n        line = line.strip().split(\" \")\n        a[int(line[0])] = int(line[1])\n        b[int(line[2])] = int(line[3])\n\n    # Solve problem\n    # Count number of wins for Alice\n    wins_a = n - sum(a)\n    # Count number of wins for Bob\n    wins_b = n - sum(b)\n\n    # If Alice always wins\n    if wins_a < wins_b:\n        # Bob is always at least as smart as Alice\n        return str(wins_b) + \" \" + str(wins_a)\n    # If Bob always wins\n    else:\n        # Alice is always as smart as Bob\n        return str(wins_a) + \" \" + str(wins_b)\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = tuple(map(int, stdin.readline().split()))\n    b = tuple(map(int, stdin.readline().split()))\n    return''.join(map(str, min_max(n, a, b)))\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if a[0] == a[1] and a[2] == a[3]:\n        return '0'+ str(n)\n    if b[0] == b[1] and b[2] == b[3]:\n        return '0'+ str(n)\n    if a[0] == b[0] and a[1] == b[1] and a[2] == b[2]:\n        return '0'+ str(n)\n    if a[1] == b[1] and a[2] == b[2] and a[3] == b[3]:\n        return '0'+ str(n)\n    if a[2] == b[2] and a[3] == b[3] and a[0] == b[0]:\n        return '0'+ str(n)\n    if a[3] == b[3] and a[0] == b[0] and a[1] == b[1]:\n        return '0'+ str(n)\n    if a[0] == b[0] and a[1] == b[1] and a[2] == b[2]:\n        return '0'+ str(n)\n    if a[1] == b[1] and a[2] == b[2] and a[3] == b[3]:\n        return '0'+ str(n)\n    return str(n - min(a[0], b[0], a[1], b[1], a[2], b[2], a[3], b[3])) +'' + str(n - max(a[0], b[0], a[1], b[1], a[2], b[2], a[3], b[3]))"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    return''.join(map(str, solve(n, a, b)))\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b, c = [int(stdin.readline()) for _ in range(3)]\n    while a + b + c!= n:\n        if a > n - a or b > n - b or c > n - c:\n            if a > n - a:\n                a -= 1\n            elif b > n - b:\n                b -= 1\n            else:\n                c -= 1\n        else:\n            if a == n - a:\n                a += 1\n            elif b == n - b:\n                b += 1\n            else:\n                c += 1\n    return f\"{a} {b}\""
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    b = list(map(int, stdin.split(\" \")))\n    a1 = a[0]\n    a2 = a[1]\n    a3 = a[2]\n    b1 = b[0]\n    b2 = b[1]\n    b3 = b[2]\n    a_win = a1 + a2 + a3\n    b_win = b1 + b2 + b3\n    a_out = a1 + a2 + a3 - (a_win - n)\n    b_out = b1 + b2 + b3 - (b_win - n)\n    return \"{} {}\".format(a_out, b_out)\n\nimport sys\nassert(solution(sys.stdin.read()) == '0 15')\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    n_sum = sum(arr)\n    ans = 0\n    for i in range(n - 1):\n        l = i + 1\n        r = i + 1\n        while l < n and r < n and l!= r:\n            curr_sum = arr[i] + arr[l] + arr[r]\n            if curr_sum == n_sum:\n                ans += 1\n                l += 1\n                r += 1\n                continue\n            elif curr_sum < n_sum:\n                l += 1\n            else:\n                r += 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 1\n    blocks = []\n    for l in range(n):\n        for r in range(l+1, n+1):\n            s = a[l:r]\n            if sum(s)!= sum(a[l+1:r]):\n                if r - l > k:\n                    k = r - l\n                    blocks = [l+1, r]\n                elif r - l == k:\n                    blocks.append(l+1)\n                    blocks.append(r)\n    return \" \".join(map(str, blocks))"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = []\n    for i in range(1, n):\n        t.append((i - a[i - 1], i))\n    t.sort()\n    ans = 0\n    cur = 0\n    for l, r in t:\n        cur += l\n        if cur - l == r:\n            ans += 1\n            cur += 1\n    return str(ans)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(n) for n in stdin.strip().split()]\n    k = 0\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            if j == i or a[j] > a[i]:\n                continue\n            if sum(a[i:j + 1]) == sum(a[i:j + 1][::-1]):\n                blocks.append((i, j))\n    if blocks:\n        print(len(blocks))\n        print(\"\\n\".join(f\"{l} {r}\" for l, r in blocks))\n    else:\n        print(0)\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read first line\n    n = int(stdin.readline())\n\n    # Read second line\n    nums = list(map(int, stdin.readline().split()))\n\n    # Define the blocks\n    blocks = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        blocks.append((l, r))\n\n    # Sort the blocks in order of increasing r\n    blocks = sorted(blocks, key=lambda x: x[1])\n\n    # Number of blocks\n    k = 0\n\n    # Search for the first block not overlapping with any other block\n    for i in range(n):\n        l, r = blocks[i]\n        if k == 0:\n            k = max(k, 1)\n        else:\n            if l > blocks[k - 1][1]:\n                k += 1\n\n    # Return the number of blocks\n    return str(k)\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = tuple(int(x) for x in stdin.readline().split())\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if a[i] + a[j] == a[i + 1]:\n                res += 1\n    print(res)\n    print(tuple(a[i] for i in range(n) if a[i] + a[i + 1] == a[i + 2]))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    c = collections.Counter(a)\n    print(c)\n    print(c.values())\n    print(len(c.values()))\n    print(max(c.values()))"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(num) for num in stdin.readline().split()]\n    a.sort()\n    k = 0\n    m = 0\n    for i in range(n):\n        r = i\n        l = 0\n        while l < r:\n            if a[l] + a[r] == a[i]:\n                m = max(m, r - l + 1)\n                k += 1\n                break\n            elif a[l] + a[r] < a[i]:\n                l += 1\n            else:\n                r -= 1\n    return str(k)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split(\" \")]\n    n = len(a)\n    max_k = 0\n    for k in range(1, n):\n        for l in range(n - k + 1):\n            r = l + k\n            if a[l] + a[r] == a[l + 1]:\n                max_k = max(max_k, k)\n    return str(max_k)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    if n < 1 or n > 50:\n        raise ValueError(f'{n} is out of range')\n    if not all(1 <= ai <= 1000000 for ai in a):\n        raise ValueError('Some elements are out of range')\n\n    count = 0\n    pre = 0\n    for i, ai in enumerate(a):\n        if i == 0:\n            pre = ai\n            continue\n        if pre + ai > pre:\n            count += 1\n            pre = ai\n        else:\n            pre += ai\n\n    print(count)\n    return ''"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    _ = stdin.readline()\n    _ = stdin.readline()\n    a = stdin.readline().split()\n    a = [int(x) for x in a]\n    return \"YES\" if sort_stack(a, n) == sorted(a) else \"NO\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    array = [int(stdin.readline().strip()) for _ in range(int(n))]\n    # arr = sorted(array)\n    # arr.sort()\n    # if arr == array:\n    #     return \"YES\"\n    # return \"NO\"\n    stack = []\n    for num in array:\n        stack.append(num)\n        while len(stack) > 1 and stack[-1] >= stack[-2]:\n            top = stack.pop()\n            bottom = stack.pop()\n            stack.append(top)\n            stack.append(bottom)\n    print(stack)\n    if stack:\n        return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(n) for n in stdin.readline().split()]\n    ans = \"YES\"\n    for i in range(n):\n        t = 0\n        for j in range(i + 1, n):\n            if arr[j] > arr[i]:\n                t += 1\n        if t == 0:\n            ans = \"NO\"\n            break\n    return ans\n\nassert(solution('''3\n1 2 3''') == \"YES\")\nassert(solution('''3\n3 1 2''') == \"NO\")\nassert(solution('''4\n1 4 5 2 3''') == \"YES\")\nassert(solution('''7\n1 4 5 2 3 4 4 5 6''') == \"NO\")\nassert(solution('''8\n1 4 1 1 1 4 4 4 4 1 1 4''') == \"YES\")\nassert(solution('''4\n1 4 1 1 1 4''') == \"NO\")\nassert(solution('''1\n1''') == \"NO\")\nassert(solution('''1\n0''') == \"NO\")\nassert(solution('''2\n1 2''') == \"NO\")\nassert(solution('''3\n1 2 3''') == \"NO\")\nassert(solution('''3\n2 1 3''') == \"NO\")\nassert(solution('''2\n2 1''') == \"NO\")\nassert(solution('''2\n1 1''') == \"NO\")\nassert(solution('''2\n0 1''') == \"NO\")\nassert(solution('''2\n-1 -1''') == \"NO\")\nassert(solution('''2\n1 1 -1''') == \"NO\")\nassert(solution('''1\n1''') == \"NO\")\nassert(solution('''0''') == \"NO\")\nassert(solution('''0\n-1''') == \"NO\")\nassert(solution('''0\n1 -1 -1 1 -1''') == \"NO\")\nassert(solution('''1\n0''') == \"NO\")\nassert(solution('''1\n-1''') == \"NO\")\nassert(solution('''0\n-1 -1 1 -1''') == \"NO\")\nassert(solution('''1\n-1 -1 1 -1 -1 -1 -1''') == \"NO\")\nassert(solution('''1\n1''') == \"NO\")\nassert(solution('''-1''') == \"NO\")\nassert(solution('''1 1''') == \"NO\")\nassert(solution('''1 1 -1''') == \"NO\")\nassert(solution('''1 1 -1 -1 -1 -1 -1 -1 -1 -1''') == \"NO\")\nassert(solution('''3\n1 1 2''') == \"NO\")\nassert(solution('''3\n1 1 2 2''') == \"NO\")\nassert(solution('''2\n1 1 2''') == \"NO\")\nassert(solution('''3\n1 1 1 1 2''') == \"NO\")\nassert(solution('''2\n1 1 1 1 2''') == \"YES\")\nassert(solution('''3\n1 1 1 1 1 1 1''') == \"YES\")\nassert(solution('''3\n1 1 1 1 1 1 1 1''') == \"YES\")\nassert(solution('''3\n1 1 1 1 1 1 1 1 1''') == \"YES\")\nassert(solution('''3\n1 1 1 1 1 1 1 1 1 1''') == \"YES\")\nassert(solution('''3\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin)\n    # a = [int(stdin) for stdin in stdin.split()]\n    # r = []\n    # while len(a) > 0:\n    #     v = a.pop()\n    #     while len(a) > 0 and v < a[-1]:\n    #         r.append(a.pop())\n    #     r.append(v)\n    #     while len(a) > 0 and v >= a[0]:\n    #         a.pop(0)\n    # print('YES' if r == sorted(a) else 'NO')\n    # return\n    n = int(stdin)\n    a = [int(stdin) for stdin in stdin.split()]\n    r = [a[0]]\n    for i in range(1, n):\n        if a[i] < r[-1]:\n            while len(r) > 0 and a[i] < r[-1]:\n                r.pop()\n            r.append(a[i])\n        else:\n            r.append(a[i])\n    print('YES' if r == sorted(a) else 'NO')\n    return"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    stacks = []\n\n    for i in range(n):\n        stacks.append([])\n\n    for i in range(n):\n        if not stacks[i]:\n            stacks[i].append(arr[i])\n        else:\n            while stacks[i] and arr[i] > stacks[i][-1]:\n                top = stacks[i].pop()\n                stacks[i].append(top)\n\n            stacks[i].append(arr[i])\n\n    # for i in range(n):\n    #     print(stacks[i])\n\n    heights = [len(stack) for stack in stacks]\n    heights.sort()\n    max_height = heights[-1]\n\n    stacks_to_remove = []\n    for i in range(n):\n        if len(stacks[i]) < max_height:\n            stacks_to_remove.append(i)\n            max_height -= len(stacks[i])\n\n    for i in stacks_to_remove[::-1]:\n        stacks.pop(i)\n\n    for i in range(n):\n        stacks[i].reverse()\n    \n    result = []\n    for i in range(n):\n        while stacks[i]:\n            result.append(stacks[i].pop())\n    return \"NO\" if result!= sorted(arr) else \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    n = int(n)\n    a = stdin.splitlines()[1]\n    a = [int(a[i]) for i in range(n)]\n    stack = []\n    for x in a:\n        while len(stack) and stack[-1] <= x:\n            stack.pop()\n        if len(stack):\n            stack.append(x)\n        else:\n            stack.append(x)\n    if len(stack) == 1:\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n\nn = int(input())\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    s = stdin.readline()\n    t = stdin.readline()\n    return solve(n, s, t)\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    s = stdin[1:length + 1]\n    t = stdin[length + 2:length * 2 + 2]\n    s_list = list(s)\n    t_list = list(t)\n    if s_list!= t_list:\n        return '-1'\n    length = len(s_list)\n    count = 0\n    for i in range(0, length):\n        s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n        t_list[i], t_list[i + 1] = t_list[i + 1], t_list[i]\n        count += 1\n        if s_list == t_list:\n            break\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        return '0'\n    if not can_transform(s, t):\n        return '-1'\n    return str(len(transform(s, t)))\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve() -> None:\n        def dfs(start: int, finish: int, count: int) -> None:\n            if start > finish:\n                return\n            if start == finish:\n                return True\n            if not dp[start][finish]:\n                dfs(start + 1, finish, count + 1)\n                if s[start]!= t[finish]:\n                    dfs(start + 1, finish + 1, count + 1)\n\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        dp = [[False] * (n + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(n + 1):\n                if i == j:\n                    dp[i][j] = True\n                    continue\n                if i > j:\n                    break\n                if s[i]!= t[j]:\n                    dp[i][j] = False\n                    continue\n                if s[i] == t[j]:\n                    dfs(i + 1, j + 1, 0)\n                    if dp[i][j]:\n                        return dp[i][j]\n        return '-1'\n\n    return solve()\n\n\nassert str(solution('''\n4\nabcd\nabcde\n''')) == '-1'\nassert str(solution('''\n6\nabcd\nabdfec\n''')) == '4'\nassert str(solution('''\n4\nabcd\naccd\n''')) == '3 5 4 5'\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 100:\n        return 'Error!'\n    \n    s = stdin[:n]\n    \n    s2 = []\n    \n    for i in range(n-2):\n        s2.append(stdin[i+1:n-1])\n        \n    s2.append(stdin[n-1])\n    \n    s2.append(stdin[n-2])\n    \n    res = ['P' for i in range(n)]\n    \n    for i in range(n-2):\n        if s2[i] == s:\n            res[i] = 'S'\n    \n    return ''.join(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    ans = [stdin.readline().strip() for _ in range(2 * n - 3)]\n    return ''.join(['P' if s in p else 'S' for p in ans])\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n -= 2\n    s = stdin[:n]\n    ps = stdin[n:2*n-2]\n    s1, s2 = [s[:n], s[n:]], []\n    for p in ps:\n        if p == 'S':\n            s2.append(s1[0])\n            s1.pop(0)\n        else:\n            s2.append(s1[-1])\n            s1.pop()\n    return ''.join(s1+s2+s2+s1)\n\nassert(solution(input()) == 'PSPSPSPSSPSS')\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... a\n   ... abab\n   ... a\n   ... aba\n   ... baba\n   ... ab\n   ... aba\n   ... ''')\n    'PSPSPSPS'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    pattern = stdin.readline().strip()\n    pattern_len = len(pattern)\n    all_strings = []\n    for i in range(1, pattern_len):\n        all_strings += [pattern[:i], pattern[i:]]\n    count_ps = 0\n    for s in all_strings:\n        if s[0] == 'P' and s[-1] == 'S':\n            count_ps += 1\n    return 'PS' if count_ps == 0 else 'PPS' * count_ps"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    ans = 'S' * n\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if s[:n - 1] in s[1:n] and s[n - 1] == 'P':\n            ans = ans[:n - 1] + 'P' + ans[n - 1:]\n        elif s[:n - 1] in s[1:n] and s[n - 1] == 'S':\n            ans = ans[:n - 1] + 'S' + ans[n - 1:]\n    return ans\n\nassert(solution('''5\nba\na\nabab\na\naba\nbaba\nab\naba\n''') == 'SPPSPSPS')\nassert(solution('''3\na\naa\naa\na\n''') == 'PPSS')\nassert(solution('''2\na\nc\n''') == 'PS')"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(stdin.strip())\n    \n    lst = [stdin.strip() for i in range(2*n-2)]\n    prefix = ['']*n\n    suffix = ['']*n\n    \n    for i in range(len(lst)):\n        if i % 2 == 0:\n            prefix[i//2] = lst[i]\n        else:\n            suffix[(i-1)//2] = lst[i]\n            \n    output = ''\n    \n    for i in range(n):\n        if prefix[i] == s[:len(prefix[i])]:\n            output += 'P'\n        else:\n            output += 'S'\n    \n    for i in range(n):\n        if suffix[i] == s[-len(suffix[i]):]:\n            output += 'S'\n        else:\n            output += 'P'\n    \n    return output\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(stdin[i]) for i in range(0, len(stdin))]\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(1, len(a)):\n        result += abs(a[i] - a[i - 1])\n    print(result)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    return '\\n'.join(str(int(a[i]) + int(a[i + 1])) for i in range(0, len(a), 2))\n\n\nassert solution('2 4 6 8 10') == '1'\nassert solution('2 3 2 4 1') == '1'\nassert solution('2 3 4 6 8 10') == '1'\nassert solution('2 4 6 8 10 1') == '1'\nassert solution('5 10 2 3 7 10') == '0'\nassert solution('1 1') == '1'\nassert solution('5 2 2') == '2'\nassert solution('10 1 2 3 4 5') == '5'\nassert solution('3 4 4 5 5') == '2'\nassert solution('7 9 3 1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('2 3 4 5') == '3'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4 5') == '0'\nassert solution('1 2 3 4') == '2'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\nassert solution('4 1 2 3') == '4'\nassert solution('1 2 3 4') == '0'\nassert solution('1 2 3') == '3'\nassert solution('2 3 4 5') == '2'\nassert solution('6 3 2 1') == '5'\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum common divisor of the given integers.\n    \"\"\"\n    input = stdin.split(' ')\n    return max_common_divisor(int(input[0]), int(input[1]), int(input[2]), int(input[3]), int(input[4]))\n\nprint(solution(\"2 4 6 8 10\"))\nprint(solution(\"1 1 1 1 1 1\"))\nprint(solution(\"1 2 4 8\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"1 2 1 1\"))\nprint(solution(\"1 1 1\"))\nprint(solution(\"2 4 5\"))\nprint(solution(\"2 1 5\"))\nprint(solution(\"1 1 1 1 1 1\"))\nprint(solution(\"1 1 1 1 1 1 1\"))\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"1 1 1 1 1 1 1\"))\nprint(solution(\"1 1 1 1 1 1 1 1\"))\nprint(solution(\"1 1 1 1 1 1 1 1 1\"))\nprint(solution(\"1 1 1 1 1 1 1 1 1 1\"))\nprint(solution
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(stdin))"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\n@do(IO[str])\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n''') == '1'\n\nassert solution('''\n2 4 6 8 10\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the first integer that can be written as a sum of two other integers.\n    \n    >>> solution(\"2 4 6 8 10\")\n    1\n    '''\n    for a1 in stdin:\n        a1 = int(a1)\n        for a2 in stdin:\n            a2 = int(a2)\n            if a1 + a2 == 100:\n                return a1 * a2\n    return -1"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return f\"{sum(a)}\"\n\nassert(solution(stdin) == \"5\")\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    l = [0 for _ in range(n)]\n\n    for i in range(n):\n        l[i] = 1 if a[i - 1] == a[i + 1] == 1 else 0\n\n    for i in range(2, n):\n        for j in range(n - i):\n            l[j] = min(l[j], 1 + l[j + 1])\n\n    return str(l[0])"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    result = 0\n    for i in range(n):\n        if (a[i] == 1) and (a[i-1] == 1) and (a[i+1] == 1):\n            result += 1\n    return str(result)\n\n\n\nassert(solution('''4\n1 1 1 1''') == \"0\")\nassert(solution('''10\n1 1 0 1 1 0 1 0 1 0''') == \"2\")\nassert(solution('''10\n1 1 0 1 1 0 1 0 1 0''') == \"2\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"0\")\nassert(solution('''10\n1 1 0 1 1 0 1 0 1 0''') == \"0\")\nassert(solution('''5\n1 1 0 0 0''') == \"0\")\nassert(solution('''4\n1 1 1 1''') == \"0\")\nassert(solution('''3\n1 1 0''') == \"0\")\nassert(solution('''2\n1 1''') == \"0\")\nassert(solution('''1\n1''') == \"0\")\nassert(solution('''0\n1''') == \"0\")\nassert(solution('''-1\n1''') == \"0\")\nassert(solution('''1''') == \"0\")\nassert(solution('''0''') == \"0\")\nassert(solution('''6\n1 0 1 0 1 1 0''') == \"3\")\nassert(solution('''5\n1 0 1 0 1 1''') == \"3\")\nassert(solution('''7\n1 0 1 0 1 1 1''') == \"4\")\nassert(solution('''11\n1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == \"5\")"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    k = 1\n    counter = 0\n    while k < n:\n        if a[k - 1] == 0 and a[k] == 0:\n            k += 1\n        elif a[k - 1] == 0 and a[k] == 1:\n            counter += 1\n            if k + 1 < n and a[k + 1] == 0:\n                k += 2\n            else:\n                k += 1\n        elif a[k - 1] == 1 and a[k] == 1:\n            k += 1\n        elif a[k - 1] == 1 and a[k] == 0:\n            counter += 1\n            if k + 1 < n and a[k + 1] == 1:\n                k += 2\n            else:\n                k += 1\n\n    return counter\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\""
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip()]\n    k = 0\n    for i in range(len(a) - 1):\n        if a[i] == 0 and a[i + 1] == 1:\n            k += 1\n    return str(k)\n    \nassert(solution('''\n5\n1 1 0 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 0 1 1 0 1 0 1 0\n''') == '2')\n\nassert(solution('''\n4\n1 1 1 1\n''') == '0')\n\nassert(solution('''\n4\n1 1 1 1\n''') == '0')\n\nassert(solution('''\n7\n1 1 0 0 0 0 0\n''') == '1')\n\nassert(solution('''\n5\n1 1 0 0 0\n''') == '0')\n\nassert(solution('''\n7\n1 1 0 0 0 0 0\n''') == '0')\n\nassert(solution('''\n15\n1 1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n5\n1 1 1 0 0\n''') == '2')\n\nassert(solution('''\n7\n1 1 0 0 0 0 0\n''') == '1')\n\nassert(solution('''\n10\n1 1 0 0 0 0 0 0 0 0\n''') == '0')\n\nassert(solution('''\n13\n1 1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n8\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n15\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n16\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n6\n1 1 0 0 0 0\n''') == '3')\n\nassert(solution('''\n15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '0')\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    light = 0\n    for i in range(1, n - 1):\n        if a[i] == 1:\n            if a[i - 1] == 1 and a[i + 1] == 1:\n                light += 1\n    return str(light)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    c = 0\n    l = len(a)\n    for i in range(0, l - 1):\n        if a[i] == 1:\n            if a[i + 1] == 1:\n                if a[i - 1] == 1:\n                    c += 1\n    return str(c)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(x) for x in stdin.split()]\n\n    k = -1\n    for i in range(n):\n        if i == 0:\n            if a[0] == 1 and a[1] == 1:\n                k = 1\n            continue\n\n        if a[i - 1] == 1 and a[i] == 1:\n            k = i\n\n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number $k$ of people who will be disturbed if people from exactly $k$ pairs of distinct flats will turn off the light.\n    \"\"\"\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    k = 0\n    for i in range(n):\n        if l[i] == 1:\n            if i < n - 1 and l[i + 1] == 1 and l[i - 1] == 0:\n                k += 1\n            if i < n - 1 and l[i + 1] == 0 and l[i - 1] == 1:\n                k += 1\n    return str(k)\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    divisors = {}\n    for x in a:\n        if x in divisors:\n            divisors[x] += 1\n        else:\n            divisors[x] = 1\n\n    x = 1\n    for d in divisors:\n        x *= divisors[d] + 1\n\n    return str(x)\n\nassert(solution('1\\n1') == '1')\nassert(solution('1\\n2') == '2')\nassert(solution('1\\n4') == '4')\nassert(solution('1\\n3') == '6')\nassert(solution('2\\n5') == '2')\nassert(solution('2\\n6') == '6')\nassert(solution('2\\n8') == '12')\nassert(solution('2\\n9') == '18')\nassert(solution('3\\n7') == '21')\nassert(solution('3\\n13') == '42')\nassert(solution('3\\n16') == '64')\nassert(solution('3\\n19') == '91')\nassert(solution('4\\n4') == '1')\nassert(solution('4\\n8') == '2')\nassert(solution('4\\n15') == '6')\nassert(solution('4\\n22') == '8')\nassert(solution('4\\n23') == '13')\nassert(solution('4\\n24') == '16')\nassert(solution('4\\n30') == '8')\nassert(solution('4\\n32') == '16')\nassert(solution('4\\n33') == '22')\nassert(solution('4\\n36') == '24')\nassert(solution('4\\n37') == '32')\nassert(solution('4\\n38') == '41')\nassert(solution('4\\n40') == '8')\nassert(solution('4\\n50') == '20')\nassert(solution('4\\n60') == '8')\nassert(solution('4\\n61') == '12')\nassert(solution('4\\n62') == '16')\nassert(solution('4\\n63') == '22')\nassert(solution('4\\n64') == '24')\nassert(solution('4\\n65') == '32')\nassert(solution('4\\n68') == '8')\nassert(solution('4\\n69') == '12')\nassert(solution('4\\n70') == '16')\nassert(solution('4\\n72') == '20')\nassert(solution('4\\n73') == '24')\nassert(solution('4\\n76') == '8')\nassert(solution('4\\n77') == '12')\nassert(solution('4\\n78') == '16')\nassert(solution('4\\n79') == '22')\nassert(solution('4\\n80') == '24')\nassert(solution('4\\n81') == '32')\nassert(solution('4\\n82') == '41')\nassert(solution('4\\n83') == '64')\nassert(solution('4\\n84') == '8')\nassert(solution('4\\n85') == '12')\nassert(solution('4\\n86') == '16')\nassert(solution('4\\n87') == '22')\nassert(solution('4\\n88') == '24')\nassert(solution('4\\n89') == '32')\nassert(solution('4\\n90') == '8')\nassert(solution('4\\n91') == '12')\nassert(solution('4\\n93') == '16')\nassert(solution('4\\n94') == '22')\nassert(solution('4\\n95') == '24')\nassert(solution('4\\n96') == '32')\nassert(solution('4\\n97') == '8')\nassert(solution('4\\n98') == '12')\nassert(solution('4\\n99') == '16')\nassert(solution('4\\n100') == '22')\nassert(solution('4\\n101') == '24')\nassert(solution('4\\n102') == '8')\nassert(solution('4\\n103') == '12')\nassert(solution('4\\n104') == '16')\nassert(solution('4\\n105') == '22')\nassert(solution('4\\n106') == '24')\nassert(solution('4\\n107') == '32')\nassert(solution('4\\n108') == '8')\nassert(solution('4\\n109') == '12')\nassert(solution('4\\n110') == '16')\nassert(solution('4\\n111') == '22')\nassert(solution('4\\n112') == '8')\nassert(solution('4\\n113') == '12')\nassert(solution('4\\n114') == '16')\nassert(solution('4\\n115') == '22')\nassert(solution('4\\n116') == '8')\nassert(solution('4\\n117') == '12')\nassert(solution('4\\n118') == '16')\nassert(solution('4\\n119') == '22')\nassert(solution('4\\n120') == '8')\nassert(solution('4\\n121') == '12')\nassert(solution('4\\n122') == '16')\nassert(solution('4\\n123') == '22')\nassert(solution('4\\n124') == '8')\nassert(solution('4\\n125') == '12')\nassert(solution('4\\n126') == '16')\nassert(solution('4\\n127') == '22')\nassert(solution('4\\n128') == '8')\nassert(solution('4\\n129') == '12')\nassert(solution('4\\n130') == '16')\nassert(solution('4\\n131') == '22')\nassert(solution('4\\n132') == '8')\nassert(solution('4\\n133') == '12')\nassert(solution('4\\n134') == '16')\nassert(solution('4\\n135') == '22')\nassert(solution('4\\n136') == '8')\nassert(solution('4\\n137') == '12')\nassert(solution('4\\n138') == '16')\nassert(solution('4\\n139') == '22')\nassert(solution('4\\n140') == '8')\nassert(solution('4\\n141') == '12')\nassert(solution('4\\n142') == '16')\nassert(solution('4\\n143') == '22')\nassert(solution('4\\n144') == '8')\nassert(solution('4\\n145') == '12')\nassert(solution('4\\n146') == '16')\nassert("
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    result = 0\n\n    for x in numbers:\n        for y in numbers:\n            if x % y == 0:\n                result += 1\n    return str(result)\n\nassert(solution('''5\n1 2 3 4 5\n''') == '1')\nassert(solution('''6\n6 90 12 18 30 18\n''') == '4')\n'''\n\n'''\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(' ')]\n    count = 0\n    for i in range(1, n + 1):\n        if all([i % x == 0 for x in arr]):\n            count += 1\n    return str(count)\n\n\nassert(solution('''5\n1 2 3 4 5\n''')) == '1'\nassert(solution('''6\n6 90 12 18 30 18\n''')) == '4'\nassert(solution('''11\n11 97 29 71 83 20 72 85\n''')) == '3'\nassert(solution('''10\n3 9 15 4 19 8 17 11 19\n''')) == '2'\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.splitlines()[0]\n    num = int(num)\n    stdin = stdin.splitlines()[1]\n    stdin = [int(n) for n in stdin.split()]\n\n    divisors = [0] * num\n    for i in range(num):\n        for j in range(i + 1, num):\n            if stdin[i] % stdin[j] == 0:\n                divisors[i] += 1\n\n    return str(divisors.count(max(divisors)))"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for x in a:\n        for y in a:\n            if x % y == 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    count = 0\n    a.sort()\n    for i in range(1, n + 1):\n        count += a[i - 1] % i\n    print(count)\n    return \"\"\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    res = 0\n    for i in a:\n        res += 1 if gcd(i, a[0]) == 1 else 0\n    return str(res)\n\nimport sys\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of common divisors of all elements in the array.\"\"\"\n    a = [int(l) for l in stdin.split()]\n\n    n = len(a)\n\n    divisors = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a[j - 1] % i == 0:\n                divisors[i] += 1\n\n    result = 1\n\n    for divisor in divisors:\n        result *= divisor + 1\n\n    return str(result - 1)\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split()]\n\n    factors = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                factors[i] += 1\n    return str(sum(factors))"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    s = [1] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                s[j] += 1\n    return str(sum(s))\n\nassert(solution('''5\n1 2 3 4 5\n''') == '1')\nassert(solution('''6\n6 90 12 18 30 18\n''') == '4')\n'''\nimport sys\nsys.setrecursionlimit(10**7)\nfrom functools import reduce\nfrom itertools import accumulate\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n\n    c = {}\n    for i in a:\n        if i not in c.keys():\n            c[i] = 1\n        else:\n            c[i] += 1\n\n    l = list(c.keys())\n    l.sort()\n    l.reverse()\n    l = list(map(str, l))\n\n    return''.join(l)\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    # print(a)\n    i = 0\n    count = 0\n    while i < n:\n        count += 1\n        j = i + 1\n        while j < n:\n            if a[i] == a[j]:\n                break\n            j += 1\n        i = j\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    coin = list(map(int, stdin.readline().strip().split()))\n\n    value = coin[-1]\n    coin = coin[:-1]\n    \n    # i is number of times of coin[i] we use\n    i = 0\n    p = 0\n    \n    for i in range(len(coin)):\n        if coin[i] == value:\n            p += 1\n        elif coin[i] > value:\n            p = 0\n            value = coin[i]\n            \n    return p\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n    min_coins = n\n    coins.sort()\n\n    for i in range(n):\n        if i >= coins[0]:\n            min_coins = min(min_coins, 1 + solution(stdin))\n\n    return min_coins\n\n\nassert (solution('''6\n1 2 4 3 3 2''')) == 2\nassert (solution('''1\n100''')) == 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = [int(x) for x in stdin.readline().strip().split()]\n\n    dp = [float('inf')] * (1 + max(coins))\n    dp[0] = 0\n\n    for c in coins:\n        for i in range(c, len(dp)):\n            dp[i] = min(dp[i], dp[i - c] + 1)\n    print(dp[len(dp) - 1])"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = sorted(int(stdin.readline()) for _ in range(n))\n    diffs = [coins[i] - coins[i - 1] for i in range(1, n)]\n    print(diffs.count(diffs[0]))"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    p = {}\n    for x in a:\n        p[x] = p.get(x, 0) + 1\n\n    print(len(p))\nsolution('')\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    l = [1] + l + [l[-1]+1]\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            l[i+1] += 1\n    return str(l.count(l[0])-1)\n\n\nassert solution('6') == '2'\nassert solution('1 100') == '1'\nassert solution('2 1 1') == '1'\nassert solution('3 1 1') == '2'\nassert solution('100') == '1'\nassert solution('11 7 10 9 17 22 22') == '6'\nassert solution('100') == '1'\nassert solution('13 4 7 6 7 5 2 1') == '5'\nassert solution('13 4 7 6 7 5 2 1') == '5'\nassert solution('4 2 1') == '1'\nassert solution('4 2 2') == '2'\nassert solution('100') == '1'\nassert solution('10 5 10 10 10 10 5 10') == '3'\nassert solution('100') == '1'\nassert solution('200') == '1'\nassert solution('100') == '1'\nassert solution('1000') == '1'\nassert solution('1000') == '1'\nassert solution('99999') == '1'\nassert solution('99999') == '1'\nassert solution('999999') == '1'\nassert solution('999999') == '1'\nassert solution('1000000') == '1'\nassert solution('1000000') == '1'\nassert solution('1000000000') == '1'\nassert solution('1000000000') == '1'\nassert solution('1000000000000') == '1'\nassert solution('1000000000000') == '1'\nassert solution('10000000000000') == '1'\nassert solution('10000000000000') == '1'\nassert solution('1000000000000000') == '1'\nassert solution('1000000000000000') == '1'\nassert solution('1000000000000000000') == '1'\nassert solution('1000000000000000000') == '1'\nassert solution('10000000000000000000') == '1'\nassert solution('10000000000000000000') == '1'\nassert solution('1000000000000000000000') == '1'\nassert solution('1000000000000000000000') == '1'\nassert solution('10000000000000000000000') == '1'\nassert solution('10000000000000000000000') == '1'\nassert solution('100000000000000000000000') == '1'\nassert solution('100000000000000000000000') == '1'\nassert solution('1000000000000000000000000') == '1'\nassert solution('1000000000000000000000000') == '1'\nassert solution('10000000000000000000000000') == '1'\nassert solution('10000000000000000000000000') == '1'\nassert solution('100000000000000000000000000') == '1'\nassert solution('100000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('10000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('1000000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution('100000000000000000000000000000000000000000000000000000000000000000') == '1'\nassert solution"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [int(x) for x in stdin.split()]\n    coins.sort()\n    dp = [0] * (n+1)\n    dp[0] = 1\n\n    for i in range(1, n+1):\n        for j in range(i, 0, -1):\n            if coins[j-1] == coins[i-1]:\n                dp[i] = dp[i-1]\n            else:\n                break\n\n    return str(dp[n])\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    c = list(map(int, stdin.readline().strip().split(' ')))\n\n    return str(solve(n, c))\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n == 1 and r == 1:\n        return str(-1)\n    a = list(map(int, stdin.split()))\n    min_heaters = 1\n    pos = 0\n    for i in range(n):\n        if a[i] == 1:\n            pos = i\n            break\n    if a[pos - r + 1: pos + r - 1].count(1) == r - 1:\n        return str(-1)\n    for i in range(pos - r + 1, pos + r - 1):\n        if a[i] == 1:\n            min_heaters += 1\n    return str(min_heaters)"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n\n    a = list(map(int, stdin.split()))\n\n    heaters = [0] * n\n\n    for i in range(n):\n        if a[i] == 1:\n            heaters[i] = 1\n\n    # Calculate the total number of heaters needed\n\n    heaters = sorted(heaters)\n\n    needed = 0\n\n    for i in range(n):\n        if a[i] == 1:\n            if i > 0 and a[i - 1] == 1:\n                continue\n            if i < n - 1 and a[i + 1] == 1:\n                continue\n            needed += 1\n\n    if needed >= len(heaters):\n        return -1\n    else:\n        return needed"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    if r == 1:\n        return '-1'\n    if sum(A) == 0:\n        return '0'\n    A.sort()\n    sum_of_heaters = 0\n    counter = 0\n    for a in A:\n        sum_of_heaters += a\n        if sum_of_heaters > r:\n            return str(counter)\n        counter += 1\n    return '-1'"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    if n == 0 or r == 0:\n        return -1\n    a = list(map(int, stdin.readline().split()))\n    \n    k = 0\n    for i in range(1, n):\n        if a[i] == 1:\n            k += 1\n            a[i] = min(a[i - r + 1:i + r - 1]) + 1\n    return k\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    s = list(map(int, stdin.split()))\n    positions = []\n    for i in range(n):\n        if s[i] == 1:\n            positions.append(i)\n    \n    positions.sort()\n    print(positions)\n    heaters = 0\n    start = 0\n    end = len(positions) - 1\n    for pos in positions:\n        if pos - r + 1 <= start and pos + r - 1 >= end:\n            heaters += 1\n            start = pos - r + 1\n            end = pos + r - 1\n        elif start <= pos - r + 1:\n            heaters += 1\n            start = pos - r + 1\n        elif end >= pos + r - 1:\n            heaters += 1\n            end = pos + r - 1\n    return str(heaters)"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    house = list(map(int, stdin.split(' ')))\n    heaters = [0] * k\n    for i in range(k):\n        if house[i] == 1:\n            heaters[i] = 1\n    i = 0\n    while i < len(house) - k:\n        heaters[i] += 1\n        for j in range(k):\n            if heaters[j] == 2:\n                heaters[j] = 1\n        i += 1\n\n    while i < len(house):\n        heaters[i] += 1\n        i += 1\n    if heaters == [0] * k:\n        return '-1'\n    else:\n        return str(sum(heaters))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    values = [int(x) for x in stdin.split()]\n    if m == 0:\n        return -1\n    elif m == n:\n        return 0\n    else:\n        nums = list(range(n))\n        min_h = min(values)\n        if min_h == 0:\n            return 0\n        else:\n            for i in range(len(values)):\n                if values[i] == min_h:\n                    values[i] = 0\n                    nums[i] = -1\n            return nums.count(-1)\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    \n    heaters = []\n    for i in range(0, len(array)):\n        if array[i] == 1:\n            heaters.append(i)\n    \n    result = min(len(heaters) // r, len(array) - len(heaters) + 1)\n    \n    return str(result) if result!= len(heaters) // r + 1 else \"-1\"\n\nimport sys"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    if line[0] == '':\n        return -1\n    elif line[0].strip() == '-1':\n        return -1\n    else:\n        n, r = map(int, line[0].split())\n        a = list(map(int, line[1].split()))\n        if n == 0 or n < 0 or r < 1 or r > 1000:\n            return -1\n        elif n == 1:\n            return 0\n        elif n == 2 and r == 1:\n            if a[1] == 1:\n                return 0\n            else:\n                return 1\n        elif n == 2 and r == 2:\n            if a[0] == 0:\n                return 0\n            else:\n                return 1\n        else:\n            start = 0\n            end = n - 1\n            if a[0] == 0:\n                start = 0\n            else:\n                start = 1\n            if a[n - 1] == 1:\n                end = n - 1\n            else:\n                end = n\n            best = n\n            while start <= end:\n                mid = (start + end) // 2\n                if a[mid] == 1:\n                    if mid > 0 and a[mid - 1] == 0:\n                        if a[mid] + a[mid - 1] + 1 < best:\n                            best = a[mid] + a[mid - 1] + 1\n                            if mid + 1 > n - 1 and a[mid + 1] == 0:\n                                best = mid + 1\n                        else:\n                            end = mid - 1\n                    elif mid < n - 1 and a[mid + 1] == 0:\n                        if a[mid] + a[mid + 1] + 1 < best:\n                            best = a[mid] + a[mid + 1] + 1\n                            if mid - 1 < 0 and a[mid] == 0:\n                                best = mid + 1\n                        else:\n                            end = mid - 1\n                    else:\n                        best = a[mid] + 1\n                        if mid - 1 < 0 and a[mid] == 0:\n                            best = mid + 1\n                elif a[mid] == 0:\n                    if mid > 0 and a[mid - 1] == 1:\n                        if a[mid - 1] + a[mid] + 1 < best:\n                            best = a[mid - 1] + a[mid] + 1\n                            if mid + 1 > n - 1 and a[mid + 1] == 0:\n                                best = mid + 1\n                        else:\n                            end = mid - 1\n                    elif mid < n - 1 and a[mid + 1] == 1:\n                        if a[mid] + a[mid + 1] + 1 < best:\n                            best = a[mid] + a[mid + 1] + 1\n                            if mid - 1 < 0 and a[mid] == 0:\n                                best = mid + 1\n                        else:\n                            end = mid - 1\n                    else:\n                        best = a[mid] + 1\n                        if mid - 1 < 0 and a[mid] == 0:\n                            best = mid + 1\n                if best < n - 1:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n            if best < n - 1:\n                return best\n            else:\n                return -1\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    pos = a.index(1)\n    heaters = set()\n    for i in range(pos - r + 1, pos + r - 1):\n        if i < 0:\n            i += n\n        heaters.add(i)\n    for i in range(pos + r + 1, n):\n        if i >= n:\n            i -= n\n        heaters.add(i)\n    if len(heaters) < n:\n        return -1\n    return len(heaters)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    print(sum(i * i <= input for i in range(1, input // 3 + 1)))\n    return ''"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solve(n))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # for i in range(1, n // 3):\n    #     for j in range(i + 1, n // 2):\n    #         k = n - i - j\n    #         if i * j * k == n:\n    #             print(i, j, k)\n    #             return\n\n    for a in range(1, n // 2 + 1):\n        for b in range(a + 1, n // 2 + 1):\n            c = n - a - b\n            if a * b * c == n:\n                print(a, b, c)\n                return\n\n    return \"None\"\n\n\nprint(solution(int(input())))\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nassert (solution(stdin)) == \"3\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    count = 0\n\n    for A in range(2, N // 2 + 1):\n        B = N - A\n        if A * B == N:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 1\n    while True:\n        if (N - (n * (n + 1) / 2)) % n == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    input_str = lines[0]\n    return str(find_fib(int(input_str)))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return str(result)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, i):\n            k = N - i * j\n            if i < j < k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_strip(stdin.strip()))\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n\n    # We need to find out if there is any type of change that is possible\n    # It means that we have to change some of the brackets and we have to do so.\n    # We start by counting the number of the type of bracket\n    count = 0\n    for c in s:\n        if c == '(':\n            count += 1\n        elif c == ')':\n            count -= 1\n\n        # If there is not change possible, then we stop the loop\n        if count < 0:\n            break\n\n    if count == 0:\n        print(0)\n        return\n\n    # We need to do the changes, we need to remove and add the brackets\n    # At the same time, we will keep track of the types of changes\n    changes = []\n    for i in range(n):\n        if s[i] == '(':\n            changes.append(s[i])\n        elif s[i] == ')':\n            if len(changes) == 0 or changes[-1] == '(':\n                changes.append(s[i])\n                del changes[-1]\n            else:\n                changes[-1] += s[i]\n        else:\n            print(i)\n            continue\n\n    print(len(changes))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    result = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            result += 1\n        else:\n            result -= 1\n    return str(result)"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestConvert(unittest.TestCase):\n    def test(self):\n        pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace('(', '1').replace(')', '1')\n    memo = [0] * n\n    memo[0] = 0\n    memo[1] = 1 if s[0] == '1' else 0\n    memo[2] = 2 if s[:2] == '11' else 1\n    for i in range(3, n):\n        memo[i] = memo[i - 1]\n        if s[i] == '1':\n            memo[i] += memo[i - 2]\n            if s[i - 1] == '1':\n                memo[i] += memo[i - 3]\n    return memo[n - 1]\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(1, len(stdin) - 1):\n        if stdin[i] == ')':\n            if stdin[i - 1] == '(':\n                result += 1\n            if stdin[i + 1] == '(':\n                result += 1\n    return result\n\n\nassert solution('') == 0\nassert solution('())') == 0\nassert solution('(())') == 0\nassert solution('(((()' + '()' + '()' + '))') == 0\nassert solution('))()(((') == 3\nassert solution(')()((') == 1\nassert solution('(((') == 1\nassert solution(')()((') == 1\nassert solution('(((') == 2\nassert solution('))()((') == 1\nassert solution(')))()(((') == 2\nassert solution('()((()' + '()' + '()' + '))') == 4\nassert solution('()((()' + '()' + '()' + '))') == 1\nassert solution('((()' + '()' + '()' + '))') == 3\nassert solution('((()' + '()' + '()' + '))') == 3\nassert solution
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin.strip()\n    brackets = brackets.replace(')', '(')\n    brackets = brackets.replace(']', '[')\n    brackets = brackets.replace('}', '{')\n    brackets = brackets.replace('>', '<')\n    brackets = brackets.replace('?', ':')\n    brackets = brackets.replace('&', ';')\n    brackets = brackets.replace('^', '**')\n    brackets = brackets.replace('-', '+-')\n    brackets = brackets.replace('!', '+!')\n    brackets = brackets.replace('@', '*@')\n    brackets = brackets.replace('/', '//')\n    brackets = brackets.replace('<', '>')\n    brackets = brackets.replace(' ', '')\n    brackets = brackets.replace('[', ']')\n    brackets = brackets.replace('(', ')')\n    brackets = brackets.replace('{', '}')\n    brackets = brackets.replace(']', ']')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('?', '?')\n    brackets = brackets.replace('&', '&')\n    brackets = brackets.replace('^', '**')\n    brackets = brackets.replace('-', '-')\n    brackets = brackets.replace('!', '!')\n    brackets = brackets.replace('@', '@')\n    brackets = brackets.replace('/', '/')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace(' ', '')\n    brackets = brackets.replace('[', '[')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('}', '}')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('?', '?')\n    brackets = brackets.replace('&', '&')\n    brackets = brackets.replace('^', '**')\n    brackets = brackets.replace('-', '-')\n    brackets = brackets.replace('!', '!')\n    brackets = brackets.replace('@', '@')\n    brackets = brackets.replace('/', '/')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace(':', ':')\n    brackets = brackets.replace(';', ';')\n\n    stack = []\n    i = 0\n    while i < len(brackets):\n        if brackets[i] == '(':\n            stack.append('(')\n        elif brackets[i] == ')':\n            if len(stack) == 0:\n                i += 1\n                continue\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                i += 1\n                continue\n        i += 1\n\n    if len(stack) == 0:\n        return 0\n\n    return len(stack)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input\n    6\n    (((())\n    Output\n    3\n    Input\n    6\n    ()()()\n    Output\n    0\n    Input\n    1\n    )\n    Output\n    0\n    Input\n    8\n    )))(((((\n    Output\n    0\n    \"\"\"\n    return 0\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()[:-1]\n    count = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            if s[i + 1] == \"(\":\n                count += 1\n                if i + 2 < n:\n                    if s[i + 2] == \"(\":\n                        count += 1\n                        if i + 3 < n:\n                            if s[i + 3] == \"(\":\n                                count += 1\n                                if i + 4 < n:\n                                    if s[i + 4] == \"(\":\n                                        count += 1\n                                        if i + 5 < n:\n                                            if s[i + 5] == \"(\":\n                                                count += 1\n                                                if i + 6 < n:\n                                                    if s[i + 6] == \"(\":\n                                                        count += 1\n                                                    if i + 7 < n:\n                                                        if s[i + 7] == \"(\":\n                                                            count += 1\n                                                            if i + 8 < n:\n                                                                if s[i + 8] == \"(\":\n                                                                    count += 1\n                                                                    if i + 9 < n:\n                                                                        if s[i + 9] == \"(\":\n                                                                            count += 1\n                                                                            if i + 10 < n:\n                                                                                if s[i + 10] == \"(\":\n                                                                                    count += 1\n                                                                                    if i + 11 < n:\n                                                                                        if s[i + 11] == \"(\":\n                                                                                            count += 1\n                                                                                            if i + 12 < n:\n                                                                                                if s[i + 12] == \"(\":\n                                                                                                    count += 1\n                                                                                                    if i + 13 < n:\n                                                                                                        if s[i + 13] == \"(\":\n                                                                                                            count += 1\n                                                                                                            if i + 14 < n:\n                                                                                                                if s[i + 14] == \"(\":\n                                                                                                                    count += 1\n                                                                                                                    if i + 15 < n:\n                                                                                                                        if s[i + 15] == \"(\":\n                                                                                                                            count += 1\n                                                                                                                            if i + 16 < n:\n                                                                                                                                if s[i + 16] == \"(\":\n                                                                                                                                    count += 1\n                                                                                                                                    if i + 17 < n:\n                                                                                                                                       if s[i + 17] == \"(\":\n                                                                                                                                            count += 1\n                                                                                                                                            if i + 18 < n:\n                                                                                                                                                if s[i + 18] == \"(\":\n                                                                                                                                                   count += 1\n                                                                                                                                                   if i + 19 < n:\n                                                                                                                                                      if s[i + 19] == \"(\":\n                                                                                                                                                                count += 1\n                                                                                                                                                                if i + 20 < n:\n                                                                                                                                                                                      if s[i + 20] == \"(\":\n                                                                                                                                                                                             count += 1\n                                                                                                                                                                                                     print(count)\n                                                                                                                                                                                             return count\n                                                                                                                                                                                                     \n                                                                                                                                                                                                     \n                                                                                                                                                                                                     \nsolution(\"((((()))))\"))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    c = [0] * n\n    o = 0\n    for i in range(n):\n        if s[i] == '(':\n            c[i] = 1\n        else:\n            c[i] = -1\n    for i in range(n):\n        if c[i] == 0:\n            o += 1\n        else:\n            o += c[i-1]\n    return str(o)"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The strings \"\", \"ab\", \"ba\" and \"abab\" are not subsequences of the string \"ababab\".\n    We have three other strings that are subsequences of the string \"ababab\" too:\n\n    \"ab\", \"b\" and \"abab\". We know that the length of the string must be at least 4.\n\n    For other strings we need to determine the length of the string $s$ such that $t$ is a subsequence of $s$ (the length of $s$ is equal to the length of the string $t$).\n\n    The best way to find the length of $s$ is to remove substring that is the longest until the first mismatch occurs. We know that the length of the string is less than or equal to $l$, but we can't find the length of the substring $s$ that is the longest until the first mismatch occurs.\n\n    If we know the length of the substring $s$ then we can determine the length of the substring $s$ that is the longest until the first mismatch occurs.\n\n    >>> solution(stdin)\n    'ab'\n    >>> solution('')\n    '0'\n    >>> solution('aba')\n    '1'\n    >>> solution('bbabab')\n    '3'\n    >>> solution('abcdef')\n    '2'\n    >>> solution('asdfasdf')\n    '3'\n    >>> solution('abcde')\n    '3'\n    >>> solution('a')\n    '0'\n    >>> solution('b')\n    '1'\n    >>> solution('abab')\n    '0'\n    >>> solution('aaaaaa')\n    '0'\n    >>> solution('bbbbbb')\n    '0'\n    \"\"\"\n\n    s = stdin.strip()\n    t = stdin.strip()\n\n    if not s:\n        return '0'\n    if s == t:\n        return '0'\n\n    if len(s) < len(t):\n        return '0'\n\n    def find_substr_length(start):\n        \"\"\"\n        The idea is to find the longest substring that is also a suffix of $s$ (which is a subsequence of $s$)\n        We use two pointers $l$ and $r$ to traverse $s$\n        We call the function $r = l + |s|$ and $l = r - 1$\n        If the character at the current position $r$ is the same as the character at the current position $l$\n        then we move $l$ to $r$ to expand the substring until we get a mismatch character\n        If the character at the current position $r$ is not the same as the character at the current position $l$\n        then we move $r$ to $l$ to shrink the substring until we get the matching character\n        If the length of the substring $s[l;r]$ is more than the length of the substring $t[l;r]$\n        then we return the length of $s[l;r]$, else we return the length of $t[l;r]$\n        \"\"\"\n        l, r = start, start + len(s)\n\n        while l >= 0 and r < len(s):\n            if s[l]!= s[r]:\n                break\n\n            l -= 1\n            r += 1\n\n        return r - l - 1\n\n    max_len = 0\n    for i in range(len(s)):\n        max_len = max(max_len, find_substr_length(i))\n\n    return str(max_len)\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    s1 = [0] * len(s)\n    t1 = [0] * len(t)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            s1[j] = s1[j - 1] + 1 if s[i:j + 1] == s[i:j + 1][::-1] else 0\n    for i in range(len(t)):\n        for j in range(i, len(t)):\n            t1[j] = t1[j - 1] + 1 if t[i:j + 1] == t[i:j + 1][::-1] else 0\n    result = 0\n    for i in range(len(t) - 1, -1, -1):\n        if t1[i] + s1[i] > result:\n            result = t1[i] + s1[i]\n    return result\n\nassert solution('') == 0\nassert solution('a') == 0\nassert solution('ab') == 1\nassert solution('abcd') == 2\nassert solution('abcde') == 3\nassert solution('abc') == 0\nassert solution('bbaba') == 3\nassert solution('bb') == 2\nassert solution('baaba') == 2\nassert solution('ba') == 2\nassert solution('bbbbbbbbbbbbbbbbbbbbbbbbbbbbaaabaaabaaabb') == 8\nassert solution('baaba') == 2\nassert solution('ba') == 2\nassert solution('baaabaaabaaab') == 4\nassert solution('baaabaaabaaab') == 4\nassert solution('baaabaaabaaabaaab') == 4\nassert solution('baaaabaaabaaabaaab') == 4\nassert solution('baaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaabaabaaabaaabaaabaabaabaabaabaabaaabaaabaaabaaabaaabaabaabaabaabaabaabaabaabaabaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaabaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaa"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def helper(s, t):\n        memo = {}\n\n        def dfs(l, r):\n            if (l, r) in memo:\n                return memo[(l, r)]\n\n            if r - l == len(t):\n                return l\n\n            res = float('-inf')\n            for i in range(l + 1, r):\n                if s[i] == t[r - l]:\n                    res = max(res, dfs(l + 1, i + 1))\n            memo[(l, r)] = res\n            return res\n\n        return dfs(0, len(s))\n\n    s, t = stdin.splitlines()\n    return str(helper(s, t))"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    result = 0\n    for i in range(1, len(s) + 1):\n        for j in range(len(t) + 1):\n            if j + i <= len(s):\n                if t == s[j: j + i]:\n                    result = max(result, i)\n    return result\n\n\nassert (\n    solution(\n        \"\"\"bbaba\nbb\n\"\"\"\n    )\n    == \"3\"\n)\n\nassert (\n    solution(\n        \"\"\"baaba\nab\n\"\"\"\n    )\n    == \"2\"\n)\n\nassert (\n    solution(\n        \"\"\"abcde\nabcde\n\"\"\"\n    )\n    == \"0\"\n)\n\nassert (\n    solution(\n        \"\"\"asdfasdf\nfasd\n\"\"\"\n    )\n    == \"3\"\n)\n\nassert (\n    solution(\n        \"\"\"aaa\nbbb\n\"\"\"\n    )\n    == \"1\"\n)\n\nassert (\n    solution(\n        \"\"\"cccc\ncc\n\"\"\"\n    )\n    == \"0\"\n)\n\nassert (\n    solution(\n        \"\"\"abcd\nabcd\n\"\"\"\n    )\n    == \"0\"\n)\n\nassert (\n    solution(\n        \"\"\"aaaa\na\n\"\"\"\n    )\n    == \"0\"\n)\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    s_len = len(s)\n    t_len = len(t)\n    dp = [[0] * (t_len + 1) for i in range(s_len + 1)]\n    for i in range(1, s_len + 1):\n        for j in range(1, t_len + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = 0\n    return dp[s_len][t_len]\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check_sub(s1: str, s2: str) -> bool:\n        s2_len = len(s2)\n        s1_len = len(s1)\n        i = 0\n        for char in s2:\n            while i < s1_len and s1[i]!= char:\n                i += 1\n            if i == s1_len:\n                return False\n            i += 1\n        return True\n\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s) < len(t):\n        s, t = t, s\n    s_len = len(s)\n    if s_len == 0:\n        return 0\n    t_len = len(t)\n    t_i = 0\n    while t_i < t_len:\n        while t_i < t_len and s[t_i]!= t[t_i]:\n            t_i += 1\n        if t_i == t_len:\n            return 0\n        t_i += 1\n    return t_len - t_i\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the longest substring of the input string that can be removed so that the substring is a subsequence of the original string.\n    \"\"\"\n    s, t = stdin.splitlines()\n    s_len, t_len = len(s), len(t)\n    memo = [[-1] * (s_len + 1) for _ in range(t_len + 1)]\n    memo[0][0] = 0\n    for i in range(s_len):\n        for j in range(t_len):\n            if s[i] == t[j]:\n                memo[j + 1][i + 1] = 1 + memo[j][i]\n            else:\n                memo[j + 1][i + 1] = max(memo[j][i + 1], memo[j + 1][i])\n    return memo[-1][-1]\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_hard(stdin))\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    while True:\n        if t in s:\n            s = s.replace(t, \"\", 1)\n        else:\n            break\n    return s\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    if c > d:\n        x = a\n        y = c\n    else:\n        x = a\n        y = d\n    return str(x * y)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split(' '))\n    return str(max(a * b, c * d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max([x * y for x in range(a, b + 1) for y in range(c, d + 1)]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    return str(max(1, min(a, b) * min(c, d)))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    best = -1\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if x*y > best:\n                best = x*y\n    return str(best)\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(max(a * b, a * d, b * c))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split(\" \")]\n    print(max([a, b, c, d]))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split(\" \"))\n    return str(max(a * b, a * c, b * d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(\" \")))\n    x = [1, 2]\n    while a <= b and c <= d:\n        if a * x[-1] <= b:\n            x.append(a * x[-1])\n            a += 1\n        else:\n            b -= a\n            a = 1\n        if c * x[-1] <= d:\n            x.append(c * x[-1])\n            c += 1\n        else:\n            d -= c\n            c = 1\n    print(max(x))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    x = 1\n    y = 1\n\n    while x <= b and y <= d:\n        if a <= x and c <= y:\n            break\n        x += 1\n        y += 1\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_list = [int(x) for x in stdin.split()]\n\n    # sort the list so we can use binary search\n    d_list.sort()\n    \n    # k is the number of problems that will be for ARCs\n    k = 1\n    for i in range(N):\n        # we want to find the largest k such that\n        # d_i > k\n        # so we can increment k and we will try the k + 1 one\n        if d_list[i] > k:\n            k += 1\n    # we want to find the smallest k such that\n    # d_i > k\n    # so we can decrement k and we will try the k - 1 one\n    k -= 1\n\n    # k_prime is the number of problems that will be for ABCs\n    k_prime = 1\n    for i in range(N):\n        # we want to find the smallest k such that\n        # d_i > k\n        # so we can decrement k and we will try the k - 1 one\n        if d_list[i] > k_prime:\n            k_prime += 1\n    # we want to find the largest k such that\n    # d_i > k\n    # so we can increment k and we will try the k + 1 one\n    k_prime -= 1\n\n    return str(k - k_prime)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()[1:]))"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    difficulties = list(map(int, stdin.readline().strip().split()))\n    num_arcs, num_abc = 0, 0\n    for d in difficulties:\n        if d > num_arcs:\n            num_arcs += 1\n        else:\n            num_abc += 1\n    return str(num_arcs)\n\nsolution(input())"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = [0, 0]\n    for line in stdin:\n        N, K = map(int, line.split())\n        if K > N // 2:\n            result[0] += 1\n        else:\n            result[1] += 1\n    print(result[0], result[1])\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    print(arr)\n    return stdin"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *difficulty = [int(x) for x in stdin.split()]\n    problems = [0 for _ in range(N)]\n    for d in difficulty:\n        problems[d - 1] += 1\n    print(sum(problems))"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Accepts a string as input, expecting two lines, and returns a string as output.\n    \"\"\"\n    n, l = [int(x) for x in stdin.split()]\n    # Split input into two lines and create list of integers\n    d = [int(x) for x in stdin.split()[1:]]\n    # Split the second line into integers\n    if n % 2 == 0:\n        print(n // 2)\n        # If n is even, choose K = (n / 2)\n        k = (n // 2)\n    else:\n        print((n + 1) // 2)\n        # If n is odd, choose K = (n / 2) + 1\n        k = (n // 2) + 1\n    # Create list of differences between the two lines\n    diffs = [x - y for x, y in zip(d[0:k], d[k:])]\n    # Return the count of numbers in the list that are the same as the first number\n    return str(diffs.count(diffs[0]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    return str(len([1 for i, x in enumerate(d) if i % 2 == 0 and x >= 5]) == len([1 for i, x in enumerate(d) if i % 2!= 0 and x >= 6]))"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return '0'\n    if n == 1:\n        return '0'\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    choices = []\n    probs = []\n    for x in range(1, n, 2):\n        probs.append(int(stdin.split()[x]))\n    for x in range(2, n, 2):\n        choices.append(int(stdin.split()[x]))\n    choices = [choices[0]] + sorted(choices[1:])\n    probs = [probs[0]] + sorted(probs[1:])\n    \n    #print(probs)\n    #print(choices)\n    \n    for x in range(len(choices)):\n        #print(x)\n        if a*probs[x] == b:\n            return str(x+1)\n        \n    #print(len(probs))\n    #print(len(choices))\n    #print(choices)\n    #print(probs)\n    \n    return '0'\n\nsolution(str(input()))\n'''\n\n'''\n5\n9 1 4 4 6 7\n'''\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if not n.isdigit():\n        raise ValueError(\"Input must be an integer\")\n    if int(n) % 2!= 0:\n        raise ValueError(\"Input must be even\")\n    n = int(n)\n    res = 0\n    for line in stdin:\n        line = line.strip()\n        if not line.isdigit():\n            raise ValueError(\"Input must be an integer\")\n        d = int(line)\n        if d > n:\n            raise ValueError(\"Input values must be between 1 and %d\" % n)\n        res += d // 2\n    return str(res)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    _, h, l, r = list(map(int, stdin[0].split()))\n    a = list(map(int, stdin[1].split()))\n    a.sort()\n    res = 0\n    for i in range(h):\n        if a[i] >= l and a[i] <= r:\n            res += 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    best = 0\n    for i in range(1, n + 1):\n        if a[i - 1] < h:\n            best = max(best, i)\n    return str(best)\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(num) for num in stdin.split()]\n    a = [int(num) for num in stdin.split()]\n    \n    time = 0\n    res = 1\n    i = 0\n    while i < n:\n        time += a[i]\n        if time > h:\n            break\n        time += l\n        if time > h:\n            break\n        time += r\n        if time > h:\n            break\n        time += a[i]\n        res += 1\n        i += 1\n    return str(res)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, h, l, r) = map(int, stdin.split())\n    hours = [int(stdin) for _ in range(n)]\n    return solve(n, h, l, r, hours)\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # vova has a fixed sleeping time of 1 hour, so can schedule a maximum of n sleeps\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    result = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            result += 1\n\n    return str(result)\n\n\nassert(solution('''7 24 21 23''') == '3')\nassert(solution('''16 17 14 20 20 11 22''') == '3')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')\nassert(solution('''6 8 10 8 10 12 13 17''') == '2')"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n, h, l, r = [int(i) for i in line.split()]\n    a = [int(i) for i in stdin.readline().split()]\n    return f'{solve(a, n, h, l, r)}'\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # a = [8, 11, 4, 6, 9, 19, 14, 13, 1, 4, 5, 10]\n    result = 0\n    left = 0\n    right = h\n    while left < n:\n        right = max(right, l)\n        result += 1\n        if left == right:\n            break\n        left += 1\n    return result\n\nimport sys"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 2 * 10**5:\n        raise ValueError(\"Number of problems is too big\")\n    a = stdin.strip().split(' ')\n    differences = [int(x) - int(y) for x, y in zip(a, a[1:])]\n    if len(differences) == 1:\n        return 1\n    max_diff = max(differences)\n    if max_diff > 2 * max_diff:\n        return 1\n    return sum(differences[i] > max_diff * 2 for i in range(len(differences))) + 1\n\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nsys.stdin = open(\"input.txt\", \"r\")\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    problems = [int(x) for x in input().split()]\n    print(N - 1)\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_contest(arr: list, max_diff: int) -> bool:\n        for i in range(len(arr) - 1):\n            if arr[i + 1] - arr[i] > max_diff:\n                return False\n        return True\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    # max_diff = max(arr)\n    # max_diff *= 2\n    max_diff = 100\n    while max_diff > 0:\n        if is_valid_contest(arr, max_diff):\n            return len(arr)\n        max_diff = max_diff // 2\n    return 0\nprint(solution(stdin))"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    problem_list = [int(x) for x in stdin.readline().split()]\n    return stdin.readline()\n\n\n\"\"\"\n\nfrom sys import stdin, stdout\nn = int(stdin.readline())\nproblems = [int(x) for x in stdin.readline().split()]\nmax_problems = 0\n\nfor i in range(n - 1):\n    max_problems += (problems[i] + 2 * problems[i + 1]) < (problems[i + 1] * 2)\n    max_problems -= (problems[i] - problems[i + 1]) > (problems[i] * 2)\nprint(max_problems)\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        for j in range(n):\n            if l[j] > l[i] * 2:\n                l[j] = l[i] * 2\n    print(l.count(l[0]))\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(stdin.readline()) for _ in range(n)]\n    return str(max(1, max(l)//2))"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = [0] * n\n    for i in range(n):\n        a = stdin.readline().split()\n        ans[i] = int(a[n - 1])\n    return str(ans.index(max(ans)) + 1)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort()\n    cnt = 1\n    for i in range(1, len(arr)):\n        if arr[i - 1] * 2 <= arr[i]:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    d = [a[0]]\n    d.extend([a[i] * a[i + 1] for i in range(1, n - 1)])\n    d.append(a[n - 1])\n    return''.join(map(str, d[bisect(d, lcm(d[i], d[i + 1])) - 1]))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    result = None\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = lcm(a[i], a[j])\n            if diff < min_diff:\n                result = i, j\n                min_diff = diff\n    return str(result[0]) + \" \" + str(result[1])\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline()\n    A = stdin.readline().split()\n    M = 10 ** 7\n    ans = (None, None)\n    for i in range(N):\n        for j in range(i + 1, N):\n            a = lcm(int(A[i]), int(A[j]))\n            if a < M:\n                M = a\n                ans = (i, j)\n    return \" \".join(map(str, ans))"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    ans = [0, n-1]\n    for i in range(n-1):\n        if a[i] < a[i+1] and a[i] > 0:\n            if a[i+1] % a[i] == 0:\n                ans = [i+1, i+2]\n    return''.join(str(x) for x in ans)\n\nassert solution('1\\n1') == '1 1'\nassert solution('2\\n1 2') == '2 1'\nassert solution('3\\n2 1 2') == '1 2'\nassert solution('4\\n2 1 2 4') == '2 1'\nassert solution('5\\n2 1 2 4 8') == '2 1'\nassert solution('6\\n2 1 2 4 5 6') == '1 2'\nassert solution('7\\n2 1 2 4 5 6 7') == '1 2'\nassert solution('8\\n2 1 2 4 5 6 7 8') == '1 2'\nassert solution('9\\n2 1 2 4 5 6 7 8 9') == '1 4'\nassert solution('10\\n2 1 2 4 5 6 7 8 9 10') == '1 4'\nassert solution('11\\n2 1 2 4 5 6 7 8 9 10 11') == '1 4'\nassert solution('12\\n2 1 2 4 5 6 7 8 9 10 11 12') == '1 4'\nassert solution('13\\n2 1 2 4 5 6 7 8 9 10 11 12 13') == '1 4'\nassert solution('14\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14') == '1 4'\nassert solution('15\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15') == '1 4'\nassert solution('16\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16') == '1 4'\nassert solution('17\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == '1 4'\nassert solution('18\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == '1 4'\nassert solution('19\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == '1 4'\nassert solution('20\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '1 4'\nassert solution('21\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == '1 4'\nassert solution('22\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == '1 4'\nassert solution('23\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == '1 4'\nassert solution('24\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '1 4'\nassert solution('25\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == '1 4'\nassert solution('26\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '1 4'\nassert solution('27\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == '1 4'\nassert solution('28\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == '1 4'\nassert solution('29\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == '1 4'\nassert solution('30\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '1 4'\nassert solution('31\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '1 4'\nassert solution('32\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == '1 4'\nassert solution('33\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == '1 4'\nassert solution('34\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == '1 4'\nassert solution('35\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35') == '1 4'\nassert solution('36\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == '1 4'\nassert solution('37\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37') == '1 4'\nassert solution('38\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38') == '1 4'\nassert solution('39\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39') == '1 4'\nassert solution('40\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40') == '1 4'\nassert solution('41\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41') == '1 4'\nassert solution('42\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42') == '1 4'\nassert solution('43\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43') == '1 4'\nassert solution('44\\n2 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    numbers = list(map(int, stdin.split()))\n\n    number_to_index_map = {}\n\n    for i in range(len(numbers)):\n        number_to_index_map[numbers[i]] = i\n\n    numbers.sort()\n\n    result = None\n\n    for number in numbers:\n        index = number_to_index_map[number]\n        for i in range(index + 1, len(numbers)):\n            if numbers[i] * number < result or result == None:\n                result = numbers[i] * number\n\n    return result"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = None\n    for i in range(n - 1, 0, -1):\n        j = i + 1\n        while j < n:\n            x = a[i]\n            y = a[j]\n            l = x * y // gcd(x, y)\n            if l < 10 ** 7:\n                if ans is None or l < ans:\n                    ans = l\n            j += 1\n    return str(ans)"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    best = 1\n    for i in range(N):\n        for j in range(i + 1, N):\n            if lcm(A[i], A[j]) < best:\n                best = lcm(A[i], A[j])\n                \n    return''.join(map(str, best, i + 1, j + 1))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    x = a[0]\n    for y in a[1:]:\n        x = lcm(x, y)\n\n    result = [0, 0]\n    for i in range(n):\n        for j in range(i+1, n):\n            y = lcm(a[i], a[j])\n            if y < x:\n                if result[0] == 0:\n                    result[0] = i+1\n                    result[1] = j+1\n                x = y\n    return''.join(map(str, result))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\nimport sys"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(stdin) for stdin in stdin.split()]\n    if n == 0:\n        return 0\n    nums.sort()\n    min_lcm = nums[0]\n    for i in range(1, n):\n        lcm = (nums[0] * nums[i]) // gcd(nums[0], nums[i])\n        if lcm < min_lcm:\n            min_lcm = lcm\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = (nums[i] * nums[j]) // gcd(nums[i], nums[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n    return str(min_lcm) + \" \" + str(nums.index(min_lcm) + 1)\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    if n % 3!= 0:\n        print('There is no balanced ternary string')\n        return\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n    if count == 0:\n        print('0' * n)\n        return\n    if count == n:\n        print('1' * n)\n        return\n    if count % 3 == 1:\n        print('1' * (count // 3) + '0' * (n - count // 3 * 3) + '1' * count % 3)\n        return\n    if count % 3 == 2:\n        print('0' * (count // 3) + '1' * (n - count // 3 * 3) + '2' * count % 3)\n        return"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    total_0 = 0\n    total_1 = 0\n    total_2 = 0\n    for c in s:\n        if c == '0':\n            total_0 += 1\n        elif c == '1':\n            total_1 += 1\n        else:\n            total_2 += 1\n    if n % 3 == 0:\n        return s\n    min_ = float('inf')\n    for c in '0123':\n        candidate = s\n        num_0 = 0\n        num_1 = 0\n        num_2 = 0\n        for i, c in enumerate(candidate):\n            if c == '0':\n                num_0 += 1\n            elif c == '1':\n                num_1 += 1\n            else:\n                num_2 += 1\n        diff = total_0 - num_0\n        diff += total_1 - num_1\n        diff += total_2 - num_2\n        if diff < min_:\n            min_ = diff\n            answer = candidate\n    return answer\n\nassert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"211200\") == \"120120\"\nassert solution(\"000000\") == \"021\"\nassert solution(\"000\") == \"000\"\nassert solution(\"21121\") == \"120121\"\nassert solution(\"110101\") == \"110110\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"111111\") == \"111222\"\nassert solution(\"110110\") == \"110110\"\nassert solution(\"210111\") == \"210110\"\nassert solution(\"111111\") == \"111222\"\nassert solution(\"210111\") == \"210110\"\nassert solution(\"110101\") == \"110110\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert solution(\"110102\") == \"110102\"\nassert"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n        if i % 3 == 0:\n            dp[i] = min(dp[i], dp[i // 3] + 1)\n        if i % 2 == 0:\n            dp[i] = min(dp[i], dp[i // 2] + 1)\n\n    m = len(s)\n    dp_string = [0] * (n + 1)\n    dp_string[m] = 0\n\n    for i in range(m - 1, -1, -1):\n        if s[i] == '0':\n            dp_string[i] = min(dp_string[i + 1] + 1, dp_string[i + 2] + 2)\n        elif s[i] == '1':\n            dp_string[i] = min(dp_string[i + 1] + 1, dp_string[i + 2] + 2)\n        elif s[i] == '2':\n            dp_string[i] = min(dp_string[i + 1] + 1, dp_string[i + 2] + 2)\n\n    res = [None] * dp_string[0]\n    for i in range(n + 1):\n        if dp_string[i] == 0:\n            break\n        if i % 3 == 0:\n            res[i // 3] = '0'\n        if i % 2 == 0:\n            res[i // 2] = '0'\n        res[i - 1] = '1'\n\n    print(''.join(res))"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    string = stdin.readline().strip()\n    s = []\n    for i in range(n):\n        if string[i] == '0':\n            s.append(0)\n        elif string[i] == '1':\n            s.append(1)\n        else:\n            s.append(2)\n    if len(set(s)) == 1:\n        return string\n    elif len(set(s)) == 2:\n        tmp = [0] * len(s)\n        for i in range(len(s)):\n            if s[i] == 0:\n                tmp[i] = 1\n            elif s[i] == 1:\n                tmp[i] = 2\n            else:\n                tmp[i] = 0\n        return ''.join(str(x) for x in tmp)\n    else:\n        tmp = [0] * len(s)\n        counter = 0\n        for i in range(len(s)):\n            if s[i] == 0:\n                tmp[i] = 1\n                counter += 1\n            elif s[i] == 1:\n                tmp[i] = 2\n            else:\n                tmp[i] = 0\n                if counter % 2 == 0:\n                    counter += 1\n                else:\n                    counter -= 1\n        return ''.join(str(x) for x in tmp)\nprint(solution(input()))"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    result = \"\".join(sorted(s, key=lambda x: (s.count(x), x)))\n    return result\n\nassert \"021\" == solution(stdin=\"\"\"3\n121\n\"\"\")\nassert \"001122\" == solution(stdin=\"\"\"6\n000000\n\"\"\")\nassert \"211200\" == solution(stdin=\"\"\"6\n211200\n\"\"\")\nassert \"120120\" == solution(stdin=\"\"\"6\n120110\n\"\"\")\n\n\n-----Using Recursion-----\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    if not is_balanced_ternary_string(s):\n        return \"NO SOLUTION\"\n    else:\n        replacements = get_balanced_ternary_string_replacements(s)\n        return \"\".join(replacements)\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.replace('0','z').replace('1','0').replace('2','1')\n    ans = s\n    for i in range(n//3+1):\n        cnt0, cnt1, cnt2 = s.count('0'), s.count('1'), s.count('2')\n        if cnt0 == cnt1 and cnt1 == cnt2:\n            ans = s\n            break\n        s = s.replace('z','2').replace('0','1').replace('1','0')\n    return ans"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the lexicographically smallest balanced ternary string which can be obtained from the given one with minimum number of replacements.\n    >>> solution('')\n    Traceback (most recent call last):\n       ...\n    ValueError: Unexpected number of characters in $s$\n    >>> solution('1')\n    Traceback (most recent call last):\n       ...\n    ValueError: Unexpected number of characters in $s$\n    >>> solution('0')\n    Traceback (most recent call last):\n       ...\n    ValueError: Unexpected number of characters in $s$\n    >>> solution('111')\n    Traceback (most recent call last):\n       ...\n    ValueError: Unexpected number of characters in $s$\n    >>> solution('010110')\n    Traceback (most recent call last):\n       ...\n    ValueError: Unexpected number of characters in $s$\n    >>> solution('111122')\n    Traceback (most recent call last):\n       ...\n    ValueError: Unexpected number of characters in $s$\n    >>> solution('0011100')\n    Traceback (most recent call last):\n       ...\n    ValueError: Unexpected number of characters in $s$\n    >>> solution('0011110')\n    '0011110'\n    >>> solution('011000')\n    '011000'\n    >>> solution('10011')\n    '10011'\n    >>> solution('0111')\n    '0111'\n    >>> solution('011110')\n    '011110'\n    >>> solution('0111110')\n    '0111110'\n    >>> solution('01100')\n    '01100'\n    >>> solution('10100')\n    '10100'\n    >>> solution('10101')\n    '10101'\n    >>> solution('10110')\n    '10110'\n    >>> solution('101100')\n    '101100'\n    >>> solution('101101')\n    '101101'\n    >>> solution('101110')\n    '101110'\n    >>> solution('101111')\n    '101111'\n    >>> solution('111010')\n    '111010'\n    >>> solution('111011')\n    '111011'\n    >>> solution('1110110')\n    '1110110'\n    >>> solution('11101100')\n    '11101100'\n    >>> solution('11101101')\n    '11101101'\n    >>> solution('11101110')\n    '11101110'\n    >>> solution('11101111')\n    '11101111'\n    >>> solution('1111010')\n    '1111010'\n    >>> solution('1111011')\n    '1111011'\n    >>> solution('1111100')\n    '1111100'\n    >>> solution('1111101')\n    '1111101'\n    >>> solution('1111110')\n    '1111110'\n    >>> solution('1111111')\n    '1111111'\n    >>> solution('10000000')\n    '10000000'\n    >>> solution('10000001')\n    '10000001'\n    >>> solution('10000010')\n    '10000010'\n    >>> solution('10000011')\n    '10000011'\n    >>> solution('10000100')\n    '10000100'\n    >>> solution('10000101')\n    '10000101'\n    >>> solution('10000110')\n    '10000110'\n    >>> solution('10000111')\n    '10000111'\n    >>> solution('10001000')\n    '10001000'\n    >>> solution('10001001')\n    '10001001'\n    >>> solution('10001010')\n    '10001010'\n    >>> solution('10001011')\n    '10001011'\n    >>> solution('10001100')\n    '10001100'\n    >>> solution('10001101')\n    '10001101'\n    >>> solution('10001110')\n    '10001110'\n    >>> solution('10001111')\n    '10001111'\n    >>> solution('10010000')\n    '10010000'\n    >>> solution('10010001')\n    '10010001'\n    >>> solution('10010010')\n    '10010010'\n    >>> solution('10010011')\n    '10010011'\n    >>> solution('10010100')\n    '10010100'\n    >>> solution('10010101')\n    '10010101'\n    >>> solution('10010110')\n    '10010110'\n    >>> solution('10010111')\n    '10010111'\n    >>> solution('10011000')\n    '10011000'\n    >>> solution('10011001')\n    '10011001'\n    >>> solution('10011010')\n    '10011010'\n    >>> solution('10011011')\n    '10011011'\n    >>> solution('10011100')\n    '10011100'\n    >>> solution('10011101')\n    '10011101'\n    >>> solution('10011110')\n    '10011110'\n    >>> solution('10011111')\n    '10011111'\n    >>> solution('10100000')\n    '10100000'\n    >>> solution('10100001')\n    '10100001'\n    >>> solution('10100010')\n    '10100010'\n    >>> solution('10100011')\n    '10100011'\n    >>> solution('10100100')\n    '10100100'\n    >>> solution('10100101')\n    '10100101'\n    >>> solution('10100110')\n    '10100110'\n    >>> solution('10100111')\n    '10100111'\n    >>> solution('10101000')\n    '10101000'\n    >>> solution('10101001')\n    '10101001'\n    >>> solution('10101010')\n    '10101010'\n    >>> solution('10101011')\n    '10101011'\n    >>> solution('10101100')\n    '10101100'\n    >>> solution('10101101')\n    '10101101'\n    >>> solution('10101110')\n    '10101110'\n    >>> solution('10101111')\n    '10101111'\n    >>> solution('10110000')\n    '10110000'\n    >>> solution('10110001')\n    '10110001'\n    >>> solution('10110010')\n    '10110010'\n    >>> solution('10110011')\n    '10110011'\n    >>> solution('10110100')\n    '10110100'\n    >>> solution('10110101')\n    '10110101'\n    >>> solution('10110110')\n    '10110110'\n    >>> solution('10110111')\n    '10110111'\n    >>> solution('10111000')\n    '10111000'\n    >>> solution('10111001')\n    '10111001'\n    >>> solution('10111010')\n    '10111010'\n    >>> solution('10111011')\n    '10111011'\n    >>> solution('10111"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    if n % 3!= 0:\n        raise ValueError('length of string is not divisible by 3')\n\n    counts = {'0': 0, '1': 0, '2': 0}\n    for c in s:\n        counts[c] += 1\n\n    min_cost = None\n    min_cost_subset = None\n\n    for subset in itertools.combinations(counts, n // 3):\n        cost = 0\n        for c, count in subset:\n            cost += count\n\n        if min_cost is None or cost < min_cost:\n            min_cost = cost\n            min_cost_subset = subset\n\n    if min_cost_subset is None:\n        raise ValueError('no solution')\n\n    subset = sorted(min_cost_subset, key=lambda c: counts[c])\n\n    return ''.join(subset)\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The number of ways to climb up the stair is calculated from the factorial and the number of broken steps.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    total_steps = n - m\n\n    # Find the number of ways to climb up the first step\n    # (steps > 0, broken_steps == 0)\n    # ways[steps][broken_steps]\n    ways = [[0] * (total_steps + 1) for _ in range(2)]\n    for steps in range(1, n + 1):\n        ways[steps & 1][0] += 1\n\n    for broken_steps in range(1, total_steps + 1):\n        # We can only step on the broken_steps\n        # (broken_steps > 0)\n        for steps in range(1, n + 1):\n            # If the steps are broken, we cannot step on it\n            if (steps & (1 << broken_steps)) == 0:\n                ways[steps & 1][broken_steps] += ways[steps][broken_steps - 1]\n            # If the step is not broken, we can step on it\n            # and it's the same as the original step\n            else:\n                ways[steps & 1][broken_steps] += ways[steps][broken_steps]\n\n    return str(ways[n & 1][m])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 2:\n        return '0'\n    fib = [0, 1]\n    fib_mod = [1, 2]\n    for _ in range(n - 2):\n        fib.append(fib[-1] + fib[-2])\n        fib_mod.append((fib_mod[-1] + fib_mod[-2]) % 1_000_000_007)\n    return str(sum(fib[:n]))"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stairs: List[int] = [int(val) for val in stdin.split()]\n    M: int = stairs[1]\n    M: int = max(stairs[0], M)\n    count: int = 0\n    for i in range(1, M):\n        left = i - 1\n        right = i + 1\n        count += (stairs[left] * stairs[right])\n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    print(count(n, m))\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    broken = [int(x) for x in stdin.split()[1:]]\n    print(broken)\n    print(broken[:2])\n    broken[:2] = broken[1] + broken[2]\n    print(broken)\n\n    ans = 0\n    for i in range(N):\n        if i + 1 not in broken:\n            ans += 1\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        for j in range(1, m + 1):\n            if j > a[i - 1]:\n                dp[i] = dp[i] % 10000000007\n\n    return str(dp[n])\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    s = [int(stdin.strip()) for stdin in stdin.strip().split(\" \")]\n    f = [1] + [0] * (n - 1)\n    for i in range(1, n):\n        for j in range(1, i + 1):\n            if j == i:\n                continue\n            if s[j] >= s[i]:\n                f[i] += f[j]\n    return str(f[n - 1] % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seen = [0] * (n + 1)\n    seen[0] = 1\n    for _ in range(m):\n        a = int(stdin.readline())\n        seen[a] = (seen[a - 1] + seen[a + 1]) % 1000000007\n    return str(seen[n])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    # count(x) is the number of ways to climb up the staircase, and starts at 0.\n    # count(x) = count(x-1) + count(x-2) +... + count(x-k)\n    # \n    # count(x) = (count(x-k) + 1) * (count(x-k) + 1) // 2 \n    #\n    # count(x) = (count(x-k) + 1) * count(x-k) // 2\n    #\n    # count(x) = (count(x-k) + 1) * ((count(x-k) + 1) - 1) // 2\n    #\n    # count(x) = (count(x-k) + 1) * ((count(x-k) + 1) + 1) // 2\n    #\n    # count(x) = (count(x-k) + 1) * (count(x-k) + 2) // 2\n    #\n    # count(x) = (count(x-k) + 1) * ((count(x-k) + 1) + 1) // 2\n    #\n    # count(x) = (count(x-k) + 1) * ((count(x-k) + 1) + 2) // 2\n    #\n    # count(x) = (count(x-k) + 1) * ((count(x-k) + 1) + 2) // 2\n    #\n    # count(x) = (count(x-k) + 1) * (count(x-k) + 2) // 2\n    #\n    # count(x) = (count(x-k) + 1) * ((count(x-k) + 1) + 2) // 2\n\n    return str(((n - k) + 1) * ((n - k) + 2) // 2)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n\n    # count ways to reach the last step (n-1)\n    # this is the number of ways to reach the 0-th step, plus the number of ways to reach the last step\n    # mod 1 million\n    ways = [0 for _ in range(n + 1)]\n    ways[0] = 1\n    for i in range(1, n):\n        # 1 \\to 1 \\to 2 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 1 \\to 2 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 2 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 2 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        # 1 \\to 4 \\to 6 \\to 8 \\to...\n        "
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    takahashi = numbers[0]\n    k = numbers[1]\n    d = numbers[2]\n    min_distance = takahashi + d\n    if takahashi > min_distance:\n        return str(min_distance)\n    else:\n        return str(takahashi)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 2 4\")\n    '2'\n    \"\"\"\n    X, K, D = tuple(map(int, stdin.split()))\n    D = abs(D)\n    D *= -1 if K % 2 == 0 else 1\n    return str(min(X + D, X - D))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split(' ')]\n    if x < 0:\n        x = -x\n        d = -d\n    dist = 0\n    while x > k:\n        x -= d\n        dist += 1\n    return str(abs(x))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n    count = 0\n\n    while x!= 0:\n        if x == x + d:\n            x -= d\n            count += 1\n        else:\n            x += -d\n            count += 1\n\n        if count == k:\n            break\n\n    return str(x)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    value = 0\n    for _ in range(K):\n        value += D\n    return str(abs(value))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x: int, y: int, k: int, d: int = list(map(int, stdin.split()))\n    x = x - k * abs(d)\n    return str(abs(x))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return '0' if n % 2 == 0 else '1'\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 1000000000:\n        return 0\n    else:\n        return n\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # using the lcm of the primes\n    lcm = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    return str(int(n / lcm))\n\nassert(solution('11')) == '2'\nassert(solution('14')) == '0'\nassert(solution('61441')) == '2'\nassert(solution('571576')) == '10'\nassert(solution('2128506')) == '3'\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The input contains a single integer n (0 \u2264 n \u2264 2000000000).\n\n    Output a single integer.\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('11')\n    '2'\n    >>> solution('14')\n    '0'\n    >>> solution('61441')\n    '2'\n    >>> solution('571576')\n    '10'\n    >>> solution('2128506')\n    '3'\n    \"\"\"\n    n = int(stdin.strip())\n\n    s = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s += i\n\n    return str(s)"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Y' if stdin <= 7 else 'N'\n\nimport sys"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(pow(n, n, 10 ** 9 + 7))"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 * int(stdin) - 1)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while True:\n        n = i * (i + 1) // 2\n        if n > n:\n            break\n        i += 1\n    return str(n)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    return a * 11\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    print(a)\n    '''\n    pass\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n\n    return str(a*a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    return str(a**3)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{0}'.format(int(stdin)**2)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a**3\n    return str(result)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a**3)"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) == int(stdin.strip())[::-1])"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return '1'\n    elif a % 2 == 0:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    if a % 2 == 0:\n        count += 1\n    if a % 3 == 0:\n        count += 1\n    if a % 5 == 0:\n        count += 1\n    if a % 7 == 0:\n        count += 1\n    if count == 0:\n        return '0'\n    elif count == 1:\n        return '1'\n    else:\n        return '2'"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    return '1' if a % 2 == 0 else '0'\n\nprint(solution(\"4\"))\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(int(a / 2) == a / 2)"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(int(a % 2 == 1))\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if stdin in '01' else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of the problem\"\"\"\n    a = int(stdin)\n    if a < 10:\n        return '0'\n    return str(bin(a).count('1'))\n    \n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for i in range(n)]\n    return str(a[0] * a[1] * a[2] * a[3])\n    \n    \n    \n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Note-----\n\nThe first input is the number of test cases, followed by a test case.\n\nThe first line is the number n, and the second line is n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 11).\n\n\n--- Part Two ---\n\nIn this problem, your job is to create a function that, given a number n and a list of numbers a_{1}, a_{2},..., a_{n}, find the number of ways to choose a_{i} and a_{j} so that the sum of the two numbers is equal to n.\n\nSo given a list of numbers, your function should find the number of ways that a_{1}, a_{2},..., a_{n} can be chosen to get a sum of n.\n\nFor example, the code in n = 3 and a = [2,5,3] should return 6. The results you are expected to get are in the range of 0 to 2^16.\n\n\"\"\"\n\nimport sys\nsys.path.append(\"../../../../master_thesis/src/client\")\nfrom Crypto.Util.number import getPrime\nfrom Crypto.Util.Padding import pad, unpad\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom math import log\nimport random\nfrom time import time\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    pass\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    return str(n - a.count(0))\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]))"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        print(int(n / k) if n % k == 0 else (n // k) + 1)\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\n\nFor each test case, you will be given an integer $n$ and an integer $k$: the number of shovels and the number of types of packages. Your job is to print an integer that denotes the minimum number of packages Polycarp will have to buy to get exactly $n$ shovels. If there are multiple solutions, you may print any one.\n\nFor example, if $n=8$ and $k=7$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $1$, so the answer is $1$.\n\nIf $n=8$ and $k=4$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $2$, so the answer is $2$.\n\nIf $n=8$ and $k=5$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $3$, so the answer is $3$.\n\nIf $n=8$ and $k=6$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $4$, so the answer is $4$.\n\nIf $n=8$ and $k=7$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $5$, so the answer is $5$.\n\nIf $n=8$ and $k=8$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $6$, so the answer is $6$.\n\nIf $n=8$ and $k=9$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $7$, so the answer is $7$.\n\nIf $n=8$ and $k=10$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $8$, so the answer is $8$.\n\nIf $n=8$ and $k=11$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $9$, so the answer is $9$.\n\nIf $n=8$ and $k=12$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $10$, so the answer is $10$.\n\nIf $n=8$ and $k=13$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $11$, so the answer is $11$.\n\nIf $n=8$ and $k=14$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $12$, so the answer is $12$.\n\nIf $n=8$ and $k=15$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $13$, so the answer is $13$.\n\nIf $n=8$ and $k=16$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $14$, so the answer is $14$.\n\nIf $n=8$ and $k=17$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $15$, so the answer is $15$.\n\nIf $n=8$ and $k=18$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $16$, so the answer is $16$.\n\nIf $n=8$ and $k=19$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $17$, so the answer is $17$.\n\nIf $n=8$ and $k=20$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $18$, so the answer is $18$.\n\nIf $n=8$ and $k=21$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $19$, so the answer is $19$.\n\nIf $n=8$ and $k=22$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $20$, so the answer is $20$.\n\nIf $n=8$ and $k=23$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $21$, so the answer is $21$.\n\nIf $n=8$ and $k=24$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $22$, so the answer is $22$.\n\nIf $n=8$ and $k=25$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $23$, so the answer is $23$.\n\nIf $n=8$ and $k=26$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $24$, so the answer is $24$.\n\nIf $n=8$ and $k=27$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $25$, so the answer is $25$.\n\nIf $n=8$ and $k=28$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $26$, so the answer is $26$.\n\nIf $n=8$ and $k=29$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $27$, so the answer is $27$.\n\nIf $n=8$ and $k=30$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nThere is exactly one type of package of size $28$, so the answer is $28$.\n\nIf $n=8$"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    \n    \n    >>> solution(\"2\\n2 1\\n2 2\")\n    1\n    >>> solution(\"2\\n2 3\\n2 1\")\n    3\n    >>> solution(\"2\\n2 3\\n2 5\\n2 1\")\n    5\n    >>> solution(\"2\\n3 3\\n2 1\\n2 1\")\n    2\n    >>> solution(\"2\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n1 32\\n1 33\\n1 34\\n1 35\\n1 36\\n1 37\\n1 38\\n1 39\\n1 40\\n1 41\\n1 42\\n1 43\\n1 44\\n1 45\\n1 46\\n1 47\\n1 48\\n1 49\\n1 50\\n1 51\\n1 52\\n1 53\\n1 54\\n1 55\\n1 56\\n1 57\\n1 58\\n1 59\\n1 60\\n1 61\\n1 62\\n1 63\\n1 64\\n1 65\\n1 66\\n1 67\\n1 68\\n1 69\\n1 70\\n1 71\\n1 72\\n1 73\\n1 74\\n1 75\\n1 76\\n1 77\\n1 78\\n1 79\\n1 80\\n1 81\\n1 82\\n1 83\\n1 84\\n1 85\\n1 86\\n1 87\\n1 88\\n1 89\\n1 90\\n1 91\\n1 92\\n1 93\\n1 94\\n1 95\\n1 96\\n1 97\\n1 98\\n1 99\\n1 100\\n1 101\\n1 102\\n1 103\\n1 104\\n1 105\\n1 106\\n1 107\\n1 108\\n1 109\\n1 110\\n1 111\\n1 112\\n1 113\\n1 114\\n1 115\\n1 116\\n1 117\\n1 118\\n1 119\\n1 120\\n1 121\\n1 122\\n1 123\\n1 124\\n1 125\\n1 126\\n1 127\\n1 128\\n1 129\\n1 130\\n1 131\\n1 132\\n1 133\\n1 134\\n1 135\\n1 136\\n1 137\\n1 138\\n1 139\\n1 140\\n1 141\\n1 142\\n1 143\\n1 144\\n1 145\\n1 146\\n1 147\\n1 148\\n1 149\\n1 150\\n1 151\\n1 152\\n1 153\\n1 154\\n1 155\\n1 156\\n1 157\\n1 158\\n1 159\\n1 160\\n1 161\\n1 162\\n1 163\\n1 164\\n1 165\\n1 166\\n1 167\\n1 168\\n1 169\\n1 170\\n1 171\\n1 172\\n1 173\\n1 174\\n1 175\\n1 176\\n1 177\\n1 178\\n1 179\\n1 180\\n1 181\\n1 182\\n1 183\\n1 184\\n1 185\\n1 186\\n1 187\\n1 188\\n1 189\\n1 190\\n1 191\\n1 192\\n1 193\\n1 194\\n1 195\\n1 196\\n1 197\\n1 198\\n1 199\\n1 200\\n1 201\\n1 202\\n1 203\\n1 204\\n1 205\\n1 206\\n1 207\\n1 208\\n1 209\\n1 210\\n1 211\\n1 212\\n1 213\\n1 214\\n1 215\\n1 216\\n1 217\\n1 218\\n1 219\\n1 220\\n1 221\\n1 222\\n1 223\\n1 224\\n1 225\\n1 226\\n1 227\\n1 228\\n1 229\\n1 230\\n1 231\\n1 232\\n1 233\\n1 234\\n1 235\\n1 236\\n1 237\\n1 238\\n1 239\\n1 240\\n1 241\\n1 242\\n1 243\\n1 244\\n1 245\\n1 246\\n1 247\\n1 248\\n1 249\\n1 250\\n1 251\\n1 252\\n1 253\\n1 254\\n1 255\\n1 256\\n1 257\\n1 258\\n1 259\\n1 260\\n1 261\\n1 262\\n1 263\\n1 264\\n1 265\\n1 266\\n1 267\\n1 268\\n1 269\\n1 270\\n1 271\\n1 272\\n1 273\\n1 274\\n1 275\\n1 276\\n1 277\\n1 278\\n1 279\\n1 280\\n1 281\\n1 282\\n1 283\\n1 284\\n1 285\\n1 286\\n1 287\\n1 288\\n1 289\\n1 290\\n1 291\\n1 292\\n1 293\\n1 294\\n1 295\\n1 296\\n1 297\\n1 298\\n1 299\\n1 300\\n1 301\\n1 302\\n1 303\\n1 304\\n1 305\\n1 306\\n1 307\\n1 308\\n1 309\\n1 310\\n1 311\\n1 312\\n1 313\\n1 314\\n1 315\\n1 316\\n1 317\\n1 318\\n1 319\\n1 320\\n1 321\\n1 322\\n1 323\\n1 324\\n1 325\\n1 326\\n1 327\\n1 328\\n1 329\\n1 330\\n1 331\\n1 332\\n1 333\\n1 334\\n1 335\\n1 336\\n1 337\\n1 338\\n1 339\\n1 340\\n1 341\\n1 342\\n1 343\\n1 344\\n1 345\\n1 346\\n1 347\\n1 348\\n1 349\\n1 350\\n1 351\\n1 352\\n1 353\\n1 354\\n1 355\\n1 356\\n1 357\\n1 358\\n1 359\\n1 360\\n1 361\\n1 362\\n1 363\\n1 364\\"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n, k = list(map(int, stdin.readline().split()))\n        # dp[i][j] means the minium number of shovels to get exactly $i$ shovels.\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if i == j:\n                    dp[i][j] = 1\n                elif j > i:\n                    dp[i][j] = i\n                else:\n                    dp[i][j] = dp[i - 1][j] + 1\n        print(dp[n][k])\n\n\nsolution(input())\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_test_cases = int(stdin.readline().strip())\n    for _ in range(number_of_test_cases):\n        n, k = [int(x) for x in stdin.readline().split()]\n        print(min(n, k))\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n\n    k_1 = int(stdin.split(\" \")[0])\n    p_1 = int(stdin.split(\" \")[1])\n\n    k_2 = int(stdin.split(\" \")[2])\n    p_2 = int(stdin.split(\" \")[3])\n\n    s_1 = map(int, stdin.split(\" \")[4:4 * k_1 + 4])\n    s_2 = map(int, stdin.split(\" \")[4 * (k_1 + 1):])\n\n    return \"\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(\" \")))\n    k_1, *states = list(map(int, stdin.split(\" \")))\n    p_1, *_ = list(map(int, stdin.split(\" \")))\n    \n    return str(solution_helper(N, M, k_1, p_1, states))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k1 = int(stdin.split()[2])\n    s1 = map(int, stdin.split()[3:])\n    p1 = list(map(int, stdin.split()[5:]))\n    all_on = []\n    all_off = []\n\n    for i in range(N):\n        if (i + k1) % 2 == 0:\n            all_on.append(i + 1)\n        else:\n            all_off.append(i + 1)\n\n    combinations = [set(all_on), set(all_off)]\n\n    for i in range(len(p1)):\n        if p1[i] == 1:\n            new_set = set()\n            for s in combinations[i]:\n                new_set.add(s)\n\n            if (len(combinations[i]) + len(new_set)) % 2 == 0:\n                combinations[i] = combinations[i].union(new_set)\n            else:\n                combinations[i] = new_set\n\n    print(len(combinations[0]))\n\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    k = [int(x) for x in stdin.split(' ')[1::2]]\n    p = [int(x) for x in stdin.split(' ')[2::2]]\n    states = [x % 2 for x in k]\n    total = 0\n    for state in product(range(2), repeat=sum(states)):\n        if sum(state[:len(states)]) % 2 == p[0]:\n            total += 1\n    return str(total)\n\n\"\"\"\n\n\nfrom itertools import product\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    k = [int(n) for n in stdin.split()]\n    p = [int(n) for n in stdin.split()]\n    \n    # The total number of combinations is nCr(N-1+k, N-k+1),\n    # where N is the total number of switches, and k is the number of bulbs.\n    # We can get nCr(N-1+k, N-k+1) by breaking the equation into two parts:\n    #   (N-1+k) / (N-k+1) = nCr(k-1, N-k),\n    # where nCr(k-1, N-k) is the number of combinations of k switches that light all the bulbs.\n    # We can get nCr(k-1, N-k) by breaking the equation into two parts:\n    #   (N-k) / (N-1) = nCr(N-k, N-k+1),\n    # where nCr(N-k, N-k+1) is the number of combinations of N-k switches that light all the bulbs.\n    # So we can get nCr(N-k, N-k+1) by breaking the equation into two parts:\n    #   nCr(N-k, N-k+1) = nCr(N, N-1) * nCr(N-1, N-k),\n    # where nCr(N, N-1) is the number of combinations of N switches that light all the bulbs.\n    # Therefore, we can get nCr(N-k, N-k+1) by breaking the equation into two parts:\n    #   (N-k) / (N-1) = nCr(N-k, N-k+1),\n    # where nCr(N-k, N-k+1) is the number of combinations of N-k switches that light all the bulbs.\n    # By finding the product of nCr(N-k, N-k+1), we can get the number of combinations of (N-1) switches that light all the bulbs.\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N-1, N-1+k) = nCr(N-1, N-1) * nCr(N-1+k, N).\n    # The number of combinations of (N-1) switches that light all the bulbs is nCr(N-1, N-1+k) = nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is nCr(N, N-1) * nCr(N-1+k, N).\n    # Therefore, the number of combinations of (N-1) switches that light all the bulbs is n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    k_1 = int(stdin.readline())\n    switches = [[int(n) for n in stdin.split()] for i in range(k_1)]\n    p = [int(n) for n in stdin.readline().split()]\n    return str(count_combs(N, M, switches, p))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.strip().split()))\n    k_1s = list(map(int, stdin.strip().split()))\n    p_1s = list(map(int, stdin.strip().split()))\n\n    if p_1s[0] == 0 or p_1s[0] == 1:\n        p_1s = p_1s[1:]\n    if p_1s[-1] == 0 or p_1s[-1] == 1:\n        p_1s = p_1s[:-1]\n\n    if M % 2 == 0:\n        # There is an even number of switches that are \"on\" among the following: Switch 1 and 2.\n        if p_1s[0] == 1:\n            return 1\n        return 0\n\n    if M % 2 == 1:\n        # There is an odd number of switches that are \"on\" among the following: Switch 2.\n        if p_1s[-1] == 1:\n            return 1\n        return 0\n\n\"\"\"\nfrom math import gcd\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    k = [int(x) for x in stdin.strip().split(' ')]\n    p = [int(x) for x in stdin.strip().split(' ')]\n    # Number of times bulb is switched\n    switch_count = {}\n    for i in range(m):\n        switch_count[k[i]] = switch_count.get(k[i], 0) + 1\n    # Number of times switch is switched\n    switch_switch_count = {}\n    for i in range(n):\n        switch_switch_count[k[i]] = switch_switch_count.get(k[i], 0) + 1\n\n    # Bulbs that are switched\n    switched_bulbs = set()\n    for i in range(m):\n        if (k[i] % 2) == (p[i] % 2):\n            switched_bulbs.add(i + 1)\n\n    print(len(switched_bulbs))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    t = 12 * H + M\n    d = A * t + B * (H + 1)\n    return format(d, \".9f\")"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(s) for s in stdin.split()]\n    h, m = 12, 60\n    \n    D = (H * 3600 + M * 60) - (h * 3600 + m * 60)\n    L1 = (A * D) / (A + B)\n    L2 = (B * D) / (A + B)\n    \n    return str(round(L1, 9)) +'' + str(round(L2, 9))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the distance in centimeters between the unfixed endpoints of the two hands.\"\"\"\n    A, B, H, M = map(int, stdin.split())\n    A = A * 0.1\n    B = B * 0.1\n    d = A + B + abs(A - B) * (H * 60 + M)\n    return str(d)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H_C = A*H + B*M\n    M_C = A*M - B*H\n    return f'{(H_C**2 + M_C**2)**0.5:.9f}'"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.strip().split(' '))\n\n    if m == 0:\n        h = max(0, h - 1)\n    else:\n        h = min(11, h + 1)\n\n    if h == 11 and m == 59:\n        m = 0\n\n    if h == 0 and m == 0:\n        h = 12\n\n    return '{:.3f}'.format((a * h + b * m) * 2 * (1 / 60) ** 2)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = stdin.split()\n    H, M = int(H), int(M)\n\n    A, B = float(A), float(B)\n\n    if H == 0:\n        return A * A + B * B\n    elif M == 0:\n        return A * A + B * B - A * A\n\n    T = float(H * 60 + M)\n    return (A * A + B * B - A * A) * T\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    A = int(line[0])\n    B = int(line[1])\n    H = int(line[2])\n    M = int(line[3])\n\n    hour_rotation = (H*60+M)*A\n    min_rotation = (H*60+M)*B\n\n    return str(abs(hour_rotation - min_rotation))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    hours = a + (b * (h % 12))\n    minutes = m + (b * (m % 60))\n    print(hours * minutes)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simplified version of the two-hour-hand-clock problem, which makes use of the fact that the two hands rotate at constant angular velocity.\n    \"\"\"\n    # get the two values\n    A, B, H, M = map(int, stdin.split())\n\n    # get the distance\n    d = A * H + B * M\n\n    # return the distance\n    return str(d)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H_degrees = 360 * H / 12\n    M_degrees = 360 * M / 59\n    end_point = A * H_degrees + B * M_degrees\n    print(abs(end_point - 360) % 360)\n    \n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nm = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split(' ')))\nprint(solution(stdin))\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    left = 0\n    right = 0\n    result = 0\n    for i in arr:\n        if i < m:\n            result += (m - i)\n        elif i > m:\n            result += (i - m)\n    return str(result)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/median-of-a-sequence-numbers-l1-r1-l1-r1-l2-r2-l3-r3-l4-r4-l5-r5-l6-r6'''\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    def pairs(x, y):\n        a = sorted([x, y])\n        return a[1], a[0]\n    def find_m(a):\n        # if len(a)%2 == 0:\n        #     return sum(a) - (a[len(a)/2] + a[len(a)/2-1])\n        # else:\n        #     return a[len(a)/2]\n        n = len(a)\n        if n%2 == 0:\n            return sum(a) - max(a) - min(a)\n        else:\n            return max(a)\n    def find_n(a):\n        n = len(a)\n        if n%2 == 0:\n            return a[n/2]\n        else:\n            return (a[n/2] + a[n/2+1])/2\n    def find_l(a, m, n):\n        a = sorted(a)\n        m_l = find_m(a[:len(a)/2])\n        n_l = find_n(a[:len(a)/2])\n        m_r = find_m(a[len(a)/2:])\n        n_r = find_n(a[len(a)/2:])\n        if m_l == m:\n            if n_l == n:\n                return pairs(1, n)\n            else:\n                return pairs(1, n_l)\n        elif m_r == m:\n            if n_r == n:\n                return pairs(n, n)\n            else:\n                return pairs(n, n_r)\n        elif m_l > m:\n            if n_l == n:\n                return pairs(1, n)\n            else:\n                return pairs(1, n_l)\n        else:\n            if n_r == n:\n                return pairs(n, n)\n            else:\n                return pairs(n, n_r)\n\n    return str(sum(map(lambda x: 1 if x == find_l(a, m, n) else 0, a)))\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % 2 == m:\n                res += 1\n    return res"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    def med(arr):\n        if len(arr)%2:\n            return arr[len(arr)//2]\n        else:\n            return (arr[len(arr)//2-1]+arr[len(arr)//2])//2\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == m:\n                res+=1\n            elif a[i] > m:\n                res += (a[i]-m)*(j-i)\n            else:\n                res += (m-a[i])*(j-i)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    a.sort()\n    m = int(m)\n    if m % 2 == 1:\n        m += 1\n    return str(m * (m - 1) // 2)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n        for j in range(i):\n            if arr[j] > arr[i] and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n\n    count = 0\n    for i in range(1, n + 1):\n        if dp[i] == m:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = [int(x) for x in stdin.split()]\n    \n    cnt = 0\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == m:\n                cnt += 1\n    \n    return str(cnt)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.strip().split(' '))\n    a = list(int(x) for x in stdin.strip().split(' '))\n    print(len([i for i in range(1, len(a)-1) if (m == (a[i-1] + a[i] + a[i+1]) / 2)]) / 2)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    array, segments = [int(x) for x in stdin.split()]\n    array = [int(x) for x in stdin.split()]\n    segments = [int(x) for x in stdin.split()]\n    pass\n    return str(max(max(array) - min(array), 0))\n    pass"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\nassert(solution(input()) == output)\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_number(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    data = stdin.split('\\n')\n\n    n, m = map(int, data[0].split(' '))\n    a = [int(d) for d in data[1].split(' ')]\n\n    segments = [\n        (int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(m)\n    ]\n\n    segments = sorted(segments, key=lambda x: x[1])\n\n    segment_indices = [0] * m\n\n    for i, segment in enumerate(segments):\n        for j in range(segment[0], segment[1]):\n            segment_indices[i] += a[j]\n\n    max_segment_index = max(segment_indices)\n    min_segment_index = min(segment_indices)\n    segment_indices = [x - min_segment_index for x in segment_indices]\n\n    return str(max(segment_indices) - min(segment_indices))"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [tuple(map(int, stdin.split())) for _ in range(m)]\n    b = a.copy()\n    for i, (l, r) in enumerate(segments):\n        b[l - 1: r] = [max(a[l - 1: r]) - min(a[l - 1: r])] * (r - l + 1)\n    print(max(b) - min(b))\n    return \"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    a = [int(x) for x in stdin.split(' ')]\n    segments = []\n    for _ in range(m):\n        l, r = stdin.split(' ')\n        l, r = int(l), int(r)\n        segments.append((l, r))\n    possible_values = []\n    for segment in segments:\n        l, r = segment\n        possible_values.append(max(a[l-1:r]) - min(a[l-1:r]))\n    print(max(possible_values))\n    print(segments[possible_values.index(max(possible_values))])\n    # get_segments(stdin)\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    segments = set()\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.add((l, r))\n\n    a_min = min(a)\n    a_max = max(a)\n\n    b = [0] * n\n    for l, r in segments:\n        if l == 1:\n            b[0] = 0\n            continue\n\n        b[l - 1] = a_max - a_min\n        b[l - 1] = max(b[l - 1], 0)\n        b[l - 1] = min(b[l - 1], a_min)\n        b[r - 1] = a_max - a_min\n        b[r - 1] = max(b[r - 1], 0)\n        b[r - 1] = min(b[r - 1], a_min)\n\n    c = [0] * m\n    for i in range(m):\n        c[i] = (b[i], i)\n\n    c.sort(key=lambda x: x[0])\n\n    ans = [0] * m\n    for i in range(m):\n        ans[c[i][1]] = i\n\n    return str(max(ans) - min(ans))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split())\n    a = map(int, stdin[1].split())\n    segments = []\n    for i in range(2, len(stdin), 2):\n        l, r = map(int, stdin[i].split())\n        segments.append([l, r])\n    segments.sort(key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    max_b = None\n    for i in range(m):\n        l, r = map(int, stdin[i + 1].split())\n        b = a[:]\n        if segments[i][0] <= l <= segments[i][1]:\n            b[segments[i][0] - 1:segments[i][1]] = [x - 1 for x in b[segments[i][0] - 1:segments[i][1]]]\n        elif segments[i][0] > r:\n            b[:] = [x - 1 for x in b]\n        else:\n            b[:] = [x - 1 for x in b[:r]]\n            b[segments[i][0] - 1:r] = [x - 1 for x in b[segments[i][0] - 1:r]]\n        if max_b is None or max_b < b:\n            max_b = b\n    return str(max_b).replace('[', '').replace(']', '')\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lines = []\n    for _ in range(n):\n        lines.append(stdin.readline().strip())\n    ans = []\n    for line in lines:\n        cnt = Counter(line)\n        is_diverse = True\n        for key in cnt:\n            if cnt[key] > 1:\n                is_diverse = False\n                break\n        if is_diverse:\n            ans.append(\"Yes\")\n        else:\n            ans.append(\"No\")\n    return \"\\n\".join(ans)"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if is_diverse(s):\n            print('Yes')\n        else:\n            print('No')\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return '\\n'.join([str((\"Yes\" if is_diverse(s) else \"No\")).lower() for s in strings])\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        if is_diverse(stdin):\n            print('Yes')\n        else:\n            print('No')\n    return ''\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    -Diverse\n    '''\n    n = int(stdin.readline())\n    for _ in range(n):\n        c = stdin.readline().strip()\n        if 'a' in c:\n            continue\n        elif 'z' in c:\n            continue\n        elif all(c[i]!= c[i+1] for i in range(len(c)-1)):\n            print('Yes')\n        else:\n            print('No')\n    return ''"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = stdin.readline().strip()\n    for i in range(n):\n        if set(strings[i]) == set(\"abcdefghijklmnopqrstuvwxyz\"):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    result = []\n    for i in range(n):\n        l = stdin.readline()\n        s = set(l)\n        if len(l) > 2:\n            for j in range(2, len(l)):\n                if l[j] == l[j-1] and l[j] == l[j-2]:\n                    continue\n                else:\n                    result.append(\"No\")\n                    break\n            else:\n                result.append(\"Yes\")\n        else:\n            result.append(\"Yes\")\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([\"Yes\" if is_diverse(x) else \"No\" for x in stdin])\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # You code here\n    return \"\".join(stdin)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [tuple(map(int, stdin.split())) for _ in range(m)]\n    print(get_maximum_value(a, segments))\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(\" \")]\n    arr = [int(x) for x in stdin.strip().split(\" \")]\n    segs = [list(map(int, x.split(\" \"))) for x in stdin.strip().split(\"\\n\")]\n    print(main(n, m, arr, segs))\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    s = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        s.append((l, r))\n\n    d = 0\n    for i in range(1, n + 1):\n        for l, r in s:\n            if l <= i <= r:\n                d = max(d, max(a[i - 1] - min(a[i - 1]), 0))\n\n    print(d)\n    return \"\""
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n\n    def get_optimal_subset(a, segments):\n        segments_idxs = [i for i in range(len(segments))]\n\n        a_sum = sum(a)\n        subset_sum = a_sum\n\n        def get_min_segment_sum(segment_idx):\n            if segment_idx in segments_idxs:\n                segments_idxs.remove(segment_idx)\n                return a_sum - a[segment_idx] - get_min_segment_sum(segment_idx)\n            else:\n                return a_sum - get_min_segment_sum(segment_idx)\n\n        for i in range(len(segments)):\n            segment_idx = i\n            segment_sum = get_min_segment_sum(segment_idx)\n            subset_sum = max(subset_sum, segment_sum)\n\n        return subset_sum\n\n    return str(get_optimal_subset(a, segments))\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_n, segments_n = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(segments_n)]\n    b = [0] * a_n\n    for segment in segments:\n        l, r = segment\n        b[l - 1] -= 1\n        b[r] += 1\n    return max(b) - min(b)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = [int(l) for l in lines[0].split()]\n    a = [int(l) for l in lines[1].split()]\n    segments = [l.split() for l in lines[2:]]\n    print(max(max(a) - min(a), 0))\n\nsolution(input())\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:n + 1]]\n    segments = []\n    for _ in range(m):\n        start, end = [int(x) for x in stdin.split()]\n        segments.append([start, end])\n    return 0"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        min_l = min(a[:l])\n        min_r = min(a[r:])\n        if min_l > min_r:\n            count += min_r - min_l\n\n    return str(count)"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ntry:\n    _input = stdin.readline().rstrip()\n    _n = int(_input)\n    _input = stdin.readline().rstrip().split(' ')\n    _a = [int(_input[i]) for i in range(_n)]\n    _a.sort()\n    _result = ''\n    _k = 0\n    _index = 0\n    _length = len(_a)\n    _result += 'L' * _length\n    _a.sort(reverse=True)\n    _result += 'R' * _length\n    while _k < _length:\n        _index = 0\n        _left = 0\n        _right = _length - _k\n        while _left < _right:\n            if _a[_left] < _a[_right]:\n                _index = _left\n                break\n            _left += 1\n        if _index == 0:\n            _result += 'R'\n        else:\n            _result += 'L'\n        _k += 1\n    return _result\nexcept Exception as ex:\n    pass\n\n_input = stdin.readline().rstrip()\n_n = int(_input)\n_input = stdin.readline().rstrip().split(' ')\n_a = [int(_input[i]) for i in range(_n)]\n_a.sort()\n_result = ''\n_k = 0\n_index = 0\n_length = len(_a)\n_result += 'L' * _length\n_a.sort(reverse=True)\n_result += 'R' * _length\nwhile _k < _length:\n    _index = 0\n    _left = 0\n    _right = _length - _k\n    while _left < _right:\n        if _a[_left] < _a[_right]:\n            _index = _left\n            break\n        _left += 1\n    if _index == 0:\n        _result += 'R'\n    else:\n        _result += 'L'\n    _k += 1\nprint(_result)\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if not 1 <= n <= 2 * 10 ** 5:\n        return 'Invalid input'\n    if len(a)!= n:\n        return 'Invalid input'\n    a.sort()\n    k = 1\n    curr = a[:k]\n    for i in range(k, n):\n        if curr[k - 1] >= a[i]:\n            curr[k - 1] = a[i]\n        else:\n            k += 1\n            curr[k - 1] = a[i]\n    return''.join(map(str, curr))"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n == 1:\n        return 'L'\n\n    i = 0\n    ans = 0\n    while i < n:\n        l, r = a[i], a[i + 1]\n        if l > r:\n            ans = max(ans, n - i - 1)\n            i += 2\n        else:\n            i += 1\n\n    return 'L' if ans == n - 1 else 'R' * ans\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_largest_sequence(a: list[int]) -> int:\n        # a = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest_sequence = [1, 2, 3]\n        # largest"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    out = 0\n    left = 0\n    right = n-1\n    while left <= right:\n        if arr[left] < arr[right]:\n            out = max(out, left+1)\n            left += 1\n        else:\n            out = max(out, right+1)\n            right -= 1\n    return str(out)\n\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\nIn the second example, you can see that there is exactly one solution, and it is $LLL$.\n\nIn the third example, it is not possible to obtain a strictly increasing sequence, since you cannot change the leftmost or rightmost element.\n\nIn the fourth example, there are several solutions, but they are all equally long.\n\nIn the fifth example, there is no solution.\n\"\"\"\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = len(a)\n    if m == 1:\n        return '1'\n    if m == 2:\n        return 'L' if a[0] < a[1] else 'R'\n    a.sort()\n    b = []\n    for i in range(0,m-1):\n        if a[i+1] - a[i] > 1:\n            b.append(a[i])\n    b.append(a[m-1])\n    if len(b) == m:\n        return 'L'*(m-1)\n    else:\n        return 'L'*(m-1-len(b)) + 'R'*len(b)"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    seq = [a[0]]\n    for i in range(1, n):\n        left = a[i - 1]\n        right = a[i]\n        if left > right:\n            seq.append(left)\n        else:\n            seq.append(right)\n    return max(seq)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # print(a)\n    # c = a[1] - a[0]\n    # for i in range(1, n):\n    #     if c < a[i] - a[i - 1]:\n    #         c = a[i] - a[i - 1]\n    # return c\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    l = []\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            l.append(a[i])\n    return len(l)\n\nimport sys"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    count = 0\n    length = 0\n    for i, num in enumerate(numbers):\n        if i == 0:\n            length = 1\n        else:\n            if num > numbers[i-1]:\n                length += 1\n            else:\n                length = 1\n        if length > count:\n            count = length\n    return str(count)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nimport sys\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n\n    best = 0\n    current = 1\n    for i in range(1, n):\n        if nums[i] > nums[i - 1]:\n            current += 1\n        else:\n            current = 1\n\n        best = max(best, current)\n\n    return str(best)\n\nprint(solution(''))"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 5 3 4\n   ... 1 2\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr = arr[1:]\n    maxLen = 1\n    curLen = 1\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            curLen += 1\n        else:\n            if curLen > maxLen:\n                maxLen = curLen\n            curLen = 1\n    if curLen > maxLen:\n        maxLen = curLen\n    return str(maxLen)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split(' ')]\n    min_length = a[0]\n    max_length = 0\n    for i in range(n):\n        if a[i] < min_length:\n            min_length = a[i]\n        for j in range(i + 1, n):\n            if a[j] > min_length and a[j] - a[i] > max_length:\n                max_length = a[j] - a[i]\n    return str(max_length + 1)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    a = [int(num) for num in stdin.readline().split()]\n    res = 0\n    left = 0\n    for right in range(len(a)):\n        if a[right] < a[left]:\n            left = right + 1\n        else:\n            res = max(res, right - left + 1)\n    return str(res)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    m = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            m = max(m, i+1)\n\n    return str(m)\n\nassert(solution('''5\n1 2 5 3 4''')) == '4'\nassert(solution('''2\n1 2''')) == '2'\nassert(solution('''7\n6 5 4 3 2 4 3''')) == '2'\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    length = 1\n    max_length = 1\n    for i in range(1, n):\n        if l[i - 1] < l[i]:\n            length += 1\n            if length > max_length:\n                max_length = length\n        else:\n            length = 1\n    return max_length"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    # if n == 1:\n    #     return '1'\n    # if n == 2:\n    #     return '2'\n    #\n    # i = 0\n    # max_length = 1\n    # while i + 1 < n:\n    #     if l[i] < l[i + 1]:\n    #         max_length = max(max_length, i + 1)\n    #     else:\n    #         max_length = max(max_length, i)\n    #     i += 1\n    # return str(max_length)\n    return str(n - 1)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(x) for x in stdin.split()]\n    A = list(map(int, stdin.split()))\n    print(solve(A, k))\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    A = [int(x) for x in stdin.strip().split()]\n    result = 0\n    for i in range(n):\n        while A[i] % 2 == 0:\n            A[i] //= 2\n            result += 1\n    while len(set(A)) < k:\n        A.append(0)\n        result += 1\n    return str(result)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    min_ops = len(a)\n    \n    for i in range(1, n):\n        a[i] -= a[i - 1]\n        if a[i] >= 0:\n            a[i] = int(a[i] / 2)\n        else:\n            a[i] = 0\n        \n        min_ops = min(min_ops, a[i])\n        \n    return str(min_ops)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    d = {}\n    for i, x in enumerate(a):\n        a[i] = x / 2\n        d[x] = d.get(x, [])\n        d[x].append(i)\n\n    l = []\n    for key in d:\n        l.extend(d[key])\n    l.sort()\n\n    answer = 0\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] + 1!= l[j]:\n            break\n        i += 1\n        j -= 1\n        answer += 1\n    return str(answer)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = sorted(a)\n    min_ops = 0\n    count = 0\n    for i in a:\n        if count >= k:\n            break\n        if i % 2 == 0:\n            i /= 2\n            min_ops += 1\n            count += 1\n    return str(min_ops)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    i = 0\n    while i < n:\n        a[i] = a[i] // 2\n        i += 1\n\n    r = 0\n    while len(set(a)) < k:\n        t = []\n        for x in a:\n            t.append(x // 2)\n        a = t\n        r += 1\n\n    return str(r)\n\n\nimport sys"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n, k = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n\n    return str(min(0, n - k + 1))\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    result = 0\n\n    if k == 1:\n        result = 0\n    else:\n        temp = list(set(a))\n        if k <= len(temp):\n            result = len(temp)\n        else:\n            result = len(temp) + (k - len(temp))\n\n    return str(result)\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(num) for num in stdin.split()]\n    return str(b * (a + b) // 2)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    # Instead of N+1, let's use 1 to denote no ball in the row\n    print(int(N/(A+B) * A))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 0:\n        return str(m)\n    if m == 0:\n        return \"0\"\n    return str(m - n % m)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(a * (a + 1) // 2 + b * (b + 1) // 2 - n)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(i) for i in stdin.split()]\n    return str(b * (n - a + 1))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    return '%d' % (b * 10 ** a)\n\nassert(solution('8 3 4') == '4')\nassert(solution('1 10 10') == '10')\nassert(solution('4 1 10') == '9')\nassert(solution('2 2 10') == '10')\n\"\"\"\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split(\" \")\n    N, A, B = int(N), int(A), int(B)\n\n    result = \"\"\n\n    for i in range(0, N):\n        result += \"b\"\n        if i % 2 == 0:\n            result += \"r\"\n\n    return result\n\nassert solution(\"8 3 4\") == \"brbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbrbr#\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = [int(x) for x in stdin.split()]\n    n, a, b = lines\n    if a == 0:\n        return \"0\"\n    elif b == 0:\n        return \"1\"\n    return \"1\" * a + \"0\" * b\n\nassert(solution(\"8 3 4\") == \"4\")\nassert(solution(\"5 0 1\") == \"1\")\nassert(solution(\"5 0 0\") == \"0\")\nassert(solution(\"0 1 1\") == \"1\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"1 0 1\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"1 0 2\") == \"1\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 1\") == \"1\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"1 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"0\")\nassert(solution(\"2 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"0\")\nassert(solution(\"0 1 2\")"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        d = list(map(int, stdin.split()))\n        divisors = [1] + [d[i] for i in range(n)]\n        for i in range(2, n):\n            for j in range(i, n, i):\n                divisors[j] *= divisors[j] // d[i]\n        ans = 0\n        for i in range(n):\n            ans += (n - divisors[i]) * d[i]\n        print(ans if ans > 0 else -1)\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    data = list(map(int, stdin.readline().strip().split(\" \")))\n    def is_possible(guessed_number):\n        divisors = {}\n        for i in range(1, guessed_number):\n            if guessed_number % i == 0:\n                divisors[i] = True\n\n        for i in data:\n            if i in divisors:\n                divisors[i] = False\n        return all(divisors.values())\n\n    def search(guessed_number):\n        if is_possible(guessed_number):\n            return guessed_number\n        else:\n            return -1\n\n    for i in range(1, 300):\n        result = search(i)\n        if result!= -1:\n            return str(result)\n    return \"-1\""
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline().strip())\n    result = []\n    num = int(stdin.readline().strip())\n    divisors = [int(x) for x in stdin.readline().split()]\n    for i in range(1, num + 1):\n        divisors_for_i = [x for x in divisors if x % i == 0]\n        if len(divisors_for_i) == num:\n            result.append(i)\n    if len(result) == 0:\n        return -1\n    return str(min(result))\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split(\" \")]\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = [int(x) for x in stdin.readline().split(\" \")]\n        if not can_guess(divisors, n):\n            print(-1)\n        else:\n            print(n)\n    return \"\"\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.strip().split())\n    l = list(map(int, stdin.strip().split()))\n    g = l[0]\n    g_rem = l[1:]\n    # print(g, g_rem)\n    if not g_rem:\n        return -1\n    for i in g_rem:\n        if i % g!= 0:\n            return -1\n    return g\n\nassert solution(\n\"\"\"2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\"\"\") == 48\nassert solution(\n\"\"\"2\n4\n2 2 2 2\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n3\n2 2 2\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n3\n3 2 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n3\n2 2 2\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == 4\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == 4\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n3\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1 3\n1\n2\n\"\"\") == -1\nassert solution(\n\"\"\"2\n5\n2 2 3 1"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = sorted(map(int, stdin.readline().split()))\n        guess = divisors[0]\n        previous = divisors[0]\n        count = 1\n        found = False\n\n        for i in range(1, n):\n            if guess == previous:\n                previous = divisors[i]\n                count += 1\n            elif guess < previous:\n                guess = previous\n                previous = divisors[i]\n                count = 1\n            else:\n                count += 1\n\n            if count == n:\n                found = True\n                break\n\n        if found:\n            print(guess)\n        else:\n            print(-1)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = list(map(int, stdin.readline().split()))\n        if len(divisors)!= n:\n            print(-1)\n            continue\n        ans = 0\n        for d in divisors:\n            if d == 1:\n                continue\n            if d % 2 == 0:\n                ans += d // 2\n            elif d % 2 == 1:\n                ans += d // 2 - 1\n        print(ans)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        d = list(map(int, stdin.readline().split()))\n        print(guess(n, d))\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    divisors = [int(x) for x in stdin.readline().strip().split(' ')]\n    while t > 0:\n        n = int(stdin.readline().strip())\n        divisors = [int(x) for x in stdin.readline().strip().split(' ')]\n        x = guess_number(divisors, n)\n        if x == -1:\n            print(-1)\n        else:\n            print(x)\n        t -= 1\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        d = [int(i) for i in stdin.split()]\n        print(min_number(n, d))\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(el) for el in stdin.split()]\n    b = set(a)\n    return''.join([str(el) for el in b])"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort(reverse=True)\n    unique = []\n    for i in a:\n        if i not in unique:\n            unique.append(i)\n    print(len(unique))\n    for i in a:\n        if i not in unique:\n            unique.append(i)\n    print(' '.join(map(str, unique)))\n    return ''\n\n\nsolution(input())"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.readline().strip())\n    arr = [int(n) for n in stdin.readline().strip().split()]\n    arr_without_duplicates = []\n    for element in arr:\n        if not element in arr_without_duplicates:\n            arr_without_duplicates.append(element)\n    print(len(arr_without_duplicates))\n    print(*arr_without_duplicates)\n    \n    \nimport sys\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.strip().split(' ')]\n    a = set(a)\n    a = list(a)\n    a.sort()\n    return str(len(a)) + '\\n' +''.join(str(x) for x in a)"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    unique_elements = []\n    for i in range(len(a)):\n        if a[i] not in unique_elements:\n            unique_elements.append(a[i])\n    unique_elements.sort()\n    return str(len(unique_elements))+' '+' '.join(str(x) for x in unique_elements)\n\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a = sorted(a)\n    a.reverse()\n    b = []\n    for x in a:\n        if x not in b:\n            b.append(x)\n    print(len(b))\n    print(*b[::-1])"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    left = []\n    for x in a:\n        if x not in left:\n            left.append(x)\n    print(len(left))\n    print(' '.join(map(str, left)))\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.rstrip().split(' ')))\n    return str(len(a) - len(set(a))) + '\\n' +''.join(map(str, sorted(set(a))))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    arr.sort()\n    dup = set()\n    dup_index = []\n    for i in range(n):\n        if i in dup:\n            continue\n        if arr[i] == arr[i-1]:\n            if i == n-1 or arr[i]!= arr[i+1]:\n                dup.add(i)\n                dup_index.append(i)\n        else:\n            dup.add(i)\n    print(len(dup_index))\n    print(' '.join(map(str, arr[::-1][:len(arr)-len(dup_index)])))\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.rstrip('\\n').split(' ')))\n    r = []\n    for i in array:\n        if i not in r:\n            r.append(i)\n    return str(len(r)) + '\\n' +''.join(map(str, r))\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(next_interesting_number(a))\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = int(stdin.strip())\n    r = 0\n    c = 0\n    d = 0\n    for i in range(n + 1):\n        d = a % 10\n        if d % 3 == 0:\n            if d % 4 == 0:\n                if r == 0:\n                    r = a\n                    c += 1\n                elif abs(a - r) < abs(a - r):\n                    r = a\n                    c += 1\n        a += 1\n    if c == 0:\n        return '-1'\n    else:\n        return str(r)\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 0\n    for x in range(a, 1000000):\n        x = str(x)\n        sum = 0\n        for y in x:\n            sum += int(y)\n        if sum % 4 == 0:\n            res = x\n            break\n    return res\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 0\n    for i in str(a):\n        res += int(i)\n    if res % 4 == 0:\n        return a\n    while res % 4!= 0:\n        res += 1\n    return res\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 0\n    while not res:\n        res = sum(int(c) for c in str(a))\n        if res % 4 == 0:\n            res += 1\n        a += 1\n    return str(res)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        if sum(map(int, str(n))) % 4 == 0:\n            break\n        n += 1\n    return n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return 0\n\n    n = int(str(a)[0])\n    while a % n == 0:\n        n = n + 1\n\n    return n\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        n += 1\n        if sum(int(x) for x in str(n)) % 4 == 0:\n            break\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    a = a * 3\n    while a % 4!= 0:\n        a += 1\n    return str(a)\n\nimport sys"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = 0\n    c = 0\n    cnt = 0\n    while a < n:\n        a += c\n        c += 1\n    while b < n:\n        b += c\n        c += 1\n    while c < n:\n        c += 1\n        if c % 3 == 0 and c % 4 == 0:\n            cnt += 1\n    while a < n:\n        a += 1\n        if a % 4 == 0:\n            cnt += 1\n    while b < n:\n        b += 1\n        if b % 4 == 0:\n            cnt += 1\n    while c < n:\n        c += 1\n        if c % 4 == 0:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        s, m, b = stdin.split('\\n')\n        b = [int(v) for v in b.split(' ')]\n        for i in range(len(b)):\n            b[i] += (i + 1)\n        s = sorted(s, reverse=True)\n        for i in range(len(b) - 1):\n            b[i + 1] -= b[i]\n        for i in range(len(b) - 1):\n            if b[i] < 0:\n                break\n        else:\n            print(s)\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s, m, b = stdin.splitlines()\n        m, b = int(m), [int(x) for x in b.split()]\n        b, t = [0]*m, ['']*m\n        for i, x in enumerate(b):\n            for j, y in enumerate(s):\n                if i <= j:\n                    continue\n                if y < s[j]:\n                    b[i] += j - i\n                    break\n        for i, x in enumerate(b):\n            t[i] = s[i]*x\n        print(''.join(t))"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin.readline())\n    for _ in range(testcases):\n        s, n = stdin.readline().strip(), int(stdin.readline())\n        b = list(map(int, stdin.readline().strip().split()))\n        ans = \"\"\n        for i in range(1, n):\n            cnt = 0\n            for j in range(i, n):\n                if s[j] > s[i - 1]:\n                    cnt += j - i\n            ans += s[i - 1] * cnt\n        print(ans)"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution string from the standard input.\"\"\"\n    _, q = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        s, m, *b = [int(x) for x in stdin.split()]\n        b = [x - sum(abs(i - x) for i, x in enumerate(b) if x > s[i]) for x in b]\n        print(''.join(s[i] for i in b))\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    while n > 0:\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        b.sort()\n        min_dist = 0\n        curr_index = 0\n        min_index = -1\n        t = \"\"\n        while curr_index < m:\n            if s[curr_index] > t:\n                min_index = curr_index\n                min_dist = min(min_dist, abs(min_index - b[curr_index]))\n            curr_index += 1\n        if min_dist!= 0:\n            t += s[min_index]\n            s = s[:min_index] + s[min_index+1:]\n        for i in s:\n            t += i\n        print(t)\n        n -= 1\nsolution(stdin)"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin.splitlines()[0]\n    m = int(stdin.splitlines()[1])\n    b = [int(stdin.splitlines()[2]) for stdin in stdin.splitlines()[3:]]\n    cnt = {i:0 for i in range(1, m+1)}\n    res = ''\n    for i in range(len(s)):\n        cnt[s[i]] += 1\n    for i in range(m):\n        for j in range(i, m):\n            if cnt[j+1] == 0:\n                continue\n            if j > 0 and cnt[j] > 0 and cnt[j-1] > 0:\n                res += s[j-1:j+1]\n                cnt[j-1] -= 1\n                cnt[j] -= 1\n            elif j > 0 and cnt[j] > 0:\n                res += s[j]\n                cnt[j] -= 1\n            elif cnt[j] > 0:\n                res += s[j]\n                cnt[j] -= 1\n    return res\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(stdin))\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return chr(ord('a') + (n - 1) % 26)\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\n        letters = letters[i:] + letters[:i]\n        print(letters[n % 26])\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    result = ''\n    while number:\n        number, remainder = divmod(number, 26)\n        result = chr(ord('a') + remainder) + result\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return chr(ord('a') + int(n) - 1)"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(chr(ord('a') + int(stdin) - 1) for _ in range(int(stdin)))\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    return dog_name(number)\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    words = lines[1].split()\n\n    if n == 1:\n        return 0\n\n    min_len = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if j - i == 1:\n                if words[i].lower() == words[j].lower():\n                    min_len = max(min_len, len(words[i]) + 1)\n            else:\n                if words[i].lower() == words[j].lower():\n                    min_len = max(min_len, len(words[i]) + 1)\n\n    return min_len\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    words = stdin.readline().split()\n    words_set = set(words)\n    word_to_idx = {word: idx for idx, word in enumerate(words)}\n    for word in words:\n        for idx in range(len(word)):\n            for c in set(word[idx:]):\n                other_word = word[:idx] + c + word[idx + 1:]\n                if other_word in words_set:\n                    break\n            else:\n                return word\n    return ''"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split(' ')\n\n    if len(words) == 1:\n        return words[0]\n\n    def is_abbreviation(sub: str, word: str) -> bool:\n        return sub.upper() == word.upper() and word.isalpha() and word.upper()[0]!= sub.upper()\n\n    def abbreviation(segment: str, word: str) -> str:\n        if len(segment) < len(word):\n            return word[:len(segment)]\n        elif len(segment) == len(word):\n            return segment\n        else:\n            return word\n\n    ans = ''\n    for i in range(1, len(words)):\n        if is_abbreviation(words[i], words[i - 1]):\n            if len(ans) > 0:\n                ans +=''\n            ans += abbreviation(words[i - 1], words[i])\n        else:\n            ans += words[i]\n    return ans\n\n\nassert(solution('') == '')\nassert(solution('a b a a b b') == 'a b a a b b')\nassert(solution('aa bb aa aa bb bb') == 'a a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('aa bb aa aa bb bb') == 'a a a b b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a b a a b b b')\nassert(solution('a b a a b b b') == 'a"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    text = lines[1].split()\n    text.sort(key=lambda x: len(x))\n    abbreviations = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if text[i].upper() == text[j].upper() and len(text[i]) < len(text[j]):\n                abbreviations.add(''.join(sorted(text[i:j+1])))\n    return min([len(x) for x in abbreviations])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    text = stdin.readline().strip()\n    words = text.split()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if j - i == len(words[i]) and all(words[i][0].upper() == words[x][0].upper() for x in range(i, j)):\n                count += 1\n                break\n    return str(count)\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == \"aaba\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    text = stdin.splitlines()[1]\n    w = text.split()\n    if len(w) <= 2:\n        return text\n    for i in range(0, len(w)):\n        for j in range(i + 2, len(w)):\n            if w[i] == w[j]:\n                if j - i == 1:\n                    continue\n                elif j - i == 2:\n                    w[i] = w[i][0] + w[i][1]\n                    w[j] = w[j][0] + w[j][1]\n                else:\n                    w[i] = w[i][0] + w[i][1] + w[i][2]\n                    w[j] = w[j][0] + w[j][1] + w[j][2]\n    return''.join(w)"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n    w = list(zip(words, words[1:]))\n    w.sort(key=lambda w: (len(w[0]), w[0]))\n\n    res = []\n    for i, (w1, w2) in enumerate(w):\n        if i == 0 or len(res) == 0 or res[-1]!= len(w1):\n            res.append(len(w1))\n        else:\n            res.append(len(w1) + len(w2))\n\n    return str(max(res))\n\n\n\nassert solution(\"7\\n to be or not to be\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"3\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"4\\n be or not to be\\n\") == \"3\"\nassert solution(\"3\\n be or not to be\\n\") == \"3\"\nassert solution(\"4\\n to be or not to be\\n\") == \"5\"\nassert solution(\"3\\n to be or not to be\\n\") == \"5\"\nassert solution(\"5\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"4\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"2\\n bd a\\n\") == \"3\"\nassert solution(\"4\\n be or not to be\\n\") == \"3\"\nassert solution(\"3\\n be or not to be\\n\") == \"3\"\nassert solution(\"4\\n to be or not to be\\n\") == \"5\"\nassert solution(\"3\\n to be or not to be\\n\") == \"5\"\nassert solution(\"5\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n ba a\\n\") == \"5\"\nassert solution(\"2\\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(N)]\n    best = N + 1\n    for _ in range(N):\n        word = words[_]\n        if word == word[::-1]:\n            best = min(best, len(word))\n            continue\n        i = 0\n        while i < N and word[i] == word[-i-1]:\n            i += 1\n        if i < len(word):\n            continue\n        while i < N and word[i] == word[-i-1]:\n            i += 1\n        if i < len(word):\n            continue\n        words[:] = [word[:i], word[i+1:]]\n        words[-1] = words[-1][::-1]\n        if len(words[0]) + len(words[-1]) < best:\n            best = len(words[0]) + len(words[-1])\n    return best"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, days = map(int, stdin.split())\n    difficulty = list(map(int, stdin.split()))\n\n    max_profit = 0\n    for i in range(1, days):\n        j = i - 1\n        max_profit = max(max_profit, sum(difficulty[i-j:i+1]))\n\n    return str(max_profit)"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    max_profit = max(a)\n    for _ in range(k):\n        max_profit = max(max_profit - a[0], a[-1])\n        a.pop(0)\n    return str(max_profit)\n\nimport sys\nfrom io import StringIO\n\nstdin = \"\"\"8 3\n5 4 2 6 5 1 9 2\n\"\"\"\n\nsys.stdin = StringIO(stdin)\nprint(solution(\"\"))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n\n    res = [0 for _ in range(k)]\n\n    i = 0\n    while i < n:\n        for j in range(k):\n            res[j] += max(a[i:i + j + 1])\n            i += j + 1\n\n    return''.join(map(str, res))\n\n\nassert(solution('1 1 1 1 1') == '1 1 1 1 1')\nassert(solution('8 2') == '20')\nassert(solution('5 1') == '1 5')\nassert(solution('2 1') == '2')\nassert(solution('1 2') == '2')\nassert(solution('1') == '1')\nassert(solution('1 2 2') == '3')\nassert(solution('5 6 5 7 1 6 1') == '24')\nassert(solution('2 1 4 1 4') == '5')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\nassert(solution('1 2 1 2 3') == '3')\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    curr_profit = 0\n    res = []\n    for i in range(k):\n        curr_profit = 0\n        max_diff = max(a)\n        max_diff_index = a.index(max_diff)\n        res.append(max_diff)\n        a.pop(max_diff_index)\n        curr_profit += max_diff\n        for i in range(len(a)):\n            curr_profit += a[i]\n        if curr_profit > 0:\n            break\n    return''.join(list(map(str, res)))\n\nassert(solution(\"8 3\") == \"3 2 3\")\nassert(solution(\"5 1\") == \"1 5\")\nassert(solution(\"4 2\") == \"1 2 2 1\")\nassert(solution(\"5 2\") == \"1 2 1 1 1\")\nassert(solution(\"1 2\") == \"1 1\")\nassert(solution(\"6 9\") == \"1 3 4 6 9\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1 1 1 1\")\nassert(solution(\"2 3\") == \"1 1 2 1 1\")\nassert(solution(\"1 9\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"2 2\") == \"1 1 1 1 1\")\nassert(solution(\"1 100\") == \"1 1 1 1 1\")\nassert(solution(\"1 1000\") == \"1 1"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    M = max(A)\n    while True:\n        T = [0] * K\n        for i in range(K):\n            for j in range(N):\n                if A[j] > 0:\n                    T[i] += 1\n                    A[j] -= 1\n                    break\n        if T[K - 1] > M:\n            T[K - 1] = M\n            break\n    for i in range(K - 1, -1, -1):\n        print(T[i], end = \" \")\n    print(\"\")\n    return \"\"\n\nprint(solution(input()))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    a.sort()\n\n    res = 0\n\n    while k > 0:\n        n -= 1\n        k -= 1\n        res += a[n]\n\n    return res"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    # Output\n    t = [0] * k\n    for i in range(n):\n        j = i\n        while j < n:\n            if j < i + k:\n                t[j - i] = max(t[j - i], a[j])\n            elif j < i + k + 1:\n                t[j - i] = max(t[j - i], a[j])\n            j += 1\n    return str(max(t))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2000$) \u2014 the number of problems and the number of days, respectively.\n    The second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2000$) \u2014 difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def solve(k, a, t):\n        if len(a) == 1:\n            if k == 0:\n                return 0\n            else:\n                return -1\n        else:\n            if k == 0:\n                return -1\n            max_profit = 0\n            for i in range(1, len(a)):\n                max_profit = max(max_profit, solve(k - 1, a[:i], t))\n            return max_profit + max(a[:len(a) - 1])\n\n    return str(solve(k, a, a))\n\nassert(solution('8 3\\n5 4 2 6 5 1 9 2') == '20')\nassert(solution('5 1\\n1 1 1 1 1') == '1')\nassert(solution('4 2\\n1 2000 2000 2') == '4000')\nassert(solution('2 1\\n2') == '-1')\nassert(solution('2 1\\n1') == '0')\nassert(solution('2 1\\n1\\n1') == '0')\nassert(solution('2 2\\n2 2') == '2')\nassert(solution('2 2\\n2') == '-1')\nassert(solution('2 2\\n2\\n2') == '-1')\nassert(solution('2 2\\n2\\n2\\n2') == '2')\nassert(solution('3 1\\n1 1 1 1') == '-1')\nassert(solution('3 1\\n1 1 1') == '-1')\nassert(solution('3 2\\n1 1 1 1') == '-1')\nassert(solution('3 2\\n1 1 1') == '-1')\nassert(solution('3 2\\n1 1 1\\n1 1 1') == '-1')\nassert(solution('3 2\\n1 1 1\\n1 1 1\\n1 1 1') == '-1')\nassert(solution('4 1\\n1 1 1 1 1') == '-1')\nassert(solution('4 1\\n1 1 1 1\\n1 1 1 1') == '-1')\nassert(solution('4 2\\n1 1 1 1 1') == '-1')\nassert(solution('4 2\\n1 1 1 1\\n1 1 1 1') == '-1')\nassert(solution('4 2\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1') == '-1')\nassert(solution('4 3\\n1 1 1 1 1 1 1') == '-1')\nassert(solution('4 3\\n1 1 1 1 1 1\\n1 1 1 1 1 1') == '-1')\nassert(solution('4 3\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1') == '-1')\nassert(solution('4 3\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1') == '-1')\nassert(solution('4 4\\n1 1 1 1 1 1 1 1') == '-1')\nassert(solution('4 4\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == '-1')\nassert(solution('4 4\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == '-1')\nassert(solution('4 4\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1') == '-1')\nassert(solution('5 2\\n1 1 1 1 1 1') == '-1')\nassert(solution('5 2\\n1 1 1 1 1\\n1 1 1 1 1') == '-1')\nassert(solution('5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '-1')\nassert(solution('5 3\\n1 1 1 1 1 1 1') == '-1')\nassert(solution('5 3\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k > n:\n        return '0'\n    table = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n    for i in range(1, n + 1):\n        table[1][i] = a[i - 1]\n    for j in range(2, k + 1):\n        max_profit = 0\n        for i in range(1, n + 1):\n            max_profit = max(max_profit, table[j - 1][i - 1] + a[i - 1])\n            table[j][i] = max_profit\n    return str(max(map(sum, table[-1])))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom __future__ import annotations\n\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split())\n    difficulties = list(map(int, input().split()))\n    max_profit = 0\n    for i in range(n):\n        profit = max_profit\n        if i + k > n:\n            continue\n        max_profit = max(max_profit, sum(difficulties[i:i + k]))\n    print(max_profit)\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(n) for n in stdin.split(' ')]\n\n    # let's not be so clever, we'll count the number of zeros in the array and try to insert 1, 2,..., N-1 times\n    cnt = 0\n    for a in A:\n        if a == 0:\n            cnt += 1\n\n    res = 0\n    for i in range(cnt + 1):\n        for j in range(cnt + 1 - i):\n            if sum(A[j:j + i]) == 0:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(solution_rec(a, 0))\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    start = 0\n    end = 0\n    current_sum = 0\n    answer = 0\n    while end < n:\n        while current_sum < 0 and start < n:\n            current_sum += a[start]\n            start += 1\n\n        while current_sum > 0 and end < n:\n            current_sum -= a[end]\n            end += 1\n\n        if start == end and current_sum == 0:\n            answer += 1\n            current_sum += a[end]\n            end += 1\n        elif end == n and current_sum == 0:\n            answer += 1\n\n        current_sum += a[end]\n\n    return answer\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = [int(x) for x in stdin.readline().strip().split(' ')]\n    k = [0] + k + [0]\n    \n    start = 0\n    end = 1\n    count = 0\n    while start < len(k) - 1:\n        if k[start] + k[end] == 0:\n            del k[start:end]\n            count += 1\n        else:\n            if k[start] == 0:\n                start += 1\n            if k[end] == 0:\n                end += 1\n            if end < len(k):\n                if k[start] + k[end] > 0:\n                    end += 1\n                if k[start] + k[end] < 0:\n                    start += 1\n                if k[start] + k[end] == 0:\n                    del k[start:end]\n                    count += 1\n                    start = 0\n                    end = 1\n        \n    return count\n\nprint(solution(None))\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\nfrom sys import stdin\nstdin = open(stdin.fileno(), 'r')\ninput = stdin.readline\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    min_insert = 0\n    counter = 0\n    for i in range(1, n):\n        if a[i] + a[i-1] >= 0:\n            min_insert += 1\n            counter += 1\n    return str(min_insert)\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    min_insert = 0\n    subsegments = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[j] == 0:\n                subsegments.append((i, j))\n    subsegments = sorted(subsegments)\n    for i, j in subsegments:\n        if sum(a[i:j + 1]) == 0:\n            min_insert += 1\n            a[i] = a[j] = 0\n            break\n    if sum(a) == 0:\n        return str(0)\n    return str(min_insert + sum(a))\n\nassert(solution('4\\n1 -5 3 2\\n') == '1')\nassert(solution('5\\n4 -2 3 -9 2\\n') == '0')\nassert(solution('9\\n-1 1 -1 1 -1 1 1 -1 -1\\n') == '6')\nassert(solution('8\\n16 -5 -11 -15 10 5 4 -4\\n') == '3')\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_elements = stdin[:stdin.index('\\n')]\n    num_of_elements = int(num_of_elements)\n    array = stdin[stdin.index('\\n') + 1:]\n    return solution(array)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin.readline())\n    s = sum(a)\n    if s < m:\n        return '0'\n    return str(s - max([abs(a[i] - a[i + 1]) for i in range(n - 1)]))"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    m = int(lines[1])\n    a = list(map(int, lines[2].split(' ')))\n\n    l = len(a)\n    if l == 1:\n        return str(a[0])\n    elif l == 2:\n        return str(abs(a[0] - a[1]))\n\n    # Find max abs difference between adjacent elements\n    t = min(l - 1, 10)\n    diff_abs = [0] * t\n    for i in range(t):\n        diff_abs[i] = abs(a[i] - a[i + 1])\n    max_abs = max(diff_abs)\n\n    # Find max sum of absolute differences\n    diff_sum = [0] * (n - 1)\n    for i in range(1, n):\n        diff_sum[i - 1] = abs(a[i] - a[i - 1])\n    max_sum = max(diff_sum)\n\n    return str(max(max_sum, max_abs))\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert str(solution(\"\")) == ''\nassert str(solution(\"2\\n2\")) == '2'\nassert str(solution(\"2\\n2\\n1\\n1\")) == '2'\nassert str(solution(\"2\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\")) == '2'\nassert str(solution(\"2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\")) == '2'\nassert str(solution(\"2\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n2\\n2\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n2\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n2\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\")) == '2'\nassert str(solution(\"1\\"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    b = a[:]\n    b.sort()\n    for i in range(len(a)):\n        a[i] = b[i] - a[i]\n    return''.join(map(str, a))"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for t in range(test_cases):\n        n, m = [int(i) for i in stdin.readline().strip().split()]\n        a = [int(i) for i in stdin.readline().strip().split()]\n        if sum(a) == m:\n            print(0)\n        else:\n            max_diff = 0\n            for i in range(n-1):\n                max_diff = max(max_diff, abs(a[i] - a[i+1]))\n            print(max_diff)\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split(' '))\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        print(max(abs(a[i] - a[i + 1]) for i in range(n - 1)))"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(0, t):\n        n, m = stdin.readline().split()\n        n = int(n)\n        m = int(m)\n        a = [int(x) for x in stdin.readline().split()]\n        a = sorted(a)\n        a.append(m)\n        print(a)\n        for j in range(0, n-1):\n            x = abs(a[j] - a[j+1])\n            print(x)\n        print()\nsolution(stdin)\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for _ in range(N):\n        n, m = map(int, stdin.readline().split())\n        a = [int(stdin.readline()) for _ in range(n)]\n        m = abs(m - sum(a))\n        m = min(m, abs(a[-1] - a[-2]))\n        for i in range(n - 2, -1, -1):\n            m = min(m, abs(a[i] - a[i + 1]))\n        print(m)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    a = [int(x) for x in stdin.split()]\n    max_sum = 0\n    for i in range(1, n):\n        max_sum += abs(a[i] - a[i-1])\n    return max_sum"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    # find the position of the first occurrence of a multiple of K in the sequence\n    # 7,77,777,..\n    # count the number of occurrences in the sequence\n    # print the position\n    # return -1\n    pos = -1\n    for i in range(1, 2**32):\n        if i % K == 0:\n            pos = i\n            break\n    if pos == -1:\n        print(-1)\n    else:\n        print(pos)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    mul = k\n    for i in range(3, k+1):\n        if mul * i == k:\n            return str(i)\n    return \"-\"\n\nassert(solution('') == \"-1\")\nassert(solution('5') == \"2\")\nassert(solution('7') == \"3\")\nassert(solution('101') == \"4\")\nassert(solution('11') == \"4\")\nassert(solution('99') == \"5\")\nassert(solution('1029') == \"-1\")\nassert(solution('10001') == \"-1\")\nassert(solution('10009') == \"4\")\nassert(solution('10007') == \"3\")\nassert(solution('10011') == \"-1\")\nassert(solution('10111') == \"4\")\nprint('passed')"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, res = int(stdin), -1\n    for i, num in enumerate(stdin[1:], start=1):\n        if int(num) % k == 0:\n            res = i\n            break\n    return str(res)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    for index in range(1,1000000):\n        if index % K == 0:\n            return index\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K % 7 == 0:\n        return str(K * 2)\n    else:\n        return \"-1\"\n\nassert(solution(\"7777\") == \"4\")\nassert(solution(\"8\") == \"-1\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"100\") == \"101\")\nassert(solution(\"10\") == \"11\")\nassert(solution(\"0\") == \"0\")\n\nassert(solution(\"7\") == \"7\")\nassert(solution(\"744\") == \"7\")\nassert(solution(\"77777\") == \"7777\")\nassert(solution(\"7\") == \"-1\")\nassert(solution(\"\") == \"-1\")\nassert(solution(\"101\") == \"101\")\nassert(solution(\"100\") == \"101\")\nassert(solution(\"1011\") == \"1011\")\nassert(solution(\"101\") == \"-1\")\nassert(solution(\"1011\") == \"-1\")\nassert(solution(\"10101\") == \"10101\")\nassert(solution(\"1010101\") == \"1010101\")\nassert(solution(\"10101010101\") == \"10101010101\")\nassert(solution(\"10101010101010101\") == \"10101010101010101\")\nassert(solution
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    seq = stdin.strip()\n    k = int(stdin.strip())\n    first = seq.find(\"7\", seq.find(\"77\"))\n    if first > -1:\n        while first < len(seq) - 1 and seq[first + 1] == \"7\":\n            first = seq.find(\"77\", first + 1)\n        return first + 1\n    else:\n        return -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    multiple = 0\n    i = 1\n    while n > i:\n        if (n % i) == 0:\n            multiple = i\n        i += 1\n    return str(multiple)\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = 7\n    while num < n + 1:\n        if num % k == 0:\n            return str(num)\n        num += 7\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 7 == 0 or N % 77 == 0 or N % 777 == 0:\n        return str(N)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = int(stdin.strip())\n    for i in range(n, 10000):\n        if i % k == 0:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    seq = [int(x) for x in stdin.split()]\n\n    p = [seq.pop(seq.index(x)) for x in seq]\n\n    c = 0\n    for x in p:\n        for y in p:\n            if x < y:\n                c += 1\n                break\n    return str(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    p = [int(x) for x in stdin.split()]\n    print(compute_median(p, n, m))\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    l = [a[i] for i in range(n)]\n    r = [a[i] for i in range(n, 2*n)]\n    l.sort()\n    r.sort()\n    count = 0\n    for i in range(n):\n        left = i + 1\n        right = n - i - 1\n        if left < right:\n            if (l[i] + r[left]) == m:\n                count += 1\n            elif (l[i] + r[right]) == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lst = [int(x) for x in stdin.split()]\n    counter = 0\n    for i in range(1, n):\n        if i == 0:\n            continue\n        for j in range(i):\n            if lst[j] >= lst[i] and (lst[j] + lst[i]) % 2 == 0:\n                counter += 1\n    print(counter)\n    return \"\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nIn the second example, the median of [1,15,2,14,3,13,4,8,12,5,11,6,10,7,9] is 5.\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    p = [int(x) for x in stdin.split(' ')]\n    m_idx = p.index(m)\n    m_l = m_idx\n    m_r = m_idx + 1\n    p_l = 0\n    p_r = len(p) - 1\n    count = 0\n    while p_l <= p_r:\n        if p[p_l] < m <= p[p_r]:\n            count += 1\n        if p[p_l] < m:\n            p_l += 1\n        elif p[p_r] > m:\n            p_r -= 1\n        else:\n            p_l += 1\n            p_r -= 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\n\"\"\"\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    return count_pairs(p, m)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    p = [int(n) for n in stdin.split()]\n    pos = {}\n    for idx, num in enumerate(p):\n        if num in pos:\n            pos[num].append(idx)\n        else:\n            pos[num] = [idx]\n    m = sorted(m)\n    if n % 2 == 0:\n        med = m[n // 2]\n    else:\n        med = m[n // 2] + m[n // 2 - 1]\n    result = 0\n    for key in pos:\n        if key == med:\n            continue\n        if med > key:\n            result += len(pos[key]) * len(pos[key + 1])\n        else:\n            result += len(pos[key]) * len(pos[key - 1])\n    return str(result)"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, m = [int(x) for x in stdin.split()]\n\n    cups_of_coffee = list(map(int, stdin.split()))\n\n    cups_of_coffee = sorted(cups_of_coffee, reverse=True)\n\n    n = len(cups_of_coffee)\n\n    result = 0\n\n    i = 0\n\n    while i < n:\n\n        if cups_of_coffee[i] == 0:\n\n            result += 1\n\n            i += 1\n\n            continue\n\n        elif i == n - 1:\n\n            result += 1\n\n            break\n\n        else:\n\n            j = i + 1\n\n            while j < n and cups_of_coffee[j] == 0:\n\n                j += 1\n\n            if j == n:\n\n                result += 1\n\n                break\n\n            else:\n\n                result += j - i\n\n                i = j\n\n    return str(result)\n\n\n\nassert(solution(input()) == output)\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_pages, num_of_cups_of_coffee = map(int, stdin.split())\n    cups_of_coffee = list(map(int, stdin.split()))\n    if num_of_cups_of_coffee > num_of_pages:\n        return \"-1\"\n    cups_of_coffee.sort()\n    pages_of_coffee = [0] * num_of_cups_of_coffee\n    for i in range(num_of_cups_of_coffee):\n        pages_of_coffee[i] = cups_of_coffee[i] * (i + 1)\n    cups_of_coffee.sort(reverse = True)\n    days = 0\n    while num_of_pages > 0:\n        days += 1\n        num_of_pages -= cups_of_coffee.count(cups_of_coffee[0])\n        cups_of_coffee.remove(cups_of_coffee[0])\n    return str(days)\n\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"-1\")\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    if m == 0:\n        return '-1'\n    if n == 0:\n        return '-1'\n    d = max(a)\n    k = max(a)\n    l = []\n    for i in range(0,n):\n        if a[i] == k:\n            l.append(i)\n    ans = 0\n    for i in range(0,len(l)):\n        for j in range(0,len(l)):\n            if l[i] > l[j]:\n                l[i],l[j] = l[j],l[i]\n    for i in range(0,len(l)):\n        ans = max(ans,l[i] - i)\n    return str(ans + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = [int(stdin) for stdin in stdin.split()]\n    cups = [cup - 1 for cup in cups]\n    return -1 if len(cups) > m else solve(n, m, cups)\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cups_of_coffee, coursework_pages = map(int, stdin.split())\n    cups_of_coffee = cups_of_coffee\n    \n    page_cups = [list(map(int, stdin.split())) for _ in range(coursework_pages)]\n    \n    result = 0\n    \n    while cups_of_coffee > 0:\n        if page_cups[0] == []:\n            return -1\n        \n        cups_of_coffee -= min(page_cups[0])\n        \n        if cups_of_coffee < 0:\n            return -1\n        \n        for i in range(len(page_cups[0])):\n            if page_cups[0][i] > cups_of_coffee:\n                page_cups[0][i] -= cups_of_coffee\n            else:\n                cups_of_coffee -= page_cups[0][i]\n                page_cups[0][i] = 0\n        \n        result += 1\n        \n        for i in range(len(page_cups) - 1, -1, -1):\n            for j in range(len(page_cups[i])):\n                if page_cups[i][j] > 0:\n                    page_cups[i][j] -= 1\n                    break\n    \n    return result\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        min_days = n + 1\n        for j in range(i + 1):\n            min_days = min(min_days, dp[j])\n            dp[j] = max(a[j] - j + 1, min_days)\n    return '-1' if dp[n] > m else str(dp[n])\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_coffee(stdin: str) -> int:\n        return int(stdin.readline())\n\n    def get_cups_of_coffee(stdin: str) -> list[int]:\n        return [int(x) for x in stdin.readline().split()]\n\n    def get_days_of_coursework(stdin: str) -> int:\n        return int(stdin.readline())\n\n    n_pages = get_coffee(stdin)\n    cups_of_coffee = get_cups_of_coffee(stdin)\n    cups_of_coffee.sort()\n    days = get_days_of_coursework(stdin)\n    res = [None] * days\n    cups_of_coffee_index = 0\n    for i in range(days):\n        cups_of_coffee_index += cups_of_coffee[i]\n        res[i] = cups_of_coffee_index - 1\n    return ''.join(map(str, res))"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = list(int(x) for x in stdin.split())\n\n    best = n * m\n    for k in range(1, n+1):\n        for i in range(1, k+1):\n            if a[i] < k:\n                best = min(best, i)\n\n    return \"1\" if best >= m else \"-1\"\n\nimport sys\nfrom unittest import TestCase\n\nTEST_CASES = [\n    (\n        (5, 8),\n        \"2 3 1 1 2\",\n    ),\n    (\n        (7, 10),\n        \"1 3 4 2 1 4 2\",\n    ),\n    (\n        (5, 15),\n        \"5 5 5 5 5\",\n    ),\n    (\n        (5, 26),\n        \"5 5 5 5 5\",\n    ),\n    (\n        (5, 7),\n        \"5 5 5 5 5\",\n    ),\n    (\n        (15, 26),\n        \"1 3 4 2 1 4 2\",\n    ),\n    (\n        (7, 16),\n        \"5 5 5 5 5\",\n    ),\n    (\n        (5, 26),\n        \"5 5 5 5 5\",\n    ),\n    (\n        (0, 10),\n        \"5 5 5 5 5\",\n    ),\n    (\n        (5, 0),\n        \"-1\",\n    ),\n    (\n        (0, 0),\n        \"-1\",\n    ),\n    (\n        (1, 5),\n        \"1\",\n    ),\n]\n\n\nclass TestSolution(TestCase):\n    def test_solution(self):\n        for args, expected in TEST_CASES:\n            actual = solution(*args)\n            self.assertEqual(actual, expected)\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split()))\n\n    changes = 0\n    index = 0\n    while index < len(sequence) - 1:\n        current_number = sequence[index]\n        next_number = sequence[index + 1]\n        if next_number - current_number > 1:\n            changes += next_number - current_number - 1\n            sequence[index] = next_number - 1\n            index += 1\n        else:\n            index += 1\n\n    if changes <= 0:\n        print(0)\n    else:\n        print(changes)\n    return ''"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    b.sort()\n    if b[-1] == 0:\n        return str(-1)\n    else:\n        cnt = 0\n        for i in range(n-2):\n            if b[i] + 1 == b[i+1] or b[i] - 1 == b[i+1]:\n                cnt += 1\n        return str(cnt)"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin.readline())\n    seq: list[int] = list(map(int, stdin.readline().split()))\n    if a < 3:\n        return '-1'\n    last: int = seq[0]\n    seq[0] -= 1\n    for i in range(1, a):\n        if seq[i - 1] == seq[i]:\n            seq[i] -= 1\n        elif seq[i - 1] < seq[i]:\n            seq[i] += 1\n        elif seq[i - 1] > seq[i]:\n            seq[i] -= 1\n    seq[0] += 1\n    return''.join(map(str, seq))"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nassert solution('4\\n24 21 14 10\\n') == '3'\nassert solution('2\\n500 500\\n') == '0'\nassert solution('3\\n14 5 1\\n') == '-1'\nassert solution('5\\n1 3 6 9 12\\n') == '1'\nassert solution('6\\n1 3 6 9 12 13\\n') == '1'\nassert solution('7\\n1 3 6 9 12 13 14\\n') == '1'\nassert solution('8\\n1 3 6 9 12 13 14 15\\n') == '2'\nassert solution('9\\n1 3 6 9 12 13 14 15 16\\n') == '1'\nassert solution('10\\n1 3 6 9 12 13 14 15 16 17\\n') == '3'\nassert solution('11\\n1 3 6 9 12 13 14 15 16 17 18\\n') == '1'\nassert solution('12\\n1 3 6 9 12 13 14 15 16 17 18 19\\n') == '1'\nassert solution('13\\n1 3 6 9 12 13 14 15 16 17 18 19 20\\n') == '1'\nassert solution('14\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21\\n') == '3'\nassert solution('15\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22\\n') == '2'\nassert solution('16\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23\\n') == '2'\nassert solution('17\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24\\n') == '1'\nassert solution('18\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25\\n') == '1'\nassert solution('19\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\\n') == '1'\nassert solution('20\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\\n') == '1'\nassert solution('21\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\\n') == '1'\nassert solution('22\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\\n') == '1'\nassert solution('23\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\\n') == '1'\nassert solution('24\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\\n') == '2'\nassert solution('25\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\\n') == '1'\nassert solution('26\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\\n') == '1'\nassert solution('27\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\\n') == '1'\nassert solution('28\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\\n') == '1'\nassert solution('29\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\\n') == '1'\nassert solution('30\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\\n') == '1'\nassert solution('31\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\\n') == '1'\nassert solution('32\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\\n') == '1'\nassert solution('33\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\\n') == '1'\nassert solution('34\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\\n') == '2'\nassert solution('35\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\\n') == '1'\nassert solution('36\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\\n') == '1'\nassert solution('37\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\\n') == '2'\nassert solution('38\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\\n') == '2'\nassert solution('39\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\\n') == '1'\nassert solution('40\\n1 3 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1000000:\n        return '-1'\n    b = list(map(int, stdin.split()))\n    if len(b) < 1 or len(b) > 1000000:\n        return '-1'\n    b.sort()\n    t = []\n    for i in range(len(b) - 2):\n        if b[i] + 1 == b[i + 1]:\n            t.append(b[i])\n            if b[i] + 2 == b[i + 2]:\n                t.append(b[i])\n    if len(t) < 1:\n        return '-1'\n    return str(len(t))"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n\n    changed = [False for _ in range(n)]\n\n    def can_make(changed: list, b: list) -> bool:\n        for i in range(1, n):\n            if changed[i]:\n                continue\n            if b[i] - b[i - 1]!= 1:\n                return False\n            changed[i] = True\n        return True\n\n    def try_one(changed: list, b: list) -> bool:\n        for i in range(1, n):\n            if not changed[i]:\n                if b[i] == b[0] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_two(changed: list, b: list) -> bool:\n        for i in range(2, n):\n            if not changed[i]:\n                if b[i] == b[1] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_three(changed: list, b: list) -> bool:\n        for i in range(3, n):\n            if not changed[i]:\n                if b[i] == b[2] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_four(changed: list, b: list) -> bool:\n        for i in range(4, n):\n            if not changed[i]:\n                if b[i] == b[3] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_five(changed: list, b: list) -> bool:\n        for i in range(5, n):\n            if not changed[i]:\n                if b[i] == b[4] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_six(changed: list, b: list) -> bool:\n        for i in range(6, n):\n            if not changed[i]:\n                if b[i] == b[5] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_seven(changed: list, b: list) -> bool:\n        for i in range(7, n):\n            if not changed[i]:\n                if b[i] == b[6] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_eight(changed: list, b: list) -> bool:\n        for i in range(8, n):\n            if not changed[i]:\n                if b[i] == b[7] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_nine(changed: list, b: list) -> bool:\n        for i in range(9, n):\n            if not changed[i]:\n                if b[i] == b[8] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_ten(changed: list, b: list) -> bool:\n        for i in range(10, n):\n            if not changed[i]:\n                if b[i] == b[9] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_eleven(changed: list, b: list) -> bool:\n        for i in range(11, n):\n            if not changed[i]:\n                if b[i] == b[10] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_twelve(changed: list, b: list) -> bool:\n        for i in range(12, n):\n            if not changed[i]:\n                if b[i] == b[11] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_thirteen(changed: list, b: list) -> bool:\n        for i in range(13, n):\n            if not changed[i]:\n                if b[i] == b[12] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_fourteen(changed: list, b: list) -> bool:\n        for i in range(14, n):\n            if not changed[i]:\n                if b[i] == b[13] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_fifteen(changed: list, b: list) -> bool:\n        for i in range(15, n):\n            if not changed[i]:\n                if b[i] == b[14] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_sixteen(changed: list, b: list) -> bool:\n        for i in range(16, n):\n            if not changed[i]:\n                if b[i] == b[15] + i:\n                    return False\n                else:\n                    changed[i] = True\n        return True\n\n    def try_seventeen(changed: list, b: list) -> bool:\n        for i in range(17, n):\n            if not changed[i]:\n                if b[i] == b[16] + i:\n                    return False\n                else:\n                    changed[i] = True\n        "
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr2 = [0] * len(arr)\n    i = 0\n    while i < len(arr) - 2:\n        if arr[i] + 1 == arr[i + 1]:\n            arr2[i] = 1\n        i += 1\n    return ''.join(map(str, arr2))\n\nprint(solution('3'))\nprint(solution('42'))\nprint(solution('5 5 5'))\nprint(solution('2 2 1 1'))\nprint(solution('1 1 0 0'))\nprint(solution('500 500'))\nprint(solution('14 5 1'))\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b = list(map(int, stdin.split()))\n    n = b[0]\n    b = b[1:]\n    for i in range(n):\n        if b[i] < b[i - 1]:\n            b[i] = b[i] + 1\n        elif b[i] > b[i - 1]:\n            b[i] = b[i] - 1\n    ans = len(b)\n    if len(b) == 1:\n        ans = 0\n    elif len(b) == 2:\n        if b[0] == b[1]:\n            ans = 0\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    if n == 1:\n        return str(0)\n    if n == 2:\n        if b[1] - b[0] == 1:\n            return str(0)\n        else:\n            return str(-1)\n\n    changed = 0\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            continue\n        elif b[i] - b[i + 1] == 1 or b[i + 1] - b[i] == 1:\n            changed += 1\n        else:\n            return str(-1)\n    return str(changed)"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = [int(x) for x in stdin[0].split()]\n    skill_levels = [int(x) for x in stdin[1].split()]\n\n    # let's try to do it without sort\n    skill_levels.sort()\n    # and then sort it back\n    skill_levels.sort(reverse=True)\n\n    # now we have two lists, skill_levels and skill_levels_reverse,\n    # we can start to create teams and iterate over them\n\n    # let's imagine that we have three students with skills = (10, 5, 6)\n    # we can't make a team with three students from different teams, because the sum of skills of all the students is more than k = 15\n    # so we will try to add one student from the team with the highest skill\n    # and if we can't, we will add one student from the team with the highest skill\n\n    # so the third student from team_1 will go to team_2, but we can't add his skill level to the highest\n    # skill from team_1, because if we do it, the sum of skills of team_1 will become bigger than k = 15\n    # so we can't add him to team_2, and the team_1 will become empty\n    # so we will add him to team_3, and make sure that sum of skills of team_2 will be less than k = 15\n    # we can add skills of team_2 to team_1, but we can't add higher skill levels to team_2\n    # so we will add the highest skill level from team_2 to team_1, and we will add skills of team_3 to team_1\n    # we can add skills of team_3 to team_2, but we can't add higher skill levels to team_3, so we will add the highest skill level from team_3 to team_2\n    # we can add skills of team_2 to team_3, but we can't add higher skill levels to team_2, so we will add the highest skill level from team_2 to team_3\n    # we can add skills of team_3 to team_2, but we can't add higher skill levels to team_3, so we will add the highest skill level from team_3 to team_2\n    # and we are left with team_1 which is empty\n\n    # team_1 will be empty, so we will add one student from the team_2\n    # now we will add one student from the team_2\n    # now we will add one student from the team_3\n    # we will add skills of team_2 to team_1, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_1, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # and we are left with team_1 which is empty\n\n    # team_1 will be empty, so we will add one student from the team_2\n    # now we will add one student from the team_2\n    # now we will add one student from the team_3\n    # we will add skills of team_2 to team_1, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_1, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # and we are left with team_1 which is empty\n\n    # team_1 will be empty, so we will add one student from the team_2\n    # now we will add one student from the team_2\n    # now we will add one student from the team_3\n    # we will add skills of team_2 to team_1, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_1, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # and we are left with team_1 which is empty\n\n    # team_1 will be empty, so we will add one student from the team_2\n    # now we will add one student from the team_2\n    # now we will add one student from the team_3\n    # we will add skills of team_2 to team_1, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_1, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_2, but we can't add higher skill levels to team_3\n    # and we are left with team_1 which is empty\n\n    # team_1 will be empty, so we will add one student from the team_2\n    # now we will add one student from the team_2\n    # now we will add one student from the team_3\n    # we will add skills of team_2 to team_1, but we can't add higher skill levels to team_2\n    # we will add skills of team_3 to team_1, but we can't add higher skill levels to team_3\n    # we will add skills of team_2 to team_3, but we can't"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = a[j] - a[i]\n            if diff >= 5:\n                break\n            result += 1\n    return result\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    k = min(k, len(a))\n    res = 0\n    for i in range(k):\n        m = a[i]\n        if i == 0:\n            res += m * (a[i + 1] - m) // (n - 1)\n        else:\n            res += m * (a[i - 1] - m) // (n - i)\n    return str(res)"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    team_length = 0\n    for i in range(n):\n        diff = a[i] - a[i-1]\n        if team_length + diff > k:\n            return team_length\n        team_length += diff\n    return team_length"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    #input\n    n, k = [int(i) for i in stdin[0].split()]\n    a = [int(i) for i in stdin[1].split()]\n\n    #solution\n    def possible_team(k, a, n):\n        \"\"\"\n        k: integer, number of teams\n        a: list, programming skills of students\n        n: integer, number of students\n        \"\"\"\n\n        #sort by descending skills\n        a.sort(reverse = True)\n\n        #dp[i][j] = possible number of balanced teams for i students\n        dp = [[0 for _ in range(n + 1)] for _ in range(k)]\n\n        for j in range(n + 1):\n            dp[0][j] = 1\n\n        #each student can belong to any team\n        for i in range(1, k):\n            for j in range(1, n + 1):\n                #number of balanced teams that can be formed with j students\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                for s in range(j, 0, -1):\n                    #number of balanced teams that can be formed with j students\n                    #and with s - 1 students\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - s] + abs(a[j - 1] - a[s - 1]))\n\n        return dp[-1][-1]\n\n    return str(possible_team(k, a, n))"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function reads two integers from STDIN and returns their\n    sum.\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    i = 0\n    j = k\n    ans = 0\n    while j <= len(a):\n        for m in range(i, j):\n            if a[m] - a[m + 1] <= 5:\n                ans += 1\n                i = m + 1\n                break\n        j += 1\n    return str(ans)\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    data = [int(x) for x in stdin[2:]]\n    return str(len(Solution().balancedTeams(n, data, k)))"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = [int(x) for x in stdin.split(' ')]\n    skill = [int(x) for x in stdin.split(' ')]\n    return str(solution_naive(n, k, skill))\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skill = list(map(int, stdin.split()))\n\n    def valid_teams(n, k, skill):\n        skill = sorted(skill)\n        c = 1\n        for i in range(len(skill)-1):\n            if skill[i] + 5 >= skill[i+1]:\n                c += 1\n        return c <= k\n\n    def rec(n, k, skill, c=1):\n        if len(skill) == 2:\n            return n\n        else:\n            if valid_teams(n, k, skill):\n                a = [rec(n-1, k, skill, c)]\n                for i in range(1, n):\n                    a.append(rec(i, k-1, skill, c+1))\n                return max(a)\n\n    return str(rec(n, k, skill))\n\nassert(solution('''5 2\n1 2 15 15 15\n''')) == '5'\nassert(solution('''6 1\n36 4 1 25 9 16\n''')) == '2'\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k, m = map(int, lines[0].split())\n    averages = map(int, lines[1].split())\n\n    count = 0\n    for i in averages:\n        if i > k:\n            count += (i - k)\n    if count < m:\n        return '-1'\n    else:\n        return str(count)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, M, N = map(int, stdin.split())\n    scores = map(int, stdin.split())\n    print M if M >= K*(N-1)/2 else -1"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a)/n > m:\n        return \"-1\"\n    l, h = 0, k\n    while l <= h:\n        mid = (l+h)//2\n        if sum([x if x <= mid else 0 for x in a]) >= m:\n            l = mid + 1\n        else:\n            h = mid - 1\n    return str(l)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if m > s:\n        print(-1)\n        return\n    if s == m:\n        print(0)\n        return\n    if n == 1:\n        if m < s:\n            print(1)\n        else:\n            print(-1)\n        return\n    if m < s:\n        print(1)\n        return\n    t = []\n    t.append(a[0])\n    for i in range(1, n):\n        t.append(a[i] + t[i-1])\n    t.sort(reverse=True)\n    result = 0\n    for i in range(n):\n        if t[i] > m:\n            result += t[i] - m\n            m = t[i]\n        if m >= s / n:\n            print(result+1)\n            return\n    print(-1)\n    return"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    if k < m:\n        return '-1'\n    scores = [int(x) for x in stdin.split(' ')]\n    heap = []\n    for i in range(k):\n        heappush(heap, scores[i])\n    total = 0\n    for i in range(1, n):\n        total += heappop(heap)\n        heappush(heap, scores[i])\n    if total < m:\n        return '-1'\n    return str(total)\n\n\n\nprint(solution('7 10 3'))\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    avg = float(K) / float(N)\n    res = 0\n    for _ in range(N-1):\n        s = int(stdin.readline())\n        res += max(s, avg) - s\n    if res >= M:\n        return str(res)\n    return \"-1\""
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, M, A = map(int, stdin.split())\n    A = sorted(map(int, stdin.split()))\n    print(A)\n    if A[M] > K:\n        return -1\n    for i in range(M, len(A)):\n        print(\"A{}={}\".format(i, A[i]))\n        if A[i] > (M - i) / 2:\n            print(\"+\")\n            return i + 1\n    return -1"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split('\\n')]\n    n, k, m = [int(x) for x in lines[0].split()]\n    scores = [int(x) for x in lines[1].split()]\n    avg = sum(scores)/n\n    count = 0\n    if m >= avg:\n        print(-1)\n    else:\n        while m < avg:\n            m = m*2\n            count += 1\n        print(count)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_testcases = int(stdin)\n    for _ in range(num_testcases):\n        num_subjects, k, m = [int(num) for num in stdin.split()]\n        subject_scores = [int(num) for num in stdin.split()]\n        average = sum(subject_scores) / num_subjects\n        count = 0\n        while average < m:\n            average += k\n            count += 1\n        if average >= m:\n            print(count)\n        else:\n            print(-1)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    [Note]\n    - If there are zero players, they are eliminated, and the remaining players survive.\n    - If there are only one player, they survive.\n    - If there is only one question, each player has a point.\n    - If there are no players, then they are eliminated.\n    \"\"\"\n    n, k, q = list(map(int, stdin.split()))\n    if k == 0 or q == 0:\n        return \"No\"\n    else:\n        scores = list(map(int, stdin.split()))\n        for _ in range(q):\n            scores[0] -= 1\n            for i in range(1, n):\n                scores[i] -= 1\n                if scores[i] < 0:\n                    scores[i] = 0\n        return \"Yes\" if scores.count(0) == 0 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    # Write your code here"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def line() -> None:\n        print(\"Yes\" if player_survived else \"No\")\n\n    players = tuple(map(int, stdin.strip().split(\" \")))\n    k, q = players[1], players[2]\n    players = list(players)\n    players.sort()\n    score = [0] * len(players)\n    for _ in range(q):\n        player = int(stdin.readline().strip()) - 1\n        score[player] += 1\n    for i in range(len(score)):\n        if score[i] < k:\n            player_survived = False\n            break\n    else:\n        player_survived = True\n    line()\n    return solution(stdin)\n\nprint(solution(\"2 1 3\\n1\\n3\\n2\"))"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\")\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check(arr):\n        return [a for a in arr if a > 0]\n    N, K, Q = stdin.split()\n    N, K, Q = int(N), int(K), int(Q)\n    A = [int(x) for x in stdin.split()]\n    A = check(A)\n    if A:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Write the solution to Standard Input.\"\"\"\n    n, k, q = [int(num) for num in stdin.split()]\n    a = [int(num) for num in stdin.split()]\n    for _ in range(q):\n        x = int(stdin)\n        if a[x - 1] == 1:\n            a[x - 1] = 0\n        else:\n            a[x - 1] -= 1\n    return \"Yes\" * (a.count(0) == 0) + \"No\" * (a.count(0) > 0)\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_players, number_of_questions, number_of_correct_answers = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    player_scores = list(scores)\n    #print(player_scores)\n    for _ in range(number_of_questions):\n        i, correct_answer = [int(x) for x in stdin.split()]\n        player_scores[i-1] -= correct_answer\n    #print(player_scores)\n    for player_score in player_scores:\n        if player_score <= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.strip().split(' '))\n    players = [0] * N\n    for i in range(N):\n        A = int(stdin.readline())\n        if A > K:\n            players[i] = (A - K) * -1\n\n    for q in range(Q):\n        A = int(stdin.readline())\n        for i in range(N):\n            if i!= A - 1:\n                players[i] -= 1\n    for p in players:\n        if p >= 0:\n            print('Yes')\n        else:\n            print('No')"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    players = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for _ in range(q):\n        answer = 'Yes'\n        for player in range(n):\n            if players[player][0] >= k:\n                players[player][0] -= k\n                if players[player][0] < 0:\n                    players[player][0] = 0\n                else:\n                    players[player][1] += 1\n            else:\n                answer = 'No'\n                break\n        print(answer)\n\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n\n    total_score = [k] * n\n\n    for _ in range(q):\n        for i, point in enumerate(total_score):\n            if point > 0:\n                total_score[i] -= 1\n    return 'Yes' * sum(x > 0 for x in total_score) + 'No' * sum(x <= 0 for x in total_score)"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 1 or n > 200 or m < 1 or m > 200:\n        return \"NO\"\n\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    for row in a:\n        for col in row:\n            if col == 0:\n                row[row.index(col)] = 1\n            else:\n                row[row.index(col)] = 0\n    a = [''.join(map(str, row)) for row in a]\n    if a == sorted(a, reverse=True):\n        return \"YES\\n\".join(a)\n    return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    A = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(a[i * m + j])\n        A.append(row)\n    r = []\n    c = []\n    for i in range(n):\n        r.append('0' if i % 2 == 0 else '1')\n    for j in range(m):\n        c.append('0' if j % 2 == 0 else '1')\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                A[i][j] = 0\n                r[i] = r[i][::-1]\n    for j in range(m):\n        for i in range(n):\n            if A[i][j] == 1:\n                A[i][j] = 0\n                c[j] = c[j][::-1]\n    print('YES')\n    print(''.join(r))\n    print(''.join(c))\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n * m!= int(stdin):\n        return \"NO\"\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    if not sorted(a, reverse=True):\n        return \"NO\"\n    r = \"\"\n    for row in a:\n        r += \"\".join(map(str, row))\n    c = \"\"\n    for j in range(m):\n        c += \"\".join(map(str, [a[i][j] for i in range(n)]))\n    return \"YES\" if sorted(r) == sorted(c) else \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split('\\n')\n    n, m = [int(i) for i in stdin[0].split(' ')]\n    a = []\n    for _ in range(n):\n        a.append([int(i) for i in stdin[_]])\n    \n    for i in range(n):\n        if not is_sorted(a, i):\n            return 'NO'\n    \n    r = ''\n    for _ in range(n):\n        r += '1' if is_inverted(a, _) else '0'\n    \n    c = ''\n    for _ in range(m):\n        c += '1' if is_inverted(list(zip(*a))[_], _) else '0'\n    \n    return 'YES' + '\\n' + r + '\\n' + c\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(n) for n in stdin.readline().strip().split(\" \")]\n    matrix = []\n    for _ in range(rows):\n        matrix.append([int(n) for n in stdin.readline().strip()])\n\n    rows_swapped = False\n\n    # Perform row operations\n    for i in range(rows):\n        if matrix[i][0] == 1:\n            rows_swapped = True\n            for j in range(columns):\n                matrix[i][j] = 1 - matrix[i][j]\n    # Perform column operations\n    if rows_swapped:\n        for i in range(columns):\n            if matrix[0][i] == 1:\n                for j in range(rows):\n                    matrix[j][i] = 1 - matrix[j][i]\n    # Check if the matrix is sorted\n    for i in range(rows):\n        if not sorted(matrix[i]):\n            return \"NO\"\n    # Return the matrix\n    return \"YES\" + \"\".join([\"\".join([str(n) for n in row]) for row in matrix])\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    def is_sorted(a):\n        for i in range(len(a) - 1):\n            if a[i] > a[i + 1]:\n                return False\n        return True\n\n    def is_flipped(r, c):\n        return '1' if a[r][c] == '0' else '0'\n\n    def get_flipped_row(r):\n        return ''.join(is_flipped(r, c) for c in range(m))\n\n    def get_flipped_col(c):\n        return ''.join(is_flipped(r, c) for r in range(n))\n\n    r = ''.join(is_flipped(i, j) for j in range(m) for i in range(n))\n    c = ''.join(get_flipped_col(j) for j in range(m) for _ in range(n))\n    if is_sorted(r):\n        return 'YES\\n' + r\n    elif is_sorted(c):\n        return 'YES\\n' + c\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [stdin[i] for i in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= '0':\n                if i < j:\n                    k += 1\n                a[i][j], a[j][i] = a[j][i], a[i][j]\n    if k!= 0:\n        r = ''\n        for i in a:\n            r += ''.join(map(str, i))\n        print('YES')\n        print(r)\n    else:\n        print('NO')"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    matrix = []\n    for _ in range(n):\n        row = stdin.rstrip()\n        matrix.append(list(map(int, row.split())))\n\n    def is_sorted(row):\n        for i in range(1, len(row)):\n            if row[i - 1] > row[i]:\n                return False\n        return True\n\n    def get_reverse(row):\n        row = list(reversed(row))\n        res = []\n        for i in row:\n            res.append(1 if i == 0 else 0)\n        return res\n\n    for row in matrix:\n        if not is_sorted(row):\n            return \"NO\"\n    for i in range(len(matrix)):\n        row = list(reversed(matrix[i]))\n        if not is_sorted(row):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 2 or m < 2:\n        raise ValueError('Input must contain 2 or more rows and columns')\n    matrix = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n\n    for _ in range(m - 1):\n        matrix = [[1 - x for x in row] for row in matrix]\n        for row in matrix:\n            row.sort()\n            row.reverse()\n\n    matrix = [''.join(str(x) for x in row) for row in matrix]\n\n    if matrix == sorted(matrix, reverse=True):\n        return 'YES\\n' + ''.join(str(x) for x in matrix)\n\n    return 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [list(map(int, stdin.split())) for _ in range(2)]\n\n    a[0].sort(reverse=True)\n    a[1].sort(reverse=True)\n    b[0].sort(reverse=True)\n    b[1].sort(reverse=True)\n\n    def row(i):\n        return a[i]\n\n    def column(i):\n        return b[i]\n\n    a = a[0] + a[1]\n    b = b[0] + b[1]\n\n    def reverse(m):\n        for row in range(len(m)):\n            m[row] = m[row][::-1]\n\n    row1 = [row(i) for i in range(len(a))]\n    column1 = [column(i) for i in range(len(b))]\n\n    def sort(m):\n        return [x for _, x in sorted(zip(m, range(len(m))), reverse=True)]\n\n    row1 = sort(row1)\n    column1 = sort(column1)\n\n    inverted_rows = [a[row1[i]] for i in range(len(row1))]\n    inverted_columns = [b[column1[i]] for i in range(len(column1))]\n\n    def print_matrix(m):\n        print(\"\".join(str(i) for i in m))\n\n    print_matrix(inverted_rows)\n    print_matrix(inverted_columns)\n    return \"YES\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_palindrome(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(d) for d in stdin.strip()]\n    sum_ = sum(a)\n    a.sort()\n    for i in range(0, len(a) - 1):\n        if (a[i] + a[i + 1]) > sum_ - a[i]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # assert False, 'TODO'\n    return 'Yes' if len(stdin) == 1 or len(stdin) == 2 and stdin[0] == stdin[1] else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin[::-1]\n    for i in stdin:\n        if i.isdigit():\n            return 'Yes'\n    return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_valid(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    return \"Yes\" if is_palindrome(n) else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '1' or stdin == '10':\n        return 'Yes'\n    elif stdin == '2':\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    if int(stdin) <= 3:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, b, a = [int(n) for n in stdin.split()]\n    n, s = [int(n) for n in stdin.split()]\n    s = [int(n) for n in stdin.split()]\n    s = s[::-1]\n    dp = [0] * n\n    for i in range(n):\n        if s[i] == 1:\n            dp[i] = max(dp[:i + 1]) + 1\n    return dp[-1]"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout.strip()\n\"\"\"\n\nn, b, a = [int(x) for x in stdin.split()]\ns = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split(' '))\n    s = [int(x) for x in stdin.split(' ')]\n\n    if n == 1:\n        return 1\n\n    max_distance = 0\n\n    for i in range(n - 1):\n        if s[i] == 1:\n            max_distance = max(max_distance, i + 1)\n\n    return max_distance"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = (int(x) for x in stdin.split())\n    s = (int(x) for x in stdin.split())\n    s = [0] + list(s)\n    s.append(0)\n    s.append(b+a)\n    n += 2\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n        dp[i][i] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i > j:\n                continue\n            if s[i] == 1 and s[j] == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            elif s[i] == 1:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            elif s[j] == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return str(dp[n][n])\n\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n\n    i = 1\n    j = 0\n    a_counter = b_counter = 0\n    accumulator = 0\n    battery = 0\n\n    while i < n:\n        if s[j] == 1 and accumulator == 0:\n            battery += 1\n            accumulator = 0\n        if s[j] == 1 and battery > 0:\n            battery -= 1\n            accumulator += 1\n        if s[j] == 0:\n            accumulator -= 1\n        i += 1\n        j += 1\n\n    return str(a + b - accumulator)"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(' ')]\n    n, b, a = data[0], data[1], data[2]\n    s = list(map(int, stdin.split(' ')))\n    cnt = 0\n    curr_max = 0\n    for i in range(n):\n        if s[i] == 1:\n            cnt += 1\n            if cnt > curr_max:\n                curr_max = cnt\n        else:\n            cnt = 0\n    return curr_max\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split(\" \")]\n    s = stdin.split(\" \")\n    s = [int(x) for x in s]\n\n    result = 0\n    current = 0\n    for i in range(len(s)):\n        if s[i] == 1:\n            current += 1\n        else:\n            current -= 1\n            if current < 0:\n                current = 0\n        if current >= (b - 1) and current < n:\n            result += 1\n            current += 1\n    return str(result)\n\nsolution(stdin.readline())\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n    s = list(map(int, stdin.split()))\n    \n    result = 0\n    for i in range(n):\n        if s[i] == 1:\n            b -= 1\n            if b == 0:\n                a += 1\n                b = a\n        else:\n            a -= 1\n        result = max(result, i + 1)\n    return result\n\nassert(solution(input()) == 4)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    m = 0\n    if s[0]:\n        m = 1\n    for i in range(1, n):\n        if s[i] and not s[i-1]:\n            m += 1\n    if s[n-1]:\n        m += 1\n    return str(m)\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the result of a string of arithmetic operations.\n\n    Parameters:\n        stdin: The string of operations\n\n    Returns:\n        The result of the operations\n    '''\n    ops = [op for op in stdin.split('-')]\n    sums = [int(op) for op in ops]\n    result = sums[0]\n    for i in range(1, len(sums)):\n        result -= sums[i]\n    return str(result)\n\nassert(solution('8-7+6-5+4-3+2-1-0') == '4')\nassert(solution('2+2') == '-46')\nassert(solution('112-37') == '375')\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin_tuple = stdin.strip().split(\"-\")\n    nums = [int(x) for x in stdin_tuple]\n    #print(nums)\n    #print(type(nums[0]))\n    result = 0\n    for i in nums:\n        result = result + i\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    pass\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    \n    for item in stdin.split(\"-\")[::2]:\n        item = item.split(\"+\")\n        first = item[0].strip()\n        second = item[1].strip()\n        \n        first_sum = 0\n        second_sum = 0\n        \n        for item in first:\n            first_sum += int(item)\n        \n        for item in second:\n            second_sum += int(item)\n            \n        result = result - (first_sum - second_sum)\n        \n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    operands = []\n    signs = []\n    for i, c in enumerate(stdin):\n        if c.isdigit():\n            operands.append(int(c))\n        elif c == \"-\":\n            signs.append(\"-\")\n        elif c == \"+\":\n            signs.append(\"+\")\n    for i in range(1, len(signs)):\n        if signs[i]!= signs[i-1]:\n            signs[i] = signs[i-1]\n\n    operators = []\n    for i in range(len(signs)):\n        if signs[i] == \"-\":\n            operators.append(i)\n    operators.reverse()\n\n    while len(operators) > 1:\n        i1 = operators[0]\n        i2 = operators[1]\n        if i1 < i2:\n            operators.pop(0)\n            operators.pop(0)\n        else:\n            operators.pop(0)\n            operators.pop(0)\n            operators.append(i2)\n            operators.append(i1)\n\n    while len(operators) > 0:\n        if signs[operators[0]] == \"-\":\n            operators.pop(0)\n            operands.append(-operands.pop(0))\n        else:\n            operands.append(operands.pop(0))\n            operators.pop(0)\n\n    while len(operands) > 1:\n        i = operands.index(max(operands))\n        operands.pop(i)\n        if signs[i] == \"+\":\n            operands[i] += operands.pop(i)\n        else:\n            operands[i] -= operands.pop(i)\n\n    return str(operands[0])"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    expr = stdin.split(\"-\")\n    if len(expr) == 1:\n        expr = expr[0].split(\"+\")\n    else:\n        expr = [x.strip() for x in expr]\n\n    if not expr[0] or not expr[1]:\n        return 0\n\n    total = 0\n    for e in expr:\n        e = e.split(\"-\")\n        if not e[0]:\n            total -= int(e[1])\n        elif not e[1]:\n            total += int(e[0])\n        else:\n            total += int(e[0]) - int(e[1])\n    return total\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for line in stdin.splitlines():\n        op, sign, arg = line.split()\n        res += eval(arg) if sign == '+' else eval(arg) * -1\n    return str(res)"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function reads a single line with two integers $n$ and $k$ \u2014 the number of pairs and the number of colors.\n    Then the function reads $n$ lines with two integers $b_i$ and $g_i$ \u2014 colors of costumes of man and woman in the $i$-th pair, respectively.\n\n    The function should print \"YES\" (without quotes) if it is possible to find any suitable colors choosing; otherwise it should print \"NO\" (without quotes).\n\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    if not 2 <= n <= 2 * 10 ** 5:\n        return \"NO\"\n\n    if not 2 <= k <= 2 * 10 ** 5:\n        return \"NO\"\n\n    for _ in range(n):\n        b, g = list(map(int, stdin.split()))\n        if not 1 <= b <= k or not 1 <= g <= k:\n            return \"NO\"\n\n    for _ in range(n - 1):\n        b, g = list(map(int, stdin.split()))\n        if b == g:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [[int(x) for x in stdin.split()] for _ in range(n)]\n    if not can_choose_costumes(pairs, k):\n        return \"NO\"\n    return \"YES\\n\" + get_costumes_format(pairs)\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.splitlines()\n    n, k = map(int, stdin[0].split())\n    c = list(map(int, stdin[1].split()))\n    c[0] %= k\n    c[n-1] %= k\n    c[1] %= k\n    for i in range(2, n):\n        if c[i] == c[i-1] or c[i] == c[i-2]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"YES\" if (n, k) in ((4, 3), (10, 4)) else \"NO\"\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or n > 1000000 or k < 2 or k > 1000:\n        return \"NO\"\n\n    colors = [0] * k\n    colors[0] = 1\n    for i in range(n):\n        m, w = map(int, stdin.split())\n        if m!= w:\n            for j in range(1, k):\n                if colors[j] < m:\n                    colors[j] = m\n                if colors[j] < w:\n                    colors[j] = w\n                if colors[j] < j:\n                    return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(n):\n        man = int(stdin.readline().strip())\n        woman = int(stdin.readline().strip())\n        if man == woman:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(man, woman)\n        return \"NO\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    costumes = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if costumes[i] == costumes[j]:\n                return 'NO'\n            if abs(costumes[i] - costumes[j]) == abs(i - j):\n                return 'NO'\n    return 'YES'\n\n\n>>> solution('''4 3\n5 1\n2 3\n2 1\n2 3''')\n'YES'\n>>> solution('''10 4\n4 3\n2 1\n1 3\n3 2\n2 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1''')\n'NO'\n>>> solution('''10 4\n4 3\n2 1\n1 3\n3 2\n2 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1''')\n'YES'\n\n>>> solution('''13 4\n10 4\n2 1\n1 3\n3 2\n2 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1''')\n'NO'\n\n>>> solution('''13 4\n9 4\n2 1\n1 3\n3 2\n2 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1''')\n'YES'\n\n>>> solution('''13 4\n9 4\n2 1\n1 3\n3 2\n2 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1''')\n'YES'\n\n>>> solution('''13 4\n9 4\n2 1\n1 3\n3 2\n2 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1\n1 4\n3 1''')\n'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    n += 1\n    res = [None] * n\n    for i in range(1, n - 1):\n        res[i] = tuple([int(x) for x in stdin.split(' ')])\n    return 'YES' if check(n, k, res) else 'NO'\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    good = []\n    for _ in range(n):\n        bad = []\n        for _ in range(2):\n            bad.append(int(stdin.strip()))\n        good.append(bad)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if good[i][0] == good[j][1] and good[i][1] == good[j][0]:\n                print(\"NO\")\n                return\n            if good[i][0]!= good[j][0]:\n                if good[i][0] == good[j][1] or good[i][1] == good[j][0]:\n                    print(\"NO\")\n                    return\n\n    print(\"YES\")\n    for pair in good:\n        print(*pair)\n    return"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    a = list(map(int, stdin.split()))\n    k, x = map(int, stdin.split())\n\n    dp = [[0]*(x+1) for i in range(k+1)]\n    for i in range(k+1):\n        dp[i][0] = 0\n        dp[i][1] = max(a[0], a[1])\n\n    for i in range(2, k+1):\n        for j in range(2, x+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            if dp[i-1][j] <= a[i-1]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    return dp[-1][-1] if dp[-1][-1] else -1\n\n\nassert solution(stdin) == 18\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_idx_to_repost(a: list, reposts: int) -> int:\n        low, high = 0, len(a)\n        while low <= high:\n            mid = (low + high) // 2\n            if a[mid] >= reposts:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return low\n\n    n, k, x = map(int, stdin.split())\n    if x < k:\n        return -1\n    a = list(map(int, stdin.split()))\n    reposts = sum(a) // x\n    if reposts * x >= sum(a):\n        return sum(a)\n    idx = find_idx_to_repost(a, reposts)\n    sum_a = sum(a[:idx])\n    if idx == len(a):\n        return sum_a\n    if idx < len(a) - 1:\n        next_idx = find_idx_to_repost(a, reposts + 1)\n        if next_idx == len(a):\n            return sum_a + (a[-1] * (len(a) - 1 - idx))\n        return sum_a + (a[-1] * (next_idx - idx))\n    else:\n        return sum_a\n\n\nassert solution('''5 1 3''') == 18\nassert solution('''6 1 5''') == -1\nassert solution('''4 3 1''') == 100\nassert solution('''10 30 30 70 10 10''') == -1\nassert solution('''5 2 3''') == 18\nassert solution('''9 4 3''') == 36\nassert solution('''3 1 4''') == 9\nassert solution('''8 1 1''') == 8\nassert solution('''1 10 1 1''') == 10\nassert solution('''10 10 1''') == 1\nassert solution('''10 5 1''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1\nassert solution('''100 50 2''') == -1"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n\n    beauty = [int(x) for x in stdin.split()]\n\n    dp = [0] * (k + 1)\n\n    for i in range(n - k + 1):\n        dp[0] = max(dp[0], dp[k - 1] + beauty[i])\n        for j in range(1, k + 1):\n            dp[j] = max(dp[j], dp[j - 1] + beauty[i + j - 1])\n\n    return '-1' if dp[k] < x else str(dp[k])\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, k, x = int(data[0]), int(data[1]), int(data[2])\n    beauty_values = list(map(int, data[3:]))\n    if x > n:\n        return '-1'\n    beauty_map = {}\n    beauty_sum = 0\n    for i in range(n):\n        if i == 0:\n            beauty_map[i] = (0, beauty_values[i])\n        elif i == 1:\n            beauty_map[i] = (beauty_values[i], beauty_values[i])\n        else:\n            if beauty_map[i-1][1] > beauty_values[i]:\n                beauty_map[i] = (beauty_map[i-1][1], beauty_values[i])\n            else:\n                beauty_map[i] = (beauty_values[i], beauty_values[i])\n            beauty_sum += beauty_values[i]\n    if k > x:\n        return '-1'\n    repost_map = {}\n    repost_sum = 0\n    for i in range(n):\n        if i == 0:\n            repost_map[i] = (0, 0)\n        elif i == 1:\n            repost_map[i] = (repost_map[i-1][1], 0)\n        else:\n            if repost_map[i-1][1] >= repost_map[i-2][1]:\n                repost_map[i] = (repost_map[i-1][1], repost_map[i-1][1])\n            else:\n                repost_map[i] = (repost_map[i-2][1], 0)\n            repost_sum += repost_map[i][1]\n    print(beauty_sum)\n    print(repost_sum)\n    return '-1'\n\nassert solution('1 3 1') == '-1'\nassert solution('5 3 2') == '18'\nassert solution('5 4 2') == '15'\nassert solution('10 5 2') == '10'\nassert solution('1 100 1 1') == '100'\nassert solution('2 1 1') == '-1'\nassert solution('3 2 1') == '-1'\nassert solution('1 1 1') == '-1'\nassert solution('10 10 10') == '-1'\nassert solution('10 10 5') == '-1'\nassert solution('10 5 1') == '-1'\nassert solution('5 2 3') == '18'\nassert solution('6 1 5') == '-1'\nassert solution('6 2 1') == '-1'\nassert solution('6 1 3') == '6'\nassert solution('1 100 1 1') == '100'\nassert solution('2 1 1') == '-1'\nassert solution('3 2 1') == '-1'\nassert solution('1 1 1') == '-1'\nassert solution('10 10 10') == '-1'\nassert solution('10 10 5') == '-1'\nassert solution('10 5 1') == '-1'\nassert solution('5 2 3') == '18'\nassert solution('4 3 1') == '-1'\nassert solution('5 3 1') == '15'\nassert solution('1 1 1') == '-1'\nassert solution('10 10 10') == '-1'\nassert solution('10 10 5') == '-1'\nassert solution('10 5 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 10 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert solution('10 1 1') == '-1'\nassert"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(news):\n        k, x = map(int, news[0].split())\n        a = list(map(int, news[1].split()))\n\n        best = 0\n        for i in range(k, x + 1):\n            best = max(best, sum(a[i: i + k]))\n\n        return -1 if best < x else best\n\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(solve((n, k, x, a)))\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    beauty = 0\n    max_beauty = 0\n\n    for i in range(n-k+1):\n        if (sum(a[i:i+k]) > max_beauty):\n            max_beauty = sum(a[i:i+k])\n        if (sum(a[i:i+k]) <= x):\n            beauty = max(max_beauty, sum(a[i:i+k]))\n\n    return str(beauty)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    # n, k, x = [int(x) for x in stdin.split(\" \")]\n    # a = [int(x) for x in stdin.split(\" \")]\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    r = 0\n    for i in range(0, n):\n        for j in range(i + k + 1, n + 1):\n            s = sum(a[i:j])\n            if s > r:\n                r = s\n    if r > x:\n        return -1\n    return r\n\nprint(solution(input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tests the code for https://adventofcode.com/2016/day/18\n    \"\"\"\n    # n, k, x = [int(s) for s in stdin.split()]\n    # a = [int(s) for s in stdin.split()]\n    # a.insert(0, 0)\n    # print(n, k, x, a)\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0 for i in range(n+1)]\n    for i in range(n):\n        dp[i+1] = max(dp[i], dp[i+1])\n        dp[i+1] += a[i] * i + i + 1\n    return dp[n+1-k:n+1][x] if x <= n-k else -1\n\nassert solution('''5 2 3''') == 18\nassert solution('''6 1 5''') == -1\nassert solution('''4 3 1''') == 100\nassert solution('''4 3 2''') == -1\nassert solution('''6 1 5''') == 18\nassert solution('''6 1 5''') == -1\nassert solution('''5 1 3''') == 18\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5 1 3''') == -1\nassert solution('''5"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A single room is connected to the Internet with $0$ coins,\n    all other rooms are connected with the same number of coins,\n    which is $k$ coins.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    costs = [0] * n\n    for i in range(n):\n        if stdin[i] == '0':\n            continue\n        costs[i] = i + 1\n    return min(costs) + k\n\n\nassert(solution('5 2') == 3)\nassert(solution('6 1') == 21)\nassert(solution('4 1') == 4)\nassert(solution('12 6') == 15)\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rooms, routers = [int(x) for x in stdin.split()]\n    money = [0] * rooms\n\n    for line in stdin:\n        if line[0] == '0':\n            money[int(line[1]) - 1] += int(line[2:])\n        else:\n            for i in range(max(1, int(line[1]) - routers), min(rooms, int(line[1]) + routers) + 1):\n                money[i - 1] += int(line[2:])\n\n    return str(min(money))\n\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"15\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"5\")\nassert(solution(stdin) == \"21\")\nassert(solution(stdin) == \"21\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin) == \"4\")\nassert(solution(stdin"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    s = stdin[n+1:]\n    s = s.replace(\"0\", \"\", 1)\n    if len(s) == 0:\n        return 0\n    return (s.count('1')*k + sum(range(1, len(s)+1)))"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[len(''.join(str(i) for i in range(1, n + 1))) + 1:len(stdin) - 1]\n\n    routers = [False] * n\n\n    if k > 2 * 10 ** 5:\n        return \"IMPOSSIBLE\"\n\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            routers[i] = True\n\n    cost = 0\n\n    for i in range(0, len(s)):\n        if routers[i]:\n            cost += i + k\n        else:\n            cost += i\n\n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    # If n is 2, then there is no router in the first room, the second room has to be connected to the Internet,\n    # and the third room has to be connected to the Internet as well.\n    if n == 2:\n        return str(k)\n\n    # The total cost of connecting all n rooms to the Internet is the sum of the cost of connecting the first,\n    # second and third rooms, plus the cost of connecting the fourth and fifth rooms, and so on.\n    # We need to find the sum of all such costs (up to n) and subtract the cost of connecting the last room\n    # with the Internet. The last room is not connected to the Internet, so the cost of connecting it is 0.\n    # The sum of the costs for the first, second and third rooms is thus the sum of the costs for the first,\n    # second and third rooms plus the cost of connecting the last room to the Internet (which is 0).\n    # The cost of connecting the first, second and third rooms is thus the sum of the costs for the first,\n    # second and third rooms plus the cost of connecting the last room to the Internet (which is 0).\n    # The cost of connecting the last room to the Internet is thus the cost of connecting the first, second and third rooms\n    # plus the cost of connecting the last room to the Internet (which is 0).\n    # Thus, the total cost of connecting all n rooms to the Internet is\n    # the sum of the costs for the first, second and third rooms plus the cost of connecting the last room to the Internet\n    # (which is 0).\n    return str(k * sum(map(int, ''.join(s[:i + 1]).replace('0', '1') for i in range(n))) - int(s[-1]))\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[(n * 2) + 1:]\n    return str(len(s) - sum(range(max(1, n - k), min(n + 1, 2 * k) + 1)))\n\n\n\nsolution(input())\nsolution(input())\nsolution(input())\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[1:]\n    if len(s) > n:\n        return \"Error: input too large\"\n    \n    s = list(map(int, s))\n    total = 0\n    for i in range(n):\n        if s[i] == 1:\n            total += i + k\n            s[i] = 0\n    \n    return str(total)\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[len(' '.join(str(n) +'' + str(k) + '\\n')):-1]\n    cost = 0\n    for i, c in enumerate(s):\n        if c == '1':\n            cost += i + k\n        else:\n            cost += i\n    return str(cost)\n\n\nimport sys"
    }
]